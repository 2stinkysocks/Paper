--- a/net/minecraft/network/chat/TextColor.java
+++ b/net/minecraft/network/chat/TextColor.java
@@ -16,25 +16,31 @@
 
     private static final String CUSTOM_COLOR_PREFIX = "#";
     public static final Codec<TextColor> CODEC = Codec.STRING.comapFlatMap(TextColor::parseColor, TextColor::serialize);
-    private static final Map<ChatFormatting, TextColor> LEGACY_FORMAT_TO_COLOR = (Map) Stream.of(ChatFormatting.values()).filter(ChatFormatting::isColor).collect(ImmutableMap.toImmutableMap(Function.identity(), (chatformatting) -> {
-        return new TextColor(chatformatting.getColor(), chatformatting.getName());
+    private static final Map<ChatFormatting, TextColor> LEGACY_FORMAT_TO_COLOR = (Map) Stream.of(ChatFormatting.values()).filter(ChatFormatting::isColor).collect(ImmutableMap.toImmutableMap(Function.identity(), (enumchatformat) -> {
+        return new TextColor(enumchatformat.getColor(), enumchatformat.getName(), enumchatformat); // CraftBukkit
     }));
-    private static final Map<String, TextColor> NAMED_COLORS = (Map) TextColor.LEGACY_FORMAT_TO_COLOR.values().stream().collect(ImmutableMap.toImmutableMap((textcolor) -> {
-        return textcolor.name;
+    private static final Map<String, TextColor> NAMED_COLORS = (Map) TextColor.LEGACY_FORMAT_TO_COLOR.values().stream().collect(ImmutableMap.toImmutableMap((chathexcolor) -> {
+        return chathexcolor.name;
     }, Function.identity()));
     private final int value;
     @Nullable
-    private final String name;
+    public final String name;
+    // CraftBukkit start
+    @Nullable
+    public final ChatFormatting format;
 
-    private TextColor(int i, String s) {
+    private TextColor(int i, String s, ChatFormatting format) {
         this.value = i & 16777215;
         this.name = s;
+        this.format = format;
     }
 
-    private TextColor(int i) {
-        this.value = i & 16777215;
+    private TextColor(int value) {
+        this.value = value & 16777215;
         this.name = null;
+        this.format = null;
     }
+    // CraftBukkit end
 
     public int getValue() {
         return this.value;
@@ -48,36 +54,33 @@
         return String.format(Locale.ROOT, "#%06X", this.value);
     }
 
-    @Override
     public boolean equals(Object object) {
         if (this == object) {
             return true;
         } else if (object != null && this.getClass() == object.getClass()) {
-            TextColor textcolor = (TextColor) object;
+            TextColor chathexcolor = (TextColor) object;
 
-            return this.value == textcolor.value;
+            return this.value == chathexcolor.value;
         } else {
             return false;
         }
     }
 
-    @Override
     public int hashCode() {
         return Objects.hash(new Object[]{this.value, this.name});
     }
 
-    @Override
     public String toString() {
         return this.serialize();
     }
 
     @Nullable
-    public static TextColor fromLegacyFormat(ChatFormatting chatformatting) {
-        return (TextColor) TextColor.LEGACY_FORMAT_TO_COLOR.get(chatformatting);
+    public static TextColor fromLegacyFormat(ChatFormatting formatting) {
+        return (TextColor) TextColor.LEGACY_FORMAT_TO_COLOR.get(formatting);
     }
 
-    public static TextColor fromRgb(int i) {
-        return new TextColor(i);
+    public static TextColor fromRgb(int color) {
+        return new TextColor(color);
     }
 
     public static DataResult<TextColor> parseColor(String s) {
@@ -94,11 +97,11 @@
                 });
             }
         } else {
-            TextColor textcolor = (TextColor) TextColor.NAMED_COLORS.get(s);
+            TextColor chathexcolor = (TextColor) TextColor.NAMED_COLORS.get(s);
 
-            return textcolor == null ? DataResult.error(() -> {
+            return chathexcolor == null ? DataResult.error(() -> {
                 return "Invalid color name: " + s;
-            }) : DataResult.success(textcolor, Lifecycle.stable());
+            }) : DataResult.success(chathexcolor, Lifecycle.stable());
         }
     }
 }
