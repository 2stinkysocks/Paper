--- a/net/minecraft/nbt/ByteArrayTag.java
+++ b/net/minecraft/nbt/ByteArrayTag.java
@@ -1,3 +1,4 @@
+// mc-dev import
 package net.minecraft.nbt;
 
 import java.io.DataInput;
@@ -10,24 +11,22 @@
 public class ByteArrayTag extends CollectionTag<ByteTag> {
 
     private static final int SELF_SIZE_IN_BYTES = 24;
-    public static final TagType<ByteArrayTag> TYPE = new TagType.VariableSize<ByteArrayTag>() {
+    public static final TagType<ByteArrayTag> TYPE = new TagType.b<ByteArrayTag>() {
         @Override
-        @Override
-        public ByteArrayTag load(DataInput datainput, NbtAccounter nbtaccounter) throws IOException {
-            return new ByteArrayTag(readAccounted(datainput, nbtaccounter));
+        public ByteArrayTag load(DataInput datainput, NbtAccounter nbtreadlimiter) throws IOException {
+            return new ByteArrayTag(readAccounted(datainput, nbtreadlimiter));
         }
 
         @Override
-        @Override
-        public StreamTagVisitor.ValueResult parse(DataInput datainput, StreamTagVisitor streamtagvisitor, NbtAccounter nbtaccounter) throws IOException {
-            return streamtagvisitor.visit(readAccounted(datainput, nbtaccounter));
+        public StreamTagVisitor.b parse(DataInput datainput, StreamTagVisitor streamtagvisitor, NbtAccounter nbtreadlimiter) throws IOException {
+            return streamtagvisitor.visit(readAccounted(datainput, nbtreadlimiter));
         }
 
-        private static byte[] readAccounted(DataInput datainput, NbtAccounter nbtaccounter) throws IOException {
-            nbtaccounter.accountBytes(24L);
+        private static byte[] readAccounted(DataInput datainput, NbtAccounter nbtreadlimiter) throws IOException {
+            nbtreadlimiter.accountBytes(24L);
             int i = datainput.readInt();
 
-            nbtaccounter.accountBytes(1L, (long) i);
+            nbtreadlimiter.accountBytes(1L, (long) i);
             byte[] abyte = new byte[i];
 
             datainput.readFully(abyte);
@@ -35,38 +34,35 @@
         }
 
         @Override
-        @Override
-        public void skip(DataInput datainput, NbtAccounter nbtaccounter) throws IOException {
+        public void skip(DataInput datainput, NbtAccounter nbtreadlimiter) throws IOException {
             datainput.skipBytes(datainput.readInt() * 1);
         }
 
         @Override
-        @Override
         public String getName() {
             return "BYTE[]";
         }
 
         @Override
-        @Override
         public String getPrettyName() {
             return "TAG_Byte_Array";
         }
     };
     private byte[] data;
 
-    public ByteArrayTag(byte[] abyte) {
-        this.data = abyte;
+    public ByteArrayTag(byte[] data) {
+        this.data = data;
     }
 
-    public ByteArrayTag(List<Byte> list) {
-        this(toArray(list));
+    public ByteArrayTag(List<Byte> dataList) {
+        this(toArray(dataList));
     }
 
-    private static byte[] toArray(List<Byte> list) {
-        byte[] abyte = new byte[list.size()];
+    private static byte[] toArray(List<Byte> dataList) {
+        byte[] abyte = new byte[dataList.size()];
 
-        for (int i = 0; i < list.size(); ++i) {
-            Byte obyte = (Byte) list.get(i);
+        for (int i = 0; i < dataList.size(); ++i) {
+            Byte obyte = (Byte) dataList.get(i);
 
             abyte[i] = obyte == null ? 0 : obyte;
         }
@@ -75,38 +71,32 @@
     }
 
     @Override
-    @Override
-    public void write(DataOutput dataoutput) throws IOException {
-        dataoutput.writeInt(this.data.length);
-        dataoutput.write(this.data);
+    public void write(DataOutput output) throws IOException {
+        output.writeInt(this.data.length);
+        output.write(this.data);
     }
 
     @Override
-    @Override
     public int sizeInBytes() {
         return 24 + 1 * this.data.length;
     }
 
     @Override
-    @Override
     public byte getId() {
         return 7;
     }
 
     @Override
-    @Override
     public TagType<ByteArrayTag> getType() {
         return ByteArrayTag.TYPE;
     }
 
     @Override
-    @Override
     public String toString() {
         return this.getAsString();
     }
 
     @Override
-    @Override
     public Tag copy() {
         byte[] abyte = new byte[this.data.length];
 
@@ -114,54 +104,46 @@
         return new ByteArrayTag(abyte);
     }
 
-    @Override
     public boolean equals(Object object) {
         return this == object ? true : object instanceof ByteArrayTag && Arrays.equals(this.data, ((ByteArrayTag) object).data);
     }
 
-    @Override
     public int hashCode() {
         return Arrays.hashCode(this.data);
     }
 
     @Override
-    @Override
-    public void accept(TagVisitor tagvisitor) {
-        tagvisitor.visitByteArray(this);
+    public void accept(TagVisitor visitor) {
+        visitor.visitByteArray(this);
     }
 
     public byte[] getAsByteArray() {
         return this.data;
     }
 
-    @Override
     public int size() {
         return this.data.length;
     }
 
-    @Override
     public ByteTag get(int i) {
         return ByteTag.valueOf(this.data[i]);
     }
 
-    @Override
-    public ByteTag set(int i, ByteTag bytetag) {
+    public ByteTag set(int i, ByteTag nbttagbyte) {
         byte b0 = this.data[i];
 
-        this.data[i] = bytetag.getAsByte();
+        this.data[i] = nbttagbyte.getAsByte();
         return ByteTag.valueOf(b0);
     }
 
-    @Override
-    public void add(int i, ByteTag bytetag) {
-        this.data = ArrayUtils.add(this.data, i, bytetag.getAsByte());
+    public void add(int i, ByteTag nbttagbyte) {
+        this.data = ArrayUtils.add(this.data, i, nbttagbyte.getAsByte());
     }
 
     @Override
-    @Override
-    public boolean setTag(int i, Tag tag) {
-        if (tag instanceof NumericTag) {
-            this.data[i] = ((NumericTag) tag).getAsByte();
+    public boolean setTag(int index, Tag nbt) {
+        if (nbt instanceof NBTNumber) {
+            this.data[index] = ((NBTNumber) nbt).getAsByte();
             return true;
         } else {
             return false;
@@ -169,10 +151,9 @@
     }
 
     @Override
-    @Override
-    public boolean addTag(int i, Tag tag) {
-        if (tag instanceof NumericTag) {
-            this.data = ArrayUtils.add(this.data, i, ((NumericTag) tag).getAsByte());
+    public boolean addTag(int index, Tag nbt) {
+        if (nbt instanceof NBTNumber) {
+            this.data = ArrayUtils.add(this.data, index, ((NBTNumber) nbt).getAsByte());
             return true;
         } else {
             return false;
@@ -180,7 +161,6 @@
     }
 
     @Override
-    @Override
     public ByteTag remove(int i) {
         byte b0 = this.data[i];
 
@@ -189,19 +169,16 @@
     }
 
     @Override
-    @Override
     public byte getElementType() {
         return 1;
     }
 
-    @Override
     public void clear() {
         this.data = new byte[0];
     }
 
     @Override
-    @Override
-    public StreamTagVisitor.ValueResult accept(StreamTagVisitor streamtagvisitor) {
-        return streamtagvisitor.visit(this.data);
+    public StreamTagVisitor.b accept(StreamTagVisitor visitor) {
+        return visitor.visit(this.data);
     }
 }
