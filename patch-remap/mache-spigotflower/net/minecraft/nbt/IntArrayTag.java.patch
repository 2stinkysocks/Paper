--- a/net/minecraft/nbt/IntArrayTag.java
+++ b/net/minecraft/nbt/IntArrayTag.java
@@ -1,3 +1,4 @@
+// mc-dev import
 package net.minecraft.nbt;
 
 import java.io.DataInput;
@@ -10,24 +11,22 @@
 public class IntArrayTag extends CollectionTag<IntTag> {
 
     private static final int SELF_SIZE_IN_BYTES = 24;
-    public static final TagType<IntArrayTag> TYPE = new TagType.VariableSize<IntArrayTag>() {
+    public static final TagType<IntArrayTag> TYPE = new TagType.b<IntArrayTag>() {
         @Override
-        @Override
-        public IntArrayTag load(DataInput datainput, NbtAccounter nbtaccounter) throws IOException {
-            return new IntArrayTag(readAccounted(datainput, nbtaccounter));
+        public IntArrayTag load(DataInput datainput, NbtAccounter nbtreadlimiter) throws IOException {
+            return new IntArrayTag(readAccounted(datainput, nbtreadlimiter));
         }
 
         @Override
-        @Override
-        public StreamTagVisitor.ValueResult parse(DataInput datainput, StreamTagVisitor streamtagvisitor, NbtAccounter nbtaccounter) throws IOException {
-            return streamtagvisitor.visit(readAccounted(datainput, nbtaccounter));
+        public StreamTagVisitor.b parse(DataInput datainput, StreamTagVisitor streamtagvisitor, NbtAccounter nbtreadlimiter) throws IOException {
+            return streamtagvisitor.visit(readAccounted(datainput, nbtreadlimiter));
         }
 
-        private static int[] readAccounted(DataInput datainput, NbtAccounter nbtaccounter) throws IOException {
-            nbtaccounter.accountBytes(24L);
+        private static int[] readAccounted(DataInput datainput, NbtAccounter nbtreadlimiter) throws IOException {
+            nbtreadlimiter.accountBytes(24L);
             int i = datainput.readInt();
 
-            nbtaccounter.accountBytes(4L, (long) i);
+            nbtreadlimiter.accountBytes(4L, (long) i);
             int[] aint = new int[i];
 
             for (int j = 0; j < i; ++j) {
@@ -38,38 +37,35 @@
         }
 
         @Override
-        @Override
-        public void skip(DataInput datainput, NbtAccounter nbtaccounter) throws IOException {
+        public void skip(DataInput datainput, NbtAccounter nbtreadlimiter) throws IOException {
             datainput.skipBytes(datainput.readInt() * 4);
         }
 
         @Override
-        @Override
         public String getName() {
             return "INT[]";
         }
 
         @Override
-        @Override
         public String getPrettyName() {
             return "TAG_Int_Array";
         }
     };
     private int[] data;
 
-    public IntArrayTag(int[] aint) {
-        this.data = aint;
+    public IntArrayTag(int[] data) {
+        this.data = data;
     }
 
-    public IntArrayTag(List<Integer> list) {
-        this(toArray(list));
+    public IntArrayTag(List<Integer> dataList) {
+        this(toArray(dataList));
     }
 
-    private static int[] toArray(List<Integer> list) {
-        int[] aint = new int[list.size()];
+    private static int[] toArray(List<Integer> dataList) {
+        int[] aint = new int[dataList.size()];
 
-        for (int i = 0; i < list.size(); ++i) {
-            Integer integer = (Integer) list.get(i);
+        for (int i = 0; i < dataList.size(); ++i) {
+            Integer integer = (Integer) dataList.get(i);
 
             aint[i] = integer == null ? 0 : integer;
         }
@@ -78,46 +74,40 @@
     }
 
     @Override
-    @Override
-    public void write(DataOutput dataoutput) throws IOException {
-        dataoutput.writeInt(this.data.length);
+    public void write(DataOutput output) throws IOException {
+        output.writeInt(this.data.length);
         int[] aint = this.data;
         int i = aint.length;
 
         for (int j = 0; j < i; ++j) {
             int k = aint[j];
 
-            dataoutput.writeInt(k);
+            output.writeInt(k);
         }
 
     }
 
     @Override
-    @Override
     public int sizeInBytes() {
         return 24 + 4 * this.data.length;
     }
 
     @Override
-    @Override
     public byte getId() {
         return 11;
     }
 
     @Override
-    @Override
     public TagType<IntArrayTag> getType() {
         return IntArrayTag.TYPE;
     }
 
     @Override
-    @Override
     public String toString() {
         return this.getAsString();
     }
 
     @Override
-    @Override
     public IntArrayTag copy() {
         int[] aint = new int[this.data.length];
 
@@ -125,12 +115,10 @@
         return new IntArrayTag(aint);
     }
 
-    @Override
     public boolean equals(Object object) {
         return this == object ? true : object instanceof IntArrayTag && Arrays.equals(this.data, ((IntArrayTag) object).data);
     }
 
-    @Override
     public int hashCode() {
         return Arrays.hashCode(this.data);
     }
@@ -140,39 +128,33 @@
     }
 
     @Override
-    @Override
-    public void accept(TagVisitor tagvisitor) {
-        tagvisitor.visitIntArray(this);
+    public void accept(TagVisitor visitor) {
+        visitor.visitIntArray(this);
     }
 
-    @Override
     public int size() {
         return this.data.length;
     }
 
-    @Override
     public IntTag get(int i) {
         return IntTag.valueOf(this.data[i]);
     }
 
-    @Override
-    public IntTag set(int i, IntTag inttag) {
+    public IntTag set(int i, IntTag nbttagint) {
         int j = this.data[i];
 
-        this.data[i] = inttag.getAsInt();
+        this.data[i] = nbttagint.getAsInt();
         return IntTag.valueOf(j);
     }
 
-    @Override
-    public void add(int i, IntTag inttag) {
-        this.data = ArrayUtils.add(this.data, i, inttag.getAsInt());
+    public void add(int i, IntTag nbttagint) {
+        this.data = ArrayUtils.add(this.data, i, nbttagint.getAsInt());
     }
 
     @Override
-    @Override
-    public boolean setTag(int i, Tag tag) {
-        if (tag instanceof NumericTag) {
-            this.data[i] = ((NumericTag) tag).getAsInt();
+    public boolean setTag(int index, Tag nbt) {
+        if (nbt instanceof NBTNumber) {
+            this.data[index] = ((NBTNumber) nbt).getAsInt();
             return true;
         } else {
             return false;
@@ -180,10 +162,9 @@
     }
 
     @Override
-    @Override
-    public boolean addTag(int i, Tag tag) {
-        if (tag instanceof NumericTag) {
-            this.data = ArrayUtils.add(this.data, i, ((NumericTag) tag).getAsInt());
+    public boolean addTag(int index, Tag nbt) {
+        if (nbt instanceof NBTNumber) {
+            this.data = ArrayUtils.add(this.data, index, ((NBTNumber) nbt).getAsInt());
             return true;
         } else {
             return false;
@@ -191,7 +172,6 @@
     }
 
     @Override
-    @Override
     public IntTag remove(int i) {
         int j = this.data[i];
 
@@ -200,19 +180,16 @@
     }
 
     @Override
-    @Override
     public byte getElementType() {
         return 3;
     }
 
-    @Override
     public void clear() {
         this.data = new int[0];
     }
 
     @Override
-    @Override
-    public StreamTagVisitor.ValueResult accept(StreamTagVisitor streamtagvisitor) {
-        return streamtagvisitor.visit(this.data);
+    public StreamTagVisitor.b accept(StreamTagVisitor visitor) {
+        return visitor.visit(this.data);
     }
 }
