--- a/net/minecraft/core/cauldron/CauldronInteraction.java
+++ b/net/minecraft/core/cauldron/CauldronInteraction.java
@@ -13,7 +13,7 @@
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
 import net.minecraft.util.ExtraCodecs;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
@@ -30,94 +30,117 @@
 import net.minecraft.world.level.block.LayeredCauldronBlock;
 import net.minecraft.world.level.block.ShulkerBoxBlock;
 import net.minecraft.world.level.block.entity.BannerBlockEntity;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 
+// CraftBukkit start
+import org.bukkit.event.block.CauldronLevelChangeEvent;
+// CraftBukkit end
+
 public interface CauldronInteraction {
 
-    Map<String, CauldronInteraction.InteractionMap> INTERACTIONS = new Object2ObjectArrayMap();
-    Codec<CauldronInteraction.InteractionMap> CODEC;
-    CauldronInteraction.InteractionMap EMPTY;
-    CauldronInteraction.InteractionMap WATER;
-    CauldronInteraction.InteractionMap LAVA;
-    CauldronInteraction.InteractionMap POWDER_SNOW;
+    Map<String, CauldronInteraction.a> INTERACTIONS = new Object2ObjectArrayMap();
+    // CraftBukkit start - decompile error
+    /*
+    Codec<CauldronInteraction.a> CODEC;
+    CauldronInteraction.a EMPTY;
+    CauldronInteraction.a WATER;
+    CauldronInteraction.a LAVA;
+    CauldronInteraction.a POWDER_SNOW;
     CauldronInteraction FILL_WATER;
     CauldronInteraction FILL_LAVA;
     CauldronInteraction FILL_POWDER_SNOW;
     CauldronInteraction SHULKER_BOX;
     CauldronInteraction BANNER;
     CauldronInteraction DYED_ITEM;
+     */
+    // CraftBukkit end
 
-    static CauldronInteraction.InteractionMap newInteractionMap(String s) {
+    static CauldronInteraction.a newInteractionMap(String s) {
         Object2ObjectOpenHashMap<Item, CauldronInteraction> object2objectopenhashmap = new Object2ObjectOpenHashMap();
 
-        object2objectopenhashmap.defaultReturnValue((blockstate, level, blockpos, player, interactionhand, itemstack) -> {
+        object2objectopenhashmap.defaultReturnValue((iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
             return InteractionResult.PASS;
         });
-        CauldronInteraction.InteractionMap cauldroninteraction_interactionmap = new CauldronInteraction.InteractionMap(s, object2objectopenhashmap);
+        CauldronInteraction.a cauldroninteraction_a = new CauldronInteraction.a(s, object2objectopenhashmap);
 
-        CauldronInteraction.INTERACTIONS.put(s, cauldroninteraction_interactionmap);
-        return cauldroninteraction_interactionmap;
+        CauldronInteraction.INTERACTIONS.put(s, cauldroninteraction_a);
+        return cauldroninteraction_a;
     }
 
-    InteractionResult interact(BlockState blockState, Level level, BlockPos blockPos, Player player, InteractionHand hand, ItemStack stack);
+    InteractionResult interact(IBlockData blockState, Level level, BlockPos blockPos, Player player, EnumHand hand, ItemStack stack);
 
     static void bootStrap() {
         Map<Item, CauldronInteraction> map = CauldronInteraction.EMPTY.map();
 
         addDefaultInteractions(map);
-        map.put(Items.POTION, (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
+        map.put(Items.POTION, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
             if (PotionUtils.getPotion(itemstack) != Potions.WATER) {
                 return InteractionResult.PASS;
             } else {
-                if (!level.isClientSide) {
+                if (!world.isClientSide) {
+                    // CraftBukkit start
+                    if (!LayeredCauldronBlock.changeLevel(iblockdata, world, blockposition, Blocks.WATER_CAULDRON.defaultBlockState(), entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_EMPTY)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                    // CraftBukkit end
                     Item item = itemstack.getItem();
 
-                    player.setItemInHand(interactionhand, ItemUtils.createFilledResult(itemstack, player, new ItemStack(Items.GLASS_BOTTLE)));
-                    player.awardStat(Stats.USE_CAULDRON);
-                    player.awardStat(Stats.ITEM_USED.get(item));
-                    level.setBlockAndUpdate(blockpos, Blocks.WATER_CAULDRON.defaultBlockState());
-                    level.playSound((Player) null, blockpos, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-                    level.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockpos);
+                    entityhuman.setItemInHand(enumhand, ItemUtils.createFilledResult(itemstack, entityhuman, new ItemStack(Items.GLASS_BOTTLE)));
+                    entityhuman.awardStat(Stats.USE_CAULDRON);
+                    entityhuman.awardStat(Stats.ITEM_USED.get(item));
+                    // world.setBlockAndUpdate(blockposition, Blocks.WATER_CAULDRON.defaultBlockState()); // CraftBukkit
+                    world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+                    world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockposition);
                 }
 
-                return InteractionResult.sidedSuccess(level.isClientSide);
+                return InteractionResult.sidedSuccess(world.isClientSide);
             }
         });
         Map<Item, CauldronInteraction> map1 = CauldronInteraction.WATER.map();
 
         addDefaultInteractions(map1);
-        map1.put(Items.BUCKET, (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            return fillBucket(blockstate, level, blockpos, player, interactionhand, itemstack, new ItemStack(Items.WATER_BUCKET), (blockstate1) -> {
-                return (Integer) blockstate1.getValue(LayeredCauldronBlock.LEVEL) == 3;
+        map1.put(Items.BUCKET, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return fillBucket(iblockdata, world, blockposition, entityhuman, enumhand, itemstack, new ItemStack(Items.WATER_BUCKET), (iblockdata1) -> {
+                return (Integer) iblockdata1.getValue(LayeredCauldronBlock.LEVEL) == 3;
             }, SoundEvents.BUCKET_FILL);
         });
-        map1.put(Items.GLASS_BOTTLE, (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            if (!level.isClientSide) {
+        map1.put(Items.GLASS_BOTTLE, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            if (!world.isClientSide) {
+                // CraftBukkit start
+                if (!LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition, entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_FILL)) {
+                    return InteractionResult.SUCCESS;
+                }
+                // CraftBukkit end
                 Item item = itemstack.getItem();
 
-                player.setItemInHand(interactionhand, ItemUtils.createFilledResult(itemstack, player, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.WATER)));
-                player.awardStat(Stats.USE_CAULDRON);
-                player.awardStat(Stats.ITEM_USED.get(item));
-                LayeredCauldronBlock.lowerFillLevel(blockstate, level, blockpos);
-                level.playSound((Player) null, blockpos, SoundEvents.BOTTLE_FILL, SoundSource.BLOCKS, 1.0F, 1.0F);
-                level.gameEvent((Entity) null, GameEvent.FLUID_PICKUP, blockpos);
+                entityhuman.setItemInHand(enumhand, ItemUtils.createFilledResult(itemstack, entityhuman, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.WATER)));
+                entityhuman.awardStat(Stats.USE_CAULDRON);
+                entityhuman.awardStat(Stats.ITEM_USED.get(item));
+                // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
+                world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_FILL, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.gameEvent((Entity) null, GameEvent.FLUID_PICKUP, blockposition);
             }
 
-            return InteractionResult.sidedSuccess(level.isClientSide);
+            return InteractionResult.sidedSuccess(world.isClientSide);
         });
-        map1.put(Items.POTION, (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            if ((Integer) blockstate.getValue(LayeredCauldronBlock.LEVEL) != 3 && PotionUtils.getPotion(itemstack) == Potions.WATER) {
-                if (!level.isClientSide) {
-                    player.setItemInHand(interactionhand, ItemUtils.createFilledResult(itemstack, player, new ItemStack(Items.GLASS_BOTTLE)));
-                    player.awardStat(Stats.USE_CAULDRON);
-                    player.awardStat(Stats.ITEM_USED.get(itemstack.getItem()));
-                    level.setBlockAndUpdate(blockpos, (BlockState) blockstate.cycle(LayeredCauldronBlock.LEVEL));
-                    level.playSound((Player) null, blockpos, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-                    level.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockpos);
+        map1.put(Items.POTION, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            if ((Integer) iblockdata.getValue(LayeredCauldronBlock.LEVEL) != 3 && PotionUtils.getPotion(itemstack) == Potions.WATER) {
+                if (!world.isClientSide) {
+                    // CraftBukkit start
+                    if (!LayeredCauldronBlock.changeLevel(iblockdata, world, blockposition, iblockdata.cycle(LayeredCauldronBlock.LEVEL), entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_EMPTY)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                    // CraftBukkit end
+                    entityhuman.setItemInHand(enumhand, ItemUtils.createFilledResult(itemstack, entityhuman, new ItemStack(Items.GLASS_BOTTLE)));
+                    entityhuman.awardStat(Stats.USE_CAULDRON);
+                    entityhuman.awardStat(Stats.ITEM_USED.get(itemstack.getItem()));
+                    // world.setBlockAndUpdate(blockposition, (IBlockData) iblockdata.cycle(LayeredCauldronBlock.LEVEL)); // CraftBukkit
+                    world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+                    world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockposition);
                 }
 
-                return InteractionResult.sidedSuccess(level.isClientSide);
+                return InteractionResult.sidedSuccess(world.isClientSide);
             } else {
                 return InteractionResult.PASS;
             }
@@ -161,153 +184,176 @@
         map1.put(Items.YELLOW_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
         Map<Item, CauldronInteraction> map2 = CauldronInteraction.LAVA.map();
 
-        map2.put(Items.BUCKET, (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            return fillBucket(blockstate, level, blockpos, player, interactionhand, itemstack, new ItemStack(Items.LAVA_BUCKET), (blockstate1) -> {
+        map2.put(Items.BUCKET, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return fillBucket(iblockdata, world, blockposition, entityhuman, enumhand, itemstack, new ItemStack(Items.LAVA_BUCKET), (iblockdata1) -> {
                 return true;
             }, SoundEvents.BUCKET_FILL_LAVA);
         });
         addDefaultInteractions(map2);
         Map<Item, CauldronInteraction> map3 = CauldronInteraction.POWDER_SNOW.map();
 
-        map3.put(Items.BUCKET, (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            return fillBucket(blockstate, level, blockpos, player, interactionhand, itemstack, new ItemStack(Items.POWDER_SNOW_BUCKET), (blockstate1) -> {
-                return (Integer) blockstate1.getValue(LayeredCauldronBlock.LEVEL) == 3;
+        map3.put(Items.BUCKET, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return fillBucket(iblockdata, world, blockposition, entityhuman, enumhand, itemstack, new ItemStack(Items.POWDER_SNOW_BUCKET), (iblockdata1) -> {
+                return (Integer) iblockdata1.getValue(LayeredCauldronBlock.LEVEL) == 3;
             }, SoundEvents.BUCKET_FILL_POWDER_SNOW);
         });
         addDefaultInteractions(map3);
     }
 
-    static void addDefaultInteractions(Map<Item, CauldronInteraction> map) {
-        map.put(Items.LAVA_BUCKET, CauldronInteraction.FILL_LAVA);
-        map.put(Items.WATER_BUCKET, CauldronInteraction.FILL_WATER);
-        map.put(Items.POWDER_SNOW_BUCKET, CauldronInteraction.FILL_POWDER_SNOW);
+    static void addDefaultInteractions(Map<Item, CauldronInteraction> interactionsMap) {
+        interactionsMap.put(Items.LAVA_BUCKET, CauldronInteraction.FILL_LAVA);
+        interactionsMap.put(Items.WATER_BUCKET, CauldronInteraction.FILL_WATER);
+        interactionsMap.put(Items.POWDER_SNOW_BUCKET, CauldronInteraction.FILL_POWDER_SNOW);
     }
 
-    static InteractionResult fillBucket(BlockState blockstate, Level level, BlockPos blockpos, Player player, InteractionHand interactionhand, ItemStack itemstack, ItemStack itemstack1, Predicate<BlockState> predicate, SoundEvent soundevent) {
-        if (!predicate.test(blockstate)) {
+    static InteractionResult fillBucket(IBlockData blockState, Level level, BlockPos pos, Player player, EnumHand hand, ItemStack emptyStack, ItemStack filledStack, Predicate<IBlockData> statePredicate, SoundEvent fillSound) {
+        if (!statePredicate.test(blockState)) {
             return InteractionResult.PASS;
         } else {
             if (!level.isClientSide) {
-                Item item = itemstack.getItem();
+                // CraftBukkit start
+                if (!LayeredCauldronBlock.changeLevel(blockState, level, pos, Blocks.CAULDRON.defaultBlockState(), player, CauldronLevelChangeEvent.ChangeReason.BUCKET_FILL)) {
+                    return InteractionResult.SUCCESS;
+                }
+                // CraftBukkit end
+                Item item = emptyStack.getItem();
 
-                player.setItemInHand(interactionhand, ItemUtils.createFilledResult(itemstack, player, itemstack1));
+                player.setItemInHand(hand, ItemUtils.createFilledResult(emptyStack, player, filledStack));
                 player.awardStat(Stats.USE_CAULDRON);
                 player.awardStat(Stats.ITEM_USED.get(item));
-                level.setBlockAndUpdate(blockpos, Blocks.CAULDRON.defaultBlockState());
-                level.playSound((Player) null, blockpos, soundevent, SoundSource.BLOCKS, 1.0F, 1.0F);
-                level.gameEvent((Entity) null, GameEvent.FLUID_PICKUP, blockpos);
+                // world.setBlockAndUpdate(blockposition, Blocks.CAULDRON.defaultBlockState()); // CraftBukkit
+                level.playSound((Player) null, pos, fillSound, SoundSource.BLOCKS, 1.0F, 1.0F);
+                level.gameEvent((Entity) null, GameEvent.FLUID_PICKUP, pos);
             }
 
             return InteractionResult.sidedSuccess(level.isClientSide);
         }
     }
 
-    static InteractionResult emptyBucket(Level level, BlockPos blockpos, Player player, InteractionHand interactionhand, ItemStack itemstack, BlockState blockstate, SoundEvent soundevent) {
+    static InteractionResult emptyBucket(Level level, BlockPos pos, Player player, EnumHand hand, ItemStack filledStack, IBlockData state, SoundEvent emptySound) {
         if (!level.isClientSide) {
-            Item item = itemstack.getItem();
+            // CraftBukkit start
+            if (!LayeredCauldronBlock.changeLevel(state, level, pos, state, player, CauldronLevelChangeEvent.ChangeReason.BUCKET_EMPTY)) {
+                return InteractionResult.SUCCESS;
+            }
+            // CraftBukkit end
+            Item item = filledStack.getItem();
 
-            player.setItemInHand(interactionhand, ItemUtils.createFilledResult(itemstack, player, new ItemStack(Items.BUCKET)));
+            player.setItemInHand(hand, ItemUtils.createFilledResult(filledStack, player, new ItemStack(Items.BUCKET)));
             player.awardStat(Stats.FILL_CAULDRON);
             player.awardStat(Stats.ITEM_USED.get(item));
-            level.setBlockAndUpdate(blockpos, blockstate);
-            level.playSound((Player) null, blockpos, soundevent, SoundSource.BLOCKS, 1.0F, 1.0F);
-            level.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockpos);
+            // world.setBlockAndUpdate(blockposition, iblockdata); // CraftBukkit
+            level.playSound((Player) null, pos, emptySound, SoundSource.BLOCKS, 1.0F, 1.0F);
+            level.gameEvent((Entity) null, GameEvent.FLUID_PLACE, pos);
         }
 
         return InteractionResult.sidedSuccess(level.isClientSide);
     }
 
-    static {
-        Function function = CauldronInteraction.InteractionMap::name;
-        Map map = CauldronInteraction.INTERACTIONS;
-
-        Objects.requireNonNull(map);
-        CODEC = ExtraCodecs.stringResolverCodec(function, map::get);
-        EMPTY = newInteractionMap("empty");
-        WATER = newInteractionMap("water");
-        LAVA = newInteractionMap("lava");
-        POWDER_SNOW = newInteractionMap("powder_snow");
-        FILL_WATER = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            return emptyBucket(level, blockpos, player, interactionhand, itemstack, (BlockState) Blocks.WATER_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY);
+    // CraftBukkit start - decompile errors
+    // static {
+        Codec<CauldronInteraction.a> CODEC = ExtraCodecs.stringResolverCodec(CauldronInteraction.a::name, CauldronInteraction.INTERACTIONS::get);
+        CauldronInteraction.a EMPTY = newInteractionMap("empty");
+        CauldronInteraction.a WATER = newInteractionMap("water");
+        CauldronInteraction.a LAVA = newInteractionMap("lava");
+        CauldronInteraction.a POWDER_SNOW = newInteractionMap("powder_snow");
+        CauldronInteraction FILL_WATER = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, (IBlockData) Blocks.WATER_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY);
         };
-        FILL_LAVA = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            return emptyBucket(level, blockpos, player, interactionhand, itemstack, Blocks.LAVA_CAULDRON.defaultBlockState(), SoundEvents.BUCKET_EMPTY_LAVA);
+        CauldronInteraction FILL_LAVA = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, Blocks.LAVA_CAULDRON.defaultBlockState(), SoundEvents.BUCKET_EMPTY_LAVA);
         };
-        FILL_POWDER_SNOW = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
-            return emptyBucket(level, blockpos, player, interactionhand, itemstack, (BlockState) Blocks.POWDER_SNOW_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY_POWDER_SNOW);
+        CauldronInteraction FILL_POWDER_SNOW = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, (IBlockData) Blocks.POWDER_SNOW_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY_POWDER_SNOW);
         };
-        SHULKER_BOX = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
+        CauldronInteraction SHULKER_BOX = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            // CraftBukkit end
             Block block = Block.byItem(itemstack.getItem());
 
             if (!(block instanceof ShulkerBoxBlock)) {
                 return InteractionResult.PASS;
             } else {
-                if (!level.isClientSide) {
+                if (!world.isClientSide) {
+                    // CraftBukkit start
+                    if (!LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition, entityhuman, CauldronLevelChangeEvent.ChangeReason.SHULKER_WASH)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                    // CraftBukkit end
                     ItemStack itemstack1 = new ItemStack(Blocks.SHULKER_BOX);
 
                     if (itemstack.hasTag()) {
                         itemstack1.setTag(itemstack.getTag().copy());
                     }
 
-                    player.setItemInHand(interactionhand, itemstack1);
-                    player.awardStat(Stats.CLEAN_SHULKER_BOX);
-                    LayeredCauldronBlock.lowerFillLevel(blockstate, level, blockpos);
+                    entityhuman.setItemInHand(enumhand, itemstack1);
+                    entityhuman.awardStat(Stats.CLEAN_SHULKER_BOX);
+                    // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
                 }
 
-                return InteractionResult.sidedSuccess(level.isClientSide);
+                return InteractionResult.sidedSuccess(world.isClientSide);
             }
         };
-        BANNER = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
+        CauldronInteraction BANNER = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> { // CraftBukkit - decompile error
             if (BannerBlockEntity.getPatternCount(itemstack) <= 0) {
                 return InteractionResult.PASS;
             } else {
-                if (!level.isClientSide) {
+                if (!world.isClientSide) {
+                    // CraftBukkit start
+                    if (!LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition, entityhuman, CauldronLevelChangeEvent.ChangeReason.BANNER_WASH)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                    // CraftBukkit end
                     ItemStack itemstack1 = itemstack.copyWithCount(1);
 
                     BannerBlockEntity.removeLastPattern(itemstack1);
-                    if (!player.getAbilities().instabuild) {
+                    if (!entityhuman.getAbilities().instabuild) {
                         itemstack.shrink(1);
                     }
 
                     if (itemstack.isEmpty()) {
-                        player.setItemInHand(interactionhand, itemstack1);
-                    } else if (player.getInventory().add(itemstack1)) {
-                        player.inventoryMenu.sendAllDataToRemote();
+                        entityhuman.setItemInHand(enumhand, itemstack1);
+                    } else if (entityhuman.getInventory().add(itemstack1)) {
+                        entityhuman.inventoryMenu.sendAllDataToRemote();
                     } else {
-                        player.drop(itemstack1, false);
+                        entityhuman.drop(itemstack1, false);
                     }
 
-                    player.awardStat(Stats.CLEAN_BANNER);
-                    LayeredCauldronBlock.lowerFillLevel(blockstate, level, blockpos);
+                    entityhuman.awardStat(Stats.CLEAN_BANNER);
+                    // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
                 }
 
-                return InteractionResult.sidedSuccess(level.isClientSide);
+                return InteractionResult.sidedSuccess(world.isClientSide);
             }
         };
-        DYED_ITEM = (blockstate, level, blockpos, player, interactionhand, itemstack) -> {
+        CauldronInteraction DYED_ITEM = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> { // CraftBukkit - decompile error
             Item item = itemstack.getItem();
 
             if (!(item instanceof DyeableLeatherItem)) {
                 return InteractionResult.PASS;
             } else {
-                DyeableLeatherItem dyeableleatheritem = (DyeableLeatherItem) item;
+                DyeableLeatherItem idyeable = (DyeableLeatherItem) item;
 
-                if (!dyeableleatheritem.hasCustomColor(itemstack)) {
+                if (!idyeable.hasCustomColor(itemstack)) {
                     return InteractionResult.PASS;
                 } else {
-                    if (!level.isClientSide) {
-                        dyeableleatheritem.clearColor(itemstack);
-                        player.awardStat(Stats.CLEAN_ARMOR);
-                        LayeredCauldronBlock.lowerFillLevel(blockstate, level, blockpos);
+                    if (!world.isClientSide) {
+                        // CraftBukkit start
+                        if (!LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition, entityhuman, CauldronLevelChangeEvent.ChangeReason.ARMOR_WASH)) {
+                            return InteractionResult.SUCCESS;
+                        }
+                        // CraftBukkit end
+                        idyeable.clearColor(itemstack);
+                        entityhuman.awardStat(Stats.CLEAN_ARMOR);
+                        // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
                     }
 
-                    return InteractionResult.sidedSuccess(level.isClientSide);
+                    return InteractionResult.sidedSuccess(world.isClientSide);
                 }
             }
         };
-    }
+    // } // CraftBukkit - decompile error
 
-    public static record InteractionMap(String name, Map<Item, CauldronInteraction> map) {
+    public static record a(String name, Map<Item, CauldronInteraction> map) {
 
     }
 }
