--- a/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
+++ b/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
@@ -12,6 +12,11 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.DispenserBlock;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+// CraftBukkit end
 
 public class BoatDispenseItemBehavior extends DefaultDispenseItemBehavior {
 
@@ -19,52 +24,78 @@
     private final Boat.Type type;
     private final boolean isChestBoat;
 
-    public BoatDispenseItemBehavior(Boat.Type boat_type) {
-        this(boat_type, false);
+    public BoatDispenseItemBehavior(Boat.Type type) {
+        this(type, false);
     }
 
-    public BoatDispenseItemBehavior(Boat.Type boat_type, boolean flag) {
+    public BoatDispenseItemBehavior(Boat.Type type, boolean isChestBoat) {
         this.defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
-        this.type = boat_type;
-        this.isChestBoat = flag;
+        this.type = type;
+        this.isChestBoat = isChestBoat;
     }
 
     @Override
-    @Override
-    public ItemStack execute(BlockSource blocksource, ItemStack itemstack) {
-        Direction direction = (Direction) blocksource.state().getValue(DispenserBlock.FACING);
-        ServerLevel serverlevel = blocksource.level();
-        Vec3 vec3 = blocksource.center();
+    public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+        Direction enumdirection = (Direction) sourceblock.state().getValue(DispenserBlock.FACING);
+        ServerLevel worldserver = sourceblock.level();
+        Vec3 vec3d = sourceblock.center();
         double d0 = 0.5625D + (double) EntityType.BOAT.getWidth() / 2.0D;
-        double d1 = vec3.x() + (double) direction.getStepX() * d0;
-        double d2 = vec3.y() + (double) ((float) direction.getStepY() * 1.125F);
-        double d3 = vec3.z() + (double) direction.getStepZ() * d0;
-        BlockPos blockpos = blocksource.pos().relative(direction);
+        double d1 = vec3d.x() + (double) enumdirection.getStepX() * d0;
+        double d2 = vec3d.y() + (double) ((float) enumdirection.getStepY() * 1.125F);
+        double d3 = vec3d.z() + (double) enumdirection.getStepZ() * d0;
+        BlockPos blockposition = sourceblock.pos().relative(enumdirection);
         double d4;
 
-        if (serverlevel.getFluidState(blockpos).is(FluidTags.WATER)) {
+        if (worldserver.getFluidState(blockposition).is(FluidTags.WATER)) {
             d4 = 1.0D;
         } else {
-            if (!serverlevel.getBlockState(blockpos).isAir() || !serverlevel.getFluidState(blockpos.below()).is(FluidTags.WATER)) {
-                return this.defaultDispenseItemBehavior.dispense(blocksource, itemstack);
+            if (!worldserver.getBlockState(blockposition).isAir() || !worldserver.getFluidState(blockposition.below()).is(FluidTags.WATER)) {
+                return this.defaultDispenseItemBehavior.dispense(sourceblock, itemstack);
             }
 
             d4 = 0.0D;
         }
 
-        Object object = this.isChestBoat ? new ChestBoat(serverlevel, d1, d2 + d4, d3) : new Boat(serverlevel, d1, d2 + d4, d3);
+        // Object object = this.isChestBoat ? new ChestBoat(worldserver, d1, d2 + d4, d3) : new EntityBoat(worldserver, d1, d2 + d4, d3);
+        // CraftBukkit start
+        ItemStack itemstack1 = itemstack.split(1);
+        org.bukkit.block.Block block = CraftBlock.at(worldserver, sourceblock.pos());
+        CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
-        EntityType.createDefaultStackConfig(serverlevel, itemstack, (Player) null).accept(object);
+        BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d1, d2 + d4, d3));
+        if (!DispenserBlock.eventFired) {
+            worldserver.getCraftServer().getPluginManager().callEvent(event);
+        }
+
+        if (event.isCancelled()) {
+            itemstack.grow(1);
+            return itemstack;
+        }
+
+        if (!event.getItem().equals(craftItem)) {
+            itemstack.grow(1);
+            // Chain to handler for new item
+            ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                idispensebehavior.dispense(sourceblock, eventStack);
+                return itemstack;
+            }
+        }
+
+        Boat object = this.isChestBoat ? new ChestBoat(worldserver, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ()) : new Boat(worldserver, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
+        // CraftBukkit end
+
+        EntityType.createDefaultStackConfig(worldserver, itemstack, (Player) null).accept(object);
         ((Boat) object).setVariant(this.type);
-        ((Boat) object).setYRot(direction.toYRot());
-        serverlevel.addFreshEntity((Entity) object);
-        itemstack.shrink(1);
+        ((Boat) object).setYRot(enumdirection.toYRot());
+        if (!worldserver.addFreshEntity((Entity) object)) itemstack.grow(1); // CraftBukkit
+        // itemstack.shrink(1); // CraftBukkit - handled during event processing
         return itemstack;
     }
 
     @Override
-    @Override
-    protected void playSound(BlockSource blocksource) {
-        blocksource.level().levelEvent(1000, blocksource.pos(), 0);
+    protected void playSound(SourceBlock sourceblock) {
+        sourceblock.level().levelEvent(1000, sourceblock.pos(), 0);
     }
 }
