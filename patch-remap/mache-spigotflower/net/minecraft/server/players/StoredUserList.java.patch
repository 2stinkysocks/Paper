--- a/net/minecraft/server/players/StoredUserList.java
+++ b/net/minecraft/server/players/StoredUserList.java
@@ -1,3 +1,4 @@
+// mc-dev import
 package net.minecraft.server.players;
 
 import com.google.common.collect.Lists;
@@ -40,8 +41,8 @@
         return this.file;
     }
 
-    public void add(V v0) {
-        this.map.put(this.getKeyForUser(v0.getUser()), v0);
+    public void add(V entry) {
+        this.map.put(this.getKeyForUser(entry.getUser()), entry);
 
         try {
             this.save();
@@ -52,13 +53,13 @@
     }
 
     @Nullable
-    public V get(K k0) {
+    public V get(K obj) {
         this.removeExpired();
-        return (StoredUserEntry) this.map.get(this.getKeyForUser(k0));
+        return (V) this.map.get(this.getKeyForUser(obj)); // CraftBukkit - fix decompile error
     }
 
-    public void remove(K k0) {
-        this.map.remove(this.getKeyForUser(k0));
+    public void remove(K user) {
+        this.map.remove(this.getKeyForUser(user));
 
         try {
             this.save();
@@ -68,8 +69,8 @@
 
     }
 
-    public void remove(StoredUserEntry<K> storeduserentry) {
-        this.remove(storeduserentry.getUser());
+    public void remove(StoredUserEntry<K> entry) {
+        this.remove(entry.getUser());
     }
 
     public String[] getUserList() {
@@ -80,12 +81,12 @@
         return this.map.size() < 1;
     }
 
-    protected String getKeyForUser(K k0) {
-        return k0.toString();
+    protected String getKeyForUser(K obj) {
+        return obj.toString();
     }
 
-    protected boolean contains(K k0) {
-        return this.map.containsKey(this.getKeyForUser(k0));
+    protected boolean contains(K entry) {
+        return this.map.containsKey(this.getKeyForUser(entry));
     }
 
     private void removeExpired() {
@@ -93,7 +94,7 @@
         Iterator iterator = this.map.values().iterator();
 
         while (iterator.hasNext()) {
-            V v0 = (StoredUserEntry) iterator.next();
+            V v0 = (V) iterator.next(); // CraftBukkit - decompile error
 
             if (v0.hasExpired()) {
                 list.add(v0.getUser());
@@ -103,7 +104,7 @@
         iterator = list.iterator();
 
         while (iterator.hasNext()) {
-            K k0 = iterator.next();
+            K k0 = (K) iterator.next(); // CraftBukkit - decompile error
 
             this.map.remove(this.getKeyForUser(k0));
         }
@@ -118,11 +119,11 @@
 
     public void save() throws IOException {
         JsonArray jsonarray = new JsonArray();
-        Stream stream = this.map.values().stream().map((storeduserentry) -> {
+        Stream<JsonObject> stream = this.map.values().stream().map((jsonlistentry) -> { // CraftBukkit - decompile error
             JsonObject jsonobject = new JsonObject();
 
-            Objects.requireNonNull(storeduserentry);
-            return (JsonObject) Util.make(jsonobject, storeduserentry::serialize);
+            Objects.requireNonNull(jsonlistentry);
+            return (JsonObject) Util.make(jsonobject, jsonlistentry::serialize);
         });
 
         Objects.requireNonNull(jsonarray);
@@ -168,10 +169,10 @@
                     while (iterator.hasNext()) {
                         JsonElement jsonelement = (JsonElement) iterator.next();
                         JsonObject jsonobject = GsonHelper.convertToJsonObject(jsonelement, "entry");
-                        StoredUserEntry<K> storeduserentry = this.createEntry(jsonobject);
+                        StoredUserEntry<K> jsonlistentry = this.createEntry(jsonobject);
 
-                        if (storeduserentry.getUser() != null) {
-                            this.map.put(this.getKeyForUser(storeduserentry.getUser()), storeduserentry);
+                        if (jsonlistentry.getUser() != null) {
+                            this.map.put(this.getKeyForUser(jsonlistentry.getUser()), (V) jsonlistentry); // CraftBukkit - decompile error
                         }
                     }
                 } catch (Throwable throwable) {
