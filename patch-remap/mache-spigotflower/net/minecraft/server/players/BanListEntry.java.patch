--- a/net/minecraft/server/players/BanListEntry.java
+++ b/net/minecraft/server/players/BanListEntry.java
@@ -18,38 +18,38 @@
     protected final Date expires;
     protected final String reason;
 
-    public BanListEntry(@Nullable T t0, @Nullable Date date, @Nullable String s, @Nullable Date date1, @Nullable String s1) {
-        super(t0);
-        this.created = date == null ? new Date() : date;
-        this.source = s == null ? "(Unknown)" : s;
-        this.expires = date1;
-        this.reason = s1 == null ? "Banned by an operator." : s1;
+    public BanListEntry(@Nullable T user, @Nullable Date created, @Nullable String source, @Nullable Date expires, @Nullable String reason) {
+        super(user);
+        this.created = created == null ? new Date() : created;
+        this.source = source == null ? "(Unknown)" : source;
+        this.expires = expires;
+        this.reason = reason == null ? "Banned by an operator." : reason;
     }
 
-    protected BanListEntry(@Nullable T t0, JsonObject jsonobject) {
-        super(t0);
+    protected BanListEntry(@Nullable T user, JsonObject entryData) {
+        super(checkExpiry(user, entryData)); // CraftBukkit
 
         Date date;
 
         try {
-            date = jsonobject.has("created") ? BanListEntry.DATE_FORMAT.parse(jsonobject.get("created").getAsString()) : new Date();
+            date = entryData.has("created") ? BanListEntry.DATE_FORMAT.parse(entryData.get("created").getAsString()) : new Date();
         } catch (ParseException parseexception) {
             date = new Date();
         }
 
         this.created = date;
-        this.source = jsonobject.has("source") ? jsonobject.get("source").getAsString() : "(Unknown)";
+        this.source = entryData.has("source") ? entryData.get("source").getAsString() : "(Unknown)";
 
         Date date1;
 
         try {
-            date1 = jsonobject.has("expires") ? BanListEntry.DATE_FORMAT.parse(jsonobject.get("expires").getAsString()) : null;
+            date1 = entryData.has("expires") ? BanListEntry.DATE_FORMAT.parse(entryData.get("expires").getAsString()) : null;
         } catch (ParseException parseexception1) {
             date1 = null;
         }
 
         this.expires = date1;
-        this.reason = jsonobject.has("reason") ? jsonobject.get("reason").getAsString() : "Banned by an operator.";
+        this.reason = entryData.has("reason") ? entryData.get("reason").getAsString() : "Banned by an operator.";
     }
 
     public Date getCreated() {
@@ -72,17 +72,33 @@
     public abstract Component getDisplayName();
 
     @Override
-    @Override
     boolean hasExpired() {
         return this.expires == null ? false : this.expires.before(new Date());
     }
 
     @Override
-    @Override
-    protected void serialize(JsonObject jsonobject) {
-        jsonobject.addProperty("created", BanListEntry.DATE_FORMAT.format(this.created));
-        jsonobject.addProperty("source", this.source);
-        jsonobject.addProperty("expires", this.expires == null ? "forever" : BanListEntry.DATE_FORMAT.format(this.expires));
-        jsonobject.addProperty("reason", this.reason);
+    protected void serialize(JsonObject data) {
+        data.addProperty("created", BanListEntry.DATE_FORMAT.format(this.created));
+        data.addProperty("source", this.source);
+        data.addProperty("expires", this.expires == null ? "forever" : BanListEntry.DATE_FORMAT.format(this.expires));
+        data.addProperty("reason", this.reason);
     }
+
+    // CraftBukkit start
+    private static <T> T checkExpiry(T object, JsonObject jsonobject) {
+        Date expires = null;
+
+        try {
+            expires = jsonobject.has("expires") ? DATE_FORMAT.parse(jsonobject.get("expires").getAsString()) : null;
+        } catch (ParseException ex) {
+            // Guess we don't have a date
+        }
+
+        if (expires == null || expires.after(new Date())) {
+            return object;
+        } else {
+            return null;
+        }
+    }
+    // CraftBukkit end
 }
