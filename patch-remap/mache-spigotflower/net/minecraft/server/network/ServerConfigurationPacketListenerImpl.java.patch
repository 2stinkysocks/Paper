--- a/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
@@ -44,27 +44,24 @@
     private ConfigurationTask currentTask;
     private ClientInformation clientInformation;
 
-    public ServerConfigurationPacketListenerImpl(MinecraftServer minecraftserver, Connection connection, CommonListenerCookie commonlistenercookie) {
-        super(minecraftserver, connection, commonlistenercookie);
+    public ServerConfigurationPacketListenerImpl(MinecraftServer minecraftserver, Connection networkmanager, CommonListenerCookie commonlistenercookie, ServerPlayer player) { // CraftBukkit
+        super(minecraftserver, networkmanager, commonlistenercookie, player); // CraftBukkit
         this.gameProfile = commonlistenercookie.gameProfile();
         this.clientInformation = commonlistenercookie.clientInformation();
     }
 
     @Override
-    @Override
     protected GameProfile playerProfile() {
         return this.gameProfile;
     }
 
     @Override
-    @Override
-    public void onDisconnect(Component component) {
-        ServerConfigurationPacketListenerImpl.LOGGER.info("{} lost connection: {}", this.gameProfile, component.getString());
-        super.onDisconnect(component);
+    public void onDisconnect(Component reason) {
+        ServerConfigurationPacketListenerImpl.LOGGER.info("{} lost connection: {}", this.gameProfile, reason.getString());
+        super.onDisconnect(reason);
     }
 
     @Override
-    @Override
     public boolean isAcceptingMessages() {
         return this.connection.isConnected();
     }
@@ -93,13 +90,11 @@
     }
 
     @Override
-    @Override
     public void handleClientInformation(ServerboundClientInformationPacket serverboundclientinformationpacket) {
         this.clientInformation = serverboundclientinformationpacket.information();
     }
 
     @Override
-    @Override
     public void handleResourcePackResponse(ServerboundResourcePackPacket serverboundresourcepackpacket) {
         super.handleResourcePackResponse(serverboundresourcepackpacket);
         if (serverboundresourcepackpacket.action().isTerminal()) {
@@ -109,7 +104,6 @@
     }
 
     @Override
-    @Override
     public void handleConfigurationFinished(ServerboundFinishConfigurationPacket serverboundfinishconfigurationpacket) {
         this.connection.suspendInboundAfterProtocolChange();
         PacketUtils.ensureRunningOnSameThread(serverboundfinishconfigurationpacket, this, (BlockableEventLoop) this.server);
@@ -123,16 +117,16 @@
                 return;
             }
 
-            Component component = playerlist.canPlayerLogin(this.connection.getRemoteAddress(), this.gameProfile);
+            Component ichatbasecomponent = null; // CraftBukkit - login checks already completed
 
-            if (component != null) {
-                this.disconnect(component);
+            if (ichatbasecomponent != null) {
+                this.disconnect(ichatbasecomponent);
                 return;
             }
 
-            ServerPlayer serverplayer = playerlist.getPlayerForLogin(this.gameProfile, this.clientInformation);
+            ServerPlayer entityplayer = playerlist.getPlayerForLogin(this.gameProfile, this.clientInformation, this.player); // CraftBukkit
 
-            playerlist.placeNewPlayer(this.connection, serverplayer, this.createCookie(this.clientInformation));
+            playerlist.placeNewPlayer(this.connection, entityplayer, this.createCookie(this.clientInformation));
             this.connection.resumeInboundAfterProtocolChange();
         } catch (Exception exception) {
             ServerConfigurationPacketListenerImpl.LOGGER.error("Couldn't place player in world", exception);
@@ -143,7 +137,6 @@
     }
 
     @Override
-    @Override
     public void tick() {
         this.keepConnectionAlive();
     }
@@ -162,11 +155,11 @@
         }
     }
 
-    private void finishCurrentTask(ConfigurationTask.Type configurationtask_type) {
-        ConfigurationTask.Type configurationtask_type1 = this.currentTask != null ? this.currentTask.type() : null;
+    private void finishCurrentTask(ConfigurationTask.a configurationtask_a) {
+        ConfigurationTask.a configurationtask_a1 = this.currentTask != null ? this.currentTask.type() : null;
 
-        if (!configurationtask_type.equals(configurationtask_type1)) {
-            throw new IllegalStateException("Unexpected request for task finish, current task: " + configurationtask_type1 + ", requested: " + configurationtask_type);
+        if (!configurationtask_a.equals(configurationtask_a1)) {
+            throw new IllegalStateException("Unexpected request for task finish, current task: " + configurationtask_a1 + ", requested: " + configurationtask_a);
         } else {
             this.currentTask = null;
             this.startNextTask();
