--- a/net/minecraft/world/inventory/HorseInventoryMenu.java
+++ b/net/minecraft/world/inventory/HorseInventoryMenu.java
@@ -8,48 +8,63 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.inventory.InventoryView;
+// CraftBukkit end
+
 public class HorseInventoryMenu extends AbstractContainerMenu {
 
     private final Container horseContainer;
     private final AbstractHorse horse;
 
-    public HorseInventoryMenu(int i, Inventory inventory, Container container, final AbstractHorse abstracthorse) {
-        super((MenuType) null, i);
+    // CraftBukkit start
+    org.bukkit.craftbukkit.inventory.CraftInventoryView bukkitEntity;
+    Inventory player;
+
+    @Override
+    public InventoryView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        return bukkitEntity = new CraftInventoryView(player.player.getBukkitEntity(), horseContainer.getOwner().getInventory(), this);
+    }
+
+    public HorseInventoryMenu(int containerId, Inventory playerInventory, Container container, final AbstractHorse horse) {
+        super((MenuType) null, containerId);
+        player = playerInventory;
+        // CraftBukkit end
         this.horseContainer = container;
-        this.horse = abstracthorse;
+        this.horse = horse;
         boolean flag = true;
 
-        container.startOpen(inventory.player);
+        container.startOpen(playerInventory.player);
         boolean flag1 = true;
 
         this.addSlot(new Slot(container, 0, 8, 18) {
             @Override
-            @Override
-            public boolean mayPlace(ItemStack itemstack) {
-                return itemstack.is(Items.SADDLE) && !this.hasItem() && abstracthorse.isSaddleable();
+            public boolean mayPlace(ItemStack stack) {
+                return stack.is(Items.SADDLE) && !this.hasItem() && horse.isSaddleable();
             }
 
             @Override
-            @Override
             public boolean isActive() {
-                return abstracthorse.isSaddleable();
+                return horse.isSaddleable();
             }
         });
         this.addSlot(new Slot(container, 1, 8, 36) {
             @Override
-            @Override
-            public boolean mayPlace(ItemStack itemstack) {
-                return abstracthorse.isArmor(itemstack);
+            public boolean mayPlace(ItemStack stack) {
+                return horse.isArmor(stack);
             }
 
             @Override
-            @Override
             public boolean isActive() {
-                return abstracthorse.canWearArmor();
+                return horse.canWearArmor();
             }
 
             @Override
-            @Override
             public int getMaxStackSize() {
                 return 1;
             }
@@ -57,41 +72,39 @@
         int j;
         int k;
 
-        if (this.hasChest(abstracthorse)) {
+        if (this.hasChest(horse)) {
             for (j = 0; j < 3; ++j) {
-                for (k = 0; k < ((AbstractChestedHorse) abstracthorse).getInventoryColumns(); ++k) {
-                    this.addSlot(new Slot(container, 2 + k + j * ((AbstractChestedHorse) abstracthorse).getInventoryColumns(), 80 + k * 18, 18 + j * 18));
+                for (k = 0; k < ((AbstractChestedHorse) horse).getInventoryColumns(); ++k) {
+                    this.addSlot(new Slot(container, 2 + k + j * ((AbstractChestedHorse) horse).getInventoryColumns(), 80 + k * 18, 18 + j * 18));
                 }
             }
         }
 
         for (j = 0; j < 3; ++j) {
             for (k = 0; k < 9; ++k) {
-                this.addSlot(new Slot(inventory, k + j * 9 + 9, 8 + k * 18, 102 + j * 18 + -18));
+                this.addSlot(new Slot(playerInventory, k + j * 9 + 9, 8 + k * 18, 102 + j * 18 + -18));
             }
         }
 
         for (j = 0; j < 9; ++j) {
-            this.addSlot(new Slot(inventory, j, 8 + j * 18, 142));
+            this.addSlot(new Slot(playerInventory, j, 8 + j * 18, 142));
         }
 
     }
 
     @Override
-    @Override
     public boolean stillValid(Player player) {
         return !this.horse.hasInventoryChanged(this.horseContainer) && this.horseContainer.stillValid(player) && this.horse.isAlive() && this.horse.distanceTo(player) < 8.0F;
     }
 
-    private boolean hasChest(AbstractHorse abstracthorse) {
-        return abstracthorse instanceof AbstractChestedHorse && ((AbstractChestedHorse) abstracthorse).hasChest();
+    private boolean hasChest(AbstractHorse horse) {
+        return horse instanceof AbstractChestedHorse && ((AbstractChestedHorse) horse).hasChest();
     }
 
     @Override
-    @Override
-    public ItemStack quickMoveStack(Player player, int i) {
+    public ItemStack quickMoveStack(Player player, int index) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = (Slot) this.slots.get(index);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -99,7 +112,7 @@
             itemstack = itemstack1.copy();
             int j = this.horseContainer.getContainerSize();
 
-            if (i < j) {
+            if (index < j) {
                 if (!this.moveItemStackTo(itemstack1, j, this.slots.size(), true)) {
                     return ItemStack.EMPTY;
                 }
@@ -115,11 +128,11 @@
                 int k = j + 27;
                 int l = k + 9;
 
-                if (i >= k && i < l) {
+                if (index >= k && index < l) {
                     if (!this.moveItemStackTo(itemstack1, j, k, false)) {
                         return ItemStack.EMPTY;
                     }
-                } else if (i >= j && i < k) {
+                } else if (index >= j && index < k) {
                     if (!this.moveItemStackTo(itemstack1, k, l, false)) {
                         return ItemStack.EMPTY;
                     }
@@ -141,7 +154,6 @@
     }
 
     @Override
-    @Override
     public void removed(Player player) {
         super.removed(player);
         this.horseContainer.stopOpen(player);
