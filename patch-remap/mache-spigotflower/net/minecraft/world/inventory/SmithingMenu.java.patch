--- a/net/minecraft/world/inventory/SmithingMenu.java
+++ b/net/minecraft/world/inventory/SmithingMenu.java
@@ -11,8 +11,10 @@
 import net.minecraft.world.item.crafting.SmithingRecipe;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
+import org.bukkit.craftbukkit.inventory.CraftInventoryView; // CraftBukkit
+
 public class SmithingMenu extends ItemCombinerMenu {
 
     public static final int TEMPLATE_SLOT = 0;
@@ -28,19 +30,21 @@
     @Nullable
     private RecipeHolder<SmithingRecipe> selectedRecipe;
     private final List<RecipeHolder<SmithingRecipe>> recipes;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity;
+    // CraftBukkit end
 
-    public SmithingMenu(int i, Inventory inventory) {
-        this(i, inventory, ContainerLevelAccess.NULL);
+    public SmithingMenu(int containerId, Inventory playerInventory) {
+        this(containerId, playerInventory, ContainerLevelAccess.NULL);
     }
 
-    public SmithingMenu(int i, Inventory inventory, ContainerLevelAccess containerlevelaccess) {
-        super(MenuType.SMITHING, i, inventory, containerlevelaccess);
-        this.level = inventory.player.level();
+    public SmithingMenu(int containerId, Inventory playerInventory, ContainerLevelAccess access) {
+        super(MenuType.SMITHING, containerId, playerInventory, access);
+        this.level = playerInventory.player.level();
         this.recipes = this.level.getRecipeManager().getAllRecipesFor(RecipeType.SMITHING);
     }
 
     @Override
-    @Override
     protected ItemCombinerMenuSlotDefinition createInputSlotDefinitions() {
         return ItemCombinerMenuSlotDefinition.create().withSlot(0, 8, 48, (itemstack) -> {
             return this.recipes.stream().anyMatch((recipeholder) -> {
@@ -58,27 +62,24 @@
     }
 
     @Override
-    @Override
-    protected boolean isValidBlock(BlockState blockstate) {
-        return blockstate.is(Blocks.SMITHING_TABLE);
+    protected boolean isValidBlock(IBlockData state) {
+        return state.is(Blocks.SMITHING_TABLE);
     }
 
     @Override
-    @Override
-    protected boolean mayPickup(Player player, boolean flag) {
+    protected boolean mayPickup(Player player, boolean hasStack) {
         return this.selectedRecipe != null && ((SmithingRecipe) this.selectedRecipe.value()).matches(this.inputSlots, this.level);
     }
 
     @Override
-    @Override
-    protected void onTake(Player player, ItemStack itemstack) {
-        itemstack.onCraftedBy(player.level(), player, itemstack.getCount());
+    protected void onTake(Player player, ItemStack stack) {
+        stack.onCraftedBy(player.level(), player, stack.getCount());
         this.resultSlots.awardUsedRecipes(player, this.getRelevantItems());
         this.shrinkStackInSlot(0);
         this.shrinkStackInSlot(1);
         this.shrinkStackInSlot(2);
-        this.access.execute((level, blockpos) -> {
-            level.levelEvent(1044, blockpos, 0);
+        this.access.execute((world, blockposition) -> {
+            world.levelEvent(1044, blockposition, 0);
         });
     }
 
@@ -86,23 +87,22 @@
         return List.of(this.inputSlots.getItem(0), this.inputSlots.getItem(1), this.inputSlots.getItem(2));
     }
 
-    private void shrinkStackInSlot(int i) {
-        ItemStack itemstack = this.inputSlots.getItem(i);
+    private void shrinkStackInSlot(int index) {
+        ItemStack itemstack = this.inputSlots.getItem(index);
 
         if (!itemstack.isEmpty()) {
             itemstack.shrink(1);
-            this.inputSlots.setItem(i, itemstack);
+            this.inputSlots.setItem(index, itemstack);
         }
 
     }
 
     @Override
-    @Override
     public void createResult() {
         List<RecipeHolder<SmithingRecipe>> list = this.level.getRecipeManager().getRecipesFor(RecipeType.SMITHING, this.inputSlots, this.level);
 
         if (list.isEmpty()) {
-            this.resultSlots.setItem(0, ItemStack.EMPTY);
+            org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareSmithingEvent(getBukkitView(), ItemStack.EMPTY); // CraftBukkit
         } else {
             RecipeHolder<SmithingRecipe> recipeholder = (RecipeHolder) list.get(0);
             ItemStack itemstack = ((SmithingRecipe) recipeholder.value()).assemble(this.inputSlots, this.level.registryAccess());
@@ -110,16 +110,17 @@
             if (itemstack.isItemEnabled(this.level.enabledFeatures())) {
                 this.selectedRecipe = recipeholder;
                 this.resultSlots.setRecipeUsed(recipeholder);
-                this.resultSlots.setItem(0, itemstack);
+                // CraftBukkit start
+                org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareSmithingEvent(getBukkitView(), itemstack);
+                // CraftBukkit end
             }
         }
 
     }
 
     @Override
-    @Override
-    public int getSlotToQuickMoveTo(ItemStack itemstack) {
-        return this.findSlotToQuickMoveTo(itemstack).orElse(0);
+    public int getSlotToQuickMoveTo(ItemStack stack) {
+        return this.findSlotToQuickMoveTo(stack).orElse(0);
     }
 
     private static OptionalInt findSlotMatchingIngredient(SmithingRecipe smithingrecipe, ItemStack itemstack) {
@@ -127,15 +128,13 @@
     }
 
     @Override
-    @Override
-    public boolean canTakeItemForPickAll(ItemStack itemstack, Slot slot) {
-        return slot.container != this.resultSlots && super.canTakeItemForPickAll(itemstack, slot);
+    public boolean canTakeItemForPickAll(ItemStack stack, Slot slot) {
+        return slot.container != this.resultSlots && super.canTakeItemForPickAll(stack, slot);
     }
 
     @Override
-    @Override
-    public boolean canMoveIntoInputSlots(ItemStack itemstack) {
-        return this.findSlotToQuickMoveTo(itemstack).isPresent();
+    public boolean canMoveIntoInputSlots(ItemStack stack) {
+        return this.findSlotToQuickMoveTo(stack).isPresent();
     }
 
     private OptionalInt findSlotToQuickMoveTo(ItemStack itemstack) {
@@ -145,4 +144,18 @@
             return !this.getSlot(i).hasItem();
         }).findFirst();
     }
+
+    // CraftBukkit start
+    @Override
+    public CraftInventoryView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        org.bukkit.craftbukkit.inventory.CraftInventory inventory = new org.bukkit.craftbukkit.inventory.CraftInventorySmithing(
+                access.getLocation(), this.inputSlots, this.resultSlots);
+        bukkitEntity = new CraftInventoryView(this.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
