--- a/net/minecraft/world/inventory/CrafterMenu.java
+++ b/net/minecraft/world/inventory/CrafterMenu.java
@@ -8,8 +8,27 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.CrafterBlock;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafter;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+// CraftBukkit end
+
 public class CrafterMenu extends AbstractContainerMenu implements ContainerListener {
 
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+
+    @Override
+    public CraftInventoryView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        CraftInventoryCrafter inventory = new CraftInventoryCrafter(this.container, this.resultContainer);
+        bukkitEntity = new CraftInventoryView(this.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
     protected static final int SLOT_COUNT = 9;
     private static final int INV_SLOT_START = 9;
     private static final int INV_SLOT_END = 36;
@@ -18,28 +37,28 @@
     private final ResultContainer resultContainer = new ResultContainer();
     private final ContainerData containerData;
     private final Player player;
-    private final CraftingContainer container;
+    private final InventoryCrafting container;
 
-    public CrafterMenu(int i, Inventory inventory) {
+    public CrafterMenu(int i, Inventory playerinventory) {
         super(MenuType.CRAFTER_3x3, i);
-        this.player = inventory.player;
+        this.player = playerinventory.player;
         this.containerData = new SimpleContainerData(10);
         this.container = new TransientCraftingContainer(this, 3, 3);
-        this.addSlots(inventory);
+        this.addSlots(playerinventory);
     }
 
-    public CrafterMenu(int i, Inventory inventory, CraftingContainer craftingcontainer, ContainerData containerdata) {
+    public CrafterMenu(int i, Inventory playerinventory, InventoryCrafting inventorycrafting, ContainerData icontainerproperties) {
         super(MenuType.CRAFTER_3x3, i);
-        this.player = inventory.player;
-        this.containerData = containerdata;
-        this.container = craftingcontainer;
-        checkContainerSize(craftingcontainer, 9);
-        craftingcontainer.startOpen(inventory.player);
-        this.addSlots(inventory);
+        this.player = playerinventory.player;
+        this.containerData = icontainerproperties;
+        this.container = inventorycrafting;
+        checkContainerSize(inventorycrafting, 9);
+        inventorycrafting.startOpen(playerinventory.player);
+        this.addSlots(playerinventory);
         this.addSlotListener(this);
     }
 
-    private void addSlots(Inventory inventory) {
+    private void addSlots(Inventory playerinventory) {
         int i;
         int j;
 
@@ -53,12 +72,12 @@
 
         for (j = 0; j < 3; ++j) {
             for (i = 0; i < 9; ++i) {
-                this.addSlot(new Slot(inventory, i + j * 9 + 9, 8 + i * 18, 84 + j * 18));
+                this.addSlot(new Slot(playerinventory, i + j * 9 + 9, 8 + i * 18, 84 + j * 18));
             }
         }
 
         for (j = 0; j < 9; ++j) {
-            this.addSlot(new Slot(inventory, j, 8 + j * 18, 142));
+            this.addSlot(new Slot(playerinventory, j, 8 + j * 18, 142));
         }
 
         this.addSlot(new NonInteractiveResultSlot(this.resultContainer, 0, 134, 35));
@@ -82,16 +101,15 @@
     }
 
     @Override
-    @Override
-    public ItemStack quickMoveStack(Player player, int i) {
+    public ItemStack quickMoveStack(Player player, int index) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = (Slot) this.slots.get(index);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
 
             itemstack = itemstack1.copy();
-            if (i < 9) {
+            if (index < 9) {
                 if (!this.moveItemStackTo(itemstack1, 9, 45, true)) {
                     return ItemStack.EMPTY;
                 }
@@ -116,19 +134,19 @@
     }
 
     @Override
-    @Override
     public boolean stillValid(Player player) {
+        if (!this.checkReachable) return true; // CraftBukkit
         return this.container.stillValid(player);
     }
 
     private void refreshRecipeResult() {
-        Player player = this.player;
+        Player entityhuman = this.player;
 
-        if (player instanceof ServerPlayer) {
-            ServerPlayer serverplayer = (ServerPlayer) player;
-            Level level = serverplayer.level();
-            ItemStack itemstack = (ItemStack) CrafterBlock.getPotentialResults(level, this.container).map((craftingrecipe) -> {
-                return craftingrecipe.assemble(this.container, level.registryAccess());
+        if (entityhuman instanceof ServerPlayer) {
+            ServerPlayer entityplayer = (ServerPlayer) entityhuman;
+            Level world = entityplayer.level();
+            ItemStack itemstack = (ItemStack) CrafterBlock.getPotentialResults(world, this.container).map((recipecrafting) -> {
+                return recipecrafting.assemble(this.container, world.registryAccess());
             }).orElse(ItemStack.EMPTY);
 
             this.resultContainer.setItem(0, itemstack);
@@ -141,12 +159,10 @@
     }
 
     @Override
-    @Override
-    public void slotChanged(AbstractContainerMenu abstractcontainermenu, int i, ItemStack itemstack) {
+    public void slotChanged(AbstractContainerMenu containerToSend, int dataSlotIndex, ItemStack stack) {
         this.refreshRecipeResult();
     }
 
     @Override
-    @Override
-    public void dataChanged(AbstractContainerMenu abstractcontainermenu, int i, int j) {}
+    public void dataChanged(AbstractContainerMenu containerMenu, int dataSlotIndex, int value) {}
 }
