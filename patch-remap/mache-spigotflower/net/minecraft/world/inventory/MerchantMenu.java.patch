--- a/net/minecraft/world/inventory/MerchantMenu.java
+++ b/net/minecraft/world/inventory/MerchantMenu.java
@@ -11,6 +11,7 @@
 import net.minecraft.world.item.trading.Merchant;
 import net.minecraft.world.item.trading.MerchantOffer;
 import net.minecraft.world.item.trading.MerchantOffers;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView; // CraftBukkit
 
 public class MerchantMenu extends AbstractContainerMenu {
 
@@ -31,49 +32,61 @@
     private boolean showProgressBar;
     private boolean canRestock;
 
-    public MerchantMenu(int i, Inventory inventory) {
-        this(i, inventory, new ClientSideMerchant(inventory.player));
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private Inventory player;
+
+    @Override
+    public CraftInventoryView getBukkitView() {
+        if (bukkitEntity == null) {
+            bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), new org.bukkit.craftbukkit.inventory.CraftInventoryMerchant(trader, tradeContainer), this);
+        }
+        return bukkitEntity;
     }
+    // CraftBukkit end
 
-    public MerchantMenu(int i, Inventory inventory, Merchant merchant) {
-        super(MenuType.MERCHANT, i);
-        this.trader = merchant;
-        this.tradeContainer = new MerchantContainer(merchant);
+    public MerchantMenu(int containerId, Inventory playerInventory) {
+        this(containerId, playerInventory, new ClientSideMerchant(playerInventory.player));
+    }
+
+    public MerchantMenu(int containerId, Inventory playerInventory, Merchant trader) {
+        super(MenuType.MERCHANT, containerId);
+        this.trader = trader;
+        this.tradeContainer = new MerchantContainer(trader);
         this.addSlot(new Slot(this.tradeContainer, 0, 136, 37));
         this.addSlot(new Slot(this.tradeContainer, 1, 162, 37));
-        this.addSlot(new MerchantResultSlot(inventory.player, merchant, this.tradeContainer, 2, 220, 37));
+        this.addSlot(new MerchantResultSlot(playerInventory.player, trader, this.tradeContainer, 2, 220, 37));
+        this.player = playerInventory; // CraftBukkit - save player
 
         int j;
 
         for (j = 0; j < 3; ++j) {
             for (int k = 0; k < 9; ++k) {
-                this.addSlot(new Slot(inventory, k + j * 9 + 9, 108 + k * 18, 84 + j * 18));
+                this.addSlot(new Slot(playerInventory, k + j * 9 + 9, 108 + k * 18, 84 + j * 18));
             }
         }
 
         for (j = 0; j < 9; ++j) {
-            this.addSlot(new Slot(inventory, j, 108 + j * 18, 142));
+            this.addSlot(new Slot(playerInventory, j, 108 + j * 18, 142));
         }
 
     }
 
-    public void setShowProgressBar(boolean flag) {
-        this.showProgressBar = flag;
+    public void setShowProgressBar(boolean showProgressBar) {
+        this.showProgressBar = showProgressBar;
     }
 
     @Override
-    @Override
-    public void slotsChanged(Container container) {
+    public void slotsChanged(Container inventory) {
         this.tradeContainer.updateSellItem();
-        super.slotsChanged(container);
+        super.slotsChanged(inventory);
     }
 
-    public void setSelectionHint(int i) {
-        this.tradeContainer.setSelectionHint(i);
+    public void setSelectionHint(int currentRecipeIndex) {
+        this.tradeContainer.setSelectionHint(currentRecipeIndex);
     }
 
     @Override
-    @Override
     public boolean stillValid(Player player) {
         return this.trader.getTradingPlayer() == player;
     }
@@ -86,20 +99,20 @@
         return this.tradeContainer.getFutureXp();
     }
 
-    public void setXp(int i) {
-        this.trader.overrideXp(i);
+    public void setXp(int xp) {
+        this.trader.overrideXp(xp);
     }
 
     public int getTraderLevel() {
         return this.merchantLevel;
     }
 
-    public void setMerchantLevel(int i) {
-        this.merchantLevel = i;
+    public void setMerchantLevel(int level) {
+        this.merchantLevel = level;
     }
 
-    public void setCanRestock(boolean flag) {
-        this.canRestock = flag;
+    public void setCanRestock(boolean canRestock) {
+        this.canRestock = canRestock;
     }
 
     public boolean canRestock() {
@@ -107,34 +120,32 @@
     }
 
     @Override
-    @Override
-    public boolean canTakeItemForPickAll(ItemStack itemstack, Slot slot) {
+    public boolean canTakeItemForPickAll(ItemStack stack, Slot slot) {
         return false;
     }
 
     @Override
-    @Override
-    public ItemStack quickMoveStack(Player player, int i) {
+    public ItemStack quickMoveStack(Player player, int index) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = (Slot) this.slots.get(index);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
 
             itemstack = itemstack1.copy();
-            if (i == 2) {
+            if (index == 2) {
                 if (!this.moveItemStackTo(itemstack1, 3, 39, true)) {
                     return ItemStack.EMPTY;
                 }
 
                 slot.onQuickCraft(itemstack1, itemstack);
                 this.playTradeSound();
-            } else if (i != 0 && i != 1) {
-                if (i >= 3 && i < 30) {
+            } else if (index != 0 && index != 1) {
+                if (index >= 3 && index < 30) {
                     if (!this.moveItemStackTo(itemstack1, 30, 39, false)) {
                         return ItemStack.EMPTY;
                     }
-                } else if (i >= 30 && i < 39 && !this.moveItemStackTo(itemstack1, 3, 30, false)) {
+                } else if (index >= 30 && index < 39 && !this.moveItemStackTo(itemstack1, 3, 30, false)) {
                     return ItemStack.EMPTY;
                 }
             } else if (!this.moveItemStackTo(itemstack1, 3, 39, false)) {
@@ -158,7 +169,7 @@
     }
 
     private void playTradeSound() {
-        if (!this.trader.isClientSide()) {
+        if (!this.trader.isClientSide() && this.trader instanceof Entity) { // CraftBukkit - SPIGOT-5035
             Entity entity = (Entity) this.trader;
 
             entity.level().playLocalSound(entity.getX(), entity.getY(), entity.getZ(), this.trader.getNotifyTradeSound(), SoundSource.NEUTRAL, 1.0F, 1.0F, false);
@@ -167,7 +178,6 @@
     }
 
     @Override
-    @Override
     public void removed(Player player) {
         super.removed(player);
         this.trader.setTradingPlayer((Player) null);
@@ -193,8 +203,8 @@
         }
     }
 
-    public void tryMoveItems(int i) {
-        if (i >= 0 && this.getOffers().size() > i) {
+    public void tryMoveItems(int selectedMerchantRecipe) {
+        if (selectedMerchantRecipe >= 0 && this.getOffers().size() > selectedMerchantRecipe) {
             ItemStack itemstack = this.tradeContainer.getItem(0);
 
             if (!itemstack.isEmpty()) {
@@ -216,10 +226,10 @@
             }
 
             if (this.tradeContainer.getItem(0).isEmpty() && this.tradeContainer.getItem(1).isEmpty()) {
-                ItemStack itemstack2 = ((MerchantOffer) this.getOffers().get(i)).getCostA();
+                ItemStack itemstack2 = ((MerchantOffer) this.getOffers().get(selectedMerchantRecipe)).getCostA();
 
                 this.moveFromInventoryToPaymentSlot(0, itemstack2);
-                ItemStack itemstack3 = ((MerchantOffer) this.getOffers().get(i)).getCostB();
+                ItemStack itemstack3 = ((MerchantOffer) this.getOffers().get(selectedMerchantRecipe)).getCostB();
 
                 this.moveFromInventoryToPaymentSlot(1, itemstack3);
             }
@@ -227,22 +237,22 @@
         }
     }
 
-    private void moveFromInventoryToPaymentSlot(int i, ItemStack itemstack) {
-        if (!itemstack.isEmpty()) {
+    private void moveFromInventoryToPaymentSlot(int paymentSlotIndex, ItemStack paymentSlot) {
+        if (!paymentSlot.isEmpty()) {
             for (int j = 3; j < 39; ++j) {
                 ItemStack itemstack1 = ((Slot) this.slots.get(j)).getItem();
 
-                if (!itemstack1.isEmpty() && ItemStack.isSameItemSameTags(itemstack, itemstack1)) {
-                    ItemStack itemstack2 = this.tradeContainer.getItem(i);
+                if (!itemstack1.isEmpty() && ItemStack.isSameItemSameTags(paymentSlot, itemstack1)) {
+                    ItemStack itemstack2 = this.tradeContainer.getItem(paymentSlotIndex);
                     int k = itemstack2.isEmpty() ? 0 : itemstack2.getCount();
-                    int l = Math.min(itemstack.getMaxStackSize() - k, itemstack1.getCount());
+                    int l = Math.min(paymentSlot.getMaxStackSize() - k, itemstack1.getCount());
                     ItemStack itemstack3 = itemstack1.copy();
                     int i1 = k + l;
 
                     itemstack1.shrink(l);
                     itemstack3.setCount(i1);
-                    this.tradeContainer.setItem(i, itemstack3);
-                    if (i1 >= itemstack.getMaxStackSize()) {
+                    this.tradeContainer.setItem(paymentSlotIndex, itemstack3);
+                    if (i1 >= paymentSlot.getMaxStackSize()) {
                         break;
                     }
                 }
@@ -251,8 +261,8 @@
 
     }
 
-    public void setOffers(MerchantOffers merchantoffers) {
-        this.trader.overrideOffers(merchantoffers);
+    public void setOffers(MerchantOffers offers) {
+        this.trader.overrideOffers(offers);
     }
 
     public MerchantOffers getOffers() {
