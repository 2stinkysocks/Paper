--- a/net/minecraft/world/inventory/CraftingMenu.java
+++ b/net/minecraft/world/inventory/CraftingMenu.java
@@ -8,14 +8,18 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.player.StackedContents;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.crafting.CraftingRecipe;
 import net.minecraft.world.item.crafting.Recipe;
+import net.minecraft.world.item.crafting.RecipeCrafting;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import net.minecraft.world.item.crafting.RecipeType;
+import net.minecraft.world.item.crafting.RepairItemRecipe;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+// CraftBukkit end
 
-public class CraftingMenu extends RecipeBookMenu<CraftingContainer> {
+public class CraftingMenu extends RecipeBookMenu<InventoryCrafting> {
 
     public static final int RESULT_SLOT = 0;
     private static final int CRAFT_SLOT_START = 1;
@@ -24,22 +28,28 @@
     private static final int INV_SLOT_END = 37;
     private static final int USE_ROW_SLOT_START = 37;
     private static final int USE_ROW_SLOT_END = 46;
-    private final CraftingContainer craftSlots;
-    private final ResultContainer resultSlots;
-    private final ContainerLevelAccess access;
+    public final TransientCraftingContainer craftSlots; // CraftBukkit
+    public final ResultContainer resultSlots;
+    public final ContainerLevelAccess access;
     private final Player player;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    // CraftBukkit end
 
-    public CraftingMenu(int i, Inventory inventory) {
-        this(i, inventory, ContainerLevelAccess.NULL);
+    public CraftingMenu(int containerId, Inventory playerInventory) {
+        this(containerId, playerInventory, ContainerLevelAccess.NULL);
     }
 
-    public CraftingMenu(int i, Inventory inventory, ContainerLevelAccess containerlevelaccess) {
-        super(MenuType.CRAFTING, i);
-        this.craftSlots = new TransientCraftingContainer(this, 3, 3);
+    public CraftingMenu(int containerId, Inventory playerInventory, ContainerLevelAccess access) {
+        super(MenuType.CRAFTING, containerId);
+        // CraftBukkit start - Switched order of IInventory construction and stored player
         this.resultSlots = new ResultContainer();
-        this.access = containerlevelaccess;
-        this.player = inventory.player;
-        this.addSlot(new ResultSlot(inventory.player, this.craftSlots, this.resultSlots, 0, 124, 35));
+        this.craftSlots = new TransientCraftingContainer(this, 3, 3, playerInventory.player); // CraftBukkit - pass player
+        this.craftSlots.resultInventory = this.resultSlots;
+        // CraftBukkit end
+        this.access = access;
+        this.player = playerInventory.player;
+        this.addSlot(new ResultSlot(playerInventory.player, this.craftSlots, this.resultSlots, 0, 124, 35));
 
         int j;
         int k;
@@ -52,105 +62,100 @@
 
         for (j = 0; j < 3; ++j) {
             for (k = 0; k < 9; ++k) {
-                this.addSlot(new Slot(inventory, k + j * 9 + 9, 8 + k * 18, 84 + j * 18));
+                this.addSlot(new Slot(playerInventory, k + j * 9 + 9, 8 + k * 18, 84 + j * 18));
             }
         }
 
         for (j = 0; j < 9; ++j) {
-            this.addSlot(new Slot(inventory, j, 8 + j * 18, 142));
+            this.addSlot(new Slot(playerInventory, j, 8 + j * 18, 142));
         }
 
     }
 
-    protected static void slotChangedCraftingGrid(AbstractContainerMenu abstractcontainermenu, Level level, Player player, CraftingContainer craftingcontainer, ResultContainer resultcontainer) {
+    protected static void slotChangedCraftingGrid(AbstractContainerMenu menu, Level level, Player player, InventoryCrafting container, ResultContainer result) {
         if (!level.isClientSide) {
-            ServerPlayer serverplayer = (ServerPlayer) player;
+            ServerPlayer entityplayer = (ServerPlayer) player;
             ItemStack itemstack = ItemStack.EMPTY;
-            Optional<RecipeHolder<CraftingRecipe>> optional = level.getServer().getRecipeManager().getRecipeFor(RecipeType.CRAFTING, craftingcontainer, level);
+            Optional<RecipeHolder<RecipeCrafting>> optional = level.getServer().getRecipeManager().getRecipeFor(RecipeType.CRAFTING, container, level);
 
             if (optional.isPresent()) {
-                RecipeHolder<CraftingRecipe> recipeholder = (RecipeHolder) optional.get();
-                CraftingRecipe craftingrecipe = (CraftingRecipe) recipeholder.value();
+                RecipeHolder<RecipeCrafting> recipeholder = (RecipeHolder) optional.get();
+                RecipeCrafting recipecrafting = (RecipeCrafting) recipeholder.value();
 
-                if (resultcontainer.setRecipeUsed(level, serverplayer, recipeholder)) {
-                    ItemStack itemstack1 = craftingrecipe.assemble(craftingcontainer, level.registryAccess());
+                if (result.setRecipeUsed(level, entityplayer, recipeholder)) {
+                    ItemStack itemstack1 = recipecrafting.assemble(container, level.registryAccess());
 
                     if (itemstack1.isItemEnabled(level.enabledFeatures())) {
                         itemstack = itemstack1;
                     }
                 }
             }
+            itemstack = org.bukkit.craftbukkit.event.CraftEventFactory.callPreCraftEvent(container, result, itemstack, menu.getBukkitView(), optional.map(RecipeHolder::toBukkitRecipe).orElse(null) instanceof RepairItemRecipe); // CraftBukkit
 
-            resultcontainer.setItem(0, itemstack);
-            abstractcontainermenu.setRemoteSlot(0, itemstack);
-            serverplayer.connection.send(new ClientboundContainerSetSlotPacket(abstractcontainermenu.containerId, abstractcontainermenu.incrementStateId(), 0, itemstack));
+            result.setItem(0, itemstack);
+            menu.setRemoteSlot(0, itemstack);
+            entityplayer.connection.send(new ClientboundContainerSetSlotPacket(menu.containerId, menu.incrementStateId(), 0, itemstack));
         }
     }
 
     @Override
-    @Override
-    public void slotsChanged(Container container) {
-        this.access.execute((level, blockpos) -> {
-            slotChangedCraftingGrid(this, level, this.player, this.craftSlots, this.resultSlots);
+    public void slotsChanged(Container inventory) {
+        this.access.execute((world, blockposition) -> {
+            slotChangedCraftingGrid(this, world, this.player, this.craftSlots, this.resultSlots);
         });
     }
 
     @Override
-    @Override
-    public void fillCraftSlotsStackedContents(StackedContents stackedcontents) {
-        this.craftSlots.fillStackedContents(stackedcontents);
+    public void fillCraftSlotsStackedContents(StackedContents itemHelper) {
+        this.craftSlots.fillStackedContents(itemHelper);
     }
 
     @Override
-    @Override
     public void clearCraftingContent() {
         this.craftSlots.clearContent();
         this.resultSlots.clearContent();
     }
 
     @Override
-    @Override
-    public boolean recipeMatches(RecipeHolder<? extends Recipe<CraftingContainer>> recipeholder) {
+    public boolean recipeMatches(RecipeHolder<? extends Recipe<InventoryCrafting>> recipeholder) {
         return recipeholder.value().matches(this.craftSlots, this.player.level());
     }
 
     @Override
-    @Override
     public void removed(Player player) {
         super.removed(player);
-        this.access.execute((level, blockpos) -> {
+        this.access.execute((world, blockposition) -> {
             this.clearContainer(player, this.craftSlots);
         });
     }
 
     @Override
-    @Override
     public boolean stillValid(Player player) {
+        if (!this.checkReachable) return true; // CraftBukkit
         return stillValid(this.access, player, Blocks.CRAFTING_TABLE);
     }
 
     @Override
-    @Override
-    public ItemStack quickMoveStack(Player player, int i) {
+    public ItemStack quickMoveStack(Player player, int index) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = (Slot) this.slots.get(index);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
 
             itemstack = itemstack1.copy();
-            if (i == 0) {
-                this.access.execute((level, blockpos) -> {
-                    itemstack1.getItem().onCraftedBy(itemstack1, level, player);
+            if (index == 0) {
+                this.access.execute((world, blockposition) -> {
+                    itemstack1.getItem().onCraftedBy(itemstack1, world, player);
                 });
                 if (!this.moveItemStackTo(itemstack1, 10, 46, true)) {
                     return ItemStack.EMPTY;
                 }
 
                 slot.onQuickCraft(itemstack1, itemstack);
-            } else if (i >= 10 && i < 46) {
+            } else if (index >= 10 && index < 46) {
                 if (!this.moveItemStackTo(itemstack1, 1, 10, false)) {
-                    if (i < 37) {
+                    if (index < 37) {
                         if (!this.moveItemStackTo(itemstack1, 37, 46, false)) {
                             return ItemStack.EMPTY;
                         }
@@ -173,7 +178,7 @@
             }
 
             slot.onTake(player, itemstack1);
-            if (i == 0) {
+            if (index == 0) {
                 player.drop(itemstack1, false);
             }
         }
@@ -182,44 +187,50 @@
     }
 
     @Override
-    @Override
-    public boolean canTakeItemForPickAll(ItemStack itemstack, Slot slot) {
-        return slot.container != this.resultSlots && super.canTakeItemForPickAll(itemstack, slot);
+    public boolean canTakeItemForPickAll(ItemStack stack, Slot slot) {
+        return slot.container != this.resultSlots && super.canTakeItemForPickAll(stack, slot);
     }
 
     @Override
-    @Override
     public int getResultSlotIndex() {
         return 0;
     }
 
     @Override
-    @Override
     public int getGridWidth() {
         return this.craftSlots.getWidth();
     }
 
     @Override
-    @Override
     public int getGridHeight() {
         return this.craftSlots.getHeight();
     }
 
     @Override
-    @Override
     public int getSize() {
         return 10;
     }
 
     @Override
-    @Override
     public RecipeBookType getRecipeBookType() {
         return RecipeBookType.CRAFTING;
     }
 
     @Override
+    public boolean shouldMoveToInventory(int slotIndex) {
+        return slotIndex != this.getResultSlotIndex();
+    }
+
+    // CraftBukkit start
     @Override
-    public boolean shouldMoveToInventory(int i) {
-        return i != this.getResultSlotIndex();
+    public CraftInventoryView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftSlots, this.resultSlots);
+        bukkitEntity = new CraftInventoryView(this.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
     }
+    // CraftBukkit end
 }
