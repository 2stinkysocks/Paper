--- a/net/minecraft/world/level/dimension/end/EndDragonFight.java
+++ b/net/minecraft/world/level/dimension/end/EndDragonFight.java
@@ -57,7 +57,7 @@
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.levelgen.feature.EndPodiumFeature;
 import net.minecraft.world.level.levelgen.feature.SpikeFeature;
-import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
+import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration;
 import net.minecraft.world.phys.AABB;
 import org.slf4j.Logger;
 
@@ -73,8 +73,8 @@
     private static final int GATEWAY_DISTANCE = 96;
     public static final int DRAGON_SPAWN_Y = 128;
     private final Predicate<Entity> validPlayer;
-    private final ServerBossEvent dragonEvent;
-    private final ServerLevel level;
+    public final ServerBossEvent dragonEvent;
+    public final ServerLevel level;
     private final BlockPos origin;
     private final ObjectArrayList<Integer> gateways;
     private final BlockPattern exitPortalPattern;
@@ -86,42 +86,42 @@
     private boolean previouslyKilled;
     private boolean skipArenaLoadedCheck;
     @Nullable
-    private UUID dragonUUID;
+    public UUID dragonUUID;
     private boolean needsStateScanning;
     @Nullable
-    private BlockPos portalLocation;
+    public BlockPos portalLocation;
     @Nullable
-    private DragonRespawnAnimation respawnStage;
+    public DragonRespawnAnimation respawnStage;
     private int respawnTime;
     @Nullable
     private List<EndCrystal> respawnCrystals;
 
-    public EndDragonFight(ServerLevel serverlevel, long i, EndDragonFight.Data enddragonfight_data) {
-        this(serverlevel, i, enddragonfight_data, BlockPos.ZERO);
+    public EndDragonFight(ServerLevel level, long seed, EndDragonFight.Data enderdragonbattle_a) {
+        this(level, seed, enderdragonbattle_a, BlockPos.ZERO);
     }
 
-    public EndDragonFight(ServerLevel serverlevel, long i, EndDragonFight.Data enddragonfight_data, BlockPos blockpos) {
+    public EndDragonFight(ServerLevel level, long seed, EndDragonFight.Data enderdragonbattle_a, BlockPos data) {
         this.dragonEvent = (ServerBossEvent) (new ServerBossEvent(Component.translatable("entity.minecraft.ender_dragon"), BossEvent.BossBarColor.PINK, BossEvent.BossBarOverlay.PROGRESS)).setPlayBossMusic(true).setCreateWorldFog(true);
         this.gateways = new ObjectArrayList();
         this.ticksSinceLastPlayerScan = 21;
         this.skipArenaLoadedCheck = false;
         this.needsStateScanning = true;
-        this.level = serverlevel;
-        this.origin = blockpos;
-        this.validPlayer = EntitySelector.ENTITY_STILL_ALIVE.and(EntitySelector.withinDistance((double) blockpos.getX(), (double) (128 + blockpos.getY()), (double) blockpos.getZ(), 192.0D));
-        this.needsStateScanning = enddragonfight_data.needsStateScanning;
-        this.dragonUUID = (UUID) enddragonfight_data.dragonUUID.orElse((Object) null);
-        this.dragonKilled = enddragonfight_data.dragonKilled;
-        this.previouslyKilled = enddragonfight_data.previouslyKilled;
-        if (enddragonfight_data.isRespawning) {
+        this.level = level;
+        this.origin = data;
+        this.validPlayer = EntitySelector.ENTITY_STILL_ALIVE.and(EntitySelector.withinDistance((double) data.getX(), (double) (128 + data.getY()), (double) data.getZ(), 192.0D));
+        this.needsStateScanning = enderdragonbattle_a.needsStateScanning;
+        this.dragonUUID = (UUID) enderdragonbattle_a.dragonUUID.orElse(null); // CraftBukkit - decompile error
+        this.dragonKilled = enderdragonbattle_a.dragonKilled;
+        this.previouslyKilled = enderdragonbattle_a.previouslyKilled;
+        if (enderdragonbattle_a.isRespawning) {
             this.respawnStage = DragonRespawnAnimation.START;
         }
 
-        this.portalLocation = (BlockPos) enddragonfight_data.exitPortalLocation.orElse((Object) null);
-        this.gateways.addAll((Collection) enddragonfight_data.gateways.orElseGet(() -> {
+        this.portalLocation = (BlockPos) enderdragonbattle_a.exitPortalLocation.orElse(null); // CraftBukkit - decompile error
+        this.gateways.addAll((Collection) enderdragonbattle_a.gateways.orElseGet(() -> {
             ObjectArrayList<Integer> objectarraylist = new ObjectArrayList(ContiguousSet.create(Range.closedOpen(0, 20), DiscreteDomain.integers()));
 
-            Util.shuffle(objectarraylist, RandomSource.create(i));
+            Util.shuffle(objectarraylist, RandomSource.create(seed));
             return objectarraylist;
         }));
         this.exitPortalPattern = BlockPatternBuilder.start().aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("  ###  ", " #   # ", "#     #", "#  #  #", "#     #", " #   # ", "  ###  ").aisle("       ", "  ###  ", " ##### ", " ##### ", " ##### ", "  ###  ", "       ").where('#', BlockInWorld.hasState(BlockPredicate.forBlock(Blocks.BEDROCK))).build();
@@ -200,14 +200,14 @@
         if (list.isEmpty()) {
             this.dragonKilled = true;
         } else {
-            EnderDragon enderdragon = (EnderDragon) list.get(0);
+            EnderDragon entityenderdragon = (EnderDragon) list.get(0);
 
-            this.dragonUUID = enderdragon.getUUID();
-            EndDragonFight.LOGGER.info("Found that there's a dragon still alive ({})", enderdragon);
+            this.dragonUUID = entityenderdragon.getUUID();
+            EndDragonFight.LOGGER.info("Found that there's a dragon still alive ({})", entityenderdragon);
             this.dragonKilled = false;
             if (!flag) {
                 EndDragonFight.LOGGER.info("But we didn't have a portal, let's remove it.");
-                enderdragon.discard();
+                entityenderdragon.discard();
                 this.dragonUUID = null;
             }
         }
@@ -231,27 +231,27 @@
 
     }
 
-    protected void setRespawnStage(DragonRespawnAnimation dragonrespawnanimation) {
+    public void setRespawnStage(DragonRespawnAnimation state) {
         if (this.respawnStage == null) {
             throw new IllegalStateException("Dragon respawn isn't in progress, can't skip ahead in the animation.");
         } else {
             this.respawnTime = 0;
-            if (dragonrespawnanimation == DragonRespawnAnimation.END) {
+            if (state == DragonRespawnAnimation.END) {
                 this.respawnStage = null;
                 this.dragonKilled = false;
-                EnderDragon enderdragon = this.createNewDragon();
+                EnderDragon entityenderdragon = this.createNewDragon();
 
-                if (enderdragon != null) {
+                if (entityenderdragon != null) {
                     Iterator iterator = this.dragonEvent.getPlayers().iterator();
 
                     while (iterator.hasNext()) {
-                        ServerPlayer serverplayer = (ServerPlayer) iterator.next();
+                        ServerPlayer entityplayer = (ServerPlayer) iterator.next();
 
-                        CriteriaTriggers.SUMMONED_ENTITY.trigger(serverplayer, (Entity) enderdragon);
+                        CriteriaTriggers.SUMMONED_ENTITY.trigger(entityplayer, (Entity) entityenderdragon);
                     }
                 }
             } else {
-                this.respawnStage = dragonrespawnanimation;
+                this.respawnStage = state;
             }
 
         }
@@ -263,10 +263,10 @@
 
             label27:
             while (j <= 8) {
-                LevelChunk levelchunk = this.level.getChunk(i, j);
-                Iterator iterator = levelchunk.getBlockEntities().values().iterator();
+                LevelChunk chunk = this.level.getChunk(i, j);
+                Iterator iterator = chunk.getBlockEntities().values().iterator();
 
-                BlockEntity blockentity;
+                BlockEntity tileentity;
 
                 do {
                     if (!iterator.hasNext()) {
@@ -274,8 +274,8 @@
                         continue label27;
                     }
 
-                    blockentity = (BlockEntity) iterator.next();
-                } while (!(blockentity instanceof TheEndPortalBlockEntity));
+                    tileentity = (BlockEntity) iterator.next();
+                } while (!(tileentity instanceof TheEndPortalBlockEntity));
 
                 return true;
             }
@@ -285,49 +285,49 @@
     }
 
     @Nullable
-    private BlockPattern.BlockPatternMatch findExitPortal() {
-        ChunkPos chunkpos = new ChunkPos(this.origin);
+    public BlockPattern.BlockPatternMatch findExitPortal() {
+        ChunkPos chunkcoordintpair = new ChunkPos(this.origin);
 
         int i;
 
-        for (int j = -8 + chunkpos.x; j <= 8 + chunkpos.x; ++j) {
-            for (i = -8 + chunkpos.z; i <= 8 + chunkpos.z; ++i) {
-                LevelChunk levelchunk = this.level.getChunk(j, i);
-                Iterator iterator = levelchunk.getBlockEntities().values().iterator();
+        for (int j = -8 + chunkcoordintpair.x; j <= 8 + chunkcoordintpair.x; ++j) {
+            for (i = -8 + chunkcoordintpair.z; i <= 8 + chunkcoordintpair.z; ++i) {
+                LevelChunk chunk = this.level.getChunk(j, i);
+                Iterator iterator = chunk.getBlockEntities().values().iterator();
 
                 while (iterator.hasNext()) {
-                    BlockEntity blockentity = (BlockEntity) iterator.next();
+                    BlockEntity tileentity = (BlockEntity) iterator.next();
 
-                    if (blockentity instanceof TheEndPortalBlockEntity) {
-                        BlockPattern.BlockPatternMatch blockpattern_blockpatternmatch = this.exitPortalPattern.find(this.level, blockentity.getBlockPos());
+                    if (tileentity instanceof TheEndPortalBlockEntity) {
+                        BlockPattern.BlockPatternMatch shapedetector_shapedetectorcollection = this.exitPortalPattern.find(this.level, tileentity.getBlockPos());
 
-                        if (blockpattern_blockpatternmatch != null) {
-                            BlockPos blockpos = blockpattern_blockpatternmatch.getBlock(3, 3, 3).getPos();
+                        if (shapedetector_shapedetectorcollection != null) {
+                            BlockPos blockposition = shapedetector_shapedetectorcollection.getBlock(3, 3, 3).getPos();
 
                             if (this.portalLocation == null) {
-                                this.portalLocation = blockpos;
+                                this.portalLocation = blockposition;
                             }
 
-                            return blockpattern_blockpatternmatch;
+                            return shapedetector_shapedetectorcollection;
                         }
                     }
                 }
             }
         }
 
-        BlockPos blockpos1 = EndPodiumFeature.getLocation(this.origin);
+        BlockPos blockposition1 = EndPodiumFeature.getLocation(this.origin);
 
-        i = this.level.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING, blockpos1).getY();
+        i = this.level.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING, blockposition1).getY();
 
         for (int k = i; k >= this.level.getMinBuildHeight(); --k) {
-            BlockPattern.BlockPatternMatch blockpattern_blockpatternmatch1 = this.exitPortalPattern.find(this.level, new BlockPos(blockpos1.getX(), k, blockpos1.getZ()));
+            BlockPattern.BlockPatternMatch shapedetector_shapedetectorcollection1 = this.exitPortalPattern.find(this.level, new BlockPos(blockposition1.getX(), k, blockposition1.getZ()));
 
-            if (blockpattern_blockpatternmatch1 != null) {
+            if (shapedetector_shapedetectorcollection1 != null) {
                 if (this.portalLocation == null) {
-                    this.portalLocation = blockpattern_blockpatternmatch1.getBlock(3, 3, 3).getPos();
+                    this.portalLocation = shapedetector_shapedetectorcollection1.getBlock(3, 3, 3).getPos();
                 }
 
-                return blockpattern_blockpatternmatch1;
+                return shapedetector_shapedetectorcollection1;
             }
         }
 
@@ -338,17 +338,17 @@
         if (this.skipArenaLoadedCheck) {
             return true;
         } else {
-            ChunkPos chunkpos = new ChunkPos(this.origin);
+            ChunkPos chunkcoordintpair = new ChunkPos(this.origin);
 
-            for (int i = -8 + chunkpos.x; i <= 8 + chunkpos.x; ++i) {
-                for (int j = 8 + chunkpos.z; j <= 8 + chunkpos.z; ++j) {
-                    ChunkAccess chunkaccess = this.level.getChunk(i, j, ChunkStatus.FULL, false);
+            for (int i = -8 + chunkcoordintpair.x; i <= 8 + chunkcoordintpair.x; ++i) {
+                for (int j = 8 + chunkcoordintpair.z; j <= 8 + chunkcoordintpair.z; ++j) {
+                    ChunkAccess ichunkaccess = this.level.getChunk(i, j, ChunkStatus.FULL, false);
 
-                    if (!(chunkaccess instanceof LevelChunk)) {
+                    if (!(ichunkaccess instanceof LevelChunk)) {
                         return false;
                     }
 
-                    FullChunkStatus fullchunkstatus = ((LevelChunk) chunkaccess).getFullStatus();
+                    FullChunkStatus fullchunkstatus = ((LevelChunk) ichunkaccess).getFullStatus();
 
                     if (!fullchunkstatus.isOrAfter(FullChunkStatus.BLOCK_TICKING)) {
                         return false;
@@ -365,10 +365,10 @@
         Iterator iterator = this.level.getPlayers(this.validPlayer).iterator();
 
         while (iterator.hasNext()) {
-            ServerPlayer serverplayer = (ServerPlayer) iterator.next();
+            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
 
-            this.dragonEvent.addPlayer(serverplayer);
-            set.add(serverplayer);
+            this.dragonEvent.addPlayer(entityplayer);
+            set.add(entityplayer);
         }
 
         Set<ServerPlayer> set1 = Sets.newHashSet(this.dragonEvent.getPlayers());
@@ -377,9 +377,9 @@
         Iterator iterator1 = set1.iterator();
 
         while (iterator1.hasNext()) {
-            ServerPlayer serverplayer1 = (ServerPlayer) iterator1.next();
+            ServerPlayer entityplayer1 = (ServerPlayer) iterator1.next();
 
-            this.dragonEvent.removePlayer(serverplayer1);
+            this.dragonEvent.removePlayer(entityplayer1);
         }
 
     }
@@ -388,17 +388,17 @@
         this.ticksSinceCrystalsScanned = 0;
         this.crystalsAlive = 0;
 
-        SpikeFeature.EndSpike spikefeature_endspike;
+        SpikeFeature.EndSpike worldgenender_spike;
 
-        for (Iterator iterator = SpikeFeature.getSpikesForLevel(this.level).iterator(); iterator.hasNext(); this.crystalsAlive += this.level.getEntitiesOfClass(EndCrystal.class, spikefeature_endspike.getTopBoundingBox()).size()) {
-            spikefeature_endspike = (SpikeFeature.EndSpike) iterator.next();
+        for (Iterator iterator = SpikeFeature.getSpikesForLevel(this.level).iterator(); iterator.hasNext(); this.crystalsAlive += this.level.getEntitiesOfClass(EndCrystal.class, worldgenender_spike.getTopBoundingBox()).size()) {
+            worldgenender_spike = (SpikeFeature.EndSpike) iterator.next();
         }
 
         EndDragonFight.LOGGER.debug("Found {} end crystals still alive", this.crystalsAlive);
     }
 
-    public void setDragonKilled(EnderDragon enderdragon) {
-        if (enderdragon.getUUID().equals(this.dragonUUID)) {
+    public void setDragonKilled(EnderDragon dragon) {
+        if (dragon.getUUID().equals(this.dragonUUID)) {
             this.dragonEvent.setProgress(0.0F);
             this.dragonEvent.setVisible(false);
             this.spawnExitPortal(true);
@@ -430,17 +430,17 @@
         }
     }
 
-    private void spawnNewGateway(BlockPos blockpos) {
-        this.level.levelEvent(3000, blockpos, 0);
-        this.level.registryAccess().registry(Registries.CONFIGURED_FEATURE).flatMap((registry) -> {
-            return registry.getHolder(EndFeatures.END_GATEWAY_DELAYED);
-        }).ifPresent((holder_reference) -> {
-            ((ConfiguredFeature) holder_reference.value()).place(this.level, this.level.getChunkSource().getGenerator(), RandomSource.create(), blockpos);
+    private void spawnNewGateway(BlockPos pos) {
+        this.level.levelEvent(3000, pos, 0);
+        this.level.registryAccess().registry(Registries.CONFIGURED_FEATURE).flatMap((iregistry) -> {
+            return iregistry.getHolder(EndFeatures.END_GATEWAY_DELAYED);
+        }).ifPresent((holder_c) -> {
+            ((ConfiguredFeature) holder_c.value()).place(this.level, this.level.getChunkSource().getGenerator(), RandomSource.create(), pos);
         });
     }
 
-    private void spawnExitPortal(boolean flag) {
-        EndPodiumFeature endpodiumfeature = new EndPodiumFeature(flag);
+    public void spawnExitPortal(boolean active) {
+        EndPodiumFeature worldgenendtrophy = new EndPodiumFeature(active);
 
         if (this.portalLocation == null) {
             for (this.portalLocation = this.level.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, EndPodiumFeature.getLocation(this.origin)).below(); this.level.getBlockState(this.portalLocation).is(Blocks.BEDROCK) && this.portalLocation.getY() > this.level.getSeaLevel(); this.portalLocation = this.portalLocation.below()) {
@@ -448,7 +448,7 @@
             }
         }
 
-        if (endpodiumfeature.place(FeatureConfiguration.NONE, this.level, this.level.getChunkSource().getGenerator(), RandomSource.create(), this.portalLocation)) {
+        if (worldgenendtrophy.place(WorldGenFeatureConfiguration.NONE, this.level, this.level.getChunkSource().getGenerator(), RandomSource.create(), this.portalLocation)) {
             int i = Mth.positiveCeilDiv(4, 16);
 
             this.level.getChunkSource().chunkMap.waitForLightBeforeSending(new ChunkPos(this.portalLocation), i);
@@ -459,26 +459,26 @@
     @Nullable
     private EnderDragon createNewDragon() {
         this.level.getChunkAt(new BlockPos(this.origin.getX(), 128 + this.origin.getY(), this.origin.getZ()));
-        EnderDragon enderdragon = (EnderDragon) EntityType.ENDER_DRAGON.create(this.level);
+        EnderDragon entityenderdragon = (EnderDragon) EntityType.ENDER_DRAGON.create(this.level);
 
-        if (enderdragon != null) {
-            enderdragon.setDragonFight(this);
-            enderdragon.setFightOrigin(this.origin);
-            enderdragon.getPhaseManager().setPhase(EnderDragonPhase.HOLDING_PATTERN);
-            enderdragon.moveTo((double) this.origin.getX(), (double) (128 + this.origin.getY()), (double) this.origin.getZ(), this.level.random.nextFloat() * 360.0F, 0.0F);
-            this.level.addFreshEntity(enderdragon);
-            this.dragonUUID = enderdragon.getUUID();
+        if (entityenderdragon != null) {
+            entityenderdragon.setDragonFight(this);
+            entityenderdragon.setFightOrigin(this.origin);
+            entityenderdragon.getPhaseManager().setPhase(EnderDragonPhase.HOLDING_PATTERN);
+            entityenderdragon.moveTo((double) this.origin.getX(), (double) (128 + this.origin.getY()), (double) this.origin.getZ(), this.level.random.nextFloat() * 360.0F, 0.0F);
+            this.level.addFreshEntity(entityenderdragon);
+            this.dragonUUID = entityenderdragon.getUUID();
         }
 
-        return enderdragon;
+        return entityenderdragon;
     }
 
-    public void updateDragon(EnderDragon enderdragon) {
-        if (enderdragon.getUUID().equals(this.dragonUUID)) {
-            this.dragonEvent.setProgress(enderdragon.getHealth() / enderdragon.getMaxHealth());
+    public void updateDragon(EnderDragon dragon) {
+        if (dragon.getUUID().equals(this.dragonUUID)) {
+            this.dragonEvent.setProgress(dragon.getHealth() / dragon.getMaxHealth());
             this.ticksSinceDragonSeen = 0;
-            if (enderdragon.hasCustomName()) {
-                this.dragonEvent.setName(enderdragon.getDisplayName());
+            if (dragon.hasCustomName()) {
+                this.dragonEvent.setName(dragon.getDisplayName());
             }
         }
 
@@ -488,8 +488,8 @@
         return this.crystalsAlive;
     }
 
-    public void onCrystalDestroyed(EndCrystal endcrystal, DamageSource damagesource) {
-        if (this.respawnStage != null && this.respawnCrystals.contains(endcrystal)) {
+    public void onCrystalDestroyed(EndCrystal crystal, DamageSource dmgSrc) {
+        if (this.respawnStage != null && this.respawnCrystals.contains(crystal)) {
             EndDragonFight.LOGGER.debug("Aborting respawn sequence");
             this.respawnStage = null;
             this.respawnTime = 0;
@@ -500,7 +500,7 @@
             Entity entity = this.level.getEntity(this.dragonUUID);
 
             if (entity instanceof EnderDragon) {
-                ((EnderDragon) entity).onCrystalDestroyed(endcrystal, endcrystal.blockPosition(), damagesource);
+                ((EnderDragon) entity).onCrystalDestroyed(crystal, crystal.blockPosition(), dmgSrc);
             }
         }
 
@@ -510,55 +510,55 @@
         return this.previouslyKilled;
     }
 
-    public void tryRespawn() {
+    public boolean tryRespawn() { // CraftBukkit - return boolean
         if (this.dragonKilled && this.respawnStage == null) {
-            BlockPos blockpos = this.portalLocation;
+            BlockPos blockposition = this.portalLocation;
 
-            if (blockpos == null) {
+            if (blockposition == null) {
                 EndDragonFight.LOGGER.debug("Tried to respawn, but need to find the portal first.");
-                BlockPattern.BlockPatternMatch blockpattern_blockpatternmatch = this.findExitPortal();
+                BlockPattern.BlockPatternMatch shapedetector_shapedetectorcollection = this.findExitPortal();
 
-                if (blockpattern_blockpatternmatch == null) {
+                if (shapedetector_shapedetectorcollection == null) {
                     EndDragonFight.LOGGER.debug("Couldn't find a portal, so we made one.");
                     this.spawnExitPortal(true);
                 } else {
                     EndDragonFight.LOGGER.debug("Found the exit portal & saved its location for next time.");
                 }
 
-                blockpos = this.portalLocation;
+                blockposition = this.portalLocation;
             }
 
             List<EndCrystal> list = Lists.newArrayList();
-            BlockPos blockpos1 = blockpos.above(1);
+            BlockPos blockposition1 = blockposition.above(1);
             Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
 
             while (iterator.hasNext()) {
-                Direction direction = (Direction) iterator.next();
-                List<EndCrystal> list1 = this.level.getEntitiesOfClass(EndCrystal.class, new AABB(blockpos1.relative(direction, 2)));
+                Direction enumdirection = (Direction) iterator.next();
+                List<EndCrystal> list1 = this.level.getEntitiesOfClass(EndCrystal.class, new AABB(blockposition1.relative(enumdirection, 2)));
 
                 if (list1.isEmpty()) {
-                    return;
+                    return false; // CraftBukkit - return value
                 }
 
                 list.addAll(list1);
             }
 
             EndDragonFight.LOGGER.debug("Found all crystals, respawning dragon.");
-            this.respawnDragon(list);
+            return this.respawnDragon(list); // CraftBukkit - return value
         }
-
+        return false; // CraftBukkit - return value
     }
 
-    private void respawnDragon(List<EndCrystal> list) {
+    public boolean respawnDragon(List<EndCrystal> list) { // CraftBukkit - return boolean
         if (this.dragonKilled && this.respawnStage == null) {
-            for (BlockPattern.BlockPatternMatch blockpattern_blockpatternmatch = this.findExitPortal(); blockpattern_blockpatternmatch != null; blockpattern_blockpatternmatch = this.findExitPortal()) {
+            for (BlockPattern.BlockPatternMatch shapedetector_shapedetectorcollection = this.findExitPortal(); shapedetector_shapedetectorcollection != null; shapedetector_shapedetectorcollection = this.findExitPortal()) {
                 for (int i = 0; i < this.exitPortalPattern.getWidth(); ++i) {
                     for (int j = 0; j < this.exitPortalPattern.getHeight(); ++j) {
                         for (int k = 0; k < this.exitPortalPattern.getDepth(); ++k) {
-                            BlockInWorld blockinworld = blockpattern_blockpatternmatch.getBlock(i, j, k);
+                            BlockInWorld shapedetectorblock = shapedetector_shapedetectorcollection.getBlock(i, j, k);
 
-                            if (blockinworld.getState().is(Blocks.BEDROCK) || blockinworld.getState().is(Blocks.END_PORTAL)) {
-                                this.level.setBlockAndUpdate(blockinworld.getPos(), Blocks.END_STONE.defaultBlockState());
+                            if (shapedetectorblock.getState().is(Blocks.BEDROCK) || shapedetectorblock.getState().is(Blocks.END_PORTAL)) {
+                                this.level.setBlockAndUpdate(shapedetectorblock.getPos(), Blocks.END_STONE.defaultBlockState());
                             }
                         }
                     }
@@ -569,23 +569,24 @@
             this.respawnTime = 0;
             this.spawnExitPortal(false);
             this.respawnCrystals = list;
+            return true; // CraftBukkit - return value
         }
-
+        return false; // CraftBukkit - return value
     }
 
     public void resetSpikeCrystals() {
         Iterator iterator = SpikeFeature.getSpikesForLevel(this.level).iterator();
 
         while (iterator.hasNext()) {
-            SpikeFeature.EndSpike spikefeature_endspike = (SpikeFeature.EndSpike) iterator.next();
-            List<EndCrystal> list = this.level.getEntitiesOfClass(EndCrystal.class, spikefeature_endspike.getTopBoundingBox());
+            SpikeFeature.EndSpike worldgenender_spike = (SpikeFeature.EndSpike) iterator.next();
+            List<EndCrystal> list = this.level.getEntitiesOfClass(EndCrystal.class, worldgenender_spike.getTopBoundingBox());
             Iterator iterator1 = list.iterator();
 
             while (iterator1.hasNext()) {
-                EndCrystal endcrystal = (EndCrystal) iterator1.next();
+                EndCrystal entityendercrystal = (EndCrystal) iterator1.next();
 
-                endcrystal.setInvulnerable(false);
-                endcrystal.setBeamTarget((BlockPos) null);
+                entityendercrystal.setInvulnerable(false);
+                entityendercrystal.setBeamTarget((BlockPos) null);
             }
         }
 
