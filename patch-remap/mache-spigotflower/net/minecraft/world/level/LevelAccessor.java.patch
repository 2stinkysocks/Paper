--- a/net/minecraft/world/level/LevelAccessor.java
+++ b/net/minecraft/world/level/LevelAccessor.java
@@ -13,7 +13,7 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.chunk.ChunkSource;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.Fluid;
@@ -27,7 +27,6 @@
 public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
 
     @Override
-    @Override
     default long dayTime() {
         return this.getLevelData().getDayTime();
     }
@@ -36,30 +35,30 @@
 
     LevelTickAccess<Block> getBlockTicks();
 
-    private default <T> ScheduledTick<T> createTick(BlockPos blockpos, T t0, int i, TickPriority tickpriority) {
-        return new ScheduledTick<>(t0, blockpos, this.getLevelData().getGameTime() + (long) i, tickpriority, this.nextSubTickCount());
+    default <T> ScheduledTick<T> createTick(BlockPos pos, T type, int delay, TickPriority priority) { // CraftBukkit - decompile error
+        return new ScheduledTick<>(type, pos, this.getLevelData().getGameTime() + (long) delay, priority, this.nextSubTickCount());
     }
 
-    private default <T> ScheduledTick<T> createTick(BlockPos blockpos, T t0, int i) {
-        return new ScheduledTick<>(t0, blockpos, this.getLevelData().getGameTime() + (long) i, this.nextSubTickCount());
+    default <T> ScheduledTick<T> createTick(BlockPos pos, T type, int delay) { // CraftBukkit - decompile error
+        return new ScheduledTick<>(type, pos, this.getLevelData().getGameTime() + (long) delay, this.nextSubTickCount());
     }
 
-    default void scheduleTick(BlockPos blockpos, Block block, int i, TickPriority tickpriority) {
-        this.getBlockTicks().schedule(this.createTick(blockpos, block, i, tickpriority));
+    default void scheduleTick(BlockPos pos, Block block, int delay, TickPriority priority) {
+        this.getBlockTicks().schedule(this.createTick(pos, block, delay, priority));
     }
 
-    default void scheduleTick(BlockPos blockpos, Block block, int i) {
-        this.getBlockTicks().schedule(this.createTick(blockpos, block, i));
+    default void scheduleTick(BlockPos pos, Block block, int delay) {
+        this.getBlockTicks().schedule(this.createTick(pos, block, delay));
     }
 
     LevelTickAccess<Fluid> getFluidTicks();
 
-    default void scheduleTick(BlockPos blockpos, Fluid fluid, int i, TickPriority tickpriority) {
-        this.getFluidTicks().schedule(this.createTick(blockpos, fluid, i, tickpriority));
+    default void scheduleTick(BlockPos pos, Fluid fluid, int delay, TickPriority priority) {
+        this.getFluidTicks().schedule(this.createTick(pos, fluid, delay, priority));
     }
 
-    default void scheduleTick(BlockPos blockpos, Fluid fluid, int i) {
-        this.getFluidTicks().schedule(this.createTick(blockpos, fluid, i));
+    default void scheduleTick(BlockPos pos, Fluid fluid, int delay) {
+        this.getFluidTicks().schedule(this.createTick(pos, fluid, delay));
     }
 
     LevelData getLevelData();
@@ -76,44 +75,45 @@
     ChunkSource getChunkSource();
 
     @Override
-    @Override
-    default boolean hasChunk(int i, int j) {
-        return this.getChunkSource().hasChunk(i, j);
+    default boolean hasChunk(int chunkX, int chunkZ) {
+        return this.getChunkSource().hasChunk(chunkX, chunkZ);
     }
 
     RandomSource getRandom();
 
-    default void blockUpdated(BlockPos blockpos, Block block) {}
+    default void blockUpdated(BlockPos pos, Block block) {}
 
-    default void neighborShapeChanged(Direction direction, BlockState blockstate, BlockPos blockpos, BlockPos blockpos1, int i, int j) {
-        NeighborUpdater.executeShapeUpdate(this, direction, blockstate, blockpos, blockpos1, i, j - 1);
+    default void neighborShapeChanged(Direction direction, IBlockData queried, BlockPos pos, BlockPos offsetPos, int flags, int recursionLevel) {
+        NeighborUpdater.executeShapeUpdate(this, direction, queried, pos, offsetPos, flags, recursionLevel - 1);
     }
 
-    default void playSound(@Nullable Player player, BlockPos blockpos, SoundEvent soundevent, SoundSource soundsource) {
-        this.playSound(player, blockpos, soundevent, soundsource, 1.0F, 1.0F);
+    default void playSound(@Nullable Player player, BlockPos pos, SoundEvent sound, SoundSource source) {
+        this.playSound(player, pos, sound, source, 1.0F, 1.0F);
     }
 
     void playSound(@Nullable Player player, BlockPos pos, SoundEvent sound, SoundSource source, float volume, float pitch);
 
-    void addParticle(ParticleOptions particleData, double x, double d, double y, double d1, double z, double d2);
+    void addParticle(ParticleOptions particleData, double x, double d1, double y, double d3, double z, double d5);
 
     void levelEvent(@Nullable Player player, int type, BlockPos pos, int data);
 
-    default void levelEvent(int i, BlockPos blockpos, int j) {
-        this.levelEvent((Player) null, i, blockpos, j);
+    default void levelEvent(int type, BlockPos pos, int data) {
+        this.levelEvent((Player) null, type, pos, data);
     }
 
     void gameEvent(GameEvent event, Vec3 position, GameEvent.Context context);
 
-    default void gameEvent(@Nullable Entity entity, GameEvent gameevent, Vec3 vec3) {
-        this.gameEvent(gameevent, vec3, new GameEvent.Context(entity, (BlockState) null));
+    default void gameEvent(@Nullable Entity entity, GameEvent event, Vec3 position) {
+        this.gameEvent(event, position, new GameEvent.Context(entity, (IBlockData) null));
     }
 
-    default void gameEvent(@Nullable Entity entity, GameEvent gameevent, BlockPos blockpos) {
-        this.gameEvent(gameevent, blockpos, new GameEvent.Context(entity, (BlockState) null));
+    default void gameEvent(@Nullable Entity entity, GameEvent event, BlockPos pos) {
+        this.gameEvent(event, pos, new GameEvent.Context(entity, (IBlockData) null));
     }
 
-    default void gameEvent(GameEvent gameevent, BlockPos blockpos, GameEvent.Context gameevent_context) {
-        this.gameEvent(gameevent, Vec3.atCenterOf(blockpos), gameevent_context);
+    default void gameEvent(GameEvent event, BlockPos pos, GameEvent.Context context) {
+        this.gameEvent(event, Vec3.atCenterOf(pos), context);
     }
+
+    net.minecraft.server.level.ServerLevel getMinecraftWorld(); // CraftBukkit
 }
