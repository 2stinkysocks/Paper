--- a/net/minecraft/world/level/block/NetherPortalBlock.java
+++ b/net/minecraft/world/level/block/NetherPortalBlock.java
@@ -10,7 +10,7 @@
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.MobSpawnType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.GameRules;
@@ -18,13 +18,16 @@
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.EnumProperty;
 import net.minecraft.world.level.portal.PortalShape;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
+// CraftBukkit start
+import org.bukkit.event.entity.EntityPortalEnterEvent;
+// CraftBukkit end
 
 public class NetherPortalBlock extends Block {
 
@@ -35,20 +38,18 @@
     protected static final VoxelShape Z_AXIS_AABB = Block.box(6.0D, 0.0D, 0.0D, 10.0D, 16.0D, 16.0D);
 
     @Override
-    @Override
     public MapCodec<NetherPortalBlock> codec() {
         return NetherPortalBlock.CODEC;
     }
 
-    public NetherPortalBlock(BlockBehaviour.Properties blockbehaviour_properties) {
-        super(blockbehaviour_properties);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(NetherPortalBlock.AXIS, Direction.Axis.X));
+    public NetherPortalBlock(BlockBehaviour.Properties properties) {
+        super(properties);
+        this.registerDefaultState((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(NetherPortalBlock.AXIS, Direction.Axis.X));
     }
 
     @Override
-    @Override
-    public VoxelShape getShape(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, CollisionContext collisioncontext) {
-        switch ((Direction.Axis) blockstate.getValue(NetherPortalBlock.AXIS)) {
+    public VoxelShape getShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
+        switch ((Direction.Axis) state.getValue(NetherPortalBlock.AXIS)) {
             case Z:
                 return NetherPortalBlock.Z_AXIS_AABB;
             case X:
@@ -58,15 +59,15 @@
     }
 
     @Override
-    @Override
-    public void randomTick(BlockState blockstate, ServerLevel serverlevel, BlockPos blockpos, RandomSource randomsource) {
-        if (serverlevel.dimensionType().natural() && serverlevel.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && randomsource.nextInt(2000) < serverlevel.getDifficulty().getId()) {
-            while (serverlevel.getBlockState(blockpos).is((Block) this)) {
-                blockpos = blockpos.below();
+    public void randomTick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
+        if (level.dimensionType().natural() && level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && random.nextInt(2000) < level.getDifficulty().getId()) {
+            while (level.getBlockState(pos).is((Block) this)) {
+                pos = pos.below();
             }
 
-            if (serverlevel.getBlockState(blockpos).isValidSpawn(serverlevel, blockpos, EntityType.ZOMBIFIED_PIGLIN)) {
-                Entity entity = EntityType.ZOMBIFIED_PIGLIN.spawn(serverlevel, blockpos.above(), MobSpawnType.STRUCTURE);
+            if (level.getBlockState(pos).isValidSpawn(level, pos, EntityType.ZOMBIFIED_PIGLIN)) {
+                // CraftBukkit - set spawn reason to NETHER_PORTAL
+                Entity entity = EntityType.ZOMBIFIED_PIGLIN.spawn(level, pos.above(), EnumMobSpawn.STRUCTURE, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.NETHER_PORTAL);
 
                 if (entity != null) {
                     entity.setPortalCooldown();
@@ -77,46 +78,47 @@
     }
 
     @Override
-    @Override
-    public BlockState updateShape(BlockState blockstate, Direction direction, BlockState blockstate1, LevelAccessor levelaccessor, BlockPos blockpos, BlockPos blockpos1) {
-        Direction.Axis direction_axis = direction.getAxis();
-        Direction.Axis direction_axis1 = (Direction.Axis) blockstate.getValue(NetherPortalBlock.AXIS);
-        boolean flag = direction_axis1 != direction_axis && direction_axis.isHorizontal();
+    public IBlockData updateShape(IBlockData state, Direction facing, IBlockData facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
+        Direction.Axis enumdirection_enumaxis = facing.getAxis();
+        Direction.Axis enumdirection_enumaxis1 = (Direction.Axis) state.getValue(NetherPortalBlock.AXIS);
+        boolean flag = enumdirection_enumaxis1 != enumdirection_enumaxis && enumdirection_enumaxis.isHorizontal();
 
-        return !flag && !blockstate1.is((Block) this) && !(new PortalShape(levelaccessor, blockpos, direction_axis1)).isComplete() ? Blocks.AIR.defaultBlockState() : super.updateShape(blockstate, direction, blockstate1, levelaccessor, blockpos, blockpos1);
+        return !flag && !facingState.is((Block) this) && !(new PortalShape(level, currentPos, enumdirection_enumaxis1)).isComplete() ? Blocks.AIR.defaultBlockState() : super.updateShape(state, facing, facingState, level, currentPos, facingPos);
     }
 
     @Override
-    @Override
-    public void entityInside(BlockState blockstate, Level level, BlockPos blockpos, Entity entity) {
+    public void entityInside(IBlockData state, Level level, BlockPos pos, Entity entity) {
         if (entity.canChangeDimensions()) {
-            entity.handleInsidePortal(blockpos);
+            // CraftBukkit start - Entity in portal
+            EntityPortalEnterEvent event = new EntityPortalEnterEvent(entity.getBukkitEntity(), new org.bukkit.Location(level.getWorld(), pos.getX(), pos.getY(), pos.getZ()));
+            level.getCraftServer().getPluginManager().callEvent(event);
+            // CraftBukkit end
+            entity.handleInsidePortal(pos);
         }
 
     }
 
     @Override
-    @Override
-    public void animateTick(BlockState blockstate, Level level, BlockPos blockpos, RandomSource randomsource) {
-        if (randomsource.nextInt(100) == 0) {
-            level.playLocalSound((double) blockpos.getX() + 0.5D, (double) blockpos.getY() + 0.5D, (double) blockpos.getZ() + 0.5D, SoundEvents.PORTAL_AMBIENT, SoundSource.BLOCKS, 0.5F, randomsource.nextFloat() * 0.4F + 0.8F, false);
+    public void animateTick(IBlockData state, Level level, BlockPos pos, RandomSource random) {
+        if (random.nextInt(100) == 0) {
+            level.playLocalSound((double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, SoundEvents.PORTAL_AMBIENT, SoundSource.BLOCKS, 0.5F, random.nextFloat() * 0.4F + 0.8F, false);
         }
 
         for (int i = 0; i < 4; ++i) {
-            double d0 = (double) blockpos.getX() + randomsource.nextDouble();
-            double d1 = (double) blockpos.getY() + randomsource.nextDouble();
-            double d2 = (double) blockpos.getZ() + randomsource.nextDouble();
-            double d3 = ((double) randomsource.nextFloat() - 0.5D) * 0.5D;
-            double d4 = ((double) randomsource.nextFloat() - 0.5D) * 0.5D;
-            double d5 = ((double) randomsource.nextFloat() - 0.5D) * 0.5D;
-            int j = randomsource.nextInt(2) * 2 - 1;
+            double d0 = (double) pos.getX() + random.nextDouble();
+            double d1 = (double) pos.getY() + random.nextDouble();
+            double d2 = (double) pos.getZ() + random.nextDouble();
+            double d3 = ((double) random.nextFloat() - 0.5D) * 0.5D;
+            double d4 = ((double) random.nextFloat() - 0.5D) * 0.5D;
+            double d5 = ((double) random.nextFloat() - 0.5D) * 0.5D;
+            int j = random.nextInt(2) * 2 - 1;
 
-            if (!level.getBlockState(blockpos.west()).is((Block) this) && !level.getBlockState(blockpos.east()).is((Block) this)) {
-                d0 = (double) blockpos.getX() + 0.5D + 0.25D * (double) j;
-                d3 = (double) (randomsource.nextFloat() * 2.0F * (float) j);
+            if (!level.getBlockState(pos.west()).is((Block) this) && !level.getBlockState(pos.east()).is((Block) this)) {
+                d0 = (double) pos.getX() + 0.5D + 0.25D * (double) j;
+                d3 = (double) (random.nextFloat() * 2.0F * (float) j);
             } else {
-                d2 = (double) blockpos.getZ() + 0.5D + 0.25D * (double) j;
-                d5 = (double) (randomsource.nextFloat() * 2.0F * (float) j);
+                d2 = (double) pos.getZ() + 0.5D + 0.25D * (double) j;
+                d5 = (double) (random.nextFloat() * 2.0F * (float) j);
             }
 
             level.addParticle(ParticleTypes.PORTAL, d0, d1, d2, d3, d4, d5);
@@ -125,33 +127,30 @@
     }
 
     @Override
-    @Override
-    public ItemStack getCloneItemStack(LevelReader levelreader, BlockPos blockpos, BlockState blockstate) {
+    public ItemStack getCloneItemStack(LevelReader iworldreader, BlockPos blockposition, IBlockData iblockdata) {
         return ItemStack.EMPTY;
     }
 
     @Override
-    @Override
-    public BlockState rotate(BlockState blockstate, Rotation rotation) {
-        switch (rotation) {
+    public IBlockData rotate(IBlockData state, Rotation rot) {
+        switch (rot) {
             case COUNTERCLOCKWISE_90:
             case CLOCKWISE_90:
-                switch ((Direction.Axis) blockstate.getValue(NetherPortalBlock.AXIS)) {
+                switch ((Direction.Axis) state.getValue(NetherPortalBlock.AXIS)) {
                     case Z:
-                        return (BlockState) blockstate.setValue(NetherPortalBlock.AXIS, Direction.Axis.X);
+                        return (IBlockData) state.setValue(NetherPortalBlock.AXIS, Direction.Axis.X);
                     case X:
-                        return (BlockState) blockstate.setValue(NetherPortalBlock.AXIS, Direction.Axis.Z);
+                        return (IBlockData) state.setValue(NetherPortalBlock.AXIS, Direction.Axis.Z);
                     default:
-                        return blockstate;
+                        return state;
                 }
             default:
-                return blockstate;
+                return state;
         }
     }
 
     @Override
-    @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> statedefinition_builder) {
-        statedefinition_builder.add(NetherPortalBlock.AXIS);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(NetherPortalBlock.AXIS);
     }
 }
