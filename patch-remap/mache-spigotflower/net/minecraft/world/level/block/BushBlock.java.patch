--- a/net/minecraft/world/level/block/BushBlock.java
+++ b/net/minecraft/world/level/block/BushBlock.java
@@ -8,46 +8,48 @@
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.pathfinder.PathComputationType;
+import net.minecraft.world.level.block.state.IBlockData;
+import net.minecraft.world.level.pathfinder.PathMode;
 
 public abstract class BushBlock extends Block {
 
-    protected BushBlock(BlockBehaviour.Properties blockbehaviour_properties) {
-        super(blockbehaviour_properties);
+    protected BushBlock(BlockBehaviour.Properties properties) {
+        super(properties);
     }
 
     @Override
-    @Override
     protected abstract MapCodec<? extends BushBlock> codec();
 
-    protected boolean mayPlaceOn(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos) {
-        return blockstate.is(BlockTags.DIRT) || blockstate.is(Blocks.FARMLAND);
+    protected boolean mayPlaceOn(IBlockData state, BlockGetter level, BlockPos pos) {
+        return state.is(BlockTags.DIRT) || state.is(Blocks.FARMLAND);
     }
 
     @Override
-    @Override
-    public BlockState updateShape(BlockState blockstate, Direction direction, BlockState blockstate1, LevelAccessor levelaccessor, BlockPos blockpos, BlockPos blockpos1) {
-        return !blockstate.canSurvive(levelaccessor, blockpos) ? Blocks.AIR.defaultBlockState() : super.updateShape(blockstate, direction, blockstate1, levelaccessor, blockpos, blockpos1);
+    public IBlockData updateShape(IBlockData state, Direction facing, IBlockData facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
+        // CraftBukkit start
+        if (!state.canSurvive(level, currentPos)) {
+            if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPhysicsEvent(level, currentPos).isCancelled()) {
+                return Blocks.AIR.defaultBlockState();
+            }
+        }
+        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
+        // CraftBukkit end
     }
 
     @Override
-    @Override
-    public boolean canSurvive(BlockState blockstate, LevelReader levelreader, BlockPos blockpos) {
-        BlockPos blockpos1 = blockpos.below();
+    public boolean canSurvive(IBlockData state, LevelReader level, BlockPos pos) {
+        BlockPos blockposition1 = pos.below();
 
-        return this.mayPlaceOn(levelreader.getBlockState(blockpos1), levelreader, blockpos1);
+        return this.mayPlaceOn(level.getBlockState(blockposition1), level, blockposition1);
     }
 
     @Override
-    @Override
-    public boolean propagatesSkylightDown(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos) {
-        return blockstate.getFluidState().isEmpty();
+    public boolean propagatesSkylightDown(IBlockData state, BlockGetter reader, BlockPos pos) {
+        return state.getFluidState().isEmpty();
     }
 
     @Override
-    @Override
-    public boolean isPathfindable(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, PathComputationType pathcomputationtype) {
-        return pathcomputationtype == PathComputationType.AIR && !this.hasCollision ? true : super.isPathfindable(blockstate, blockgetter, blockpos, pathcomputationtype);
+    public boolean isPathfindable(IBlockData state, BlockGetter level, BlockPos pos, PathMode type) {
+        return type == PathMode.AIR && !this.hasCollision ? true : super.isPathfindable(state, level, pos, type);
     }
 }
