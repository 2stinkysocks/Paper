--- a/net/minecraft/world/level/block/CoralWallFanBlock.java
+++ b/net/minecraft/world/level/block/CoralWallFanBlock.java
@@ -9,57 +9,58 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.Fluids;
 
 public class CoralWallFanBlock extends BaseCoralWallFanBlock {
 
     public static final MapCodec<CoralWallFanBlock> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
-        return instance.group(CoralBlock.DEAD_CORAL_FIELD.forGetter((coralwallfanblock) -> {
-            return coralwallfanblock.deadBlock;
+        return instance.group(CoralBlock.DEAD_CORAL_FIELD.forGetter((blockcoralfanwall) -> {
+            return blockcoralfanwall.deadBlock;
         }), propertiesCodec()).apply(instance, CoralWallFanBlock::new);
     });
     private final Block deadBlock;
 
     @Override
-    @Override
     public MapCodec<CoralWallFanBlock> codec() {
         return CoralWallFanBlock.CODEC;
     }
 
-    protected CoralWallFanBlock(Block block, BlockBehaviour.Properties blockbehaviour_properties) {
-        super(blockbehaviour_properties);
-        this.deadBlock = block;
+    protected CoralWallFanBlock(Block deadBlock, BlockBehaviour.Properties properties) {
+        super(properties);
+        this.deadBlock = deadBlock;
     }
 
     @Override
-    @Override
-    public void onPlace(BlockState blockstate, Level level, BlockPos blockpos, BlockState blockstate1, boolean flag) {
-        this.tryScheduleDieTick(blockstate, level, blockpos);
+    public void onPlace(IBlockData state, Level level, BlockPos pos, IBlockData oldState, boolean isMoving) {
+        this.tryScheduleDieTick(state, level, pos);
     }
 
     @Override
-    @Override
-    public void tick(BlockState blockstate, ServerLevel serverlevel, BlockPos blockpos, RandomSource randomsource) {
-        if (!scanForWater(blockstate, serverlevel, blockpos)) {
-            serverlevel.setBlock(blockpos, (BlockState) ((BlockState) this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false)).setValue(CoralWallFanBlock.FACING, (Direction) blockstate.getValue(CoralWallFanBlock.FACING)), 2);
+    public void tick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
+        if (!scanForWater(state, level, pos)) {
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(level, pos, this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false).setValue(CoralWallFanBlock.FACING, state.getValue(CoralWallFanBlock.FACING))).isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
+            level.setBlock(pos, (IBlockData) ((IBlockData) this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false)).setValue(CoralWallFanBlock.FACING, (Direction) state.getValue(CoralWallFanBlock.FACING)), 2);
         }
 
     }
 
     @Override
-    @Override
-    public BlockState updateShape(BlockState blockstate, Direction direction, BlockState blockstate1, LevelAccessor levelaccessor, BlockPos blockpos, BlockPos blockpos1) {
-        if (direction.getOpposite() == blockstate.getValue(CoralWallFanBlock.FACING) && !blockstate.canSurvive(levelaccessor, blockpos)) {
+    public IBlockData updateShape(IBlockData state, Direction facing, IBlockData facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
+        if (facing.getOpposite() == state.getValue(CoralWallFanBlock.FACING) && !state.canSurvive(level, currentPos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
-            if ((Boolean) blockstate.getValue(CoralWallFanBlock.WATERLOGGED)) {
-                levelaccessor.scheduleTick(blockpos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(levelaccessor));
+            if ((Boolean) state.getValue(CoralWallFanBlock.WATERLOGGED)) {
+                level.scheduleTick(currentPos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(level));
             }
 
-            this.tryScheduleDieTick(blockstate, levelaccessor, blockpos);
-            return super.updateShape(blockstate, direction, blockstate1, levelaccessor, blockpos, blockpos1);
+            this.tryScheduleDieTick(state, level, currentPos);
+            return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
         }
     }
 }
