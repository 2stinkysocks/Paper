--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -28,7 +28,6 @@
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.WorldlyContainer;
 import net.minecraft.world.entity.ExperienceOrb;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.player.StackedContents;
 import net.minecraft.world.inventory.ContainerData;
 import net.minecraft.world.inventory.RecipeCraftingHolder;
@@ -40,12 +39,25 @@
 import net.minecraft.world.item.crafting.RecipeHolder;
 import net.minecraft.world.item.crafting.RecipeManager;
 import net.minecraft.world.item.crafting.RecipeType;
-import net.minecraft.world.level.ItemLike;
+import net.minecraft.world.level.IMaterial;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.AbstractFurnaceBlock;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockExpEvent;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceExtractEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+import org.bukkit.event.inventory.FurnaceStartSmeltEvent;
+import org.bukkit.inventory.CookingRecipe;
+// CraftBukkit end
 
 public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeCraftingHolder, StackedContentsCompatible {
 
@@ -63,22 +75,21 @@
     public static final int BURN_TIME_STANDARD = 200;
     public static final int BURN_COOL_SPEED = 2;
     protected NonNullList<ItemStack> items;
-    int litTime;
+    public int litTime;
     int litDuration;
-    int cookingProgress;
-    int cookingTotalTime;
+    public int cookingProgress;
+    public int cookingTotalTime;
     protected final ContainerData dataAccess;
-    private final Object2IntOpenHashMap<ResourceLocation> recipesUsed;
+    public final Object2IntOpenHashMap<ResourceLocation> recipesUsed;
     private final RecipeManager.CachedCheck<Container, ? extends AbstractCookingRecipe> quickCheck;
 
-    protected AbstractFurnaceBlockEntity(BlockEntityType<?> blockentitytype, BlockPos blockpos, BlockState blockstate, RecipeType<? extends AbstractCookingRecipe> recipetype) {
-        super(blockentitytype, blockpos, blockstate);
+    protected AbstractFurnaceBlockEntity(BlockEntityType<?> type, BlockPos pos, IBlockData blockState, RecipeType<? extends AbstractCookingRecipe> recipeType) {
+        super(type, pos, blockState);
         this.items = NonNullList.withSize(3, ItemStack.EMPTY);
         this.dataAccess = new ContainerData() {
             @Override
-            @Override
-            public int get(int i) {
-                switch (i) {
+            public int get(int index) {
+                switch (index) {
                     case 0:
                         return AbstractFurnaceBlockEntity.this.litTime;
                     case 1:
@@ -93,125 +104,157 @@
             }
 
             @Override
-            @Override
-            public void set(int i, int j) {
-                switch (i) {
+            public void set(int index, int value) {
+                switch (index) {
                     case 0:
-                        AbstractFurnaceBlockEntity.this.litTime = j;
+                        AbstractFurnaceBlockEntity.this.litTime = value;
                         break;
                     case 1:
-                        AbstractFurnaceBlockEntity.this.litDuration = j;
+                        AbstractFurnaceBlockEntity.this.litDuration = value;
                         break;
                     case 2:
-                        AbstractFurnaceBlockEntity.this.cookingProgress = j;
+                        AbstractFurnaceBlockEntity.this.cookingProgress = value;
                         break;
                     case 3:
-                        AbstractFurnaceBlockEntity.this.cookingTotalTime = j;
+                        AbstractFurnaceBlockEntity.this.cookingTotalTime = value;
                 }
 
             }
 
             @Override
-            @Override
             public int getCount() {
                 return 4;
             }
         };
         this.recipesUsed = new Object2IntOpenHashMap();
-        this.quickCheck = RecipeManager.createCheck(recipetype);
+        this.quickCheck = RecipeManager.createCheck((RecipeType<AbstractCookingRecipe>) recipeType); // CraftBukkit - decompile error // Eclipse fail
     }
 
     public static Map<Item, Integer> getFuel() {
         Map<Item, Integer> map = Maps.newLinkedHashMap();
 
-        add(map, (ItemLike) Items.LAVA_BUCKET, 20000);
-        add(map, (ItemLike) Blocks.COAL_BLOCK, 16000);
-        add(map, (ItemLike) Items.BLAZE_ROD, 2400);
-        add(map, (ItemLike) Items.COAL, 1600);
-        add(map, (ItemLike) Items.CHARCOAL, 1600);
+        add(map, (IMaterial) Items.LAVA_BUCKET, 20000);
+        add(map, (IMaterial) Blocks.COAL_BLOCK, 16000);
+        add(map, (IMaterial) Items.BLAZE_ROD, 2400);
+        add(map, (IMaterial) Items.COAL, 1600);
+        add(map, (IMaterial) Items.CHARCOAL, 1600);
         add(map, ItemTags.LOGS, 300);
         add(map, ItemTags.BAMBOO_BLOCKS, 300);
         add(map, ItemTags.PLANKS, 300);
-        add(map, (ItemLike) Blocks.BAMBOO_MOSAIC, 300);
+        add(map, (IMaterial) Blocks.BAMBOO_MOSAIC, 300);
         add(map, ItemTags.WOODEN_STAIRS, 300);
-        add(map, (ItemLike) Blocks.BAMBOO_MOSAIC_STAIRS, 300);
+        add(map, (IMaterial) Blocks.BAMBOO_MOSAIC_STAIRS, 300);
         add(map, ItemTags.WOODEN_SLABS, 150);
-        add(map, (ItemLike) Blocks.BAMBOO_MOSAIC_SLAB, 150);
+        add(map, (IMaterial) Blocks.BAMBOO_MOSAIC_SLAB, 150);
         add(map, ItemTags.WOODEN_TRAPDOORS, 300);
         add(map, ItemTags.WOODEN_PRESSURE_PLATES, 300);
         add(map, ItemTags.WOODEN_FENCES, 300);
         add(map, ItemTags.FENCE_GATES, 300);
-        add(map, (ItemLike) Blocks.NOTE_BLOCK, 300);
-        add(map, (ItemLike) Blocks.BOOKSHELF, 300);
-        add(map, (ItemLike) Blocks.CHISELED_BOOKSHELF, 300);
-        add(map, (ItemLike) Blocks.LECTERN, 300);
-        add(map, (ItemLike) Blocks.JUKEBOX, 300);
-        add(map, (ItemLike) Blocks.CHEST, 300);
-        add(map, (ItemLike) Blocks.TRAPPED_CHEST, 300);
-        add(map, (ItemLike) Blocks.CRAFTING_TABLE, 300);
-        add(map, (ItemLike) Blocks.DAYLIGHT_DETECTOR, 300);
+        add(map, (IMaterial) Blocks.NOTE_BLOCK, 300);
+        add(map, (IMaterial) Blocks.BOOKSHELF, 300);
+        add(map, (IMaterial) Blocks.CHISELED_BOOKSHELF, 300);
+        add(map, (IMaterial) Blocks.LECTERN, 300);
+        add(map, (IMaterial) Blocks.JUKEBOX, 300);
+        add(map, (IMaterial) Blocks.CHEST, 300);
+        add(map, (IMaterial) Blocks.TRAPPED_CHEST, 300);
+        add(map, (IMaterial) Blocks.CRAFTING_TABLE, 300);
+        add(map, (IMaterial) Blocks.DAYLIGHT_DETECTOR, 300);
         add(map, ItemTags.BANNERS, 300);
-        add(map, (ItemLike) Items.BOW, 300);
-        add(map, (ItemLike) Items.FISHING_ROD, 300);
-        add(map, (ItemLike) Blocks.LADDER, 300);
+        add(map, (IMaterial) Items.BOW, 300);
+        add(map, (IMaterial) Items.FISHING_ROD, 300);
+        add(map, (IMaterial) Blocks.LADDER, 300);
         add(map, ItemTags.SIGNS, 200);
         add(map, ItemTags.HANGING_SIGNS, 800);
-        add(map, (ItemLike) Items.WOODEN_SHOVEL, 200);
-        add(map, (ItemLike) Items.WOODEN_SWORD, 200);
-        add(map, (ItemLike) Items.WOODEN_HOE, 200);
-        add(map, (ItemLike) Items.WOODEN_AXE, 200);
-        add(map, (ItemLike) Items.WOODEN_PICKAXE, 200);
+        add(map, (IMaterial) Items.WOODEN_SHOVEL, 200);
+        add(map, (IMaterial) Items.WOODEN_SWORD, 200);
+        add(map, (IMaterial) Items.WOODEN_HOE, 200);
+        add(map, (IMaterial) Items.WOODEN_AXE, 200);
+        add(map, (IMaterial) Items.WOODEN_PICKAXE, 200);
         add(map, ItemTags.WOODEN_DOORS, 200);
         add(map, ItemTags.BOATS, 1200);
         add(map, ItemTags.WOOL, 100);
         add(map, ItemTags.WOODEN_BUTTONS, 100);
-        add(map, (ItemLike) Items.STICK, 100);
+        add(map, (IMaterial) Items.STICK, 100);
         add(map, ItemTags.SAPLINGS, 100);
-        add(map, (ItemLike) Items.BOWL, 100);
+        add(map, (IMaterial) Items.BOWL, 100);
         add(map, ItemTags.WOOL_CARPETS, 67);
-        add(map, (ItemLike) Blocks.DRIED_KELP_BLOCK, 4001);
-        add(map, (ItemLike) Items.CROSSBOW, 300);
-        add(map, (ItemLike) Blocks.BAMBOO, 50);
-        add(map, (ItemLike) Blocks.DEAD_BUSH, 100);
-        add(map, (ItemLike) Blocks.SCAFFOLDING, 50);
-        add(map, (ItemLike) Blocks.LOOM, 300);
-        add(map, (ItemLike) Blocks.BARREL, 300);
-        add(map, (ItemLike) Blocks.CARTOGRAPHY_TABLE, 300);
-        add(map, (ItemLike) Blocks.FLETCHING_TABLE, 300);
-        add(map, (ItemLike) Blocks.SMITHING_TABLE, 300);
-        add(map, (ItemLike) Blocks.COMPOSTER, 300);
-        add(map, (ItemLike) Blocks.AZALEA, 100);
-        add(map, (ItemLike) Blocks.FLOWERING_AZALEA, 100);
-        add(map, (ItemLike) Blocks.MANGROVE_ROOTS, 300);
+        add(map, (IMaterial) Blocks.DRIED_KELP_BLOCK, 4001);
+        add(map, (IMaterial) Items.CROSSBOW, 300);
+        add(map, (IMaterial) Blocks.BAMBOO, 50);
+        add(map, (IMaterial) Blocks.DEAD_BUSH, 100);
+        add(map, (IMaterial) Blocks.SCAFFOLDING, 50);
+        add(map, (IMaterial) Blocks.LOOM, 300);
+        add(map, (IMaterial) Blocks.BARREL, 300);
+        add(map, (IMaterial) Blocks.CARTOGRAPHY_TABLE, 300);
+        add(map, (IMaterial) Blocks.FLETCHING_TABLE, 300);
+        add(map, (IMaterial) Blocks.SMITHING_TABLE, 300);
+        add(map, (IMaterial) Blocks.COMPOSTER, 300);
+        add(map, (IMaterial) Blocks.AZALEA, 100);
+        add(map, (IMaterial) Blocks.FLOWERING_AZALEA, 100);
+        add(map, (IMaterial) Blocks.MANGROVE_ROOTS, 300);
         return map;
     }
 
+    // CraftBukkit start - add fields and methods
+    private int maxStack = MAX_STACK;
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    public Object2IntOpenHashMap<ResourceLocation> getRecipesUsed() {
+        return this.recipesUsed; // PAIL private -> public
+    }
+    // CraftBukkit end
+
     private static boolean isNeverAFurnaceFuel(Item item) {
         return item.builtInRegistryHolder().is(ItemTags.NON_FLAMMABLE_WOOD);
     }
 
-    private static void add(Map<Item, Integer> map, TagKey<Item> tagkey, int i) {
-        Iterator iterator = BuiltInRegistries.ITEM.getTagOrEmpty(tagkey).iterator();
+    private static void add(Map<Item, Integer> map, TagKey<Item> itemTag, int burnTime) {
+        Iterator iterator = BuiltInRegistries.ITEM.getTagOrEmpty(itemTag).iterator();
 
         while (iterator.hasNext()) {
             Holder<Item> holder = (Holder) iterator.next();
 
             if (!isNeverAFurnaceFuel((Item) holder.value())) {
-                map.put((Item) holder.value(), i);
+                map.put((Item) holder.value(), burnTime);
             }
         }
 
     }
 
-    private static void add(Map<Item, Integer> map, ItemLike itemlike, int i) {
-        Item item = itemlike.asItem();
+    private static void add(Map<Item, Integer> map, IMaterial item, int burnTime) {
+        Item item1 = item.asItem();
 
-        if (isNeverAFurnaceFuel(item)) {
+        if (isNeverAFurnaceFuel(item1)) {
             if (SharedConstants.IS_RUNNING_IN_IDE) {
-                throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("A developer tried to explicitly make fire resistant item " + item.getName((ItemStack) null).getString() + " a furnace fuel. That will not work!"));
+                throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("A developer tried to explicitly make fire resistant item " + item1.getName((ItemStack) null).getString() + " a furnace fuel. That will not work!"));
             }
         } else {
-            map.put(item, i);
+            map.put(item1, burnTime);
         }
     }
 
@@ -220,73 +263,82 @@
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
+    public void load(CompoundTag tag) {
+        super.load(tag);
         this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
-        ContainerHelper.loadAllItems(compoundtag, this.items);
-        this.litTime = compoundtag.getShort("BurnTime");
-        this.cookingProgress = compoundtag.getShort("CookTime");
-        this.cookingTotalTime = compoundtag.getShort("CookTimeTotal");
+        ContainerHelper.loadAllItems(tag, this.items);
+        this.litTime = tag.getShort("BurnTime");
+        this.cookingProgress = tag.getShort("CookTime");
+        this.cookingTotalTime = tag.getShort("CookTimeTotal");
         this.litDuration = this.getBurnDuration((ItemStack) this.items.get(1));
-        CompoundTag compoundtag1 = compoundtag.getCompound("RecipesUsed");
-        Iterator iterator = compoundtag1.getAllKeys().iterator();
+        CompoundTag nbttagcompound1 = tag.getCompound("RecipesUsed");
+        Iterator iterator = nbttagcompound1.getAllKeys().iterator();
 
         while (iterator.hasNext()) {
             String s = (String) iterator.next();
 
-            this.recipesUsed.put(new ResourceLocation(s), compoundtag1.getInt(s));
+            this.recipesUsed.put(new ResourceLocation(s), nbttagcompound1.getInt(s));
         }
 
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        compoundtag.putShort("BurnTime", (short) this.litTime);
-        compoundtag.putShort("CookTime", (short) this.cookingProgress);
-        compoundtag.putShort("CookTimeTotal", (short) this.cookingTotalTime);
-        ContainerHelper.saveAllItems(compoundtag, this.items);
-        CompoundTag compoundtag1 = new CompoundTag();
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        tag.putShort("BurnTime", (short) this.litTime);
+        tag.putShort("CookTime", (short) this.cookingProgress);
+        tag.putShort("CookTimeTotal", (short) this.cookingTotalTime);
+        ContainerHelper.saveAllItems(tag, this.items);
+        CompoundTag nbttagcompound1 = new CompoundTag();
 
-        this.recipesUsed.forEach((resourcelocation, integer) -> {
-            compoundtag1.putInt(resourcelocation.toString(), integer);
+        this.recipesUsed.forEach((minecraftkey, integer) -> {
+            nbttagcompound1.putInt(minecraftkey.toString(), integer);
         });
-        compoundtag.put("RecipesUsed", compoundtag1);
+        tag.put("RecipesUsed", nbttagcompound1);
     }
 
-    public static void serverTick(Level level, BlockPos blockpos, BlockState blockstate, AbstractFurnaceBlockEntity abstractfurnaceblockentity) {
-        boolean flag = abstractfurnaceblockentity.isLit();
+    public static void serverTick(Level level, BlockPos pos, IBlockData state, AbstractFurnaceBlockEntity blockEntity) {
+        boolean flag = blockEntity.isLit();
         boolean flag1 = false;
 
-        if (abstractfurnaceblockentity.isLit()) {
-            --abstractfurnaceblockentity.litTime;
+        if (blockEntity.isLit()) {
+            --blockEntity.litTime;
         }
 
-        ItemStack itemstack = (ItemStack) abstractfurnaceblockentity.items.get(1);
-        boolean flag2 = !((ItemStack) abstractfurnaceblockentity.items.get(0)).isEmpty();
+        ItemStack itemstack = (ItemStack) blockEntity.items.get(1);
+        boolean flag2 = !((ItemStack) blockEntity.items.get(0)).isEmpty();
         boolean flag3 = !itemstack.isEmpty();
 
-        if (!abstractfurnaceblockentity.isLit() && (!flag3 || !flag2)) {
-            if (!abstractfurnaceblockentity.isLit() && abstractfurnaceblockentity.cookingProgress > 0) {
-                abstractfurnaceblockentity.cookingProgress = Mth.clamp(abstractfurnaceblockentity.cookingProgress - 2, 0, abstractfurnaceblockentity.cookingTotalTime);
+        if (!blockEntity.isLit() && (!flag3 || !flag2)) {
+            if (!blockEntity.isLit() && blockEntity.cookingProgress > 0) {
+                blockEntity.cookingProgress = Mth.clamp(blockEntity.cookingProgress - 2, 0, blockEntity.cookingTotalTime);
             }
         } else {
             RecipeHolder recipeholder;
 
             if (flag2) {
-                recipeholder = (RecipeHolder) abstractfurnaceblockentity.quickCheck.getRecipeFor(abstractfurnaceblockentity, level).orElse((Object) null);
+                recipeholder = (RecipeHolder) blockEntity.quickCheck.getRecipeFor(blockEntity, level).orElse(null); // CraftBukkit - decompile error
             } else {
                 recipeholder = null;
             }
 
-            int i = abstractfurnaceblockentity.getMaxStackSize();
+            int i = blockEntity.getMaxStackSize();
 
-            if (!abstractfurnaceblockentity.isLit() && canBurn(level.registryAccess(), recipeholder, abstractfurnaceblockentity.items, i)) {
-                abstractfurnaceblockentity.litTime = abstractfurnaceblockentity.getBurnDuration(itemstack);
-                abstractfurnaceblockentity.litDuration = abstractfurnaceblockentity.litTime;
-                if (abstractfurnaceblockentity.isLit()) {
+            if (!blockEntity.isLit() && canBurn(level.registryAccess(), recipeholder, blockEntity.items, i)) {
+                // CraftBukkit start
+                CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
+
+                FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(CraftBlock.at(level, pos), fuel, blockEntity.getBurnDuration(itemstack));
+                level.getCraftServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+                if (furnaceBurnEvent.isCancelled()) {
+                    return;
+                }
+
+                blockEntity.litTime = furnaceBurnEvent.getBurnTime();
+                blockEntity.litDuration = blockEntity.litTime;
+                if (blockEntity.isLit() && furnaceBurnEvent.isBurning()) {
+                    // CraftBukkit end
                     flag1 = true;
                     if (flag3) {
                         Item item = itemstack.getItem();
@@ -295,43 +347,55 @@
                         if (itemstack.isEmpty()) {
                             Item item1 = item.getCraftingRemainingItem();
 
-                            abstractfurnaceblockentity.items.set(1, item1 == null ? ItemStack.EMPTY : new ItemStack(item1));
+                            blockEntity.items.set(1, item1 == null ? ItemStack.EMPTY : new ItemStack(item1));
                         }
                     }
                 }
             }
 
-            if (abstractfurnaceblockentity.isLit() && canBurn(level.registryAccess(), recipeholder, abstractfurnaceblockentity.items, i)) {
-                ++abstractfurnaceblockentity.cookingProgress;
-                if (abstractfurnaceblockentity.cookingProgress == abstractfurnaceblockentity.cookingTotalTime) {
-                    abstractfurnaceblockentity.cookingProgress = 0;
-                    abstractfurnaceblockentity.cookingTotalTime = getTotalCookTime(level, abstractfurnaceblockentity);
-                    if (burn(level.registryAccess(), recipeholder, abstractfurnaceblockentity.items, i)) {
-                        abstractfurnaceblockentity.setRecipeUsed(recipeholder);
+            if (blockEntity.isLit() && canBurn(level.registryAccess(), recipeholder, blockEntity.items, i)) {
+                // CraftBukkit start
+                if (recipeholder != null && blockEntity.cookingProgress == 0) {
+                    CraftItemStack source = CraftItemStack.asCraftMirror(blockEntity.items.get(0));
+                    CookingRecipe<?> recipe = (CookingRecipe<?>) recipeholder.toBukkitRecipe();
+
+                    FurnaceStartSmeltEvent event = new FurnaceStartSmeltEvent(CraftBlock.at(level, pos), source, recipe);
+                    level.getCraftServer().getPluginManager().callEvent(event);
+
+                    blockEntity.cookingTotalTime = event.getTotalCookTime();
+                }
+                // CraftBukkit end
+
+                ++blockEntity.cookingProgress;
+                if (blockEntity.cookingProgress == blockEntity.cookingTotalTime) {
+                    blockEntity.cookingProgress = 0;
+                    blockEntity.cookingTotalTime = getTotalCookTime(level, blockEntity);
+                    if (burn(blockEntity.level, blockEntity.worldPosition, level.registryAccess(), recipeholder, blockEntity.items, i)) { // CraftBukkit
+                        blockEntity.setRecipeUsed(recipeholder);
                     }
 
                     flag1 = true;
                 }
             } else {
-                abstractfurnaceblockentity.cookingProgress = 0;
+                blockEntity.cookingProgress = 0;
             }
         }
 
-        if (flag != abstractfurnaceblockentity.isLit()) {
+        if (flag != blockEntity.isLit()) {
             flag1 = true;
-            blockstate = (BlockState) blockstate.setValue(AbstractFurnaceBlock.LIT, abstractfurnaceblockentity.isLit());
-            level.setBlock(blockpos, blockstate, 3);
+            state = (IBlockData) state.setValue(AbstractFurnaceBlock.LIT, blockEntity.isLit());
+            level.setBlock(pos, state, 3);
         }
 
         if (flag1) {
-            setChanged(level, blockpos, blockstate);
+            setChanged(level, pos, state);
         }
 
     }
 
-    private static boolean canBurn(RegistryAccess registryaccess, @Nullable RecipeHolder<?> recipeholder, NonNullList<ItemStack> nonnulllist, int i) {
+    private static boolean canBurn(RegistryAccess iregistrycustom, @Nullable RecipeHolder<?> recipeholder, NonNullList<ItemStack> nonnulllist, int i) {
         if (!((ItemStack) nonnulllist.get(0)).isEmpty() && recipeholder != null) {
-            ItemStack itemstack = recipeholder.value().getResultItem(registryaccess);
+            ItemStack itemstack = recipeholder.value().getResultItem(iregistrycustom);
 
             if (itemstack.isEmpty()) {
                 return false;
@@ -345,17 +409,44 @@
         }
     }
 
-    private static boolean burn(RegistryAccess registryaccess, @Nullable RecipeHolder<?> recipeholder, NonNullList<ItemStack> nonnulllist, int i) {
-        if (recipeholder != null && canBurn(registryaccess, recipeholder, nonnulllist, i)) {
+    private static boolean burn(Level world, BlockPos blockposition, RegistryAccess iregistrycustom, @Nullable RecipeHolder<?> recipeholder, NonNullList<ItemStack> nonnulllist, int i) { // CraftBukkit
+        if (recipeholder != null && canBurn(iregistrycustom, recipeholder, nonnulllist, i)) {
             ItemStack itemstack = (ItemStack) nonnulllist.get(0);
-            ItemStack itemstack1 = recipeholder.value().getResultItem(registryaccess);
+            ItemStack itemstack1 = recipeholder.value().getResultItem(iregistrycustom);
             ItemStack itemstack2 = (ItemStack) nonnulllist.get(2);
 
+            // CraftBukkit start - fire FurnaceSmeltEvent
+            CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+            org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(CraftBlock.at(world, blockposition), source, result);
+            world.getCraftServer().getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+                return false;
+            }
+
+            result = furnaceSmeltEvent.getResult();
+            itemstack1 = CraftItemStack.asNMSCopy(result);
+
+            if (!itemstack1.isEmpty()) {
+                if (itemstack2.isEmpty()) {
+                    nonnulllist.set(2, itemstack1.copy());
+                } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+                    itemstack2.grow(itemstack1.getCount());
+                } else {
+                    return false;
+                }
+            }
+
+            /*
             if (itemstack2.isEmpty()) {
                 nonnulllist.set(2, itemstack1.copy());
             } else if (itemstack2.is(itemstack1.getItem())) {
                 itemstack2.grow(1);
             }
+            */
+            // CraftBukkit end
 
             if (itemstack.is(Blocks.WET_SPONGE.asItem()) && !((ItemStack) nonnulllist.get(1)).isEmpty() && ((ItemStack) nonnulllist.get(1)).is(Items.BUCKET)) {
                 nonnulllist.set(1, new ItemStack(Items.WATER_BUCKET));
@@ -368,52 +459,48 @@
         }
     }
 
-    protected int getBurnDuration(ItemStack itemstack) {
-        if (itemstack.isEmpty()) {
+    protected int getBurnDuration(ItemStack fuel) {
+        if (fuel.isEmpty()) {
             return 0;
         } else {
-            Item item = itemstack.getItem();
+            Item item = fuel.getItem();
 
             return (Integer) getFuel().getOrDefault(item, 0);
         }
     }
 
-    private static int getTotalCookTime(Level level, AbstractFurnaceBlockEntity abstractfurnaceblockentity) {
-        return (Integer) abstractfurnaceblockentity.quickCheck.getRecipeFor(abstractfurnaceblockentity, level).map((recipeholder) -> {
+    private static int getTotalCookTime(Level level, AbstractFurnaceBlockEntity blockEntity) {
+        if (level == null) return 200; // CraftBukkit - SPIGOT-4302
+        return (Integer) blockEntity.quickCheck.getRecipeFor(blockEntity, level).map((recipeholder) -> {
             return ((AbstractCookingRecipe) recipeholder.value()).getCookingTime();
         }).orElse(200);
     }
 
-    public static boolean isFuel(ItemStack itemstack) {
-        return getFuel().containsKey(itemstack.getItem());
+    public static boolean isFuel(ItemStack stack) {
+        return getFuel().containsKey(stack.getItem());
     }
 
     @Override
-    @Override
-    public int[] getSlotsForFace(Direction direction) {
-        return direction == Direction.DOWN ? AbstractFurnaceBlockEntity.SLOTS_FOR_DOWN : (direction == Direction.UP ? AbstractFurnaceBlockEntity.SLOTS_FOR_UP : AbstractFurnaceBlockEntity.SLOTS_FOR_SIDES);
+    public int[] getSlotsForFace(Direction side) {
+        return side == Direction.DOWN ? AbstractFurnaceBlockEntity.SLOTS_FOR_DOWN : (side == Direction.UP ? AbstractFurnaceBlockEntity.SLOTS_FOR_UP : AbstractFurnaceBlockEntity.SLOTS_FOR_SIDES);
     }
 
     @Override
-    @Override
-    public boolean canPlaceItemThroughFace(int i, ItemStack itemstack, @Nullable Direction direction) {
-        return this.canPlaceItem(i, itemstack);
+    public boolean canPlaceItemThroughFace(int index, ItemStack itemStack, @Nullable Direction direction) {
+        return this.canPlaceItem(index, itemStack);
     }
 
     @Override
-    @Override
-    public boolean canTakeItemThroughFace(int i, ItemStack itemstack, Direction direction) {
-        return direction == Direction.DOWN && i == 1 ? itemstack.is(Items.WATER_BUCKET) || itemstack.is(Items.BUCKET) : true;
+    public boolean canTakeItemThroughFace(int index, ItemStack stack, Direction direction) {
+        return direction == Direction.DOWN && index == 1 ? stack.is(Items.WATER_BUCKET) || stack.is(Items.BUCKET) : true;
     }
 
     @Override
-    @Override
     public int getContainerSize() {
         return this.items.size();
     }
 
     @Override
-    @Override
     public boolean isEmpty() {
         Iterator iterator = this.items.iterator();
 
@@ -431,35 +518,31 @@
     }
 
     @Override
-    @Override
-    public ItemStack getItem(int i) {
-        return (ItemStack) this.items.get(i);
+    public ItemStack getItem(int index) {
+        return (ItemStack) this.items.get(index);
     }
 
     @Override
-    @Override
-    public ItemStack removeItem(int i, int j) {
-        return ContainerHelper.removeItem(this.items, i, j);
+    public ItemStack removeItem(int index, int count) {
+        return ContainerHelper.removeItem(this.items, index, count);
     }
 
     @Override
-    @Override
-    public ItemStack removeItemNoUpdate(int i) {
-        return ContainerHelper.takeItem(this.items, i);
+    public ItemStack removeItemNoUpdate(int index) {
+        return ContainerHelper.takeItem(this.items, index);
     }
 
     @Override
-    @Override
-    public void setItem(int i, ItemStack itemstack) {
-        ItemStack itemstack1 = (ItemStack) this.items.get(i);
-        boolean flag = !itemstack.isEmpty() && ItemStack.isSameItemSameTags(itemstack1, itemstack);
+    public void setItem(int index, ItemStack stack) {
+        ItemStack itemstack1 = (ItemStack) this.items.get(index);
+        boolean flag = !stack.isEmpty() && ItemStack.isSameItemSameTags(itemstack1, stack);
 
-        this.items.set(i, itemstack);
-        if (itemstack.getCount() > this.getMaxStackSize()) {
-            itemstack.setCount(this.getMaxStackSize());
+        this.items.set(index, stack);
+        if (stack.getCount() > this.getMaxStackSize()) {
+            stack.setCount(this.getMaxStackSize());
         }
 
-        if (i == 0 && !flag) {
+        if (index == 0 && !flag) {
             this.cookingTotalTime = getTotalCookTime(this.level, this);
             this.cookingProgress = 0;
             this.setChanged();
@@ -468,87 +551,87 @@
     }
 
     @Override
-    @Override
-    public boolean stillValid(Player player) {
+    public boolean stillValid(net.minecraft.world.entity.player.Player player) {
         return Container.stillValidBlockEntity(this, player);
     }
 
     @Override
-    @Override
-    public boolean canPlaceItem(int i, ItemStack itemstack) {
-        if (i == 2) {
+    public boolean canPlaceItem(int index, ItemStack stack) {
+        if (index == 2) {
             return false;
-        } else if (i != 1) {
+        } else if (index != 1) {
             return true;
         } else {
             ItemStack itemstack1 = (ItemStack) this.items.get(1);
 
-            return isFuel(itemstack) || itemstack.is(Items.BUCKET) && !itemstack1.is(Items.BUCKET);
+            return isFuel(stack) || stack.is(Items.BUCKET) && !itemstack1.is(Items.BUCKET);
         }
     }
 
     @Override
-    @Override
     public void clearContent() {
         this.items.clear();
     }
 
     @Override
-    @Override
     public void setRecipeUsed(@Nullable RecipeHolder<?> recipeholder) {
         if (recipeholder != null) {
-            ResourceLocation resourcelocation = recipeholder.id();
+            ResourceLocation minecraftkey = recipeholder.id();
 
-            this.recipesUsed.addTo(resourcelocation, 1);
+            this.recipesUsed.addTo(minecraftkey, 1);
         }
 
     }
 
     @Nullable
     @Override
-    @Override
     public RecipeHolder<?> getRecipeUsed() {
         return null;
     }
 
     @Override
-    @Override
-    public void awardUsedRecipes(Player player, List<ItemStack> list) {}
+    public void awardUsedRecipes(net.minecraft.world.entity.player.Player player, List<ItemStack> items) {}
 
-    public void awardUsedRecipesAndPopExperience(ServerPlayer serverplayer) {
-        List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(serverplayer.serverLevel(), serverplayer.position());
+    public void awardUsedRecipesAndPopExperience(ServerPlayer entityplayer, ItemStack itemstack, int amount) { // CraftBukkit
+        List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(entityplayer.serverLevel(), entityplayer.position(), this.worldPosition, entityplayer, itemstack, amount); // CraftBukkit
 
-        serverplayer.awardRecipes(list);
+        entityplayer.awardRecipes(list);
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
             RecipeHolder<?> recipeholder = (RecipeHolder) iterator.next();
 
             if (recipeholder != null) {
-                serverplayer.triggerRecipeCrafted(recipeholder, this.items);
+                entityplayer.triggerRecipeCrafted(recipeholder, this.items);
             }
         }
 
         this.recipesUsed.clear();
     }
 
-    public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel serverlevel, Vec3 vec3) {
+    public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel level, Vec3 popVec) {
+        // CraftBukkit start
+        return this.getRecipesToAwardAndPopExperience(level, popVec, this.worldPosition, null, null, 0);
+    }
+
+    public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel worldserver, Vec3 vec3d, BlockPos blockposition, ServerPlayer entityplayer, ItemStack itemstack, int amount) {
+        // CraftBukkit end
         List<RecipeHolder<?>> list = Lists.newArrayList();
         ObjectIterator objectiterator = this.recipesUsed.object2IntEntrySet().iterator();
 
         while (objectiterator.hasNext()) {
             Entry<ResourceLocation> entry = (Entry) objectiterator.next();
 
-            serverlevel.getRecipeManager().byKey((ResourceLocation) entry.getKey()).ifPresent((recipeholder) -> {
+            worldserver.getRecipeManager().byKey((ResourceLocation) entry.getKey()).ifPresent((recipeholder) -> {
                 list.add(recipeholder);
-                createExperience(serverlevel, vec3, entry.getIntValue(), ((AbstractCookingRecipe) recipeholder.value()).getExperience());
+                createExperience(worldserver, vec3d, entry.getIntValue(), ((AbstractCookingRecipe) recipeholder.value()).getExperience(), blockposition, entityplayer, itemstack, amount); // CraftBukkit
             });
         }
 
         return list;
     }
 
-    private static void createExperience(ServerLevel serverlevel, Vec3 vec3, int i, float f) {
+    private static void createExperience(ServerLevel worldserver, Vec3 vec3d, int i, float f, BlockPos blockposition, net.minecraft.world.entity.player.Player entityhuman, ItemStack itemstack, int amount) { // CraftBukkit
         int j = Mth.floor((float) i * f);
         float f1 = Mth.frac((float) i * f);
 
@@ -556,18 +639,28 @@
             ++j;
         }
 
-        ExperienceOrb.award(serverlevel, vec3, j);
+        // CraftBukkit start - fire FurnaceExtractEvent / BlockExpEvent
+        BlockExpEvent event;
+        if (amount != 0) {
+            event = new FurnaceExtractEvent((Player) entityhuman.getBukkitEntity(), CraftBlock.at(worldserver, blockposition), org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(itemstack.getItem()), amount, j);
+        } else {
+            event = new BlockExpEvent(CraftBlock.at(worldserver, blockposition), j);
+        }
+        worldserver.getCraftServer().getPluginManager().callEvent(event);
+        j = event.getExpToDrop();
+        // CraftBukkit end
+
+        ExperienceOrb.award(worldserver, vec3d, j);
     }
 
     @Override
-    @Override
-    public void fillStackedContents(StackedContents stackedcontents) {
+    public void fillStackedContents(StackedContents helper) {
         Iterator iterator = this.items.iterator();
 
         while (iterator.hasNext()) {
             ItemStack itemstack = (ItemStack) iterator.next();
 
-            stackedcontents.accountStack(itemstack);
+            helper.accountStack(itemstack);
         }
 
     }
