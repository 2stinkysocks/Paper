--- a/net/minecraft/world/level/block/entity/ConduitBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ConduitBlockEntity.java
@@ -18,14 +18,18 @@
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.monster.Enemy;
+import net.minecraft.world.entity.monster.IMonster;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
 
 public class ConduitBlockEntity extends BlockEntity {
 
@@ -47,16 +51,15 @@
     private UUID destroyTargetUUID;
     private long nextAmbientSoundActivation;
 
-    public ConduitBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.CONDUIT, blockpos, blockstate);
+    public ConduitBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.CONDUIT, pos, blockState);
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
-        if (compoundtag.hasUUID("Target")) {
-            this.destroyTargetUUID = compoundtag.getUUID("Target");
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        if (tag.hasUUID("Target")) {
+            this.destroyTargetUUID = tag.getUUID("Target");
         } else {
             this.destroyTargetUUID = null;
         }
@@ -64,86 +67,83 @@
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
         if (this.destroyTarget != null) {
-            compoundtag.putUUID("Target", this.destroyTarget.getUUID());
+            tag.putUUID("Target", this.destroyTarget.getUUID());
         }
 
     }
 
     @Override
-    @Override
     public ClientboundBlockEntityDataPacket getUpdatePacket() {
         return ClientboundBlockEntityDataPacket.create(this);
     }
 
     @Override
-    @Override
     public CompoundTag getUpdateTag() {
         return this.saveWithoutMetadata();
     }
 
-    public static void clientTick(Level level, BlockPos blockpos, BlockState blockstate, ConduitBlockEntity conduitblockentity) {
-        ++conduitblockentity.tickCount;
+    public static void clientTick(Level level, BlockPos pos, IBlockData state, ConduitBlockEntity blockEntity) {
+        ++blockEntity.tickCount;
         long i = level.getGameTime();
-        List<BlockPos> list = conduitblockentity.effectBlocks;
+        List<BlockPos> list = blockEntity.effectBlocks;
 
         if (i % 40L == 0L) {
-            conduitblockentity.isActive = updateShape(level, blockpos, list);
-            updateHunting(conduitblockentity, list);
+            blockEntity.isActive = updateShape(level, pos, list);
+            updateHunting(blockEntity, list);
         }
 
-        updateClientTarget(level, blockpos, conduitblockentity);
-        animationTick(level, blockpos, list, conduitblockentity.destroyTarget, conduitblockentity.tickCount);
-        if (conduitblockentity.isActive()) {
-            ++conduitblockentity.activeRotation;
+        updateClientTarget(level, pos, blockEntity);
+        animationTick(level, pos, list, blockEntity.destroyTarget, blockEntity.tickCount);
+        if (blockEntity.isActive()) {
+            ++blockEntity.activeRotation;
         }
 
     }
 
-    public static void serverTick(Level level, BlockPos blockpos, BlockState blockstate, ConduitBlockEntity conduitblockentity) {
-        ++conduitblockentity.tickCount;
+    public static void serverTick(Level level, BlockPos pos, IBlockData state, ConduitBlockEntity blockEntity) {
+        ++blockEntity.tickCount;
         long i = level.getGameTime();
-        List<BlockPos> list = conduitblockentity.effectBlocks;
+        List<BlockPos> list = blockEntity.effectBlocks;
 
         if (i % 40L == 0L) {
-            boolean flag = updateShape(level, blockpos, list);
+            boolean flag = updateShape(level, pos, list);
 
-            if (flag != conduitblockentity.isActive) {
-                SoundEvent soundevent = flag ? SoundEvents.CONDUIT_ACTIVATE : SoundEvents.CONDUIT_DEACTIVATE;
+            if (flag != blockEntity.isActive) {
+                SoundEvent soundeffect = flag ? SoundEvents.CONDUIT_ACTIVATE : SoundEvents.CONDUIT_DEACTIVATE;
 
-                level.playSound((Player) null, blockpos, soundevent, SoundSource.BLOCKS, 1.0F, 1.0F);
+                level.playSound((Player) null, pos, soundeffect, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
 
-            conduitblockentity.isActive = flag;
-            updateHunting(conduitblockentity, list);
+            blockEntity.isActive = flag;
+            updateHunting(blockEntity, list);
             if (flag) {
-                applyEffects(level, blockpos, list);
-                updateDestroyTarget(level, blockpos, blockstate, list, conduitblockentity);
+                applyEffects(level, pos, list);
+                updateDestroyTarget(level, pos, state, list, blockEntity);
             }
         }
 
-        if (conduitblockentity.isActive()) {
+        if (blockEntity.isActive()) {
             if (i % 80L == 0L) {
-                level.playSound((Player) null, blockpos, SoundEvents.CONDUIT_AMBIENT, SoundSource.BLOCKS, 1.0F, 1.0F);
+                level.playSound((Player) null, pos, SoundEvents.CONDUIT_AMBIENT, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
 
-            if (i > conduitblockentity.nextAmbientSoundActivation) {
-                conduitblockentity.nextAmbientSoundActivation = i + 60L + (long) level.getRandom().nextInt(40);
-                level.playSound((Player) null, blockpos, SoundEvents.CONDUIT_AMBIENT_SHORT, SoundSource.BLOCKS, 1.0F, 1.0F);
+            if (i > blockEntity.nextAmbientSoundActivation) {
+                blockEntity.nextAmbientSoundActivation = i + 60L + (long) level.getRandom().nextInt(40);
+                level.playSound((Player) null, pos, SoundEvents.CONDUIT_AMBIENT_SHORT, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
         }
 
     }
 
-    private static void updateHunting(ConduitBlockEntity conduitblockentity, List<BlockPos> list) {
-        conduitblockentity.setHunting(list.size() >= 42);
+    private static void updateHunting(ConduitBlockEntity blockEntity, List<BlockPos> positions) {
+        blockEntity.setHunting(positions.size() >= 42);
     }
 
-    private static boolean updateShape(Level level, BlockPos blockpos, List<BlockPos> list) {
-        list.clear();
+    private static boolean updateShape(Level level, BlockPos pos, List<BlockPos> positions) {
+        positions.clear();
 
         int i;
         int j;
@@ -152,9 +152,9 @@
         for (i = -1; i <= 1; ++i) {
             for (j = -1; j <= 1; ++j) {
                 for (k = -1; k <= 1; ++k) {
-                    BlockPos blockpos1 = blockpos.offset(i, j, k);
+                    BlockPos blockposition1 = pos.offset(i, j, k);
 
-                    if (!level.isWaterAt(blockpos1)) {
+                    if (!level.isWaterAt(blockposition1)) {
                         return false;
                     }
                 }
@@ -169,16 +169,16 @@
                     int j1 = Math.abs(k);
 
                     if ((l > 1 || i1 > 1 || j1 > 1) && (i == 0 && (i1 == 2 || j1 == 2) || j == 0 && (l == 2 || j1 == 2) || k == 0 && (l == 2 || i1 == 2))) {
-                        BlockPos blockpos2 = blockpos.offset(i, j, k);
-                        BlockState blockstate = level.getBlockState(blockpos2);
+                        BlockPos blockposition2 = pos.offset(i, j, k);
+                        IBlockData iblockdata = level.getBlockState(blockposition2);
                         Block[] ablock = ConduitBlockEntity.VALID_BLOCKS;
                         int k1 = ablock.length;
 
                         for (int l1 = 0; l1 < k1; ++l1) {
                             Block block = ablock[l1];
 
-                            if (blockstate.is(block)) {
-                                list.add(blockpos2);
+                            if (iblockdata.is(block)) {
+                                positions.add(blockposition2);
                             }
                         }
                     }
@@ -186,126 +186,131 @@
             }
         }
 
-        return list.size() >= 16;
+        return positions.size() >= 16;
     }
 
-    private static void applyEffects(Level level, BlockPos blockpos, List<BlockPos> list) {
-        int i = list.size();
+    private static void applyEffects(Level level, BlockPos pos, List<BlockPos> positions) {
+        int i = positions.size();
         int j = i / 7 * 16;
-        int k = blockpos.getX();
-        int l = blockpos.getY();
-        int i1 = blockpos.getZ();
-        AABB aabb = (new AABB((double) k, (double) l, (double) i1, (double) (k + 1), (double) (l + 1), (double) (i1 + 1))).inflate((double) j).expandTowards(0.0D, (double) level.getHeight(), 0.0D);
-        List<Player> list1 = level.getEntitiesOfClass(Player.class, aabb);
+        int k = pos.getX();
+        int l = pos.getY();
+        int i1 = pos.getZ();
+        AABB axisalignedbb = (new AABB((double) k, (double) l, (double) i1, (double) (k + 1), (double) (l + 1), (double) (i1 + 1))).inflate((double) j).expandTowards(0.0D, (double) level.getHeight(), 0.0D);
+        List<Player> list1 = level.getEntitiesOfClass(Player.class, axisalignedbb);
 
         if (!list1.isEmpty()) {
             Iterator iterator = list1.iterator();
 
             while (iterator.hasNext()) {
-                Player player = (Player) iterator.next();
+                Player entityhuman = (Player) iterator.next();
 
-                if (blockpos.closerThan(player.blockPosition(), (double) j) && player.isInWaterOrRain()) {
-                    player.addEffect(new MobEffectInstance(MobEffects.CONDUIT_POWER, 260, 0, true, true));
+                if (pos.closerThan(entityhuman.blockPosition(), (double) j) && entityhuman.isInWaterOrRain()) {
+                    entityhuman.addEffect(new MobEffectInstance(MobEffects.CONDUIT_POWER, 260, 0, true, true), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.CONDUIT); // CraftBukkit
                 }
             }
 
         }
     }
 
-    private static void updateDestroyTarget(Level level, BlockPos blockpos, BlockState blockstate, List<BlockPos> list, ConduitBlockEntity conduitblockentity) {
-        LivingEntity livingentity = conduitblockentity.destroyTarget;
-        int i = list.size();
+    private static void updateDestroyTarget(Level level, BlockPos pos, IBlockData state, List<BlockPos> positions, ConduitBlockEntity blockEntity) {
+        LivingEntity entityliving = blockEntity.destroyTarget;
+        int i = positions.size();
 
         if (i < 42) {
-            conduitblockentity.destroyTarget = null;
-        } else if (conduitblockentity.destroyTarget == null && conduitblockentity.destroyTargetUUID != null) {
-            conduitblockentity.destroyTarget = findDestroyTarget(level, blockpos, conduitblockentity.destroyTargetUUID);
-            conduitblockentity.destroyTargetUUID = null;
-        } else if (conduitblockentity.destroyTarget == null) {
-            List<LivingEntity> list1 = level.getEntitiesOfClass(LivingEntity.class, getDestroyRangeAABB(blockpos), (livingentity1) -> {
-                return livingentity1 instanceof Enemy && livingentity1.isInWaterOrRain();
+            blockEntity.destroyTarget = null;
+        } else if (blockEntity.destroyTarget == null && blockEntity.destroyTargetUUID != null) {
+            blockEntity.destroyTarget = findDestroyTarget(level, pos, blockEntity.destroyTargetUUID);
+            blockEntity.destroyTargetUUID = null;
+        } else if (blockEntity.destroyTarget == null) {
+            List<LivingEntity> list1 = level.getEntitiesOfClass(LivingEntity.class, getDestroyRangeAABB(pos), (entityliving1) -> {
+                return entityliving1 instanceof IMonster && entityliving1.isInWaterOrRain();
             });
 
             if (!list1.isEmpty()) {
-                conduitblockentity.destroyTarget = (LivingEntity) list1.get(level.random.nextInt(list1.size()));
+                blockEntity.destroyTarget = (LivingEntity) list1.get(level.random.nextInt(list1.size()));
             }
-        } else if (!conduitblockentity.destroyTarget.isAlive() || !blockpos.closerThan(conduitblockentity.destroyTarget.blockPosition(), 8.0D)) {
-            conduitblockentity.destroyTarget = null;
+        } else if (!blockEntity.destroyTarget.isAlive() || !pos.closerThan(blockEntity.destroyTarget.blockPosition(), 8.0D)) {
+            blockEntity.destroyTarget = null;
         }
 
-        if (conduitblockentity.destroyTarget != null) {
-            level.playSound((Player) null, conduitblockentity.destroyTarget.getX(), conduitblockentity.destroyTarget.getY(), conduitblockentity.destroyTarget.getZ(), SoundEvents.CONDUIT_ATTACK_TARGET, SoundSource.BLOCKS, 1.0F, 1.0F);
-            conduitblockentity.destroyTarget.hurt(level.damageSources().magic(), 4.0F);
+        if (blockEntity.destroyTarget != null) {
+            // CraftBukkit start
+            CraftEventFactory.blockDamage = CraftBlock.at(level, pos);
+            if (blockEntity.destroyTarget.hurt(level.damageSources().magic(), 4.0F)) {
+                level.playSound((Player) null, blockEntity.destroyTarget.getX(), blockEntity.destroyTarget.getY(), blockEntity.destroyTarget.getZ(), SoundEvents.CONDUIT_ATTACK_TARGET, SoundSource.BLOCKS, 1.0F, 1.0F);
+            }
+            CraftEventFactory.blockDamage = null;
+            // CraftBukkit end
         }
 
-        if (livingentity != conduitblockentity.destroyTarget) {
-            level.sendBlockUpdated(blockpos, blockstate, blockstate, 2);
+        if (entityliving != blockEntity.destroyTarget) {
+            level.sendBlockUpdated(pos, state, state, 2);
         }
 
     }
 
-    private static void updateClientTarget(Level level, BlockPos blockpos, ConduitBlockEntity conduitblockentity) {
-        if (conduitblockentity.destroyTargetUUID == null) {
-            conduitblockentity.destroyTarget = null;
-        } else if (conduitblockentity.destroyTarget == null || !conduitblockentity.destroyTarget.getUUID().equals(conduitblockentity.destroyTargetUUID)) {
-            conduitblockentity.destroyTarget = findDestroyTarget(level, blockpos, conduitblockentity.destroyTargetUUID);
-            if (conduitblockentity.destroyTarget == null) {
-                conduitblockentity.destroyTargetUUID = null;
+    private static void updateClientTarget(Level level, BlockPos pos, ConduitBlockEntity blockEntity) {
+        if (blockEntity.destroyTargetUUID == null) {
+            blockEntity.destroyTarget = null;
+        } else if (blockEntity.destroyTarget == null || !blockEntity.destroyTarget.getUUID().equals(blockEntity.destroyTargetUUID)) {
+            blockEntity.destroyTarget = findDestroyTarget(level, pos, blockEntity.destroyTargetUUID);
+            if (blockEntity.destroyTarget == null) {
+                blockEntity.destroyTargetUUID = null;
             }
         }
 
     }
 
-    private static AABB getDestroyRangeAABB(BlockPos blockpos) {
-        int i = blockpos.getX();
-        int j = blockpos.getY();
-        int k = blockpos.getZ();
+    private static AABB getDestroyRangeAABB(BlockPos pos) {
+        int i = pos.getX();
+        int j = pos.getY();
+        int k = pos.getZ();
 
         return (new AABB((double) i, (double) j, (double) k, (double) (i + 1), (double) (j + 1), (double) (k + 1))).inflate(8.0D);
     }
 
     @Nullable
-    private static LivingEntity findDestroyTarget(Level level, BlockPos blockpos, UUID uuid) {
-        List<LivingEntity> list = level.getEntitiesOfClass(LivingEntity.class, getDestroyRangeAABB(blockpos), (livingentity) -> {
-            return livingentity.getUUID().equals(uuid);
+    private static LivingEntity findDestroyTarget(Level level, BlockPos pos, UUID targetId) {
+        List<LivingEntity> list = level.getEntitiesOfClass(LivingEntity.class, getDestroyRangeAABB(pos), (entityliving) -> {
+            return entityliving.getUUID().equals(targetId);
         });
 
         return list.size() == 1 ? (LivingEntity) list.get(0) : null;
     }
 
-    private static void animationTick(Level level, BlockPos blockpos, List<BlockPos> list, @Nullable Entity entity, int i) {
+    private static void animationTick(Level level, BlockPos pos, List<BlockPos> positions, @Nullable Entity entity, int tickCount) {
         RandomSource randomsource = level.random;
-        double d0 = (double) (Mth.sin((float) (i + 35) * 0.1F) / 2.0F + 0.5F);
+        double d0 = (double) (Mth.sin((float) (tickCount + 35) * 0.1F) / 2.0F + 0.5F);
 
         d0 = (d0 * d0 + d0) * 0.30000001192092896D;
-        Vec3 vec3 = new Vec3((double) blockpos.getX() + 0.5D, (double) blockpos.getY() + 1.5D + d0, (double) blockpos.getZ() + 0.5D);
-        Iterator iterator = list.iterator();
+        Vec3 vec3d = new Vec3((double) pos.getX() + 0.5D, (double) pos.getY() + 1.5D + d0, (double) pos.getZ() + 0.5D);
+        Iterator iterator = positions.iterator();
 
         float f;
 
         while (iterator.hasNext()) {
-            BlockPos blockpos1 = (BlockPos) iterator.next();
+            BlockPos blockposition1 = (BlockPos) iterator.next();
 
             if (randomsource.nextInt(50) == 0) {
-                BlockPos blockpos2 = blockpos1.subtract(blockpos);
+                BlockPos blockposition2 = blockposition1.subtract(pos);
 
-                f = -0.5F + randomsource.nextFloat() + (float) blockpos2.getX();
-                float f1 = -2.0F + randomsource.nextFloat() + (float) blockpos2.getY();
-                float f2 = -0.5F + randomsource.nextFloat() + (float) blockpos2.getZ();
+                f = -0.5F + randomsource.nextFloat() + (float) blockposition2.getX();
+                float f1 = -2.0F + randomsource.nextFloat() + (float) blockposition2.getY();
+                float f2 = -0.5F + randomsource.nextFloat() + (float) blockposition2.getZ();
 
-                level.addParticle(ParticleTypes.NAUTILUS, vec3.x, vec3.y, vec3.z, (double) f, (double) f1, (double) f2);
+                level.addParticle(ParticleTypes.NAUTILUS, vec3d.x, vec3d.y, vec3d.z, (double) f, (double) f1, (double) f2);
             }
         }
 
         if (entity != null) {
-            Vec3 vec31 = new Vec3(entity.getX(), entity.getEyeY(), entity.getZ());
+            Vec3 vec3d1 = new Vec3(entity.getX(), entity.getEyeY(), entity.getZ());
             float f3 = (-0.5F + randomsource.nextFloat()) * (3.0F + entity.getBbWidth());
             float f4 = -1.0F + randomsource.nextFloat() * entity.getBbHeight();
 
             f = (-0.5F + randomsource.nextFloat()) * (3.0F + entity.getBbWidth());
-            Vec3 vec32 = new Vec3((double) f3, (double) f4, (double) f);
+            Vec3 vec3d2 = new Vec3((double) f3, (double) f4, (double) f);
 
-            level.addParticle(ParticleTypes.NAUTILUS, vec31.x, vec31.y, vec31.z, vec32.x, vec32.y, vec32.z);
+            level.addParticle(ParticleTypes.NAUTILUS, vec3d1.x, vec3d1.y, vec3d1.z, vec3d2.x, vec3d2.y, vec3d2.z);
         }
 
     }
@@ -318,11 +323,11 @@
         return this.isHunting;
     }
 
-    private void setHunting(boolean flag) {
-        this.isHunting = flag;
+    private void setHunting(boolean isHunting) {
+        this.isHunting = isHunting;
     }
 
-    public float getActiveRotation(float f) {
-        return (this.activeRotation + f) * -0.0375F;
+    public float getActiveRotation(float partialTick) {
+        return (this.activeRotation + partialTick) * -0.0375F;
     }
 }
