--- a/net/minecraft/world/level/block/entity/BrushableBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BrushableBlockEntity.java
@@ -19,7 +19,7 @@
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.BrushableBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.storage.loot.LootParams;
 import net.minecraft.world.level.storage.loot.LootTable;
@@ -28,6 +28,12 @@
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import java.util.Arrays;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
+
 public class BrushableBlockEntity extends BlockEntity {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -41,41 +47,41 @@
     private int brushCount;
     private long brushCountResetsAtTick;
     private long coolDownEndsAtTick;
-    private ItemStack item;
+    public ItemStack item;
     @Nullable
     private Direction hitDirection;
     @Nullable
-    private ResourceLocation lootTable;
-    private long lootTableSeed;
+    public ResourceLocation lootTable;
+    public long lootTableSeed;
 
-    public BrushableBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.BRUSHABLE_BLOCK, blockpos, blockstate);
+    public BrushableBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.BRUSHABLE_BLOCK, pos, blockState);
         this.item = ItemStack.EMPTY;
     }
 
-    public boolean brush(long i, Player player, Direction direction) {
+    public boolean brush(long startTick, Player entityhuman, Direction player) {
         if (this.hitDirection == null) {
-            this.hitDirection = direction;
+            this.hitDirection = player;
         }
 
-        this.brushCountResetsAtTick = i + 40L;
-        if (i >= this.coolDownEndsAtTick && this.level instanceof ServerLevel) {
-            this.coolDownEndsAtTick = i + 10L;
-            this.unpackLootTable(player);
+        this.brushCountResetsAtTick = startTick + 40L;
+        if (startTick >= this.coolDownEndsAtTick && this.level instanceof ServerLevel) {
+            this.coolDownEndsAtTick = startTick + 10L;
+            this.unpackLootTable(entityhuman);
             int j = this.getCompletionState();
 
             if (++this.brushCount >= 10) {
-                this.brushingCompleted(player);
+                this.brushingCompleted(entityhuman);
                 return true;
             } else {
                 this.level.scheduleTick(this.getBlockPos(), this.getBlockState().getBlock(), 2);
                 int k = this.getCompletionState();
 
                 if (j != k) {
-                    BlockState blockstate = this.getBlockState();
-                    BlockState blockstate1 = (BlockState) blockstate.setValue(BlockStateProperties.DUSTED, k);
+                    IBlockData iblockdata = this.getBlockState();
+                    IBlockData iblockdata1 = (IBlockData) iblockdata.setValue(BlockStateProperties.DUSTED, k);
 
-                    this.level.setBlock(this.getBlockPos(), blockstate1, 3);
+                    this.level.setBlock(this.getBlockPos(), iblockdata1, 3);
                 }
 
                 return false;
@@ -90,9 +96,9 @@
             LootTable loottable = this.level.getServer().getLootData().getLootTable(this.lootTable);
 
             if (player instanceof ServerPlayer) {
-                ServerPlayer serverplayer = (ServerPlayer) player;
+                ServerPlayer entityplayer = (ServerPlayer) player;
 
-                CriteriaTriggers.GENERATE_LOOT.trigger(serverplayer, this.lootTable);
+                CriteriaTriggers.GENERATE_LOOT.trigger(entityplayer, this.lootTable);
             }
 
             LootParams lootparams = (new LootParams.Builder((ServerLevel) this.level)).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(this.worldPosition)).withLuck(player.getLuck()).withParameter(LootContextParams.THIS_ENTITY, player).create(LootContextParamSets.CHEST);
@@ -120,9 +126,9 @@
     private void brushingCompleted(Player player) {
         if (this.level != null && this.level.getServer() != null) {
             this.dropContent(player);
-            BlockState blockstate = this.getBlockState();
+            IBlockData iblockdata = this.getBlockState();
 
-            this.level.levelEvent(3008, this.getBlockPos(), Block.getId(blockstate));
+            this.level.levelEvent(3008, this.getBlockPos(), Block.getId(iblockdata));
             Block block = this.getBlockState().getBlock();
             Block block1;
 
@@ -145,15 +151,18 @@
                 double d0 = (double) EntityType.ITEM.getWidth();
                 double d1 = 1.0D - d0;
                 double d2 = d0 / 2.0D;
-                Direction direction = (Direction) Objects.requireNonNullElse(this.hitDirection, Direction.UP);
-                BlockPos blockpos = this.worldPosition.relative(direction, 1);
-                double d3 = (double) blockpos.getX() + 0.5D * d1 + d2;
-                double d4 = (double) blockpos.getY() + 0.5D + (double) (EntityType.ITEM.getHeight() / 2.0F);
-                double d5 = (double) blockpos.getZ() + 0.5D * d1 + d2;
-                ItemEntity itementity = new ItemEntity(this.level, d3, d4, d5, this.item.split(this.level.random.nextInt(21) + 10));
+                Direction enumdirection = (Direction) Objects.requireNonNullElse(this.hitDirection, Direction.UP);
+                BlockPos blockposition = this.worldPosition.relative(enumdirection, 1);
+                double d3 = (double) blockposition.getX() + 0.5D * d1 + d2;
+                double d4 = (double) blockposition.getY() + 0.5D + (double) (EntityType.ITEM.getHeight() / 2.0F);
+                double d5 = (double) blockposition.getZ() + 0.5D * d1 + d2;
+                ItemEntity entityitem = new ItemEntity(this.level, d3, d4, d5, this.item.split(this.level.random.nextInt(21) + 10));
 
-                itementity.setDeltaMovement(Vec3.ZERO);
-                this.level.addFreshEntity(itementity);
+                entityitem.setDeltaMovement(Vec3.ZERO);
+                // CraftBukkit start
+                org.bukkit.block.Block bblock = CraftBlock.at(this.level, this.worldPosition);
+                CraftEventFactory.handleBlockDropItemEvent(bblock, bblock.getState(), (ServerPlayer) player, Arrays.asList(entityitem));
+                // CraftBukkit end
                 this.item = ItemStack.EMPTY;
             }
 
@@ -169,7 +178,7 @@
                 int j = this.getCompletionState();
 
                 if (i != j) {
-                    this.level.setBlock(this.getBlockPos(), (BlockState) this.getBlockState().setValue(BlockStateProperties.DUSTED, j), 3);
+                    this.level.setBlock(this.getBlockPos(), (IBlockData) this.getBlockState().setValue(BlockStateProperties.DUSTED, j), 3);
                 }
 
                 boolean flag = true;
@@ -188,23 +197,23 @@
         }
     }
 
-    private boolean tryLoadLootTable(CompoundTag compoundtag) {
-        if (compoundtag.contains("LootTable", 8)) {
-            this.lootTable = new ResourceLocation(compoundtag.getString("LootTable"));
-            this.lootTableSeed = compoundtag.getLong("LootTableSeed");
+    private boolean tryLoadLootTable(CompoundTag tag) {
+        if (tag.contains("LootTable", 8)) {
+            this.lootTable = new ResourceLocation(tag.getString("LootTable"));
+            this.lootTableSeed = tag.getLong("LootTableSeed");
             return true;
         } else {
             return false;
         }
     }
 
-    private boolean trySaveLootTable(CompoundTag compoundtag) {
+    private boolean trySaveLootTable(CompoundTag tag) {
         if (this.lootTable == null) {
             return false;
         } else {
-            compoundtag.putString("LootTable", this.lootTable.toString());
+            tag.putString("LootTable", this.lootTable.toString());
             if (this.lootTableSeed != 0L) {
-                compoundtag.putLong("LootTableSeed", this.lootTableSeed);
+                tag.putLong("LootTableSeed", this.lootTableSeed);
             }
 
             return true;
@@ -212,49 +221,46 @@
     }
 
     @Override
-    @Override
     public CompoundTag getUpdateTag() {
-        CompoundTag compoundtag = super.getUpdateTag();
+        CompoundTag nbttagcompound = super.getUpdateTag();
 
         if (this.hitDirection != null) {
-            compoundtag.putInt("hit_direction", this.hitDirection.ordinal());
+            nbttagcompound.putInt("hit_direction", this.hitDirection.ordinal());
         }
 
-        compoundtag.put("item", this.item.save(new CompoundTag()));
-        return compoundtag;
+        nbttagcompound.put("item", this.item.save(new CompoundTag()));
+        return nbttagcompound;
     }
 
     @Override
-    @Override
     public ClientboundBlockEntityDataPacket getUpdatePacket() {
         return ClientboundBlockEntityDataPacket.create(this);
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        if (!this.tryLoadLootTable(compoundtag) && compoundtag.contains("item")) {
-            this.item = ItemStack.of(compoundtag.getCompound("item"));
+    public void load(CompoundTag tag) {
+        super.load(tag); // CraftBukkit - SPIGOT-7393: Load super Bukkit data
+        if (!this.tryLoadLootTable(tag) && tag.contains("item")) {
+            this.item = ItemStack.of(tag.getCompound("item"));
         }
 
-        if (compoundtag.contains("hit_direction")) {
-            this.hitDirection = Direction.values()[compoundtag.getInt("hit_direction")];
+        if (tag.contains("hit_direction")) {
+            this.hitDirection = Direction.values()[tag.getInt("hit_direction")];
         }
 
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        if (!this.trySaveLootTable(compoundtag)) {
-            compoundtag.put("item", this.item.save(new CompoundTag()));
+    protected void saveAdditional(CompoundTag tag) {
+        if (!this.trySaveLootTable(tag)) {
+            tag.put("item", this.item.save(new CompoundTag()));
         }
 
     }
 
-    public void setLootTable(ResourceLocation resourcelocation, long i) {
-        this.lootTable = resourcelocation;
-        this.lootTableSeed = i;
+    public void setLootTable(ResourceLocation lootTable, long lootTableSeed) {
+        this.lootTable = lootTable;
+        this.lootTableSeed = lootTableSeed;
     }
 
     private int getCompletionState() {
