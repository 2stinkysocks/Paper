--- a/net/minecraft/world/level/block/entity/CrafterBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/CrafterBlockEntity.java
@@ -15,14 +15,20 @@
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.ContainerData;
 import net.minecraft.world.inventory.CrafterMenu;
-import net.minecraft.world.inventory.CraftingContainer;
+import net.minecraft.world.inventory.InventoryCrafting;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.CrafterBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
-public class CrafterBlockEntity extends RandomizableContainerBlockEntity implements CraftingContainer {
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
 
+public class CrafterBlockEntity extends RandomizableContainerBlockEntity implements InventoryCrafting {
+
     public static final int CONTAINER_WIDTH = 3;
     public static final int CONTAINER_HEIGHT = 3;
     public static final int CONTAINER_SIZE = 9;
@@ -31,11 +37,51 @@
     public static final int DATA_TRIGGERED = 9;
     public static final int NUM_DATA = 10;
     private NonNullList<ItemStack> items;
-    private int craftingTicksRemaining;
+    public int craftingTicksRemaining;
     protected final ContainerData containerData;
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
+    private int maxStack = 1;
 
-    public CrafterBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.CRAFTER, blockpos, blockstate);
+    @Override
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    @Override
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    @Override
+    public Location getLocation() {
+        if (level == null) return null;
+        return new org.bukkit.Location(level.getWorld(), worldPosition.getX(), worldPosition.getY(), worldPosition.getZ());
+    }
+    // CraftBukkit end
+
+    public CrafterBlockEntity(BlockPos blockposition, IBlockData iblockdata) {
+        super(BlockEntityType.CRAFTER, blockposition, iblockdata);
         this.items = NonNullList.withSize(9, ItemStack.EMPTY);
         this.craftingTicksRemaining = 0;
         this.containerData = new ContainerData() {
@@ -43,24 +89,21 @@
             private int triggered = 0;
 
             @Override
-            @Override
-            public int get(int i) {
-                return i == 9 ? this.triggered : this.slotStates[i];
+            public int get(int index) {
+                return index == 9 ? this.triggered : this.slotStates[index];
             }
 
             @Override
-            @Override
-            public void set(int i, int j) {
-                if (i == 9) {
-                    this.triggered = j;
+            public void set(int index, int value) {
+                if (index == 9) {
+                    this.triggered = value;
                 } else {
-                    this.slotStates[i] = j;
+                    this.slotStates[index] = value;
                 }
 
             }
 
             @Override
-            @Override
             public int getCount() {
                 return 10;
             }
@@ -68,15 +111,13 @@
     }
 
     @Override
-    @Override
     protected Component getDefaultName() {
         return Component.translatable("container.crafter");
     }
 
     @Override
-    @Override
-    protected AbstractContainerMenu createMenu(int i, Inventory inventory) {
-        return new CrafterMenu(i, inventory, this, this.containerData);
+    protected AbstractContainerMenu createMenu(int containerId, Inventory inventory) {
+        return new CrafterMenu(containerId, inventory, this, this.containerData);
     }
 
     public void setSlotState(int i, boolean flag) {
@@ -91,15 +132,14 @@
     }
 
     @Override
-    @Override
-    public boolean canPlaceItem(int i, ItemStack itemstack) {
-        if (this.containerData.get(i) == 1) {
+    public boolean canPlaceItem(int index, ItemStack stack) {
+        if (this.containerData.get(index) == 1) {
             return false;
         } else {
-            ItemStack itemstack1 = (ItemStack) this.items.get(i);
+            ItemStack itemstack1 = (ItemStack) this.items.get(index);
             int j = itemstack1.getCount();
 
-            return j >= itemstack1.getMaxStackSize() ? false : (itemstack1.isEmpty() ? true : !this.smallerStackExist(j, itemstack1, i));
+            return j >= itemstack1.getMaxStackSize() ? false : (itemstack1.isEmpty() ? true : !this.smallerStackExist(j, itemstack1, index));
         }
     }
 
@@ -118,16 +158,15 @@
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
-        this.craftingTicksRemaining = compoundtag.getInt("crafting_ticks_remaining");
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        this.craftingTicksRemaining = tag.getInt("crafting_ticks_remaining");
         this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
-        if (!this.tryLoadLootTable(compoundtag)) {
-            ContainerHelper.loadAllItems(compoundtag, this.items);
+        if (!this.tryLoadLootTable(tag)) {
+            ContainerHelper.loadAllItems(tag, this.items);
         }
 
-        int[] aint = compoundtag.getIntArray("disabled_slots");
+        int[] aint = tag.getIntArray("disabled_slots");
 
         for (int i = 0; i < 9; ++i) {
             this.containerData.set(i, 0);
@@ -144,30 +183,27 @@
             }
         }
 
-        this.containerData.set(9, compoundtag.getInt("triggered"));
+        this.containerData.set(9, tag.getInt("triggered"));
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        compoundtag.putInt("crafting_ticks_remaining", this.craftingTicksRemaining);
-        if (!this.trySaveLootTable(compoundtag)) {
-            ContainerHelper.saveAllItems(compoundtag, this.items);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        tag.putInt("crafting_ticks_remaining", this.craftingTicksRemaining);
+        if (!this.trySaveLootTable(tag)) {
+            ContainerHelper.saveAllItems(tag, this.items);
         }
 
-        this.addDisabledSlots(compoundtag);
-        this.addTriggered(compoundtag);
+        this.addDisabledSlots(tag);
+        this.addTriggered(tag);
     }
 
     @Override
-    @Override
     public int getContainerSize() {
         return 9;
     }
 
     @Override
-    @Override
     public boolean isEmpty() {
         Iterator iterator = this.items.iterator();
 
@@ -185,65 +221,57 @@
     }
 
     @Override
-    @Override
-    public ItemStack getItem(int i) {
-        return (ItemStack) this.items.get(i);
+    public ItemStack getItem(int slot) {
+        return (ItemStack) this.items.get(slot);
     }
 
     @Override
-    @Override
-    public void setItem(int i, ItemStack itemstack) {
-        if (this.isSlotDisabled(i)) {
-            this.setSlotState(i, true);
+    public void setItem(int slot, ItemStack stack) {
+        if (this.isSlotDisabled(slot)) {
+            this.setSlotState(slot, true);
         }
 
-        super.setItem(i, itemstack);
+        super.setItem(slot, stack);
     }
 
     @Override
-    @Override
     public boolean stillValid(Player player) {
         return this.level != null && this.level.getBlockEntity(this.worldPosition) == this ? player.distanceToSqr((double) this.worldPosition.getX() + 0.5D, (double) this.worldPosition.getY() + 0.5D, (double) this.worldPosition.getZ() + 0.5D) <= 64.0D : false;
     }
 
     @Override
-    @Override
     public NonNullList<ItemStack> getItems() {
         return this.items;
     }
 
     @Override
-    @Override
-    protected void setItems(NonNullList<ItemStack> nonnulllist) {
-        this.items = nonnulllist;
+    protected void setItems(NonNullList<ItemStack> itemStacks) {
+        this.items = itemStacks;
     }
 
     @Override
-    @Override
     public int getWidth() {
         return 3;
     }
 
     @Override
-    @Override
     public int getHeight() {
         return 3;
     }
 
     @Override
-    @Override
-    public void fillStackedContents(StackedContents stackedcontents) {
+    public void fillStackedContents(StackedContents contents) {
         Iterator iterator = this.items.iterator();
 
         while (iterator.hasNext()) {
             ItemStack itemstack = (ItemStack) iterator.next();
 
-            stackedcontents.accountSimpleStack(itemstack);
+            contents.accountSimpleStack(itemstack);
         }
 
     }
 
-    private void addDisabledSlots(CompoundTag compoundtag) {
+    private void addDisabledSlots(CompoundTag nbttagcompound) {
         IntArrayList intarraylist = new IntArrayList();
 
         for (int i = 0; i < 9; ++i) {
@@ -252,11 +280,11 @@
             }
         }
 
-        compoundtag.putIntArray("disabled_slots", (List) intarraylist);
+        nbttagcompound.putIntArray("disabled_slots", (List) intarraylist);
     }
 
-    private void addTriggered(CompoundTag compoundtag) {
-        compoundtag.putInt("triggered", this.containerData.get(9));
+    private void addTriggered(CompoundTag nbttagcompound) {
+        nbttagcompound.putInt("triggered", this.containerData.get(9));
     }
 
     public void setTriggered(boolean flag) {
@@ -268,13 +296,13 @@
         return this.containerData.get(9) == 1;
     }
 
-    public static void serverTick(Level level, BlockPos blockpos, BlockState blockstate, CrafterBlockEntity crafterblockentity) {
+    public static void serverTick(Level world, BlockPos blockposition, IBlockData iblockdata, CrafterBlockEntity crafterblockentity) {
         int i = crafterblockentity.craftingTicksRemaining - 1;
 
         if (i >= 0) {
             crafterblockentity.craftingTicksRemaining = i;
             if (i == 0) {
-                level.setBlock(blockpos, (BlockState) blockstate.setValue(CrafterBlock.CRAFTING, false), 3);
+                world.setBlock(blockposition, (IBlockData) iblockdata.setValue(CrafterBlock.CRAFTING, false), 3);
             }
 
         }
