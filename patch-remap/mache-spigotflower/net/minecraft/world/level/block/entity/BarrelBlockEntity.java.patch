--- a/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
@@ -18,42 +18,79 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.BarrelBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
+// CraftBukkit start
+import java.util.ArrayList;
+import java.util.List;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class BarrelBlockEntity extends RandomizableContainerBlockEntity {
 
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new ArrayList<>();
+    private int maxStack = MAX_STACK;
+
+    @Override
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+       return maxStack;
+    }
+
+    @Override
+    public void setMaxStackSize(int i) {
+        maxStack = i;
+    }
+    // CraftBukkit end
     private NonNullList<ItemStack> items;
-    private final ContainerOpenersCounter openersCounter;
+    public final ContainerOpenersCounter openersCounter;
 
-    public BarrelBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.BARREL, blockpos, blockstate);
+    public BarrelBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.BARREL, pos, blockState);
         this.items = NonNullList.withSize(27, ItemStack.EMPTY);
         this.openersCounter = new ContainerOpenersCounter() {
             @Override
-            @Override
-            protected void onOpen(Level level, BlockPos blockpos1, BlockState blockstate1) {
-                BarrelBlockEntity.this.playSound(blockstate1, SoundEvents.BARREL_OPEN);
-                BarrelBlockEntity.this.updateBlockState(blockstate1, true);
+            protected void onOpen(Level level, BlockPos pos, IBlockData state) {
+                BarrelBlockEntity.this.playSound(state, SoundEvents.BARREL_OPEN);
+                BarrelBlockEntity.this.updateBlockState(state, true);
             }
 
             @Override
-            @Override
-            protected void onClose(Level level, BlockPos blockpos1, BlockState blockstate1) {
-                BarrelBlockEntity.this.playSound(blockstate1, SoundEvents.BARREL_CLOSE);
-                BarrelBlockEntity.this.updateBlockState(blockstate1, false);
+            protected void onClose(Level level, BlockPos pos, IBlockData state) {
+                BarrelBlockEntity.this.playSound(state, SoundEvents.BARREL_CLOSE);
+                BarrelBlockEntity.this.updateBlockState(state, false);
             }
 
             @Override
-            @Override
-            protected void openerCountChanged(Level level, BlockPos blockpos1, BlockState blockstate1, int i, int j) {}
+            protected void openerCountChanged(Level level, BlockPos pos, IBlockData state, int count, int openCount) {}
 
             @Override
-            @Override
             protected boolean isOwnContainer(Player player) {
                 if (player.containerMenu instanceof ChestMenu) {
-                    Container container = ((ChestMenu) player.containerMenu).getContainer();
+                    Container iinventory = ((ChestMenu) player.containerMenu).getContainer();
 
-                    return container == BarrelBlockEntity.this;
+                    return iinventory == BarrelBlockEntity.this;
                 } else {
                     return false;
                 }
@@ -62,58 +99,50 @@
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        if (!this.trySaveLootTable(compoundtag)) {
-            ContainerHelper.saveAllItems(compoundtag, this.items);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        if (!this.trySaveLootTable(tag)) {
+            ContainerHelper.saveAllItems(tag, this.items);
         }
 
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
+    public void load(CompoundTag tag) {
+        super.load(tag);
         this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
-        if (!this.tryLoadLootTable(compoundtag)) {
-            ContainerHelper.loadAllItems(compoundtag, this.items);
+        if (!this.tryLoadLootTable(tag)) {
+            ContainerHelper.loadAllItems(tag, this.items);
         }
 
     }
 
     @Override
-    @Override
     public int getContainerSize() {
         return 27;
     }
 
     @Override
-    @Override
     protected NonNullList<ItemStack> getItems() {
         return this.items;
     }
 
     @Override
-    @Override
-    protected void setItems(NonNullList<ItemStack> nonnulllist) {
-        this.items = nonnulllist;
+    protected void setItems(NonNullList<ItemStack> items) {
+        this.items = items;
     }
 
     @Override
-    @Override
     protected Component getDefaultName() {
         return Component.translatable("container.barrel");
     }
 
     @Override
-    @Override
-    protected AbstractContainerMenu createMenu(int i, Inventory inventory) {
-        return ChestMenu.threeRows(i, inventory, this);
+    protected AbstractContainerMenu createMenu(int id, Inventory player) {
+        return ChestMenu.threeRows(id, player, this);
     }
 
     @Override
-    @Override
     public void startOpen(Player player) {
         if (!this.remove && !player.isSpectator()) {
             this.openersCounter.incrementOpeners(player, this.getLevel(), this.getBlockPos(), this.getBlockState());
@@ -122,7 +151,6 @@
     }
 
     @Override
-    @Override
     public void stopOpen(Player player) {
         if (!this.remove && !player.isSpectator()) {
             this.openersCounter.decrementOpeners(player, this.getLevel(), this.getBlockPos(), this.getBlockState());
@@ -137,16 +165,16 @@
 
     }
 
-    void updateBlockState(BlockState blockstate, boolean flag) {
-        this.level.setBlock(this.getBlockPos(), (BlockState) blockstate.setValue(BarrelBlock.OPEN, flag), 3);
+    public void updateBlockState(IBlockData state, boolean open) {
+        this.level.setBlock(this.getBlockPos(), (IBlockData) state.setValue(BarrelBlock.OPEN, open), 3);
     }
 
-    void playSound(BlockState blockstate, SoundEvent soundevent) {
-        Vec3i vec3i = ((Direction) blockstate.getValue(BarrelBlock.FACING)).getNormal();
-        double d0 = (double) this.worldPosition.getX() + 0.5D + (double) vec3i.getX() / 2.0D;
-        double d1 = (double) this.worldPosition.getY() + 0.5D + (double) vec3i.getY() / 2.0D;
-        double d2 = (double) this.worldPosition.getZ() + 0.5D + (double) vec3i.getZ() / 2.0D;
+    public void playSound(IBlockData state, SoundEvent sound) {
+        Vec3i baseblockposition = ((Direction) state.getValue(BarrelBlock.FACING)).getNormal();
+        double d0 = (double) this.worldPosition.getX() + 0.5D + (double) baseblockposition.getX() / 2.0D;
+        double d1 = (double) this.worldPosition.getY() + 0.5D + (double) baseblockposition.getY() / 2.0D;
+        double d2 = (double) this.worldPosition.getZ() + 0.5D + (double) baseblockposition.getZ() / 2.0D;
 
-        this.level.playSound((Player) null, d0, d1, d2, soundevent, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+        this.level.playSound((Player) null, d0, d1, d2, sound, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
     }
 }
