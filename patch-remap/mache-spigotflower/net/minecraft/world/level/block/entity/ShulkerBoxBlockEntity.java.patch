--- a/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
@@ -15,7 +15,7 @@
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.WorldlyContainer;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.MoverType;
+import net.minecraft.world.entity.EnumMoveType;
 import net.minecraft.world.entity.monster.Shulker;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
@@ -26,11 +26,15 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.ShulkerBoxBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
-import net.minecraft.world.level.material.PushReaction;
+import net.minecraft.world.level.material.EnumPistonReaction;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
 
 public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity implements WorldlyContainer {
 
@@ -44,32 +48,63 @@
     public static final String ITEMS_TAG = "Items";
     private static final int[] SLOTS = IntStream.range(0, 27).toArray();
     private NonNullList<ItemStack> itemStacks;
-    private int openCount;
-    private ShulkerBoxBlockEntity.AnimationStatus animationStatus;
+    public int openCount;
+    private ShulkerBoxBlockEntity.AnimationPhase animationStatus;
     private float progress;
     private float progressOld;
     @Nullable
     private final DyeColor color;
 
-    public ShulkerBoxBlockEntity(@Nullable DyeColor dyecolor, BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.SHULKER_BOX, blockpos, blockstate);
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+    public boolean opened;
+
+    public List<ItemStack> getContents() {
+        return this.itemStacks;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+    public ShulkerBoxBlockEntity(@Nullable DyeColor color, BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.SHULKER_BOX, pos, blockState);
         this.itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
-        this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.CLOSED;
-        this.color = dyecolor;
+        this.animationStatus = ShulkerBoxBlockEntity.AnimationPhase.CLOSED;
+        this.color = color;
     }
 
-    public ShulkerBoxBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.SHULKER_BOX, blockpos, blockstate);
+    public ShulkerBoxBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.SHULKER_BOX, pos, blockState);
         this.itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
-        this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.CLOSED;
-        this.color = ShulkerBoxBlock.getColorFromBlock(blockstate.getBlock());
+        this.animationStatus = ShulkerBoxBlockEntity.AnimationPhase.CLOSED;
+        this.color = ShulkerBoxBlock.getColorFromBlock(blockState.getBlock());
     }
 
-    public static void tick(Level level, BlockPos blockpos, BlockState blockstate, ShulkerBoxBlockEntity shulkerboxblockentity) {
-        shulkerboxblockentity.updateAnimation(level, blockpos, blockstate);
+    public static void tick(Level level, BlockPos pos, IBlockData state, ShulkerBoxBlockEntity blockEntity) {
+        blockEntity.updateAnimation(level, pos, state);
     }
 
-    private void updateAnimation(Level level, BlockPos blockpos, BlockState blockstate) {
+    private void updateAnimation(Level level, BlockPos pos, IBlockData state) {
         this.progressOld = this.progress;
         switch (this.animationStatus) {
             case CLOSED:
@@ -78,27 +113,27 @@
             case OPENING:
                 this.progress += 0.1F;
                 if (this.progressOld == 0.0F) {
-                    doNeighborUpdates(level, blockpos, blockstate);
+                    doNeighborUpdates(level, pos, state);
                 }
 
                 if (this.progress >= 1.0F) {
-                    this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.OPENED;
+                    this.animationStatus = ShulkerBoxBlockEntity.AnimationPhase.OPENED;
                     this.progress = 1.0F;
-                    doNeighborUpdates(level, blockpos, blockstate);
+                    doNeighborUpdates(level, pos, state);
                 }
 
-                this.moveCollidedEntities(level, blockpos, blockstate);
+                this.moveCollidedEntities(level, pos, state);
                 break;
             case CLOSING:
                 this.progress -= 0.1F;
                 if (this.progressOld == 1.0F) {
-                    doNeighborUpdates(level, blockpos, blockstate);
+                    doNeighborUpdates(level, pos, state);
                 }
 
                 if (this.progress <= 0.0F) {
-                    this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.CLOSED;
+                    this.animationStatus = ShulkerBoxBlockEntity.AnimationPhase.CLOSED;
                     this.progress = 0.0F;
-                    doNeighborUpdates(level, blockpos, blockstate);
+                    doNeighborUpdates(level, pos, state);
                 }
                 break;
             case OPENED:
@@ -107,19 +142,19 @@
 
     }
 
-    public ShulkerBoxBlockEntity.AnimationStatus getAnimationStatus() {
+    public ShulkerBoxBlockEntity.AnimationPhase getAnimationStatus() {
         return this.animationStatus;
     }
 
-    public AABB getBoundingBox(BlockState blockstate) {
-        return Shulker.getProgressAabb((Direction) blockstate.getValue(ShulkerBoxBlock.FACING), 0.5F * this.getProgress(1.0F));
+    public AABB getBoundingBox(IBlockData state) {
+        return Shulker.getProgressAabb((Direction) state.getValue(ShulkerBoxBlock.FACING), 0.5F * this.getProgress(1.0F));
     }
 
-    private void moveCollidedEntities(Level level, BlockPos blockpos, BlockState blockstate) {
-        if (blockstate.getBlock() instanceof ShulkerBoxBlock) {
-            Direction direction = (Direction) blockstate.getValue(ShulkerBoxBlock.FACING);
-            AABB aabb = Shulker.getProgressDeltaAabb(direction, this.progressOld, this.progress).move(blockpos);
-            List<Entity> list = level.getEntities((Entity) null, aabb);
+    private void moveCollidedEntities(Level level, BlockPos pos, IBlockData state) {
+        if (state.getBlock() instanceof ShulkerBoxBlock) {
+            Direction enumdirection = (Direction) state.getValue(ShulkerBoxBlock.FACING);
+            AABB axisalignedbb = Shulker.getProgressDeltaAabb(enumdirection, this.progressOld, this.progress).move(pos);
+            List<Entity> list = level.getEntities((Entity) null, axisalignedbb);
 
             if (!list.isEmpty()) {
                 Iterator iterator = list.iterator();
@@ -127,8 +162,8 @@
                 while (iterator.hasNext()) {
                     Entity entity = (Entity) iterator.next();
 
-                    if (entity.getPistonPushReaction() != PushReaction.IGNORE) {
-                        entity.move(MoverType.SHULKER_BOX, new Vec3((aabb.getXsize() + 0.01D) * (double) direction.getStepX(), (aabb.getYsize() + 0.01D) * (double) direction.getStepY(), (aabb.getZsize() + 0.01D) * (double) direction.getStepZ()));
+                    if (entity.getPistonPushReaction() != EnumPistonReaction.IGNORE) {
+                        entity.move(EnumMoveType.SHULKER_BOX, new Vec3((axisalignedbb.getXsize() + 0.01D) * (double) enumdirection.getStepX(), (axisalignedbb.getYsize() + 0.01D) * (double) enumdirection.getStepY(), (axisalignedbb.getZsize() + 0.01D) * (double) enumdirection.getStepZ()));
                     }
                 }
 
@@ -137,37 +172,34 @@
     }
 
     @Override
-    @Override
     public int getContainerSize() {
         return this.itemStacks.size();
     }
 
     @Override
-    @Override
-    public boolean triggerEvent(int i, int j) {
-        if (i == 1) {
-            this.openCount = j;
-            if (j == 0) {
-                this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.CLOSING;
+    public boolean triggerEvent(int id, int type) {
+        if (id == 1) {
+            this.openCount = type;
+            if (type == 0) {
+                this.animationStatus = ShulkerBoxBlockEntity.AnimationPhase.CLOSING;
             }
 
-            if (j == 1) {
-                this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.OPENING;
+            if (type == 1) {
+                this.animationStatus = ShulkerBoxBlockEntity.AnimationPhase.OPENING;
             }
 
             return true;
         } else {
-            return super.triggerEvent(i, j);
+            return super.triggerEvent(id, type);
         }
     }
 
-    private static void doNeighborUpdates(Level level, BlockPos blockpos, BlockState blockstate) {
-        blockstate.updateNeighbourShapes(level, blockpos, 3);
-        level.updateNeighborsAt(blockpos, blockstate.getBlock());
+    private static void doNeighborUpdates(Level level, BlockPos pos, IBlockData state) {
+        state.updateNeighbourShapes(level, pos, 3);
+        level.updateNeighborsAt(pos, state.getBlock());
     }
 
     @Override
-    @Override
     public void startOpen(Player player) {
         if (!this.remove && !player.isSpectator()) {
             if (this.openCount < 0) {
@@ -175,6 +207,7 @@
             }
 
             ++this.openCount;
+            if (opened) return; // CraftBukkit - only animate if the ShulkerBox hasn't been forced open already by an API call.
             this.level.blockEvent(this.worldPosition, this.getBlockState().getBlock(), 1, this.openCount);
             if (this.openCount == 1) {
                 this.level.gameEvent((Entity) player, GameEvent.CONTAINER_OPEN, this.worldPosition);
@@ -185,10 +218,10 @@
     }
 
     @Override
-    @Override
     public void stopOpen(Player player) {
         if (!this.remove && !player.isSpectator()) {
             --this.openCount;
+            if (opened) return; // CraftBukkit - only animate if the ShulkerBox hasn't been forced open already by an API call.
             this.level.blockEvent(this.worldPosition, this.getBlockState().getBlock(), 1, this.openCount);
             if (this.openCount <= 0) {
                 this.level.gameEvent((Entity) player, GameEvent.CONTAINER_CLOSE, this.worldPosition);
@@ -199,68 +232,60 @@
     }
 
     @Override
-    @Override
     protected Component getDefaultName() {
         return Component.translatable("container.shulkerBox");
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
-        this.loadFromTag(compoundtag);
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        this.loadFromTag(tag);
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        if (!this.trySaveLootTable(compoundtag)) {
-            ContainerHelper.saveAllItems(compoundtag, this.itemStacks, false);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        if (!this.trySaveLootTable(tag)) {
+            ContainerHelper.saveAllItems(tag, this.itemStacks, false);
         }
 
     }
 
-    public void loadFromTag(CompoundTag compoundtag) {
+    public void loadFromTag(CompoundTag tag) {
         this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
-        if (!this.tryLoadLootTable(compoundtag) && compoundtag.contains("Items", 9)) {
-            ContainerHelper.loadAllItems(compoundtag, this.itemStacks);
+        if (!this.tryLoadLootTable(tag) && tag.contains("Items", 9)) {
+            ContainerHelper.loadAllItems(tag, this.itemStacks);
         }
 
     }
 
     @Override
-    @Override
     protected NonNullList<ItemStack> getItems() {
         return this.itemStacks;
     }
 
     @Override
-    @Override
-    protected void setItems(NonNullList<ItemStack> nonnulllist) {
-        this.itemStacks = nonnulllist;
+    protected void setItems(NonNullList<ItemStack> items) {
+        this.itemStacks = items;
     }
 
     @Override
-    @Override
-    public int[] getSlotsForFace(Direction direction) {
+    public int[] getSlotsForFace(Direction side) {
         return ShulkerBoxBlockEntity.SLOTS;
     }
 
     @Override
-    @Override
-    public boolean canPlaceItemThroughFace(int i, ItemStack itemstack, @Nullable Direction direction) {
-        return !(Block.byItem(itemstack.getItem()) instanceof ShulkerBoxBlock);
+    public boolean canPlaceItemThroughFace(int index, ItemStack itemStack, @Nullable Direction direction) {
+        return !(Block.byItem(itemStack.getItem()) instanceof ShulkerBoxBlock);
     }
 
     @Override
-    @Override
-    public boolean canTakeItemThroughFace(int i, ItemStack itemstack, Direction direction) {
+    public boolean canTakeItemThroughFace(int index, ItemStack stack, Direction direction) {
         return true;
     }
 
-    public float getProgress(float f) {
-        return Mth.lerp(f, this.progressOld, this.progress);
+    public float getProgress(float partialTicks) {
+        return Mth.lerp(partialTicks, this.progressOld, this.progress);
     }
 
     @Nullable
@@ -269,19 +294,18 @@
     }
 
     @Override
-    @Override
-    protected AbstractContainerMenu createMenu(int i, Inventory inventory) {
-        return new ShulkerBoxMenu(i, inventory, this);
+    protected AbstractContainerMenu createMenu(int id, Inventory player) {
+        return new ShulkerBoxMenu(id, player, this);
     }
 
     public boolean isClosed() {
-        return this.animationStatus == ShulkerBoxBlockEntity.AnimationStatus.CLOSED;
+        return this.animationStatus == ShulkerBoxBlockEntity.AnimationPhase.CLOSED;
     }
 
-    public static enum AnimationStatus {
+    public static enum AnimationPhase {
 
         CLOSED, OPENING, OPENED, CLOSING;
 
-        private AnimationStatus() {}
+        private AnimationPhase() {}
     }
 }
