--- a/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java
@@ -13,56 +13,97 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.ChiseledBookShelfBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.gameevent.GameEvent;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class ChiseledBookShelfBlockEntity extends BlockEntity implements Container {
 
     public static final int MAX_BOOKS_IN_STORAGE = 6;
     private static final Logger LOGGER = LogUtils.getLogger();
     private final NonNullList<ItemStack> items;
-    private int lastInteractedSlot;
+    public int lastInteractedSlot;
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
+    private int maxStack = 1;
 
-    public ChiseledBookShelfBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.CHISELED_BOOKSHELF, blockpos, blockstate);
+    @Override
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    @Override
+    public Location getLocation() {
+        if (level == null) return null;
+        return new org.bukkit.Location(level.getWorld(), worldPosition.getX(), worldPosition.getY(), worldPosition.getZ());
+    }
+    // CraftBukkit end
+
+    public ChiseledBookShelfBlockEntity(BlockPos pos, IBlockData state) {
+        super(BlockEntityType.CHISELED_BOOKSHELF, pos, state);
         this.items = NonNullList.withSize(6, ItemStack.EMPTY);
         this.lastInteractedSlot = -1;
     }
 
-    private void updateState(int i) {
-        if (i >= 0 && i < 6) {
-            this.lastInteractedSlot = i;
-            BlockState blockstate = this.getBlockState();
+    private void updateState(int slot) {
+        if (slot >= 0 && slot < 6) {
+            this.lastInteractedSlot = slot;
+            IBlockData iblockdata = this.getBlockState();
 
             for (int j = 0; j < ChiseledBookShelfBlock.SLOT_OCCUPIED_PROPERTIES.size(); ++j) {
                 boolean flag = !this.getItem(j).isEmpty();
-                BooleanProperty booleanproperty = (BooleanProperty) ChiseledBookShelfBlock.SLOT_OCCUPIED_PROPERTIES.get(j);
+                BooleanProperty blockstateboolean = (BooleanProperty) ChiseledBookShelfBlock.SLOT_OCCUPIED_PROPERTIES.get(j);
 
-                blockstate = (BlockState) blockstate.setValue(booleanproperty, flag);
+                iblockdata = (IBlockData) iblockdata.setValue(blockstateboolean, flag);
             }
 
-            ((Level) Objects.requireNonNull(this.level)).setBlock(this.worldPosition, blockstate, 3);
-            this.level.gameEvent(GameEvent.BLOCK_CHANGE, this.worldPosition, GameEvent.Context.of(blockstate));
+            ((Level) Objects.requireNonNull(this.level)).setBlock(this.worldPosition, iblockdata, 3);
+            this.level.gameEvent(GameEvent.BLOCK_CHANGE, this.worldPosition, GameEvent.Context.of(iblockdata));
         } else {
-            ChiseledBookShelfBlockEntity.LOGGER.error("Expected slot 0-5, got {}", i);
+            ChiseledBookShelfBlockEntity.LOGGER.error("Expected slot 0-5, got {}", slot);
         }
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
+    public void load(CompoundTag tag) {
+        super.load(tag); // CraftBukkit - SPIGOT-7393: Load super Bukkit data
         this.items.clear();
-        ContainerHelper.loadAllItems(compoundtag, this.items);
-        this.lastInteractedSlot = compoundtag.getInt("last_interacted_slot");
+        ContainerHelper.loadAllItems(tag, this.items);
+        this.lastInteractedSlot = tag.getInt("last_interacted_slot");
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        ContainerHelper.saveAllItems(compoundtag, this.items, true);
-        compoundtag.putInt("last_interacted_slot", this.lastInteractedSlot);
+    protected void saveAdditional(CompoundTag tag) {
+        ContainerHelper.saveAllItems(tag, this.items, true);
+        tag.putInt("last_interacted_slot", this.lastInteractedSlot);
     }
 
     public int count() {
@@ -70,84 +111,73 @@
     }
 
     @Override
-    @Override
     public void clearContent() {
         this.items.clear();
     }
 
     @Override
-    @Override
     public int getContainerSize() {
         return 6;
     }
 
     @Override
-    @Override
     public boolean isEmpty() {
         return this.items.stream().allMatch(ItemStack::isEmpty);
     }
 
     @Override
-    @Override
-    public ItemStack getItem(int i) {
-        return (ItemStack) this.items.get(i);
+    public ItemStack getItem(int slot) {
+        return (ItemStack) this.items.get(slot);
     }
 
     @Override
-    @Override
-    public ItemStack removeItem(int i, int j) {
-        ItemStack itemstack = (ItemStack) Objects.requireNonNullElse((ItemStack) this.items.get(i), ItemStack.EMPTY);
+    public ItemStack removeItem(int slot, int amount) {
+        ItemStack itemstack = (ItemStack) Objects.requireNonNullElse((ItemStack) this.items.get(slot), ItemStack.EMPTY);
 
-        this.items.set(i, ItemStack.EMPTY);
+        this.items.set(slot, ItemStack.EMPTY);
         if (!itemstack.isEmpty()) {
-            this.updateState(i);
+            if (level != null) this.updateState(slot); // CraftBukkit - SPIGOT-7381: check for null world
         }
 
         return itemstack;
     }
 
     @Override
-    @Override
-    public ItemStack removeItemNoUpdate(int i) {
-        return this.removeItem(i, 1);
+    public ItemStack removeItemNoUpdate(int slot) {
+        return this.removeItem(slot, 1);
     }
 
     @Override
-    @Override
-    public void setItem(int i, ItemStack itemstack) {
-        if (itemstack.is(ItemTags.BOOKSHELF_BOOKS)) {
-            this.items.set(i, itemstack);
-            this.updateState(i);
-        } else if (itemstack.isEmpty()) {
-            this.removeItem(i, 1);
+    public void setItem(int slot, ItemStack stack) {
+        if (stack.is(ItemTags.BOOKSHELF_BOOKS)) {
+            this.items.set(slot, stack);
+            if (level != null) this.updateState(slot); // CraftBukkit - SPIGOT-7381: check for null world
+        } else if (stack.isEmpty()) {
+            this.removeItem(slot, 1);
         }
 
     }
 
     @Override
-    @Override
-    public boolean canTakeItem(Container container, int i, ItemStack itemstack) {
-        return container.hasAnyMatching((itemstack1) -> {
-            return itemstack1.isEmpty() ? true : ItemStack.isSameItemSameTags(itemstack, itemstack1) && itemstack1.getCount() + itemstack.getCount() <= Math.min(itemstack1.getMaxStackSize(), container.getMaxStackSize());
+    public boolean canTakeItem(Container target, int index, ItemStack stack) {
+        return target.hasAnyMatching((itemstack1) -> {
+            return itemstack1.isEmpty() ? true : ItemStack.isSameItemSameTags(stack, itemstack1) && itemstack1.getCount() + stack.getCount() <= Math.min(itemstack1.getMaxStackSize(), target.getMaxStackSize());
         });
     }
 
     @Override
-    @Override
     public int getMaxStackSize() {
-        return 1;
+        return maxStack; // CraftBukkit
     }
 
     @Override
-    @Override
     public boolean stillValid(Player player) {
         return Container.stillValidBlockEntity(this, player);
     }
 
     @Override
-    @Override
-    public boolean canPlaceItem(int i, ItemStack itemstack) {
-        return itemstack.is(ItemTags.BOOKSHELF_BOOKS) && this.getItem(i).isEmpty() && itemstack.getCount() == this.getMaxStackSize();
+    public boolean canPlaceItem(int index, ItemStack stack) {
+        return stack.is(ItemTags.BOOKSHELF_BOOKS) && this.getItem(index).isEmpty() && stack.getCount() == this.getMaxStackSize();
     }
 
     public int getLastInteractedSlot() {
