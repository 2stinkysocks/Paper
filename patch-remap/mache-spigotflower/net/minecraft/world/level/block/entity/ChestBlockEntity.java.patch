--- a/net/minecraft/world/level/block/entity/ChestBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ChestBlockEntity.java
@@ -20,126 +20,151 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.ChestBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.properties.ChestType;
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
 
 public class ChestBlockEntity extends RandomizableContainerBlockEntity implements LidBlockEntity {
 
     private static final int EVENT_SET_OPEN_COUNT = 1;
     private NonNullList<ItemStack> items;
-    private final ContainerOpenersCounter openersCounter;
+    public final ContainerOpenersCounter openersCounter;
     private final ChestLidController chestLidController;
 
-    protected ChestBlockEntity(BlockEntityType<?> blockentitytype, BlockPos blockpos, BlockState blockstate) {
-        super(blockentitytype, blockpos, blockstate);
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+    protected ChestBlockEntity(BlockEntityType<?> type, BlockPos pos, IBlockData blockState) {
+        super(type, pos, blockState);
         this.items = NonNullList.withSize(27, ItemStack.EMPTY);
         this.openersCounter = new ContainerOpenersCounter() {
             @Override
-            @Override
-            protected void onOpen(Level level, BlockPos blockpos1, BlockState blockstate1) {
-                ChestBlockEntity.playSound(level, blockpos1, blockstate1, SoundEvents.CHEST_OPEN);
+            protected void onOpen(Level level, BlockPos pos, IBlockData state) {
+                ChestBlockEntity.playSound(level, pos, state, SoundEvents.CHEST_OPEN);
             }
 
             @Override
-            @Override
-            protected void onClose(Level level, BlockPos blockpos1, BlockState blockstate1) {
-                ChestBlockEntity.playSound(level, blockpos1, blockstate1, SoundEvents.CHEST_CLOSE);
+            protected void onClose(Level level, BlockPos pos, IBlockData state) {
+                ChestBlockEntity.playSound(level, pos, state, SoundEvents.CHEST_CLOSE);
             }
 
             @Override
-            @Override
-            protected void openerCountChanged(Level level, BlockPos blockpos1, BlockState blockstate1, int i, int j) {
-                ChestBlockEntity.this.signalOpenCount(level, blockpos1, blockstate1, i, j);
+            protected void openerCountChanged(Level level, BlockPos pos, IBlockData state, int count, int openCount) {
+                ChestBlockEntity.this.signalOpenCount(level, pos, state, count, openCount);
             }
 
             @Override
-            @Override
             protected boolean isOwnContainer(Player player) {
                 if (!(player.containerMenu instanceof ChestMenu)) {
                     return false;
                 } else {
-                    Container container = ((ChestMenu) player.containerMenu).getContainer();
+                    Container iinventory = ((ChestMenu) player.containerMenu).getContainer();
 
-                    return container == ChestBlockEntity.this || container instanceof CompoundContainer && ((CompoundContainer) container).contains(ChestBlockEntity.this);
+                    return iinventory == ChestBlockEntity.this || iinventory instanceof CompoundContainer && ((CompoundContainer) iinventory).contains(ChestBlockEntity.this);
                 }
             }
         };
         this.chestLidController = new ChestLidController();
     }
 
-    public ChestBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        this(BlockEntityType.CHEST, blockpos, blockstate);
+    public ChestBlockEntity(BlockPos pos, IBlockData blockState) {
+        this(BlockEntityType.CHEST, pos, blockState);
     }
 
     @Override
-    @Override
     public int getContainerSize() {
         return 27;
     }
 
     @Override
-    @Override
     protected Component getDefaultName() {
         return Component.translatable("container.chest");
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
+    public void load(CompoundTag tag) {
+        super.load(tag);
         this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
-        if (!this.tryLoadLootTable(compoundtag)) {
-            ContainerHelper.loadAllItems(compoundtag, this.items);
+        if (!this.tryLoadLootTable(tag)) {
+            ContainerHelper.loadAllItems(tag, this.items);
         }
 
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        if (!this.trySaveLootTable(compoundtag)) {
-            ContainerHelper.saveAllItems(compoundtag, this.items);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        if (!this.trySaveLootTable(tag)) {
+            ContainerHelper.saveAllItems(tag, this.items);
         }
 
     }
 
-    public static void lidAnimateTick(Level level, BlockPos blockpos, BlockState blockstate, ChestBlockEntity chestblockentity) {
-        chestblockentity.chestLidController.tickLid();
+    public static void lidAnimateTick(Level level, BlockPos pos, IBlockData state, ChestBlockEntity blockEntity) {
+        blockEntity.chestLidController.tickLid();
     }
 
-    static void playSound(Level level, BlockPos blockpos, BlockState blockstate, SoundEvent soundevent) {
-        ChestType chesttype = (ChestType) blockstate.getValue(ChestBlock.TYPE);
+    public static void playSound(Level level, BlockPos pos, IBlockData state, SoundEvent sound) {
+        ChestType blockpropertychesttype = (ChestType) state.getValue(ChestBlock.TYPE);
 
-        if (chesttype != ChestType.LEFT) {
-            double d0 = (double) blockpos.getX() + 0.5D;
-            double d1 = (double) blockpos.getY() + 0.5D;
-            double d2 = (double) blockpos.getZ() + 0.5D;
+        if (blockpropertychesttype != ChestType.LEFT) {
+            double d0 = (double) pos.getX() + 0.5D;
+            double d1 = (double) pos.getY() + 0.5D;
+            double d2 = (double) pos.getZ() + 0.5D;
 
-            if (chesttype == ChestType.RIGHT) {
-                Direction direction = ChestBlock.getConnectedDirection(blockstate);
+            if (blockpropertychesttype == ChestType.RIGHT) {
+                Direction enumdirection = ChestBlock.getConnectedDirection(state);
 
-                d0 += (double) direction.getStepX() * 0.5D;
-                d2 += (double) direction.getStepZ() * 0.5D;
+                d0 += (double) enumdirection.getStepX() * 0.5D;
+                d2 += (double) enumdirection.getStepZ() * 0.5D;
             }
 
-            level.playSound((Player) null, d0, d1, d2, soundevent, SoundSource.BLOCKS, 0.5F, level.random.nextFloat() * 0.1F + 0.9F);
+            level.playSound((Player) null, d0, d1, d2, sound, SoundSource.BLOCKS, 0.5F, level.random.nextFloat() * 0.1F + 0.9F);
         }
     }
 
     @Override
-    @Override
-    public boolean triggerEvent(int i, int j) {
-        if (i == 1) {
-            this.chestLidController.shouldBeOpen(j > 0);
+    public boolean triggerEvent(int id, int type) {
+        if (id == 1) {
+            this.chestLidController.shouldBeOpen(type > 0);
             return true;
         } else {
-            return super.triggerEvent(i, j);
+            return super.triggerEvent(id, type);
         }
     }
 
     @Override
-    @Override
     public void startOpen(Player player) {
         if (!this.remove && !player.isSpectator()) {
             this.openersCounter.incrementOpeners(player, this.getLevel(), this.getBlockPos(), this.getBlockState());
@@ -148,7 +173,6 @@
     }
 
     @Override
-    @Override
     public void stopOpen(Player player) {
         if (!this.remove && !player.isSpectator()) {
             this.openersCounter.decrementOpeners(player, this.getLevel(), this.getBlockPos(), this.getBlockState());
@@ -157,48 +181,44 @@
     }
 
     @Override
-    @Override
     protected NonNullList<ItemStack> getItems() {
         return this.items;
     }
 
     @Override
-    @Override
-    protected void setItems(NonNullList<ItemStack> nonnulllist) {
-        this.items = nonnulllist;
+    protected void setItems(NonNullList<ItemStack> items) {
+        this.items = items;
     }
 
     @Override
-    @Override
-    public float getOpenNess(float f) {
-        return this.chestLidController.getOpenness(f);
+    public float getOpenNess(float partialTicks) {
+        return this.chestLidController.getOpenness(partialTicks);
     }
 
-    public static int getOpenCount(BlockGetter blockgetter, BlockPos blockpos) {
-        BlockState blockstate = blockgetter.getBlockState(blockpos);
+    public static int getOpenCount(BlockGetter level, BlockPos pos) {
+        IBlockData iblockdata = level.getBlockState(pos);
 
-        if (blockstate.hasBlockEntity()) {
-            BlockEntity blockentity = blockgetter.getBlockEntity(blockpos);
+        if (iblockdata.hasBlockEntity()) {
+            BlockEntity tileentity = level.getBlockEntity(pos);
 
-            if (blockentity instanceof ChestBlockEntity) {
-                return ((ChestBlockEntity) blockentity).openersCounter.getOpenerCount();
+            if (tileentity instanceof ChestBlockEntity) {
+                return ((ChestBlockEntity) tileentity).openersCounter.getOpenerCount();
             }
         }
 
         return 0;
     }
 
-    public static void swapContents(ChestBlockEntity chestblockentity, ChestBlockEntity chestblockentity1) {
-        NonNullList<ItemStack> nonnulllist = chestblockentity.getItems();
+    public static void swapContents(ChestBlockEntity chest, ChestBlockEntity otherChest) {
+        NonNullList<ItemStack> nonnulllist = chest.getItems();
 
-        chestblockentity.setItems(chestblockentity1.getItems());
-        chestblockentity1.setItems(nonnulllist);
+        chest.setItems(otherChest.getItems());
+        otherChest.setItems(nonnulllist);
     }
 
     @Override
-    @Override
-    protected AbstractContainerMenu createMenu(int i, Inventory inventory) {
-        return ChestMenu.threeRows(i, inventory, this);
+    protected AbstractContainerMenu createMenu(int id, Inventory player) {
+        return ChestMenu.threeRows(id, player, this);
     }
 
     public void recheckOpen() {
@@ -208,9 +228,16 @@
 
     }
 
-    protected void signalOpenCount(Level level, BlockPos blockpos, BlockState blockstate, int i, int j) {
-        Block block = blockstate.getBlock();
+    protected void signalOpenCount(Level level, BlockPos pos, IBlockData state, int eventId, int eventParam) {
+        Block block = state.getBlock();
 
-        level.blockEvent(blockpos, block, 1, j);
+        level.blockEvent(pos, block, 1, eventParam);
     }
+
+    // CraftBukkit start
+    @Override
+    public boolean onlyOpCanSetNbt() {
+        return true;
+    }
+    // CraftBukkit end
 }
