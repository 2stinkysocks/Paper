--- a/net/minecraft/world/level/block/entity/SkullBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/SkullBlockEntity.java
@@ -23,7 +23,7 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.SkullBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
 public class SkullBlockEntity extends BlockEntity {
 
@@ -42,24 +42,23 @@
 
     };
     @Nullable
-    private GameProfile owner;
+    public GameProfile owner;
     @Nullable
-    private ResourceLocation noteBlockSound;
+    public ResourceLocation noteBlockSound;
     private int animationTickCount;
     private boolean isAnimating;
 
-    public SkullBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.SKULL, blockpos, blockstate);
+    public SkullBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.SKULL, pos, blockState);
     }
 
-    public static void setup(final Services services, Executor executor) {
-        SkullBlockEntity.mainThreadExecutor = executor;
+    public static void setup(final Services services, Executor mainThreadExecutor) {
+        SkullBlockEntity.mainThreadExecutor = mainThreadExecutor;
         final BooleanSupplier booleansupplier = () -> {
             return SkullBlockEntity.profileCache == null;
         };
 
         SkullBlockEntity.profileCache = CacheBuilder.newBuilder().expireAfterAccess(Duration.ofMinutes(10L)).maximumSize(256L).build(new CacheLoader<String, CompletableFuture<Optional<GameProfile>>>() {
-            @Override
             public CompletableFuture<Optional<GameProfile>> load(String s) {
                 return booleansupplier.getAsBoolean() ? CompletableFuture.completedFuture(Optional.empty()) : SkullBlockEntity.loadProfile(s, services, booleansupplier);
             }
@@ -85,54 +84,52 @@
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
         if (this.owner != null) {
-            CompoundTag compoundtag1 = new CompoundTag();
+            CompoundTag nbttagcompound1 = new CompoundTag();
 
-            NbtUtils.writeGameProfile(compoundtag1, this.owner);
-            compoundtag.put("SkullOwner", compoundtag1);
+            NbtUtils.writeGameProfile(nbttagcompound1, this.owner);
+            tag.put("SkullOwner", nbttagcompound1);
         }
 
         if (this.noteBlockSound != null) {
-            compoundtag.putString("note_block_sound", this.noteBlockSound.toString());
+            tag.putString("note_block_sound", this.noteBlockSound.toString());
         }
 
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
-        if (compoundtag.contains("SkullOwner", 10)) {
-            this.setOwner(NbtUtils.readGameProfile(compoundtag.getCompound("SkullOwner")));
-        } else if (compoundtag.contains("ExtraType", 8)) {
-            String s = compoundtag.getString("ExtraType");
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        if (tag.contains("SkullOwner", 10)) {
+            this.setOwner(NbtUtils.readGameProfile(tag.getCompound("SkullOwner")));
+        } else if (tag.contains("ExtraType", 8)) {
+            String s = tag.getString("ExtraType");
 
             if (!StringUtil.isNullOrEmpty(s)) {
                 this.setOwner(new GameProfile(Util.NIL_UUID, s));
             }
         }
 
-        if (compoundtag.contains("note_block_sound", 8)) {
-            this.noteBlockSound = ResourceLocation.tryParse(compoundtag.getString("note_block_sound"));
+        if (tag.contains("note_block_sound", 8)) {
+            this.noteBlockSound = ResourceLocation.tryParse(tag.getString("note_block_sound"));
         }
 
     }
 
-    public static void animation(Level level, BlockPos blockpos, BlockState blockstate, SkullBlockEntity skullblockentity) {
-        if (blockstate.hasProperty(SkullBlock.POWERED) && (Boolean) blockstate.getValue(SkullBlock.POWERED)) {
-            skullblockentity.isAnimating = true;
-            ++skullblockentity.animationTickCount;
+    public static void animation(Level level, BlockPos pos, IBlockData state, SkullBlockEntity blockEntity) {
+        if (state.hasProperty(SkullBlock.POWERED) && (Boolean) state.getValue(SkullBlock.POWERED)) {
+            blockEntity.isAnimating = true;
+            ++blockEntity.animationTickCount;
         } else {
-            skullblockentity.isAnimating = false;
+            blockEntity.isAnimating = false;
         }
 
     }
 
-    public float getAnimation(float f) {
-        return this.isAnimating ? (float) this.animationTickCount + f : (float) this.animationTickCount;
+    public float getAnimation(float partialTick) {
+        return this.isAnimating ? (float) this.animationTickCount + partialTick : (float) this.animationTickCount;
     }
 
     @Nullable
@@ -146,20 +143,18 @@
     }
 
     @Override
-    @Override
     public ClientboundBlockEntityDataPacket getUpdatePacket() {
         return ClientboundBlockEntityDataPacket.create(this);
     }
 
     @Override
-    @Override
     public CompoundTag getUpdateTag() {
         return this.saveWithoutMetadata();
     }
 
-    public void setOwner(@Nullable GameProfile gameprofile) {
+    public void setOwner(@Nullable GameProfile owner) {
         synchronized (this) {
-            this.owner = gameprofile;
+            this.owner = owner;
         }
 
         this.updateOwnerProfile();
@@ -177,16 +172,16 @@
     }
 
     @Nullable
-    public static GameProfile getOrResolveGameProfile(CompoundTag compoundtag) {
-        if (compoundtag.contains("SkullOwner", 10)) {
-            return NbtUtils.readGameProfile(compoundtag.getCompound("SkullOwner"));
+    public static GameProfile getOrResolveGameProfile(CompoundTag nbttagcompound) {
+        if (nbttagcompound.contains("SkullOwner", 10)) {
+            return NbtUtils.readGameProfile(nbttagcompound.getCompound("SkullOwner"));
         } else {
-            if (compoundtag.contains("SkullOwner", 8)) {
-                String s = compoundtag.getString("SkullOwner");
+            if (nbttagcompound.contains("SkullOwner", 8)) {
+                String s = nbttagcompound.getString("SkullOwner");
 
                 if (!Util.isBlank(s)) {
-                    compoundtag.remove("SkullOwner");
-                    resolveGameProfile(compoundtag, s);
+                    nbttagcompound.remove("SkullOwner");
+                    resolveGameProfile(nbttagcompound, s);
                 }
             }
 
@@ -194,18 +189,28 @@
         }
     }
 
-    public static void resolveGameProfile(CompoundTag compoundtag) {
-        String s = compoundtag.getString("SkullOwner");
+    public static void resolveGameProfile(CompoundTag nbttagcompound) {
+        String s = nbttagcompound.getString("SkullOwner");
 
         if (!Util.isBlank(s)) {
-            resolveGameProfile(compoundtag, s);
+            resolveGameProfile(nbttagcompound, s);
+            // CraftBukkit start
+        } else {
+            net.minecraft.nbt.ListTag textures = nbttagcompound.getCompound("SkullOwner").getCompound("Properties").getList("textures", 10); // Safe due to method contracts
+            for (int i = 0; i < textures.size(); i++) {
+                if (textures.get(i) instanceof CompoundTag && !((CompoundTag) textures.get(i)).contains("Signature", 8) && ((CompoundTag) textures.get(i)).getString("Value").trim().isEmpty()) {
+                    nbttagcompound.remove("SkullOwner");
+                    break;
+                }
+            }
+            // CraftBukkit end
         }
 
     }
 
-    private static void resolveGameProfile(CompoundTag compoundtag, String s) {
+    private static void resolveGameProfile(CompoundTag nbttagcompound, String s) {
         fetchGameProfile(s).thenAccept((optional) -> {
-            compoundtag.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), (GameProfile) optional.orElse(new GameProfile(Util.NIL_UUID, s))));
+            nbttagcompound.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), (GameProfile) optional.orElse(new GameProfile(Util.NIL_UUID, s))));
         });
     }
 
