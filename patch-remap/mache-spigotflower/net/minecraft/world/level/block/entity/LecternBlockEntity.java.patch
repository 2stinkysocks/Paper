--- a/net/minecraft/world/level/block/entity/LecternBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/LecternBlockEntity.java
@@ -10,7 +10,7 @@
 import net.minecraft.util.Mth;
 import net.minecraft.world.Clearable;
 import net.minecraft.world.Container;
-import net.minecraft.world.MenuProvider;
+import net.minecraft.world.ITileInventory;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
@@ -21,40 +21,94 @@
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.WrittenBookItem;
 import net.minecraft.world.level.block.LecternBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.block.Lectern;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.inventory.InventoryHolder;
+// CraftBukkit end
 
-public class LecternBlockEntity extends BlockEntity implements Clearable, MenuProvider {
+public class LecternBlockEntity extends BlockEntity implements Clearable, ITileInventory, CommandSource { // CraftBukkit - ICommandListener
 
     public static final int DATA_PAGE = 0;
     public static final int NUM_DATA = 1;
     public static final int SLOT_BOOK = 0;
     public static final int NUM_SLOTS = 1;
-    private final Container bookAccess = new Container() {
+    // CraftBukkit start - add fields and methods
+    public final Container bookAccess = new LecternInventory();
+    public class LecternInventory implements Container {
+
+        public List<HumanEntity> transaction = new ArrayList<>();
+        private int maxStack = 1;
+
         @Override
+        public List<ItemStack> getContents() {
+            return Arrays.asList(book);
+        }
+
         @Override
+        public void onOpen(CraftHumanEntity who) {
+            transaction.add(who);
+        }
+
+        @Override
+        public void onClose(CraftHumanEntity who) {
+            transaction.remove(who);
+        }
+
+        @Override
+        public List<HumanEntity> getViewers() {
+            return transaction;
+        }
+
+        @Override
+        public void setMaxStackSize(int i) {
+            maxStack = i;
+        }
+
+        @Override
+        public Location getLocation() {
+            if (level == null) return null;
+            return CraftLocation.toBukkit(worldPosition, level.getWorld());
+        }
+
+        @Override
+        public InventoryHolder getOwner() {
+            return (Lectern) LecternBlockEntity.this.getOwner();
+        }
+
+        public LecternBlockEntity getLectern() {
+            return LecternBlockEntity.this;
+        }
+        // CraftBukkit end
+
+        @Override
         public int getContainerSize() {
             return 1;
         }
 
         @Override
-        @Override
         public boolean isEmpty() {
             return LecternBlockEntity.this.book.isEmpty();
         }
 
         @Override
-        @Override
-        public ItemStack getItem(int i) {
-            return i == 0 ? LecternBlockEntity.this.book : ItemStack.EMPTY;
+        public ItemStack getItem(int slot) {
+            return slot == 0 ? LecternBlockEntity.this.book : ItemStack.EMPTY;
         }
 
         @Override
-        @Override
-        public ItemStack removeItem(int i, int j) {
-            if (i == 0) {
-                ItemStack itemstack = LecternBlockEntity.this.book.split(j);
+        public ItemStack removeItem(int slot, int amount) {
+            if (slot == 0) {
+                ItemStack itemstack = LecternBlockEntity.this.book.split(amount);
 
                 if (LecternBlockEntity.this.book.isEmpty()) {
                     LecternBlockEntity.this.onBookItemRemove();
@@ -67,9 +121,8 @@
         }
 
         @Override
-        @Override
-        public ItemStack removeItemNoUpdate(int i) {
-            if (i == 0) {
+        public ItemStack removeItemNoUpdate(int slot) {
+            if (slot == 0) {
                 ItemStack itemstack = LecternBlockEntity.this.book;
 
                 LecternBlockEntity.this.book = ItemStack.EMPTY;
@@ -81,55 +134,55 @@
         }
 
         @Override
-        @Override
-        public void setItem(int i, ItemStack itemstack) {}
+        // CraftBukkit start
+        public void setItem(int slot, ItemStack stack) {
+            if (slot == 0) {
+                LecternBlockEntity.this.setBook(stack);
+                if (LecternBlockEntity.this.getLevel() != null) {
+                    LecternBlock.resetBookState(null, LecternBlockEntity.this.getLevel(), LecternBlockEntity.this.getBlockPos(), LecternBlockEntity.this.getBlockState(), LecternBlockEntity.this.hasBook());
+                }
+            }
+        }
+        // CraftBukkit end
 
         @Override
-        @Override
         public int getMaxStackSize() {
-            return 1;
+            return maxStack; // CraftBukkit
         }
 
         @Override
-        @Override
         public void setChanged() {
             LecternBlockEntity.this.setChanged();
         }
 
         @Override
-        @Override
         public boolean stillValid(Player player) {
             return Container.stillValidBlockEntity(LecternBlockEntity.this, player) && LecternBlockEntity.this.hasBook();
         }
 
         @Override
-        @Override
-        public boolean canPlaceItem(int i, ItemStack itemstack) {
+        public boolean canPlaceItem(int index, ItemStack stack) {
             return false;
         }
 
         @Override
-        @Override
         public void clearContent() {}
     };
     private final ContainerData dataAccess = new ContainerData() {
         @Override
-        @Override
-        public int get(int i) {
-            return i == 0 ? LecternBlockEntity.this.page : 0;
+        public int get(int index) {
+            return index == 0 ? LecternBlockEntity.this.page : 0;
         }
 
         @Override
-        @Override
-        public void set(int i, int j) {
-            if (i == 0) {
-                LecternBlockEntity.this.setPage(j);
+        public void set(int index, int value) {
+            if (index == 0) {
+                LecternBlockEntity.this.setPage(value);
             }
 
         }
 
         @Override
-        @Override
         public int getCount() {
             return 1;
         }
@@ -138,8 +191,8 @@
     int page;
     private int pageCount;
 
-    public LecternBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.LECTERN, blockpos, blockstate);
+    public LecternBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.LECTERN, pos, blockState);
         this.book = ItemStack.EMPTY;
     }
 
@@ -151,8 +204,8 @@
         return this.book.is(Items.WRITABLE_BOOK) || this.book.is(Items.WRITTEN_BOOK);
     }
 
-    public void setBook(ItemStack itemstack) {
-        this.setBook(itemstack, (Player) null);
+    public void setBook(ItemStack stack) {
+        this.setBook(stack, (Player) null);
     }
 
     void onBookItemRemove() {
@@ -161,20 +214,20 @@
         LecternBlock.resetBookState((Entity) null, this.getLevel(), this.getBlockPos(), this.getBlockState(), false);
     }
 
-    public void setBook(ItemStack itemstack, @Nullable Player player) {
-        this.book = this.resolveBook(itemstack, player);
+    public void setBook(ItemStack stack, @Nullable Player player) {
+        this.book = this.resolveBook(stack, player);
         this.page = 0;
         this.pageCount = WrittenBookItem.getPageCount(this.book);
         this.setChanged();
     }
 
-    void setPage(int i) {
-        int j = Mth.clamp(i, 0, this.pageCount - 1);
+    public void setPage(int page) {
+        int j = Mth.clamp(page, 0, this.pageCount - 1);
 
         if (j != this.page) {
             this.page = j;
             this.setChanged();
-            LecternBlock.signalPageChange(this.getLevel(), this.getBlockPos(), this.getBlockState());
+            if (this.level != null) LecternBlock.signalPageChange(this.getLevel(), this.getBlockPos(), this.getBlockState()); // CraftBukkit
         }
 
     }
@@ -189,14 +242,40 @@
         return Mth.floor(f * 14.0F) + (this.hasBook() ? 1 : 0);
     }
 
-    private ItemStack resolveBook(ItemStack itemstack, @Nullable Player player) {
-        if (this.level instanceof ServerLevel && itemstack.is(Items.WRITTEN_BOOK)) {
-            WrittenBookItem.resolveBookComponents(itemstack, this.createCommandSourceStack(player), player);
+    private ItemStack resolveBook(ItemStack stack, @Nullable Player player) {
+        if (this.level instanceof ServerLevel && stack.is(Items.WRITTEN_BOOK)) {
+            WrittenBookItem.resolveBookComponents(stack, this.createCommandSourceStack(player), player);
         }
 
-        return itemstack;
+        return stack;
     }
 
+    // CraftBukkit start
+    @Override
+    public void sendSystemMessage(Component component) {
+    }
+
+    @Override
+    public org.bukkit.command.CommandSender getBukkitSender(CommandSourceStack wrapper) {
+        return wrapper.getEntity() != null ? wrapper.getEntity().getBukkitSender(wrapper) : new org.bukkit.craftbukkit.command.CraftBlockCommandSender(wrapper, this);
+    }
+
+    @Override
+    public boolean acceptsSuccess() {
+        return false;
+    }
+
+    @Override
+    public boolean acceptsFailure() {
+        return false;
+    }
+
+    @Override
+    public boolean shouldInformAdmins() {
+        return false;
+    }
+
+    // CraftBukkit end
     private CommandSourceStack createCommandSourceStack(@Nullable Player player) {
         String s;
         Object object;
@@ -209,56 +288,51 @@
             object = player.getDisplayName();
         }
 
-        Vec3 vec3 = Vec3.atCenterOf(this.worldPosition);
+        Vec3 vec3d = Vec3.atCenterOf(this.worldPosition);
 
-        return new CommandSourceStack(CommandSource.NULL, vec3, Vec2.ZERO, (ServerLevel) this.level, 2, s, (Component) object, this.level.getServer(), player);
+        // CraftBukkit - this
+        return new CommandSourceStack(this, vec3d, Vec2.ZERO, (ServerLevel) this.level, 2, s, (Component) object, this.level.getServer(), player);
     }
 
     @Override
-    @Override
     public boolean onlyOpCanSetNbt() {
         return true;
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
-        if (compoundtag.contains("Book", 10)) {
-            this.book = this.resolveBook(ItemStack.of(compoundtag.getCompound("Book")), (Player) null);
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        if (tag.contains("Book", 10)) {
+            this.book = this.resolveBook(ItemStack.of(tag.getCompound("Book")), (Player) null);
         } else {
             this.book = ItemStack.EMPTY;
         }
 
         this.pageCount = WrittenBookItem.getPageCount(this.book);
-        this.page = Mth.clamp(compoundtag.getInt("Page"), 0, this.pageCount - 1);
+        this.page = Mth.clamp(tag.getInt("Page"), 0, this.pageCount - 1);
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
         if (!this.getBook().isEmpty()) {
-            compoundtag.put("Book", this.getBook().save(new CompoundTag()));
-            compoundtag.putInt("Page", this.page);
+            tag.put("Book", this.getBook().save(new CompoundTag()));
+            tag.putInt("Page", this.page);
         }
 
     }
 
     @Override
-    @Override
     public void clearContent() {
         this.setBook(ItemStack.EMPTY);
     }
 
     @Override
-    @Override
-    public AbstractContainerMenu createMenu(int i, Inventory inventory, Player player) {
-        return new LecternMenu(i, this.bookAccess, this.dataAccess);
+    public AbstractContainerMenu createMenu(int containerId, Inventory playerInventory, Player player) {
+        return new LecternMenu(containerId, this.bookAccess, this.dataAccess, playerInventory); // CraftBukkit
     }
 
     @Override
-    @Override
     public Component getDisplayName() {
         return Component.translatable("container.lectern");
     }
