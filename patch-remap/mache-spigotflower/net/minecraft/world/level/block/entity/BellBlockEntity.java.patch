--- a/net/minecraft/world/level/block/entity/BellBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BellBlockEntity.java
@@ -16,7 +16,7 @@
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.AABB;
 import org.apache.commons.lang3.mutable.MutableInt;
 
@@ -35,64 +35,63 @@
     public boolean shaking;
     public Direction clickDirection;
     private List<LivingEntity> nearbyEntities;
-    private boolean resonating;
-    private int resonationTicks;
+    public boolean resonating;
+    public int resonationTicks;
 
-    public BellBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.BELL, blockpos, blockstate);
+    public BellBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.BELL, pos, blockState);
     }
 
     @Override
-    @Override
-    public boolean triggerEvent(int i, int j) {
-        if (i == 1) {
+    public boolean triggerEvent(int id, int type) {
+        if (id == 1) {
             this.updateEntities();
             this.resonationTicks = 0;
-            this.clickDirection = Direction.from3DDataValue(j);
+            this.clickDirection = Direction.from3DDataValue(type);
             this.ticks = 0;
             this.shaking = true;
             return true;
         } else {
-            return super.triggerEvent(i, j);
+            return super.triggerEvent(id, type);
         }
     }
 
-    private static void tick(Level level, BlockPos blockpos, BlockState blockstate, BellBlockEntity bellblockentity, BellBlockEntity.ResonationEndAction bellblockentity_resonationendaction) {
-        if (bellblockentity.shaking) {
-            ++bellblockentity.ticks;
+    private static void tick(Level level, BlockPos pos, IBlockData state, BellBlockEntity blockEntity, BellBlockEntity.ResonationEndAction resonationEndAction) {
+        if (blockEntity.shaking) {
+            ++blockEntity.ticks;
         }
 
-        if (bellblockentity.ticks >= 50) {
-            bellblockentity.shaking = false;
-            bellblockentity.ticks = 0;
+        if (blockEntity.ticks >= 50) {
+            blockEntity.shaking = false;
+            blockEntity.ticks = 0;
         }
 
-        if (bellblockentity.ticks >= 5 && bellblockentity.resonationTicks == 0 && areRaidersNearby(blockpos, bellblockentity.nearbyEntities)) {
-            bellblockentity.resonating = true;
-            level.playSound((Player) null, blockpos, SoundEvents.BELL_RESONATE, SoundSource.BLOCKS, 1.0F, 1.0F);
+        if (blockEntity.ticks >= 5 && blockEntity.resonationTicks == 0 && areRaidersNearby(pos, blockEntity.nearbyEntities)) {
+            blockEntity.resonating = true;
+            level.playSound((Player) null, pos, SoundEvents.BELL_RESONATE, SoundSource.BLOCKS, 1.0F, 1.0F);
         }
 
-        if (bellblockentity.resonating) {
-            if (bellblockentity.resonationTicks < 40) {
-                ++bellblockentity.resonationTicks;
+        if (blockEntity.resonating) {
+            if (blockEntity.resonationTicks < 40) {
+                ++blockEntity.resonationTicks;
             } else {
-                bellblockentity_resonationendaction.run(level, blockpos, bellblockentity.nearbyEntities);
-                bellblockentity.resonating = false;
+                resonationEndAction.run(level, pos, blockEntity.nearbyEntities);
+                blockEntity.resonating = false;
             }
         }
 
     }
 
-    public static void clientTick(Level level, BlockPos blockpos, BlockState blockstate, BellBlockEntity bellblockentity) {
-        tick(level, blockpos, blockstate, bellblockentity, BellBlockEntity::showBellParticles);
+    public static void clientTick(Level level, BlockPos pos, IBlockData state, BellBlockEntity blockEntity) {
+        tick(level, pos, state, blockEntity, BellBlockEntity::showBellParticles);
     }
 
-    public static void serverTick(Level level, BlockPos blockpos, BlockState blockstate, BellBlockEntity bellblockentity) {
-        tick(level, blockpos, blockstate, bellblockentity, BellBlockEntity::makeRaidersGlow);
+    public static void serverTick(Level level, BlockPos pos, IBlockData state, BellBlockEntity blockEntity) {
+        tick(level, pos, state, blockEntity, BellBlockEntity::makeRaidersGlow);
     }
 
     public void onHit(Direction direction) {
-        BlockPos blockpos = this.getBlockPos();
+        BlockPos blockposition = this.getBlockPos();
 
         this.clickDirection = direction;
         if (this.shaking) {
@@ -101,68 +100,72 @@
             this.shaking = true;
         }
 
-        this.level.blockEvent(blockpos, this.getBlockState().getBlock(), 1, direction.get3DDataValue());
+        this.level.blockEvent(blockposition, this.getBlockState().getBlock(), 1, direction.get3DDataValue());
     }
 
     private void updateEntities() {
-        BlockPos blockpos = this.getBlockPos();
+        BlockPos blockposition = this.getBlockPos();
 
         if (this.level.getGameTime() > this.lastRingTimestamp + 60L || this.nearbyEntities == null) {
             this.lastRingTimestamp = this.level.getGameTime();
-            AABB aabb = (new AABB(blockpos)).inflate(48.0D);
+            AABB axisalignedbb = (new AABB(blockposition)).inflate(48.0D);
 
-            this.nearbyEntities = this.level.getEntitiesOfClass(LivingEntity.class, aabb);
+            this.nearbyEntities = this.level.getEntitiesOfClass(LivingEntity.class, axisalignedbb);
         }
 
         if (!this.level.isClientSide) {
             Iterator iterator = this.nearbyEntities.iterator();
 
             while (iterator.hasNext()) {
-                LivingEntity livingentity = (LivingEntity) iterator.next();
+                LivingEntity entityliving = (LivingEntity) iterator.next();
 
-                if (livingentity.isAlive() && !livingentity.isRemoved() && blockpos.closerToCenterThan(livingentity.position(), 32.0D)) {
-                    livingentity.getBrain().setMemory(MemoryModuleType.HEARD_BELL_TIME, (Object) this.level.getGameTime());
+                if (entityliving.isAlive() && !entityliving.isRemoved() && blockposition.closerToCenterThan(entityliving.position(), 32.0D)) {
+                    entityliving.getBrain().setMemory(MemoryModuleType.HEARD_BELL_TIME, this.level.getGameTime()); // CraftBukkit - decompile error
                 }
             }
         }
 
     }
 
-    private static boolean areRaidersNearby(BlockPos blockpos, List<LivingEntity> list) {
-        Iterator iterator = list.iterator();
+    private static boolean areRaidersNearby(BlockPos pos, List<LivingEntity> raiders) {
+        Iterator iterator = raiders.iterator();
 
-        LivingEntity livingentity;
+        LivingEntity entityliving;
 
         do {
             if (!iterator.hasNext()) {
                 return false;
             }
 
-            livingentity = (LivingEntity) iterator.next();
-        } while (!livingentity.isAlive() || livingentity.isRemoved() || !blockpos.closerToCenterThan(livingentity.position(), 32.0D) || !livingentity.getType().is(EntityTypeTags.RAIDERS));
+            entityliving = (LivingEntity) iterator.next();
+        } while (!entityliving.isAlive() || entityliving.isRemoved() || !pos.closerToCenterThan(entityliving.position(), 32.0D) || !entityliving.getType().is(EntityTypeTags.RAIDERS));
 
         return true;
     }
 
-    private static void makeRaidersGlow(Level level, BlockPos blockpos, List<LivingEntity> list) {
-        list.stream().filter((livingentity) -> {
-            return isRaiderWithinRange(blockpos, livingentity);
-        }).forEach(BellBlockEntity::glow);
+    private static void makeRaidersGlow(Level level, BlockPos pos, List<LivingEntity> raiders) {
+        List<org.bukkit.entity.LivingEntity> entities = // CraftBukkit
+        raiders.stream().filter((entityliving) -> {
+            return isRaiderWithinRange(pos, entityliving);
+        }).map((entity) -> (org.bukkit.entity.LivingEntity) entity.getBukkitEntity()).collect(java.util.stream.Collectors.toCollection(java.util.ArrayList::new)); // CraftBukkit
+
+        org.bukkit.craftbukkit.event.CraftEventFactory.handleBellResonateEvent(level, pos, entities).forEach(BellBlockEntity::glow);
+        // CraftBukkit end
     }
 
-    private static void showBellParticles(Level level, BlockPos blockpos, List<LivingEntity> list) {
+    private static void showBellParticles(Level level, BlockPos pos, List<LivingEntity> raiders) {
         MutableInt mutableint = new MutableInt(16700985);
-        int i = (int) list.stream().filter((livingentity) -> {
-            return blockpos.closerToCenterThan(livingentity.position(), 48.0D);
+        int i = (int) raiders.stream().filter((entityliving) -> {
+            return pos.closerToCenterThan(entityliving.position(), 48.0D);
         }).count();
 
-        list.stream().filter((livingentity) -> {
-            return isRaiderWithinRange(blockpos, livingentity);
-        }).forEach((livingentity) -> {
+        raiders.stream().filter((entityliving) -> {
+            return isRaiderWithinRange(pos, entityliving);
+        }).forEach((entityliving) -> {
             float f = 1.0F;
-            double d0 = Math.sqrt((livingentity.getX() - (double) blockpos.getX()) * (livingentity.getX() - (double) blockpos.getX()) + (livingentity.getZ() - (double) blockpos.getZ()) * (livingentity.getZ() - (double) blockpos.getZ()));
-            double d1 = (double) ((float) blockpos.getX() + 0.5F) + 1.0D / d0 * (livingentity.getX() - (double) blockpos.getX());
-            double d2 = (double) ((float) blockpos.getZ() + 0.5F) + 1.0D / d0 * (livingentity.getZ() - (double) blockpos.getZ());
+            double d0 = Math.sqrt((entityliving.getX() - (double) pos.getX()) * (entityliving.getX() - (double) pos.getX()) + (entityliving.getZ() - (double) pos.getZ()) * (entityliving.getZ() - (double) pos.getZ()));
+            double d1 = (double) ((float) pos.getX() + 0.5F) + 1.0D / d0 * (entityliving.getX() - (double) pos.getX());
+            double d2 = (double) ((float) pos.getZ() + 0.5F) + 1.0D / d0 * (entityliving.getZ() - (double) pos.getZ());
             int j = Mth.clamp((i - 21) / -2, 3, 15);
 
             for (int k = 0; k < j; ++k) {
@@ -171,18 +174,18 @@
                 double d4 = (double) FastColor.ARGB32.green(l) / 255.0D;
                 double d5 = (double) FastColor.ARGB32.blue(l) / 255.0D;
 
-                level.addParticle(ParticleTypes.ENTITY_EFFECT, d1, (double) ((float) blockpos.getY() + 0.5F), d2, d3, d4, d5);
+                level.addParticle(ParticleTypes.ENTITY_EFFECT, d1, (double) ((float) pos.getY() + 0.5F), d2, d3, d4, d5);
             }
 
         });
     }
 
-    private static boolean isRaiderWithinRange(BlockPos blockpos, LivingEntity livingentity) {
-        return livingentity.isAlive() && !livingentity.isRemoved() && blockpos.closerToCenterThan(livingentity.position(), 48.0D) && livingentity.getType().is(EntityTypeTags.RAIDERS);
+    private static boolean isRaiderWithinRange(BlockPos pos, LivingEntity raider) {
+        return raider.isAlive() && !raider.isRemoved() && pos.closerToCenterThan(raider.position(), 48.0D) && raider.getType().is(EntityTypeTags.RAIDERS);
     }
 
-    private static void glow(LivingEntity livingentity) {
-        livingentity.addEffect(new MobEffectInstance(MobEffects.GLOWING, 60));
+    private static void glow(LivingEntity entity) {
+        entity.addEffect(new MobEffectInstance(MobEffects.GLOWING, 60));
     }
 
     @FunctionalInterface
