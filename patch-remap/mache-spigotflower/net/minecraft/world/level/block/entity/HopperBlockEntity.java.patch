--- a/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -11,6 +11,7 @@
 import net.minecraft.core.NonNullList;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
+import net.minecraft.world.CompoundContainer;
 import net.minecraft.world.Container;
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.WorldlyContainer;
@@ -18,7 +19,6 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.item.ItemEntity;
-import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.HopperMenu;
@@ -27,10 +27,21 @@
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.ChestBlock;
 import net.minecraft.world.level.block.HopperBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.HopperInventorySearchEvent;
+import org.bukkit.event.inventory.InventoryMoveItemEvent;
+import org.bukkit.event.inventory.InventoryPickupItemEvent;
+import org.bukkit.inventory.Inventory;
+// CraftBukkit end
 
 public class HopperBlockEntity extends RandomizableContainerBlockEntity implements Hopper {
 
@@ -40,95 +51,119 @@
     private int cooldownTime;
     private long tickedGameTime;
 
-    public HopperBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.HOPPER, blockpos, blockstate);
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+    public HopperBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.HOPPER, pos, blockState);
         this.items = NonNullList.withSize(5, ItemStack.EMPTY);
         this.cooldownTime = -1;
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
+    public void load(CompoundTag tag) {
+        super.load(tag);
         this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
-        if (!this.tryLoadLootTable(compoundtag)) {
-            ContainerHelper.loadAllItems(compoundtag, this.items);
+        if (!this.tryLoadLootTable(tag)) {
+            ContainerHelper.loadAllItems(tag, this.items);
         }
 
-        this.cooldownTime = compoundtag.getInt("TransferCooldown");
+        this.cooldownTime = tag.getInt("TransferCooldown");
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        if (!this.trySaveLootTable(compoundtag)) {
-            ContainerHelper.saveAllItems(compoundtag, this.items);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        if (!this.trySaveLootTable(tag)) {
+            ContainerHelper.saveAllItems(tag, this.items);
         }
 
-        compoundtag.putInt("TransferCooldown", this.cooldownTime);
+        tag.putInt("TransferCooldown", this.cooldownTime);
     }
 
     @Override
-    @Override
     public int getContainerSize() {
         return this.items.size();
     }
 
     @Override
-    @Override
-    public ItemStack removeItem(int i, int j) {
+    public ItemStack removeItem(int index, int count) {
         this.unpackLootTable((Player) null);
-        return ContainerHelper.removeItem(this.getItems(), i, j);
+        return ContainerHelper.removeItem(this.getItems(), index, count);
     }
 
     @Override
-    @Override
-    public void setItem(int i, ItemStack itemstack) {
+    public void setItem(int index, ItemStack stack) {
         this.unpackLootTable((Player) null);
-        this.getItems().set(i, itemstack);
-        if (itemstack.getCount() > this.getMaxStackSize()) {
-            itemstack.setCount(this.getMaxStackSize());
+        this.getItems().set(index, stack);
+        if (stack.getCount() > this.getMaxStackSize()) {
+            stack.setCount(this.getMaxStackSize());
         }
 
     }
 
     @Override
-    @Override
     protected Component getDefaultName() {
         return Component.translatable("container.hopper");
     }
 
-    public static void pushItemsTick(Level level, BlockPos blockpos, BlockState blockstate, HopperBlockEntity hopperblockentity) {
-        --hopperblockentity.cooldownTime;
-        hopperblockentity.tickedGameTime = level.getGameTime();
-        if (!hopperblockentity.isOnCooldown()) {
-            hopperblockentity.setCooldown(0);
-            tryMoveItems(level, blockpos, blockstate, hopperblockentity, () -> {
-                return suckInItems(level, hopperblockentity);
+    public static void pushItemsTick(Level level, BlockPos pos, IBlockData state, HopperBlockEntity blockEntity) {
+        --blockEntity.cooldownTime;
+        blockEntity.tickedGameTime = level.getGameTime();
+        if (!blockEntity.isOnCooldown()) {
+            blockEntity.setCooldown(0);
+            tryMoveItems(level, pos, state, blockEntity, () -> {
+                return suckInItems(level, blockEntity);
             });
         }
 
     }
 
-    private static boolean tryMoveItems(Level level, BlockPos blockpos, BlockState blockstate, HopperBlockEntity hopperblockentity, BooleanSupplier booleansupplier) {
+    private static boolean tryMoveItems(Level level, BlockPos pos, IBlockData state, HopperBlockEntity blockEntity, BooleanSupplier validator) {
         if (level.isClientSide) {
             return false;
         } else {
-            if (!hopperblockentity.isOnCooldown() && (Boolean) blockstate.getValue(HopperBlock.ENABLED)) {
+            if (!blockEntity.isOnCooldown() && (Boolean) state.getValue(HopperBlock.ENABLED)) {
                 boolean flag = false;
 
-                if (!hopperblockentity.isEmpty()) {
-                    flag = ejectItems(level, blockpos, blockstate, hopperblockentity);
+                if (!blockEntity.isEmpty()) {
+                    flag = ejectItems(level, pos, state, (Container) blockEntity, blockEntity); // CraftBukkit
                 }
 
-                if (!hopperblockentity.inventoryFull()) {
-                    flag |= booleansupplier.getAsBoolean();
+                if (!blockEntity.inventoryFull()) {
+                    flag |= validator.getAsBoolean();
                 }
 
                 if (flag) {
-                    hopperblockentity.setCooldown(8);
-                    setChanged(level, blockpos, blockstate);
+                    blockEntity.setCooldown(8);
+                    setChanged(level, pos, state);
                     return true;
                 }
             }
@@ -153,28 +188,51 @@
         return false;
     }
 
-    private static boolean ejectItems(Level level, BlockPos blockpos, BlockState blockstate, Container container) {
-        Container container1 = getAttachedContainer(level, blockpos, blockstate);
+    private static boolean ejectItems(Level world, BlockPos blockposition, IBlockData iblockdata, Container iinventory, HopperBlockEntity hopper) { // CraftBukkit
+        Container iinventory1 = getAttachedContainer(world, blockposition, iblockdata);
 
-        if (container1 == null) {
+        if (iinventory1 == null) {
             return false;
         } else {
-            Direction direction = ((Direction) blockstate.getValue(HopperBlock.FACING)).getOpposite();
+            Direction enumdirection = ((Direction) iblockdata.getValue(HopperBlock.FACING)).getOpposite();
 
-            if (isFullContainer(container1, direction)) {
+            if (isFullContainer(iinventory1, enumdirection)) {
                 return false;
             } else {
-                for (int i = 0; i < container.getContainerSize(); ++i) {
-                    if (!container.getItem(i).isEmpty()) {
-                        ItemStack itemstack = container.getItem(i).copy();
-                        ItemStack itemstack1 = addItem(container, container1, container.removeItem(i, 1), direction);
+                for (int i = 0; i < iinventory.getContainerSize(); ++i) {
+                    if (!iinventory.getItem(i).isEmpty()) {
+                        ItemStack itemstack = iinventory.getItem(i).copy();
+                        // ItemStack itemstack1 = addItem(iinventory, iinventory1, iinventory.removeItem(i, 1), enumdirection);
 
+                        // CraftBukkit start - Call event when pushing items into other inventories
+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.removeItem(i, 1));
+
+                        Inventory destinationInventory;
+                        // Have to special case large chests as they work oddly
+                        if (iinventory1 instanceof CompoundContainer) {
+                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) iinventory1);
+                        } else if (iinventory1.getOwner() != null) {
+                            destinationInventory = iinventory1.getOwner().getInventory();
+                        } else {
+                            destinationInventory = new CraftInventory(iinventory);
+                        }
+
+                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(iinventory.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
+                        world.getCraftServer().getPluginManager().callEvent(event);
+                        if (event.isCancelled()) {
+                            hopper.setItem(i, itemstack);
+                            hopper.setCooldown(8); // Delay hopper checks
+                            return false;
+                        }
+                        ItemStack itemstack1 = addItem(iinventory, iinventory1, CraftItemStack.asNMSCopy(event.getItem()), enumdirection);
+                        // CraftBukkit end
+
                         if (itemstack1.isEmpty()) {
-                            container1.setChanged();
+                            iinventory1.setChanged();
                             return true;
                         }
 
-                        container.setItem(i, itemstack);
+                        iinventory.setItem(i, itemstack);
                     }
                 }
 
@@ -202,101 +260,135 @@
     }
 
     public static boolean suckInItems(Level level, Hopper hopper) {
-        Container container = getSourceContainer(level, hopper);
+        Container iinventory = getSourceContainer(level, hopper);
 
-        if (container != null) {
-            Direction direction = Direction.DOWN;
+        if (iinventory != null) {
+            Direction enumdirection = Direction.DOWN;
 
-            return isEmptyContainer(container, direction) ? false : getSlots(container, direction).anyMatch((i) -> {
-                return tryTakeInItemFromSlot(hopper, container, i, direction);
+            return isEmptyContainer(iinventory, enumdirection) ? false : getSlots(iinventory, enumdirection).anyMatch((i) -> {
+                return tryTakeInItemFromSlot(hopper, iinventory, i, enumdirection);
             });
         } else {
             Iterator iterator = getItemsAtAndAbove(level, hopper).iterator();
 
-            ItemEntity itementity;
+            ItemEntity entityitem;
 
             do {
                 if (!iterator.hasNext()) {
                     return false;
                 }
 
-                itementity = (ItemEntity) iterator.next();
-            } while (!addItem(hopper, itementity));
+                entityitem = (ItemEntity) iterator.next();
+            } while (!addItem(hopper, entityitem));
 
             return true;
         }
     }
 
-    private static boolean tryTakeInItemFromSlot(Hopper hopper, Container container, int i, Direction direction) {
-        ItemStack itemstack = container.getItem(i);
+    private static boolean tryTakeInItemFromSlot(Hopper hopper, Container container, int slot, Direction direction) {
+        ItemStack itemstack = container.getItem(slot);
 
-        if (!itemstack.isEmpty() && canTakeItemFromContainer(hopper, container, itemstack, i, direction)) {
+        if (!itemstack.isEmpty() && canTakeItemFromContainer(hopper, container, itemstack, slot, direction)) {
             ItemStack itemstack1 = itemstack.copy();
-            ItemStack itemstack2 = addItem(container, hopper, container.removeItem(i, 1), (Direction) null);
+            // ItemStack itemstack2 = addItem(iinventory, ihopper, iinventory.removeItem(i, 1), (EnumDirection) null);
+            // CraftBukkit start - Call event on collection of items from inventories into the hopper
+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(container.removeItem(slot, 1));
 
+            Inventory sourceInventory;
+            // Have to special case large chests as they work oddly
+            if (container instanceof CompoundContainer) {
+                sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) container);
+            } else if (container.getOwner() != null) {
+                sourceInventory = container.getOwner().getInventory();
+            } else {
+                sourceInventory = new CraftInventory(container);
+            }
+
+            InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, oitemstack.clone(), hopper.getOwner().getInventory(), false);
+
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                container.setItem(slot, itemstack1);
+
+                if (hopper instanceof HopperBlockEntity) {
+                    ((HopperBlockEntity) hopper).setCooldown(8); // Delay hopper checks
+                }
+
+                return false;
+            }
+            ItemStack itemstack2 = addItem(container, hopper, CraftItemStack.asNMSCopy(event.getItem()), null);
+            // CraftBukkit end
+
             if (itemstack2.isEmpty()) {
                 container.setChanged();
                 return true;
             }
 
-            container.setItem(i, itemstack1);
+            container.setItem(slot, itemstack1);
         }
 
         return false;
     }
 
-    public static boolean addItem(Container container, ItemEntity itementity) {
+    public static boolean addItem(Container container, ItemEntity item) {
         boolean flag = false;
-        ItemStack itemstack = itementity.getItem().copy();
+        // CraftBukkit start
+        InventoryPickupItemEvent event = new InventoryPickupItemEvent(container.getOwner().getInventory(), (org.bukkit.entity.Item) item.getBukkitEntity());
+        item.level().getCraftServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return false;
+        }
+        // CraftBukkit end
+        ItemStack itemstack = item.getItem().copy();
         ItemStack itemstack1 = addItem((Container) null, container, itemstack, (Direction) null);
 
         if (itemstack1.isEmpty()) {
             flag = true;
-            itementity.setItem(ItemStack.EMPTY);
-            itementity.discard();
+            item.setItem(ItemStack.EMPTY);
+            item.discard();
         } else {
-            itementity.setItem(itemstack1);
+            item.setItem(itemstack1);
         }
 
         return flag;
     }
 
-    public static ItemStack addItem(@Nullable Container container, Container container1, ItemStack itemstack, @Nullable Direction direction) {
+    public static ItemStack addItem(@Nullable Container source, Container destination, ItemStack stack, @Nullable Direction direction) {
         int i;
 
-        if (container1 instanceof WorldlyContainer) {
-            WorldlyContainer worldlycontainer = (WorldlyContainer) container1;
+        if (destination instanceof WorldlyContainer) {
+            WorldlyContainer iworldinventory = (WorldlyContainer) destination;
 
             if (direction != null) {
-                int[] aint = worldlycontainer.getSlotsForFace(direction);
+                int[] aint = iworldinventory.getSlotsForFace(direction);
 
-                for (i = 0; i < aint.length && !itemstack.isEmpty(); ++i) {
-                    itemstack = tryMoveInItem(container, container1, itemstack, aint[i], direction);
+                for (i = 0; i < aint.length && !stack.isEmpty(); ++i) {
+                    stack = tryMoveInItem(source, destination, stack, aint[i], direction);
                 }
 
-                return itemstack;
+                return stack;
             }
         }
 
-        int j = container1.getContainerSize();
+        int j = destination.getContainerSize();
 
-        for (i = 0; i < j && !itemstack.isEmpty(); ++i) {
-            itemstack = tryMoveInItem(container, container1, itemstack, i, direction);
+        for (i = 0; i < j && !stack.isEmpty(); ++i) {
+            stack = tryMoveInItem(source, destination, stack, i, direction);
         }
 
-        return itemstack;
+        return stack;
     }
 
-    private static boolean canPlaceItemInContainer(Container container, ItemStack itemstack, int i, @Nullable Direction direction) {
-        if (!container.canPlaceItem(i, itemstack)) {
+    private static boolean canPlaceItemInContainer(Container container, ItemStack stack, int slot, @Nullable Direction direction) {
+        if (!container.canPlaceItem(slot, stack)) {
             return false;
         } else {
             boolean flag;
 
             if (container instanceof WorldlyContainer) {
-                WorldlyContainer worldlycontainer = (WorldlyContainer) container;
+                WorldlyContainer iworldinventory = (WorldlyContainer) container;
 
-                if (!worldlycontainer.canPlaceItemThroughFace(i, itemstack, direction)) {
+                if (!iworldinventory.canPlaceItemThroughFace(slot, stack, direction)) {
                     flag = false;
                     return flag;
                 }
@@ -307,16 +399,16 @@
         }
     }
 
-    private static boolean canTakeItemFromContainer(Container container, Container container1, ItemStack itemstack, int i, Direction direction) {
-        if (!container1.canTakeItem(container, i, itemstack)) {
+    private static boolean canTakeItemFromContainer(Container source, Container destination, ItemStack stack, int slot, Direction direction) {
+        if (!destination.canTakeItem(source, slot, stack)) {
             return false;
         } else {
             boolean flag;
 
-            if (container1 instanceof WorldlyContainer) {
-                WorldlyContainer worldlycontainer = (WorldlyContainer) container1;
+            if (destination instanceof WorldlyContainer) {
+                WorldlyContainer iworldinventory = (WorldlyContainer) destination;
 
-                if (!worldlycontainer.canTakeItemThroughFace(i, itemstack, direction)) {
+                if (!iworldinventory.canTakeItemThroughFace(slot, stack, direction)) {
                     flag = false;
                     return flag;
                 }
@@ -327,97 +419,121 @@
         }
     }
 
-    private static ItemStack tryMoveInItem(@Nullable Container container, Container container1, ItemStack itemstack, int i, @Nullable Direction direction) {
-        ItemStack itemstack1 = container1.getItem(i);
+    private static ItemStack tryMoveInItem(@Nullable Container source, Container destination, ItemStack stack, int slot, @Nullable Direction direction) {
+        ItemStack itemstack1 = destination.getItem(slot);
 
-        if (canPlaceItemInContainer(container1, itemstack, i, direction)) {
+        if (canPlaceItemInContainer(destination, stack, slot, direction)) {
             boolean flag = false;
-            boolean flag1 = container1.isEmpty();
+            boolean flag1 = destination.isEmpty();
 
             if (itemstack1.isEmpty()) {
-                container1.setItem(i, itemstack);
-                itemstack = ItemStack.EMPTY;
+                destination.setItem(slot, stack);
+                stack = ItemStack.EMPTY;
                 flag = true;
-            } else if (canMergeItems(itemstack1, itemstack)) {
-                int j = itemstack.getMaxStackSize() - itemstack1.getCount();
-                int k = Math.min(itemstack.getCount(), j);
+            } else if (canMergeItems(itemstack1, stack)) {
+                int j = stack.getMaxStackSize() - itemstack1.getCount();
+                int k = Math.min(stack.getCount(), j);
 
-                itemstack.shrink(k);
+                stack.shrink(k);
                 itemstack1.grow(k);
                 flag = k > 0;
             }
 
             if (flag) {
-                if (flag1 && container1 instanceof HopperBlockEntity) {
-                    HopperBlockEntity hopperblockentity = (HopperBlockEntity) container1;
+                if (flag1 && destination instanceof HopperBlockEntity) {
+                    HopperBlockEntity tileentityhopper = (HopperBlockEntity) destination;
 
-                    if (!hopperblockentity.isOnCustomCooldown()) {
+                    if (!tileentityhopper.isOnCustomCooldown()) {
                         byte b0 = 0;
 
-                        if (container instanceof HopperBlockEntity) {
-                            HopperBlockEntity hopperblockentity1 = (HopperBlockEntity) container;
+                        if (source instanceof HopperBlockEntity) {
+                            HopperBlockEntity tileentityhopper1 = (HopperBlockEntity) source;
 
-                            if (hopperblockentity.tickedGameTime >= hopperblockentity1.tickedGameTime) {
+                            if (tileentityhopper.tickedGameTime >= tileentityhopper1.tickedGameTime) {
                                 b0 = 1;
                             }
                         }
 
-                        hopperblockentity.setCooldown(8 - b0);
+                        tileentityhopper.setCooldown(8 - b0);
                     }
                 }
 
-                container1.setChanged();
+                destination.setChanged();
             }
         }
 
-        return itemstack;
+        return stack;
     }
 
+    // CraftBukkit start
     @Nullable
-    private static Container getAttachedContainer(Level level, BlockPos blockpos, BlockState blockstate) {
-        Direction direction = (Direction) blockstate.getValue(HopperBlock.FACING);
+    private static Container runHopperInventorySearchEvent(Container inventory, CraftBlock hopper, CraftBlock searchLocation, HopperInventorySearchEvent.ContainerType containerType) {
+        HopperInventorySearchEvent event = new HopperInventorySearchEvent((inventory != null) ? new CraftInventory(inventory) : null, containerType, hopper, searchLocation);
+        Bukkit.getServer().getPluginManager().callEvent(event);
+        CraftInventory craftInventory = (CraftInventory) event.getInventory();
+        return (craftInventory != null) ? craftInventory.getInventory() : null;
+    }
+    // CraftBukkit end
 
-        return getContainerAt(level, blockpos.relative(direction));
+    @Nullable
+    private static Container getAttachedContainer(Level level, BlockPos pos, IBlockData state) {
+        Direction enumdirection = (Direction) state.getValue(HopperBlock.FACING);
+
+        // CraftBukkit start
+        BlockPos searchPosition = pos.relative(enumdirection);
+        Container inventory = getContainerAt(level, pos.relative(enumdirection));
+
+        CraftBlock hopper = CraftBlock.at(level, pos);
+        CraftBlock searchBlock = CraftBlock.at(level, searchPosition);
+        return runHopperInventorySearchEvent(inventory, hopper, searchBlock, HopperInventorySearchEvent.ContainerType.DESTINATION);
+        // CraftBukkit end
     }
 
     @Nullable
     private static Container getSourceContainer(Level level, Hopper hopper) {
-        return getContainerAt(level, hopper.getLevelX(), hopper.getLevelY() + 1.0D, hopper.getLevelZ());
+        // CraftBukkit start
+        Container inventory = getContainerAt(level, hopper.getLevelX(), hopper.getLevelY() + 1.0D, hopper.getLevelZ());
+
+        BlockPos blockPosition = BlockPos.containing(hopper.getLevelX(), hopper.getLevelY(), hopper.getLevelZ());
+        CraftBlock hopper1 = CraftBlock.at(level, blockPosition);
+        CraftBlock container = CraftBlock.at(level, blockPosition.above());
+        return runHopperInventorySearchEvent(inventory, hopper1, container, HopperInventorySearchEvent.ContainerType.SOURCE);
+        // CraftBukkit end
     }
 
     public static List<ItemEntity> getItemsAtAndAbove(Level level, Hopper hopper) {
-        return (List) hopper.getSuckShape().toAabbs().stream().flatMap((aabb) -> {
-            return level.getEntitiesOfClass(ItemEntity.class, aabb.move(hopper.getLevelX() - 0.5D, hopper.getLevelY() - 0.5D, hopper.getLevelZ() - 0.5D), EntitySelector.ENTITY_STILL_ALIVE).stream();
+        return (List) hopper.getSuckShape().toAabbs().stream().flatMap((axisalignedbb) -> {
+            return level.getEntitiesOfClass(ItemEntity.class, axisalignedbb.move(hopper.getLevelX() - 0.5D, hopper.getLevelY() - 0.5D, hopper.getLevelZ() - 0.5D), EntitySelector.ENTITY_STILL_ALIVE).stream();
         }).collect(Collectors.toList());
     }
 
     @Nullable
-    public static Container getContainerAt(Level level, BlockPos blockpos) {
-        return getContainerAt(level, (double) blockpos.getX() + 0.5D, (double) blockpos.getY() + 0.5D, (double) blockpos.getZ() + 0.5D);
+    public static Container getContainerAt(Level level, BlockPos pos) {
+        return getContainerAt(level, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D);
     }
 
     @Nullable
-    private static Container getContainerAt(Level level, double d0, double d1, double d2) {
+    private static Container getContainerAt(Level level, double x, double d1, double y) {
         Object object = null;
-        BlockPos blockpos = BlockPos.containing(d0, d1, d2);
-        BlockState blockstate = level.getBlockState(blockpos);
-        Block block = blockstate.getBlock();
+        BlockPos blockposition = BlockPos.containing(x, d1, y);
+        IBlockData iblockdata = level.getBlockState(blockposition);
+        Block block = iblockdata.getBlock();
 
         if (block instanceof WorldlyContainerHolder) {
-            object = ((WorldlyContainerHolder) block).getContainer(blockstate, level, blockpos);
-        } else if (blockstate.hasBlockEntity()) {
-            BlockEntity blockentity = level.getBlockEntity(blockpos);
+            object = ((WorldlyContainerHolder) block).getContainer(iblockdata, level, blockposition);
+        } else if (iblockdata.hasBlockEntity()) {
+            BlockEntity tileentity = level.getBlockEntity(blockposition);
 
-            if (blockentity instanceof Container) {
-                object = (Container) blockentity;
+            if (tileentity instanceof Container) {
+                object = (Container) tileentity;
                 if (object instanceof ChestBlockEntity && block instanceof ChestBlock) {
-                    object = ChestBlock.getContainer((ChestBlock) block, blockstate, level, blockpos, true);
+                    object = ChestBlock.getContainer((ChestBlock) block, iblockdata, level, blockposition, true);
                 }
             }
         }
 
         if (object == null) {
-            List<Entity> list = level.getEntities((Entity) null, new AABB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D), EntitySelector.CONTAINER_ENTITY_SELECTOR);
+            List<Entity> list = level.getEntities((Entity) null, new AABB(x - 0.5D, d1 - 0.5D, y - 0.5D, x + 0.5D, d1 + 0.5D, y + 0.5D), EntitySelector.CONTAINER_ENTITY_SELECTOR);
 
             if (!list.isEmpty()) {
                 object = (Container) list.get(level.random.nextInt(list.size()));
@@ -427,30 +543,27 @@
         return (Container) object;
     }
 
-    private static boolean canMergeItems(ItemStack itemstack, ItemStack itemstack1) {
-        return itemstack.getCount() <= itemstack.getMaxStackSize() && ItemStack.isSameItemSameTags(itemstack, itemstack1);
+    private static boolean canMergeItems(ItemStack stack1, ItemStack stack2) {
+        return stack1.getCount() <= stack1.getMaxStackSize() && ItemStack.isSameItemSameTags(stack1, stack2);
     }
 
     @Override
-    @Override
     public double getLevelX() {
         return (double) this.worldPosition.getX() + 0.5D;
     }
 
     @Override
-    @Override
     public double getLevelY() {
         return (double) this.worldPosition.getY() + 0.5D;
     }
 
     @Override
-    @Override
     public double getLevelZ() {
         return (double) this.worldPosition.getZ() + 0.5D;
     }
 
-    private void setCooldown(int i) {
-        this.cooldownTime = i;
+    private void setCooldown(int cooldownTime) {
+        this.cooldownTime = cooldownTime;
     }
 
     private boolean isOnCooldown() {
@@ -462,24 +575,22 @@
     }
 
     @Override
-    @Override
     protected NonNullList<ItemStack> getItems() {
         return this.items;
     }
 
     @Override
-    @Override
-    protected void setItems(NonNullList<ItemStack> nonnulllist) {
-        this.items = nonnulllist;
+    protected void setItems(NonNullList<ItemStack> items) {
+        this.items = items;
     }
 
-    public static void entityInside(Level level, BlockPos blockpos, BlockState blockstate, Entity entity, HopperBlockEntity hopperblockentity) {
+    public static void entityInside(Level level, BlockPos pos, IBlockData state, Entity entity, HopperBlockEntity blockEntity) {
         if (entity instanceof ItemEntity) {
-            ItemEntity itementity = (ItemEntity) entity;
+            ItemEntity entityitem = (ItemEntity) entity;
 
-            if (!itementity.getItem().isEmpty() && Shapes.joinIsNotEmpty(Shapes.create(entity.getBoundingBox().move((double) (-blockpos.getX()), (double) (-blockpos.getY()), (double) (-blockpos.getZ()))), hopperblockentity.getSuckShape(), BooleanOp.AND)) {
-                tryMoveItems(level, blockpos, blockstate, hopperblockentity, () -> {
-                    return addItem(hopperblockentity, itementity);
+            if (!entityitem.getItem().isEmpty() && Shapes.joinIsNotEmpty(Shapes.create(entity.getBoundingBox().move((double) (-pos.getX()), (double) (-pos.getY()), (double) (-pos.getZ()))), blockEntity.getSuckShape(), BooleanOp.AND)) {
+                tryMoveItems(level, pos, state, blockEntity, () -> {
+                    return addItem(blockEntity, entityitem);
                 });
             }
         }
@@ -487,8 +598,7 @@
     }
 
     @Override
-    @Override
-    protected AbstractContainerMenu createMenu(int i, Inventory inventory) {
-        return new HopperMenu(i, inventory, this);
+    protected AbstractContainerMenu createMenu(int id, net.minecraft.world.entity.player.Inventory player) {
+        return new HopperMenu(id, player, this);
     }
 }
