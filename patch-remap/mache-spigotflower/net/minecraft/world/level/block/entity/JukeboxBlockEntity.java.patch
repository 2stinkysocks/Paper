--- a/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
@@ -17,58 +17,100 @@
 import net.minecraft.world.item.RecordItem;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.JukeboxBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.ticks.ContainerSingleItem;
 
+// CraftBukkit start
+import java.util.Collections;
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class JukeboxBlockEntity extends BlockEntity implements Clearable, ContainerSingleItem {
 
     private static final int SONG_END_PADDING = 20;
     private ItemStack item;
     private int ticksSinceLastEvent;
-    private long tickCount;
-    private long recordStartedTick;
-    private boolean isPlaying;
+    public long tickCount;
+    public long recordStartedTick;
+    public boolean isPlaying;
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+    public boolean opened;
 
-    public JukeboxBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.JUKEBOX, blockpos, blockstate);
-        this.item = ItemStack.EMPTY;
+    @Override
+    public List<ItemStack> getContents() {
+        return Collections.singletonList(item);
     }
 
     @Override
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
     @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
-        if (compoundtag.contains("RecordItem", 10)) {
-            this.item = ItemStack.of(compoundtag.getCompound("RecordItem"));
-        }
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
 
-        this.isPlaying = compoundtag.getBoolean("IsPlaying");
-        this.recordStartedTick = compoundtag.getLong("RecordStartTick");
-        this.tickCount = compoundtag.getLong("TickCount");
+    @Override
+    public List<HumanEntity> getViewers() {
+        return transaction;
     }
 
     @Override
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
     @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
+    public Location getLocation() {
+        if (level == null) return null;
+        return new org.bukkit.Location(level.getWorld(), worldPosition.getX(), worldPosition.getY(), worldPosition.getZ());
+    }
+    // CraftBukkit end
+
+    public JukeboxBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.JUKEBOX, pos, blockState);
+        this.item = ItemStack.EMPTY;
+    }
+
+    @Override
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        if (tag.contains("RecordItem", 10)) {
+            this.item = ItemStack.of(tag.getCompound("RecordItem"));
+        }
+
+        this.isPlaying = tag.getBoolean("IsPlaying");
+        this.recordStartedTick = tag.getLong("RecordStartTick");
+        this.tickCount = tag.getLong("TickCount");
+    }
+
+    @Override
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
         if (!this.getTheItem().isEmpty()) {
-            compoundtag.put("RecordItem", this.getTheItem().save(new CompoundTag()));
+            tag.put("RecordItem", this.getTheItem().save(new CompoundTag()));
         }
 
-        compoundtag.putBoolean("IsPlaying", this.isPlaying);
-        compoundtag.putLong("RecordStartTick", this.recordStartedTick);
-        compoundtag.putLong("TickCount", this.tickCount);
+        tag.putBoolean("IsPlaying", this.isPlaying);
+        tag.putLong("RecordStartTick", this.recordStartedTick);
+        tag.putLong("TickCount", this.tickCount);
     }
 
     public boolean isRecordPlaying() {
         return !this.getTheItem().isEmpty() && this.isPlaying;
     }
 
-    private void setHasRecordBlockState(@Nullable Entity entity, boolean flag) {
+    private void setHasRecordBlockState(@Nullable Entity entity, boolean hasRecord) {
         if (this.level.getBlockState(this.getBlockPos()) == this.getBlockState()) {
-            this.level.setBlock(this.getBlockPos(), (BlockState) this.getBlockState().setValue(JukeboxBlock.HAS_RECORD, flag), 2);
+            this.level.setBlock(this.getBlockPos(), (IBlockData) this.getBlockState().setValue(JukeboxBlock.HAS_RECORD, hasRecord), 2);
             this.level.gameEvent(GameEvent.BLOCK_CHANGE, this.getBlockPos(), GameEvent.Context.of(entity, this.getBlockState()));
         }
 
@@ -91,20 +133,20 @@
         this.setChanged();
     }
 
-    private void tick(Level level, BlockPos blockpos, BlockState blockstate) {
+    private void tick(Level level, BlockPos pos, IBlockData state) {
         ++this.ticksSinceLastEvent;
         if (this.isRecordPlaying()) {
             Item item = this.getTheItem().getItem();
 
             if (item instanceof RecordItem) {
-                RecordItem recorditem = (RecordItem) item;
+                RecordItem itemrecord = (RecordItem) item;
 
-                if (this.shouldRecordStopPlaying(recorditem)) {
+                if (this.shouldRecordStopPlaying(itemrecord)) {
                     this.stopPlaying();
                 } else if (this.shouldSendJukeboxPlayingEvent()) {
                     this.ticksSinceLastEvent = 0;
-                    level.gameEvent(GameEvent.JUKEBOX_PLAY, blockpos, GameEvent.Context.of(blockstate));
-                    this.spawnMusicParticles(level, blockpos);
+                    level.gameEvent(GameEvent.JUKEBOX_PLAY, pos, GameEvent.Context.of(state));
+                    this.spawnMusicParticles(level, pos);
                 }
             }
         }
@@ -112,8 +154,8 @@
         ++this.tickCount;
     }
 
-    private boolean shouldRecordStopPlaying(RecordItem recorditem) {
-        return this.tickCount >= this.recordStartedTick + (long) recorditem.getLengthInTicks() + 20L;
+    private boolean shouldRecordStopPlaying(RecordItem record) {
+        return this.tickCount >= this.recordStartedTick + (long) record.getLengthInTicks() + 20L;
     }
 
     private boolean shouldSendJukeboxPlayingEvent() {
@@ -121,13 +163,11 @@
     }
 
     @Override
-    @Override
     public ItemStack getTheItem() {
         return this.item;
     }
 
     @Override
-    @Override
     public ItemStack splitTheItem(int i) {
         ItemStack itemstack = this.item;
 
@@ -141,7 +181,6 @@
     }
 
     @Override
-    @Override
     public void setTheItem(ItemStack itemstack) {
         if (itemstack.is(ItemTags.MUSIC_DISCS) && this.level != null) {
             this.item = itemstack;
@@ -154,65 +193,65 @@
     }
 
     @Override
-    @Override
     public int getMaxStackSize() {
-        return 1;
+        return maxStack; // CraftBukkit
     }
 
     @Override
-    @Override
     public BlockEntity getContainerBlockEntity() {
         return this;
     }
 
     @Override
-    @Override
-    public boolean canPlaceItem(int i, ItemStack itemstack) {
-        return itemstack.is(ItemTags.MUSIC_DISCS) && this.getItem(i).isEmpty();
+    public boolean canPlaceItem(int index, ItemStack stack) {
+        return stack.is(ItemTags.MUSIC_DISCS) && this.getItem(index).isEmpty();
     }
 
     @Override
-    @Override
-    public boolean canTakeItem(Container container, int i, ItemStack itemstack) {
-        return container.hasAnyMatching(ItemStack::isEmpty);
+    public boolean canTakeItem(Container target, int index, ItemStack stack) {
+        return target.hasAnyMatching(ItemStack::isEmpty);
     }
 
-    private void spawnMusicParticles(Level level, BlockPos blockpos) {
+    private void spawnMusicParticles(Level level, BlockPos pos) {
         if (level instanceof ServerLevel) {
-            ServerLevel serverlevel = (ServerLevel) level;
-            Vec3 vec3 = Vec3.atBottomCenterOf(blockpos).add(0.0D, 1.2000000476837158D, 0.0D);
+            ServerLevel worldserver = (ServerLevel) level;
+            Vec3 vec3d = Vec3.atBottomCenterOf(pos).add(0.0D, 1.2000000476837158D, 0.0D);
             float f = (float) level.getRandom().nextInt(4) / 24.0F;
 
-            serverlevel.sendParticles(ParticleTypes.NOTE, vec3.x(), vec3.y(), vec3.z(), 0, (double) f, 0.0D, 0.0D, 1.0D);
+            worldserver.sendParticles(ParticleTypes.NOTE, vec3d.x(), vec3d.y(), vec3d.z(), 0, (double) f, 0.0D, 0.0D, 1.0D);
         }
 
     }
 
     public void popOutRecord() {
         if (this.level != null && !this.level.isClientSide) {
-            BlockPos blockpos = this.getBlockPos();
+            BlockPos blockposition = this.getBlockPos();
             ItemStack itemstack = this.getTheItem();
 
             if (!itemstack.isEmpty()) {
                 this.removeTheItem();
-                Vec3 vec3 = Vec3.atLowerCornerWithOffset(blockpos, 0.5D, 1.01D, 0.5D).offsetRandom(this.level.random, 0.7F);
+                Vec3 vec3d = Vec3.atLowerCornerWithOffset(blockposition, 0.5D, 1.01D, 0.5D).offsetRandom(this.level.random, 0.7F);
                 ItemStack itemstack1 = itemstack.copy();
-                ItemEntity itementity = new ItemEntity(this.level, vec3.x(), vec3.y(), vec3.z(), itemstack1);
+                ItemEntity entityitem = new ItemEntity(this.level, vec3d.x(), vec3d.y(), vec3d.z(), itemstack1);
 
-                itementity.setDefaultPickUpDelay();
-                this.level.addFreshEntity(itementity);
+                entityitem.setDefaultPickUpDelay();
+                this.level.addFreshEntity(entityitem);
             }
         }
     }
 
-    public static void playRecordTick(Level level, BlockPos blockpos, BlockState blockstate, JukeboxBlockEntity jukeboxblockentity) {
-        jukeboxblockentity.tick(level, blockpos, blockstate);
+    public static void playRecordTick(Level level, BlockPos pos, IBlockData state, JukeboxBlockEntity jukebox) {
+        jukebox.tick(level, pos, state);
     }
 
     @VisibleForTesting
-    public void setRecordWithoutPlaying(ItemStack itemstack) {
-        this.item = itemstack;
-        this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
+    public void setRecordWithoutPlaying(ItemStack stack) {
+        this.item = stack;
+        // CraftBukkit start - add null check for level
+        if (level != null) {
+            this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
+        }
+        // CraftBukkit end
         this.setChanged();
     }
 }
