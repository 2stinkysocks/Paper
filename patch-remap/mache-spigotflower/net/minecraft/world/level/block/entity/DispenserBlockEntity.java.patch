--- a/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
@@ -11,35 +11,70 @@
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.DispenserMenu;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
 
     public static final int CONTAINER_SIZE = 9;
     private NonNullList<ItemStack> items;
 
-    protected DispenserBlockEntity(BlockEntityType<?> blockentitytype, BlockPos blockpos, BlockState blockstate) {
-        super(blockentitytype, blockpos, blockstate);
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+    protected DispenserBlockEntity(BlockEntityType<?> type, BlockPos pos, IBlockData blockState) {
+        super(type, pos, blockState);
         this.items = NonNullList.withSize(9, ItemStack.EMPTY);
     }
 
-    public DispenserBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        this(BlockEntityType.DISPENSER, blockpos, blockstate);
+    public DispenserBlockEntity(BlockPos pos, IBlockData blockState) {
+        this(BlockEntityType.DISPENSER, pos, blockState);
     }
 
     @Override
-    @Override
     public int getContainerSize() {
         return 9;
     }
 
-    public int getRandomSlot(RandomSource randomsource) {
+    public int getRandomSlot(RandomSource random) {
         this.unpackLootTable((Player) null);
         int i = -1;
         int j = 1;
 
         for (int k = 0; k < this.items.size(); ++k) {
-            if (!((ItemStack) this.items.get(k)).isEmpty() && randomsource.nextInt(j++) == 0) {
+            if (!((ItemStack) this.items.get(k)).isEmpty() && random.nextInt(j++) == 0) {
                 i = k;
             }
         }
@@ -47,10 +82,10 @@
         return i;
     }
 
-    public int addItem(ItemStack itemstack) {
+    public int addItem(ItemStack stack) {
         for (int i = 0; i < this.items.size(); ++i) {
             if (((ItemStack) this.items.get(i)).isEmpty()) {
-                this.setItem(i, itemstack);
+                this.setItem(i, stack);
                 return i;
             }
         }
@@ -59,47 +94,41 @@
     }
 
     @Override
-    @Override
     protected Component getDefaultName() {
         return Component.translatable("container.dispenser");
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
+    public void load(CompoundTag tag) {
+        super.load(tag);
         this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
-        if (!this.tryLoadLootTable(compoundtag)) {
-            ContainerHelper.loadAllItems(compoundtag, this.items);
+        if (!this.tryLoadLootTable(tag)) {
+            ContainerHelper.loadAllItems(tag, this.items);
         }
 
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        if (!this.trySaveLootTable(compoundtag)) {
-            ContainerHelper.saveAllItems(compoundtag, this.items);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        if (!this.trySaveLootTable(tag)) {
+            ContainerHelper.saveAllItems(tag, this.items);
         }
 
     }
 
     @Override
-    @Override
     protected NonNullList<ItemStack> getItems() {
         return this.items;
     }
 
     @Override
-    @Override
-    protected void setItems(NonNullList<ItemStack> nonnulllist) {
-        this.items = nonnulllist;
+    protected void setItems(NonNullList<ItemStack> items) {
+        this.items = items;
     }
 
     @Override
-    @Override
-    protected AbstractContainerMenu createMenu(int i, Inventory inventory) {
-        return new DispenserMenu(i, inventory, this);
+    protected AbstractContainerMenu createMenu(int id, Inventory player) {
+        return new DispenserMenu(id, player, this);
     }
 }
