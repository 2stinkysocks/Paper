--- a/net/minecraft/world/level/block/entity/ContainerOpenersCounter.java
+++ b/net/minecraft/world/level/block/entity/ContainerOpenersCounter.java
@@ -4,7 +4,7 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.AABB;
@@ -13,52 +13,90 @@
 
     private static final int CHECK_TICK_DELAY = 5;
     private int openCount;
+    public boolean opened; // CraftBukkit
 
     public ContainerOpenersCounter() {}
 
-    protected abstract void onOpen(Level level, BlockPos pos, BlockState state);
+    protected abstract void onOpen(Level level, BlockPos pos, IBlockData state);
 
-    protected abstract void onClose(Level level, BlockPos pos, BlockState state);
+    protected abstract void onClose(Level level, BlockPos pos, IBlockData state);
 
-    protected abstract void openerCountChanged(Level level, BlockPos pos, BlockState state, int count, int openCount);
+    protected abstract void openerCountChanged(Level level, BlockPos pos, IBlockData state, int count, int openCount);
 
+    // CraftBukkit start
+    public void onAPIOpen(Level world, BlockPos blockposition, IBlockData iblockdata) {
+        onOpen(world, blockposition, iblockdata);
+    }
+
+    public void onAPIClose(Level world, BlockPos blockposition, IBlockData iblockdata) {
+        onClose(world, blockposition, iblockdata);
+    }
+
+    public void openerAPICountChanged(Level world, BlockPos blockposition, IBlockData iblockdata, int i, int j) {
+        openerCountChanged(world, blockposition, iblockdata, i, j);
+    }
+    // CraftBukkit end
+
     protected abstract boolean isOwnContainer(Player player);
 
-    public void incrementOpeners(Player player, Level level, BlockPos blockpos, BlockState blockstate) {
+    public void incrementOpeners(Player player, Level level, BlockPos pos, IBlockData state) {
+        int oldPower = Math.max(0, Math.min(15, this.openCount)); // CraftBukkit - Get power before new viewer is added
         int i = this.openCount++;
 
+        // CraftBukkit start - Call redstone event
+        if (level.getBlockState(pos).is(net.minecraft.world.level.block.Blocks.TRAPPED_CHEST)) {
+            int newPower = Math.max(0, Math.min(15, this.openCount));
+
+            if (oldPower != newPower) {
+                org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(level, pos, oldPower, newPower);
+            }
+        }
+        // CraftBukkit end
+
         if (i == 0) {
-            this.onOpen(level, blockpos, blockstate);
-            level.gameEvent((Entity) player, GameEvent.CONTAINER_OPEN, blockpos);
-            scheduleRecheck(level, blockpos, blockstate);
+            this.onOpen(level, pos, state);
+            level.gameEvent((Entity) player, GameEvent.CONTAINER_OPEN, pos);
+            scheduleRecheck(level, pos, state);
         }
 
-        this.openerCountChanged(level, blockpos, blockstate, i, this.openCount);
+        this.openerCountChanged(level, pos, state, i, this.openCount);
     }
 
-    public void decrementOpeners(Player player, Level level, BlockPos blockpos, BlockState blockstate) {
+    public void decrementOpeners(Player player, Level level, BlockPos pos, IBlockData state) {
+        int oldPower = Math.max(0, Math.min(15, this.openCount)); // CraftBukkit - Get power before new viewer is added
         int i = this.openCount--;
 
+        // CraftBukkit start - Call redstone event
+        if (level.getBlockState(pos).is(net.minecraft.world.level.block.Blocks.TRAPPED_CHEST)) {
+            int newPower = Math.max(0, Math.min(15, this.openCount));
+
+            if (oldPower != newPower) {
+                org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(level, pos, oldPower, newPower);
+            }
+        }
+        // CraftBukkit end
+
         if (this.openCount == 0) {
-            this.onClose(level, blockpos, blockstate);
-            level.gameEvent((Entity) player, GameEvent.CONTAINER_CLOSE, blockpos);
+            this.onClose(level, pos, state);
+            level.gameEvent((Entity) player, GameEvent.CONTAINER_CLOSE, pos);
         }
 
-        this.openerCountChanged(level, blockpos, blockstate, i, this.openCount);
+        this.openerCountChanged(level, pos, state, i, this.openCount);
     }
 
-    private int getOpenCount(Level level, BlockPos blockpos) {
-        int i = blockpos.getX();
-        int j = blockpos.getY();
-        int k = blockpos.getZ();
+    private int getOpenCount(Level level, BlockPos pos) {
+        int i = pos.getX();
+        int j = pos.getY();
+        int k = pos.getZ();
         float f = 5.0F;
-        AABB aabb = new AABB((double) ((float) i - 5.0F), (double) ((float) j - 5.0F), (double) ((float) k - 5.0F), (double) ((float) (i + 1) + 5.0F), (double) ((float) (j + 1) + 5.0F), (double) ((float) (k + 1) + 5.0F));
+        AABB axisalignedbb = new AABB((double) ((float) i - 5.0F), (double) ((float) j - 5.0F), (double) ((float) k - 5.0F), (double) ((float) (i + 1) + 5.0F), (double) ((float) (j + 1) + 5.0F), (double) ((float) (k + 1) + 5.0F));
 
-        return level.getEntities(EntityTypeTest.forClass(Player.class), aabb, this::isOwnContainer).size();
+        return level.getEntities(EntityTypeTest.forClass(Player.class), axisalignedbb, this::isOwnContainer).size();
     }
 
-    public void recheckOpeners(Level level, BlockPos blockpos, BlockState blockstate) {
-        int i = this.getOpenCount(level, blockpos);
+    public void recheckOpeners(Level level, BlockPos pos, IBlockData state) {
+        int i = this.getOpenCount(level, pos);
+        if (opened) i++; // CraftBukkit - add dummy count from API
         int j = this.openCount;
 
         if (j != i) {
@@ -66,19 +104,19 @@
             boolean flag1 = j != 0;
 
             if (flag && !flag1) {
-                this.onOpen(level, blockpos, blockstate);
-                level.gameEvent((Entity) null, GameEvent.CONTAINER_OPEN, blockpos);
+                this.onOpen(level, pos, state);
+                level.gameEvent((Entity) null, GameEvent.CONTAINER_OPEN, pos);
             } else if (!flag) {
-                this.onClose(level, blockpos, blockstate);
-                level.gameEvent((Entity) null, GameEvent.CONTAINER_CLOSE, blockpos);
+                this.onClose(level, pos, state);
+                level.gameEvent((Entity) null, GameEvent.CONTAINER_CLOSE, pos);
             }
 
             this.openCount = i;
         }
 
-        this.openerCountChanged(level, blockpos, blockstate, j, i);
+        this.openerCountChanged(level, pos, state, j, i);
         if (i > 0) {
-            scheduleRecheck(level, blockpos, blockstate);
+            scheduleRecheck(level, pos, state);
         }
 
     }
@@ -87,7 +125,7 @@
         return this.openCount;
     }
 
-    private static void scheduleRecheck(Level level, BlockPos blockpos, BlockState blockstate) {
-        level.scheduleTick(blockpos, blockstate.getBlock(), 5);
+    private static void scheduleRecheck(Level level, BlockPos pos, IBlockData state) {
+        level.scheduleTick(pos, state.getBlock(), 5);
     }
 }
