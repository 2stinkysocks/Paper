--- a/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
@@ -24,14 +24,20 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.levelgen.feature.Feature;
 import net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.event.player.PlayerTeleportEvent;
+// CraftBukkit end
 
 public class TheEndGatewayBlockEntity extends TheEndPortalBlockEntity {
 
@@ -41,76 +47,74 @@
     private static final int ATTENTION_INTERVAL = 2400;
     private static final int EVENT_COOLDOWN = 1;
     private static final int GATEWAY_HEIGHT_ABOVE_SURFACE = 10;
-    private long age;
+    public long age;
     private int teleportCooldown;
     @Nullable
-    private BlockPos exitPortal;
-    private boolean exactTeleport;
+    public BlockPos exitPortal;
+    public boolean exactTeleport;
 
-    public TheEndGatewayBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.END_GATEWAY, blockpos, blockstate);
+    public TheEndGatewayBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.END_GATEWAY, pos, blockState);
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        compoundtag.putLong("Age", this.age);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        tag.putLong("Age", this.age);
         if (this.exitPortal != null) {
-            compoundtag.put("ExitPortal", NbtUtils.writeBlockPos(this.exitPortal));
+            tag.put("ExitPortal", NbtUtils.writeBlockPos(this.exitPortal));
         }
 
         if (this.exactTeleport) {
-            compoundtag.putBoolean("ExactTeleport", true);
+            tag.putBoolean("ExactTeleport", true);
         }
 
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
-        this.age = compoundtag.getLong("Age");
-        if (compoundtag.contains("ExitPortal", 10)) {
-            BlockPos blockpos = NbtUtils.readBlockPos(compoundtag.getCompound("ExitPortal"));
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        this.age = tag.getLong("Age");
+        if (tag.contains("ExitPortal", 10)) {
+            BlockPos blockposition = NbtUtils.readBlockPos(tag.getCompound("ExitPortal"));
 
-            if (Level.isInSpawnableBounds(blockpos)) {
-                this.exitPortal = blockpos;
+            if (Level.isInSpawnableBounds(blockposition)) {
+                this.exitPortal = blockposition;
             }
         }
 
-        this.exactTeleport = compoundtag.getBoolean("ExactTeleport");
+        this.exactTeleport = tag.getBoolean("ExactTeleport");
     }
 
-    public static void beamAnimationTick(Level level, BlockPos blockpos, BlockState blockstate, TheEndGatewayBlockEntity theendgatewayblockentity) {
-        ++theendgatewayblockentity.age;
-        if (theendgatewayblockentity.isCoolingDown()) {
-            --theendgatewayblockentity.teleportCooldown;
+    public static void beamAnimationTick(Level level, BlockPos pos, IBlockData state, TheEndGatewayBlockEntity blockEntity) {
+        ++blockEntity.age;
+        if (blockEntity.isCoolingDown()) {
+            --blockEntity.teleportCooldown;
         }
 
     }
 
-    public static void teleportTick(Level level, BlockPos blockpos, BlockState blockstate, TheEndGatewayBlockEntity theendgatewayblockentity) {
-        boolean flag = theendgatewayblockentity.isSpawning();
-        boolean flag1 = theendgatewayblockentity.isCoolingDown();
+    public static void teleportTick(Level level, BlockPos pos, IBlockData state, TheEndGatewayBlockEntity blockEntity) {
+        boolean flag = blockEntity.isSpawning();
+        boolean flag1 = blockEntity.isCoolingDown();
 
-        ++theendgatewayblockentity.age;
+        ++blockEntity.age;
         if (flag1) {
-            --theendgatewayblockentity.teleportCooldown;
+            --blockEntity.teleportCooldown;
         } else {
-            List<Entity> list = level.getEntitiesOfClass(Entity.class, new AABB(blockpos), TheEndGatewayBlockEntity::canEntityTeleport);
+            List<Entity> list = level.getEntitiesOfClass(Entity.class, new AABB(pos), TheEndGatewayBlockEntity::canEntityTeleport);
 
             if (!list.isEmpty()) {
-                teleportEntity(level, blockpos, blockstate, (Entity) list.get(level.random.nextInt(list.size())), theendgatewayblockentity);
+                teleportEntity(level, pos, state, (Entity) list.get(level.random.nextInt(list.size())), blockEntity);
             }
 
-            if (theendgatewayblockentity.age % 2400L == 0L) {
-                triggerCooldown(level, blockpos, blockstate, theendgatewayblockentity);
+            if (blockEntity.age % 2400L == 0L) {
+                triggerCooldown(level, pos, state, blockEntity);
             }
         }
 
-        if (flag != theendgatewayblockentity.isSpawning() || flag1 != theendgatewayblockentity.isCoolingDown()) {
-            setChanged(level, blockpos, blockstate);
+        if (flag != blockEntity.isSpawning() || flag1 != blockEntity.isCoolingDown()) {
+            setChanged(level, pos, state);
         }
 
     }
@@ -127,70 +131,67 @@
         return this.teleportCooldown > 0;
     }
 
-    public float getSpawnPercent(float f) {
-        return Mth.clamp(((float) this.age + f) / 200.0F, 0.0F, 1.0F);
+    public float getSpawnPercent(float partialTicks) {
+        return Mth.clamp(((float) this.age + partialTicks) / 200.0F, 0.0F, 1.0F);
     }
 
-    public float getCooldownPercent(float f) {
-        return 1.0F - Mth.clamp(((float) this.teleportCooldown - f) / 40.0F, 0.0F, 1.0F);
+    public float getCooldownPercent(float partialTicks) {
+        return 1.0F - Mth.clamp(((float) this.teleportCooldown - partialTicks) / 40.0F, 0.0F, 1.0F);
     }
 
     @Override
-    @Override
     public ClientboundBlockEntityDataPacket getUpdatePacket() {
         return ClientboundBlockEntityDataPacket.create(this);
     }
 
     @Override
-    @Override
     public CompoundTag getUpdateTag() {
         return this.saveWithoutMetadata();
     }
 
-    private static void triggerCooldown(Level level, BlockPos blockpos, BlockState blockstate, TheEndGatewayBlockEntity theendgatewayblockentity) {
+    private static void triggerCooldown(Level level, BlockPos pos, IBlockData state, TheEndGatewayBlockEntity blockEntity) {
         if (!level.isClientSide) {
-            theendgatewayblockentity.teleportCooldown = 40;
-            level.blockEvent(blockpos, blockstate.getBlock(), 1, 0);
-            setChanged(level, blockpos, blockstate);
+            blockEntity.teleportCooldown = 40;
+            level.blockEvent(pos, state.getBlock(), 1, 0);
+            setChanged(level, pos, state);
         }
 
     }
 
     @Override
-    @Override
-    public boolean triggerEvent(int i, int j) {
-        if (i == 1) {
+    public boolean triggerEvent(int id, int type) {
+        if (id == 1) {
             this.teleportCooldown = 40;
             return true;
         } else {
-            return super.triggerEvent(i, j);
+            return super.triggerEvent(id, type);
         }
     }
 
-    public static void teleportEntity(Level level, BlockPos blockpos, BlockState blockstate, Entity entity, TheEndGatewayBlockEntity theendgatewayblockentity) {
-        if (level instanceof ServerLevel && !theendgatewayblockentity.isCoolingDown()) {
-            ServerLevel serverlevel = (ServerLevel) level;
+    public static void teleportEntity(Level level, BlockPos pos, IBlockData state, Entity entity, TheEndGatewayBlockEntity blockEntity) {
+        if (level instanceof ServerLevel && !blockEntity.isCoolingDown()) {
+            ServerLevel worldserver = (ServerLevel) level;
 
-            theendgatewayblockentity.teleportCooldown = 100;
-            BlockPos blockpos1;
+            blockEntity.teleportCooldown = 100;
+            BlockPos blockposition1;
 
-            if (theendgatewayblockentity.exitPortal == null && level.dimension() == Level.END) {
-                blockpos1 = findOrCreateValidTeleportPos(serverlevel, blockpos);
-                blockpos1 = blockpos1.above(10);
-                TheEndGatewayBlockEntity.LOGGER.debug("Creating portal at {}", blockpos1);
-                spawnGatewayPortal(serverlevel, blockpos1, EndGatewayConfiguration.knownExit(blockpos, false));
-                theendgatewayblockentity.exitPortal = blockpos1;
+            if (blockEntity.exitPortal == null && level.getTypeKey() == LevelStem.END) { // CraftBukkit - work in alternate worlds
+                blockposition1 = findOrCreateValidTeleportPos(worldserver, pos);
+                blockposition1 = blockposition1.above(10);
+                TheEndGatewayBlockEntity.LOGGER.debug("Creating portal at {}", blockposition1);
+                spawnGatewayPortal(worldserver, blockposition1, EndGatewayConfiguration.knownExit(pos, false));
+                blockEntity.exitPortal = blockposition1;
             }
 
-            if (theendgatewayblockentity.exitPortal != null) {
-                blockpos1 = theendgatewayblockentity.exactTeleport ? theendgatewayblockentity.exitPortal : findExitPosition(level, theendgatewayblockentity.exitPortal);
+            if (blockEntity.exitPortal != null) {
+                blockposition1 = blockEntity.exactTeleport ? blockEntity.exitPortal : findExitPosition(level, blockEntity.exitPortal);
                 Entity entity1;
 
                 if (entity instanceof ThrownEnderpearl) {
                     Entity entity2 = ((ThrownEnderpearl) entity).getOwner();
 
                     if (entity2 instanceof ServerPlayer) {
-                        CriteriaTriggers.ENTER_BLOCK.trigger((ServerPlayer) entity2, blockstate);
+                        CriteriaTriggers.ENTER_BLOCK.trigger((ServerPlayer) entity2, state);
                     }
 
                     if (entity2 != null) {
@@ -203,78 +204,104 @@
                     entity1 = entity.getRootVehicle();
                 }
 
+                // CraftBukkit start - Fire PlayerTeleportEvent/EntityTeleportEvent
+                if (entity1 instanceof ServerPlayer) {
+                    org.bukkit.craftbukkit.entity.CraftPlayer player = (CraftPlayer) entity1.getBukkitEntity();
+                    org.bukkit.Location location = CraftLocation.toBukkit(blockposition1, level.getWorld()).add(0.5D, 0.5D, 0.5D);
+                    location.setPitch(player.getLocation().getPitch());
+                    location.setYaw(player.getLocation().getYaw());
+
+                    PlayerTeleportEvent teleEvent = new PlayerTeleportEvent(player, player.getLocation(), location, PlayerTeleportEvent.TeleportCause.END_GATEWAY);
+                    Bukkit.getPluginManager().callEvent(teleEvent);
+                    if (teleEvent.isCancelled()) {
+                        return;
+                    }
+
+                    entity1.setPortalCooldown();
+                    ((ServerPlayer) entity1).connection.teleport(teleEvent.getTo());
+                    triggerCooldown(level, pos, state, blockEntity); // CraftBukkit - call at end of method
+                    return;
+
+                }
+
+                org.bukkit.event.entity.EntityTeleportEvent teleEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTeleportEvent(entity1, blockposition1.getX() + 0.5, blockposition1.getY() + 0.5, blockposition1.getZ() + 0.5);
+                if (teleEvent.isCancelled()) {
+                    return;
+                }
+
                 entity1.setPortalCooldown();
-                entity1.teleportToWithTicket((double) blockpos1.getX() + 0.5D, (double) blockpos1.getY(), (double) blockpos1.getZ() + 0.5D);
+                entity1.teleportToWithTicket(teleEvent.getTo().getX(), teleEvent.getTo().getY(), teleEvent.getTo().getZ());
+                // CraftBukkit end
             }
 
-            triggerCooldown(level, blockpos, blockstate, theendgatewayblockentity);
+            triggerCooldown(level, pos, state, blockEntity);
         }
     }
 
-    private static BlockPos findExitPosition(Level level, BlockPos blockpos) {
-        BlockPos blockpos1 = findTallestBlock(level, blockpos.offset(0, 2, 0), 5, false);
+    private static BlockPos findExitPosition(Level level, BlockPos pos) {
+        BlockPos blockposition1 = findTallestBlock(level, pos.offset(0, 2, 0), 5, false);
 
-        TheEndGatewayBlockEntity.LOGGER.debug("Best exit position for portal at {} is {}", blockpos, blockpos1);
-        return blockpos1.above();
+        TheEndGatewayBlockEntity.LOGGER.debug("Best exit position for portal at {} is {}", pos, blockposition1);
+        return blockposition1.above();
     }
 
-    private static BlockPos findOrCreateValidTeleportPos(ServerLevel serverlevel, BlockPos blockpos) {
-        Vec3 vec3 = findExitPortalXZPosTentative(serverlevel, blockpos);
-        LevelChunk levelchunk = getChunk(serverlevel, vec3);
-        BlockPos blockpos1 = findValidSpawnInChunk(levelchunk);
+    private static BlockPos findOrCreateValidTeleportPos(ServerLevel level, BlockPos pos) {
+        Vec3 vec3d = findExitPortalXZPosTentative(level, pos);
+        LevelChunk chunk = getChunk(level, vec3d);
+        BlockPos blockposition1 = findValidSpawnInChunk(chunk);
 
-        if (blockpos1 == null) {
-            BlockPos blockpos2 = BlockPos.containing(vec3.x + 0.5D, 75.0D, vec3.z + 0.5D);
+        if (blockposition1 == null) {
+            BlockPos blockposition2 = BlockPos.containing(vec3d.x + 0.5D, 75.0D, vec3d.z + 0.5D);
 
-            TheEndGatewayBlockEntity.LOGGER.debug("Failed to find a suitable block to teleport to, spawning an island on {}", blockpos2);
-            serverlevel.registryAccess().registry(Registries.CONFIGURED_FEATURE).flatMap((registry) -> {
-                return registry.getHolder(EndFeatures.END_ISLAND);
-            }).ifPresent((holder_reference) -> {
-                ((ConfiguredFeature) holder_reference.value()).place(serverlevel, serverlevel.getChunkSource().getGenerator(), RandomSource.create(blockpos2.asLong()), blockpos2);
+            TheEndGatewayBlockEntity.LOGGER.debug("Failed to find a suitable block to teleport to, spawning an island on {}", blockposition2);
+            level.registryAccess().registry(Registries.CONFIGURED_FEATURE).flatMap((iregistry) -> {
+                return iregistry.getHolder(EndFeatures.END_ISLAND);
+            }).ifPresent((holder_c) -> {
+                ((ConfiguredFeature) holder_c.value()).place(level, level.getChunkSource().getGenerator(), RandomSource.create(blockposition2.asLong()), blockposition2);
             });
-            blockpos1 = blockpos2;
+            blockposition1 = blockposition2;
         } else {
-            TheEndGatewayBlockEntity.LOGGER.debug("Found suitable block to teleport to: {}", blockpos1);
+            TheEndGatewayBlockEntity.LOGGER.debug("Found suitable block to teleport to: {}", blockposition1);
         }
 
-        return findTallestBlock(serverlevel, blockpos1, 16, true);
+        return findTallestBlock(level, blockposition1, 16, true);
     }
 
-    private static Vec3 findExitPortalXZPosTentative(ServerLevel serverlevel, BlockPos blockpos) {
-        Vec3 vec3 = (new Vec3((double) blockpos.getX(), 0.0D, (double) blockpos.getZ())).normalize();
+    private static Vec3 findExitPortalXZPosTentative(ServerLevel level, BlockPos pos) {
+        Vec3 vec3d = (new Vec3((double) pos.getX(), 0.0D, (double) pos.getZ())).normalize();
         boolean flag = true;
-        Vec3 vec31 = vec3.scale(1024.0D);
+        Vec3 vec3d1 = vec3d.scale(1024.0D);
 
         int i;
 
-        for (i = 16; !isChunkEmpty(serverlevel, vec31) && i-- > 0; vec31 = vec31.add(vec3.scale(-16.0D))) {
-            TheEndGatewayBlockEntity.LOGGER.debug("Skipping backwards past nonempty chunk at {}", vec31);
+        for (i = 16; !isChunkEmpty(level, vec3d1) && i-- > 0; vec3d1 = vec3d1.add(vec3d.scale(-16.0D))) {
+            TheEndGatewayBlockEntity.LOGGER.debug("Skipping backwards past nonempty chunk at {}", vec3d1);
         }
 
-        for (i = 16; isChunkEmpty(serverlevel, vec31) && i-- > 0; vec31 = vec31.add(vec3.scale(16.0D))) {
-            TheEndGatewayBlockEntity.LOGGER.debug("Skipping forward past empty chunk at {}", vec31);
+        for (i = 16; isChunkEmpty(level, vec3d1) && i-- > 0; vec3d1 = vec3d1.add(vec3d.scale(16.0D))) {
+            TheEndGatewayBlockEntity.LOGGER.debug("Skipping forward past empty chunk at {}", vec3d1);
         }
 
-        TheEndGatewayBlockEntity.LOGGER.debug("Found chunk at {}", vec31);
-        return vec31;
+        TheEndGatewayBlockEntity.LOGGER.debug("Found chunk at {}", vec3d1);
+        return vec3d1;
     }
 
-    private static boolean isChunkEmpty(ServerLevel serverlevel, Vec3 vec3) {
-        return getChunk(serverlevel, vec3).getHighestFilledSectionIndex() == -1;
+    private static boolean isChunkEmpty(ServerLevel level, Vec3 pos) {
+        return getChunk(level, pos).getHighestFilledSectionIndex() == -1;
     }
 
-    private static BlockPos findTallestBlock(BlockGetter blockgetter, BlockPos blockpos, int i, boolean flag) {
-        BlockPos blockpos1 = null;
+    private static BlockPos findTallestBlock(BlockGetter level, BlockPos pos, int radius, boolean allowBedrock) {
+        BlockPos blockposition1 = null;
 
-        for (int j = -i; j <= i; ++j) {
-            for (int k = -i; k <= i; ++k) {
-                if (j != 0 || k != 0 || flag) {
-                    for (int l = blockgetter.getMaxBuildHeight() - 1; l > (blockpos1 == null ? blockgetter.getMinBuildHeight() : blockpos1.getY()); --l) {
-                        BlockPos blockpos2 = new BlockPos(blockpos.getX() + j, l, blockpos.getZ() + k);
-                        BlockState blockstate = blockgetter.getBlockState(blockpos2);
+        for (int j = -radius; j <= radius; ++j) {
+            for (int k = -radius; k <= radius; ++k) {
+                if (j != 0 || k != 0 || allowBedrock) {
+                    for (int l = level.getMaxBuildHeight() - 1; l > (blockposition1 == null ? level.getMinBuildHeight() : blockposition1.getY()); --l) {
+                        BlockPos blockposition2 = new BlockPos(pos.getX() + j, l, pos.getZ() + k);
+                        IBlockData iblockdata = level.getBlockState(blockposition2);
 
-                        if (blockstate.isCollisionShapeFullBlock(blockgetter, blockpos2) && (flag || !blockstate.is(Blocks.BEDROCK))) {
-                            blockpos1 = blockpos2;
+                        if (iblockdata.isCollisionShapeFullBlock(level, blockposition2) && (allowBedrock || !iblockdata.is(Blocks.BEDROCK))) {
+                            blockposition1 = blockposition2;
                             break;
                         }
                     }
@@ -282,68 +309,67 @@
             }
         }
 
-        return blockpos1 == null ? blockpos : blockpos1;
+        return blockposition1 == null ? pos : blockposition1;
     }
 
-    private static LevelChunk getChunk(Level level, Vec3 vec3) {
-        return level.getChunk(Mth.floor(vec3.x / 16.0D), Mth.floor(vec3.z / 16.0D));
+    private static LevelChunk getChunk(Level level, Vec3 pos) {
+        return level.getChunk(Mth.floor(pos.x / 16.0D), Mth.floor(pos.z / 16.0D));
     }
 
     @Nullable
-    private static BlockPos findValidSpawnInChunk(LevelChunk levelchunk) {
-        ChunkPos chunkpos = levelchunk.getPos();
-        BlockPos blockpos = new BlockPos(chunkpos.getMinBlockX(), 30, chunkpos.getMinBlockZ());
-        int i = levelchunk.getHighestSectionPosition() + 16 - 1;
-        BlockPos blockpos1 = new BlockPos(chunkpos.getMaxBlockX(), i, chunkpos.getMaxBlockZ());
-        BlockPos blockpos2 = null;
+    private static BlockPos findValidSpawnInChunk(LevelChunk chunk) {
+        ChunkPos chunkcoordintpair = chunk.getPos();
+        BlockPos blockposition = new BlockPos(chunkcoordintpair.getMinBlockX(), 30, chunkcoordintpair.getMinBlockZ());
+        int i = chunk.getHighestSectionPosition() + 16 - 1;
+        BlockPos blockposition1 = new BlockPos(chunkcoordintpair.getMaxBlockX(), i, chunkcoordintpair.getMaxBlockZ());
+        BlockPos blockposition2 = null;
         double d0 = 0.0D;
-        Iterator iterator = BlockPos.betweenClosed(blockpos, blockpos1).iterator();
+        Iterator iterator = BlockPos.betweenClosed(blockposition, blockposition1).iterator();
 
         while (iterator.hasNext()) {
-            BlockPos blockpos3 = (BlockPos) iterator.next();
-            BlockState blockstate = levelchunk.getBlockState(blockpos3);
-            BlockPos blockpos4 = blockpos3.above();
-            BlockPos blockpos5 = blockpos3.above(2);
+            BlockPos blockposition3 = (BlockPos) iterator.next();
+            IBlockData iblockdata = chunk.getBlockState(blockposition3);
+            BlockPos blockposition4 = blockposition3.above();
+            BlockPos blockposition5 = blockposition3.above(2);
 
-            if (blockstate.is(Blocks.END_STONE) && !levelchunk.getBlockState(blockpos4).isCollisionShapeFullBlock(levelchunk, blockpos4) && !levelchunk.getBlockState(blockpos5).isCollisionShapeFullBlock(levelchunk, blockpos5)) {
-                double d1 = blockpos3.distToCenterSqr(0.0D, 0.0D, 0.0D);
+            if (iblockdata.is(Blocks.END_STONE) && !chunk.getBlockState(blockposition4).isCollisionShapeFullBlock(chunk, blockposition4) && !chunk.getBlockState(blockposition5).isCollisionShapeFullBlock(chunk, blockposition5)) {
+                double d1 = blockposition3.distToCenterSqr(0.0D, 0.0D, 0.0D);
 
-                if (blockpos2 == null || d1 < d0) {
-                    blockpos2 = blockpos3;
+                if (blockposition2 == null || d1 < d0) {
+                    blockposition2 = blockposition3;
                     d0 = d1;
                 }
             }
         }
 
-        return blockpos2;
+        return blockposition2;
     }
 
-    private static void spawnGatewayPortal(ServerLevel serverlevel, BlockPos blockpos, EndGatewayConfiguration endgatewayconfiguration) {
-        Feature.END_GATEWAY.place(endgatewayconfiguration, serverlevel, serverlevel.getChunkSource().getGenerator(), RandomSource.create(), blockpos);
+    private static void spawnGatewayPortal(ServerLevel level, BlockPos pos, EndGatewayConfiguration config) {
+        Feature.END_GATEWAY.place(config, level, level.getChunkSource().getGenerator(), RandomSource.create(), pos);
     }
 
     @Override
-    @Override
-    public boolean shouldRenderFace(Direction direction) {
-        return Block.shouldRenderFace(this.getBlockState(), this.level, this.getBlockPos(), direction, this.getBlockPos().relative(direction));
+    public boolean shouldRenderFace(Direction face) {
+        return Block.shouldRenderFace(this.getBlockState(), this.level, this.getBlockPos(), face, this.getBlockPos().relative(face));
     }
 
     public int getParticleAmount() {
         int i = 0;
-        Direction[] adirection = Direction.values();
-        int j = adirection.length;
+        Direction[] aenumdirection = Direction.values();
+        int j = aenumdirection.length;
 
         for (int k = 0; k < j; ++k) {
-            Direction direction = adirection[k];
+            Direction enumdirection = aenumdirection[k];
 
-            i += this.shouldRenderFace(direction) ? 1 : 0;
+            i += this.shouldRenderFace(enumdirection) ? 1 : 0;
         }
 
         return i;
     }
 
-    public void setExitPosition(BlockPos blockpos, boolean flag) {
-        this.exactTeleport = flag;
-        this.exitPortal = blockpos;
+    public void setExitPosition(BlockPos exitPortal, boolean exactTeleport) {
+        this.exactTeleport = exactTeleport;
+        this.exitPortal = exitPortal;
     }
 }
