--- a/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
@@ -7,66 +7,61 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.world.Container;
+import net.minecraft.world.INamableTileEntity;
+import net.minecraft.world.ITileInventory;
 import net.minecraft.world.LockCode;
-import net.minecraft.world.MenuProvider;
-import net.minecraft.world.Nameable;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.inventory.AbstractContainerMenu;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
-public abstract class BaseContainerBlockEntity extends BlockEntity implements Container, MenuProvider, Nameable {
+public abstract class BaseContainerBlockEntity extends BlockEntity implements Container, ITileInventory, INamableTileEntity {
 
-    private LockCode lockKey;
+    public LockCode lockKey;
     @Nullable
-    private Component name;
+    public Component name;
 
-    protected BaseContainerBlockEntity(BlockEntityType<?> blockentitytype, BlockPos blockpos, BlockState blockstate) {
-        super(blockentitytype, blockpos, blockstate);
+    protected BaseContainerBlockEntity(BlockEntityType<?> type, BlockPos pos, IBlockData blockState) {
+        super(type, pos, blockState);
         this.lockKey = LockCode.NO_LOCK;
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
-        this.lockKey = LockCode.fromTag(compoundtag);
-        if (compoundtag.contains("CustomName", 8)) {
-            this.name = Component.Serializer.fromJson(compoundtag.getString("CustomName"));
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        this.lockKey = LockCode.fromTag(tag);
+        if (tag.contains("CustomName", 8)) {
+            this.name = Component.Serializer.fromJson(tag.getString("CustomName"));
         }
 
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        this.lockKey.addToTag(compoundtag);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        this.lockKey.addToTag(tag);
         if (this.name != null) {
-            compoundtag.putString("CustomName", Component.Serializer.toJson(this.name));
+            tag.putString("CustomName", Component.Serializer.toJson(this.name));
         }
 
     }
 
-    public void setCustomName(Component component) {
-        this.name = component;
+    public void setCustomName(Component name) {
+        this.name = name;
     }
 
     @Override
-    @Override
     public Component getName() {
         return this.name != null ? this.name : this.getDefaultName();
     }
 
     @Override
-    @Override
     public Component getDisplayName() {
         return this.getName();
     }
 
     @Nullable
     @Override
-    @Override
     public Component getCustomName() {
         return this.name;
     }
@@ -77,9 +72,9 @@
         return canUnlock(player, this.lockKey, this.getDisplayName());
     }
 
-    public static boolean canUnlock(Player player, LockCode lockcode, Component component) {
-        if (!player.isSpectator() && !lockcode.unlocksWith(player.getMainHandItem())) {
-            player.displayClientMessage(Component.translatable("container.isLocked", component), true);
+    public static boolean canUnlock(Player player, LockCode code, Component displayName) {
+        if (!player.isSpectator() && !code.unlocksWith(player.getMainHandItem())) {
+            player.displayClientMessage(Component.translatable("container.isLocked", displayName), true);
             player.playNotifySound(SoundEvents.CHEST_LOCKED, SoundSource.BLOCKS, 1.0F, 1.0F);
             return false;
         } else {
@@ -89,10 +84,17 @@
 
     @Nullable
     @Override
-    @Override
-    public AbstractContainerMenu createMenu(int i, Inventory inventory, Player player) {
-        return this.canOpen(player) ? this.createMenu(i, inventory) : null;
+    public AbstractContainerMenu createMenu(int containerId, Inventory playerInventory, Player player) {
+        return this.canOpen(player) ? this.createMenu(containerId, playerInventory) : null;
     }
 
     protected abstract AbstractContainerMenu createMenu(int containerId, Inventory inventory);
+
+    // CraftBukkit start
+    @Override
+    public org.bukkit.Location getLocation() {
+        if (level == null) return null;
+        return new org.bukkit.Location(level.getWorld(), worldPosition.getX(), worldPosition.getY(), worldPosition.getZ());
+    }
+    // CraftBukkit end
 }
