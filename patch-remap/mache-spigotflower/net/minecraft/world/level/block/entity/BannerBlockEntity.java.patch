--- a/net/minecraft/world/level/block/entity/BannerBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BannerBlockEntity.java
@@ -11,15 +11,15 @@
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
-import net.minecraft.world.Nameable;
+import net.minecraft.world.INamableTileEntity;
 import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.DyeColor;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.AbstractBannerBlock;
 import net.minecraft.world.level.block.BannerBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
-public class BannerBlockEntity extends BlockEntity implements Nameable {
+public class BannerBlockEntity extends BlockEntity implements INamableTileEntity {
 
     public static final int MAX_PATTERNS = 6;
     public static final String TAG_PATTERNS = "Patterns";
@@ -27,104 +27,103 @@
     public static final String TAG_COLOR = "Color";
     @Nullable
     private Component name;
-    private DyeColor baseColor;
+    public DyeColor baseColor;
     @Nullable
-    private ListTag itemPatterns;
+    public ListTag itemPatterns;
     @Nullable
     private List<Pair<Holder<BannerPattern>, DyeColor>> patterns;
 
-    public BannerBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.BANNER, blockpos, blockstate);
-        this.baseColor = ((AbstractBannerBlock) blockstate.getBlock()).getColor();
+    public BannerBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.BANNER, pos, blockState);
+        this.baseColor = ((AbstractBannerBlock) blockState.getBlock()).getColor();
     }
 
-    public BannerBlockEntity(BlockPos blockpos, BlockState blockstate, DyeColor dyecolor) {
-        this(blockpos, blockstate);
-        this.baseColor = dyecolor;
+    public BannerBlockEntity(BlockPos pos, IBlockData blockState, DyeColor baseColor) {
+        this(pos, blockState);
+        this.baseColor = baseColor;
     }
 
     @Nullable
-    public static ListTag getItemPatterns(ItemStack itemstack) {
-        ListTag listtag = null;
-        CompoundTag compoundtag = BlockItem.getBlockEntityData(itemstack);
+    public static ListTag getItemPatterns(ItemStack stack) {
+        ListTag nbttaglist = null;
+        CompoundTag nbttagcompound = BlockItem.getBlockEntityData(stack);
 
-        if (compoundtag != null && compoundtag.contains("Patterns", 9)) {
-            listtag = compoundtag.getList("Patterns", 10).copy();
+        if (nbttagcompound != null && nbttagcompound.contains("Patterns", 9)) {
+            nbttaglist = nbttagcompound.getList("Patterns", 10).copy();
         }
 
-        return listtag;
+        return nbttaglist;
     }
 
-    public void fromItem(ItemStack itemstack, DyeColor dyecolor) {
-        this.baseColor = dyecolor;
-        this.fromItem(itemstack);
+    public void fromItem(ItemStack stack, DyeColor color) {
+        this.baseColor = color;
+        this.fromItem(stack);
     }
 
-    public void fromItem(ItemStack itemstack) {
-        this.itemPatterns = getItemPatterns(itemstack);
+    public void fromItem(ItemStack item) {
+        this.itemPatterns = getItemPatterns(item);
         this.patterns = null;
-        this.name = itemstack.hasCustomHoverName() ? itemstack.getHoverName() : null;
+        this.name = item.hasCustomHoverName() ? item.getHoverName() : null;
     }
 
     @Override
-    @Override
     public Component getName() {
         return (Component) (this.name != null ? this.name : Component.translatable("block.minecraft.banner"));
     }
 
     @Nullable
     @Override
-    @Override
     public Component getCustomName() {
         return this.name;
     }
 
-    public void setCustomName(Component component) {
-        this.name = component;
+    public void setCustomName(Component name) {
+        this.name = name;
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
         if (this.itemPatterns != null) {
-            compoundtag.put("Patterns", this.itemPatterns);
+            tag.put("Patterns", this.itemPatterns);
         }
 
         if (this.name != null) {
-            compoundtag.putString("CustomName", Component.Serializer.toJson(this.name));
+            tag.putString("CustomName", Component.Serializer.toJson(this.name));
         }
 
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
-        if (compoundtag.contains("CustomName", 8)) {
-            this.name = Component.Serializer.fromJson(compoundtag.getString("CustomName"));
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        if (tag.contains("CustomName", 8)) {
+            this.name = Component.Serializer.fromJson(tag.getString("CustomName"));
         }
 
-        this.itemPatterns = compoundtag.getList("Patterns", 10);
+        this.itemPatterns = tag.getList("Patterns", 10);
+        // CraftBukkit start
+        while (this.itemPatterns.size() > 20) {
+            this.itemPatterns.remove(20);
+        }
+        // CraftBukkit end
         this.patterns = null;
     }
 
     @Override
-    @Override
     public ClientboundBlockEntityDataPacket getUpdatePacket() {
         return ClientboundBlockEntityDataPacket.create(this);
     }
 
     @Override
-    @Override
     public CompoundTag getUpdateTag() {
         return this.saveWithoutMetadata();
     }
 
-    public static int getPatternCount(ItemStack itemstack) {
-        CompoundTag compoundtag = BlockItem.getBlockEntityData(itemstack);
+    public static int getPatternCount(ItemStack stack) {
+        CompoundTag nbttagcompound = BlockItem.getBlockEntityData(stack);
 
-        return compoundtag != null && compoundtag.contains("Patterns") ? compoundtag.getList("Patterns", 10).size() : 0;
+        return nbttagcompound != null && nbttagcompound.contains("Patterns") ? nbttagcompound.getList("Patterns", 10).size() : 0;
     }
 
     public List<Pair<Holder<BannerPattern>, DyeColor>> getPatterns() {
@@ -135,17 +134,17 @@
         return this.patterns;
     }
 
-    public static List<Pair<Holder<BannerPattern>, DyeColor>> createPatterns(DyeColor dyecolor, @Nullable ListTag listtag) {
+    public static List<Pair<Holder<BannerPattern>, DyeColor>> createPatterns(DyeColor color, @Nullable ListTag listTag) {
         List<Pair<Holder<BannerPattern>, DyeColor>> list = Lists.newArrayList();
 
-        list.add(Pair.of(BuiltInRegistries.BANNER_PATTERN.getHolderOrThrow(BannerPatterns.BASE), dyecolor));
-        if (listtag != null) {
-            for (int i = 0; i < listtag.size(); ++i) {
-                CompoundTag compoundtag = listtag.getCompound(i);
-                Holder<BannerPattern> holder = BannerPattern.byHash(compoundtag.getString("Pattern"));
+        list.add(Pair.of(BuiltInRegistries.BANNER_PATTERN.getHolderOrThrow(BannerPatterns.BASE), color));
+        if (listTag != null) {
+            for (int i = 0; i < listTag.size(); ++i) {
+                CompoundTag nbttagcompound = listTag.getCompound(i);
+                Holder<BannerPattern> holder = BannerPattern.byHash(nbttagcompound.getString("Pattern"));
 
                 if (holder != null) {
-                    int j = compoundtag.getInt("Color");
+                    int j = nbttagcompound.getInt("Color");
 
                     list.add(Pair.of(holder, DyeColor.byId(j)));
                 }
@@ -155,21 +154,21 @@
         return list;
     }
 
-    public static void removeLastPattern(ItemStack itemstack) {
-        CompoundTag compoundtag = BlockItem.getBlockEntityData(itemstack);
+    public static void removeLastPattern(ItemStack stack) {
+        CompoundTag nbttagcompound = BlockItem.getBlockEntityData(stack);
 
-        if (compoundtag != null && compoundtag.contains("Patterns", 9)) {
-            ListTag listtag = compoundtag.getList("Patterns", 10);
+        if (nbttagcompound != null && nbttagcompound.contains("Patterns", 9)) {
+            ListTag nbttaglist = nbttagcompound.getList("Patterns", 10);
 
-            if (!listtag.isEmpty()) {
-                listtag.remove(listtag.size() - 1);
-                if (listtag.isEmpty()) {
-                    compoundtag.remove("Patterns");
+            if (!nbttaglist.isEmpty()) {
+                nbttaglist.remove(nbttaglist.size() - 1);
+                if (nbttaglist.isEmpty()) {
+                    nbttagcompound.remove("Patterns");
                 }
             }
 
-            compoundtag.remove("id");
-            BlockItem.setBlockEntityData(itemstack, BlockEntityType.BANNER, compoundtag);
+            nbttagcompound.remove("id");
+            BlockItem.setBlockEntityData(stack, BlockEntityType.BANNER, nbttagcompound);
         }
     }
 
@@ -177,10 +176,10 @@
         ItemStack itemstack = new ItemStack(BannerBlock.byColor(this.baseColor));
 
         if (this.itemPatterns != null && !this.itemPatterns.isEmpty()) {
-            CompoundTag compoundtag = new CompoundTag();
+            CompoundTag nbttagcompound = new CompoundTag();
 
-            compoundtag.put("Patterns", this.itemPatterns.copy());
-            BlockItem.setBlockEntityData(itemstack, this.getType(), compoundtag);
+            nbttagcompound.put("Patterns", this.itemPatterns.copy());
+            BlockItem.setBlockEntityData(itemstack, this.getType(), nbttagcompound);
         }
 
         if (this.name != null) {
