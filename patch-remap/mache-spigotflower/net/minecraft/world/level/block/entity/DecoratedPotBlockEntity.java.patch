--- a/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java
@@ -17,49 +17,98 @@
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.ticks.ContainerSingleItem;
 
+// CraftBukkit start
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class DecoratedPotBlockEntity extends BlockEntity implements RandomizableContainer, ContainerSingleItem {
 
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new ArrayList<>();
+    private int maxStack = MAX_STACK;
+
+    @Override
+    public List<ItemStack> getContents() {
+        return Arrays.asList(this.item);
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+       return maxStack;
+    }
+
+    @Override
+    public void setMaxStackSize(int i) {
+        maxStack = i;
+    }
+
+    @Override
+    public Location getLocation() {
+        if (level == null) return null;
+        return CraftLocation.toBukkit(worldPosition, level.getWorld());
+    }
+    // CraftBukkit end
+
     public static final String TAG_SHERDS = "sherds";
     public static final String TAG_ITEM = "item";
     public static final int EVENT_POT_WOBBLES = 1;
     public long wobbleStartedAtTick;
     @Nullable
-    public DecoratedPotBlockEntity.WobbleStyle lastWobbleStyle;
-    private DecoratedPotBlockEntity.Decorations decorations;
+    public DecoratedPotBlockEntity.b lastWobbleStyle;
+    public DecoratedPotBlockEntity.Decorations decorations;
     private ItemStack item;
     @Nullable
     protected ResourceLocation lootTable;
     protected long lootTableSeed;
 
-    public DecoratedPotBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.DECORATED_POT, blockpos, blockstate);
+    public DecoratedPotBlockEntity(BlockPos pos, IBlockData state) {
+        super(BlockEntityType.DECORATED_POT, pos, state);
         this.item = ItemStack.EMPTY;
         this.decorations = DecoratedPotBlockEntity.Decorations.EMPTY;
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        this.decorations.save(compoundtag);
-        if (!this.trySaveLootTable(compoundtag) && !this.item.isEmpty()) {
-            compoundtag.put("item", this.item.save(new CompoundTag()));
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        this.decorations.save(tag);
+        if (!this.trySaveLootTable(tag) && !this.item.isEmpty()) {
+            tag.put("item", this.item.save(new CompoundTag()));
         }
 
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
-        this.decorations = DecoratedPotBlockEntity.Decorations.load(compoundtag);
-        if (!this.tryLoadLootTable(compoundtag)) {
-            if (compoundtag.contains("item", 10)) {
-                this.item = ItemStack.of(compoundtag.getCompound("item"));
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        this.decorations = DecoratedPotBlockEntity.Decorations.load(tag);
+        if (!this.tryLoadLootTable(tag)) {
+            if (tag.contains("item", 10)) {
+                this.item = ItemStack.of(tag.getCompound("item"));
             } else {
                 this.item = ItemStack.EMPTY;
             }
@@ -68,13 +117,11 @@
     }
 
     @Override
-    @Override
     public ClientboundBlockEntityDataPacket getUpdatePacket() {
         return ClientboundBlockEntityDataPacket.create(this);
     }
 
     @Override
-    @Override
     public CompoundTag getUpdateTag() {
         return this.saveWithoutMetadata();
     }
@@ -87,56 +134,50 @@
         return this.decorations;
     }
 
-    public void setFromItem(ItemStack itemstack) {
-        this.decorations = DecoratedPotBlockEntity.Decorations.load(BlockItem.getBlockEntityData(itemstack));
+    public void setFromItem(ItemStack item) {
+        this.decorations = DecoratedPotBlockEntity.Decorations.load(BlockItem.getBlockEntityData(item));
     }
 
     public ItemStack getPotAsItem() {
         return createDecoratedPotItem(this.decorations);
     }
 
-    public static ItemStack createDecoratedPotItem(DecoratedPotBlockEntity.Decorations decoratedpotblockentity_decorations) {
+    public static ItemStack createDecoratedPotItem(DecoratedPotBlockEntity.Decorations decoratedpotblockentity_decoration) {
         ItemStack itemstack = Items.DECORATED_POT.getDefaultInstance();
-        CompoundTag compoundtag = decoratedpotblockentity_decorations.save(new CompoundTag());
+        CompoundTag nbttagcompound = decoratedpotblockentity_decoration.save(new CompoundTag());
 
-        BlockItem.setBlockEntityData(itemstack, BlockEntityType.DECORATED_POT, compoundtag);
+        BlockItem.setBlockEntityData(itemstack, BlockEntityType.DECORATED_POT, nbttagcompound);
         return itemstack;
     }
 
     @Nullable
     @Override
-    @Override
     public ResourceLocation getLootTable() {
         return this.lootTable;
     }
 
     @Override
-    @Override
-    public void setLootTable(@Nullable ResourceLocation resourcelocation) {
-        this.lootTable = resourcelocation;
+    public void setLootTable(@Nullable ResourceLocation minecraftkey) {
+        this.lootTable = minecraftkey;
     }
 
     @Override
-    @Override
     public long getLootTableSeed() {
         return this.lootTableSeed;
     }
 
     @Override
-    @Override
     public void setLootTableSeed(long i) {
         this.lootTableSeed = i;
     }
 
     @Override
-    @Override
     public ItemStack getTheItem() {
         this.unpackLootTable((Player) null);
         return this.item;
     }
 
     @Override
-    @Override
     public ItemStack splitTheItem(int i) {
         this.unpackLootTable((Player) null);
         ItemStack itemstack = this.item.split(i);
@@ -149,33 +190,30 @@
     }
 
     @Override
-    @Override
     public void setTheItem(ItemStack itemstack) {
         this.unpackLootTable((Player) null);
         this.item = itemstack;
     }
 
     @Override
-    @Override
     public BlockEntity getContainerBlockEntity() {
         return this;
     }
 
-    public void wobble(DecoratedPotBlockEntity.WobbleStyle decoratedpotblockentity_wobblestyle) {
+    public void wobble(DecoratedPotBlockEntity.b decoratedpotblockentity_b) {
         if (this.level != null && !this.level.isClientSide()) {
-            this.level.blockEvent(this.getBlockPos(), this.getBlockState().getBlock(), 1, decoratedpotblockentity_wobblestyle.ordinal());
+            this.level.blockEvent(this.getBlockPos(), this.getBlockState().getBlock(), 1, decoratedpotblockentity_b.ordinal());
         }
     }
 
     @Override
-    @Override
-    public boolean triggerEvent(int i, int j) {
-        if (this.level != null && i == 1 && j >= 0 && j < DecoratedPotBlockEntity.WobbleStyle.values().length) {
+    public boolean triggerEvent(int id, int type) {
+        if (this.level != null && id == 1 && type >= 0 && type < DecoratedPotBlockEntity.b.values().length) {
             this.wobbleStartedAtTick = this.level.getGameTime();
-            this.lastWobbleStyle = DecoratedPotBlockEntity.WobbleStyle.values()[j];
+            this.lastWobbleStyle = DecoratedPotBlockEntity.b.values()[type];
             return true;
         } else {
-            return super.triggerEvent(i, j);
+            return super.triggerEvent(id, type);
         }
     }
 
@@ -183,17 +221,17 @@
 
         public static final DecoratedPotBlockEntity.Decorations EMPTY = new DecoratedPotBlockEntity.Decorations(Items.BRICK, Items.BRICK, Items.BRICK, Items.BRICK);
 
-        public CompoundTag save(CompoundTag compoundtag) {
+        public CompoundTag save(CompoundTag tag) {
             if (this.equals(DecoratedPotBlockEntity.Decorations.EMPTY)) {
-                return compoundtag;
+                return tag;
             } else {
-                ListTag listtag = new ListTag();
+                ListTag nbttaglist = new ListTag();
 
                 this.sorted().forEach((item) -> {
-                    listtag.add(StringTag.valueOf(BuiltInRegistries.ITEM.getKey(item).toString()));
+                    nbttaglist.add(StringTag.valueOf(BuiltInRegistries.ITEM.getKey(item).toString()));
                 });
-                compoundtag.put("sherds", listtag);
-                return compoundtag;
+                tag.put("sherds", nbttaglist);
+                return tag;
             }
         }
 
@@ -201,34 +239,34 @@
             return Stream.of(this.back, this.left, this.right, this.front);
         }
 
-        public static DecoratedPotBlockEntity.Decorations load(@Nullable CompoundTag compoundtag) {
-            if (compoundtag != null && compoundtag.contains("sherds", 9)) {
-                ListTag listtag = compoundtag.getList("sherds", 8);
+        public static DecoratedPotBlockEntity.Decorations load(@Nullable CompoundTag tag) {
+            if (tag != null && tag.contains("sherds", 9)) {
+                ListTag nbttaglist = tag.getList("sherds", 8);
 
-                return new DecoratedPotBlockEntity.Decorations(itemFromTag(listtag, 0), itemFromTag(listtag, 1), itemFromTag(listtag, 2), itemFromTag(listtag, 3));
+                return new DecoratedPotBlockEntity.Decorations(itemFromTag(nbttaglist, 0), itemFromTag(nbttaglist, 1), itemFromTag(nbttaglist, 2), itemFromTag(nbttaglist, 3));
             } else {
                 return DecoratedPotBlockEntity.Decorations.EMPTY;
             }
         }
 
-        private static Item itemFromTag(ListTag listtag, int i) {
-            if (i >= listtag.size()) {
+        private static Item itemFromTag(ListTag tag, int index) {
+            if (index >= tag.size()) {
                 return Items.BRICK;
             } else {
-                Tag tag = listtag.get(i);
+                Tag nbtbase = tag.get(index);
 
-                return (Item) BuiltInRegistries.ITEM.get(ResourceLocation.tryParse(tag.getAsString()));
+                return (Item) BuiltInRegistries.ITEM.get(ResourceLocation.tryParse(nbtbase.getAsString()));
             }
         }
     }
 
-    public static enum WobbleStyle {
+    public static enum b {
 
         POSITIVE(7), NEGATIVE(10);
 
         public final int duration;
 
-        private WobbleStyle(int i) {
+        private b(int i) {
             this.duration = i;
         }
     }
