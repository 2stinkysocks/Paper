--- a/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -23,8 +23,22 @@
 import net.minecraft.world.item.alchemy.PotionBrewing;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.BrewingStandBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
+// CraftBukkit start
+import java.util.ArrayList;
+import java.util.List;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.block.BrewingStartEvent;
+import org.bukkit.event.inventory.BrewEvent;
+import org.bukkit.event.inventory.BrewingStandFuelEvent;
+import org.bukkit.inventory.InventoryHolder;
+// CraftBukkit end
+
 public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer {
 
     private static final int INGREDIENT_SLOT = 3;
@@ -37,20 +51,49 @@
     public static final int DATA_FUEL_USES = 1;
     public static final int NUM_DATA_VALUES = 2;
     private NonNullList<ItemStack> items;
-    int brewTime;
+    public int brewTime;
     private boolean[] lastPotionCount;
     private Item ingredient;
-    int fuel;
+    public int fuel;
     protected final ContainerData dataAccess;
+    // CraftBukkit start - add fields and methods
+    private int lastTick = MinecraftServer.currentTick;
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = 64;
 
-    public BrewingStandBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.BREWING_STAND, blockpos, blockstate);
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+    public BrewingStandBlockEntity(BlockPos pos, IBlockData state) {
+        super(BlockEntityType.BREWING_STAND, pos, state);
         this.items = NonNullList.withSize(5, ItemStack.EMPTY);
         this.dataAccess = new ContainerData() {
             @Override
-            @Override
-            public int get(int i) {
-                switch (i) {
+            public int get(int index) {
+                switch (index) {
                     case 0:
                         return BrewingStandBlockEntity.this.brewTime;
                     case 1:
@@ -61,20 +104,18 @@
             }
 
             @Override
-            @Override
-            public void set(int i, int j) {
-                switch (i) {
+            public void set(int index, int value) {
+                switch (index) {
                     case 0:
-                        BrewingStandBlockEntity.this.brewTime = j;
+                        BrewingStandBlockEntity.this.brewTime = value;
                         break;
                     case 1:
-                        BrewingStandBlockEntity.this.fuel = j;
+                        BrewingStandBlockEntity.this.fuel = value;
                 }
 
             }
 
             @Override
-            @Override
             public int getCount() {
                 return 2;
             }
@@ -82,19 +123,16 @@
     }
 
     @Override
-    @Override
     protected Component getDefaultName() {
         return Component.translatable("container.brewing");
     }
 
     @Override
-    @Override
     public int getContainerSize() {
         return this.items.size();
     }
 
     @Override
-    @Override
     public boolean isEmpty() {
         Iterator iterator = this.items.iterator();
 
@@ -111,52 +149,72 @@
         return false;
     }
 
-    public static void serverTick(Level level, BlockPos blockpos, BlockState blockstate, BrewingStandBlockEntity brewingstandblockentity) {
-        ItemStack itemstack = (ItemStack) brewingstandblockentity.items.get(4);
+    public static void serverTick(Level level, BlockPos pos, IBlockData state, BrewingStandBlockEntity blockEntity) {
+        ItemStack itemstack = (ItemStack) blockEntity.items.get(4);
 
-        if (brewingstandblockentity.fuel <= 0 && itemstack.is(Items.BLAZE_POWDER)) {
-            brewingstandblockentity.fuel = 20;
-            itemstack.shrink(1);
-            setChanged(level, blockpos, blockstate);
+        if (blockEntity.fuel <= 0 && itemstack.is(Items.BLAZE_POWDER)) {
+            // CraftBukkit start
+            BrewingStandFuelEvent event = new BrewingStandFuelEvent(CraftBlock.at(level, pos), CraftItemStack.asCraftMirror(itemstack), 20);
+            level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                return;
+            }
+
+            blockEntity.fuel = event.getFuelPower();
+            if (blockEntity.fuel > 0 && event.isConsuming()) {
+                itemstack.shrink(1);
+            }
+            // CraftBukkit end
+            setChanged(level, pos, state);
         }
 
-        boolean flag = isBrewable(brewingstandblockentity.items);
-        boolean flag1 = brewingstandblockentity.brewTime > 0;
-        ItemStack itemstack1 = (ItemStack) brewingstandblockentity.items.get(3);
+        boolean flag = isBrewable(blockEntity.items);
+        boolean flag1 = blockEntity.brewTime > 0;
+        ItemStack itemstack1 = (ItemStack) blockEntity.items.get(3);
 
+        // CraftBukkit start - Use wall time instead of ticks for brewing
+        int elapsedTicks = MinecraftServer.currentTick - blockEntity.lastTick;
+        blockEntity.lastTick = MinecraftServer.currentTick;
+
         if (flag1) {
-            --brewingstandblockentity.brewTime;
-            boolean flag2 = brewingstandblockentity.brewTime == 0;
+            blockEntity.brewTime -= elapsedTicks;
+            boolean flag2 = blockEntity.brewTime <= 0; // == -> <=
+            // CraftBukkit end
 
             if (flag2 && flag) {
-                doBrew(level, blockpos, brewingstandblockentity.items);
-                setChanged(level, blockpos, blockstate);
-            } else if (!flag || !itemstack1.is(brewingstandblockentity.ingredient)) {
-                brewingstandblockentity.brewTime = 0;
-                setChanged(level, blockpos, blockstate);
+                doBrew(level, pos, blockEntity.items, blockEntity); // CraftBukkit
+                setChanged(level, pos, state);
+            } else if (!flag || !itemstack1.is(blockEntity.ingredient)) {
+                blockEntity.brewTime = 0;
+                setChanged(level, pos, state);
             }
-        } else if (flag && brewingstandblockentity.fuel > 0) {
-            --brewingstandblockentity.fuel;
-            brewingstandblockentity.brewTime = 400;
-            brewingstandblockentity.ingredient = itemstack1.getItem();
-            setChanged(level, blockpos, blockstate);
+        } else if (flag && blockEntity.fuel > 0) {
+            --blockEntity.fuel;
+            // CraftBukkit start
+            BrewingStartEvent event = new BrewingStartEvent(CraftBlock.at(level, pos), CraftItemStack.asCraftMirror(itemstack1), 400);
+            level.getCraftServer().getPluginManager().callEvent(event);
+            blockEntity.brewTime = event.getTotalBrewTime(); // 400 -> event.getTotalBrewTime()
+            // CraftBukkit end
+            blockEntity.ingredient = itemstack1.getItem();
+            setChanged(level, pos, state);
         }
 
-        boolean[] aboolean = brewingstandblockentity.getPotionBits();
+        boolean[] aboolean = blockEntity.getPotionBits();
 
-        if (!Arrays.equals(aboolean, brewingstandblockentity.lastPotionCount)) {
-            brewingstandblockentity.lastPotionCount = aboolean;
-            BlockState blockstate1 = blockstate;
+        if (!Arrays.equals(aboolean, blockEntity.lastPotionCount)) {
+            blockEntity.lastPotionCount = aboolean;
+            IBlockData iblockdata1 = state;
 
-            if (!(blockstate.getBlock() instanceof BrewingStandBlock)) {
+            if (!(state.getBlock() instanceof BrewingStandBlock)) {
                 return;
             }
 
             for (int i = 0; i < BrewingStandBlock.HAS_BOTTLE.length; ++i) {
-                blockstate1 = (BlockState) blockstate1.setValue(BrewingStandBlock.HAS_BOTTLE[i], aboolean[i]);
+                iblockdata1 = (IBlockData) iblockdata1.setValue(BrewingStandBlock.HAS_BOTTLE[i], aboolean[i]);
             }
 
-            level.setBlock(blockpos, blockstate1, 2);
+            level.setBlock(pos, iblockdata1, 2);
         }
 
     }
@@ -173,8 +231,8 @@
         return aboolean;
     }
 
-    private static boolean isBrewable(NonNullList<ItemStack> nonnulllist) {
-        ItemStack itemstack = (ItemStack) nonnulllist.get(3);
+    private static boolean isBrewable(NonNullList<ItemStack> items) {
+        ItemStack itemstack = (ItemStack) items.get(3);
 
         if (itemstack.isEmpty()) {
             return false;
@@ -182,7 +240,7 @@
             return false;
         } else {
             for (int i = 0; i < 3; ++i) {
-                ItemStack itemstack1 = (ItemStack) nonnulllist.get(i);
+                ItemStack itemstack1 = (ItemStack) items.get(i);
 
                 if (!itemstack1.isEmpty() && PotionBrewing.hasMix(itemstack1, itemstack)) {
                     return true;
@@ -193,13 +251,35 @@
         }
     }
 
-    private static void doBrew(Level level, BlockPos blockpos, NonNullList<ItemStack> nonnulllist) {
+    // CraftBukkit start
+    private static void doBrew(Level world, BlockPos blockposition, NonNullList<ItemStack> nonnulllist, BrewingStandBlockEntity tileentitybrewingstand) {
         ItemStack itemstack = (ItemStack) nonnulllist.get(3);
+        InventoryHolder owner = tileentitybrewingstand.getOwner();
+        List<org.bukkit.inventory.ItemStack> brewResults = new ArrayList<>(3);
 
         for (int i = 0; i < 3; ++i) {
-            nonnulllist.set(i, PotionBrewing.mix(itemstack, (ItemStack) nonnulllist.get(i)));
+            brewResults.add(i, CraftItemStack.asCraftMirror(PotionBrewing.mix(itemstack, (ItemStack) nonnulllist.get(i))));
         }
 
+        if (owner != null) {
+            BrewEvent event = new BrewEvent(CraftBlock.at(world, blockposition), (org.bukkit.inventory.BrewerInventory) owner.getInventory(), brewResults, tileentitybrewingstand.fuel);
+            org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return;
+            }
+        }
+        // CraftBukkit end
+
+        for (int i = 0; i < 3; ++i) {
+            // CraftBukkit start - validate index in case it is cleared by plugins
+            if (i < brewResults.size()) {
+                nonnulllist.set(i, CraftItemStack.asNMSCopy(brewResults.get(i)));
+            } else {
+                nonnulllist.set(i, ItemStack.EMPTY);
+            }
+            // CraftBukkit end
+        }
+
         itemstack.shrink(1);
         if (itemstack.getItem().hasCraftingRemainingItem()) {
             ItemStack itemstack1 = new ItemStack(itemstack.getItem().getCraftingRemainingItem());
@@ -207,99 +287,86 @@
             if (itemstack.isEmpty()) {
                 itemstack = itemstack1;
             } else {
-                Containers.dropItemStack(level, (double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ(), itemstack1);
+                Containers.dropItemStack(world, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), itemstack1);
             }
         }
 
         nonnulllist.set(3, itemstack);
-        level.levelEvent(1035, blockpos, 0);
+        world.levelEvent(1035, blockposition, 0);
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
+    public void load(CompoundTag tag) {
+        super.load(tag);
         this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
-        ContainerHelper.loadAllItems(compoundtag, this.items);
-        this.brewTime = compoundtag.getShort("BrewTime");
-        this.fuel = compoundtag.getByte("Fuel");
+        ContainerHelper.loadAllItems(tag, this.items);
+        this.brewTime = tag.getShort("BrewTime");
+        this.fuel = tag.getByte("Fuel");
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        compoundtag.putShort("BrewTime", (short) this.brewTime);
-        ContainerHelper.saveAllItems(compoundtag, this.items);
-        compoundtag.putByte("Fuel", (byte) this.fuel);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        tag.putShort("BrewTime", (short) this.brewTime);
+        ContainerHelper.saveAllItems(tag, this.items);
+        tag.putByte("Fuel", (byte) this.fuel);
     }
 
     @Override
-    @Override
-    public ItemStack getItem(int i) {
-        return i >= 0 && i < this.items.size() ? (ItemStack) this.items.get(i) : ItemStack.EMPTY;
+    public ItemStack getItem(int index) {
+        return index >= 0 && index < this.items.size() ? (ItemStack) this.items.get(index) : ItemStack.EMPTY;
     }
 
     @Override
-    @Override
-    public ItemStack removeItem(int i, int j) {
-        return ContainerHelper.removeItem(this.items, i, j);
+    public ItemStack removeItem(int index, int count) {
+        return ContainerHelper.removeItem(this.items, index, count);
     }
 
     @Override
-    @Override
-    public ItemStack removeItemNoUpdate(int i) {
-        return ContainerHelper.takeItem(this.items, i);
+    public ItemStack removeItemNoUpdate(int index) {
+        return ContainerHelper.takeItem(this.items, index);
     }
 
     @Override
-    @Override
-    public void setItem(int i, ItemStack itemstack) {
-        if (i >= 0 && i < this.items.size()) {
-            this.items.set(i, itemstack);
+    public void setItem(int index, ItemStack stack) {
+        if (index >= 0 && index < this.items.size()) {
+            this.items.set(index, stack);
         }
 
     }
 
     @Override
-    @Override
     public boolean stillValid(Player player) {
         return Container.stillValidBlockEntity(this, player);
     }
 
     @Override
-    @Override
-    public boolean canPlaceItem(int i, ItemStack itemstack) {
-        return i == 3 ? PotionBrewing.isIngredient(itemstack) : (i == 4 ? itemstack.is(Items.BLAZE_POWDER) : (itemstack.is(Items.POTION) || itemstack.is(Items.SPLASH_POTION) || itemstack.is(Items.LINGERING_POTION) || itemstack.is(Items.GLASS_BOTTLE)) && this.getItem(i).isEmpty());
+    public boolean canPlaceItem(int index, ItemStack stack) {
+        return index == 3 ? PotionBrewing.isIngredient(stack) : (index == 4 ? stack.is(Items.BLAZE_POWDER) : (stack.is(Items.POTION) || stack.is(Items.SPLASH_POTION) || stack.is(Items.LINGERING_POTION) || stack.is(Items.GLASS_BOTTLE)) && this.getItem(index).isEmpty());
     }
 
     @Override
-    @Override
-    public int[] getSlotsForFace(Direction direction) {
-        return direction == Direction.UP ? BrewingStandBlockEntity.SLOTS_FOR_UP : (direction == Direction.DOWN ? BrewingStandBlockEntity.SLOTS_FOR_DOWN : BrewingStandBlockEntity.SLOTS_FOR_SIDES);
+    public int[] getSlotsForFace(Direction side) {
+        return side == Direction.UP ? BrewingStandBlockEntity.SLOTS_FOR_UP : (side == Direction.DOWN ? BrewingStandBlockEntity.SLOTS_FOR_DOWN : BrewingStandBlockEntity.SLOTS_FOR_SIDES);
     }
 
     @Override
-    @Override
-    public boolean canPlaceItemThroughFace(int i, ItemStack itemstack, @Nullable Direction direction) {
-        return this.canPlaceItem(i, itemstack);
+    public boolean canPlaceItemThroughFace(int index, ItemStack itemStack, @Nullable Direction direction) {
+        return this.canPlaceItem(index, itemStack);
     }
 
     @Override
-    @Override
-    public boolean canTakeItemThroughFace(int i, ItemStack itemstack, Direction direction) {
-        return i == 3 ? itemstack.is(Items.GLASS_BOTTLE) : true;
+    public boolean canTakeItemThroughFace(int index, ItemStack stack, Direction direction) {
+        return index == 3 ? stack.is(Items.GLASS_BOTTLE) : true;
     }
 
     @Override
-    @Override
     public void clearContent() {
         this.items.clear();
     }
 
     @Override
-    @Override
-    protected AbstractContainerMenu createMenu(int i, Inventory inventory) {
-        return new BrewingStandMenu(i, inventory, this, this.dataAccess);
+    protected AbstractContainerMenu createMenu(int id, Inventory player) {
+        return new BrewingStandMenu(id, player, this, this.dataAccess);
     }
 }
