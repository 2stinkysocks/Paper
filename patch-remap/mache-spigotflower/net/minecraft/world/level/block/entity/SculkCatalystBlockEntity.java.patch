--- a/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
@@ -18,41 +18,42 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.SculkCatalystBlock;
 import net.minecraft.world.level.block.SculkSpreader;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.BlockPositionSource;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.gameevent.GameEventListener;
 import net.minecraft.world.level.gameevent.PositionSource;
 import net.minecraft.world.phys.Vec3;
 
-public class SculkCatalystBlockEntity extends BlockEntity implements GameEventListener.Holder<SculkCatalystBlockEntity.CatalystListener> {
+public class SculkCatalystBlockEntity extends BlockEntity implements GameEventListener.b<SculkCatalystBlockEntity.CatalystListener> {
 
     private final SculkCatalystBlockEntity.CatalystListener catalystListener;
 
-    public SculkCatalystBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.SCULK_CATALYST, blockpos, blockstate);
-        this.catalystListener = new SculkCatalystBlockEntity.CatalystListener(blockstate, new BlockPositionSource(blockpos));
+    public SculkCatalystBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.SCULK_CATALYST, pos, blockState);
+        this.catalystListener = new SculkCatalystBlockEntity.CatalystListener(blockState, new BlockPositionSource(pos));
+        catalystListener.level = level; // CraftBukkit
     }
 
-    public static void serverTick(Level level, BlockPos blockpos, BlockState blockstate, SculkCatalystBlockEntity sculkcatalystblockentity) {
-        sculkcatalystblockentity.catalystListener.getSculkSpreader().updateCursors(level, blockpos, level.getRandom(), true);
+    public static void serverTick(Level level, BlockPos pos, IBlockData state, SculkCatalystBlockEntity sculkCatalyst) {
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = sculkCatalyst.getBlockPos(); // CraftBukkit - SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
+        sculkCatalyst.catalystListener.getSculkSpreader().updateCursors(level, pos, level.getRandom(), true);
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = null; // CraftBukkit
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        this.catalystListener.sculkSpreader.load(compoundtag);
+    public void load(CompoundTag tag) {
+        super.load(tag); // CraftBukkit - SPIGOT-7393: Load super Bukkit data
+        this.catalystListener.sculkSpreader.load(tag);
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        this.catalystListener.sculkSpreader.save(compoundtag);
-        super.saveAdditional(compoundtag);
+    protected void saveAdditional(CompoundTag tag) {
+        this.catalystListener.sculkSpreader.save(tag);
+        super.saveAdditional(tag);
     }
 
     @Override
-    @Override
     public SculkCatalystBlockEntity.CatalystListener getListener() {
         return this.catalystListener;
     }
@@ -61,53 +62,51 @@
 
         public static final int PULSE_TICKS = 8;
         final SculkSpreader sculkSpreader;
-        private final BlockState blockState;
+        private final IBlockData blockState;
         private final PositionSource positionSource;
+        private Level level; // CraftBukkit
 
-        public CatalystListener(BlockState blockstate, PositionSource positionsource) {
-            this.blockState = blockstate;
-            this.positionSource = positionsource;
+        public CatalystListener(IBlockData blockState, PositionSource positionSource) {
+            this.blockState = blockState;
+            this.positionSource = positionSource;
             this.sculkSpreader = SculkSpreader.createLevelSpreader();
+            this.sculkSpreader.level = level; // CraftBukkit
         }
 
         @Override
-        @Override
         public PositionSource getListenerSource() {
             return this.positionSource;
         }
 
         @Override
-        @Override
         public int getListenerRadius() {
             return 8;
         }
 
         @Override
-        @Override
-        public GameEventListener.DeliveryMode getDeliveryMode() {
-            return GameEventListener.DeliveryMode.BY_DISTANCE;
+        public GameEventListener.a getDeliveryMode() {
+            return GameEventListener.a.BY_DISTANCE;
         }
 
         @Override
-        @Override
-        public boolean handleGameEvent(ServerLevel serverlevel, GameEvent gameevent, GameEvent.Context gameevent_context, Vec3 vec3) {
-            if (gameevent == GameEvent.ENTITY_DIE) {
-                Entity entity = gameevent_context.sourceEntity();
+        public boolean handleGameEvent(ServerLevel level, GameEvent gameEvent, GameEvent.Context context, Vec3 pos) {
+            if (gameEvent == GameEvent.ENTITY_DIE) {
+                Entity entity = context.sourceEntity();
 
                 if (entity instanceof LivingEntity) {
-                    LivingEntity livingentity = (LivingEntity) entity;
+                    LivingEntity entityliving = (LivingEntity) entity;
 
-                    if (!livingentity.wasExperienceConsumed()) {
-                        int i = livingentity.getExperienceReward();
+                    if (!entityliving.wasExperienceConsumed()) {
+                        int i = entityliving.getExperienceReward();
 
-                        if (livingentity.shouldDropExperience() && i > 0) {
-                            this.sculkSpreader.addCursors(BlockPos.containing(vec3.relative(Direction.UP, 0.5D)), i);
-                            this.tryAwardItSpreadsAdvancement(serverlevel, livingentity);
+                        if (entityliving.shouldDropExperience() && i > 0) {
+                            this.sculkSpreader.addCursors(BlockPos.containing(pos.relative(Direction.UP, 0.5D)), i);
+                            this.tryAwardItSpreadsAdvancement(level, entityliving);
                         }
 
-                        livingentity.skipDropExperience();
-                        this.positionSource.getPosition(serverlevel).ifPresent((vec31) -> {
-                            this.bloom(serverlevel, BlockPos.containing(vec31), this.blockState, serverlevel.getRandom());
+                        entityliving.skipDropExperience();
+                        this.positionSource.getPosition(level).ifPresent((vec3d1) -> {
+                            this.bloom(level, BlockPos.containing(vec3d1), this.blockState, level.getRandom());
                         });
                     }
 
@@ -123,21 +122,21 @@
             return this.sculkSpreader;
         }
 
-        private void bloom(ServerLevel serverlevel, BlockPos blockpos, BlockState blockstate, RandomSource randomsource) {
-            serverlevel.setBlock(blockpos, (BlockState) blockstate.setValue(SculkCatalystBlock.PULSE, true), 3);
-            serverlevel.scheduleTick(blockpos, blockstate.getBlock(), 8);
-            serverlevel.sendParticles(ParticleTypes.SCULK_SOUL, (double) blockpos.getX() + 0.5D, (double) blockpos.getY() + 1.15D, (double) blockpos.getZ() + 0.5D, 2, 0.2D, 0.0D, 0.2D, 0.0D);
-            serverlevel.playSound((Player) null, blockpos, SoundEvents.SCULK_CATALYST_BLOOM, SoundSource.BLOCKS, 2.0F, 0.6F + randomsource.nextFloat() * 0.4F);
+        public void bloom(ServerLevel level, BlockPos pos, IBlockData state, RandomSource random) {
+            level.setBlock(pos, (IBlockData) state.setValue(SculkCatalystBlock.PULSE, true), 3);
+            level.scheduleTick(pos, state.getBlock(), 8);
+            level.sendParticles(ParticleTypes.SCULK_SOUL, (double) pos.getX() + 0.5D, (double) pos.getY() + 1.15D, (double) pos.getZ() + 0.5D, 2, 0.2D, 0.0D, 0.2D, 0.0D);
+            level.playSound((Player) null, pos, SoundEvents.SCULK_CATALYST_BLOOM, SoundSource.BLOCKS, 2.0F, 0.6F + random.nextFloat() * 0.4F);
         }
 
-        private void tryAwardItSpreadsAdvancement(Level level, LivingEntity livingentity) {
-            LivingEntity livingentity1 = livingentity.getLastHurtByMob();
+        private void tryAwardItSpreadsAdvancement(Level level, LivingEntity entity) {
+            LivingEntity entityliving1 = entity.getLastHurtByMob();
 
-            if (livingentity1 instanceof ServerPlayer) {
-                ServerPlayer serverplayer = (ServerPlayer) livingentity1;
-                DamageSource damagesource = livingentity.getLastDamageSource() == null ? level.damageSources().playerAttack(serverplayer) : livingentity.getLastDamageSource();
+            if (entityliving1 instanceof ServerPlayer) {
+                ServerPlayer entityplayer = (ServerPlayer) entityliving1;
+                DamageSource damagesource = entity.getLastDamageSource() == null ? level.damageSources().playerAttack(entityplayer) : entity.getLastDamageSource();
 
-                CriteriaTriggers.KILL_MOB_NEAR_SCULK_CATALYST.trigger(serverplayer, livingentity, damagesource);
+                CriteriaTriggers.KILL_MOB_NEAR_SCULK_CATALYST.trigger(entityplayer, entity, damagesource);
             }
 
         }
