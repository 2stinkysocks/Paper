--- a/net/minecraft/world/level/block/entity/BeaconBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BeaconBlockEntity.java
@@ -20,9 +20,9 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.world.INamableTileEntity;
+import net.minecraft.world.ITileInventory;
 import net.minecraft.world.LockCode;
-import net.minecraft.world.MenuProvider;
-import net.minecraft.world.Nameable;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
@@ -33,14 +33,18 @@
 import net.minecraft.world.inventory.ContainerData;
 import net.minecraft.world.inventory.ContainerLevelAccess;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.BeaconBeamBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.IBeaconBeam;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.phys.AABB;
+// CraftBukkit start
+import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.potion.PotionEffect;
+// CraftBukkit end
 
-public class BeaconBlockEntity extends BlockEntity implements MenuProvider, Nameable {
+public class BeaconBlockEntity extends BlockEntity implements ITileInventory, INamableTileEntity {
 
     private static final int MAX_LEVELS = 4;
     public static final MobEffect[][] BEACON_EFFECTS = new MobEffect[][]{{MobEffects.MOVEMENT_SPEED, MobEffects.DIG_SPEED}, {MobEffects.DAMAGE_RESISTANCE, MobEffects.JUMP}, {MobEffects.DAMAGE_BOOST}, {MobEffects.REGENERATION}};
@@ -55,32 +59,40 @@
     private static final String TAG_SECONDARY = "secondary_effect";
     List<BeaconBlockEntity.BeaconBeamSection> beamSections = Lists.newArrayList();
     private List<BeaconBlockEntity.BeaconBeamSection> checkingBeamSections = Lists.newArrayList();
-    int levels;
+    public int levels;
     private int lastCheckY;
     @Nullable
-    MobEffect primaryPower;
+    public MobEffect primaryPower;
     @Nullable
-    MobEffect secondaryPower;
+    public MobEffect secondaryPower;
     @Nullable
-    private Component name;
-    private LockCode lockKey;
+    public Component name;
+    public LockCode lockKey;
     private final ContainerData dataAccess;
+    // CraftBukkit start - add fields and methods
+    public PotionEffect getPrimaryEffect() {
+        return (this.primaryPower != null) ? CraftPotionUtil.toBukkit(new MobEffectInstance(this.primaryPower, getLevel(this.levels), getAmplification(levels, primaryPower, secondaryPower), true, true)) : null;
+    }
 
+    public PotionEffect getSecondaryEffect() {
+        return (hasSecondaryEffect(levels, primaryPower, secondaryPower)) ? CraftPotionUtil.toBukkit(new MobEffectInstance(this.secondaryPower, getLevel(this.levels), getAmplification(levels, primaryPower, secondaryPower), true, true)) : null;
+    }
+    // CraftBukkit end
+
     @Nullable
-    static MobEffect filterEffect(@Nullable MobEffect mobeffect) {
-        return BeaconBlockEntity.VALID_EFFECTS.contains(mobeffect) ? mobeffect : null;
+    static MobEffect filterEffect(@Nullable MobEffect mobeffectlist) {
+        return BeaconBlockEntity.VALID_EFFECTS.contains(mobeffectlist) ? mobeffectlist : null;
     }
 
-    public BeaconBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.BEACON, blockpos, blockstate);
+    public BeaconBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.BEACON, pos, blockState);
         this.lockKey = LockCode.NO_LOCK;
         this.dataAccess = new ContainerData() {
             @Override
-            @Override
-            public int get(int i) {
+            public int get(int index) {
                 int j;
 
-                switch (i) {
+                switch (index) {
                     case 0:
                         j = BeaconBlockEntity.this.levels;
                         break;
@@ -98,126 +110,124 @@
             }
 
             @Override
-            @Override
-            public void set(int i, int j) {
-                switch (i) {
+            public void set(int index, int value) {
+                switch (index) {
                     case 0:
-                        BeaconBlockEntity.this.levels = j;
+                        BeaconBlockEntity.this.levels = value;
                         break;
                     case 1:
                         if (!BeaconBlockEntity.this.level.isClientSide && !BeaconBlockEntity.this.beamSections.isEmpty()) {
                             BeaconBlockEntity.playSound(BeaconBlockEntity.this.level, BeaconBlockEntity.this.worldPosition, SoundEvents.BEACON_POWER_SELECT);
                         }
 
-                        BeaconBlockEntity.this.primaryPower = BeaconBlockEntity.filterEffect(BeaconMenu.decodeEffect(j));
+                        BeaconBlockEntity.this.primaryPower = BeaconBlockEntity.filterEffect(BeaconMenu.decodeEffect(value));
                         break;
                     case 2:
-                        BeaconBlockEntity.this.secondaryPower = BeaconBlockEntity.filterEffect(BeaconMenu.decodeEffect(j));
+                        BeaconBlockEntity.this.secondaryPower = BeaconBlockEntity.filterEffect(BeaconMenu.decodeEffect(value));
                 }
 
             }
 
             @Override
-            @Override
             public int getCount() {
                 return 3;
             }
         };
     }
 
-    public static void tick(Level level, BlockPos blockpos, BlockState blockstate, BeaconBlockEntity beaconblockentity) {
-        int i = blockpos.getX();
-        int j = blockpos.getY();
-        int k = blockpos.getZ();
-        BlockPos blockpos1;
+    public static void tick(Level level, BlockPos pos, IBlockData state, BeaconBlockEntity blockEntity) {
+        int i = pos.getX();
+        int j = pos.getY();
+        int k = pos.getZ();
+        BlockPos blockposition1;
 
-        if (beaconblockentity.lastCheckY < j) {
-            blockpos1 = blockpos;
-            beaconblockentity.checkingBeamSections = Lists.newArrayList();
-            beaconblockentity.lastCheckY = blockpos.getY() - 1;
+        if (blockEntity.lastCheckY < j) {
+            blockposition1 = pos;
+            blockEntity.checkingBeamSections = Lists.newArrayList();
+            blockEntity.lastCheckY = pos.getY() - 1;
         } else {
-            blockpos1 = new BlockPos(i, beaconblockentity.lastCheckY + 1, k);
+            blockposition1 = new BlockPos(i, blockEntity.lastCheckY + 1, k);
         }
 
-        BeaconBlockEntity.BeaconBeamSection beaconblockentity_beaconbeamsection = beaconblockentity.checkingBeamSections.isEmpty() ? null : (BeaconBlockEntity.BeaconBeamSection) beaconblockentity.checkingBeamSections.get(beaconblockentity.checkingBeamSections.size() - 1);
+        BeaconBlockEntity.BeaconBeamSection tileentitybeacon_beaconcolortracker = blockEntity.checkingBeamSections.isEmpty() ? null : (BeaconBlockEntity.BeaconBeamSection) blockEntity.checkingBeamSections.get(blockEntity.checkingBeamSections.size() - 1);
         int l = level.getHeight(Heightmap.Types.WORLD_SURFACE, i, k);
 
         int i1;
 
-        for (i1 = 0; i1 < 10 && blockpos1.getY() <= l; ++i1) {
-            BlockState blockstate1 = level.getBlockState(blockpos1);
-            Block block = blockstate1.getBlock();
+        for (i1 = 0; i1 < 10 && blockposition1.getY() <= l; ++i1) {
+            IBlockData iblockdata1 = level.getBlockState(blockposition1);
+            Block block = iblockdata1.getBlock();
 
-            if (block instanceof BeaconBeamBlock) {
-                float[] afloat = ((BeaconBeamBlock) block).getColor().getTextureDiffuseColors();
+            if (block instanceof IBeaconBeam) {
+                float[] afloat = ((IBeaconBeam) block).getColor().getTextureDiffuseColors();
 
-                if (beaconblockentity.checkingBeamSections.size() <= 1) {
-                    beaconblockentity_beaconbeamsection = new BeaconBlockEntity.BeaconBeamSection(afloat);
-                    beaconblockentity.checkingBeamSections.add(beaconblockentity_beaconbeamsection);
-                } else if (beaconblockentity_beaconbeamsection != null) {
-                    if (Arrays.equals(afloat, beaconblockentity_beaconbeamsection.color)) {
-                        beaconblockentity_beaconbeamsection.increaseHeight();
+                if (blockEntity.checkingBeamSections.size() <= 1) {
+                    tileentitybeacon_beaconcolortracker = new BeaconBlockEntity.BeaconBeamSection(afloat);
+                    blockEntity.checkingBeamSections.add(tileentitybeacon_beaconcolortracker);
+                } else if (tileentitybeacon_beaconcolortracker != null) {
+                    if (Arrays.equals(afloat, tileentitybeacon_beaconcolortracker.color)) {
+                        tileentitybeacon_beaconcolortracker.increaseHeight();
                     } else {
-                        beaconblockentity_beaconbeamsection = new BeaconBlockEntity.BeaconBeamSection(new float[]{(beaconblockentity_beaconbeamsection.color[0] + afloat[0]) / 2.0F, (beaconblockentity_beaconbeamsection.color[1] + afloat[1]) / 2.0F, (beaconblockentity_beaconbeamsection.color[2] + afloat[2]) / 2.0F});
-                        beaconblockentity.checkingBeamSections.add(beaconblockentity_beaconbeamsection);
+                        tileentitybeacon_beaconcolortracker = new BeaconBlockEntity.BeaconBeamSection(new float[]{(tileentitybeacon_beaconcolortracker.color[0] + afloat[0]) / 2.0F, (tileentitybeacon_beaconcolortracker.color[1] + afloat[1]) / 2.0F, (tileentitybeacon_beaconcolortracker.color[2] + afloat[2]) / 2.0F});
+                        blockEntity.checkingBeamSections.add(tileentitybeacon_beaconcolortracker);
                     }
                 }
             } else {
-                if (beaconblockentity_beaconbeamsection == null || blockstate1.getLightBlock(level, blockpos1) >= 15 && !blockstate1.is(Blocks.BEDROCK)) {
-                    beaconblockentity.checkingBeamSections.clear();
-                    beaconblockentity.lastCheckY = l;
+                if (tileentitybeacon_beaconcolortracker == null || iblockdata1.getLightBlock(level, blockposition1) >= 15 && !iblockdata1.is(Blocks.BEDROCK)) {
+                    blockEntity.checkingBeamSections.clear();
+                    blockEntity.lastCheckY = l;
                     break;
                 }
 
-                beaconblockentity_beaconbeamsection.increaseHeight();
+                tileentitybeacon_beaconcolortracker.increaseHeight();
             }
 
-            blockpos1 = blockpos1.above();
-            ++beaconblockentity.lastCheckY;
+            blockposition1 = blockposition1.above();
+            ++blockEntity.lastCheckY;
         }
 
-        i1 = beaconblockentity.levels;
+        i1 = blockEntity.levels;
         if (level.getGameTime() % 80L == 0L) {
-            if (!beaconblockentity.beamSections.isEmpty()) {
-                beaconblockentity.levels = updateBase(level, i, j, k);
+            if (!blockEntity.beamSections.isEmpty()) {
+                blockEntity.levels = updateBase(level, i, j, k);
             }
 
-            if (beaconblockentity.levels > 0 && !beaconblockentity.beamSections.isEmpty()) {
-                applyEffects(level, blockpos, beaconblockentity.levels, beaconblockentity.primaryPower, beaconblockentity.secondaryPower);
-                playSound(level, blockpos, SoundEvents.BEACON_AMBIENT);
+            if (blockEntity.levels > 0 && !blockEntity.beamSections.isEmpty()) {
+                applyEffects(level, pos, blockEntity.levels, blockEntity.primaryPower, blockEntity.secondaryPower);
+                playSound(level, pos, SoundEvents.BEACON_AMBIENT);
             }
         }
 
-        if (beaconblockentity.lastCheckY >= l) {
-            beaconblockentity.lastCheckY = level.getMinBuildHeight() - 1;
+        if (blockEntity.lastCheckY >= l) {
+            blockEntity.lastCheckY = level.getMinBuildHeight() - 1;
             boolean flag = i1 > 0;
 
-            beaconblockentity.beamSections = beaconblockentity.checkingBeamSections;
+            blockEntity.beamSections = blockEntity.checkingBeamSections;
             if (!level.isClientSide) {
-                boolean flag1 = beaconblockentity.levels > 0;
+                boolean flag1 = blockEntity.levels > 0;
 
                 if (!flag && flag1) {
-                    playSound(level, blockpos, SoundEvents.BEACON_ACTIVATE);
+                    playSound(level, pos, SoundEvents.BEACON_ACTIVATE);
                     Iterator iterator = level.getEntitiesOfClass(ServerPlayer.class, (new AABB((double) i, (double) j, (double) k, (double) i, (double) (j - 4), (double) k)).inflate(10.0D, 5.0D, 10.0D)).iterator();
 
                     while (iterator.hasNext()) {
-                        ServerPlayer serverplayer = (ServerPlayer) iterator.next();
+                        ServerPlayer entityplayer = (ServerPlayer) iterator.next();
 
-                        CriteriaTriggers.CONSTRUCT_BEACON.trigger(serverplayer, beaconblockentity.levels);
+                        CriteriaTriggers.CONSTRUCT_BEACON.trigger(entityplayer, blockEntity.levels);
                     }
                 } else if (flag && !flag1) {
-                    playSound(level, blockpos, SoundEvents.BEACON_DEACTIVATE);
+                    playSound(level, pos, SoundEvents.BEACON_DEACTIVATE);
                 }
             }
         }
 
     }
 
-    private static int updateBase(Level level, int i, int j, int k) {
+    private static int updateBase(Level level, int x, int y, int z) {
         int l = 0;
 
         for (int i1 = 1; i1 <= 4; l = i1++) {
-            int j1 = j - i1;
+            int j1 = y - i1;
 
             if (j1 < level.getMinBuildHeight()) {
                 break;
@@ -225,8 +235,8 @@
 
             boolean flag = true;
 
-            for (int k1 = i - i1; k1 <= i + i1 && flag; ++k1) {
-                for (int l1 = k - i1; l1 <= k + i1; ++l1) {
+            for (int k1 = x - i1; k1 <= x + i1 && flag; ++k1) {
+                for (int l1 = z - i1; l1 <= z + i1; ++l1) {
                     if (!level.getBlockState(new BlockPos(k1, j1, l1)).is(BlockTags.BEACON_BASE_BLOCKS)) {
                         flag = false;
                         break;
@@ -243,146 +253,176 @@
     }
 
     @Override
-    @Override
     public void setRemoved() {
         playSound(this.level, this.worldPosition, SoundEvents.BEACON_DEACTIVATE);
         super.setRemoved();
     }
 
-    private static void applyEffects(Level level, BlockPos blockpos, int i, @Nullable MobEffect mobeffect, @Nullable MobEffect mobeffect1) {
-        if (!level.isClientSide && mobeffect != null) {
-            double d0 = (double) (i * 10 + 10);
+    // CraftBukkit start - split into components
+    private static byte getAmplification(int i, @Nullable MobEffect mobeffectlist, @Nullable MobEffect mobeffectlist1) {
+        {
             byte b0 = 0;
 
-            if (i >= 4 && mobeffect == mobeffect1) {
+            if (i >= 4 && mobeffectlist == mobeffectlist1) {
                 b0 = 1;
             }
 
+            return b0;
+        }
+    }
+
+    private static int getLevel(int i) {
+        {
             int j = (9 + i * 2) * 20;
-            AABB aabb = (new AABB(blockpos)).inflate(d0).expandTowards(0.0D, (double) level.getHeight(), 0.0D);
-            List<Player> list = level.getEntitiesOfClass(Player.class, aabb);
+            return j;
+        }
+    }
+
+    public static List getHumansInRange(Level world, BlockPos blockposition, int i) {
+        {
+            double d0 = (double) (i * 10 + 10);
+
+            AABB axisalignedbb = (new AABB(blockposition)).inflate(d0).expandTowards(0.0D, (double) world.getHeight(), 0.0D);
+            List<Player> list = world.getEntitiesOfClass(Player.class, axisalignedbb);
+
+            return list;
+        }
+    }
+
+    private static void applyEffect(List list, MobEffect mobeffectlist, int j, int b0) {
+        {
             Iterator iterator = list.iterator();
 
-            Player player;
+            Player entityhuman;
 
             while (iterator.hasNext()) {
-                player = (Player) iterator.next();
-                player.addEffect(new MobEffectInstance(mobeffect, j, b0, true, true));
+                entityhuman = (Player) iterator.next();
+                entityhuman.addEffect(new MobEffectInstance(mobeffectlist, j, b0, true, true), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.BEACON);
             }
+        }
+    }
 
-            if (i >= 4 && mobeffect != mobeffect1 && mobeffect1 != null) {
-                iterator = list.iterator();
-
-                while (iterator.hasNext()) {
-                    player = (Player) iterator.next();
-                    player.addEffect(new MobEffectInstance(mobeffect1, j, 0, true, true));
-                }
+    private static boolean hasSecondaryEffect(int i, @Nullable MobEffect mobeffectlist, @Nullable MobEffect mobeffectlist1) {
+        {
+            if (i >= 4 && mobeffectlist != mobeffectlist1 && mobeffectlist1 != null) {
+                return true;
             }
 
+            return false;
         }
     }
 
-    public static void playSound(Level level, BlockPos blockpos, SoundEvent soundevent) {
-        level.playSound((Player) null, blockpos, soundevent, SoundSource.BLOCKS, 1.0F, 1.0F);
+    private static void applyEffects(Level level, BlockPos pos, int levels, @Nullable MobEffect primary, @Nullable MobEffect secondary) {
+        if (!level.isClientSide && primary != null) {
+            double d0 = (double) (levels * 10 + 10);
+            byte b0 = getAmplification(levels, primary, secondary);
+
+            int j = getLevel(levels);
+            List list = getHumansInRange(level, pos, levels);
+
+            applyEffect(list, primary, j, b0);
+
+            if (hasSecondaryEffect(levels, primary, secondary)) {
+                applyEffect(list, secondary, j, 0);
+            }
+        }
+
     }
+    // CraftBukkit end
 
+    public static void playSound(Level level, BlockPos pos, SoundEvent sound) {
+        level.playSound((Player) null, pos, sound, SoundSource.BLOCKS, 1.0F, 1.0F);
+    }
+
     public List<BeaconBlockEntity.BeaconBeamSection> getBeamSections() {
         return (List) (this.levels == 0 ? ImmutableList.of() : this.beamSections);
     }
 
     @Override
-    @Override
     public ClientboundBlockEntityDataPacket getUpdatePacket() {
         return ClientboundBlockEntityDataPacket.create(this);
     }
 
     @Override
-    @Override
     public CompoundTag getUpdateTag() {
         return this.saveWithoutMetadata();
     }
 
-    private static void storeEffect(CompoundTag compoundtag, String s, @Nullable MobEffect mobeffect) {
-        if (mobeffect != null) {
-            ResourceLocation resourcelocation = BuiltInRegistries.MOB_EFFECT.getKey(mobeffect);
+    private static void storeEffect(CompoundTag nbttagcompound, String s, @Nullable MobEffect mobeffectlist) {
+        if (mobeffectlist != null) {
+            ResourceLocation minecraftkey = BuiltInRegistries.MOB_EFFECT.getKey(mobeffectlist);
 
-            if (resourcelocation != null) {
-                compoundtag.putString(s, resourcelocation.toString());
+            if (minecraftkey != null) {
+                nbttagcompound.putString(s, minecraftkey.toString());
             }
         }
 
     }
 
     @Nullable
-    private static MobEffect loadEffect(CompoundTag compoundtag, String s) {
-        if (compoundtag.contains(s, 8)) {
-            ResourceLocation resourcelocation = ResourceLocation.tryParse(compoundtag.getString(s));
+    private static MobEffect loadEffect(CompoundTag nbttagcompound, String s) {
+        if (nbttagcompound.contains(s, 8)) {
+            ResourceLocation minecraftkey = ResourceLocation.tryParse(nbttagcompound.getString(s));
 
-            return filterEffect((MobEffect) BuiltInRegistries.MOB_EFFECT.get(resourcelocation));
+            return (MobEffect) BuiltInRegistries.MOB_EFFECT.get(minecraftkey); // CraftBukkit - persist manually set non-default beacon effects (SPIGOT-3598)
         } else {
             return null;
         }
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
-        this.primaryPower = loadEffect(compoundtag, "primary_effect");
-        this.secondaryPower = loadEffect(compoundtag, "secondary_effect");
-        if (compoundtag.contains("CustomName", 8)) {
-            this.name = Component.Serializer.fromJson(compoundtag.getString("CustomName"));
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        this.primaryPower = loadEffect(tag, "primary_effect");
+        this.secondaryPower = loadEffect(tag, "secondary_effect");
+        this.levels = tag.getInt("Levels"); // CraftBukkit - SPIGOT-5053, use where available
+        if (tag.contains("CustomName", 8)) {
+            this.name = Component.Serializer.fromJson(tag.getString("CustomName"));
         }
 
-        this.lockKey = LockCode.fromTag(compoundtag);
+        this.lockKey = LockCode.fromTag(tag);
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        storeEffect(compoundtag, "primary_effect", this.primaryPower);
-        storeEffect(compoundtag, "secondary_effect", this.secondaryPower);
-        compoundtag.putInt("Levels", this.levels);
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        storeEffect(tag, "primary_effect", this.primaryPower);
+        storeEffect(tag, "secondary_effect", this.secondaryPower);
+        tag.putInt("Levels", this.levels);
         if (this.name != null) {
-            compoundtag.putString("CustomName", Component.Serializer.toJson(this.name));
+            tag.putString("CustomName", Component.Serializer.toJson(this.name));
         }
 
-        this.lockKey.addToTag(compoundtag);
+        this.lockKey.addToTag(tag);
     }
 
-    public void setCustomName(@Nullable Component component) {
-        this.name = component;
+    public void setCustomName(@Nullable Component name) {
+        this.name = name;
     }
 
     @Nullable
     @Override
-    @Override
     public Component getCustomName() {
         return this.name;
     }
 
     @Nullable
     @Override
-    @Override
-    public AbstractContainerMenu createMenu(int i, Inventory inventory, Player player) {
-        return BaseContainerBlockEntity.canUnlock(player, this.lockKey, this.getDisplayName()) ? new BeaconMenu(i, inventory, this.dataAccess, ContainerLevelAccess.create(this.level, this.getBlockPos())) : null;
+    public AbstractContainerMenu createMenu(int containerId, Inventory playerInventory, Player player) {
+        return BaseContainerBlockEntity.canUnlock(player, this.lockKey, this.getDisplayName()) ? new BeaconMenu(containerId, playerInventory, this.dataAccess, ContainerLevelAccess.create(this.level, this.getBlockPos())) : null;
     }
 
     @Override
-    @Override
     public Component getDisplayName() {
         return this.getName();
     }
 
     @Override
-    @Override
     public Component getName() {
         return this.name != null ? this.name : BeaconBlockEntity.DEFAULT_NAME;
     }
 
     @Override
-    @Override
     public void setLevel(Level level) {
         super.setLevel(level);
         this.lastCheckY = level.getMinBuildHeight() - 1;
@@ -393,8 +433,8 @@
         final float[] color;
         private int height;
 
-        public BeaconBeamSection(float[] afloat) {
-            this.color = afloat;
+        public BeaconBeamSection(float[] color) {
+            this.color = color;
             this.height = 1;
         }
 
