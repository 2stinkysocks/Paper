--- a/net/minecraft/world/level/block/entity/CommandBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/CommandBlockEntity.java
@@ -10,7 +10,7 @@
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.CommandBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 
@@ -20,74 +20,72 @@
     private boolean auto;
     private boolean conditionMet;
     private final BaseCommandBlock commandBlock = new BaseCommandBlock() {
+        // CraftBukkit start
         @Override
+        public org.bukkit.command.CommandSender getBukkitSender(CommandSourceStack wrapper) {
+            return new org.bukkit.craftbukkit.command.CraftBlockCommandSender(wrapper, CommandBlockEntity.this);
+        }
+        // CraftBukkit end
+
         @Override
-        public void setCommand(String s) {
-            super.setCommand(s);
+        public void setCommand(String command) {
+            super.setCommand(command);
             CommandBlockEntity.this.setChanged();
         }
 
         @Override
-        @Override
         public ServerLevel getLevel() {
             return (ServerLevel) CommandBlockEntity.this.level;
         }
 
         @Override
-        @Override
         public void onUpdated() {
-            BlockState blockstate = CommandBlockEntity.this.level.getBlockState(CommandBlockEntity.this.worldPosition);
+            IBlockData iblockdata = CommandBlockEntity.this.level.getBlockState(CommandBlockEntity.this.worldPosition);
 
-            this.getLevel().sendBlockUpdated(CommandBlockEntity.this.worldPosition, blockstate, blockstate, 3);
+            this.getLevel().sendBlockUpdated(CommandBlockEntity.this.worldPosition, iblockdata, iblockdata, 3);
         }
 
         @Override
-        @Override
         public Vec3 getPosition() {
             return Vec3.atCenterOf(CommandBlockEntity.this.worldPosition);
         }
 
         @Override
-        @Override
         public CommandSourceStack createCommandSourceStack() {
-            Direction direction = (Direction) CommandBlockEntity.this.getBlockState().getValue(CommandBlock.FACING);
+            Direction enumdirection = (Direction) CommandBlockEntity.this.getBlockState().getValue(CommandBlock.FACING);
 
-            return new CommandSourceStack(this, Vec3.atCenterOf(CommandBlockEntity.this.worldPosition), new Vec2(0.0F, direction.toYRot()), this.getLevel(), 2, this.getName().getString(), this.getName(), this.getLevel().getServer(), (Entity) null);
+            return new CommandSourceStack(this, Vec3.atCenterOf(CommandBlockEntity.this.worldPosition), new Vec2(0.0F, enumdirection.toYRot()), this.getLevel(), 2, this.getName().getString(), this.getName(), this.getLevel().getServer(), (Entity) null);
         }
 
         @Override
-        @Override
         public boolean isValid() {
             return !CommandBlockEntity.this.isRemoved();
         }
     };
 
-    public CommandBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        super(BlockEntityType.COMMAND_BLOCK, blockpos, blockstate);
+    public CommandBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.COMMAND_BLOCK, pos, blockState);
     }
 
     @Override
-    @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
-        this.commandBlock.save(compoundtag);
-        compoundtag.putBoolean("powered", this.isPowered());
-        compoundtag.putBoolean("conditionMet", this.wasConditionMet());
-        compoundtag.putBoolean("auto", this.isAutomatic());
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
+        this.commandBlock.save(tag);
+        tag.putBoolean("powered", this.isPowered());
+        tag.putBoolean("conditionMet", this.wasConditionMet());
+        tag.putBoolean("auto", this.isAutomatic());
     }
 
     @Override
-    @Override
-    public void load(CompoundTag compoundtag) {
-        super.load(compoundtag);
-        this.commandBlock.load(compoundtag);
-        this.powered = compoundtag.getBoolean("powered");
-        this.conditionMet = compoundtag.getBoolean("conditionMet");
-        this.setAutomatic(compoundtag.getBoolean("auto"));
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        this.commandBlock.load(tag);
+        this.powered = tag.getBoolean("powered");
+        this.conditionMet = tag.getBoolean("conditionMet");
+        this.setAutomatic(tag.getBoolean("auto"));
     }
 
     @Override
-    @Override
     public boolean onlyOpCanSetNbt() {
         return true;
     }
@@ -96,8 +94,8 @@
         return this.commandBlock;
     }
 
-    public void setPowered(boolean flag) {
-        this.powered = flag;
+    public void setPowered(boolean powered) {
+        this.powered = powered;
     }
 
     public boolean isPowered() {
@@ -108,20 +106,20 @@
         return this.auto;
     }
 
-    public void setAutomatic(boolean flag) {
+    public void setAutomatic(boolean auto) {
         boolean flag1 = this.auto;
 
-        this.auto = flag;
-        if (!flag1 && flag && !this.powered && this.level != null && this.getMode() != CommandBlockEntity.Mode.SEQUENCE) {
+        this.auto = auto;
+        if (!flag1 && auto && !this.powered && this.level != null && this.getMode() != CommandBlockEntity.Type.SEQUENCE) {
             this.scheduleTick();
         }
 
     }
 
     public void onModeSwitch() {
-        CommandBlockEntity.Mode commandblockentity_mode = this.getMode();
+        CommandBlockEntity.Type tileentitycommand_type = this.getMode();
 
-        if (commandblockentity_mode == CommandBlockEntity.Mode.AUTO && (this.powered || this.auto) && this.level != null) {
+        if (tileentitycommand_type == CommandBlockEntity.Type.AUTO && (this.powered || this.auto) && this.level != null) {
             this.scheduleTick();
         }
 
@@ -144,12 +142,12 @@
     public boolean markConditionMet() {
         this.conditionMet = true;
         if (this.isConditional()) {
-            BlockPos blockpos = this.worldPosition.relative(((Direction) this.level.getBlockState(this.worldPosition).getValue(CommandBlock.FACING)).getOpposite());
+            BlockPos blockposition = this.worldPosition.relative(((Direction) this.level.getBlockState(this.worldPosition).getValue(CommandBlock.FACING)).getOpposite());
 
-            if (this.level.getBlockState(blockpos).getBlock() instanceof CommandBlock) {
-                BlockEntity blockentity = this.level.getBlockEntity(blockpos);
+            if (this.level.getBlockState(blockposition).getBlock() instanceof CommandBlock) {
+                BlockEntity tileentity = this.level.getBlockEntity(blockposition);
 
-                this.conditionMet = blockentity instanceof CommandBlockEntity && ((CommandBlockEntity) blockentity).getCommandBlock().getSuccessCount() > 0;
+                this.conditionMet = tileentity instanceof CommandBlockEntity && ((CommandBlockEntity) tileentity).getCommandBlock().getSuccessCount() > 0;
             } else {
                 this.conditionMet = false;
             }
@@ -158,22 +156,22 @@
         return this.conditionMet;
     }
 
-    public CommandBlockEntity.Mode getMode() {
-        BlockState blockstate = this.getBlockState();
+    public CommandBlockEntity.Type getMode() {
+        IBlockData iblockdata = this.getBlockState();
 
-        return blockstate.is(Blocks.COMMAND_BLOCK) ? CommandBlockEntity.Mode.REDSTONE : (blockstate.is(Blocks.REPEATING_COMMAND_BLOCK) ? CommandBlockEntity.Mode.AUTO : (blockstate.is(Blocks.CHAIN_COMMAND_BLOCK) ? CommandBlockEntity.Mode.SEQUENCE : CommandBlockEntity.Mode.REDSTONE));
+        return iblockdata.is(Blocks.COMMAND_BLOCK) ? CommandBlockEntity.Type.REDSTONE : (iblockdata.is(Blocks.REPEATING_COMMAND_BLOCK) ? CommandBlockEntity.Type.AUTO : (iblockdata.is(Blocks.CHAIN_COMMAND_BLOCK) ? CommandBlockEntity.Type.SEQUENCE : CommandBlockEntity.Type.REDSTONE));
     }
 
     public boolean isConditional() {
-        BlockState blockstate = this.level.getBlockState(this.getBlockPos());
+        IBlockData iblockdata = this.level.getBlockState(this.getBlockPos());
 
-        return blockstate.getBlock() instanceof CommandBlock ? (Boolean) blockstate.getValue(CommandBlock.CONDITIONAL) : false;
+        return iblockdata.getBlock() instanceof CommandBlock ? (Boolean) iblockdata.getValue(CommandBlock.CONDITIONAL) : false;
     }
 
-    public static enum Mode {
+    public static enum Type {
 
         SEQUENCE, AUTO, REDSTONE;
 
-        private Mode() {}
+        private Type() {}
     }
 }
