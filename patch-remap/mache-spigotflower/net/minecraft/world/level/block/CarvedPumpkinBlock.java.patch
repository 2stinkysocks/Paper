--- a/net/minecraft/world/level/block/CarvedPumpkinBlock.java
+++ b/net/minecraft/world/level/block/CarvedPumpkinBlock.java
@@ -16,13 +16,16 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import net.minecraft.world.level.block.state.pattern.BlockPattern;
 import net.minecraft.world.level.block.state.pattern.BlockPatternBuilder;
 import net.minecraft.world.level.block.state.predicate.BlockStatePredicate;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
+// CraftBukkit start
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+// CraftBukkit end
 
 public class CarvedPumpkinBlock extends HorizontalDirectionalBlock {
 
@@ -36,105 +39,106 @@
     private BlockPattern ironGolemBase;
     @Nullable
     private BlockPattern ironGolemFull;
-    private static final Predicate<BlockState> PUMPKINS_PREDICATE = (blockstate) -> {
-        return blockstate != null && (blockstate.is(Blocks.CARVED_PUMPKIN) || blockstate.is(Blocks.JACK_O_LANTERN));
+    private static final Predicate<IBlockData> PUMPKINS_PREDICATE = (iblockdata) -> {
+        return iblockdata != null && (iblockdata.is(Blocks.CARVED_PUMPKIN) || iblockdata.is(Blocks.JACK_O_LANTERN));
     };
 
     @Override
-    @Override
     public MapCodec<? extends CarvedPumpkinBlock> codec() {
         return CarvedPumpkinBlock.CODEC;
     }
 
-    protected CarvedPumpkinBlock(BlockBehaviour.Properties blockbehaviour_properties) {
-        super(blockbehaviour_properties);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CarvedPumpkinBlock.FACING, Direction.NORTH));
+    protected CarvedPumpkinBlock(BlockBehaviour.Properties properties) {
+        super(properties);
+        this.registerDefaultState((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(CarvedPumpkinBlock.FACING, Direction.NORTH));
     }
 
     @Override
-    @Override
-    public void onPlace(BlockState blockstate, Level level, BlockPos blockpos, BlockState blockstate1, boolean flag) {
-        if (!blockstate1.is(blockstate.getBlock())) {
-            this.trySpawnGolem(level, blockpos);
+    public void onPlace(IBlockData state, Level level, BlockPos pos, IBlockData oldState, boolean isMoving) {
+        if (!oldState.is(state.getBlock())) {
+            this.trySpawnGolem(level, pos);
         }
     }
 
-    public boolean canSpawnGolem(LevelReader levelreader, BlockPos blockpos) {
-        return this.getOrCreateSnowGolemBase().find(levelreader, blockpos) != null || this.getOrCreateIronGolemBase().find(levelreader, blockpos) != null;
+    public boolean canSpawnGolem(LevelReader level, BlockPos pos) {
+        return this.getOrCreateSnowGolemBase().find(level, pos) != null || this.getOrCreateIronGolemBase().find(level, pos) != null;
     }
 
-    private void trySpawnGolem(Level level, BlockPos blockpos) {
-        BlockPattern.BlockPatternMatch blockpattern_blockpatternmatch = this.getOrCreateSnowGolemFull().find(level, blockpos);
+    private void trySpawnGolem(Level level, BlockPos pos) {
+        BlockPattern.BlockPatternMatch shapedetector_shapedetectorcollection = this.getOrCreateSnowGolemFull().find(level, pos);
 
-        if (blockpattern_blockpatternmatch != null) {
-            SnowGolem snowgolem = (SnowGolem) EntityType.SNOW_GOLEM.create(level);
+        if (shapedetector_shapedetectorcollection != null) {
+            SnowGolem entitysnowman = (SnowGolem) EntityType.SNOW_GOLEM.create(level);
 
-            if (snowgolem != null) {
-                spawnGolemInWorld(level, blockpattern_blockpatternmatch, snowgolem, blockpattern_blockpatternmatch.getBlock(0, 2, 0).getPos());
+            if (entitysnowman != null) {
+                spawnGolemInWorld(level, shapedetector_shapedetectorcollection, entitysnowman, shapedetector_shapedetectorcollection.getBlock(0, 2, 0).getPos());
             }
         } else {
-            BlockPattern.BlockPatternMatch blockpattern_blockpatternmatch1 = this.getOrCreateIronGolemFull().find(level, blockpos);
+            BlockPattern.BlockPatternMatch shapedetector_shapedetectorcollection1 = this.getOrCreateIronGolemFull().find(level, pos);
 
-            if (blockpattern_blockpatternmatch1 != null) {
-                IronGolem irongolem = (IronGolem) EntityType.IRON_GOLEM.create(level);
+            if (shapedetector_shapedetectorcollection1 != null) {
+                IronGolem entityirongolem = (IronGolem) EntityType.IRON_GOLEM.create(level);
 
-                if (irongolem != null) {
-                    irongolem.setPlayerCreated(true);
-                    spawnGolemInWorld(level, blockpattern_blockpatternmatch1, irongolem, blockpattern_blockpatternmatch1.getBlock(1, 2, 0).getPos());
+                if (entityirongolem != null) {
+                    entityirongolem.setPlayerCreated(true);
+                    spawnGolemInWorld(level, shapedetector_shapedetectorcollection1, entityirongolem, shapedetector_shapedetectorcollection1.getBlock(1, 2, 0).getPos());
                 }
             }
         }
 
     }
 
-    private static void spawnGolemInWorld(Level level, BlockPattern.BlockPatternMatch blockpattern_blockpatternmatch, Entity entity, BlockPos blockpos) {
-        clearPatternBlocks(level, blockpattern_blockpatternmatch);
-        entity.moveTo((double) blockpos.getX() + 0.5D, (double) blockpos.getY() + 0.05D, (double) blockpos.getZ() + 0.5D, 0.0F, 0.0F);
-        level.addFreshEntity(entity);
-        Iterator iterator = level.getEntitiesOfClass(ServerPlayer.class, entity.getBoundingBox().inflate(5.0D)).iterator();
+    private static void spawnGolemInWorld(Level level, BlockPattern.BlockPatternMatch patternMatch, Entity golem, BlockPos pos) {
+        // clearPatternBlocks(world, shapedetector_shapedetectorcollection); // CraftBukkit - moved down
+        golem.moveTo((double) pos.getX() + 0.5D, (double) pos.getY() + 0.05D, (double) pos.getZ() + 0.5D, 0.0F, 0.0F);
+        // CraftBukkit start
+        if (!level.addFreshEntity(golem, SpawnReason.BUILD_IRONGOLEM)) {
+            return;
+        }
+        clearPatternBlocks(level, patternMatch); // CraftBukkit - from above
+        // CraftBukkit end
+        Iterator iterator = level.getEntitiesOfClass(ServerPlayer.class, golem.getBoundingBox().inflate(5.0D)).iterator();
 
         while (iterator.hasNext()) {
-            ServerPlayer serverplayer = (ServerPlayer) iterator.next();
+            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
 
-            CriteriaTriggers.SUMMONED_ENTITY.trigger(serverplayer, entity);
+            CriteriaTriggers.SUMMONED_ENTITY.trigger(entityplayer, golem);
         }
 
-        updatePatternBlocks(level, blockpattern_blockpatternmatch);
+        updatePatternBlocks(level, patternMatch);
     }
 
-    public static void clearPatternBlocks(Level level, BlockPattern.BlockPatternMatch blockpattern_blockpatternmatch) {
-        for (int i = 0; i < blockpattern_blockpatternmatch.getWidth(); ++i) {
-            for (int j = 0; j < blockpattern_blockpatternmatch.getHeight(); ++j) {
-                BlockInWorld blockinworld = blockpattern_blockpatternmatch.getBlock(i, j, 0);
+    public static void clearPatternBlocks(Level level, BlockPattern.BlockPatternMatch patternMatch) {
+        for (int i = 0; i < patternMatch.getWidth(); ++i) {
+            for (int j = 0; j < patternMatch.getHeight(); ++j) {
+                BlockInWorld shapedetectorblock = patternMatch.getBlock(i, j, 0);
 
-                level.setBlock(blockinworld.getPos(), Blocks.AIR.defaultBlockState(), 2);
-                level.levelEvent(2001, blockinworld.getPos(), Block.getId(blockinworld.getState()));
+                level.setBlock(shapedetectorblock.getPos(), Blocks.AIR.defaultBlockState(), 2);
+                level.levelEvent(2001, shapedetectorblock.getPos(), Block.getId(shapedetectorblock.getState()));
             }
         }
 
     }
 
-    public static void updatePatternBlocks(Level level, BlockPattern.BlockPatternMatch blockpattern_blockpatternmatch) {
-        for (int i = 0; i < blockpattern_blockpatternmatch.getWidth(); ++i) {
-            for (int j = 0; j < blockpattern_blockpatternmatch.getHeight(); ++j) {
-                BlockInWorld blockinworld = blockpattern_blockpatternmatch.getBlock(i, j, 0);
+    public static void updatePatternBlocks(Level level, BlockPattern.BlockPatternMatch patternMatch) {
+        for (int i = 0; i < patternMatch.getWidth(); ++i) {
+            for (int j = 0; j < patternMatch.getHeight(); ++j) {
+                BlockInWorld shapedetectorblock = patternMatch.getBlock(i, j, 0);
 
-                level.blockUpdated(blockinworld.getPos(), Blocks.AIR);
+                level.blockUpdated(shapedetectorblock.getPos(), Blocks.AIR);
             }
         }
 
     }
 
     @Override
-    @Override
-    public BlockState getStateForPlacement(BlockPlaceContext blockplacecontext) {
-        return (BlockState) this.defaultBlockState().setValue(CarvedPumpkinBlock.FACING, blockplacecontext.getHorizontalDirection().getOpposite());
+    public IBlockData getStateForPlacement(BlockPlaceContext context) {
+        return (IBlockData) this.defaultBlockState().setValue(CarvedPumpkinBlock.FACING, context.getHorizontalDirection().getOpposite());
     }
 
     @Override
-    @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> statedefinition_builder) {
-        statedefinition_builder.add(CarvedPumpkinBlock.FACING);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(CarvedPumpkinBlock.FACING);
     }
 
     private BlockPattern getOrCreateSnowGolemBase() {
@@ -155,8 +159,8 @@
 
     private BlockPattern getOrCreateIronGolemBase() {
         if (this.ironGolemBase == null) {
-            this.ironGolemBase = BlockPatternBuilder.start().aisle("~ ~", "###", "~#~").where('#', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.IRON_BLOCK))).where('~', (blockinworld) -> {
-                return blockinworld.getState().isAir();
+            this.ironGolemBase = BlockPatternBuilder.start().aisle("~ ~", "###", "~#~").where('#', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.IRON_BLOCK))).where('~', (shapedetectorblock) -> {
+                return shapedetectorblock.getState().isAir();
             }).build();
         }
 
@@ -165,8 +169,8 @@
 
     private BlockPattern getOrCreateIronGolemFull() {
         if (this.ironGolemFull == null) {
-            this.ironGolemFull = BlockPatternBuilder.start().aisle("~^~", "###", "~#~").where('^', BlockInWorld.hasState(CarvedPumpkinBlock.PUMPKINS_PREDICATE)).where('#', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.IRON_BLOCK))).where('~', (blockinworld) -> {
-                return blockinworld.getState().isAir();
+            this.ironGolemFull = BlockPatternBuilder.start().aisle("~^~", "###", "~#~").where('^', BlockInWorld.hasState(CarvedPumpkinBlock.PUMPKINS_PREDICATE)).where('#', BlockInWorld.hasState(BlockStatePredicate.forBlock(Blocks.IRON_BLOCK))).where('~', (shapedetectorblock) -> {
+                return shapedetectorblock.getState().isAir();
             }).build();
         }
 
