--- a/net/minecraft/world/level/block/PoweredRailBlock.java
+++ b/net/minecraft/world/level/block/PoweredRailBlock.java
@@ -4,13 +4,14 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.EnumProperty;
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.block.state.properties.RailShape;
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
 
 public class PoweredRailBlock extends BaseRailBlock {
 
@@ -19,43 +20,42 @@
     public static final BooleanProperty POWERED = BlockStateProperties.POWERED;
 
     @Override
-    @Override
     public MapCodec<PoweredRailBlock> codec() {
         return PoweredRailBlock.CODEC;
     }
 
-    protected PoweredRailBlock(BlockBehaviour.Properties blockbehaviour_properties) {
-        super(true, blockbehaviour_properties);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(PoweredRailBlock.POWERED, false)).setValue(PoweredRailBlock.WATERLOGGED, false));
+    protected PoweredRailBlock(BlockBehaviour.Properties properties) {
+        super(true, properties);
+        this.registerDefaultState((IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(PoweredRailBlock.POWERED, false)).setValue(PoweredRailBlock.WATERLOGGED, false));
     }
 
-    protected boolean findPoweredRailSignal(Level level, BlockPos blockpos, BlockState blockstate, boolean flag, int i) {
-        if (i >= 8) {
+    protected boolean findPoweredRailSignal(Level level, BlockPos pos, IBlockData state, boolean searchForward, int recursionCount) {
+        if (recursionCount >= 8) {
             return false;
         } else {
-            int j = blockpos.getX();
-            int k = blockpos.getY();
-            int l = blockpos.getZ();
+            int j = pos.getX();
+            int k = pos.getY();
+            int l = pos.getZ();
             boolean flag1 = true;
-            RailShape railshape = (RailShape) blockstate.getValue(PoweredRailBlock.SHAPE);
+            RailShape blockpropertytrackposition = (RailShape) state.getValue(PoweredRailBlock.SHAPE);
 
-            switch (railshape) {
+            switch (blockpropertytrackposition) {
                 case NORTH_SOUTH:
-                    if (flag) {
+                    if (searchForward) {
                         ++l;
                     } else {
                         --l;
                     }
                     break;
                 case EAST_WEST:
-                    if (flag) {
+                    if (searchForward) {
                         --j;
                     } else {
                         ++j;
                     }
                     break;
                 case ASCENDING_EAST:
-                    if (flag) {
+                    if (searchForward) {
                         --j;
                     } else {
                         ++j;
@@ -63,10 +63,10 @@
                         flag1 = false;
                     }
 
-                    railshape = RailShape.EAST_WEST;
+                    blockpropertytrackposition = RailShape.EAST_WEST;
                     break;
                 case ASCENDING_WEST:
-                    if (flag) {
+                    if (searchForward) {
                         --j;
                         ++k;
                         flag1 = false;
@@ -74,10 +74,10 @@
                         ++j;
                     }
 
-                    railshape = RailShape.EAST_WEST;
+                    blockpropertytrackposition = RailShape.EAST_WEST;
                     break;
                 case ASCENDING_NORTH:
-                    if (flag) {
+                    if (searchForward) {
                         ++l;
                     } else {
                         --l;
@@ -85,10 +85,10 @@
                         flag1 = false;
                     }
 
-                    railshape = RailShape.NORTH_SOUTH;
+                    blockpropertytrackposition = RailShape.NORTH_SOUTH;
                     break;
                 case ASCENDING_SOUTH:
-                    if (flag) {
+                    if (searchForward) {
                         ++l;
                         ++k;
                         flag1 = false;
@@ -96,171 +96,173 @@
                         --l;
                     }
 
-                    railshape = RailShape.NORTH_SOUTH;
+                    blockpropertytrackposition = RailShape.NORTH_SOUTH;
             }
 
-            return this.isSameRailWithPower(level, new BlockPos(j, k, l), flag, i, railshape) ? true : flag1 && this.isSameRailWithPower(level, new BlockPos(j, k - 1, l), flag, i, railshape);
+            return this.isSameRailWithPower(level, new BlockPos(j, k, l), searchForward, recursionCount, blockpropertytrackposition) ? true : flag1 && this.isSameRailWithPower(level, new BlockPos(j, k - 1, l), searchForward, recursionCount, blockpropertytrackposition);
         }
     }
 
-    protected boolean isSameRailWithPower(Level level, BlockPos blockpos, boolean flag, int i, RailShape railshape) {
-        BlockState blockstate = level.getBlockState(blockpos);
+    protected boolean isSameRailWithPower(Level level, BlockPos state, boolean searchForward, int recursionCount, RailShape shape) {
+        IBlockData iblockdata = level.getBlockState(state);
 
-        if (!blockstate.is((Block) this)) {
+        if (!iblockdata.is((Block) this)) {
             return false;
         } else {
-            RailShape railshape1 = (RailShape) blockstate.getValue(PoweredRailBlock.SHAPE);
+            RailShape blockpropertytrackposition1 = (RailShape) iblockdata.getValue(PoweredRailBlock.SHAPE);
 
-            return railshape == RailShape.EAST_WEST && (railshape1 == RailShape.NORTH_SOUTH || railshape1 == RailShape.ASCENDING_NORTH || railshape1 == RailShape.ASCENDING_SOUTH) ? false : (railshape == RailShape.NORTH_SOUTH && (railshape1 == RailShape.EAST_WEST || railshape1 == RailShape.ASCENDING_EAST || railshape1 == RailShape.ASCENDING_WEST) ? false : ((Boolean) blockstate.getValue(PoweredRailBlock.POWERED) ? (level.hasNeighborSignal(blockpos) ? true : this.findPoweredRailSignal(level, blockpos, blockstate, flag, i + 1)) : false));
+            return shape == RailShape.EAST_WEST && (blockpropertytrackposition1 == RailShape.NORTH_SOUTH || blockpropertytrackposition1 == RailShape.ASCENDING_NORTH || blockpropertytrackposition1 == RailShape.ASCENDING_SOUTH) ? false : (shape == RailShape.NORTH_SOUTH && (blockpropertytrackposition1 == RailShape.EAST_WEST || blockpropertytrackposition1 == RailShape.ASCENDING_EAST || blockpropertytrackposition1 == RailShape.ASCENDING_WEST) ? false : ((Boolean) iblockdata.getValue(PoweredRailBlock.POWERED) ? (level.hasNeighborSignal(state) ? true : this.findPoweredRailSignal(level, state, iblockdata, searchForward, recursionCount + 1)) : false));
         }
     }
 
     @Override
-    @Override
-    protected void updateState(BlockState blockstate, Level level, BlockPos blockpos, Block block) {
-        boolean flag = (Boolean) blockstate.getValue(PoweredRailBlock.POWERED);
-        boolean flag1 = level.hasNeighborSignal(blockpos) || this.findPoweredRailSignal(level, blockpos, blockstate, true, 0) || this.findPoweredRailSignal(level, blockpos, blockstate, false, 0);
+    protected void updateState(IBlockData state, Level level, BlockPos pos, Block block) {
+        boolean flag = (Boolean) state.getValue(PoweredRailBlock.POWERED);
+        boolean flag1 = level.hasNeighborSignal(pos) || this.findPoweredRailSignal(level, pos, state, true, 0) || this.findPoweredRailSignal(level, pos, state, false, 0);
 
         if (flag1 != flag) {
-            level.setBlock(blockpos, (BlockState) blockstate.setValue(PoweredRailBlock.POWERED, flag1), 3);
-            level.updateNeighborsAt(blockpos.below(), this);
-            if (((RailShape) blockstate.getValue(PoweredRailBlock.SHAPE)).isAscending()) {
-                level.updateNeighborsAt(blockpos.above(), this);
+            // CraftBukkit start
+            int power = flag ? 15 : 0;
+            int newPower = CraftEventFactory.callRedstoneChange(level, pos, power, 15 - power).getNewCurrent();
+            if (newPower == power) {
+                return;
             }
+            // CraftBukkit end
+            level.setBlock(pos, (IBlockData) state.setValue(PoweredRailBlock.POWERED, flag1), 3);
+            level.updateNeighborsAt(pos.below(), this);
+            if (((RailShape) state.getValue(PoweredRailBlock.SHAPE)).isAscending()) {
+                level.updateNeighborsAt(pos.above(), this);
+            }
         }
 
     }
 
     @Override
-    @Override
     public Property<RailShape> getShapeProperty() {
         return PoweredRailBlock.SHAPE;
     }
 
     @Override
-    @Override
-    public BlockState rotate(BlockState blockstate, Rotation rotation) {
-        switch (rotation) {
+    public IBlockData rotate(IBlockData state, Rotation rot) {
+        switch (rot) {
             case CLOCKWISE_180:
-                switch ((RailShape) blockstate.getValue(PoweredRailBlock.SHAPE)) {
+                switch ((RailShape) state.getValue(PoweredRailBlock.SHAPE)) {
                     case ASCENDING_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case ASCENDING_NORTH:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case SOUTH_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case NORTH_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
                 }
             case COUNTERCLOCKWISE_90:
-                switch ((RailShape) blockstate.getValue(PoweredRailBlock.SHAPE)) {
+                switch ((RailShape) state.getValue(PoweredRailBlock.SHAPE)) {
                     case NORTH_SOUTH:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST);
                     case EAST_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH);
                     case ASCENDING_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case ASCENDING_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_NORTH:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case ASCENDING_SOUTH:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case SOUTH_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case SOUTH_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case NORTH_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
                 }
             case CLOCKWISE_90:
-                switch ((RailShape) blockstate.getValue(PoweredRailBlock.SHAPE)) {
+                switch ((RailShape) state.getValue(PoweredRailBlock.SHAPE)) {
                     case NORTH_SOUTH:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST);
                     case EAST_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH);
                     case ASCENDING_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case ASCENDING_NORTH:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case ASCENDING_SOUTH:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case SOUTH_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case NORTH_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case NORTH_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
                 }
             default:
-                return blockstate;
+                return state;
         }
     }
 
     @Override
-    @Override
-    public BlockState mirror(BlockState blockstate, Mirror mirror) {
-        RailShape railshape = (RailShape) blockstate.getValue(PoweredRailBlock.SHAPE);
+    public IBlockData mirror(IBlockData state, Mirror mirror) {
+        RailShape blockpropertytrackposition = (RailShape) state.getValue(PoweredRailBlock.SHAPE);
 
         switch (mirror) {
             case LEFT_RIGHT:
-                switch (railshape) {
+                switch (blockpropertytrackposition) {
                     case ASCENDING_NORTH:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case SOUTH_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case NORTH_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case NORTH_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     default:
-                        return super.mirror(blockstate, mirror);
+                        return super.mirror(state, mirror);
                 }
             case FRONT_BACK:
-                switch (railshape) {
+                switch (blockpropertytrackposition) {
                     case ASCENDING_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case ASCENDING_NORTH:
                     case ASCENDING_SOUTH:
                     default:
                         break;
                     case SOUTH_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_WEST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case NORTH_EAST:
-                        return (BlockState) blockstate.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return (IBlockData) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
                 }
         }
 
-        return super.mirror(blockstate, mirror);
+        return super.mirror(state, mirror);
     }
 
     @Override
-    @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> statedefinition_builder) {
-        statedefinition_builder.add(PoweredRailBlock.SHAPE, PoweredRailBlock.POWERED, PoweredRailBlock.WATERLOGGED);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(PoweredRailBlock.SHAPE, PoweredRailBlock.POWERED, PoweredRailBlock.WATERLOGGED);
     }
 }
