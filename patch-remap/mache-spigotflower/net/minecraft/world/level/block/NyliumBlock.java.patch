--- a/net/minecraft/world/level/block/NyliumBlock.java
+++ b/net/minecraft/world/level/block/NyliumBlock.java
@@ -12,7 +12,7 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.lighting.LightEngine;
@@ -22,67 +22,67 @@
     public static final MapCodec<NyliumBlock> CODEC = simpleCodec(NyliumBlock::new);
 
     @Override
-    @Override
     public MapCodec<NyliumBlock> codec() {
         return NyliumBlock.CODEC;
     }
 
-    protected NyliumBlock(BlockBehaviour.Properties blockbehaviour_properties) {
-        super(blockbehaviour_properties);
+    protected NyliumBlock(BlockBehaviour.Properties properties) {
+        super(properties);
     }
 
-    private static boolean canBeNylium(BlockState blockstate, LevelReader levelreader, BlockPos blockpos) {
-        BlockPos blockpos1 = blockpos.above();
-        BlockState blockstate1 = levelreader.getBlockState(blockpos1);
-        int i = LightEngine.getLightBlockInto(levelreader, blockstate, blockpos, blockstate1, blockpos1, Direction.UP, blockstate1.getLightBlock(levelreader, blockpos1));
+    private static boolean canBeNylium(IBlockData state, LevelReader reader, BlockPos pos) {
+        BlockPos blockposition1 = pos.above();
+        IBlockData iblockdata1 = reader.getBlockState(blockposition1);
+        int i = LightEngine.getLightBlockInto(reader, state, pos, iblockdata1, blockposition1, Direction.UP, iblockdata1.getLightBlock(reader, blockposition1));
 
-        return i < levelreader.getMaxLightLevel();
+        return i < reader.getMaxLightLevel();
     }
 
     @Override
-    @Override
-    public void randomTick(BlockState blockstate, ServerLevel serverlevel, BlockPos blockpos, RandomSource randomsource) {
-        if (!canBeNylium(blockstate, serverlevel, blockpos)) {
-            serverlevel.setBlockAndUpdate(blockpos, Blocks.NETHERRACK.defaultBlockState());
+    public void randomTick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
+        if (!canBeNylium(state, level, pos)) {
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(level, pos, Blocks.NETHERRACK.defaultBlockState()).isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
+            level.setBlockAndUpdate(pos, Blocks.NETHERRACK.defaultBlockState());
         }
 
     }
 
     @Override
-    @Override
-    public boolean isValidBonemealTarget(LevelReader levelreader, BlockPos blockpos, BlockState blockstate) {
-        return levelreader.getBlockState(blockpos.above()).isAir();
+    public boolean isValidBonemealTarget(LevelReader iworldreader, BlockPos blockposition, IBlockData iblockdata) {
+        return iworldreader.getBlockState(blockposition.above()).isAir();
     }
 
     @Override
-    @Override
-    public boolean isBonemealSuccess(Level level, RandomSource randomsource, BlockPos blockpos, BlockState blockstate) {
+    public boolean isBonemealSuccess(Level level, RandomSource random, BlockPos pos, IBlockData state) {
         return true;
     }
 
     @Override
-    @Override
-    public void performBonemeal(ServerLevel serverlevel, RandomSource randomsource, BlockPos blockpos, BlockState blockstate) {
-        BlockState blockstate1 = serverlevel.getBlockState(blockpos);
-        BlockPos blockpos1 = blockpos.above();
-        ChunkGenerator chunkgenerator = serverlevel.getChunkSource().getGenerator();
-        Registry<ConfiguredFeature<?, ?>> registry = serverlevel.registryAccess().registryOrThrow(Registries.CONFIGURED_FEATURE);
+    public void performBonemeal(ServerLevel level, RandomSource random, BlockPos pos, IBlockData state) {
+        IBlockData iblockdata1 = level.getBlockState(pos);
+        BlockPos blockposition1 = pos.above();
+        ChunkGenerator chunkgenerator = level.getChunkSource().getGenerator();
+        Registry<ConfiguredFeature<?, ?>> iregistry = level.registryAccess().registryOrThrow(Registries.CONFIGURED_FEATURE);
 
-        if (blockstate1.is(Blocks.CRIMSON_NYLIUM)) {
-            this.place(registry, NetherFeatures.CRIMSON_FOREST_VEGETATION_BONEMEAL, serverlevel, chunkgenerator, randomsource, blockpos1);
-        } else if (blockstate1.is(Blocks.WARPED_NYLIUM)) {
-            this.place(registry, NetherFeatures.WARPED_FOREST_VEGETATION_BONEMEAL, serverlevel, chunkgenerator, randomsource, blockpos1);
-            this.place(registry, NetherFeatures.NETHER_SPROUTS_BONEMEAL, serverlevel, chunkgenerator, randomsource, blockpos1);
-            if (randomsource.nextInt(8) == 0) {
-                this.place(registry, NetherFeatures.TWISTING_VINES_BONEMEAL, serverlevel, chunkgenerator, randomsource, blockpos1);
+        if (iblockdata1.is(Blocks.CRIMSON_NYLIUM)) {
+            this.place(iregistry, NetherFeatures.CRIMSON_FOREST_VEGETATION_BONEMEAL, level, chunkgenerator, random, blockposition1);
+        } else if (iblockdata1.is(Blocks.WARPED_NYLIUM)) {
+            this.place(iregistry, NetherFeatures.WARPED_FOREST_VEGETATION_BONEMEAL, level, chunkgenerator, random, blockposition1);
+            this.place(iregistry, NetherFeatures.NETHER_SPROUTS_BONEMEAL, level, chunkgenerator, random, blockposition1);
+            if (random.nextInt(8) == 0) {
+                this.place(iregistry, NetherFeatures.TWISTING_VINES_BONEMEAL, level, chunkgenerator, random, blockposition1);
             }
         }
 
     }
 
-    private void place(Registry<ConfiguredFeature<?, ?>> registry, ResourceKey<ConfiguredFeature<?, ?>> resourcekey, ServerLevel serverlevel, ChunkGenerator chunkgenerator, RandomSource randomsource, BlockPos blockpos) {
-        registry.getHolder(resourcekey).ifPresent((holder_reference) -> {
-            ((ConfiguredFeature) holder_reference.value()).place(serverlevel, chunkgenerator, randomsource, blockpos);
+    private void place(Registry<ConfiguredFeature<?, ?>> featureRegistry, ResourceKey<ConfiguredFeature<?, ?>> featureKey, ServerLevel level, ChunkGenerator chunkGenerator, RandomSource random, BlockPos pos) {
+        featureRegistry.getHolder(featureKey).ifPresent((holder_c) -> {
+            ((ConfiguredFeature) holder_c.value()).place(level, chunkGenerator, random, pos);
         });
     }
 }
