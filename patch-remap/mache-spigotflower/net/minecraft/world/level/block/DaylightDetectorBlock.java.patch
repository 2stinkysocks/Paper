--- a/net/minecraft/world/level/block/DaylightDetectorBlock.java
+++ b/net/minecraft/world/level/block/DaylightDetectorBlock.java
@@ -5,18 +5,18 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.util.Mth;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.EnumSkyBlock;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntityTicker;
 import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.entity.DaylightDetectorBlockEntity;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
@@ -34,38 +34,34 @@
     protected static final VoxelShape SHAPE = Block.box(0.0D, 0.0D, 0.0D, 16.0D, 6.0D, 16.0D);
 
     @Override
-    @Override
     public MapCodec<DaylightDetectorBlock> codec() {
         return DaylightDetectorBlock.CODEC;
     }
 
-    public DaylightDetectorBlock(BlockBehaviour.Properties blockbehaviour_properties) {
-        super(blockbehaviour_properties);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DaylightDetectorBlock.POWER, 0)).setValue(DaylightDetectorBlock.INVERTED, false));
+    public DaylightDetectorBlock(BlockBehaviour.Properties properties) {
+        super(properties);
+        this.registerDefaultState((IBlockData) ((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(DaylightDetectorBlock.POWER, 0)).setValue(DaylightDetectorBlock.INVERTED, false));
     }
 
     @Override
-    @Override
-    public VoxelShape getShape(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, CollisionContext collisioncontext) {
+    public VoxelShape getShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
         return DaylightDetectorBlock.SHAPE;
     }
 
     @Override
-    @Override
-    public boolean useShapeForLightOcclusion(BlockState blockstate) {
+    public boolean useShapeForLightOcclusion(IBlockData state) {
         return true;
     }
 
     @Override
-    @Override
-    public int getSignal(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, Direction direction) {
-        return (Integer) blockstate.getValue(DaylightDetectorBlock.POWER);
+    public int getSignal(IBlockData blockState, BlockGetter blockAccess, BlockPos pos, Direction side) {
+        return (Integer) blockState.getValue(DaylightDetectorBlock.POWER);
     }
 
-    private static void updateSignalStrength(BlockState blockstate, Level level, BlockPos blockpos) {
-        int i = level.getBrightness(LightLayer.SKY, blockpos) - level.getSkyDarken();
+    private static void updateSignalStrength(IBlockData state, Level level, BlockPos pos) {
+        int i = level.getBrightness(EnumSkyBlock.SKY, pos) - level.getSkyDarken();
         float f = level.getSunAngle(1.0F);
-        boolean flag = (Boolean) blockstate.getValue(DaylightDetectorBlock.INVERTED);
+        boolean flag = (Boolean) state.getValue(DaylightDetectorBlock.INVERTED);
 
         if (flag) {
             i = 15 - i;
@@ -77,66 +73,61 @@
         }
 
         i = Mth.clamp(i, 0, 15);
-        if ((Integer) blockstate.getValue(DaylightDetectorBlock.POWER) != i) {
-            level.setBlock(blockpos, (BlockState) blockstate.setValue(DaylightDetectorBlock.POWER, i), 3);
+        if ((Integer) state.getValue(DaylightDetectorBlock.POWER) != i) {
+            i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(level, pos, ((Integer) state.getValue(POWER)), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
+            level.setBlock(pos, (IBlockData) state.setValue(DaylightDetectorBlock.POWER, i), 3);
         }
 
     }
 
     @Override
-    @Override
-    public InteractionResult use(BlockState blockstate, Level level, BlockPos blockpos, Player player, InteractionHand interactionhand, BlockHitResult blockhitresult) {
+    public InteractionResult use(IBlockData state, Level level, BlockPos pos, Player player, EnumHand hand, BlockHitResult hit) {
         if (player.mayBuild()) {
             if (level.isClientSide) {
                 return InteractionResult.SUCCESS;
             } else {
-                BlockState blockstate1 = (BlockState) blockstate.cycle(DaylightDetectorBlock.INVERTED);
+                IBlockData iblockdata1 = (IBlockData) state.cycle(DaylightDetectorBlock.INVERTED);
 
-                level.setBlock(blockpos, blockstate1, 2);
-                level.gameEvent(GameEvent.BLOCK_CHANGE, blockpos, GameEvent.Context.of(player, blockstate1));
-                updateSignalStrength(blockstate1, level, blockpos);
+                level.setBlock(pos, iblockdata1, 2);
+                level.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(player, iblockdata1));
+                updateSignalStrength(iblockdata1, level, pos);
                 return InteractionResult.CONSUME;
             }
         } else {
-            return super.use(blockstate, level, blockpos, player, interactionhand, blockhitresult);
+            return super.use(state, level, pos, player, hand, hit);
         }
     }
 
     @Override
-    @Override
-    public RenderShape getRenderShape(BlockState blockstate) {
-        return RenderShape.MODEL;
+    public EnumRenderType getRenderShape(IBlockData state) {
+        return EnumRenderType.MODEL;
     }
 
     @Override
-    @Override
-    public boolean isSignalSource(BlockState blockstate) {
+    public boolean isSignalSource(IBlockData state) {
         return true;
     }
 
     @Override
-    @Override
-    public BlockEntity newBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        return new DaylightDetectorBlockEntity(blockpos, blockstate);
+    public BlockEntity newBlockEntity(BlockPos pos, IBlockData state) {
+        return new DaylightDetectorBlockEntity(pos, state);
     }
 
     @Nullable
     @Override
-    @Override
-    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, BlockState blockstate, BlockEntityType<T> blockentitytype) {
-        return !level.isClientSide && level.dimensionType().hasSkyLight() ? createTickerHelper(blockentitytype, BlockEntityType.DAYLIGHT_DETECTOR, DaylightDetectorBlock::tickEntity) : null;
+    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, IBlockData state, BlockEntityType<T> blockEntityType) {
+        return !level.isClientSide && level.dimensionType().hasSkyLight() ? createTickerHelper(blockEntityType, BlockEntityType.DAYLIGHT_DETECTOR, DaylightDetectorBlock::tickEntity) : null;
     }
 
-    private static void tickEntity(Level level, BlockPos blockpos, BlockState blockstate, DaylightDetectorBlockEntity daylightdetectorblockentity) {
+    private static void tickEntity(Level level, BlockPos pos, IBlockData state, DaylightDetectorBlockEntity blockEntity) {
         if (level.getGameTime() % 20L == 0L) {
-            updateSignalStrength(blockstate, level, blockpos);
+            updateSignalStrength(state, level, pos);
         }
 
     }
 
     @Override
-    @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> statedefinition_builder) {
-        statedefinition_builder.add(DaylightDetectorBlock.POWER, DaylightDetectorBlock.INVERTED);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(DaylightDetectorBlock.POWER, DaylightDetectorBlock.INVERTED);
     }
 }
