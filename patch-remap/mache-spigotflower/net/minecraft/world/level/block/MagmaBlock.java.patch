--- a/net/minecraft/world/level/block/MagmaBlock.java
+++ b/net/minecraft/world/level/block/MagmaBlock.java
@@ -11,7 +11,7 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
 public class MagmaBlock extends Block {
 
@@ -19,44 +19,41 @@
     private static final int BUBBLE_COLUMN_CHECK_DELAY = 20;
 
     @Override
-    @Override
     public MapCodec<MagmaBlock> codec() {
         return MagmaBlock.CODEC;
     }
 
-    public MagmaBlock(BlockBehaviour.Properties blockbehaviour_properties) {
-        super(blockbehaviour_properties);
+    public MagmaBlock(BlockBehaviour.Properties properties) {
+        super(properties);
     }
 
     @Override
-    @Override
-    public void stepOn(Level level, BlockPos blockpos, BlockState blockstate, Entity entity) {
+    public void stepOn(Level level, BlockPos pos, IBlockData state, Entity entity) {
         if (!entity.isSteppingCarefully() && entity instanceof LivingEntity && !EnchantmentHelper.hasFrostWalker((LivingEntity) entity)) {
+            org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = level.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()); // CraftBukkit
             entity.hurt(level.damageSources().hotFloor(), 1.0F);
+            org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = null; // CraftBukkit
         }
 
-        super.stepOn(level, blockpos, blockstate, entity);
+        super.stepOn(level, pos, state, entity);
     }
 
     @Override
-    @Override
-    public void tick(BlockState blockstate, ServerLevel serverlevel, BlockPos blockpos, RandomSource randomsource) {
-        BubbleColumnBlock.updateColumn(serverlevel, blockpos.above(), blockstate);
+    public void tick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
+        BubbleColumnBlock.updateColumn(level, pos.above(), state);
     }
 
     @Override
-    @Override
-    public BlockState updateShape(BlockState blockstate, Direction direction, BlockState blockstate1, LevelAccessor levelaccessor, BlockPos blockpos, BlockPos blockpos1) {
-        if (direction == Direction.UP && blockstate1.is(Blocks.WATER)) {
-            levelaccessor.scheduleTick(blockpos, (Block) this, 20);
+    public IBlockData updateShape(IBlockData state, Direction facing, IBlockData facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
+        if (facing == Direction.UP && facingState.is(Blocks.WATER)) {
+            level.scheduleTick(currentPos, (Block) this, 20);
         }
 
-        return super.updateShape(blockstate, direction, blockstate1, levelaccessor, blockpos, blockpos1);
+        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
     }
 
     @Override
-    @Override
-    public void onPlace(BlockState blockstate, Level level, BlockPos blockpos, BlockState blockstate1, boolean flag) {
-        level.scheduleTick(blockpos, (Block) this, 20);
+    public void onPlace(IBlockData state, Level level, BlockPos pos, IBlockData oldState, boolean isMoving) {
+        level.scheduleTick(pos, (Block) this, 20);
     }
 }
