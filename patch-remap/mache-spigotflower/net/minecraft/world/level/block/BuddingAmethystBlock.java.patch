--- a/net/minecraft/world/level/block/BuddingAmethystBlock.java
+++ b/net/minecraft/world/level/block/BuddingAmethystBlock.java
@@ -6,7 +6,7 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.material.Fluids;
 
 public class BuddingAmethystBlock extends AmethystBlock {
@@ -16,44 +16,42 @@
     private static final Direction[] DIRECTIONS = Direction.values();
 
     @Override
-    @Override
     public MapCodec<BuddingAmethystBlock> codec() {
         return BuddingAmethystBlock.CODEC;
     }
 
-    public BuddingAmethystBlock(BlockBehaviour.Properties blockbehaviour_properties) {
-        super(blockbehaviour_properties);
+    public BuddingAmethystBlock(BlockBehaviour.Properties properties) {
+        super(properties);
     }
 
     @Override
-    @Override
-    public void randomTick(BlockState blockstate, ServerLevel serverlevel, BlockPos blockpos, RandomSource randomsource) {
-        if (randomsource.nextInt(5) == 0) {
-            Direction direction = BuddingAmethystBlock.DIRECTIONS[randomsource.nextInt(BuddingAmethystBlock.DIRECTIONS.length)];
-            BlockPos blockpos1 = blockpos.relative(direction);
-            BlockState blockstate1 = serverlevel.getBlockState(blockpos1);
+    public void randomTick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
+        if (random.nextInt(5) == 0) {
+            Direction enumdirection = BuddingAmethystBlock.DIRECTIONS[random.nextInt(BuddingAmethystBlock.DIRECTIONS.length)];
+            BlockPos blockposition1 = pos.relative(enumdirection);
+            IBlockData iblockdata1 = level.getBlockState(blockposition1);
             Block block = null;
 
-            if (canClusterGrowAtState(blockstate1)) {
+            if (canClusterGrowAtState(iblockdata1)) {
                 block = Blocks.SMALL_AMETHYST_BUD;
-            } else if (blockstate1.is(Blocks.SMALL_AMETHYST_BUD) && blockstate1.getValue(AmethystClusterBlock.FACING) == direction) {
+            } else if (iblockdata1.is(Blocks.SMALL_AMETHYST_BUD) && iblockdata1.getValue(AmethystClusterBlock.FACING) == enumdirection) {
                 block = Blocks.MEDIUM_AMETHYST_BUD;
-            } else if (blockstate1.is(Blocks.MEDIUM_AMETHYST_BUD) && blockstate1.getValue(AmethystClusterBlock.FACING) == direction) {
+            } else if (iblockdata1.is(Blocks.MEDIUM_AMETHYST_BUD) && iblockdata1.getValue(AmethystClusterBlock.FACING) == enumdirection) {
                 block = Blocks.LARGE_AMETHYST_BUD;
-            } else if (blockstate1.is(Blocks.LARGE_AMETHYST_BUD) && blockstate1.getValue(AmethystClusterBlock.FACING) == direction) {
+            } else if (iblockdata1.is(Blocks.LARGE_AMETHYST_BUD) && iblockdata1.getValue(AmethystClusterBlock.FACING) == enumdirection) {
                 block = Blocks.AMETHYST_CLUSTER;
             }
 
             if (block != null) {
-                BlockState blockstate2 = (BlockState) ((BlockState) block.defaultBlockState().setValue(AmethystClusterBlock.FACING, direction)).setValue(AmethystClusterBlock.WATERLOGGED, blockstate1.getFluidState().getType() == Fluids.WATER);
+                IBlockData iblockdata2 = (IBlockData) ((IBlockData) block.defaultBlockState().setValue(AmethystClusterBlock.FACING, enumdirection)).setValue(AmethystClusterBlock.WATERLOGGED, iblockdata1.getFluidState().getType() == Fluids.WATER);
 
-                serverlevel.setBlockAndUpdate(blockpos1, blockstate2);
+                org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(level, pos, blockposition1, iblockdata2); // CraftBukkit
             }
 
         }
     }
 
-    public static boolean canClusterGrowAtState(BlockState blockstate) {
-        return blockstate.isAir() || blockstate.is(Blocks.WATER) && blockstate.getFluidState().getAmount() == 8;
+    public static boolean canClusterGrowAtState(IBlockData state) {
+        return state.isAir() || state.is(Blocks.WATER) && state.getFluidState().getAmount() == 8;
     }
 }
