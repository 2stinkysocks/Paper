--- a/net/minecraft/world/level/block/CoralBlock.java
+++ b/net/minecraft/world/level/block/CoralBlock.java
@@ -13,58 +13,60 @@
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.material.FluidState;
 
 public class CoralBlock extends Block {
 
     public static final MapCodec<Block> DEAD_CORAL_FIELD = BuiltInRegistries.BLOCK.byNameCodec().fieldOf("dead");
     public static final MapCodec<CoralBlock> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
-        return instance.group(CoralBlock.DEAD_CORAL_FIELD.forGetter((coralblock) -> {
-            return coralblock.deadBlock;
+        return instance.group(CoralBlock.DEAD_CORAL_FIELD.forGetter((blockcoral) -> {
+            return blockcoral.deadBlock;
         }), propertiesCodec()).apply(instance, CoralBlock::new);
     });
     private final Block deadBlock;
 
-    public CoralBlock(Block block, BlockBehaviour.Properties blockbehaviour_properties) {
-        super(blockbehaviour_properties);
-        this.deadBlock = block;
+    public CoralBlock(Block deadBlock, BlockBehaviour.Properties properties) {
+        super(properties);
+        this.deadBlock = deadBlock;
     }
 
     @Override
-    @Override
     public MapCodec<CoralBlock> codec() {
         return CoralBlock.CODEC;
     }
 
     @Override
-    @Override
-    public void tick(BlockState blockstate, ServerLevel serverlevel, BlockPos blockpos, RandomSource randomsource) {
-        if (!this.scanForWater(serverlevel, blockpos)) {
-            serverlevel.setBlock(blockpos, this.deadBlock.defaultBlockState(), 2);
+    public void tick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
+        if (!this.scanForWater(level, pos)) {
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(level, pos, this.deadBlock.defaultBlockState()).isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
+            level.setBlock(pos, this.deadBlock.defaultBlockState(), 2);
         }
 
     }
 
     @Override
-    @Override
-    public BlockState updateShape(BlockState blockstate, Direction direction, BlockState blockstate1, LevelAccessor levelaccessor, BlockPos blockpos, BlockPos blockpos1) {
-        if (!this.scanForWater(levelaccessor, blockpos)) {
-            levelaccessor.scheduleTick(blockpos, (Block) this, 60 + levelaccessor.getRandom().nextInt(40));
+    public IBlockData updateShape(IBlockData state, Direction facing, IBlockData facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
+        if (!this.scanForWater(level, currentPos)) {
+            level.scheduleTick(currentPos, (Block) this, 60 + level.getRandom().nextInt(40));
         }
 
-        return super.updateShape(blockstate, direction, blockstate1, levelaccessor, blockpos, blockpos1);
+        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
     }
 
-    protected boolean scanForWater(BlockGetter blockgetter, BlockPos blockpos) {
-        Direction[] adirection = Direction.values();
-        int i = adirection.length;
+    protected boolean scanForWater(BlockGetter level, BlockPos pos) {
+        Direction[] aenumdirection = Direction.values();
+        int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
-            Direction direction = adirection[j];
-            FluidState fluidstate = blockgetter.getFluidState(blockpos.relative(direction));
+            Direction enumdirection = aenumdirection[j];
+            FluidState fluid = level.getFluidState(pos.relative(enumdirection));
 
-            if (fluidstate.is(FluidTags.WATER)) {
+            if (fluid.is(FluidTags.WATER)) {
                 return true;
             }
         }
@@ -74,10 +76,9 @@
 
     @Nullable
     @Override
-    @Override
-    public BlockState getStateForPlacement(BlockPlaceContext blockplacecontext) {
-        if (!this.scanForWater(blockplacecontext.getLevel(), blockplacecontext.getClickedPos())) {
-            blockplacecontext.getLevel().scheduleTick(blockplacecontext.getClickedPos(), (Block) this, 60 + blockplacecontext.getLevel().getRandom().nextInt(40));
+    public IBlockData getStateForPlacement(BlockPlaceContext context) {
+        if (!this.scanForWater(context.getLevel(), context.getClickedPos())) {
+            context.getLevel().scheduleTick(context.getClickedPos(), (Block) this, 60 + context.getLevel().getRandom().nextInt(40));
         }
 
         return this.defaultBlockState();
