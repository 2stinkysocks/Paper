--- a/net/minecraft/world/level/block/BigDripleafBlock.java
+++ b/net/minecraft/world/level/block/BigDripleafBlock.java
@@ -26,7 +26,7 @@
 import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
@@ -41,6 +41,10 @@
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityInteractEvent;
+// CraftBukkit end
 
 public class BigDripleafBlock extends HorizontalDirectionalBlock implements BonemealableBlock, SimpleWaterloggedBlock {
 
@@ -61,230 +65,238 @@
     private static final Map<Tilt, VoxelShape> LEAF_SHAPES = ImmutableMap.of(Tilt.NONE, Block.box(0.0D, 11.0D, 0.0D, 16.0D, 15.0D, 16.0D), Tilt.UNSTABLE, Block.box(0.0D, 11.0D, 0.0D, 16.0D, 15.0D, 16.0D), Tilt.PARTIAL, Block.box(0.0D, 11.0D, 0.0D, 16.0D, 13.0D, 16.0D), Tilt.FULL, Shapes.empty());
     private static final VoxelShape STEM_SLICER = Block.box(0.0D, 13.0D, 0.0D, 16.0D, 16.0D, 16.0D);
     private static final Map<Direction, VoxelShape> STEM_SHAPES = ImmutableMap.of(Direction.NORTH, Shapes.joinUnoptimized(BigDripleafStemBlock.NORTH_SHAPE, BigDripleafBlock.STEM_SLICER, BooleanOp.ONLY_FIRST), Direction.SOUTH, Shapes.joinUnoptimized(BigDripleafStemBlock.SOUTH_SHAPE, BigDripleafBlock.STEM_SLICER, BooleanOp.ONLY_FIRST), Direction.EAST, Shapes.joinUnoptimized(BigDripleafStemBlock.EAST_SHAPE, BigDripleafBlock.STEM_SLICER, BooleanOp.ONLY_FIRST), Direction.WEST, Shapes.joinUnoptimized(BigDripleafStemBlock.WEST_SHAPE, BigDripleafBlock.STEM_SLICER, BooleanOp.ONLY_FIRST));
-    private final Map<BlockState, VoxelShape> shapesCache;
+    private final Map<IBlockData, VoxelShape> shapesCache;
 
     @Override
-    @Override
     public MapCodec<BigDripleafBlock> codec() {
         return BigDripleafBlock.CODEC;
     }
 
-    protected BigDripleafBlock(BlockBehaviour.Properties blockbehaviour_properties) {
-        super(blockbehaviour_properties);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BigDripleafBlock.WATERLOGGED, false)).setValue(BigDripleafBlock.FACING, Direction.NORTH)).setValue(BigDripleafBlock.TILT, Tilt.NONE));
+    protected BigDripleafBlock(BlockBehaviour.Properties properties) {
+        super(properties);
+        this.registerDefaultState((IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(BigDripleafBlock.WATERLOGGED, false)).setValue(BigDripleafBlock.FACING, Direction.NORTH)).setValue(BigDripleafBlock.TILT, Tilt.NONE));
         this.shapesCache = this.getShapeForEachState(BigDripleafBlock::calculateShape);
     }
 
-    private static VoxelShape calculateShape(BlockState blockstate) {
-        return Shapes.or((VoxelShape) BigDripleafBlock.LEAF_SHAPES.get(blockstate.getValue(BigDripleafBlock.TILT)), (VoxelShape) BigDripleafBlock.STEM_SHAPES.get(blockstate.getValue(BigDripleafBlock.FACING)));
+    private static VoxelShape calculateShape(IBlockData state) {
+        return Shapes.or((VoxelShape) BigDripleafBlock.LEAF_SHAPES.get(state.getValue(BigDripleafBlock.TILT)), (VoxelShape) BigDripleafBlock.STEM_SHAPES.get(state.getValue(BigDripleafBlock.FACING)));
     }
 
-    public static void placeWithRandomHeight(LevelAccessor levelaccessor, RandomSource randomsource, BlockPos blockpos, Direction direction) {
-        int i = Mth.nextInt(randomsource, 2, 5);
-        BlockPos.MutableBlockPos blockpos_mutableblockpos = blockpos.mutable();
+    public static void placeWithRandomHeight(LevelAccessor level, RandomSource random, BlockPos pos, Direction direction) {
+        int i = Mth.nextInt(random, 2, 5);
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = pos.mutable();
         int j = 0;
 
-        while (j < i && canPlaceAt(levelaccessor, blockpos_mutableblockpos, levelaccessor.getBlockState(blockpos_mutableblockpos))) {
+        while (j < i && canPlaceAt(level, blockposition_mutableblockposition, level.getBlockState(blockposition_mutableblockposition))) {
             ++j;
-            blockpos_mutableblockpos.move(Direction.UP);
+            blockposition_mutableblockposition.move(Direction.UP);
         }
 
-        int k = blockpos.getY() + j - 1;
+        int k = pos.getY() + j - 1;
 
-        blockpos_mutableblockpos.setY(blockpos.getY());
+        blockposition_mutableblockposition.setY(pos.getY());
 
-        while (blockpos_mutableblockpos.getY() < k) {
-            BigDripleafStemBlock.place(levelaccessor, blockpos_mutableblockpos, levelaccessor.getFluidState(blockpos_mutableblockpos), direction);
-            blockpos_mutableblockpos.move(Direction.UP);
+        while (blockposition_mutableblockposition.getY() < k) {
+            BigDripleafStemBlock.place(level, blockposition_mutableblockposition, level.getFluidState(blockposition_mutableblockposition), direction);
+            blockposition_mutableblockposition.move(Direction.UP);
         }
 
-        place(levelaccessor, blockpos_mutableblockpos, levelaccessor.getFluidState(blockpos_mutableblockpos), direction);
+        place(level, blockposition_mutableblockposition, level.getFluidState(blockposition_mutableblockposition), direction);
     }
 
-    private static boolean canReplace(BlockState blockstate) {
-        return blockstate.isAir() || blockstate.is(Blocks.WATER) || blockstate.is(Blocks.SMALL_DRIPLEAF);
+    private static boolean canReplace(IBlockData state) {
+        return state.isAir() || state.is(Blocks.WATER) || state.is(Blocks.SMALL_DRIPLEAF);
     }
 
-    protected static boolean canPlaceAt(LevelHeightAccessor levelheightaccessor, BlockPos blockpos, BlockState blockstate) {
-        return !levelheightaccessor.isOutsideBuildHeight(blockpos) && canReplace(blockstate);
+    protected static boolean canPlaceAt(LevelHeightAccessor level, BlockPos pos, IBlockData state) {
+        return !level.isOutsideBuildHeight(pos) && canReplace(state);
     }
 
-    protected static boolean place(LevelAccessor levelaccessor, BlockPos blockpos, FluidState fluidstate, Direction direction) {
-        BlockState blockstate = (BlockState) ((BlockState) Blocks.BIG_DRIPLEAF.defaultBlockState().setValue(BigDripleafBlock.WATERLOGGED, fluidstate.isSourceOfType(Fluids.WATER))).setValue(BigDripleafBlock.FACING, direction);
+    protected static boolean place(LevelAccessor level, BlockPos pos, FluidState fluidState, Direction direction) {
+        IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.BIG_DRIPLEAF.defaultBlockState().setValue(BigDripleafBlock.WATERLOGGED, fluidState.isSourceOfType(Fluids.WATER))).setValue(BigDripleafBlock.FACING, direction);
 
-        return levelaccessor.setBlock(blockpos, blockstate, 3);
+        return level.setBlock(pos, iblockdata, 3);
     }
 
     @Override
-    @Override
-    public void onProjectileHit(Level level, BlockState blockstate, BlockHitResult blockhitresult, Projectile projectile) {
-        this.setTiltAndScheduleTick(blockstate, level, blockhitresult.getBlockPos(), Tilt.FULL, SoundEvents.BIG_DRIPLEAF_TILT_DOWN);
+    public void onProjectileHit(Level level, IBlockData state, BlockHitResult hit, Projectile projectile) {
+        this.setTiltAndScheduleTick(state, level, hit.getBlockPos(), Tilt.FULL, SoundEvents.BIG_DRIPLEAF_TILT_DOWN, projectile); // CraftBukkit
     }
 
     @Override
-    @Override
-    public FluidState getFluidState(BlockState blockstate) {
-        return (Boolean) blockstate.getValue(BigDripleafBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(blockstate);
+    public FluidState getFluidState(IBlockData state) {
+        return (Boolean) state.getValue(BigDripleafBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
-    @Override
-    public boolean canSurvive(BlockState blockstate, LevelReader levelreader, BlockPos blockpos) {
-        BlockPos blockpos1 = blockpos.below();
-        BlockState blockstate1 = levelreader.getBlockState(blockpos1);
+    public boolean canSurvive(IBlockData state, LevelReader level, BlockPos pos) {
+        BlockPos blockposition1 = pos.below();
+        IBlockData iblockdata1 = level.getBlockState(blockposition1);
 
-        return blockstate1.is((Block) this) || blockstate1.is(Blocks.BIG_DRIPLEAF_STEM) || blockstate1.is(BlockTags.BIG_DRIPLEAF_PLACEABLE);
+        return iblockdata1.is((Block) this) || iblockdata1.is(Blocks.BIG_DRIPLEAF_STEM) || iblockdata1.is(BlockTags.BIG_DRIPLEAF_PLACEABLE);
     }
 
     @Override
-    @Override
-    public BlockState updateShape(BlockState blockstate, Direction direction, BlockState blockstate1, LevelAccessor levelaccessor, BlockPos blockpos, BlockPos blockpos1) {
-        if (direction == Direction.DOWN && !blockstate.canSurvive(levelaccessor, blockpos)) {
+    public IBlockData updateShape(IBlockData state, Direction direction, IBlockData neighborState, LevelAccessor level, BlockPos pos, BlockPos neighborPos) {
+        if (direction == Direction.DOWN && !state.canSurvive(level, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
-            if ((Boolean) blockstate.getValue(BigDripleafBlock.WATERLOGGED)) {
-                levelaccessor.scheduleTick(blockpos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(levelaccessor));
+            if ((Boolean) state.getValue(BigDripleafBlock.WATERLOGGED)) {
+                level.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(level));
             }
 
-            return direction == Direction.UP && blockstate1.is((Block) this) ? Blocks.BIG_DRIPLEAF_STEM.withPropertiesOf(blockstate) : super.updateShape(blockstate, direction, blockstate1, levelaccessor, blockpos, blockpos1);
+            return direction == Direction.UP && neighborState.is((Block) this) ? Blocks.BIG_DRIPLEAF_STEM.withPropertiesOf(state) : super.updateShape(state, direction, neighborState, level, pos, neighborPos);
         }
     }
 
     @Override
-    @Override
-    public boolean isValidBonemealTarget(LevelReader levelreader, BlockPos blockpos, BlockState blockstate) {
-        BlockState blockstate1 = levelreader.getBlockState(blockpos.above());
+    public boolean isValidBonemealTarget(LevelReader iworldreader, BlockPos blockposition, IBlockData iblockdata) {
+        IBlockData iblockdata1 = iworldreader.getBlockState(blockposition.above());
 
-        return canReplace(blockstate1);
+        return canReplace(iblockdata1);
     }
 
     @Override
-    @Override
-    public boolean isBonemealSuccess(Level level, RandomSource randomsource, BlockPos blockpos, BlockState blockstate) {
+    public boolean isBonemealSuccess(Level level, RandomSource random, BlockPos pos, IBlockData state) {
         return true;
     }
 
     @Override
-    @Override
-    public void performBonemeal(ServerLevel serverlevel, RandomSource randomsource, BlockPos blockpos, BlockState blockstate) {
-        BlockPos blockpos1 = blockpos.above();
-        BlockState blockstate1 = serverlevel.getBlockState(blockpos1);
+    public void performBonemeal(ServerLevel level, RandomSource random, BlockPos pos, IBlockData state) {
+        BlockPos blockposition1 = pos.above();
+        IBlockData iblockdata1 = level.getBlockState(blockposition1);
 
-        if (canPlaceAt(serverlevel, blockpos1, blockstate1)) {
-            Direction direction = (Direction) blockstate.getValue(BigDripleafBlock.FACING);
+        if (canPlaceAt(level, blockposition1, iblockdata1)) {
+            Direction enumdirection = (Direction) state.getValue(BigDripleafBlock.FACING);
 
-            BigDripleafStemBlock.place(serverlevel, blockpos, blockstate.getFluidState(), direction);
-            place(serverlevel, blockpos1, blockstate1.getFluidState(), direction);
+            BigDripleafStemBlock.place(level, pos, state.getFluidState(), enumdirection);
+            place(level, blockposition1, iblockdata1.getFluidState(), enumdirection);
         }
 
     }
 
     @Override
-    @Override
-    public void entityInside(BlockState blockstate, Level level, BlockPos blockpos, Entity entity) {
+    public void entityInside(IBlockData state, Level level, BlockPos pos, Entity entity) {
         if (!level.isClientSide) {
-            if (blockstate.getValue(BigDripleafBlock.TILT) == Tilt.NONE && canEntityTilt(blockpos, entity) && !level.hasNeighborSignal(blockpos)) {
-                this.setTiltAndScheduleTick(blockstate, level, blockpos, Tilt.UNSTABLE, (SoundEvent) null);
+            if (state.getValue(BigDripleafBlock.TILT) == Tilt.NONE && canEntityTilt(pos, entity) && !level.hasNeighborSignal(pos)) {
+                // CraftBukkit start - tilt dripleaf
+                org.bukkit.event.Cancellable cancellable;
+                if (entity instanceof Player) {
+                    cancellable = CraftEventFactory.callPlayerInteractEvent((Player) entity, org.bukkit.event.block.Action.PHYSICAL, pos, null, null, null);
+                } else {
+                    cancellable = new EntityInteractEvent(entity.getBukkitEntity(), level.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
+                    level.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
+                }
+
+                if (cancellable.isCancelled()) {
+                    return;
+                }
+                this.setTiltAndScheduleTick(state, level, pos, Tilt.UNSTABLE, (SoundEvent) null, entity);
+                // CraftBukkit end
             }
 
         }
     }
 
     @Override
-    @Override
-    public void tick(BlockState blockstate, ServerLevel serverlevel, BlockPos blockpos, RandomSource randomsource) {
-        if (serverlevel.hasNeighborSignal(blockpos)) {
-            resetTilt(blockstate, serverlevel, blockpos);
+    public void tick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
+        if (level.hasNeighborSignal(pos)) {
+            resetTilt(state, level, pos);
         } else {
-            Tilt tilt = (Tilt) blockstate.getValue(BigDripleafBlock.TILT);
+            Tilt tilt = (Tilt) state.getValue(BigDripleafBlock.TILT);
 
             if (tilt == Tilt.UNSTABLE) {
-                this.setTiltAndScheduleTick(blockstate, serverlevel, blockpos, Tilt.PARTIAL, SoundEvents.BIG_DRIPLEAF_TILT_DOWN);
+                this.setTiltAndScheduleTick(state, level, pos, Tilt.PARTIAL, SoundEvents.BIG_DRIPLEAF_TILT_DOWN, null); // CraftBukkit
             } else if (tilt == Tilt.PARTIAL) {
-                this.setTiltAndScheduleTick(blockstate, serverlevel, blockpos, Tilt.FULL, SoundEvents.BIG_DRIPLEAF_TILT_DOWN);
+                this.setTiltAndScheduleTick(state, level, pos, Tilt.FULL, SoundEvents.BIG_DRIPLEAF_TILT_DOWN, null); // CraftBukkit
             } else if (tilt == Tilt.FULL) {
-                resetTilt(blockstate, serverlevel, blockpos);
+                resetTilt(state, level, pos);
             }
 
         }
     }
 
     @Override
-    @Override
-    public void neighborChanged(BlockState blockstate, Level level, BlockPos blockpos, Block block, BlockPos blockpos1, boolean flag) {
-        if (level.hasNeighborSignal(blockpos)) {
-            resetTilt(blockstate, level, blockpos);
+    public void neighborChanged(IBlockData state, Level level, BlockPos pos, Block neighborBlock, BlockPos neighborPos, boolean movedByPiston) {
+        if (level.hasNeighborSignal(pos)) {
+            resetTilt(state, level, pos);
         }
 
     }
 
-    private static void playTiltSound(Level level, BlockPos blockpos, SoundEvent soundevent) {
+    private static void playTiltSound(Level level, BlockPos pos, SoundEvent sound) {
         float f = Mth.randomBetween(level.random, 0.8F, 1.2F);
 
-        level.playSound((Player) null, blockpos, soundevent, SoundSource.BLOCKS, 1.0F, f);
+        level.playSound((Player) null, pos, sound, SoundSource.BLOCKS, 1.0F, f);
     }
 
-    private static boolean canEntityTilt(BlockPos blockpos, Entity entity) {
-        return entity.onGround() && entity.position().y > (double) ((float) blockpos.getY() + 0.6875F);
+    private static boolean canEntityTilt(BlockPos pos, Entity entity) {
+        return entity.onGround() && entity.position().y > (double) ((float) pos.getY() + 0.6875F);
     }
 
-    private void setTiltAndScheduleTick(BlockState blockstate, Level level, BlockPos blockpos, Tilt tilt, @Nullable SoundEvent soundevent) {
-        setTilt(blockstate, level, blockpos, tilt);
-        if (soundevent != null) {
-            playTiltSound(level, blockpos, soundevent);
+    // CraftBukkit start
+    private void setTiltAndScheduleTick(IBlockData iblockdata, Level world, BlockPos blockposition, Tilt tilt, @Nullable SoundEvent soundeffect, @Nullable Entity entity) {
+        if (!setTilt(iblockdata, world, blockposition, tilt, entity)) return;
+        // CraftBukkit end
+        if (soundeffect != null) {
+            playTiltSound(world, blockposition, soundeffect);
         }
 
         int i = BigDripleafBlock.DELAY_UNTIL_NEXT_TILT_STATE.getInt(tilt);
 
         if (i != -1) {
-            level.scheduleTick(blockpos, (Block) this, i);
+            world.scheduleTick(blockposition, (Block) this, i);
         }
 
     }
 
-    private static void resetTilt(BlockState blockstate, Level level, BlockPos blockpos) {
-        setTilt(blockstate, level, blockpos, Tilt.NONE);
-        if (blockstate.getValue(BigDripleafBlock.TILT) != Tilt.NONE) {
-            playTiltSound(level, blockpos, SoundEvents.BIG_DRIPLEAF_TILT_UP);
+    private static void resetTilt(IBlockData state, Level level, BlockPos pos) {
+        setTilt(state, level, pos, Tilt.NONE, null); // CraftBukkit
+        if (state.getValue(BigDripleafBlock.TILT) != Tilt.NONE) {
+            playTiltSound(level, pos, SoundEvents.BIG_DRIPLEAF_TILT_UP);
         }
 
     }
 
-    private static void setTilt(BlockState blockstate, Level level, BlockPos blockpos, Tilt tilt) {
-        Tilt tilt1 = (Tilt) blockstate.getValue(BigDripleafBlock.TILT);
+    // CraftBukkit start
+    private static boolean setTilt(IBlockData iblockdata, Level world, BlockPos blockposition, Tilt tilt, @Nullable Entity entity) {
+        if (entity != null) {
+            if (!CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, iblockdata.setValue(BigDripleafBlock.TILT, tilt))) {
+                return false;
+            }
+        }
+        // CraftBukkit end
+        Tilt tilt1 = (Tilt) iblockdata.getValue(BigDripleafBlock.TILT);
 
-        level.setBlock(blockpos, (BlockState) blockstate.setValue(BigDripleafBlock.TILT, tilt), 2);
+        world.setBlock(blockposition, (IBlockData) iblockdata.setValue(BigDripleafBlock.TILT, tilt), 2);
         if (tilt.causesVibration() && tilt != tilt1) {
-            level.gameEvent((Entity) null, GameEvent.BLOCK_CHANGE, blockpos);
+            world.gameEvent((Entity) null, GameEvent.BLOCK_CHANGE, blockposition);
         }
 
+        return true; // CraftBukkit
     }
 
     @Override
-    @Override
-    public VoxelShape getCollisionShape(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, CollisionContext collisioncontext) {
-        return (VoxelShape) BigDripleafBlock.LEAF_SHAPES.get(blockstate.getValue(BigDripleafBlock.TILT));
+    public VoxelShape getCollisionShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
+        return (VoxelShape) BigDripleafBlock.LEAF_SHAPES.get(state.getValue(BigDripleafBlock.TILT));
     }
 
     @Override
-    @Override
-    public VoxelShape getShape(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, CollisionContext collisioncontext) {
-        return (VoxelShape) this.shapesCache.get(blockstate);
+    public VoxelShape getShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
+        return (VoxelShape) this.shapesCache.get(state);
     }
 
     @Override
-    @Override
-    public BlockState getStateForPlacement(BlockPlaceContext blockplacecontext) {
-        BlockState blockstate = blockplacecontext.getLevel().getBlockState(blockplacecontext.getClickedPos().below());
-        FluidState fluidstate = blockplacecontext.getLevel().getFluidState(blockplacecontext.getClickedPos());
-        boolean flag = blockstate.is(Blocks.BIG_DRIPLEAF) || blockstate.is(Blocks.BIG_DRIPLEAF_STEM);
+    public IBlockData getStateForPlacement(BlockPlaceContext context) {
+        IBlockData iblockdata = context.getLevel().getBlockState(context.getClickedPos().below());
+        FluidState fluid = context.getLevel().getFluidState(context.getClickedPos());
+        boolean flag = iblockdata.is(Blocks.BIG_DRIPLEAF) || iblockdata.is(Blocks.BIG_DRIPLEAF_STEM);
 
-        return (BlockState) ((BlockState) this.defaultBlockState().setValue(BigDripleafBlock.WATERLOGGED, fluidstate.isSourceOfType(Fluids.WATER))).setValue(BigDripleafBlock.FACING, flag ? (Direction) blockstate.getValue(BigDripleafBlock.FACING) : blockplacecontext.getHorizontalDirection().getOpposite());
+        return (IBlockData) ((IBlockData) this.defaultBlockState().setValue(BigDripleafBlock.WATERLOGGED, fluid.isSourceOfType(Fluids.WATER))).setValue(BigDripleafBlock.FACING, flag ? (Direction) iblockdata.getValue(BigDripleafBlock.FACING) : context.getHorizontalDirection().getOpposite());
     }
 
     @Override
-    @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> statedefinition_builder) {
-        statedefinition_builder.add(BigDripleafBlock.WATERLOGGED, BigDripleafBlock.FACING, BigDripleafBlock.TILT);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(BigDripleafBlock.WATERLOGGED, BigDripleafBlock.FACING, BigDripleafBlock.TILT);
     }
 }
