--- a/net/minecraft/world/level/block/PowderSnowBlock.java
+++ b/net/minecraft/world/level/block/PowderSnowBlock.java
@@ -23,8 +23,8 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.pathfinder.PathComputationType;
+import net.minecraft.world.level.block.state.IBlockData;
+import net.minecraft.world.level.pathfinder.PathMode;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.EntityCollisionContext;
@@ -43,46 +43,47 @@
     private static final double MINIMUM_FALL_DISTANCE_FOR_BIG_SOUND = 7.0D;
 
     @Override
-    @Override
     public MapCodec<PowderSnowBlock> codec() {
         return PowderSnowBlock.CODEC;
     }
 
-    public PowderSnowBlock(BlockBehaviour.Properties blockbehaviour_properties) {
-        super(blockbehaviour_properties);
+    public PowderSnowBlock(BlockBehaviour.Properties properties) {
+        super(properties);
     }
 
     @Override
-    @Override
-    public boolean skipRendering(BlockState blockstate, BlockState blockstate1, Direction direction) {
-        return blockstate1.is((Block) this) ? true : super.skipRendering(blockstate, blockstate1, direction);
+    public boolean skipRendering(IBlockData state, IBlockData adjacentState, Direction direction) {
+        return adjacentState.is((Block) this) ? true : super.skipRendering(state, adjacentState, direction);
     }
 
     @Override
-    @Override
-    public VoxelShape getOcclusionShape(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos) {
+    public VoxelShape getOcclusionShape(IBlockData state, BlockGetter level, BlockPos pos) {
         return Shapes.empty();
     }
 
     @Override
-    @Override
-    public void entityInside(BlockState blockstate, Level level, BlockPos blockpos, Entity entity) {
+    public void entityInside(IBlockData state, Level level, BlockPos pos, Entity entity) {
         if (!(entity instanceof LivingEntity) || entity.getFeetBlockState().is((Block) this)) {
-            entity.makeStuckInBlock(blockstate, new Vec3(0.8999999761581421D, 1.5D, 0.8999999761581421D));
+            entity.makeStuckInBlock(state, new Vec3(0.8999999761581421D, 1.5D, 0.8999999761581421D));
             if (level.isClientSide) {
                 RandomSource randomsource = level.getRandom();
                 boolean flag = entity.xOld != entity.getX() || entity.zOld != entity.getZ();
 
                 if (flag && randomsource.nextBoolean()) {
-                    level.addParticle(ParticleTypes.SNOWFLAKE, entity.getX(), (double) (blockpos.getY() + 1), entity.getZ(), (double) (Mth.randomBetween(randomsource, -1.0F, 1.0F) * 0.083333336F), 0.05000000074505806D, (double) (Mth.randomBetween(randomsource, -1.0F, 1.0F) * 0.083333336F));
+                    level.addParticle(ParticleTypes.SNOWFLAKE, entity.getX(), (double) (pos.getY() + 1), entity.getZ(), (double) (Mth.randomBetween(randomsource, -1.0F, 1.0F) * 0.083333336F), 0.05000000074505806D, (double) (Mth.randomBetween(randomsource, -1.0F, 1.0F) * 0.083333336F));
                 }
             }
         }
 
         entity.setIsInPowderSnow(true);
         if (!level.isClientSide) {
-            if (entity.isOnFire() && (level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) || entity instanceof Player) && entity.mayInteract(level, blockpos)) {
-                level.destroyBlock(blockpos, false);
+            // CraftBukkit start
+            if (entity.isOnFire() && entity.mayInteract(level, pos)) {
+                if (!org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(entity, pos, Blocks.AIR.defaultBlockState(), !(level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) || entity instanceof Player))) {
+                    return;
+                }
+                // CraftBukkit end
+                level.destroyBlock(pos, false);
             }
 
             entity.setSharedFlagOnFire(false);
@@ -91,23 +92,21 @@
     }
 
     @Override
-    @Override
-    public void fallOn(Level level, BlockState blockstate, BlockPos blockpos, Entity entity, float f) {
-        if ((double) f >= 4.0D && entity instanceof LivingEntity) {
-            LivingEntity livingentity = (LivingEntity) entity;
-            LivingEntity.Fallsounds livingentity_fallsounds = livingentity.getFallSounds();
-            SoundEvent soundevent = (double) f < 7.0D ? livingentity_fallsounds.small() : livingentity_fallsounds.big();
+    public void fallOn(Level level, IBlockData state, BlockPos pos, Entity entity, float fallDistance) {
+        if ((double) fallDistance >= 4.0D && entity instanceof LivingEntity) {
+            LivingEntity entityliving = (LivingEntity) entity;
+            LivingEntity.a entityliving_a = entityliving.getFallSounds();
+            SoundEvent soundeffect = (double) fallDistance < 7.0D ? entityliving_a.small() : entityliving_a.big();
 
-            entity.playSound(soundevent, 1.0F, 1.0F);
+            entity.playSound(soundeffect, 1.0F, 1.0F);
         }
     }
 
     @Override
-    @Override
-    public VoxelShape getCollisionShape(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, CollisionContext collisioncontext) {
-        if (collisioncontext instanceof EntityCollisionContext) {
-            EntityCollisionContext entitycollisioncontext = (EntityCollisionContext) collisioncontext;
-            Entity entity = entitycollisioncontext.getEntity();
+    public VoxelShape getCollisionShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
+        if (context instanceof EntityCollisionContext) {
+            EntityCollisionContext voxelshapecollisionentity = (EntityCollisionContext) context;
+            Entity entity = voxelshapecollisionentity.getEntity();
 
             if (entity != null) {
                 if (entity.fallDistance > 2.5F) {
@@ -116,8 +115,8 @@
 
                 boolean flag = entity instanceof FallingBlockEntity;
 
-                if (flag || canEntityWalkOnPowderSnow(entity) && collisioncontext.isAbove(Shapes.block(), blockpos, false) && !collisioncontext.isDescending()) {
-                    return super.getCollisionShape(blockstate, blockgetter, blockpos, collisioncontext);
+                if (flag || canEntityWalkOnPowderSnow(entity) && context.isAbove(Shapes.block(), pos, false) && !context.isDescending()) {
+                    return super.getCollisionShape(state, level, pos, context);
                 }
             }
         }
@@ -126,8 +125,7 @@
     }
 
     @Override
-    @Override
-    public VoxelShape getVisualShape(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, CollisionContext collisioncontext) {
+    public VoxelShape getVisualShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
         return Shapes.empty();
     }
 
@@ -136,25 +134,22 @@
     }
 
     @Override
-    @Override
-    public ItemStack pickupBlock(@Nullable Player player, LevelAccessor levelaccessor, BlockPos blockpos, BlockState blockstate) {
-        levelaccessor.setBlock(blockpos, Blocks.AIR.defaultBlockState(), 11);
-        if (!levelaccessor.isClientSide()) {
-            levelaccessor.levelEvent(2001, blockpos, Block.getId(blockstate));
+    public ItemStack pickupBlock(@Nullable Player entityhuman, LevelAccessor generatoraccess, BlockPos blockposition, IBlockData iblockdata) {
+        generatoraccess.setBlock(blockposition, Blocks.AIR.defaultBlockState(), 11);
+        if (!generatoraccess.isClientSide()) {
+            generatoraccess.levelEvent(2001, blockposition, Block.getId(iblockdata));
         }
 
         return new ItemStack(Items.POWDER_SNOW_BUCKET);
     }
 
     @Override
-    @Override
     public Optional<SoundEvent> getPickupSound() {
         return Optional.of(SoundEvents.BUCKET_FILL_POWDER_SNOW);
     }
 
     @Override
-    @Override
-    public boolean isPathfindable(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, PathComputationType pathcomputationtype) {
+    public boolean isPathfindable(IBlockData state, BlockGetter level, BlockPos pos, PathMode type) {
         return true;
     }
 }
