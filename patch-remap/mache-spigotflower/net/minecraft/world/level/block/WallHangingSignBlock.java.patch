--- a/net/minecraft/world/level/block/WallHangingSignBlock.java
+++ b/net/minecraft/world/level/block/WallHangingSignBlock.java
@@ -9,7 +9,7 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.HangingSignItem;
@@ -25,13 +25,13 @@
 import net.minecraft.world.level.block.entity.HangingSignBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
 import net.minecraft.world.level.block.state.properties.WoodType;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
-import net.minecraft.world.level.pathfinder.PathComputationType;
+import net.minecraft.world.level.pathfinder.PathMode;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
@@ -50,63 +50,57 @@
     private static final Map<Direction, VoxelShape> AABBS = Maps.newEnumMap(ImmutableMap.of(Direction.NORTH, WallHangingSignBlock.SHAPE_NORTHSOUTH, Direction.SOUTH, WallHangingSignBlock.SHAPE_NORTHSOUTH, Direction.EAST, WallHangingSignBlock.SHAPE_EASTWEST, Direction.WEST, WallHangingSignBlock.SHAPE_EASTWEST));
 
     @Override
-    @Override
     public MapCodec<WallHangingSignBlock> codec() {
         return WallHangingSignBlock.CODEC;
     }
 
-    public WallHangingSignBlock(WoodType woodtype, BlockBehaviour.Properties blockbehaviour_properties) {
-        super(woodtype, blockbehaviour_properties.sound(woodtype.hangingSignSoundType()));
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(WallHangingSignBlock.FACING, Direction.NORTH)).setValue(WallHangingSignBlock.WATERLOGGED, false));
+    public WallHangingSignBlock(WoodType blockpropertywood, BlockBehaviour.Properties blockbase_info) {
+        super(blockpropertywood, blockbase_info.sound(blockpropertywood.hangingSignSoundType()));
+        this.registerDefaultState((IBlockData) ((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(WallHangingSignBlock.FACING, Direction.NORTH)).setValue(WallHangingSignBlock.WATERLOGGED, false));
     }
 
     @Override
-    @Override
-    public InteractionResult use(BlockState blockstate, Level level, BlockPos blockpos, Player player, InteractionHand interactionhand, BlockHitResult blockhitresult) {
-        BlockEntity blockentity = level.getBlockEntity(blockpos);
+    public InteractionResult use(IBlockData state, Level level, BlockPos pos, Player player, EnumHand hand, BlockHitResult hit) {
+        BlockEntity tileentity = level.getBlockEntity(pos);
 
-        if (blockentity instanceof SignBlockEntity) {
-            SignBlockEntity signblockentity = (SignBlockEntity) blockentity;
-            ItemStack itemstack = player.getItemInHand(interactionhand);
+        if (tileentity instanceof SignBlockEntity) {
+            SignBlockEntity tileentitysign = (SignBlockEntity) tileentity;
+            ItemStack itemstack = player.getItemInHand(hand);
 
-            if (this.shouldTryToChainAnotherHangingSign(blockstate, player, blockhitresult, signblockentity, itemstack)) {
+            if (this.shouldTryToChainAnotherHangingSign(state, player, hit, tileentitysign, itemstack)) {
                 return InteractionResult.PASS;
             }
         }
 
-        return super.use(blockstate, level, blockpos, player, interactionhand, blockhitresult);
+        return super.use(state, level, pos, player, hand, hit);
     }
 
-    private boolean shouldTryToChainAnotherHangingSign(BlockState blockstate, Player player, BlockHitResult blockhitresult, SignBlockEntity signblockentity, ItemStack itemstack) {
-        return !signblockentity.canExecuteClickCommands(signblockentity.isFacingFrontText(player), player) && itemstack.getItem() instanceof HangingSignItem && !this.isHittingEditableSide(blockhitresult, blockstate);
+    private boolean shouldTryToChainAnotherHangingSign(IBlockData state, Player player, BlockHitResult hitResult, SignBlockEntity sign, ItemStack stack) {
+        return !sign.canExecuteClickCommands(sign.isFacingFrontText(player), player) && stack.getItem() instanceof HangingSignItem && !this.isHittingEditableSide(hitResult, state);
     }
 
-    private boolean isHittingEditableSide(BlockHitResult blockhitresult, BlockState blockstate) {
-        return blockhitresult.getDirection().getAxis() == ((Direction) blockstate.getValue(WallHangingSignBlock.FACING)).getAxis();
+    private boolean isHittingEditableSide(BlockHitResult hitResult, IBlockData state) {
+        return hitResult.getDirection().getAxis() == ((Direction) state.getValue(WallHangingSignBlock.FACING)).getAxis();
     }
 
     @Override
-    @Override
     public String getDescriptionId() {
         return this.asItem().getDescriptionId();
     }
 
     @Override
-    @Override
-    public VoxelShape getShape(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, CollisionContext collisioncontext) {
-        return (VoxelShape) WallHangingSignBlock.AABBS.get(blockstate.getValue(WallHangingSignBlock.FACING));
+    public VoxelShape getShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
+        return (VoxelShape) WallHangingSignBlock.AABBS.get(state.getValue(WallHangingSignBlock.FACING));
     }
 
     @Override
-    @Override
-    public VoxelShape getBlockSupportShape(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos) {
-        return this.getShape(blockstate, blockgetter, blockpos, CollisionContext.empty());
+    public VoxelShape getBlockSupportShape(IBlockData state, BlockGetter level, BlockPos pos) {
+        return this.getShape(state, level, pos, CollisionContext.empty());
     }
 
     @Override
-    @Override
-    public VoxelShape getCollisionShape(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, CollisionContext collisioncontext) {
-        switch ((Direction) blockstate.getValue(WallHangingSignBlock.FACING)) {
+    public VoxelShape getCollisionShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
+        switch ((Direction) state.getValue(WallHangingSignBlock.FACING)) {
             case EAST:
             case WEST:
                 return WallHangingSignBlock.PLANK_EASTWEST;
@@ -115,39 +109,38 @@
         }
     }
 
-    public boolean canPlace(BlockState blockstate, LevelReader levelreader, BlockPos blockpos) {
-        Direction direction = ((Direction) blockstate.getValue(WallHangingSignBlock.FACING)).getClockWise();
-        Direction direction1 = ((Direction) blockstate.getValue(WallHangingSignBlock.FACING)).getCounterClockWise();
+    public boolean canPlace(IBlockData state, LevelReader level, BlockPos pos) {
+        Direction enumdirection = ((Direction) state.getValue(WallHangingSignBlock.FACING)).getClockWise();
+        Direction enumdirection1 = ((Direction) state.getValue(WallHangingSignBlock.FACING)).getCounterClockWise();
 
-        return this.canAttachTo(levelreader, blockstate, blockpos.relative(direction), direction1) || this.canAttachTo(levelreader, blockstate, blockpos.relative(direction1), direction);
+        return this.canAttachTo(level, state, pos.relative(enumdirection), enumdirection1) || this.canAttachTo(level, state, pos.relative(enumdirection1), enumdirection);
     }
 
-    public boolean canAttachTo(LevelReader levelreader, BlockState blockstate, BlockPos blockpos, Direction direction) {
-        BlockState blockstate1 = levelreader.getBlockState(blockpos);
+    public boolean canAttachTo(LevelReader level, IBlockData state, BlockPos pos, Direction direction) {
+        IBlockData iblockdata1 = level.getBlockState(pos);
 
-        return blockstate1.is(BlockTags.WALL_HANGING_SIGNS) ? ((Direction) blockstate1.getValue(WallHangingSignBlock.FACING)).getAxis().test((Direction) blockstate.getValue(WallHangingSignBlock.FACING)) : blockstate1.isFaceSturdy(levelreader, blockpos, direction, SupportType.FULL);
+        return iblockdata1.is(BlockTags.WALL_HANGING_SIGNS) ? ((Direction) iblockdata1.getValue(WallHangingSignBlock.FACING)).getAxis().test((Direction) state.getValue(WallHangingSignBlock.FACING)) : iblockdata1.isFaceSturdy(level, pos, direction, SupportType.FULL);
     }
 
     @Nullable
     @Override
-    @Override
-    public BlockState getStateForPlacement(BlockPlaceContext blockplacecontext) {
-        BlockState blockstate = this.defaultBlockState();
-        FluidState fluidstate = blockplacecontext.getLevel().getFluidState(blockplacecontext.getClickedPos());
-        Level level = blockplacecontext.getLevel();
-        BlockPos blockpos = blockplacecontext.getClickedPos();
-        Direction[] adirection = blockplacecontext.getNearestLookingDirections();
-        int i = adirection.length;
+    public IBlockData getStateForPlacement(BlockPlaceContext context) {
+        IBlockData iblockdata = this.defaultBlockState();
+        FluidState fluid = context.getLevel().getFluidState(context.getClickedPos());
+        Level world = context.getLevel();
+        BlockPos blockposition = context.getClickedPos();
+        Direction[] aenumdirection = context.getNearestLookingDirections();
+        int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
-            Direction direction = adirection[j];
+            Direction enumdirection = aenumdirection[j];
 
-            if (direction.getAxis().isHorizontal() && !direction.getAxis().test(blockplacecontext.getClickedFace())) {
-                Direction direction1 = direction.getOpposite();
+            if (enumdirection.getAxis().isHorizontal() && !enumdirection.getAxis().test(context.getClickedFace())) {
+                Direction enumdirection1 = enumdirection.getOpposite();
 
-                blockstate = (BlockState) blockstate.setValue(WallHangingSignBlock.FACING, direction1);
-                if (blockstate.canSurvive(level, blockpos) && this.canPlace(blockstate, level, blockpos)) {
-                    return (BlockState) blockstate.setValue(WallHangingSignBlock.WATERLOGGED, fluidstate.getType() == Fluids.WATER);
+                iblockdata = (IBlockData) iblockdata.setValue(WallHangingSignBlock.FACING, enumdirection1);
+                if (iblockdata.canSurvive(world, blockposition) && this.canPlace(iblockdata, world, blockposition)) {
+                    return (IBlockData) iblockdata.setValue(WallHangingSignBlock.WATERLOGGED, fluid.getType() == Fluids.WATER);
                 }
             }
         }
@@ -156,51 +149,43 @@
     }
 
     @Override
-    @Override
-    public BlockState updateShape(BlockState blockstate, Direction direction, BlockState blockstate1, LevelAccessor levelaccessor, BlockPos blockpos, BlockPos blockpos1) {
-        return direction.getAxis() == ((Direction) blockstate.getValue(WallHangingSignBlock.FACING)).getClockWise().getAxis() && !blockstate.canSurvive(levelaccessor, blockpos) ? Blocks.AIR.defaultBlockState() : super.updateShape(blockstate, direction, blockstate1, levelaccessor, blockpos, blockpos1);
+    public IBlockData updateShape(IBlockData state, Direction facing, IBlockData facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
+        return facing.getAxis() == ((Direction) state.getValue(WallHangingSignBlock.FACING)).getClockWise().getAxis() && !state.canSurvive(level, currentPos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, facing, facingState, level, currentPos, facingPos);
     }
 
     @Override
-    @Override
-    public float getYRotationDegrees(BlockState blockstate) {
-        return ((Direction) blockstate.getValue(WallHangingSignBlock.FACING)).toYRot();
+    public float getYRotationDegrees(IBlockData state) {
+        return ((Direction) state.getValue(WallHangingSignBlock.FACING)).toYRot();
     }
 
     @Override
-    @Override
-    public BlockState rotate(BlockState blockstate, Rotation rotation) {
-        return (BlockState) blockstate.setValue(WallHangingSignBlock.FACING, rotation.rotate((Direction) blockstate.getValue(WallHangingSignBlock.FACING)));
+    public IBlockData rotate(IBlockData state, Rotation rotation) {
+        return (IBlockData) state.setValue(WallHangingSignBlock.FACING, rotation.rotate((Direction) state.getValue(WallHangingSignBlock.FACING)));
     }
 
     @Override
-    @Override
-    public BlockState mirror(BlockState blockstate, Mirror mirror) {
-        return blockstate.rotate(mirror.getRotation((Direction) blockstate.getValue(WallHangingSignBlock.FACING)));
+    public IBlockData mirror(IBlockData state, Mirror mirror) {
+        return state.rotate(mirror.getRotation((Direction) state.getValue(WallHangingSignBlock.FACING)));
     }
 
     @Override
-    @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> statedefinition_builder) {
-        statedefinition_builder.add(WallHangingSignBlock.FACING, WallHangingSignBlock.WATERLOGGED);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(WallHangingSignBlock.FACING, WallHangingSignBlock.WATERLOGGED);
     }
 
     @Override
-    @Override
-    public BlockEntity newBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        return new HangingSignBlockEntity(blockpos, blockstate);
+    public BlockEntity newBlockEntity(BlockPos pos, IBlockData state) {
+        return new HangingSignBlockEntity(pos, state);
     }
 
     @Override
-    @Override
-    public boolean isPathfindable(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, PathComputationType pathcomputationtype) {
+    public boolean isPathfindable(IBlockData state, BlockGetter level, BlockPos pos, PathMode type) {
         return false;
     }
 
     @Nullable
     @Override
-    @Override
-    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, BlockState blockstate, BlockEntityType<T> blockentitytype) {
-        return createTickerHelper(blockentitytype, BlockEntityType.HANGING_SIGN, SignBlockEntity::tick);
+    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, IBlockData state, BlockEntityType<T> blockEntityType) {
+        return null; // Craftbukkit - remove unnecessary sign ticking
     }
 }
