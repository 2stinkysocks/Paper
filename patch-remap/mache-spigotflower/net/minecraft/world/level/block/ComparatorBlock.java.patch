--- a/net/minecraft/world/level/block/ComparatorBlock.java
+++ b/net/minecraft/world/level/block/ComparatorBlock.java
@@ -9,7 +9,7 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.RandomSource;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.decoration.ItemFrame;
 import net.minecraft.world.entity.player.Player;
@@ -19,7 +19,7 @@
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.ComparatorBlockEntity;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.ComparatorMode;
@@ -27,6 +27,7 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.ticks.TickPriority;
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
 
 public class ComparatorBlock extends DiodeBlock implements EntityBlock {
 
@@ -34,77 +35,71 @@
     public static final EnumProperty<ComparatorMode> MODE = BlockStateProperties.MODE_COMPARATOR;
 
     @Override
-    @Override
     public MapCodec<ComparatorBlock> codec() {
         return ComparatorBlock.CODEC;
     }
 
-    public ComparatorBlock(BlockBehaviour.Properties blockbehaviour_properties) {
-        super(blockbehaviour_properties);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ComparatorBlock.FACING, Direction.NORTH)).setValue(ComparatorBlock.POWERED, false)).setValue(ComparatorBlock.MODE, ComparatorMode.COMPARE));
+    public ComparatorBlock(BlockBehaviour.Properties properties) {
+        super(properties);
+        this.registerDefaultState((IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(ComparatorBlock.FACING, Direction.NORTH)).setValue(ComparatorBlock.POWERED, false)).setValue(ComparatorBlock.MODE, ComparatorMode.COMPARE));
     }
 
     @Override
-    @Override
-    protected int getDelay(BlockState blockstate) {
+    protected int getDelay(IBlockData state) {
         return 2;
     }
 
     @Override
-    @Override
-    public BlockState updateShape(BlockState blockstate, Direction direction, BlockState blockstate1, LevelAccessor levelaccessor, BlockPos blockpos, BlockPos blockpos1) {
-        return direction == Direction.DOWN && !this.canSurviveOn(levelaccessor, blockpos1, blockstate1) ? Blocks.AIR.defaultBlockState() : super.updateShape(blockstate, direction, blockstate1, levelaccessor, blockpos, blockpos1);
+    public IBlockData updateShape(IBlockData state, Direction direction, IBlockData neighborState, LevelAccessor level, BlockPos pos, BlockPos neighborPos) {
+        return direction == Direction.DOWN && !this.canSurviveOn(level, neighborPos, neighborState) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, level, pos, neighborPos);
     }
 
     @Override
-    @Override
-    protected int getOutputSignal(BlockGetter blockgetter, BlockPos blockpos, BlockState blockstate) {
-        BlockEntity blockentity = blockgetter.getBlockEntity(blockpos);
+    protected int getOutputSignal(BlockGetter level, BlockPos pos, IBlockData state) {
+        BlockEntity tileentity = level.getBlockEntity(pos);
 
-        return blockentity instanceof ComparatorBlockEntity ? ((ComparatorBlockEntity) blockentity).getOutputSignal() : 0;
+        return tileentity instanceof ComparatorBlockEntity ? ((ComparatorBlockEntity) tileentity).getOutputSignal() : 0;
     }
 
-    private int calculateOutputSignal(Level level, BlockPos blockpos, BlockState blockstate) {
-        int i = this.getInputSignal(level, blockpos, blockstate);
+    private int calculateOutputSignal(Level level, BlockPos pos, IBlockData state) {
+        int i = this.getInputSignal(level, pos, state);
 
         if (i == 0) {
             return 0;
         } else {
-            int j = this.getAlternateSignal(level, blockpos, blockstate);
+            int j = this.getAlternateSignal(level, pos, state);
 
-            return j > i ? 0 : (blockstate.getValue(ComparatorBlock.MODE) == ComparatorMode.SUBTRACT ? i - j : i);
+            return j > i ? 0 : (state.getValue(ComparatorBlock.MODE) == ComparatorMode.SUBTRACT ? i - j : i);
         }
     }
 
     @Override
-    @Override
-    protected boolean shouldTurnOn(Level level, BlockPos blockpos, BlockState blockstate) {
-        int i = this.getInputSignal(level, blockpos, blockstate);
+    protected boolean shouldTurnOn(Level level, BlockPos pos, IBlockData state) {
+        int i = this.getInputSignal(level, pos, state);
 
         if (i == 0) {
             return false;
         } else {
-            int j = this.getAlternateSignal(level, blockpos, blockstate);
+            int j = this.getAlternateSignal(level, pos, state);
 
-            return i > j ? true : i == j && blockstate.getValue(ComparatorBlock.MODE) == ComparatorMode.COMPARE;
+            return i > j ? true : i == j && state.getValue(ComparatorBlock.MODE) == ComparatorMode.COMPARE;
         }
     }
 
     @Override
-    @Override
-    protected int getInputSignal(Level level, BlockPos blockpos, BlockState blockstate) {
-        int i = super.getInputSignal(level, blockpos, blockstate);
-        Direction direction = (Direction) blockstate.getValue(ComparatorBlock.FACING);
-        BlockPos blockpos1 = blockpos.relative(direction);
-        BlockState blockstate1 = level.getBlockState(blockpos1);
+    protected int getInputSignal(Level level, BlockPos pos, IBlockData state) {
+        int i = super.getInputSignal(level, pos, state);
+        Direction enumdirection = (Direction) state.getValue(ComparatorBlock.FACING);
+        BlockPos blockposition1 = pos.relative(enumdirection);
+        IBlockData iblockdata1 = level.getBlockState(blockposition1);
 
-        if (blockstate1.hasAnalogOutputSignal()) {
-            i = blockstate1.getAnalogOutputSignal(level, blockpos1);
-        } else if (i < 15 && blockstate1.isRedstoneConductor(level, blockpos1)) {
-            blockpos1 = blockpos1.relative(direction);
-            blockstate1 = level.getBlockState(blockpos1);
-            ItemFrame itemframe = this.getItemFrame(level, direction, blockpos1);
-            int j = Math.max(itemframe == null ? Integer.MIN_VALUE : itemframe.getAnalogOutput(), blockstate1.hasAnalogOutputSignal() ? blockstate1.getAnalogOutputSignal(level, blockpos1) : Integer.MIN_VALUE);
+        if (iblockdata1.hasAnalogOutputSignal()) {
+            i = iblockdata1.getAnalogOutputSignal(level, blockposition1);
+        } else if (i < 15 && iblockdata1.isRedstoneConductor(level, blockposition1)) {
+            blockposition1 = blockposition1.relative(enumdirection);
+            iblockdata1 = level.getBlockState(blockposition1);
+            ItemFrame entityitemframe = this.getItemFrame(level, enumdirection, blockposition1);
+            int j = Math.max(entityitemframe == null ? Integer.MIN_VALUE : entityitemframe.getAnalogOutput(), iblockdata1.hasAnalogOutputSignal() ? iblockdata1.getAnalogOutputSignal(level, blockposition1) : Integer.MIN_VALUE);
 
             if (j != Integer.MIN_VALUE) {
                 i = j;
@@ -115,98 +110,103 @@
     }
 
     @Nullable
-    private ItemFrame getItemFrame(Level level, Direction direction, BlockPos blockpos) {
-        List<ItemFrame> list = level.getEntitiesOfClass(ItemFrame.class, new AABB((double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ(), (double) (blockpos.getX() + 1), (double) (blockpos.getY() + 1), (double) (blockpos.getZ() + 1)), (itemframe) -> {
-            return itemframe != null && itemframe.getDirection() == direction;
+    private ItemFrame getItemFrame(Level level, Direction facing, BlockPos pos) {
+        // CraftBukkit - decompile error
+        List<ItemFrame> list = level.getEntitiesOfClass(ItemFrame.class, new AABB((double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), (double) (pos.getX() + 1), (double) (pos.getY() + 1), (double) (pos.getZ() + 1)), (java.util.function.Predicate<ItemFrame>) (entityitemframe) -> {
+            return entityitemframe != null && entityitemframe.getDirection() == facing;
         });
 
         return list.size() == 1 ? (ItemFrame) list.get(0) : null;
     }
 
     @Override
-    @Override
-    public InteractionResult use(BlockState blockstate, Level level, BlockPos blockpos, Player player, InteractionHand interactionhand, BlockHitResult blockhitresult) {
+    public InteractionResult use(IBlockData state, Level level, BlockPos pos, Player player, EnumHand hand, BlockHitResult hit) {
         if (!player.getAbilities().mayBuild) {
             return InteractionResult.PASS;
         } else {
-            blockstate = (BlockState) blockstate.cycle(ComparatorBlock.MODE);
-            float f = blockstate.getValue(ComparatorBlock.MODE) == ComparatorMode.SUBTRACT ? 0.55F : 0.5F;
+            state = (IBlockData) state.cycle(ComparatorBlock.MODE);
+            float f = state.getValue(ComparatorBlock.MODE) == ComparatorMode.SUBTRACT ? 0.55F : 0.5F;
 
-            level.playSound(player, blockpos, SoundEvents.COMPARATOR_CLICK, SoundSource.BLOCKS, 0.3F, f);
-            level.setBlock(blockpos, blockstate, 2);
-            this.refreshOutputState(level, blockpos, blockstate);
+            level.playSound(player, pos, SoundEvents.COMPARATOR_CLICK, SoundSource.BLOCKS, 0.3F, f);
+            level.setBlock(pos, state, 2);
+            this.refreshOutputState(level, pos, state);
             return InteractionResult.sidedSuccess(level.isClientSide);
         }
     }
 
     @Override
-    @Override
-    protected void checkTickOnNeighbor(Level level, BlockPos blockpos, BlockState blockstate) {
-        if (!level.getBlockTicks().willTickThisTick(blockpos, this)) {
-            int i = this.calculateOutputSignal(level, blockpos, blockstate);
-            BlockEntity blockentity = level.getBlockEntity(blockpos);
-            int j = blockentity instanceof ComparatorBlockEntity ? ((ComparatorBlockEntity) blockentity).getOutputSignal() : 0;
+    protected void checkTickOnNeighbor(Level level, BlockPos pos, IBlockData state) {
+        if (!level.getBlockTicks().willTickThisTick(pos, this)) {
+            int i = this.calculateOutputSignal(level, pos, state);
+            BlockEntity tileentity = level.getBlockEntity(pos);
+            int j = tileentity instanceof ComparatorBlockEntity ? ((ComparatorBlockEntity) tileentity).getOutputSignal() : 0;
 
-            if (i != j || (Boolean) blockstate.getValue(ComparatorBlock.POWERED) != this.shouldTurnOn(level, blockpos, blockstate)) {
-                TickPriority tickpriority = this.shouldPrioritize(level, blockpos, blockstate) ? TickPriority.HIGH : TickPriority.NORMAL;
+            if (i != j || (Boolean) state.getValue(ComparatorBlock.POWERED) != this.shouldTurnOn(level, pos, state)) {
+                TickPriority ticklistpriority = this.shouldPrioritize(level, pos, state) ? TickPriority.HIGH : TickPriority.NORMAL;
 
-                level.scheduleTick(blockpos, (Block) this, 2, tickpriority);
+                level.scheduleTick(pos, (Block) this, 2, ticklistpriority);
             }
 
         }
     }
 
-    private void refreshOutputState(Level level, BlockPos blockpos, BlockState blockstate) {
-        int i = this.calculateOutputSignal(level, blockpos, blockstate);
-        BlockEntity blockentity = level.getBlockEntity(blockpos);
+    private void refreshOutputState(Level level, BlockPos pos, IBlockData state) {
+        int i = this.calculateOutputSignal(level, pos, state);
+        BlockEntity tileentity = level.getBlockEntity(pos);
         int j = 0;
 
-        if (blockentity instanceof ComparatorBlockEntity) {
-            ComparatorBlockEntity comparatorblockentity = (ComparatorBlockEntity) blockentity;
+        if (tileentity instanceof ComparatorBlockEntity) {
+            ComparatorBlockEntity tileentitycomparator = (ComparatorBlockEntity) tileentity;
 
-            j = comparatorblockentity.getOutputSignal();
-            comparatorblockentity.setOutputSignal(i);
+            j = tileentitycomparator.getOutputSignal();
+            tileentitycomparator.setOutputSignal(i);
         }
 
-        if (j != i || blockstate.getValue(ComparatorBlock.MODE) == ComparatorMode.COMPARE) {
-            boolean flag = this.shouldTurnOn(level, blockpos, blockstate);
-            boolean flag1 = (Boolean) blockstate.getValue(ComparatorBlock.POWERED);
+        if (j != i || state.getValue(ComparatorBlock.MODE) == ComparatorMode.COMPARE) {
+            boolean flag = this.shouldTurnOn(level, pos, state);
+            boolean flag1 = (Boolean) state.getValue(ComparatorBlock.POWERED);
 
             if (flag1 && !flag) {
-                level.setBlock(blockpos, (BlockState) blockstate.setValue(ComparatorBlock.POWERED, false), 2);
+                // CraftBukkit start
+                if (CraftEventFactory.callRedstoneChange(level, pos, 15, 0).getNewCurrent() != 0) {
+                    return;
+                }
+                // CraftBukkit end
+                level.setBlock(pos, (IBlockData) state.setValue(ComparatorBlock.POWERED, false), 2);
             } else if (!flag1 && flag) {
-                level.setBlock(blockpos, (BlockState) blockstate.setValue(ComparatorBlock.POWERED, true), 2);
+                // CraftBukkit start
+                if (CraftEventFactory.callRedstoneChange(level, pos, 0, 15).getNewCurrent() != 15) {
+                    return;
+                }
+                // CraftBukkit end
+                level.setBlock(pos, (IBlockData) state.setValue(ComparatorBlock.POWERED, true), 2);
             }
 
-            this.updateNeighborsInFront(level, blockpos, blockstate);
+            this.updateNeighborsInFront(level, pos, state);
         }
 
     }
 
     @Override
-    @Override
-    public void tick(BlockState blockstate, ServerLevel serverlevel, BlockPos blockpos, RandomSource randomsource) {
-        this.refreshOutputState(serverlevel, blockpos, blockstate);
+    public void tick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
+        this.refreshOutputState(level, pos, state);
     }
 
     @Override
-    @Override
-    public boolean triggerEvent(BlockState blockstate, Level level, BlockPos blockpos, int i, int j) {
-        super.triggerEvent(blockstate, level, blockpos, i, j);
-        BlockEntity blockentity = level.getBlockEntity(blockpos);
+    public boolean triggerEvent(IBlockData state, Level level, BlockPos pos, int id, int param) {
+        super.triggerEvent(state, level, pos, id, param);
+        BlockEntity tileentity = level.getBlockEntity(pos);
 
-        return blockentity != null && blockentity.triggerEvent(i, j);
+        return tileentity != null && tileentity.triggerEvent(id, param);
     }
 
     @Override
-    @Override
-    public BlockEntity newBlockEntity(BlockPos blockpos, BlockState blockstate) {
-        return new ComparatorBlockEntity(blockpos, blockstate);
+    public BlockEntity newBlockEntity(BlockPos pos, IBlockData state) {
+        return new ComparatorBlockEntity(pos, state);
     }
 
     @Override
-    @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> statedefinition_builder) {
-        statedefinition_builder.add(ComparatorBlock.FACING, ComparatorBlock.MODE, ComparatorBlock.POWERED);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(ComparatorBlock.FACING, ComparatorBlock.MODE, ComparatorBlock.POWERED);
     }
 }
