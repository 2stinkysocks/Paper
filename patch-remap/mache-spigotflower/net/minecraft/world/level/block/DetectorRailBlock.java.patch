--- a/net/minecraft/world/level/block/DetectorRailBlock.java
+++ b/net/minecraft/world/level/block/DetectorRailBlock.java
@@ -17,7 +17,7 @@
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
@@ -25,6 +25,7 @@
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.block.state.properties.RailShape;
 import net.minecraft.world.phys.AABB;
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
 
 public class DetectorRailBlock extends BaseRailBlock {
 
@@ -34,57 +35,51 @@
     private static final int PRESSED_CHECK_PERIOD = 20;
 
     @Override
-    @Override
     public MapCodec<DetectorRailBlock> codec() {
         return DetectorRailBlock.CODEC;
     }
 
-    public DetectorRailBlock(BlockBehaviour.Properties blockbehaviour_properties) {
-        super(true, blockbehaviour_properties);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DetectorRailBlock.POWERED, false)).setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(DetectorRailBlock.WATERLOGGED, false));
+    public DetectorRailBlock(BlockBehaviour.Properties properties) {
+        super(true, properties);
+        this.registerDefaultState((IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(DetectorRailBlock.POWERED, false)).setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(DetectorRailBlock.WATERLOGGED, false));
     }
 
     @Override
-    @Override
-    public boolean isSignalSource(BlockState blockstate) {
+    public boolean isSignalSource(IBlockData state) {
         return true;
     }
 
     @Override
-    @Override
-    public void entityInside(BlockState blockstate, Level level, BlockPos blockpos, Entity entity) {
+    public void entityInside(IBlockData state, Level level, BlockPos pos, Entity entity) {
         if (!level.isClientSide) {
-            if (!(Boolean) blockstate.getValue(DetectorRailBlock.POWERED)) {
-                this.checkPressed(level, blockpos, blockstate);
+            if (!(Boolean) state.getValue(DetectorRailBlock.POWERED)) {
+                this.checkPressed(level, pos, state);
             }
         }
     }
 
     @Override
-    @Override
-    public void tick(BlockState blockstate, ServerLevel serverlevel, BlockPos blockpos, RandomSource randomsource) {
-        if ((Boolean) blockstate.getValue(DetectorRailBlock.POWERED)) {
-            this.checkPressed(serverlevel, blockpos, blockstate);
+    public void tick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
+        if ((Boolean) state.getValue(DetectorRailBlock.POWERED)) {
+            this.checkPressed(level, pos, state);
         }
     }
 
     @Override
-    @Override
-    public int getSignal(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, Direction direction) {
-        return (Boolean) blockstate.getValue(DetectorRailBlock.POWERED) ? 15 : 0;
+    public int getSignal(IBlockData blockState, BlockGetter blockAccess, BlockPos pos, Direction side) {
+        return (Boolean) blockState.getValue(DetectorRailBlock.POWERED) ? 15 : 0;
     }
 
     @Override
-    @Override
-    public int getDirectSignal(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, Direction direction) {
-        return !(Boolean) blockstate.getValue(DetectorRailBlock.POWERED) ? 0 : (direction == Direction.UP ? 15 : 0);
+    public int getDirectSignal(IBlockData blockState, BlockGetter blockAccess, BlockPos pos, Direction side) {
+        return !(Boolean) blockState.getValue(DetectorRailBlock.POWERED) ? 0 : (side == Direction.UP ? 15 : 0);
     }
 
-    private void checkPressed(Level level, BlockPos blockpos, BlockState blockstate) {
-        if (this.canSurvive(blockstate, level, blockpos)) {
-            boolean flag = (Boolean) blockstate.getValue(DetectorRailBlock.POWERED);
+    private void checkPressed(Level level, BlockPos pos, IBlockData state) {
+        if (this.canSurvive(state, level, pos)) {
+            boolean flag = (Boolean) state.getValue(DetectorRailBlock.POWERED);
             boolean flag1 = false;
-            List<AbstractMinecart> list = this.getInteractingMinecartOfType(level, blockpos, AbstractMinecart.class, (entity) -> {
+            List<AbstractMinecart> list = this.getInteractingMinecartOfType(level, pos, AbstractMinecart.class, (entity) -> {
                 return true;
             });
 
@@ -92,75 +87,81 @@
                 flag1 = true;
             }
 
-            BlockState blockstate1;
+            IBlockData iblockdata1;
+            // CraftBukkit start
+            if (flag != flag1) {
+                org.bukkit.block.Block block = level.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
 
+                BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, flag ? 15 : 0, flag1 ? 15 : 0);
+                level.getCraftServer().getPluginManager().callEvent(eventRedstone);
+
+                flag1 = eventRedstone.getNewCurrent() > 0;
+            }
+            // CraftBukkit end
+
             if (flag1 && !flag) {
-                blockstate1 = (BlockState) blockstate.setValue(DetectorRailBlock.POWERED, true);
-                level.setBlock(blockpos, blockstate1, 3);
-                this.updatePowerToConnected(level, blockpos, blockstate1, true);
-                level.updateNeighborsAt(blockpos, this);
-                level.updateNeighborsAt(blockpos.below(), this);
-                level.setBlocksDirty(blockpos, blockstate, blockstate1);
+                iblockdata1 = (IBlockData) state.setValue(DetectorRailBlock.POWERED, true);
+                level.setBlock(pos, iblockdata1, 3);
+                this.updatePowerToConnected(level, pos, iblockdata1, true);
+                level.updateNeighborsAt(pos, this);
+                level.updateNeighborsAt(pos.below(), this);
+                level.setBlocksDirty(pos, state, iblockdata1);
             }
 
             if (!flag1 && flag) {
-                blockstate1 = (BlockState) blockstate.setValue(DetectorRailBlock.POWERED, false);
-                level.setBlock(blockpos, blockstate1, 3);
-                this.updatePowerToConnected(level, blockpos, blockstate1, false);
-                level.updateNeighborsAt(blockpos, this);
-                level.updateNeighborsAt(blockpos.below(), this);
-                level.setBlocksDirty(blockpos, blockstate, blockstate1);
+                iblockdata1 = (IBlockData) state.setValue(DetectorRailBlock.POWERED, false);
+                level.setBlock(pos, iblockdata1, 3);
+                this.updatePowerToConnected(level, pos, iblockdata1, false);
+                level.updateNeighborsAt(pos, this);
+                level.updateNeighborsAt(pos.below(), this);
+                level.setBlocksDirty(pos, state, iblockdata1);
             }
 
             if (flag1) {
-                level.scheduleTick(blockpos, (Block) this, 20);
+                level.scheduleTick(pos, (Block) this, 20);
             }
 
-            level.updateNeighbourForOutputSignal(blockpos, this);
+            level.updateNeighbourForOutputSignal(pos, this);
         }
     }
 
-    protected void updatePowerToConnected(Level level, BlockPos blockpos, BlockState blockstate, boolean flag) {
-        RailState railstate = new RailState(level, blockpos, blockstate);
-        List<BlockPos> list = railstate.getConnections();
+    protected void updatePowerToConnected(Level level, BlockPos pos, IBlockData state, boolean powered) {
+        RailState minecarttracklogic = new RailState(level, pos, state);
+        List<BlockPos> list = minecarttracklogic.getConnections();
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
-            BlockPos blockpos1 = (BlockPos) iterator.next();
-            BlockState blockstate1 = level.getBlockState(blockpos1);
+            BlockPos blockposition1 = (BlockPos) iterator.next();
+            IBlockData iblockdata1 = level.getBlockState(blockposition1);
 
-            level.neighborChanged(blockstate1, blockpos1, blockstate1.getBlock(), blockpos, false);
+            level.neighborChanged(iblockdata1, blockposition1, iblockdata1.getBlock(), pos, false);
         }
 
     }
 
     @Override
-    @Override
-    public void onPlace(BlockState blockstate, Level level, BlockPos blockpos, BlockState blockstate1, boolean flag) {
-        if (!blockstate1.is(blockstate.getBlock())) {
-            BlockState blockstate2 = this.updateState(blockstate, level, blockpos, flag);
+    public void onPlace(IBlockData state, Level level, BlockPos pos, IBlockData oldState, boolean isMoving) {
+        if (!oldState.is(state.getBlock())) {
+            IBlockData iblockdata2 = this.updateState(state, level, pos, isMoving);
 
-            this.checkPressed(level, blockpos, blockstate2);
+            this.checkPressed(level, pos, iblockdata2);
         }
     }
 
     @Override
-    @Override
     public Property<RailShape> getShapeProperty() {
         return DetectorRailBlock.SHAPE;
     }
 
     @Override
-    @Override
-    public boolean hasAnalogOutputSignal(BlockState blockstate) {
+    public boolean hasAnalogOutputSignal(IBlockData state) {
         return true;
     }
 
     @Override
-    @Override
-    public int getAnalogOutputSignal(BlockState blockstate, Level level, BlockPos blockpos) {
-        if ((Boolean) blockstate.getValue(DetectorRailBlock.POWERED)) {
-            List<MinecartCommandBlock> list = this.getInteractingMinecartOfType(level, blockpos, MinecartCommandBlock.class, (entity) -> {
+    public int getAnalogOutputSignal(IBlockData blockState, Level level, BlockPos pos) {
+        if ((Boolean) blockState.getValue(DetectorRailBlock.POWERED)) {
+            List<MinecartCommandBlock> list = this.getInteractingMinecartOfType(level, pos, MinecartCommandBlock.class, (entity) -> {
                 return true;
             });
 
@@ -168,7 +169,7 @@
                 return ((MinecartCommandBlock) list.get(0)).getCommandBlock().getSuccessCount();
             }
 
-            List<AbstractMinecart> list1 = this.getInteractingMinecartOfType(level, blockpos, AbstractMinecart.class, EntitySelector.CONTAINER_ENTITY_SELECTOR);
+            List<AbstractMinecart> list1 = this.getInteractingMinecartOfType(level, pos, AbstractMinecart.class, EntitySelector.CONTAINER_ENTITY_SELECTOR);
 
             if (!list1.isEmpty()) {
                 return AbstractContainerMenu.getRedstoneSignalFromContainer((Container) list1.get(0));
@@ -178,140 +179,137 @@
         return 0;
     }
 
-    private <T extends AbstractMinecart> List<T> getInteractingMinecartOfType(Level level, BlockPos blockpos, Class<T> oclass, Predicate<Entity> predicate) {
-        return level.getEntitiesOfClass(oclass, this.getSearchBB(blockpos), predicate);
+    private <T extends AbstractMinecart> List<T> getInteractingMinecartOfType(Level level, BlockPos pos, Class<T> cartType, Predicate<Entity> filter) {
+        return level.getEntitiesOfClass(cartType, this.getSearchBB(pos), filter);
     }
 
-    private AABB getSearchBB(BlockPos blockpos) {
+    private AABB getSearchBB(BlockPos pos) {
         double d0 = 0.2D;
 
-        return new AABB((double) blockpos.getX() + 0.2D, (double) blockpos.getY(), (double) blockpos.getZ() + 0.2D, (double) (blockpos.getX() + 1) - 0.2D, (double) (blockpos.getY() + 1) - 0.2D, (double) (blockpos.getZ() + 1) - 0.2D);
+        return new AABB((double) pos.getX() + 0.2D, (double) pos.getY(), (double) pos.getZ() + 0.2D, (double) (pos.getX() + 1) - 0.2D, (double) (pos.getY() + 1) - 0.2D, (double) (pos.getZ() + 1) - 0.2D);
     }
 
     @Override
-    @Override
-    public BlockState rotate(BlockState blockstate, Rotation rotation) {
+    public IBlockData rotate(IBlockData state, Rotation rotation) {
         switch (rotation) {
             case CLOCKWISE_180:
-                switch ((RailShape) blockstate.getValue(DetectorRailBlock.SHAPE)) {
+                switch ((RailShape) state.getValue(DetectorRailBlock.SHAPE)) {
                     case ASCENDING_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case ASCENDING_NORTH:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case SOUTH_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case NORTH_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
                 }
             case COUNTERCLOCKWISE_90:
-                switch ((RailShape) blockstate.getValue(DetectorRailBlock.SHAPE)) {
+                switch ((RailShape) state.getValue(DetectorRailBlock.SHAPE)) {
                     case ASCENDING_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case ASCENDING_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_NORTH:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case ASCENDING_SOUTH:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case SOUTH_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case SOUTH_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case NORTH_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case NORTH_SOUTH:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.EAST_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.EAST_WEST);
                     case EAST_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH);
                 }
             case CLOCKWISE_90:
-                switch ((RailShape) blockstate.getValue(DetectorRailBlock.SHAPE)) {
+                switch ((RailShape) state.getValue(DetectorRailBlock.SHAPE)) {
                     case ASCENDING_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case ASCENDING_NORTH:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case ASCENDING_SOUTH:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case SOUTH_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case NORTH_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case NORTH_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_SOUTH:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.EAST_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.EAST_WEST);
                     case EAST_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH);
                 }
             default:
-                return blockstate;
+                return state;
         }
     }
 
     @Override
-    @Override
-    public BlockState mirror(BlockState blockstate, Mirror mirror) {
-        RailShape railshape = (RailShape) blockstate.getValue(DetectorRailBlock.SHAPE);
+    public IBlockData mirror(IBlockData state, Mirror mirror) {
+        RailShape blockpropertytrackposition = (RailShape) state.getValue(DetectorRailBlock.SHAPE);
 
         switch (mirror) {
             case LEFT_RIGHT:
-                switch (railshape) {
+                switch (blockpropertytrackposition) {
                     case ASCENDING_NORTH:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case SOUTH_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case NORTH_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case NORTH_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     default:
-                        return super.mirror(blockstate, mirror);
+                        return super.mirror(state, mirror);
                 }
             case FRONT_BACK:
-                switch (railshape) {
+                switch (blockpropertytrackposition) {
                     case ASCENDING_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case ASCENDING_NORTH:
                     case ASCENDING_SOUTH:
                     default:
                         break;
                     case SOUTH_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_WEST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case NORTH_EAST:
-                        return (BlockState) blockstate.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return (IBlockData) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
                 }
         }
 
-        return super.mirror(blockstate, mirror);
+        return super.mirror(state, mirror);
     }
 
     @Override
-    @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> statedefinition_builder) {
-        statedefinition_builder.add(DetectorRailBlock.SHAPE, DetectorRailBlock.POWERED, DetectorRailBlock.WATERLOGGED);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(DetectorRailBlock.SHAPE, DetectorRailBlock.POWERED, DetectorRailBlock.WATERLOGGED);
     }
 }
