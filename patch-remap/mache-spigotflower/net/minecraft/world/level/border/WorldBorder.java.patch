--- a/net/minecraft/world/level/border/WorldBorder.java
+++ b/net/minecraft/world/level/border/WorldBorder.java
@@ -27,33 +27,34 @@
     private double centerX;
     private double centerZ;
     int absoluteMaxSize = 29999984;
-    private WorldBorder.BorderExtent extent = new WorldBorder.StaticBorderExtent(5.9999968E7D);
+    private WorldBorder.a extent = new WorldBorder.StaticBorderExtent(5.9999968E7D);
     public static final WorldBorder.Settings DEFAULT_SETTINGS = new WorldBorder.Settings(0.0D, 0.0D, 0.2D, 5.0D, 5, 15, 5.9999968E7D, 0L, 0.0D);
+    public net.minecraft.server.level.ServerLevel world; // CraftBukkit
 
     public WorldBorder() {}
 
-    public boolean isWithinBounds(BlockPos blockpos) {
-        return (double) (blockpos.getX() + 1) > this.getMinX() && (double) blockpos.getX() < this.getMaxX() && (double) (blockpos.getZ() + 1) > this.getMinZ() && (double) blockpos.getZ() < this.getMaxZ();
+    public boolean isWithinBounds(BlockPos pos) {
+        return (double) (pos.getX() + 1) > this.getMinX() && (double) pos.getX() < this.getMaxX() && (double) (pos.getZ() + 1) > this.getMinZ() && (double) pos.getZ() < this.getMaxZ();
     }
 
-    public boolean isWithinBounds(ChunkPos chunkpos) {
-        return (double) chunkpos.getMaxBlockX() > this.getMinX() && (double) chunkpos.getMinBlockX() < this.getMaxX() && (double) chunkpos.getMaxBlockZ() > this.getMinZ() && (double) chunkpos.getMinBlockZ() < this.getMaxZ();
+    public boolean isWithinBounds(ChunkPos chunkPos) {
+        return (double) chunkPos.getMaxBlockX() > this.getMinX() && (double) chunkPos.getMinBlockX() < this.getMaxX() && (double) chunkPos.getMaxBlockZ() > this.getMinZ() && (double) chunkPos.getMinBlockZ() < this.getMaxZ();
     }
 
-    public boolean isWithinBounds(double d0, double d1) {
-        return d0 > this.getMinX() && d0 < this.getMaxX() && d1 > this.getMinZ() && d1 < this.getMaxZ();
+    public boolean isWithinBounds(double x, double d1) {
+        return x > this.getMinX() && x < this.getMaxX() && d1 > this.getMinZ() && d1 < this.getMaxZ();
     }
 
-    public boolean isWithinBounds(double d0, double d1, double d2) {
-        return d0 > this.getMinX() - d2 && d0 < this.getMaxX() + d2 && d1 > this.getMinZ() - d2 && d1 < this.getMaxZ() + d2;
+    public boolean isWithinBounds(double x, double d1, double z) {
+        return x > this.getMinX() - z && x < this.getMaxX() + z && d1 > this.getMinZ() - z && d1 < this.getMaxZ() + z;
     }
 
-    public boolean isWithinBounds(AABB aabb) {
-        return aabb.maxX > this.getMinX() && aabb.minX < this.getMaxX() && aabb.maxZ > this.getMinZ() && aabb.minZ < this.getMaxZ();
+    public boolean isWithinBounds(AABB box) {
+        return box.maxX > this.getMinX() && box.minX < this.getMaxX() && box.maxZ > this.getMinZ() && box.minZ < this.getMaxZ();
     }
 
-    public BlockPos clampToBounds(double d0, double d1, double d2) {
-        return BlockPos.containing(Mth.clamp(d0, this.getMinX(), this.getMaxX()), d1, Mth.clamp(d2, this.getMinZ(), this.getMaxZ()));
+    public BlockPos clampToBounds(double x, double d1, double y) {
+        return BlockPos.containing(Mth.clamp(x, this.getMinX(), this.getMaxX()), d1, Mth.clamp(y, this.getMinZ(), this.getMaxZ()));
     }
 
     public double getDistanceToBorder(Entity entity) {
@@ -64,19 +65,19 @@
         return this.extent.getCollisionShape();
     }
 
-    public double getDistanceToBorder(double d0, double d1) {
+    public double getDistanceToBorder(double x, double d1) {
         double d2 = d1 - this.getMinZ();
         double d3 = this.getMaxZ() - d1;
-        double d4 = d0 - this.getMinX();
-        double d5 = this.getMaxX() - d0;
+        double d4 = x - this.getMinX();
+        double d5 = this.getMaxX() - x;
         double d6 = Math.min(d4, d5);
 
         d6 = Math.min(d6, d2);
         return Math.min(d6, d3);
     }
 
-    public boolean isInsideCloseToBorder(Entity entity, AABB aabb) {
-        double d0 = Math.max(Mth.absMax(aabb.getXsize(), aabb.getZsize()), 1.0D);
+    public boolean isInsideCloseToBorder(Entity entity, AABB bounds) {
+        double d0 = Math.max(Mth.absMax(bounds.getXsize(), bounds.getZsize()), 1.0D);
 
         return this.getDistanceToBorder(entity) < d0 * 2.0D && this.isWithinBounds(entity.getX(), entity.getZ(), d0);
     }
@@ -109,16 +110,16 @@
         return this.centerZ;
     }
 
-    public void setCenter(double d0, double d1) {
-        this.centerX = d0;
+    public void setCenter(double x, double d1) {
+        this.centerX = x;
         this.centerZ = d1;
         this.extent.onCenterChange();
         Iterator iterator = this.getListeners().iterator();
 
         while (iterator.hasNext()) {
-            BorderChangeListener borderchangelistener = (BorderChangeListener) iterator.next();
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
 
-            borderchangelistener.onBorderCenterSet(this, d0, d1);
+            iworldborderlistener.onBorderCenterSet(this, x, d1);
         }
 
     }
@@ -135,26 +136,26 @@
         return this.extent.getLerpTarget();
     }
 
-    public void setSize(double d0) {
-        this.extent = new WorldBorder.StaticBorderExtent(d0);
+    public void setSize(double size) {
+        this.extent = new WorldBorder.StaticBorderExtent(size);
         Iterator iterator = this.getListeners().iterator();
 
         while (iterator.hasNext()) {
-            BorderChangeListener borderchangelistener = (BorderChangeListener) iterator.next();
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
 
-            borderchangelistener.onBorderSizeSet(this, d0);
+            iworldborderlistener.onBorderSizeSet(this, size);
         }
 
     }
 
-    public void lerpSizeBetween(double d0, double d1, long i) {
-        this.extent = (WorldBorder.BorderExtent) (d0 == d1 ? new WorldBorder.StaticBorderExtent(d1) : new WorldBorder.MovingBorderExtent(d0, d1, i));
+    public void lerpSizeBetween(double oldSize, double d1, long newSize) {
+        this.extent = (WorldBorder.a) (oldSize == d1 ? new WorldBorder.StaticBorderExtent(d1) : new WorldBorder.MovingBorderExtent(oldSize, d1, newSize));
         Iterator iterator = this.getListeners().iterator();
 
         while (iterator.hasNext()) {
-            BorderChangeListener borderchangelistener = (BorderChangeListener) iterator.next();
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
 
-            borderchangelistener.onBorderSizeLerping(this, d0, d1, i);
+            iworldborderlistener.onBorderSizeLerping(this, oldSize, d1, newSize);
         }
 
     }
@@ -163,16 +164,17 @@
         return Lists.newArrayList(this.listeners);
     }
 
-    public void addListener(BorderChangeListener borderchangelistener) {
-        this.listeners.add(borderchangelistener);
+    public void addListener(BorderChangeListener listener) {
+        if (listeners.contains(listener)) return; // CraftBukkit
+        this.listeners.add(listener);
     }
 
-    public void removeListener(BorderChangeListener borderchangelistener) {
-        this.listeners.remove(borderchangelistener);
+    public void removeListener(BorderChangeListener listener) {
+        this.listeners.remove(listener);
     }
 
-    public void setAbsoluteMaxSize(int i) {
-        this.absoluteMaxSize = i;
+    public void setAbsoluteMaxSize(int size) {
+        this.absoluteMaxSize = size;
         this.extent.onAbsoluteMaxSizeChange();
     }
 
@@ -184,14 +186,14 @@
         return this.damageSafeZone;
     }
 
-    public void setDamageSafeZone(double d0) {
-        this.damageSafeZone = d0;
+    public void setDamageSafeZone(double damageSafeZone) {
+        this.damageSafeZone = damageSafeZone;
         Iterator iterator = this.getListeners().iterator();
 
         while (iterator.hasNext()) {
-            BorderChangeListener borderchangelistener = (BorderChangeListener) iterator.next();
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
 
-            borderchangelistener.onBorderSetDamageSafeZOne(this, d0);
+            iworldborderlistener.onBorderSetDamageSafeZOne(this, damageSafeZone);
         }
 
     }
@@ -200,14 +202,14 @@
         return this.damagePerBlock;
     }
 
-    public void setDamagePerBlock(double d0) {
-        this.damagePerBlock = d0;
+    public void setDamagePerBlock(double damagePerBlock) {
+        this.damagePerBlock = damagePerBlock;
         Iterator iterator = this.getListeners().iterator();
 
         while (iterator.hasNext()) {
-            BorderChangeListener borderchangelistener = (BorderChangeListener) iterator.next();
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
 
-            borderchangelistener.onBorderSetDamagePerBlock(this, d0);
+            iworldborderlistener.onBorderSetDamagePerBlock(this, damagePerBlock);
         }
 
     }
@@ -220,14 +222,14 @@
         return this.warningTime;
     }
 
-    public void setWarningTime(int i) {
-        this.warningTime = i;
+    public void setWarningTime(int warningTime) {
+        this.warningTime = warningTime;
         Iterator iterator = this.getListeners().iterator();
 
         while (iterator.hasNext()) {
-            BorderChangeListener borderchangelistener = (BorderChangeListener) iterator.next();
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
 
-            borderchangelistener.onBorderSetWarningTime(this, i);
+            iworldborderlistener.onBorderSetWarningTime(this, warningTime);
         }
 
     }
@@ -236,14 +238,14 @@
         return this.warningBlocks;
     }
 
-    public void setWarningBlocks(int i) {
-        this.warningBlocks = i;
+    public void setWarningBlocks(int warningDistance) {
+        this.warningBlocks = warningDistance;
         Iterator iterator = this.getListeners().iterator();
 
         while (iterator.hasNext()) {
-            BorderChangeListener borderchangelistener = (BorderChangeListener) iterator.next();
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
 
-            borderchangelistener.onBorderSetWarningBlocks(this, i);
+            iworldborderlistener.onBorderSetWarningBlocks(this, warningDistance);
         }
 
     }
@@ -256,21 +258,21 @@
         return new WorldBorder.Settings(this);
     }
 
-    public void applySettings(WorldBorder.Settings worldborder_settings) {
-        this.setCenter(worldborder_settings.getCenterX(), worldborder_settings.getCenterZ());
-        this.setDamagePerBlock(worldborder_settings.getDamagePerBlock());
-        this.setDamageSafeZone(worldborder_settings.getSafeZone());
-        this.setWarningBlocks(worldborder_settings.getWarningBlocks());
-        this.setWarningTime(worldborder_settings.getWarningTime());
-        if (worldborder_settings.getSizeLerpTime() > 0L) {
-            this.lerpSizeBetween(worldborder_settings.getSize(), worldborder_settings.getSizeLerpTarget(), worldborder_settings.getSizeLerpTime());
+    public void applySettings(WorldBorder.Settings serializer) {
+        this.setCenter(serializer.getCenterX(), serializer.getCenterZ());
+        this.setDamagePerBlock(serializer.getDamagePerBlock());
+        this.setDamageSafeZone(serializer.getSafeZone());
+        this.setWarningBlocks(serializer.getWarningBlocks());
+        this.setWarningTime(serializer.getWarningTime());
+        if (serializer.getSizeLerpTime() > 0L) {
+            this.lerpSizeBetween(serializer.getSize(), serializer.getSizeLerpTarget(), serializer.getSizeLerpTime());
         } else {
-            this.setSize(worldborder_settings.getSize());
+            this.setSize(serializer.getSize());
         }
 
     }
 
-    private class StaticBorderExtent implements WorldBorder.BorderExtent {
+    private class StaticBorderExtent implements WorldBorder.a {
 
         private final double size;
         private double minX;
@@ -285,55 +287,46 @@
         }
 
         @Override
-        @Override
         public double getMinX() {
             return this.minX;
         }
 
         @Override
-        @Override
         public double getMaxX() {
             return this.maxX;
         }
 
         @Override
-        @Override
         public double getMinZ() {
             return this.minZ;
         }
 
         @Override
-        @Override
         public double getMaxZ() {
             return this.maxZ;
         }
 
         @Override
-        @Override
         public double getSize() {
             return this.size;
         }
 
         @Override
-        @Override
         public BorderStatus getStatus() {
             return BorderStatus.STATIONARY;
         }
 
         @Override
-        @Override
         public double getLerpSpeed() {
             return 0.0D;
         }
 
         @Override
-        @Override
         public long getLerpRemainingTime() {
             return 0L;
         }
 
         @Override
-        @Override
         public double getLerpTarget() {
             return this.size;
         }
@@ -347,31 +340,27 @@
         }
 
         @Override
-        @Override
         public void onAbsoluteMaxSizeChange() {
             this.updateBox();
         }
 
         @Override
-        @Override
         public void onCenterChange() {
             this.updateBox();
         }
 
         @Override
-        @Override
-        public WorldBorder.BorderExtent update() {
+        public WorldBorder.a update() {
             return this;
         }
 
         @Override
-        @Override
         public VoxelShape getCollisionShape() {
             return this.shape;
         }
     }
 
-    private interface BorderExtent {
+    private interface a {
 
         double getMinX();
 
@@ -395,12 +384,12 @@
 
         void onCenterChange();
 
-        WorldBorder.BorderExtent update();
+        WorldBorder.a update();
 
         VoxelShape getCollisionShape();
     }
 
-    private class MovingBorderExtent implements WorldBorder.BorderExtent {
+    private class MovingBorderExtent implements WorldBorder.a {
 
         private final double from;
         private final double to;
@@ -417,31 +406,26 @@
         }
 
         @Override
-        @Override
         public double getMinX() {
             return Mth.clamp(WorldBorder.this.getCenterX() - this.getSize() / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
         }
 
         @Override
-        @Override
         public double getMinZ() {
             return Mth.clamp(WorldBorder.this.getCenterZ() - this.getSize() / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
         }
 
         @Override
-        @Override
         public double getMaxX() {
             return Mth.clamp(WorldBorder.this.getCenterX() + this.getSize() / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
         }
 
         @Override
-        @Override
         public double getMaxZ() {
             return Mth.clamp(WorldBorder.this.getCenterZ() + this.getSize() / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
         }
 
         @Override
-        @Override
         public double getSize() {
             double d0 = (double) (Util.getMillis() - this.lerpBegin) / this.lerpDuration;
 
@@ -449,45 +433,37 @@
         }
 
         @Override
-        @Override
         public double getLerpSpeed() {
             return Math.abs(this.from - this.to) / (double) (this.lerpEnd - this.lerpBegin);
         }
 
         @Override
-        @Override
         public long getLerpRemainingTime() {
             return this.lerpEnd - Util.getMillis();
         }
 
         @Override
-        @Override
         public double getLerpTarget() {
             return this.to;
         }
 
         @Override
-        @Override
         public BorderStatus getStatus() {
             return this.to < this.from ? BorderStatus.SHRINKING : BorderStatus.GROWING;
         }
 
         @Override
-        @Override
         public void onCenterChange() {}
 
         @Override
-        @Override
         public void onAbsoluteMaxSizeChange() {}
 
         @Override
-        @Override
-        public WorldBorder.BorderExtent update() {
-            return (WorldBorder.BorderExtent) (this.getLerpRemainingTime() <= 0L ? WorldBorder.this.new StaticBorderExtent(this.to) : this);
+        public WorldBorder.a update() {
+            return (WorldBorder.a) (this.getLerpRemainingTime() <= 0L ? WorldBorder.this.new StaticBorderExtent(this.to) : this);
         }
 
         @Override
-        @Override
         public VoxelShape getCollisionShape() {
             return Shapes.join(Shapes.INFINITY, Shapes.box(Math.floor(this.getMinX()), Double.NEGATIVE_INFINITY, Math.floor(this.getMinZ()), Math.ceil(this.getMaxX()), Double.POSITIVE_INFINITY, Math.ceil(this.getMaxZ())), BooleanOp.ONLY_FIRST);
         }
@@ -505,28 +481,28 @@
         private final long sizeLerpTime;
         private final double sizeLerpTarget;
 
-        Settings(double d0, double d1, double d2, double d3, int i, int j, double d4, long k, double d5) {
-            this.centerX = d0;
+        Settings(double centerX, double d1, double centerZ, double d3, int damagePerBlock, int j, double safeZone, long k, double warningBlocks) {
+            this.centerX = centerX;
             this.centerZ = d1;
-            this.damagePerBlock = d2;
+            this.damagePerBlock = centerZ;
             this.safeZone = d3;
-            this.warningBlocks = i;
+            this.warningBlocks = damagePerBlock;
             this.warningTime = j;
-            this.size = d4;
+            this.size = safeZone;
             this.sizeLerpTime = k;
-            this.sizeLerpTarget = d5;
+            this.sizeLerpTarget = warningBlocks;
         }
 
-        Settings(WorldBorder worldborder) {
-            this.centerX = worldborder.getCenterX();
-            this.centerZ = worldborder.getCenterZ();
-            this.damagePerBlock = worldborder.getDamagePerBlock();
-            this.safeZone = worldborder.getDamageSafeZone();
-            this.warningBlocks = worldborder.getWarningBlocks();
-            this.warningTime = worldborder.getWarningTime();
-            this.size = worldborder.getSize();
-            this.sizeLerpTime = worldborder.getLerpRemainingTime();
-            this.sizeLerpTarget = worldborder.getLerpTarget();
+        Settings(WorldBorder border) {
+            this.centerX = border.getCenterX();
+            this.centerZ = border.getCenterZ();
+            this.damagePerBlock = border.getDamagePerBlock();
+            this.safeZone = border.getDamageSafeZone();
+            this.warningBlocks = border.getWarningBlocks();
+            this.warningTime = border.getWarningTime();
+            this.size = border.getSize();
+            this.sizeLerpTime = border.getLerpRemainingTime();
+            this.sizeLerpTarget = border.getLerpTarget();
         }
 
         public double getCenterX() {
@@ -565,30 +541,30 @@
             return this.sizeLerpTarget;
         }
 
-        public static WorldBorder.Settings read(DynamicLike<?> dynamiclike, WorldBorder.Settings worldborder_settings) {
-            double d0 = Mth.clamp(dynamiclike.get("BorderCenterX").asDouble(worldborder_settings.centerX), -2.9999984E7D, 2.9999984E7D);
-            double d1 = Mth.clamp(dynamiclike.get("BorderCenterZ").asDouble(worldborder_settings.centerZ), -2.9999984E7D, 2.9999984E7D);
-            double d2 = dynamiclike.get("BorderSize").asDouble(worldborder_settings.size);
-            long i = dynamiclike.get("BorderSizeLerpTime").asLong(worldborder_settings.sizeLerpTime);
-            double d3 = dynamiclike.get("BorderSizeLerpTarget").asDouble(worldborder_settings.sizeLerpTarget);
-            double d4 = dynamiclike.get("BorderSafeZone").asDouble(worldborder_settings.safeZone);
-            double d5 = dynamiclike.get("BorderDamagePerBlock").asDouble(worldborder_settings.damagePerBlock);
-            int j = dynamiclike.get("BorderWarningBlocks").asInt(worldborder_settings.warningBlocks);
-            int k = dynamiclike.get("BorderWarningTime").asInt(worldborder_settings.warningTime);
+        public static WorldBorder.Settings read(DynamicLike<?> dynamic, WorldBorder.Settings defaultValue) {
+            double d0 = Mth.clamp(dynamic.get("BorderCenterX").asDouble(defaultValue.centerX), -2.9999984E7D, 2.9999984E7D);
+            double d1 = Mth.clamp(dynamic.get("BorderCenterZ").asDouble(defaultValue.centerZ), -2.9999984E7D, 2.9999984E7D);
+            double d2 = dynamic.get("BorderSize").asDouble(defaultValue.size);
+            long i = dynamic.get("BorderSizeLerpTime").asLong(defaultValue.sizeLerpTime);
+            double d3 = dynamic.get("BorderSizeLerpTarget").asDouble(defaultValue.sizeLerpTarget);
+            double d4 = dynamic.get("BorderSafeZone").asDouble(defaultValue.safeZone);
+            double d5 = dynamic.get("BorderDamagePerBlock").asDouble(defaultValue.damagePerBlock);
+            int j = dynamic.get("BorderWarningBlocks").asInt(defaultValue.warningBlocks);
+            int k = dynamic.get("BorderWarningTime").asInt(defaultValue.warningTime);
 
             return new WorldBorder.Settings(d0, d1, d5, d4, j, k, d2, i, d3);
         }
 
-        public void write(CompoundTag compoundtag) {
-            compoundtag.putDouble("BorderCenterX", this.centerX);
-            compoundtag.putDouble("BorderCenterZ", this.centerZ);
-            compoundtag.putDouble("BorderSize", this.size);
-            compoundtag.putLong("BorderSizeLerpTime", this.sizeLerpTime);
-            compoundtag.putDouble("BorderSafeZone", this.safeZone);
-            compoundtag.putDouble("BorderDamagePerBlock", this.damagePerBlock);
-            compoundtag.putDouble("BorderSizeLerpTarget", this.sizeLerpTarget);
-            compoundtag.putDouble("BorderWarningBlocks", (double) this.warningBlocks);
-            compoundtag.putDouble("BorderWarningTime", (double) this.warningTime);
+        public void write(CompoundTag nbt) {
+            nbt.putDouble("BorderCenterX", this.centerX);
+            nbt.putDouble("BorderCenterZ", this.centerZ);
+            nbt.putDouble("BorderSize", this.size);
+            nbt.putLong("BorderSizeLerpTime", this.sizeLerpTime);
+            nbt.putDouble("BorderSafeZone", this.safeZone);
+            nbt.putDouble("BorderDamagePerBlock", this.damagePerBlock);
+            nbt.putDouble("BorderSizeLerpTarget", this.sizeLerpTarget);
+            nbt.putDouble("BorderWarningBlocks", (double) this.warningBlocks);
+            nbt.putDouble("BorderWarningTime", (double) this.warningTime);
         }
     }
 }
