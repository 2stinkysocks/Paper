--- a/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -24,14 +24,15 @@
 import net.minecraft.nbt.IntTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtUtils;
+import net.minecraft.nbt.Tag;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.Clearable;
 import net.minecraft.world.RandomizableContainer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.decoration.Painting;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.EmptyBlockGetter;
@@ -44,13 +45,16 @@
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.entity.BlockEntity;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape;
 import net.minecraft.world.phys.shapes.DiscreteVoxelShape;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+// CraftBukkit end
 
 public class StructureTemplate {
 
@@ -65,11 +69,16 @@
     public static final String ENTITY_TAG_BLOCKPOS = "blockPos";
     public static final String ENTITY_TAG_NBT = "nbt";
     public static final String SIZE_TAG = "size";
-    private final List<StructureTemplate.Palette> palettes = Lists.newArrayList();
-    private final List<StructureTemplate.StructureEntityInfo> entityInfoList = Lists.newArrayList();
+    public final List<StructureTemplate.Palette> palettes = Lists.newArrayList();
+    public final List<StructureTemplate.StructureEntityInfo> entityInfoList = Lists.newArrayList();
     private Vec3i size;
     private String author;
 
+    // CraftBukkit start - data containers
+    private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
+    public CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
+    // CraftBukkit end
+
     public StructureTemplate() {
         this.size = Vec3i.ZERO;
         this.author = "?";
@@ -79,42 +88,42 @@
         return this.size;
     }
 
-    public void setAuthor(String s) {
-        this.author = s;
+    public void setAuthor(String author) {
+        this.author = author;
     }
 
     public String getAuthor() {
         return this.author;
     }
 
-    public void fillFromWorld(Level level, BlockPos blockpos, Vec3i vec3i, boolean flag, @Nullable Block block) {
-        if (vec3i.getX() >= 1 && vec3i.getY() >= 1 && vec3i.getZ() >= 1) {
-            BlockPos blockpos1 = blockpos.offset(vec3i).offset(-1, -1, -1);
+    public void fillFromWorld(Level level, BlockPos pos, Vec3i size, boolean withEntities, @Nullable Block toIgnore) {
+        if (size.getX() >= 1 && size.getY() >= 1 && size.getZ() >= 1) {
+            BlockPos blockposition1 = pos.offset(size).offset(-1, -1, -1);
             List<StructureTemplate.StructureBlockInfo> list = Lists.newArrayList();
             List<StructureTemplate.StructureBlockInfo> list1 = Lists.newArrayList();
             List<StructureTemplate.StructureBlockInfo> list2 = Lists.newArrayList();
-            BlockPos blockpos2 = new BlockPos(Math.min(blockpos.getX(), blockpos1.getX()), Math.min(blockpos.getY(), blockpos1.getY()), Math.min(blockpos.getZ(), blockpos1.getZ()));
-            BlockPos blockpos3 = new BlockPos(Math.max(blockpos.getX(), blockpos1.getX()), Math.max(blockpos.getY(), blockpos1.getY()), Math.max(blockpos.getZ(), blockpos1.getZ()));
+            BlockPos blockposition2 = new BlockPos(Math.min(pos.getX(), blockposition1.getX()), Math.min(pos.getY(), blockposition1.getY()), Math.min(pos.getZ(), blockposition1.getZ()));
+            BlockPos blockposition3 = new BlockPos(Math.max(pos.getX(), blockposition1.getX()), Math.max(pos.getY(), blockposition1.getY()), Math.max(pos.getZ(), blockposition1.getZ()));
 
-            this.size = vec3i;
-            Iterator iterator = BlockPos.betweenClosed(blockpos2, blockpos3).iterator();
+            this.size = size;
+            Iterator iterator = BlockPos.betweenClosed(blockposition2, blockposition3).iterator();
 
             while (iterator.hasNext()) {
-                BlockPos blockpos4 = (BlockPos) iterator.next();
-                BlockPos blockpos5 = blockpos4.subtract(blockpos2);
-                BlockState blockstate = level.getBlockState(blockpos4);
+                BlockPos blockposition4 = (BlockPos) iterator.next();
+                BlockPos blockposition5 = blockposition4.subtract(blockposition2);
+                IBlockData iblockdata = level.getBlockState(blockposition4);
 
-                if (block == null || !blockstate.is(block)) {
-                    BlockEntity blockentity = level.getBlockEntity(blockpos4);
-                    StructureTemplate.StructureBlockInfo structuretemplate_structureblockinfo;
+                if (toIgnore == null || !iblockdata.is(toIgnore)) {
+                    BlockEntity tileentity = level.getBlockEntity(blockposition4);
+                    StructureTemplate.StructureBlockInfo definedstructure_blockinfo;
 
-                    if (blockentity != null) {
-                        structuretemplate_structureblockinfo = new StructureTemplate.StructureBlockInfo(blockpos5, blockstate, blockentity.saveWithId());
+                    if (tileentity != null) {
+                        definedstructure_blockinfo = new StructureTemplate.StructureBlockInfo(blockposition5, iblockdata, tileentity.saveWithId());
                     } else {
-                        structuretemplate_structureblockinfo = new StructureTemplate.StructureBlockInfo(blockpos5, blockstate, (CompoundTag) null);
+                        definedstructure_blockinfo = new StructureTemplate.StructureBlockInfo(blockposition5, iblockdata, (CompoundTag) null);
                     }
 
-                    addToLists(structuretemplate_structureblockinfo, list, list1, list2);
+                    addToLists(definedstructure_blockinfo, list, list1, list2);
                 }
             }
 
@@ -122,8 +131,8 @@
 
             this.palettes.clear();
             this.palettes.add(new StructureTemplate.Palette(list3));
-            if (flag) {
-                this.fillEntityList(level, blockpos2, blockpos3);
+            if (withEntities) {
+                this.fillEntityList(level, blockposition2, blockposition3);
             } else {
                 this.entityInfoList.clear();
             }
@@ -131,82 +140,82 @@
         }
     }
 
-    private static void addToLists(StructureTemplate.StructureBlockInfo structuretemplate_structureblockinfo, List<StructureTemplate.StructureBlockInfo> list, List<StructureTemplate.StructureBlockInfo> list1, List<StructureTemplate.StructureBlockInfo> list2) {
-        if (structuretemplate_structureblockinfo.nbt != null) {
-            list1.add(structuretemplate_structureblockinfo);
-        } else if (!structuretemplate_structureblockinfo.state.getBlock().hasDynamicShape() && structuretemplate_structureblockinfo.state.isCollisionShapeFullBlock(EmptyBlockGetter.INSTANCE, BlockPos.ZERO)) {
-            list.add(structuretemplate_structureblockinfo);
+    private static void addToLists(StructureTemplate.StructureBlockInfo blockInfo, List<StructureTemplate.StructureBlockInfo> normalBlocks, List<StructureTemplate.StructureBlockInfo> blocksWithNbt, List<StructureTemplate.StructureBlockInfo> blocksWithSpecialShape) {
+        if (blockInfo.nbt != null) {
+            blocksWithNbt.add(blockInfo);
+        } else if (!blockInfo.state.getBlock().hasDynamicShape() && blockInfo.state.isCollisionShapeFullBlock(EmptyBlockGetter.INSTANCE, BlockPos.ZERO)) {
+            normalBlocks.add(blockInfo);
         } else {
-            list2.add(structuretemplate_structureblockinfo);
+            blocksWithSpecialShape.add(blockInfo);
         }
 
     }
 
-    private static List<StructureTemplate.StructureBlockInfo> buildInfoList(List<StructureTemplate.StructureBlockInfo> list, List<StructureTemplate.StructureBlockInfo> list1, List<StructureTemplate.StructureBlockInfo> list2) {
-        Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.comparingInt((structuretemplate_structureblockinfo) -> {
-            return structuretemplate_structureblockinfo.pos.getY();
-        }).thenComparingInt((structuretemplate_structureblockinfo) -> {
-            return structuretemplate_structureblockinfo.pos.getX();
-        }).thenComparingInt((structuretemplate_structureblockinfo) -> {
-            return structuretemplate_structureblockinfo.pos.getZ();
+    private static List<StructureTemplate.StructureBlockInfo> buildInfoList(List<StructureTemplate.StructureBlockInfo> normalBlocks, List<StructureTemplate.StructureBlockInfo> blocksWithNbt, List<StructureTemplate.StructureBlockInfo> blocksWithSpecialShape) {
+        Comparator<StructureTemplate.StructureBlockInfo> comparator = Comparator.<StructureTemplate.StructureBlockInfo>comparingInt((definedstructure_blockinfo) -> { // CraftBukkit - decompile error
+            return definedstructure_blockinfo.pos.getY();
+        }).thenComparingInt((definedstructure_blockinfo) -> {
+            return definedstructure_blockinfo.pos.getX();
+        }).thenComparingInt((definedstructure_blockinfo) -> {
+            return definedstructure_blockinfo.pos.getZ();
         });
 
-        list.sort(comparator);
-        list2.sort(comparator);
-        list1.sort(comparator);
+        normalBlocks.sort(comparator);
+        blocksWithSpecialShape.sort(comparator);
+        blocksWithNbt.sort(comparator);
         List<StructureTemplate.StructureBlockInfo> list3 = Lists.newArrayList();
 
-        list3.addAll(list);
-        list3.addAll(list2);
-        list3.addAll(list1);
+        list3.addAll(normalBlocks);
+        list3.addAll(blocksWithSpecialShape);
+        list3.addAll(blocksWithNbt);
         return list3;
     }
 
-    private void fillEntityList(Level level, BlockPos blockpos, BlockPos blockpos1) {
-        List<Entity> list = level.getEntitiesOfClass(Entity.class, AABB.encapsulatingFullBlocks(blockpos, blockpos1), (entity) -> {
+    private void fillEntityList(Level level, BlockPos startPos, BlockPos endPos) {
+        List<Entity> list = level.getEntitiesOfClass(Entity.class, AABB.encapsulatingFullBlocks(startPos, endPos), (entity) -> {
             return !(entity instanceof Player);
         });
 
         this.entityInfoList.clear();
 
-        Vec3 vec3;
-        CompoundTag compoundtag;
-        BlockPos blockpos2;
+        Vec3 vec3d;
+        CompoundTag nbttagcompound;
+        BlockPos blockposition2;
 
-        for (Iterator iterator = list.iterator(); iterator.hasNext(); this.entityInfoList.add(new StructureTemplate.StructureEntityInfo(vec3, blockpos2, compoundtag.copy()))) {
+        for (Iterator iterator = list.iterator(); iterator.hasNext(); this.entityInfoList.add(new StructureTemplate.StructureEntityInfo(vec3d, blockposition2, nbttagcompound.copy()))) {
             Entity entity = (Entity) iterator.next();
 
-            vec3 = new Vec3(entity.getX() - (double) blockpos.getX(), entity.getY() - (double) blockpos.getY(), entity.getZ() - (double) blockpos.getZ());
-            compoundtag = new CompoundTag();
-            entity.save(compoundtag);
+            vec3d = new Vec3(entity.getX() - (double) startPos.getX(), entity.getY() - (double) startPos.getY(), entity.getZ() - (double) startPos.getZ());
+            nbttagcompound = new CompoundTag();
+            entity.save(nbttagcompound);
             if (entity instanceof Painting) {
-                blockpos2 = ((Painting) entity).getPos().subtract(blockpos);
+                blockposition2 = ((Painting) entity).getPos().subtract(startPos);
             } else {
-                blockpos2 = BlockPos.containing(vec3);
+                blockposition2 = BlockPos.containing(vec3d);
             }
         }
 
     }
 
-    public List<StructureTemplate.StructureBlockInfo> filterBlocks(BlockPos blockpos, StructurePlaceSettings structureplacesettings, Block block) {
-        return this.filterBlocks(blockpos, structureplacesettings, block, true);
+    public List<StructureTemplate.StructureBlockInfo> filterBlocks(BlockPos pos, StructurePlaceSettings settings, Block block) {
+        return this.filterBlocks(pos, settings, block, true);
     }
 
-    public ObjectArrayList<StructureTemplate.StructureBlockInfo> filterBlocks(BlockPos blockpos, StructurePlaceSettings structureplacesettings, Block block, boolean flag) {
+    public ObjectArrayList<StructureTemplate.StructureBlockInfo> filterBlocks(BlockPos pos, StructurePlaceSettings settings, Block block, boolean relativePosition) {
         ObjectArrayList<StructureTemplate.StructureBlockInfo> objectarraylist = new ObjectArrayList();
-        BoundingBox boundingbox = structureplacesettings.getBoundingBox();
+        BoundingBox structureboundingbox = settings.getBoundingBox();
 
         if (this.palettes.isEmpty()) {
             return objectarraylist;
         } else {
-            Iterator iterator = structureplacesettings.getRandomPalette(this.palettes, blockpos).blocks(block).iterator();
+            Iterator iterator = settings.getRandomPalette(this.palettes, pos).blocks(block).iterator();
 
             while (iterator.hasNext()) {
-                StructureTemplate.StructureBlockInfo structuretemplate_structureblockinfo = (StructureTemplate.StructureBlockInfo) iterator.next();
-                BlockPos blockpos1 = flag ? calculateRelativePosition(structureplacesettings, structuretemplate_structureblockinfo.pos).offset(blockpos) : structuretemplate_structureblockinfo.pos;
+                StructureTemplate.StructureBlockInfo definedstructure_blockinfo = (StructureTemplate.StructureBlockInfo) iterator.next();
+                BlockPos blockposition1 = relativePosition ? calculateRelativePosition(settings, definedstructure_blockinfo.pos).offset(pos) : definedstructure_blockinfo.pos;
 
-                if (boundingbox == null || boundingbox.isInside(blockpos1)) {
-                    objectarraylist.add(new StructureTemplate.StructureBlockInfo(blockpos1, structuretemplate_structureblockinfo.state.rotate(structureplacesettings.getRotation()), structuretemplate_structureblockinfo.nbt));
+                if (structureboundingbox == null || structureboundingbox.isInside(blockposition1)) {
+                    objectarraylist.add(new StructureTemplate.StructureBlockInfo(blockposition1, definedstructure_blockinfo.state.rotate(settings.getRotation()), definedstructure_blockinfo.nbt));
                 }
             }
 
@@ -214,27 +223,40 @@
         }
     }
 
-    public BlockPos calculateConnectedPosition(StructurePlaceSettings structureplacesettings, BlockPos blockpos, StructurePlaceSettings structureplacesettings1, BlockPos blockpos1) {
-        BlockPos blockpos2 = calculateRelativePosition(structureplacesettings, blockpos);
-        BlockPos blockpos3 = calculateRelativePosition(structureplacesettings1, blockpos1);
+    public BlockPos calculateConnectedPosition(StructurePlaceSettings decorator, BlockPos start, StructurePlaceSettings settings, BlockPos end) {
+        BlockPos blockposition2 = calculateRelativePosition(decorator, start);
+        BlockPos blockposition3 = calculateRelativePosition(settings, end);
 
-        return blockpos2.subtract(blockpos3);
+        return blockposition2.subtract(blockposition3);
     }
 
-    public static BlockPos calculateRelativePosition(StructurePlaceSettings structureplacesettings, BlockPos blockpos) {
-        return transform(blockpos, structureplacesettings.getMirror(), structureplacesettings.getRotation(), structureplacesettings.getRotationPivot());
+    public static BlockPos calculateRelativePosition(StructurePlaceSettings decorator, BlockPos pos) {
+        return transform(pos, decorator.getMirror(), decorator.getRotation(), decorator.getRotationPivot());
     }
 
-    public boolean placeInWorld(ServerLevelAccessor serverlevelaccessor, BlockPos blockpos, BlockPos blockpos1, StructurePlaceSettings structureplacesettings, RandomSource randomsource, int i) {
+    public boolean placeInWorld(ServerLevelAccessor serverLevel, BlockPos offset, BlockPos pos, StructurePlaceSettings settings, RandomSource random, int flags) {
         if (this.palettes.isEmpty()) {
             return false;
         } else {
-            List<StructureTemplate.StructureBlockInfo> list = structureplacesettings.getRandomPalette(this.palettes, blockpos).blocks();
+            // CraftBukkit start
+            // We only want the TransformerGeneratorAccess at certain locations because in here are many "block update" calls that shouldn't be transformed
+            ServerLevelAccessor wrappedAccess = serverLevel;
+            org.bukkit.craftbukkit.util.CraftStructureTransformer structureTransformer = null;
+            if (wrappedAccess instanceof org.bukkit.craftbukkit.util.TransformerGeneratorAccess transformerAccess) {
+                serverLevel = transformerAccess.getHandle();
+                structureTransformer = transformerAccess.getStructureTransformer();
+                // The structureTransformer is not needed if we can not transform blocks therefore we can save a little bit of performance doing this
+                if (structureTransformer != null && !structureTransformer.canTransformBlocks()) {
+                    structureTransformer = null;
+                }
+            }
+            // CraftBukkit end
+            List<StructureTemplate.StructureBlockInfo> list = settings.getRandomPalette(this.palettes, offset).blocks();
 
-            if ((!list.isEmpty() || !structureplacesettings.isIgnoreEntities() && !this.entityInfoList.isEmpty()) && this.size.getX() >= 1 && this.size.getY() >= 1 && this.size.getZ() >= 1) {
-                BoundingBox boundingbox = structureplacesettings.getBoundingBox();
-                List<BlockPos> list1 = Lists.newArrayListWithCapacity(structureplacesettings.shouldKeepLiquids() ? list.size() : 0);
-                List<BlockPos> list2 = Lists.newArrayListWithCapacity(structureplacesettings.shouldKeepLiquids() ? list.size() : 0);
+            if ((!list.isEmpty() || !settings.isIgnoreEntities() && !this.entityInfoList.isEmpty()) && this.size.getX() >= 1 && this.size.getY() >= 1 && this.size.getZ() >= 1) {
+                BoundingBox structureboundingbox = settings.getBoundingBox();
+                List<BlockPos> list1 = Lists.newArrayListWithCapacity(settings.shouldKeepLiquids() ? list.size() : 0);
+                List<BlockPos> list2 = Lists.newArrayListWithCapacity(settings.shouldKeepLiquids() ? list.size() : 0);
                 List<Pair<BlockPos, CompoundTag>> list3 = Lists.newArrayListWithCapacity(list.size());
                 int j = Integer.MAX_VALUE;
                 int k = Integer.MAX_VALUE;
@@ -242,51 +264,65 @@
                 int i1 = Integer.MIN_VALUE;
                 int j1 = Integer.MIN_VALUE;
                 int k1 = Integer.MIN_VALUE;
-                List<StructureTemplate.StructureBlockInfo> list4 = processBlockInfos(serverlevelaccessor, blockpos, blockpos1, structureplacesettings, list);
+                List<StructureTemplate.StructureBlockInfo> list4 = processBlockInfos(serverLevel, offset, pos, settings, list);
                 Iterator iterator = list4.iterator();
 
-                BlockEntity blockentity;
+                BlockEntity tileentity;
 
                 while (iterator.hasNext()) {
-                    StructureTemplate.StructureBlockInfo structuretemplate_structureblockinfo = (StructureTemplate.StructureBlockInfo) iterator.next();
-                    BlockPos blockpos2 = structuretemplate_structureblockinfo.pos;
+                    StructureTemplate.StructureBlockInfo definedstructure_blockinfo = (StructureTemplate.StructureBlockInfo) iterator.next();
+                    BlockPos blockposition2 = definedstructure_blockinfo.pos;
 
-                    if (boundingbox == null || boundingbox.isInside(blockpos2)) {
-                        FluidState fluidstate = structureplacesettings.shouldKeepLiquids() ? serverlevelaccessor.getFluidState(blockpos2) : null;
-                        BlockState blockstate = structuretemplate_structureblockinfo.state.mirror(structureplacesettings.getMirror()).rotate(structureplacesettings.getRotation());
+                    if (structureboundingbox == null || structureboundingbox.isInside(blockposition2)) {
+                        FluidState fluid = settings.shouldKeepLiquids() ? serverLevel.getFluidState(blockposition2) : null;
+                        IBlockData iblockdata = definedstructure_blockinfo.state.mirror(settings.getMirror()).rotate(settings.getRotation());
 
-                        if (structuretemplate_structureblockinfo.nbt != null) {
-                            blockentity = serverlevelaccessor.getBlockEntity(blockpos2);
-                            Clearable.tryClear(blockentity);
-                            serverlevelaccessor.setBlock(blockpos2, Blocks.BARRIER.defaultBlockState(), 20);
+                        if (definedstructure_blockinfo.nbt != null) {
+                            tileentity = serverLevel.getBlockEntity(blockposition2);
+                            Clearable.tryClear(tileentity);
+                            serverLevel.setBlock(blockposition2, Blocks.BARRIER.defaultBlockState(), 20);
                         }
+                        // CraftBukkit start
+                        if (structureTransformer != null) {
+                            org.bukkit.craftbukkit.block.CraftBlockState craftBlockState = (org.bukkit.craftbukkit.block.CraftBlockState) org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(blockposition2, iblockdata, null);
+                            if (definedstructure_blockinfo.nbt != null && craftBlockState instanceof org.bukkit.craftbukkit.block.CraftBlockEntityState<?> entityState) {
+                                entityState.loadData(definedstructure_blockinfo.nbt);
+                                if (craftBlockState instanceof org.bukkit.craftbukkit.block.CraftLootable<?> craftLootable) {
+                                    craftLootable.setSeed(random.nextLong());
+                                }
+                            }
+                            craftBlockState = structureTransformer.transformCraftState(craftBlockState);
+                            iblockdata = craftBlockState.getHandle();
+                            definedstructure_blockinfo = new StructureTemplate.StructureBlockInfo(blockposition2, iblockdata, (craftBlockState instanceof org.bukkit.craftbukkit.block.CraftBlockEntityState<?> craftBlockEntityState ? craftBlockEntityState.getSnapshotNBT() : null));
+                        }
+                        // CraftBukkit end
 
-                        if (serverlevelaccessor.setBlock(blockpos2, blockstate, i)) {
-                            j = Math.min(j, blockpos2.getX());
-                            k = Math.min(k, blockpos2.getY());
-                            l = Math.min(l, blockpos2.getZ());
-                            i1 = Math.max(i1, blockpos2.getX());
-                            j1 = Math.max(j1, blockpos2.getY());
-                            k1 = Math.max(k1, blockpos2.getZ());
-                            list3.add(Pair.of(blockpos2, structuretemplate_structureblockinfo.nbt));
-                            if (structuretemplate_structureblockinfo.nbt != null) {
-                                blockentity = serverlevelaccessor.getBlockEntity(blockpos2);
-                                if (blockentity != null) {
-                                    if (blockentity instanceof RandomizableContainer) {
-                                        structuretemplate_structureblockinfo.nbt.putLong("LootTableSeed", randomsource.nextLong());
+                        if (serverLevel.setBlock(blockposition2, iblockdata, flags)) {
+                            j = Math.min(j, blockposition2.getX());
+                            k = Math.min(k, blockposition2.getY());
+                            l = Math.min(l, blockposition2.getZ());
+                            i1 = Math.max(i1, blockposition2.getX());
+                            j1 = Math.max(j1, blockposition2.getY());
+                            k1 = Math.max(k1, blockposition2.getZ());
+                            list3.add(Pair.of(blockposition2, definedstructure_blockinfo.nbt));
+                            if (definedstructure_blockinfo.nbt != null) {
+                                tileentity = serverLevel.getBlockEntity(blockposition2);
+                                if (tileentity != null) {
+                                    if (structureTransformer == null && tileentity instanceof RandomizableContainer) { // CraftBukkit - only process if don't have a transformer access (Was already set above) - SPIGOT-7520: Use structureTransformer as check, so that it is the same as above
+                                        definedstructure_blockinfo.nbt.putLong("LootTableSeed", random.nextLong());
                                     }
 
-                                    blockentity.load(structuretemplate_structureblockinfo.nbt);
+                                    tileentity.load(definedstructure_blockinfo.nbt);
                                 }
                             }
 
-                            if (fluidstate != null) {
-                                if (blockstate.getFluidState().isSource()) {
-                                    list2.add(blockpos2);
-                                } else if (blockstate.getBlock() instanceof LiquidBlockContainer) {
-                                    ((LiquidBlockContainer) blockstate.getBlock()).placeLiquid(serverlevelaccessor, blockpos2, blockstate, fluidstate);
-                                    if (!fluidstate.isSource()) {
-                                        list1.add(blockpos2);
+                            if (fluid != null) {
+                                if (iblockdata.getFluidState().isSource()) {
+                                    list2.add(blockposition2);
+                                } else if (iblockdata.getBlock() instanceof LiquidBlockContainer) {
+                                    ((LiquidBlockContainer) iblockdata.getBlock()).placeLiquid(serverLevel, blockposition2, iblockdata, fluid);
+                                    if (!fluid.isSource()) {
+                                        list1.add(blockposition2);
                                     }
                                 }
                             }
@@ -295,35 +331,35 @@
                 }
 
                 boolean flag = true;
-                Direction[] adirection = new Direction[]{Direction.UP, Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST};
+                Direction[] aenumdirection = new Direction[]{Direction.UP, Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST};
 
                 Iterator iterator1;
                 int l1;
-                BlockState blockstate1;
+                IBlockData iblockdata1;
 
                 while (flag && !list1.isEmpty()) {
                     flag = false;
                     iterator1 = list1.iterator();
 
                     while (iterator1.hasNext()) {
-                        BlockPos blockpos3 = (BlockPos) iterator1.next();
-                        FluidState fluidstate1 = serverlevelaccessor.getFluidState(blockpos3);
+                        BlockPos blockposition3 = (BlockPos) iterator1.next();
+                        FluidState fluid1 = serverLevel.getFluidState(blockposition3);
 
-                        for (l1 = 0; l1 < adirection.length && !fluidstate1.isSource(); ++l1) {
-                            BlockPos blockpos4 = blockpos3.relative(adirection[l1]);
-                            FluidState fluidstate2 = serverlevelaccessor.getFluidState(blockpos4);
+                        for (l1 = 0; l1 < aenumdirection.length && !fluid1.isSource(); ++l1) {
+                            BlockPos blockposition4 = blockposition3.relative(aenumdirection[l1]);
+                            FluidState fluid2 = serverLevel.getFluidState(blockposition4);
 
-                            if (fluidstate2.isSource() && !list2.contains(blockpos4)) {
-                                fluidstate1 = fluidstate2;
+                            if (fluid2.isSource() && !list2.contains(blockposition4)) {
+                                fluid1 = fluid2;
                             }
                         }
 
-                        if (fluidstate1.isSource()) {
-                            blockstate1 = serverlevelaccessor.getBlockState(blockpos3);
-                            Block block = blockstate1.getBlock();
+                        if (fluid1.isSource()) {
+                            iblockdata1 = serverLevel.getBlockState(blockposition3);
+                            Block block = iblockdata1.getBlock();
 
                             if (block instanceof LiquidBlockContainer) {
-                                ((LiquidBlockContainer) block).placeLiquid(serverlevelaccessor, blockpos3, blockstate1, fluidstate1);
+                                ((LiquidBlockContainer) block).placeLiquid(serverLevel, blockposition3, iblockdata1, fluid1);
                                 flag = true;
                                 iterator1.remove();
                             }
@@ -332,8 +368,8 @@
                 }
 
                 if (j <= i1) {
-                    if (!structureplacesettings.getKnownShape()) {
-                        BitSetDiscreteVoxelShape bitsetdiscretevoxelshape = new BitSetDiscreteVoxelShape(i1 - j + 1, j1 - k + 1, k1 - l + 1);
+                    if (!settings.getKnownShape()) {
+                        BitSetDiscreteVoxelShape voxelshapebitset = new BitSetDiscreteVoxelShape(i1 - j + 1, j1 - k + 1, k1 - l + 1);
                         int i2 = j;
                         int j2 = k;
 
@@ -342,42 +378,42 @@
 
                         while (iterator2.hasNext()) {
                             Pair<BlockPos, CompoundTag> pair = (Pair) iterator2.next();
-                            BlockPos blockpos5 = (BlockPos) pair.getFirst();
+                            BlockPos blockposition5 = (BlockPos) pair.getFirst();
 
-                            bitsetdiscretevoxelshape.fill(blockpos5.getX() - i2, blockpos5.getY() - j2, blockpos5.getZ() - l1);
+                            voxelshapebitset.fill(blockposition5.getX() - i2, blockposition5.getY() - j2, blockposition5.getZ() - l1);
                         }
 
-                        updateShapeAtEdge(serverlevelaccessor, i, bitsetdiscretevoxelshape, i2, j2, l1);
+                        updateShapeAtEdge(serverLevel, flags, voxelshapebitset, i2, j2, l1);
                     }
 
                     iterator1 = list3.iterator();
 
                     while (iterator1.hasNext()) {
                         Pair<BlockPos, CompoundTag> pair1 = (Pair) iterator1.next();
-                        BlockPos blockpos6 = (BlockPos) pair1.getFirst();
+                        BlockPos blockposition6 = (BlockPos) pair1.getFirst();
 
-                        if (!structureplacesettings.getKnownShape()) {
-                            blockstate1 = serverlevelaccessor.getBlockState(blockpos6);
-                            BlockState blockstate2 = Block.updateFromNeighbourShapes(blockstate1, serverlevelaccessor, blockpos6);
+                        if (!settings.getKnownShape()) {
+                            iblockdata1 = serverLevel.getBlockState(blockposition6);
+                            IBlockData iblockdata2 = Block.updateFromNeighbourShapes(iblockdata1, serverLevel, blockposition6);
 
-                            if (blockstate1 != blockstate2) {
-                                serverlevelaccessor.setBlock(blockpos6, blockstate2, i & -2 | 16);
+                            if (iblockdata1 != iblockdata2) {
+                                serverLevel.setBlock(blockposition6, iblockdata2, flags & -2 | 16);
                             }
 
-                            serverlevelaccessor.blockUpdated(blockpos6, blockstate2.getBlock());
+                            serverLevel.blockUpdated(blockposition6, iblockdata2.getBlock());
                         }
 
                         if (pair1.getSecond() != null) {
-                            blockentity = serverlevelaccessor.getBlockEntity(blockpos6);
-                            if (blockentity != null) {
-                                blockentity.setChanged();
+                            tileentity = serverLevel.getBlockEntity(blockposition6);
+                            if (tileentity != null) {
+                                tileentity.setChanged();
                             }
                         }
                     }
                 }
 
-                if (!structureplacesettings.isIgnoreEntities()) {
-                    this.placeEntities(serverlevelaccessor, blockpos, structureplacesettings.getMirror(), structureplacesettings.getRotation(), structureplacesettings.getRotationPivot(), boundingbox, structureplacesettings.shouldFinalizeEntities());
+                if (!settings.isIgnoreEntities()) {
+                    this.placeEntities(wrappedAccess, offset, settings.getMirror(), settings.getRotation(), settings.getRotationPivot(), structureboundingbox, settings.shouldFinalizeEntities()); // CraftBukkit
                 }
 
                 return true;
@@ -387,96 +423,98 @@
         }
     }
 
-    public static void updateShapeAtEdge(LevelAccessor levelaccessor, int i, DiscreteVoxelShape discretevoxelshape, int j, int k, int l) {
-        discretevoxelshape.forAllFaces((direction, i1, j1, k1) -> {
-            BlockPos blockpos = new BlockPos(j + i1, k + j1, l + k1);
-            BlockPos blockpos1 = blockpos.relative(direction);
-            BlockState blockstate = levelaccessor.getBlockState(blockpos);
-            BlockState blockstate1 = levelaccessor.getBlockState(blockpos1);
-            BlockState blockstate2 = blockstate.updateShape(direction, blockstate1, levelaccessor, blockpos, blockpos1);
+    public static void updateShapeAtEdge(LevelAccessor level, int flags, DiscreteVoxelShape shape, int x, int y, int z) {
+        shape.forAllFaces((enumdirection, i1, j1, k1) -> {
+            BlockPos blockposition = new BlockPos(x + i1, y + j1, z + k1);
+            BlockPos blockposition1 = blockposition.relative(enumdirection);
+            IBlockData iblockdata = level.getBlockState(blockposition);
+            IBlockData iblockdata1 = level.getBlockState(blockposition1);
+            IBlockData iblockdata2 = iblockdata.updateShape(enumdirection, iblockdata1, level, blockposition, blockposition1);
 
-            if (blockstate != blockstate2) {
-                levelaccessor.setBlock(blockpos, blockstate2, i & -2);
+            if (iblockdata != iblockdata2) {
+                level.setBlock(blockposition, iblockdata2, flags & -2);
             }
 
-            BlockState blockstate3 = blockstate1.updateShape(direction.getOpposite(), blockstate2, levelaccessor, blockpos1, blockpos);
+            IBlockData iblockdata3 = iblockdata1.updateShape(enumdirection.getOpposite(), iblockdata2, level, blockposition1, blockposition);
 
-            if (blockstate1 != blockstate3) {
-                levelaccessor.setBlock(blockpos1, blockstate3, i & -2);
+            if (iblockdata1 != iblockdata3) {
+                level.setBlock(blockposition1, iblockdata3, flags & -2);
             }
 
         });
     }
 
-    public static List<StructureTemplate.StructureBlockInfo> processBlockInfos(ServerLevelAccessor serverlevelaccessor, BlockPos blockpos, BlockPos blockpos1, StructurePlaceSettings structureplacesettings, List<StructureTemplate.StructureBlockInfo> list) {
+    public static List<StructureTemplate.StructureBlockInfo> processBlockInfos(ServerLevelAccessor serverLevel, BlockPos offset, BlockPos pos, StructurePlaceSettings settings, List<StructureTemplate.StructureBlockInfo> blockInfos) {
         List<StructureTemplate.StructureBlockInfo> list1 = new ArrayList();
         List<StructureTemplate.StructureBlockInfo> list2 = new ArrayList();
-        Iterator iterator = list.iterator();
+        Iterator iterator = blockInfos.iterator();
 
         while (iterator.hasNext()) {
-            StructureTemplate.StructureBlockInfo structuretemplate_structureblockinfo = (StructureTemplate.StructureBlockInfo) iterator.next();
-            BlockPos blockpos2 = calculateRelativePosition(structureplacesettings, structuretemplate_structureblockinfo.pos).offset(blockpos);
-            StructureTemplate.StructureBlockInfo structuretemplate_structureblockinfo1 = new StructureTemplate.StructureBlockInfo(blockpos2, structuretemplate_structureblockinfo.state, structuretemplate_structureblockinfo.nbt != null ? structuretemplate_structureblockinfo.nbt.copy() : null);
+            StructureTemplate.StructureBlockInfo definedstructure_blockinfo = (StructureTemplate.StructureBlockInfo) iterator.next();
+            BlockPos blockposition2 = calculateRelativePosition(settings, definedstructure_blockinfo.pos).offset(offset);
+            StructureTemplate.StructureBlockInfo definedstructure_blockinfo1 = new StructureTemplate.StructureBlockInfo(blockposition2, definedstructure_blockinfo.state, definedstructure_blockinfo.nbt != null ? definedstructure_blockinfo.nbt.copy() : null);
 
-            for (Iterator iterator1 = structureplacesettings.getProcessors().iterator(); structuretemplate_structureblockinfo1 != null && iterator1.hasNext(); structuretemplate_structureblockinfo1 = ((StructureProcessor) iterator1.next()).processBlock(serverlevelaccessor, blockpos, blockpos1, structuretemplate_structureblockinfo, structuretemplate_structureblockinfo1, structureplacesettings)) {
+            for (Iterator iterator1 = settings.getProcessors().iterator(); definedstructure_blockinfo1 != null && iterator1.hasNext(); definedstructure_blockinfo1 = ((StructureProcessor) iterator1.next()).processBlock(serverLevel, offset, pos, definedstructure_blockinfo, definedstructure_blockinfo1, settings)) {
                 ;
             }
 
-            if (structuretemplate_structureblockinfo1 != null) {
-                ((List) list2).add(structuretemplate_structureblockinfo1);
-                list1.add(structuretemplate_structureblockinfo);
+            if (definedstructure_blockinfo1 != null) {
+                ((List) list2).add(definedstructure_blockinfo1);
+                list1.add(definedstructure_blockinfo);
             }
         }
 
-        StructureProcessor structureprocessor;
+        StructureProcessor definedstructureprocessor;
 
-        for (iterator = structureplacesettings.getProcessors().iterator(); iterator.hasNext(); list2 = structureprocessor.finalizeProcessing(serverlevelaccessor, blockpos, blockpos1, list1, (List) list2, structureplacesettings)) {
-            structureprocessor = (StructureProcessor) iterator.next();
+        for (iterator = settings.getProcessors().iterator(); iterator.hasNext(); list2 = definedstructureprocessor.finalizeProcessing(serverLevel, offset, pos, list1, (List) list2, settings)) {
+            definedstructureprocessor = (StructureProcessor) iterator.next();
         }
 
         return (List) list2;
     }
 
-    private void placeEntities(ServerLevelAccessor serverlevelaccessor, BlockPos blockpos, Mirror mirror, Rotation rotation, BlockPos blockpos1, @Nullable BoundingBox boundingbox, boolean flag) {
+    private void placeEntities(ServerLevelAccessor serverLevel, BlockPos pos, Mirror mirror, Rotation rotation, BlockPos offset, @Nullable BoundingBox boundingBox, boolean withEntities) {
         Iterator iterator = this.entityInfoList.iterator();
 
         while (iterator.hasNext()) {
-            StructureTemplate.StructureEntityInfo structuretemplate_structureentityinfo = (StructureTemplate.StructureEntityInfo) iterator.next();
-            BlockPos blockpos2 = transform(structuretemplate_structureentityinfo.blockPos, mirror, rotation, blockpos1).offset(blockpos);
+            StructureTemplate.StructureEntityInfo definedstructure_entityinfo = (StructureTemplate.StructureEntityInfo) iterator.next();
+            BlockPos blockposition2 = transform(definedstructure_entityinfo.blockPos, mirror, rotation, offset).offset(pos);
 
-            if (boundingbox == null || boundingbox.isInside(blockpos2)) {
-                CompoundTag compoundtag = structuretemplate_structureentityinfo.nbt.copy();
-                Vec3 vec3 = transform(structuretemplate_structureentityinfo.pos, mirror, rotation, blockpos1);
-                Vec3 vec31 = vec3.add((double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ());
-                ListTag listtag = new ListTag();
+            if (boundingBox == null || boundingBox.isInside(blockposition2)) {
+                CompoundTag nbttagcompound = definedstructure_entityinfo.nbt.copy();
+                Vec3 vec3d = transform(definedstructure_entityinfo.pos, mirror, rotation, offset);
+                Vec3 vec3d1 = vec3d.add((double) pos.getX(), (double) pos.getY(), (double) pos.getZ());
+                ListTag nbttaglist = new ListTag();
 
-                listtag.add(DoubleTag.valueOf(vec31.x));
-                listtag.add(DoubleTag.valueOf(vec31.y));
-                listtag.add(DoubleTag.valueOf(vec31.z));
-                compoundtag.put("Pos", listtag);
-                compoundtag.remove("UUID");
-                createEntityIgnoreException(serverlevelaccessor, compoundtag).ifPresent((entity) -> {
+                nbttaglist.add(DoubleTag.valueOf(vec3d1.x));
+                nbttaglist.add(DoubleTag.valueOf(vec3d1.y));
+                nbttaglist.add(DoubleTag.valueOf(vec3d1.z));
+                nbttagcompound.put("Pos", nbttaglist);
+                nbttagcompound.remove("UUID");
+                createEntityIgnoreException(serverLevel, nbttagcompound).ifPresent((entity) -> {
                     float f = entity.rotate(rotation);
 
                     f += entity.mirror(mirror) - entity.getYRot();
-                    entity.moveTo(vec31.x, vec31.y, vec31.z, f, entity.getXRot());
-                    if (flag && entity instanceof Mob) {
-                        ((Mob) entity).finalizeSpawn(serverlevelaccessor, serverlevelaccessor.getCurrentDifficultyAt(BlockPos.containing(vec31)), MobSpawnType.STRUCTURE, (SpawnGroupData) null, compoundtag);
+                    entity.moveTo(vec3d1.x, vec3d1.y, vec3d1.z, f, entity.getXRot());
+                    if (withEntities && entity instanceof Mob) {
+                        ((Mob) entity).finalizeSpawn(serverLevel, serverLevel.getCurrentDifficultyAt(BlockPos.containing(vec3d1)), EnumMobSpawn.STRUCTURE, (GroupDataEntity) null, nbttagcompound);
                     }
 
-                    serverlevelaccessor.addFreshEntityWithPassengers(entity);
+                    serverLevel.addFreshEntityWithPassengers(entity);
                 });
             }
         }
 
     }
 
-    private static Optional<Entity> createEntityIgnoreException(ServerLevelAccessor serverlevelaccessor, CompoundTag compoundtag) {
-        try {
-            return EntityType.create(compoundtag, serverlevelaccessor.getLevel());
-        } catch (Exception exception) {
-            return Optional.empty();
-        }
+    private static Optional<Entity> createEntityIgnoreException(ServerLevelAccessor level, CompoundTag tag) {
+        // CraftBukkit start
+        // try {
+            return EntityType.create(tag, level.getLevel());
+        // } catch (Exception exception) {
+            // return Optional.empty();
+        // }
+        // CraftBukkit end
     }
 
     public Vec3i getSize(Rotation rotation) {
@@ -489,10 +527,10 @@
         }
     }
 
-    public static BlockPos transform(BlockPos blockpos, Mirror mirror, Rotation rotation, BlockPos blockpos1) {
-        int i = blockpos.getX();
-        int j = blockpos.getY();
-        int k = blockpos.getZ();
+    public static BlockPos transform(BlockPos targetPos, Mirror mirror, Rotation rotation, BlockPos offset) {
+        int i = targetPos.getX();
+        int j = targetPos.getY();
+        int k = targetPos.getZ();
         boolean flag = true;
 
         switch (mirror) {
@@ -506,8 +544,8 @@
                 flag = false;
         }
 
-        int l = blockpos1.getX();
-        int i1 = blockpos1.getZ();
+        int l = offset.getX();
+        int i1 = offset.getZ();
 
         switch (rotation) {
             case COUNTERCLOCKWISE_90:
@@ -517,14 +555,14 @@
             case CLOCKWISE_180:
                 return new BlockPos(l + l - i, j, i1 + i1 - k);
             default:
-                return flag ? new BlockPos(i, j, k) : blockpos;
+                return flag ? new BlockPos(i, j, k) : targetPos;
         }
     }
 
-    public static Vec3 transform(Vec3 vec3, Mirror mirror, Rotation rotation, BlockPos blockpos) {
-        double d0 = vec3.x;
-        double d1 = vec3.y;
-        double d2 = vec3.z;
+    public static Vec3 transform(Vec3 target, Mirror mirror, Rotation rotation, BlockPos centerOffset) {
+        double d0 = target.x;
+        double d1 = target.y;
+        double d2 = target.z;
         boolean flag = true;
 
         switch (mirror) {
@@ -538,8 +576,8 @@
                 flag = false;
         }
 
-        int i = blockpos.getX();
-        int j = blockpos.getZ();
+        int i = centerOffset.getX();
+        int j = centerOffset.getZ();
 
         switch (rotation) {
             case COUNTERCLOCKWISE_90:
@@ -549,215 +587,226 @@
             case CLOCKWISE_180:
                 return new Vec3((double) (i + i + 1) - d0, d1, (double) (j + j + 1) - d2);
             default:
-                return flag ? new Vec3(d0, d1, d2) : vec3;
+                return flag ? new Vec3(d0, d1, d2) : target;
         }
     }
 
-    public BlockPos getZeroPositionWithTransform(BlockPos blockpos, Mirror mirror, Rotation rotation) {
-        return getZeroPositionWithTransform(blockpos, mirror, rotation, this.getSize().getX(), this.getSize().getZ());
+    public BlockPos getZeroPositionWithTransform(BlockPos targetPos, Mirror mirror, Rotation rotation) {
+        return getZeroPositionWithTransform(targetPos, mirror, rotation, this.getSize().getX(), this.getSize().getZ());
     }
 
-    public static BlockPos getZeroPositionWithTransform(BlockPos blockpos, Mirror mirror, Rotation rotation, int i, int j) {
-        --i;
-        --j;
-        int k = mirror == Mirror.FRONT_BACK ? i : 0;
-        int l = mirror == Mirror.LEFT_RIGHT ? j : 0;
-        BlockPos blockpos1 = blockpos;
+    public static BlockPos getZeroPositionWithTransform(BlockPos pos, Mirror mirror, Rotation rotation, int sizeX, int sizeZ) {
+        --sizeX;
+        --sizeZ;
+        int k = mirror == Mirror.FRONT_BACK ? sizeX : 0;
+        int l = mirror == Mirror.LEFT_RIGHT ? sizeZ : 0;
+        BlockPos blockposition1 = pos;
 
         switch (rotation) {
             case COUNTERCLOCKWISE_90:
-                blockpos1 = blockpos.offset(l, 0, i - k);
+                blockposition1 = pos.offset(l, 0, sizeX - k);
                 break;
             case CLOCKWISE_90:
-                blockpos1 = blockpos.offset(j - l, 0, k);
+                blockposition1 = pos.offset(sizeZ - l, 0, k);
                 break;
             case CLOCKWISE_180:
-                blockpos1 = blockpos.offset(i - k, 0, j - l);
+                blockposition1 = pos.offset(sizeX - k, 0, sizeZ - l);
                 break;
             case NONE:
-                blockpos1 = blockpos.offset(k, 0, l);
+                blockposition1 = pos.offset(k, 0, l);
         }
 
-        return blockpos1;
+        return blockposition1;
     }
 
-    public BoundingBox getBoundingBox(StructurePlaceSettings structureplacesettings, BlockPos blockpos) {
-        return this.getBoundingBox(blockpos, structureplacesettings.getRotation(), structureplacesettings.getRotationPivot(), structureplacesettings.getMirror());
+    public BoundingBox getBoundingBox(StructurePlaceSettings settings, BlockPos startPos) {
+        return this.getBoundingBox(startPos, settings.getRotation(), settings.getRotationPivot(), settings.getMirror());
     }
 
-    public BoundingBox getBoundingBox(BlockPos blockpos, Rotation rotation, BlockPos blockpos1, Mirror mirror) {
-        return getBoundingBox(blockpos, rotation, blockpos1, mirror, this.size);
+    public BoundingBox getBoundingBox(BlockPos startPos, Rotation rotation, BlockPos pivotPos, Mirror mirror) {
+        return getBoundingBox(startPos, rotation, pivotPos, mirror, this.size);
     }
 
     @VisibleForTesting
-    protected static BoundingBox getBoundingBox(BlockPos blockpos, Rotation rotation, BlockPos blockpos1, Mirror mirror, Vec3i vec3i) {
-        Vec3i vec3i1 = vec3i.offset(-1, -1, -1);
-        BlockPos blockpos2 = transform(BlockPos.ZERO, mirror, rotation, blockpos1);
-        BlockPos blockpos3 = transform(BlockPos.ZERO.offset(vec3i1), mirror, rotation, blockpos1);
+    protected static BoundingBox getBoundingBox(BlockPos startPos, Rotation rotation, BlockPos pivotPos, Mirror mirror, Vec3i size) {
+        Vec3i baseblockposition1 = size.offset(-1, -1, -1);
+        BlockPos blockposition2 = transform(BlockPos.ZERO, mirror, rotation, pivotPos);
+        BlockPos blockposition3 = transform(BlockPos.ZERO.offset(baseblockposition1), mirror, rotation, pivotPos);
 
-        return BoundingBox.fromCorners(blockpos2, blockpos3).move(blockpos);
+        return BoundingBox.fromCorners(blockposition2, blockposition3).move(startPos);
     }
 
-    public CompoundTag save(CompoundTag compoundtag) {
+    public CompoundTag save(CompoundTag tag) {
         if (this.palettes.isEmpty()) {
-            compoundtag.put("blocks", new ListTag());
-            compoundtag.put("palette", new ListTag());
+            tag.put("blocks", new ListTag());
+            tag.put("palette", new ListTag());
         } else {
             List<StructureTemplate.SimplePalette> list = Lists.newArrayList();
-            StructureTemplate.SimplePalette structuretemplate_simplepalette = new StructureTemplate.SimplePalette();
+            StructureTemplate.SimplePalette definedstructure_b = new StructureTemplate.SimplePalette();
 
-            list.add(structuretemplate_simplepalette);
+            list.add(definedstructure_b);
 
             for (int i = 1; i < this.palettes.size(); ++i) {
                 list.add(new StructureTemplate.SimplePalette());
             }
 
-            ListTag listtag = new ListTag();
+            ListTag nbttaglist = new ListTag();
             List<StructureTemplate.StructureBlockInfo> list1 = ((StructureTemplate.Palette) this.palettes.get(0)).blocks();
 
             for (int j = 0; j < list1.size(); ++j) {
-                StructureTemplate.StructureBlockInfo structuretemplate_structureblockinfo = (StructureTemplate.StructureBlockInfo) list1.get(j);
-                CompoundTag compoundtag1 = new CompoundTag();
+                StructureTemplate.StructureBlockInfo definedstructure_blockinfo = (StructureTemplate.StructureBlockInfo) list1.get(j);
+                CompoundTag nbttagcompound1 = new CompoundTag();
 
-                compoundtag1.put("pos", this.newIntegerList(structuretemplate_structureblockinfo.pos.getX(), structuretemplate_structureblockinfo.pos.getY(), structuretemplate_structureblockinfo.pos.getZ()));
-                int k = structuretemplate_simplepalette.idFor(structuretemplate_structureblockinfo.state);
+                nbttagcompound1.put("pos", this.newIntegerList(definedstructure_blockinfo.pos.getX(), definedstructure_blockinfo.pos.getY(), definedstructure_blockinfo.pos.getZ()));
+                int k = definedstructure_b.idFor(definedstructure_blockinfo.state);
 
-                compoundtag1.putInt("state", k);
-                if (structuretemplate_structureblockinfo.nbt != null) {
-                    compoundtag1.put("nbt", structuretemplate_structureblockinfo.nbt);
+                nbttagcompound1.putInt("state", k);
+                if (definedstructure_blockinfo.nbt != null) {
+                    nbttagcompound1.put("nbt", definedstructure_blockinfo.nbt);
                 }
 
-                listtag.add(compoundtag1);
+                nbttaglist.add(nbttagcompound1);
 
                 for (int l = 1; l < this.palettes.size(); ++l) {
-                    StructureTemplate.SimplePalette structuretemplate_simplepalette1 = (StructureTemplate.SimplePalette) list.get(l);
+                    StructureTemplate.SimplePalette definedstructure_b1 = (StructureTemplate.SimplePalette) list.get(l);
 
-                    structuretemplate_simplepalette1.addMapping(((StructureTemplate.StructureBlockInfo) ((StructureTemplate.Palette) this.palettes.get(l)).blocks().get(j)).state, k);
+                    definedstructure_b1.addMapping(((StructureTemplate.StructureBlockInfo) ((StructureTemplate.Palette) this.palettes.get(l)).blocks().get(j)).state, k);
                 }
             }
 
-            compoundtag.put("blocks", listtag);
-            ListTag listtag1;
+            tag.put("blocks", nbttaglist);
+            ListTag nbttaglist1;
             Iterator iterator;
 
             if (list.size() == 1) {
-                listtag1 = new ListTag();
-                iterator = structuretemplate_simplepalette.iterator();
+                nbttaglist1 = new ListTag();
+                iterator = definedstructure_b.iterator();
 
                 while (iterator.hasNext()) {
-                    BlockState blockstate = (BlockState) iterator.next();
+                    IBlockData iblockdata = (IBlockData) iterator.next();
 
-                    listtag1.add(NbtUtils.writeBlockState(blockstate));
+                    nbttaglist1.add(NbtUtils.writeBlockState(iblockdata));
                 }
 
-                compoundtag.put("palette", listtag1);
+                tag.put("palette", nbttaglist1);
             } else {
-                listtag1 = new ListTag();
+                nbttaglist1 = new ListTag();
                 iterator = list.iterator();
 
                 while (iterator.hasNext()) {
-                    StructureTemplate.SimplePalette structuretemplate_simplepalette2 = (StructureTemplate.SimplePalette) iterator.next();
-                    ListTag listtag2 = new ListTag();
-                    Iterator iterator1 = structuretemplate_simplepalette2.iterator();
+                    StructureTemplate.SimplePalette definedstructure_b2 = (StructureTemplate.SimplePalette) iterator.next();
+                    ListTag nbttaglist2 = new ListTag();
+                    Iterator iterator1 = definedstructure_b2.iterator();
 
                     while (iterator1.hasNext()) {
-                        BlockState blockstate1 = (BlockState) iterator1.next();
+                        IBlockData iblockdata1 = (IBlockData) iterator1.next();
 
-                        listtag2.add(NbtUtils.writeBlockState(blockstate1));
+                        nbttaglist2.add(NbtUtils.writeBlockState(iblockdata1));
                     }
 
-                    listtag1.add(listtag2);
+                    nbttaglist1.add(nbttaglist2);
                 }
 
-                compoundtag.put("palettes", listtag1);
+                tag.put("palettes", nbttaglist1);
             }
         }
 
-        ListTag listtag3 = new ListTag();
+        ListTag nbttaglist3 = new ListTag();
 
-        CompoundTag compoundtag2;
+        CompoundTag nbttagcompound2;
 
-        for (Iterator iterator2 = this.entityInfoList.iterator(); iterator2.hasNext(); listtag3.add(compoundtag2)) {
-            StructureTemplate.StructureEntityInfo structuretemplate_structureentityinfo = (StructureTemplate.StructureEntityInfo) iterator2.next();
+        for (Iterator iterator2 = this.entityInfoList.iterator(); iterator2.hasNext(); nbttaglist3.add(nbttagcompound2)) {
+            StructureTemplate.StructureEntityInfo definedstructure_entityinfo = (StructureTemplate.StructureEntityInfo) iterator2.next();
 
-            compoundtag2 = new CompoundTag();
-            compoundtag2.put("pos", this.newDoubleList(structuretemplate_structureentityinfo.pos.x, structuretemplate_structureentityinfo.pos.y, structuretemplate_structureentityinfo.pos.z));
-            compoundtag2.put("blockPos", this.newIntegerList(structuretemplate_structureentityinfo.blockPos.getX(), structuretemplate_structureentityinfo.blockPos.getY(), structuretemplate_structureentityinfo.blockPos.getZ()));
-            if (structuretemplate_structureentityinfo.nbt != null) {
-                compoundtag2.put("nbt", structuretemplate_structureentityinfo.nbt);
+            nbttagcompound2 = new CompoundTag();
+            nbttagcompound2.put("pos", this.newDoubleList(definedstructure_entityinfo.pos.x, definedstructure_entityinfo.pos.y, definedstructure_entityinfo.pos.z));
+            nbttagcompound2.put("blockPos", this.newIntegerList(definedstructure_entityinfo.blockPos.getX(), definedstructure_entityinfo.blockPos.getY(), definedstructure_entityinfo.blockPos.getZ()));
+            if (definedstructure_entityinfo.nbt != null) {
+                nbttagcompound2.put("nbt", definedstructure_entityinfo.nbt);
             }
         }
 
-        compoundtag.put("entities", listtag3);
-        compoundtag.put("size", this.newIntegerList(this.size.getX(), this.size.getY(), this.size.getZ()));
-        return NbtUtils.addCurrentDataVersion(compoundtag);
+        tag.put("entities", nbttaglist3);
+        tag.put("size", this.newIntegerList(this.size.getX(), this.size.getY(), this.size.getZ()));
+        // CraftBukkit start - PDC
+        if (!this.persistentDataContainer.isEmpty()) {
+            tag.put("BukkitValues", this.persistentDataContainer.toTagCompound());
+        }
+        // CraftBukkit end
+        return NbtUtils.addCurrentDataVersion(tag);
     }
 
-    public void load(HolderGetter<Block> holdergetter, CompoundTag compoundtag) {
+    public void load(HolderGetter<Block> blockGetter, CompoundTag tag) {
         this.palettes.clear();
         this.entityInfoList.clear();
-        ListTag listtag = compoundtag.getList("size", 3);
+        ListTag nbttaglist = tag.getList("size", 3);
 
-        this.size = new Vec3i(listtag.getInt(0), listtag.getInt(1), listtag.getInt(2));
-        ListTag listtag1 = compoundtag.getList("blocks", 10);
-        ListTag listtag2;
+        this.size = new Vec3i(nbttaglist.getInt(0), nbttaglist.getInt(1), nbttaglist.getInt(2));
+        ListTag nbttaglist1 = tag.getList("blocks", 10);
+        ListTag nbttaglist2;
         int i;
 
-        if (compoundtag.contains("palettes", 9)) {
-            listtag2 = compoundtag.getList("palettes", 9);
+        if (tag.contains("palettes", 9)) {
+            nbttaglist2 = tag.getList("palettes", 9);
 
-            for (i = 0; i < listtag2.size(); ++i) {
-                this.loadPalette(holdergetter, listtag2.getList(i), listtag1);
+            for (i = 0; i < nbttaglist2.size(); ++i) {
+                this.loadPalette(blockGetter, nbttaglist2.getList(i), nbttaglist1);
             }
         } else {
-            this.loadPalette(holdergetter, compoundtag.getList("palette", 10), listtag1);
+            this.loadPalette(blockGetter, tag.getList("palette", 10), nbttaglist1);
         }
 
-        listtag2 = compoundtag.getList("entities", 10);
+        nbttaglist2 = tag.getList("entities", 10);
 
-        for (i = 0; i < listtag2.size(); ++i) {
-            CompoundTag compoundtag1 = listtag2.getCompound(i);
-            ListTag listtag3 = compoundtag1.getList("pos", 6);
-            Vec3 vec3 = new Vec3(listtag3.getDouble(0), listtag3.getDouble(1), listtag3.getDouble(2));
-            ListTag listtag4 = compoundtag1.getList("blockPos", 3);
-            BlockPos blockpos = new BlockPos(listtag4.getInt(0), listtag4.getInt(1), listtag4.getInt(2));
+        for (i = 0; i < nbttaglist2.size(); ++i) {
+            CompoundTag nbttagcompound1 = nbttaglist2.getCompound(i);
+            ListTag nbttaglist3 = nbttagcompound1.getList("pos", 6);
+            Vec3 vec3d = new Vec3(nbttaglist3.getDouble(0), nbttaglist3.getDouble(1), nbttaglist3.getDouble(2));
+            ListTag nbttaglist4 = nbttagcompound1.getList("blockPos", 3);
+            BlockPos blockposition = new BlockPos(nbttaglist4.getInt(0), nbttaglist4.getInt(1), nbttaglist4.getInt(2));
 
-            if (compoundtag1.contains("nbt")) {
-                CompoundTag compoundtag2 = compoundtag1.getCompound("nbt");
+            if (nbttagcompound1.contains("nbt")) {
+                CompoundTag nbttagcompound2 = nbttagcompound1.getCompound("nbt");
 
-                this.entityInfoList.add(new StructureTemplate.StructureEntityInfo(vec3, blockpos, compoundtag2));
+                this.entityInfoList.add(new StructureTemplate.StructureEntityInfo(vec3d, blockposition, nbttagcompound2));
             }
         }
 
+        // CraftBukkit start - PDC
+        Tag base = tag.get("BukkitValues");
+        if (base instanceof CompoundTag) {
+            this.persistentDataContainer.putAll((CompoundTag) base);
+        }
+        // CraftBukkit end
     }
 
-    private void loadPalette(HolderGetter<Block> holdergetter, ListTag listtag, ListTag listtag1) {
-        StructureTemplate.SimplePalette structuretemplate_simplepalette = new StructureTemplate.SimplePalette();
+    private void loadPalette(HolderGetter<Block> blockGetter, ListTag paletteTag, ListTag blocksTag) {
+        StructureTemplate.SimplePalette definedstructure_b = new StructureTemplate.SimplePalette();
 
-        for (int i = 0; i < listtag.size(); ++i) {
-            structuretemplate_simplepalette.addMapping(NbtUtils.readBlockState(holdergetter, listtag.getCompound(i)), i);
+        for (int i = 0; i < paletteTag.size(); ++i) {
+            definedstructure_b.addMapping(NbtUtils.readBlockState(blockGetter, paletteTag.getCompound(i)), i);
         }
 
         List<StructureTemplate.StructureBlockInfo> list = Lists.newArrayList();
         List<StructureTemplate.StructureBlockInfo> list1 = Lists.newArrayList();
         List<StructureTemplate.StructureBlockInfo> list2 = Lists.newArrayList();
 
-        for (int j = 0; j < listtag1.size(); ++j) {
-            CompoundTag compoundtag = listtag1.getCompound(j);
-            ListTag listtag2 = compoundtag.getList("pos", 3);
-            BlockPos blockpos = new BlockPos(listtag2.getInt(0), listtag2.getInt(1), listtag2.getInt(2));
-            BlockState blockstate = structuretemplate_simplepalette.stateFor(compoundtag.getInt("state"));
-            CompoundTag compoundtag1;
+        for (int j = 0; j < blocksTag.size(); ++j) {
+            CompoundTag nbttagcompound = blocksTag.getCompound(j);
+            ListTag nbttaglist2 = nbttagcompound.getList("pos", 3);
+            BlockPos blockposition = new BlockPos(nbttaglist2.getInt(0), nbttaglist2.getInt(1), nbttaglist2.getInt(2));
+            IBlockData iblockdata = definedstructure_b.stateFor(nbttagcompound.getInt("state"));
+            CompoundTag nbttagcompound1;
 
-            if (compoundtag.contains("nbt")) {
-                compoundtag1 = compoundtag.getCompound("nbt");
+            if (nbttagcompound.contains("nbt")) {
+                nbttagcompound1 = nbttagcompound.getCompound("nbt");
             } else {
-                compoundtag1 = null;
+                nbttagcompound1 = null;
             }
 
-            StructureTemplate.StructureBlockInfo structuretemplate_structureblockinfo = new StructureTemplate.StructureBlockInfo(blockpos, blockstate, compoundtag1);
+            StructureTemplate.StructureBlockInfo definedstructure_blockinfo = new StructureTemplate.StructureBlockInfo(blockposition, iblockdata, nbttagcompound1);
 
-            addToLists(structuretemplate_structureblockinfo, list, list1, list2);
+            addToLists(definedstructure_blockinfo, list, list1, list2);
         }
 
         List<StructureTemplate.StructureBlockInfo> list3 = buildInfoList(list, list1, list2);
@@ -765,37 +814,36 @@
         this.palettes.add(new StructureTemplate.Palette(list3));
     }
 
-    private ListTag newIntegerList(int... aint) {
-        ListTag listtag = new ListTag();
-        int[] aint1 = aint;
-        int i = aint.length;
+    private ListTag newIntegerList(int... values) {
+        ListTag nbttaglist = new ListTag();
+        int[] aint1 = values;
+        int i = values.length;
 
         for (int j = 0; j < i; ++j) {
             int k = aint1[j];
 
-            listtag.add(IntTag.valueOf(k));
+            nbttaglist.add(IntTag.valueOf(k));
         }
 
-        return listtag;
+        return nbttaglist;
     }
 
-    private ListTag newDoubleList(double... adouble) {
-        ListTag listtag = new ListTag();
-        double[] adouble1 = adouble;
-        int i = adouble.length;
+    private ListTag newDoubleList(double... values) {
+        ListTag nbttaglist = new ListTag();
+        double[] adouble1 = values;
+        int i = values.length;
 
         for (int j = 0; j < i; ++j) {
             double d0 = adouble1[j];
 
-            listtag.add(DoubleTag.valueOf(d0));
+            nbttaglist.add(DoubleTag.valueOf(d0));
         }
 
-        return listtag;
+        return nbttaglist;
     }
 
-    public static record StructureBlockInfo(BlockPos pos, BlockState state, @Nullable CompoundTag nbt) {
+    public static record StructureBlockInfo(BlockPos pos, IBlockData state, @Nullable CompoundTag nbt) {
 
-        @Override
         public String toString() {
             return String.format(Locale.ROOT, "<StructureBlockInfo | %s | %s | %s>", this.pos, this.state, this.nbt);
         }
@@ -806,8 +854,8 @@
         private final List<StructureTemplate.StructureBlockInfo> blocks;
         private final Map<Block, List<StructureTemplate.StructureBlockInfo>> cache = Maps.newHashMap();
 
-        Palette(List<StructureTemplate.StructureBlockInfo> list) {
-            this.blocks = list;
+        Palette(List<StructureTemplate.StructureBlockInfo> blocks) {
+            this.blocks = blocks;
         }
 
         public List<StructureTemplate.StructureBlockInfo> blocks() {
@@ -816,8 +864,8 @@
 
         public List<StructureTemplate.StructureBlockInfo> blocks(Block block) {
             return (List) this.cache.computeIfAbsent(block, (block1) -> {
-                return (List) this.blocks.stream().filter((structuretemplate_structureblockinfo) -> {
-                    return structuretemplate_structureblockinfo.state.is(block1);
+                return (List) this.blocks.stream().filter((definedstructure_blockinfo) -> {
+                    return definedstructure_blockinfo.state.is(block1);
                 }).collect(Collectors.toList());
             });
         }
@@ -829,46 +877,45 @@
         public final BlockPos blockPos;
         public final CompoundTag nbt;
 
-        public StructureEntityInfo(Vec3 vec3, BlockPos blockpos, CompoundTag compoundtag) {
-            this.pos = vec3;
-            this.blockPos = blockpos;
-            this.nbt = compoundtag;
+        public StructureEntityInfo(Vec3 pos, BlockPos blockPos, CompoundTag nbt) {
+            this.pos = pos;
+            this.blockPos = blockPos;
+            this.nbt = nbt;
         }
     }
 
-    private static class SimplePalette implements Iterable<BlockState> {
+    private static class SimplePalette implements Iterable<IBlockData> {
 
-        public static final BlockState DEFAULT_BLOCK_STATE = Blocks.AIR.defaultBlockState();
-        private final IdMapper<BlockState> ids = new IdMapper<>(16);
+        public static final IBlockData DEFAULT_BLOCK_STATE = Blocks.AIR.defaultBlockState();
+        private final IdMapper<IBlockData> ids = new IdMapper<>(16);
         private int lastId;
 
         SimplePalette() {}
 
-        public int idFor(BlockState blockstate) {
-            int i = this.ids.getId(blockstate);
+        public int idFor(IBlockData state) {
+            int i = this.ids.getId(state);
 
             if (i == -1) {
                 i = this.lastId++;
-                this.ids.addMapping(blockstate, i);
+                this.ids.addMapping(state, i);
             }
 
             return i;
         }
 
         @Nullable
-        public BlockState stateFor(int i) {
-            BlockState blockstate = (BlockState) this.ids.byId(i);
+        public IBlockData stateFor(int id) {
+            IBlockData iblockdata = (IBlockData) this.ids.byId(id);
 
-            return blockstate == null ? StructureTemplate.SimplePalette.DEFAULT_BLOCK_STATE : blockstate;
+            return iblockdata == null ? DEFAULT_BLOCK_STATE : iblockdata; // CraftBukkit - decompile error
         }
 
-        @Override
-        public Iterator<BlockState> iterator() {
+        public Iterator<IBlockData> iterator() {
             return this.ids.iterator();
         }
 
-        public void addMapping(BlockState blockstate, int i) {
-            this.ids.addMapping(blockstate, i);
+        public void addMapping(IBlockData state, int id) {
+            this.ids.addMapping(state, id);
         }
     }
 }
