--- a/net/minecraft/world/level/levelgen/structure/structures/IglooPieces.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/IglooPieces.java
@@ -14,9 +14,7 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
-import net.minecraft.world.level.block.entity.BlockEntity;
-import net.minecraft.world.level.block.entity.ChestBlockEntity;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
@@ -41,83 +39,85 @@
 
     public IglooPieces() {}
 
-    public static void addPieces(StructureTemplateManager structuretemplatemanager, BlockPos blockpos, Rotation rotation, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-        if (randomsource.nextDouble() < 0.5D) {
-            int i = randomsource.nextInt(8) + 4;
+    public static void addPieces(StructureTemplateManager structureTemplateManager, BlockPos startPos, Rotation rotation, StructurePieceAccessor pieces, RandomSource random) {
+        if (random.nextDouble() < 0.5D) {
+            int i = random.nextInt(8) + 4;
 
-            structurepieceaccessor.addPiece(new IglooPieces.IglooPiece(structuretemplatemanager, IglooPieces.STRUCTURE_LOCATION_LABORATORY, blockpos, rotation, i * 3));
+            pieces.addPiece(new IglooPieces.IglooPiece(structureTemplateManager, IglooPieces.STRUCTURE_LOCATION_LABORATORY, startPos, rotation, i * 3));
 
             for (int j = 0; j < i - 1; ++j) {
-                structurepieceaccessor.addPiece(new IglooPieces.IglooPiece(structuretemplatemanager, IglooPieces.STRUCTURE_LOCATION_LADDER, blockpos, rotation, j * 3));
+                pieces.addPiece(new IglooPieces.IglooPiece(structureTemplateManager, IglooPieces.STRUCTURE_LOCATION_LADDER, startPos, rotation, j * 3));
             }
         }
 
-        structurepieceaccessor.addPiece(new IglooPieces.IglooPiece(structuretemplatemanager, IglooPieces.STRUCTURE_LOCATION_IGLOO, blockpos, rotation, 0));
+        pieces.addPiece(new IglooPieces.IglooPiece(structureTemplateManager, IglooPieces.STRUCTURE_LOCATION_IGLOO, startPos, rotation, 0));
     }
 
     public static class IglooPiece extends TemplateStructurePiece {
 
-        public IglooPiece(StructureTemplateManager structuretemplatemanager, ResourceLocation resourcelocation, BlockPos blockpos, Rotation rotation, int i) {
-            super(StructurePieceType.IGLOO, 0, structuretemplatemanager, resourcelocation, resourcelocation.toString(), makeSettings(rotation, resourcelocation), makePosition(resourcelocation, blockpos, i));
+        public IglooPiece(StructureTemplateManager structureTemplateManager, ResourceLocation location, BlockPos startPos, Rotation rotation, int down) {
+            super(StructurePieceType.IGLOO, 0, structureTemplateManager, location, location.toString(), makeSettings(rotation, location), makePosition(location, startPos, down));
         }
 
-        public IglooPiece(StructureTemplateManager structuretemplatemanager, CompoundTag compoundtag) {
-            super(StructurePieceType.IGLOO, compoundtag, structuretemplatemanager, (resourcelocation) -> {
-                return makeSettings(Rotation.valueOf(compoundtag.getString("Rot")), resourcelocation);
+        public IglooPiece(StructureTemplateManager structureTemplateManager, CompoundTag tag) {
+            super(StructurePieceType.IGLOO, tag, structureTemplateManager, (minecraftkey) -> {
+                return makeSettings(Rotation.valueOf(tag.getString("Rot")), minecraftkey);
             });
         }
 
-        private static StructurePlaceSettings makeSettings(Rotation rotation, ResourceLocation resourcelocation) {
-            return (new StructurePlaceSettings()).setRotation(rotation).setMirror(Mirror.NONE).setRotationPivot((BlockPos) IglooPieces.PIVOTS.get(resourcelocation)).addProcessor(BlockIgnoreProcessor.STRUCTURE_BLOCK);
+        private static StructurePlaceSettings makeSettings(Rotation rotation, ResourceLocation location) {
+            return (new StructurePlaceSettings()).setRotation(rotation).setMirror(Mirror.NONE).setRotationPivot((BlockPos) IglooPieces.PIVOTS.get(location)).addProcessor(BlockIgnoreProcessor.STRUCTURE_BLOCK);
         }
 
-        private static BlockPos makePosition(ResourceLocation resourcelocation, BlockPos blockpos, int i) {
-            return blockpos.offset((Vec3i) IglooPieces.OFFSETS.get(resourcelocation)).below(i);
+        private static BlockPos makePosition(ResourceLocation location, BlockPos pos, int down) {
+            return pos.offset((Vec3i) IglooPieces.OFFSETS.get(location)).below(down);
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putString("Rot", this.placeSettings.getRotation().name());
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putString("Rot", this.placeSettings.getRotation().name());
         }
 
         @Override
-        @Override
-        protected void handleDataMarker(String s, BlockPos blockpos, ServerLevelAccessor serverlevelaccessor, RandomSource randomsource, BoundingBox boundingbox) {
-            if ("chest".equals(s)) {
-                serverlevelaccessor.setBlock(blockpos, Blocks.AIR.defaultBlockState(), 3);
-                BlockEntity blockentity = serverlevelaccessor.getBlockEntity(blockpos.below());
+        protected void handleDataMarker(String name, BlockPos pos, ServerLevelAccessor level, RandomSource random, BoundingBox box) {
+            if ("chest".equals(name)) {
+                level.setBlock(pos, Blocks.AIR.defaultBlockState(), 3);
+                // CraftBukkit start - ensure block transformation
+                /*
+                TileEntity tileentity = worldaccess.getBlockEntity(blockposition.below());
 
-                if (blockentity instanceof ChestBlockEntity) {
-                    ((ChestBlockEntity) blockentity).setLootTable(BuiltInLootTables.IGLOO_CHEST, randomsource.nextLong());
+                if (tileentity instanceof TileEntityChest) {
+                    ((TileEntityChest) tileentity).setLootTable(LootTables.IGLOO_CHEST, randomsource.nextLong());
                 }
+                */
+                setCraftLootTable(level, pos.below(), random, BuiltInLootTables.IGLOO_CHEST);
+                // CraftBukkit end
 
             }
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            ResourceLocation resourcelocation = new ResourceLocation(this.templateName);
-            StructurePlaceSettings structureplacesettings = makeSettings(this.placeSettings.getRotation(), resourcelocation);
-            BlockPos blockpos1 = (BlockPos) IglooPieces.OFFSETS.get(resourcelocation);
-            BlockPos blockpos2 = this.templatePosition.offset(StructureTemplate.calculateRelativePosition(structureplacesettings, new BlockPos(3 - blockpos1.getX(), 0, -blockpos1.getZ())));
-            int i = worldgenlevel.getHeight(Heightmap.Types.WORLD_SURFACE_WG, blockpos2.getX(), blockpos2.getZ());
-            BlockPos blockpos3 = this.templatePosition;
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            ResourceLocation minecraftkey = new ResourceLocation(this.templateName);
+            StructurePlaceSettings definedstructureinfo = makeSettings(this.placeSettings.getRotation(), minecraftkey);
+            BlockPos blockposition1 = (BlockPos) IglooPieces.OFFSETS.get(minecraftkey);
+            BlockPos blockposition2 = this.templatePosition.offset(StructureTemplate.calculateRelativePosition(definedstructureinfo, new BlockPos(3 - blockposition1.getX(), 0, -blockposition1.getZ())));
+            int i = level.getHeight(Heightmap.Types.WORLD_SURFACE_WG, blockposition2.getX(), blockposition2.getZ());
+            BlockPos blockposition3 = this.templatePosition;
 
             this.templatePosition = this.templatePosition.offset(0, i - 90 - 1, 0);
-            super.postProcess(worldgenlevel, structuremanager, chunkgenerator, randomsource, boundingbox, chunkpos, blockpos);
-            if (resourcelocation.equals(IglooPieces.STRUCTURE_LOCATION_IGLOO)) {
-                BlockPos blockpos4 = this.templatePosition.offset(StructureTemplate.calculateRelativePosition(structureplacesettings, new BlockPos(3, 0, 5)));
-                BlockState blockstate = worldgenlevel.getBlockState(blockpos4.below());
+            super.postProcess(level, structureManager, generator, random, box, chunkPos, pos);
+            if (minecraftkey.equals(IglooPieces.STRUCTURE_LOCATION_IGLOO)) {
+                BlockPos blockposition4 = this.templatePosition.offset(StructureTemplate.calculateRelativePosition(definedstructureinfo, new BlockPos(3, 0, 5)));
+                IBlockData iblockdata = level.getBlockState(blockposition4.below());
 
-                if (!blockstate.isAir() && !blockstate.is(Blocks.LADDER)) {
-                    worldgenlevel.setBlock(blockpos4, Blocks.SNOW_BLOCK.defaultBlockState(), 3);
+                if (!iblockdata.isAir() && !iblockdata.is(Blocks.LADDER)) {
+                    level.setBlock(blockposition4, Blocks.SNOW_BLOCK.defaultBlockState(), 3);
                 }
             }
 
-            this.templatePosition = blockpos3;
+            this.templatePosition = blockposition3;
         }
     }
 }
