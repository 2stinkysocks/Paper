--- a/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
+++ b/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
@@ -22,7 +22,7 @@
     private boolean keepLiquids;
     @Nullable
     private RandomSource random;
-    private int palette;
+    public int palette = -1; // CraftBukkit - Set initial value so we know if the palette has been set forcefully
     private final List<StructureProcessor> processors;
     private boolean knownShape;
     private boolean finalizeEntities;
@@ -36,20 +36,20 @@
     }
 
     public StructurePlaceSettings copy() {
-        StructurePlaceSettings structureplacesettings = new StructurePlaceSettings();
+        StructurePlaceSettings definedstructureinfo = new StructurePlaceSettings();
 
-        structureplacesettings.mirror = this.mirror;
-        structureplacesettings.rotation = this.rotation;
-        structureplacesettings.rotationPivot = this.rotationPivot;
-        structureplacesettings.ignoreEntities = this.ignoreEntities;
-        structureplacesettings.boundingBox = this.boundingBox;
-        structureplacesettings.keepLiquids = this.keepLiquids;
-        structureplacesettings.random = this.random;
-        structureplacesettings.palette = this.palette;
-        structureplacesettings.processors.addAll(this.processors);
-        structureplacesettings.knownShape = this.knownShape;
-        structureplacesettings.finalizeEntities = this.finalizeEntities;
-        return structureplacesettings;
+        definedstructureinfo.mirror = this.mirror;
+        definedstructureinfo.rotation = this.rotation;
+        definedstructureinfo.rotationPivot = this.rotationPivot;
+        definedstructureinfo.ignoreEntities = this.ignoreEntities;
+        definedstructureinfo.boundingBox = this.boundingBox;
+        definedstructureinfo.keepLiquids = this.keepLiquids;
+        definedstructureinfo.random = this.random;
+        definedstructureinfo.palette = this.palette;
+        definedstructureinfo.processors.addAll(this.processors);
+        definedstructureinfo.knownShape = this.knownShape;
+        definedstructureinfo.finalizeEntities = this.finalizeEntities;
+        return definedstructureinfo;
     }
 
     public StructurePlaceSettings setMirror(Mirror mirror) {
@@ -62,33 +62,33 @@
         return this;
     }
 
-    public StructurePlaceSettings setRotationPivot(BlockPos blockpos) {
-        this.rotationPivot = blockpos;
+    public StructurePlaceSettings setRotationPivot(BlockPos rotationPivot) {
+        this.rotationPivot = rotationPivot;
         return this;
     }
 
-    public StructurePlaceSettings setIgnoreEntities(boolean flag) {
-        this.ignoreEntities = flag;
+    public StructurePlaceSettings setIgnoreEntities(boolean ignoreEntities) {
+        this.ignoreEntities = ignoreEntities;
         return this;
     }
 
-    public StructurePlaceSettings setBoundingBox(BoundingBox boundingbox) {
-        this.boundingBox = boundingbox;
+    public StructurePlaceSettings setBoundingBox(BoundingBox boundingBox) {
+        this.boundingBox = boundingBox;
         return this;
     }
 
-    public StructurePlaceSettings setRandom(@Nullable RandomSource randomsource) {
-        this.random = randomsource;
+    public StructurePlaceSettings setRandom(@Nullable RandomSource random) {
+        this.random = random;
         return this;
     }
 
-    public StructurePlaceSettings setKeepLiquids(boolean flag) {
-        this.keepLiquids = flag;
+    public StructurePlaceSettings setKeepLiquids(boolean keepLiquids) {
+        this.keepLiquids = keepLiquids;
         return this;
     }
 
-    public StructurePlaceSettings setKnownShape(boolean flag) {
-        this.knownShape = flag;
+    public StructurePlaceSettings setKnownShape(boolean knownShape) {
+        this.knownShape = knownShape;
         return this;
     }
 
@@ -97,13 +97,13 @@
         return this;
     }
 
-    public StructurePlaceSettings addProcessor(StructureProcessor structureprocessor) {
-        this.processors.add(structureprocessor);
+    public StructurePlaceSettings addProcessor(StructureProcessor processor) {
+        this.processors.add(processor);
         return this;
     }
 
-    public StructurePlaceSettings popProcessor(StructureProcessor structureprocessor) {
-        this.processors.remove(structureprocessor);
+    public StructurePlaceSettings popProcessor(StructureProcessor processor) {
+        this.processors.remove(processor);
         return this;
     }
 
@@ -119,8 +119,8 @@
         return this.rotationPivot;
     }
 
-    public RandomSource getRandom(@Nullable BlockPos blockpos) {
-        return this.random != null ? this.random : (blockpos == null ? RandomSource.create(Util.getMillis()) : RandomSource.create(Mth.getSeed(blockpos)));
+    public RandomSource getRandom(@Nullable BlockPos seedPos) {
+        return this.random != null ? this.random : (seedPos == null ? RandomSource.create(Util.getMillis()) : RandomSource.create(Mth.getSeed(seedPos)));
     }
 
     public boolean isIgnoreEntities() {
@@ -144,18 +144,25 @@
         return this.keepLiquids;
     }
 
-    public StructureTemplate.Palette getRandomPalette(List<StructureTemplate.Palette> list, @Nullable BlockPos blockpos) {
-        int i = list.size();
+    public StructureTemplate.Palette getRandomPalette(List<StructureTemplate.Palette> palettes, @Nullable BlockPos pos) {
+        int i = palettes.size();
 
         if (i == 0) {
             throw new IllegalStateException("No palettes");
+        // CraftBukkit start
+        } else if (this.palette > 0) {
+            if (this.palette >= i) {
+                throw new IllegalArgumentException("Palette index out of bounds. Got " + this.palette + " where there are only " + i + " palettes available.");
+            }
+            return palettes.get(this.palette);
+        // CraftBukkit end
         } else {
-            return (StructureTemplate.Palette) list.get(this.getRandom(blockpos).nextInt(i));
+            return (StructureTemplate.Palette) palettes.get(this.getRandom(pos).nextInt(i));
         }
     }
 
-    public StructurePlaceSettings setFinalizeEntities(boolean flag) {
-        this.finalizeEntities = flag;
+    public StructurePlaceSettings setFinalizeEntities(boolean finalizeEntities) {
+        this.finalizeEntities = finalizeEntities;
         return this;
     }
 
