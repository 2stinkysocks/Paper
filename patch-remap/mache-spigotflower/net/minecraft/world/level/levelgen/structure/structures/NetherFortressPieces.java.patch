--- a/net/minecraft/world/level/levelgen/structure/structures/NetherFortressPieces.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/NetherFortressPieces.java
@@ -8,16 +8,13 @@
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.util.RandomSource;
-import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.StructureManager;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.FenceBlock;
 import net.minecraft.world.level.block.StairBlock;
-import net.minecraft.world.level.block.entity.BlockEntity;
-import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.levelgen.structure.StructurePiece;
@@ -38,36 +35,36 @@
 
     public NetherFortressPieces() {}
 
-    static NetherFortressPieces.NetherBridgePiece findAndCreateBridgePieceFactory(NetherFortressPieces.PieceWeight netherfortresspieces_pieceweight, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-        Class<? extends NetherFortressPieces.NetherBridgePiece> oclass = netherfortresspieces_pieceweight.pieceClass;
+    static NetherFortressPieces.NetherBridgePiece findAndCreateBridgePieceFactory(NetherFortressPieces.PieceWeight weight, StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+        Class<? extends NetherFortressPieces.NetherBridgePiece> oclass = weight.pieceClass;
         Object object = null;
 
         if (oclass == NetherFortressPieces.BridgeStraight.class) {
-            object = NetherFortressPieces.BridgeStraight.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
+            object = NetherFortressPieces.BridgeStraight.createPiece(pieces, random, x, y, z, orientation, genDepth);
         } else if (oclass == NetherFortressPieces.BridgeCrossing.class) {
-            object = NetherFortressPieces.BridgeCrossing.createPiece(structurepieceaccessor, i, j, k, direction, l);
+            object = NetherFortressPieces.BridgeCrossing.createPiece(pieces, x, y, z, orientation, genDepth);
         } else if (oclass == NetherFortressPieces.RoomCrossing.class) {
-            object = NetherFortressPieces.RoomCrossing.createPiece(structurepieceaccessor, i, j, k, direction, l);
+            object = NetherFortressPieces.RoomCrossing.createPiece(pieces, x, y, z, orientation, genDepth);
         } else if (oclass == NetherFortressPieces.StairsRoom.class) {
-            object = NetherFortressPieces.StairsRoom.createPiece(structurepieceaccessor, i, j, k, l, direction);
+            object = NetherFortressPieces.StairsRoom.createPiece(pieces, x, y, z, genDepth, orientation);
         } else if (oclass == NetherFortressPieces.MonsterThrone.class) {
-            object = NetherFortressPieces.MonsterThrone.createPiece(structurepieceaccessor, i, j, k, l, direction);
+            object = NetherFortressPieces.MonsterThrone.createPiece(pieces, x, y, z, genDepth, orientation);
         } else if (oclass == NetherFortressPieces.CastleEntrance.class) {
-            object = NetherFortressPieces.CastleEntrance.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
+            object = NetherFortressPieces.CastleEntrance.createPiece(pieces, random, x, y, z, orientation, genDepth);
         } else if (oclass == NetherFortressPieces.CastleSmallCorridorPiece.class) {
-            object = NetherFortressPieces.CastleSmallCorridorPiece.createPiece(structurepieceaccessor, i, j, k, direction, l);
+            object = NetherFortressPieces.CastleSmallCorridorPiece.createPiece(pieces, x, y, z, orientation, genDepth);
         } else if (oclass == NetherFortressPieces.CastleSmallCorridorRightTurnPiece.class) {
-            object = NetherFortressPieces.CastleSmallCorridorRightTurnPiece.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
+            object = NetherFortressPieces.CastleSmallCorridorRightTurnPiece.createPiece(pieces, random, x, y, z, orientation, genDepth);
         } else if (oclass == NetherFortressPieces.CastleSmallCorridorLeftTurnPiece.class) {
-            object = NetherFortressPieces.CastleSmallCorridorLeftTurnPiece.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
+            object = NetherFortressPieces.CastleSmallCorridorLeftTurnPiece.createPiece(pieces, random, x, y, z, orientation, genDepth);
         } else if (oclass == NetherFortressPieces.CastleCorridorStairsPiece.class) {
-            object = NetherFortressPieces.CastleCorridorStairsPiece.createPiece(structurepieceaccessor, i, j, k, direction, l);
+            object = NetherFortressPieces.CastleCorridorStairsPiece.createPiece(pieces, x, y, z, orientation, genDepth);
         } else if (oclass == NetherFortressPieces.CastleCorridorTBalconyPiece.class) {
-            object = NetherFortressPieces.CastleCorridorTBalconyPiece.createPiece(structurepieceaccessor, i, j, k, direction, l);
+            object = NetherFortressPieces.CastleCorridorTBalconyPiece.createPiece(pieces, x, y, z, orientation, genDepth);
         } else if (oclass == NetherFortressPieces.CastleSmallCorridorCrossingPiece.class) {
-            object = NetherFortressPieces.CastleSmallCorridorCrossingPiece.createPiece(structurepieceaccessor, i, j, k, direction, l);
+            object = NetherFortressPieces.CastleSmallCorridorCrossingPiece.createPiece(pieces, x, y, z, orientation, genDepth);
         } else if (oclass == NetherFortressPieces.CastleStalkRoom.class) {
-            object = NetherFortressPieces.CastleStalkRoom.createPiece(structurepieceaccessor, i, j, k, direction, l);
+            object = NetherFortressPieces.CastleStalkRoom.createPiece(pieces, x, y, z, orientation, genDepth);
         }
 
         return (NetherFortressPieces.NetherBridgePiece) object;
@@ -81,18 +78,18 @@
         public final int maxPlaceCount;
         public final boolean allowInRow;
 
-        public PieceWeight(Class<? extends NetherFortressPieces.NetherBridgePiece> oclass, int i, int j, boolean flag) {
-            this.pieceClass = oclass;
-            this.weight = i;
-            this.maxPlaceCount = j;
-            this.allowInRow = flag;
+        public PieceWeight(Class<? extends NetherFortressPieces.NetherBridgePiece> pieceClass, int weight, int maxPlaceCount, boolean allowInRow) {
+            this.pieceClass = pieceClass;
+            this.weight = weight;
+            this.maxPlaceCount = maxPlaceCount;
+            this.allowInRow = allowInRow;
         }
 
-        public PieceWeight(Class<? extends NetherFortressPieces.NetherBridgePiece> oclass, int i, int j) {
-            this(oclass, i, j, false);
+        public PieceWeight(Class<? extends NetherFortressPieces.NetherBridgePiece> pieceClass, int weight, int maxPlaceCount) {
+            this(pieceClass, weight, maxPlaceCount, false);
         }
 
-        public boolean doPlace(int i) {
+        public boolean doPlace(int genDepth) {
             return this.maxPlaceCount == 0 || this.placeCount < this.maxPlaceCount;
         }
 
@@ -107,58 +104,56 @@
         private static final int HEIGHT = 10;
         private static final int DEPTH = 19;
 
-        public BridgeStraight(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_BRIDGE_STRAIGHT, i, boundingbox);
-            this.setOrientation(direction);
+        public BridgeStraight(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_BRIDGE_STRAIGHT, genDepth, box);
+            this.setOrientation(orientation);
         }
 
-        public BridgeStraight(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_BRIDGE_STRAIGHT, compoundtag);
+        public BridgeStraight(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_BRIDGE_STRAIGHT, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateChildForward((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 3, false);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateChildForward((NetherFortressPieces.StartPiece) piece, pieces, random, 1, 3, false);
         }
 
-        public static NetherFortressPieces.BridgeStraight createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, -3, 0, 5, 10, 19, direction);
+        public static NetherFortressPieces.BridgeStraight createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -3, 0, 5, 10, 19, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.BridgeStraight(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.BridgeStraight(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 0, 4, 4, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 5, 0, 3, 7, 18, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 5, 0, 0, 5, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 5, 0, 4, 5, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 4, 2, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 13, 4, 2, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 4, 1, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 15, 4, 1, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 3, 0, 4, 4, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 5, 0, 3, 7, 18, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 5, 0, 0, 5, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 5, 0, 4, 5, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 4, 2, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 13, 4, 2, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 0, 0, 4, 1, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 0, 15, 4, 1, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
 
             for (int i = 0; i <= 4; ++i) {
                 for (int j = 0; j <= 2; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, boundingbox);
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, 18 - j, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, box);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, 18 - j, box);
                 }
             }
 
-            BlockState blockstate = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
-            BlockState blockstate1 = (BlockState) blockstate.setValue(FenceBlock.EAST, true);
-            BlockState blockstate2 = (BlockState) blockstate.setValue(FenceBlock.WEST, true);
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+            IBlockData iblockdata1 = (IBlockData) iblockdata.setValue(FenceBlock.EAST, true);
+            IBlockData iblockdata2 = (IBlockData) iblockdata.setValue(FenceBlock.WEST, true);
 
-            this.generateBox(worldgenlevel, boundingbox, 0, 1, 1, 0, 4, 1, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 4, 0, 4, 4, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 14, 0, 4, 14, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 1, 17, 0, 4, 17, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 1, 1, 4, 4, 1, blockstate2, blockstate2, false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 3, 4, 4, 4, 4, blockstate2, blockstate2, false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 3, 14, 4, 4, 14, blockstate2, blockstate2, false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 1, 17, 4, 4, 17, blockstate2, blockstate2, false);
+            this.generateBox(level, box, 0, 1, 1, 0, 4, 1, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 0, 3, 4, 0, 4, 4, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 0, 3, 14, 0, 4, 14, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 0, 1, 17, 0, 4, 17, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 4, 1, 1, 4, 4, 1, iblockdata2, iblockdata2, false);
+            this.generateBox(level, box, 4, 3, 4, 4, 4, 4, iblockdata2, iblockdata2, false);
+            this.generateBox(level, box, 4, 3, 14, 4, 4, 14, iblockdata2, iblockdata2, false);
+            this.generateBox(level, box, 4, 1, 17, 4, 4, 17, iblockdata2, iblockdata2, false);
         }
     }
 
@@ -168,77 +163,75 @@
         private static final int HEIGHT = 10;
         private static final int DEPTH = 19;
 
-        public BridgeCrossing(int i, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_BRIDGE_CROSSING, i, boundingbox);
-            this.setOrientation(direction);
+        public BridgeCrossing(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_BRIDGE_CROSSING, genDepth, box);
+            this.setOrientation(orientation);
         }
 
-        protected BridgeCrossing(int i, int j, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_BRIDGE_CROSSING, 0, StructurePiece.makeBoundingBox(i, 64, j, direction, 19, 10, 19));
-            this.setOrientation(direction);
+        protected BridgeCrossing(int x, int z, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_BRIDGE_CROSSING, 0, StructurePiece.makeBoundingBox(x, 64, z, orientation, 19, 10, 19));
+            this.setOrientation(orientation);
         }
 
-        protected BridgeCrossing(StructurePieceType structurepiecetype, CompoundTag compoundtag) {
-            super(structurepiecetype, compoundtag);
+        protected BridgeCrossing(StructurePieceType type, CompoundTag tag) {
+            super(type, tag);
         }
 
-        public BridgeCrossing(CompoundTag compoundtag) {
-            this(StructurePieceType.NETHER_FORTRESS_BRIDGE_CROSSING, compoundtag);
+        public BridgeCrossing(CompoundTag tag) {
+            this(StructurePieceType.NETHER_FORTRESS_BRIDGE_CROSSING, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateChildForward((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 8, 3, false);
-            this.generateChildLeft((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 3, 8, false);
-            this.generateChildRight((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 3, 8, false);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateChildForward((NetherFortressPieces.StartPiece) piece, pieces, random, 8, 3, false);
+            this.generateChildLeft((NetherFortressPieces.StartPiece) piece, pieces, random, 3, 8, false);
+            this.generateChildRight((NetherFortressPieces.StartPiece) piece, pieces, random, 3, 8, false);
         }
 
-        public static NetherFortressPieces.BridgeCrossing createPiece(StructurePieceAccessor structurepieceaccessor, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -8, -3, 0, 19, 10, 19, direction);
+        public static NetherFortressPieces.BridgeCrossing createPiece(StructurePieceAccessor pieces, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -8, -3, 0, 19, 10, 19, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.BridgeCrossing(l, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.BridgeCrossing(genDepth, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 7, 3, 0, 11, 4, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 7, 18, 4, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 8, 5, 0, 10, 7, 18, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 5, 8, 18, 7, 10, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 7, 5, 0, 7, 5, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 7, 5, 11, 7, 5, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 11, 5, 0, 11, 5, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 11, 5, 11, 11, 5, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 5, 7, 7, 5, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 11, 5, 7, 18, 5, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 5, 11, 7, 5, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 11, 5, 11, 18, 5, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 7, 2, 0, 11, 2, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 7, 2, 13, 11, 2, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 7, 0, 0, 11, 1, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 7, 0, 15, 11, 1, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 7, 3, 0, 11, 4, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 3, 7, 18, 4, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 8, 5, 0, 10, 7, 18, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 5, 8, 18, 7, 10, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 7, 5, 0, 7, 5, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 7, 5, 11, 7, 5, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 11, 5, 0, 11, 5, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 11, 5, 11, 11, 5, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 5, 7, 7, 5, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 11, 5, 7, 18, 5, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 5, 11, 7, 5, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 11, 5, 11, 18, 5, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 7, 2, 0, 11, 2, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 7, 2, 13, 11, 2, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 7, 0, 0, 11, 1, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 7, 0, 15, 11, 1, 18, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
 
             int i;
             int j;
 
             for (i = 7; i <= 11; ++i) {
                 for (j = 0; j <= 2; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, boundingbox);
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, 18 - j, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, box);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, 18 - j, box);
                 }
             }
 
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 7, 5, 2, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 13, 2, 7, 18, 2, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 7, 3, 1, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 15, 0, 7, 18, 1, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 7, 5, 2, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 13, 2, 7, 18, 2, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 0, 7, 3, 1, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 15, 0, 7, 18, 1, 11, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
 
             for (i = 0; i <= 2; ++i) {
                 for (j = 7; j <= 11; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, boundingbox);
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), 18 - i, -1, j, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, box);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), 18 - i, -1, j, box);
                 }
             }
 
@@ -251,57 +244,55 @@
         private static final int HEIGHT = 9;
         private static final int DEPTH = 7;
 
-        public RoomCrossing(int i, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_ROOM_CROSSING, i, boundingbox);
-            this.setOrientation(direction);
+        public RoomCrossing(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_ROOM_CROSSING, genDepth, box);
+            this.setOrientation(orientation);
         }
 
-        public RoomCrossing(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_ROOM_CROSSING, compoundtag);
+        public RoomCrossing(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_ROOM_CROSSING, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateChildForward((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 2, 0, false);
-            this.generateChildLeft((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 0, 2, false);
-            this.generateChildRight((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 0, 2, false);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateChildForward((NetherFortressPieces.StartPiece) piece, pieces, random, 2, 0, false);
+            this.generateChildLeft((NetherFortressPieces.StartPiece) piece, pieces, random, 0, 2, false);
+            this.generateChildRight((NetherFortressPieces.StartPiece) piece, pieces, random, 0, 2, false);
         }
 
-        public static NetherFortressPieces.RoomCrossing createPiece(StructurePieceAccessor structurepieceaccessor, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -2, 0, 0, 7, 9, 7, direction);
+        public static NetherFortressPieces.RoomCrossing createPiece(StructurePieceAccessor pieces, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -2, 0, 0, 7, 9, 7, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.RoomCrossing(l, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.RoomCrossing(genDepth, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 6, 1, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 6, 7, 6, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 1, 6, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 6, 1, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 2, 0, 6, 6, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 2, 6, 6, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 0, 6, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 5, 0, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 2, 0, 6, 6, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 2, 5, 6, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            BlockState blockstate = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
-            BlockState blockstate1 = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 6, 1, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 6, 7, 6, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 1, 6, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 6, 1, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 2, 0, 6, 6, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 2, 6, 6, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 0, 6, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 5, 0, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 6, 2, 0, 6, 6, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 6, 2, 5, 6, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
 
-            this.generateBox(worldgenlevel, boundingbox, 2, 6, 0, 4, 6, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 5, 0, 4, 5, 0, blockstate, blockstate, false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 6, 6, 4, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 5, 6, 4, 5, 6, blockstate, blockstate, false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 6, 2, 0, 6, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 5, 2, 0, 5, 4, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 6, 2, 6, 6, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 5, 2, 6, 5, 4, blockstate1, blockstate1, false);
+            this.generateBox(level, box, 2, 6, 0, 4, 6, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 5, 0, 4, 5, 0, iblockdata, iblockdata, false);
+            this.generateBox(level, box, 2, 6, 6, 4, 6, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 5, 6, 4, 5, 6, iblockdata, iblockdata, false);
+            this.generateBox(level, box, 0, 6, 2, 0, 6, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 5, 2, 0, 5, 4, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 6, 6, 2, 6, 6, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 6, 5, 2, 6, 5, 4, iblockdata1, iblockdata1, false);
 
             for (int i = 0; i <= 6; ++i) {
                 for (int j = 0; j <= 6; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, box);
                 }
             }
 
@@ -314,56 +305,54 @@
         private static final int HEIGHT = 11;
         private static final int DEPTH = 7;
 
-        public StairsRoom(int i, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_STAIRS_ROOM, i, boundingbox);
-            this.setOrientation(direction);
+        public StairsRoom(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_STAIRS_ROOM, genDepth, box);
+            this.setOrientation(orientation);
         }
 
-        public StairsRoom(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_STAIRS_ROOM, compoundtag);
+        public StairsRoom(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_STAIRS_ROOM, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateChildRight((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 6, 2, false);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateChildRight((NetherFortressPieces.StartPiece) piece, pieces, random, 6, 2, false);
         }
 
-        public static NetherFortressPieces.StairsRoom createPiece(StructurePieceAccessor structurepieceaccessor, int i, int j, int k, int l, Direction direction) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -2, 0, 0, 7, 11, 7, direction);
+        public static NetherFortressPieces.StairsRoom createPiece(StructurePieceAccessor pieces, int x, int y, int z, int genDepth, Direction orientation) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -2, 0, 0, 7, 11, 7, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.StairsRoom(l, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.StairsRoom(genDepth, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 6, 1, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 6, 10, 6, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 1, 8, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 2, 0, 6, 8, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 1, 0, 8, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 2, 1, 6, 8, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 2, 6, 5, 8, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            BlockState blockstate = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
-            BlockState blockstate1 = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 6, 1, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 6, 10, 6, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 1, 8, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 2, 0, 6, 8, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 1, 0, 8, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 6, 2, 1, 6, 8, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 2, 6, 5, 8, 6, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
 
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 2, 0, 5, 4, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 3, 2, 6, 5, 2, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 3, 4, 6, 5, 4, blockstate1, blockstate1, false);
-            this.placeBlock(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), 5, 2, 5, boundingbox);
-            this.generateBox(worldgenlevel, boundingbox, 4, 2, 5, 4, 3, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 3, 2, 5, 3, 4, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 2, 5, 2, 5, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 2, 5, 1, 6, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 7, 1, 5, 7, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 8, 2, 6, 8, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 6, 0, 4, 8, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 5, 0, 4, 5, 0, blockstate, blockstate, false);
+            this.generateBox(level, box, 0, 3, 2, 0, 5, 4, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 6, 3, 2, 6, 5, 2, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 6, 3, 4, 6, 5, 4, iblockdata1, iblockdata1, false);
+            this.placeBlock(level, Blocks.NETHER_BRICKS.defaultBlockState(), 5, 2, 5, box);
+            this.generateBox(level, box, 4, 2, 5, 4, 3, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 3, 2, 5, 3, 4, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 2, 5, 2, 5, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 2, 5, 1, 6, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 7, 1, 5, 7, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 6, 8, 2, 6, 8, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 6, 0, 4, 8, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 5, 0, 4, 5, 0, iblockdata, iblockdata, false);
 
             for (int i = 0; i <= 6; ++i) {
                 for (int j = 0; j <= 6; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, box);
                 }
             }
 
@@ -377,81 +366,84 @@
         private static final int DEPTH = 9;
         private boolean hasPlacedSpawner;
 
-        public MonsterThrone(int i, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_MONSTER_THRONE, i, boundingbox);
-            this.setOrientation(direction);
+        public MonsterThrone(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_MONSTER_THRONE, genDepth, box);
+            this.setOrientation(orientation);
         }
 
-        public MonsterThrone(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_MONSTER_THRONE, compoundtag);
-            this.hasPlacedSpawner = compoundtag.getBoolean("Mob");
+        public MonsterThrone(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_MONSTER_THRONE, tag);
+            this.hasPlacedSpawner = tag.getBoolean("Mob");
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putBoolean("Mob", this.hasPlacedSpawner);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("Mob", this.hasPlacedSpawner);
         }
 
-        public static NetherFortressPieces.MonsterThrone createPiece(StructurePieceAccessor structurepieceaccessor, int i, int j, int k, int l, Direction direction) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -2, 0, 0, 7, 8, 9, direction);
+        public static NetherFortressPieces.MonsterThrone createPiece(StructurePieceAccessor pieces, int x, int y, int z, int genDepth, Direction orientation) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -2, 0, 0, 7, 8, 9, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.MonsterThrone(l, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.MonsterThrone(genDepth, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 6, 7, 7, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 0, 0, 5, 1, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 2, 1, 5, 2, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 3, 2, 5, 3, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 4, 3, 5, 4, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 2, 0, 1, 4, 2, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 2, 0, 5, 4, 2, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 5, 2, 1, 5, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 5, 2, 5, 5, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 5, 3, 0, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 5, 3, 6, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 5, 8, 5, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            BlockState blockstate = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
-            BlockState blockstate1 = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 2, 0, 6, 7, 7, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 0, 0, 5, 1, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 2, 1, 5, 2, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 3, 2, 5, 3, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 4, 3, 5, 4, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 2, 0, 1, 4, 2, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 2, 0, 5, 4, 2, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 5, 2, 1, 5, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 5, 2, 5, 5, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 5, 3, 0, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 6, 5, 3, 6, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 5, 8, 5, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
 
-            this.placeBlock(worldgenlevel, (BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true), 1, 6, 3, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true), 5, 6, 3, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true)).setValue(FenceBlock.NORTH, true), 0, 6, 3, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.NORTH, true), 6, 6, 3, boundingbox);
-            this.generateBox(worldgenlevel, boundingbox, 0, 6, 4, 0, 6, 7, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 6, 4, 6, 6, 7, blockstate1, blockstate1, false);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true)).setValue(FenceBlock.SOUTH, true), 0, 6, 8, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.SOUTH, true), 6, 6, 8, boundingbox);
-            this.generateBox(worldgenlevel, boundingbox, 1, 6, 8, 5, 6, 8, blockstate, blockstate, false);
-            this.placeBlock(worldgenlevel, (BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true), 1, 7, 8, boundingbox);
-            this.generateBox(worldgenlevel, boundingbox, 2, 7, 8, 4, 7, 8, blockstate, blockstate, false);
-            this.placeBlock(worldgenlevel, (BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true), 5, 7, 8, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true), 2, 8, 8, boundingbox);
-            this.placeBlock(worldgenlevel, blockstate, 3, 8, 8, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true), 4, 8, 8, boundingbox);
+            this.placeBlock(level, (IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true), 1, 6, 3, box);
+            this.placeBlock(level, (IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true), 5, 6, 3, box);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true)).setValue(FenceBlock.NORTH, true), 0, 6, 3, box);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.NORTH, true), 6, 6, 3, box);
+            this.generateBox(level, box, 0, 6, 4, 0, 6, 7, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 6, 6, 4, 6, 6, 7, iblockdata1, iblockdata1, false);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true)).setValue(FenceBlock.SOUTH, true), 0, 6, 8, box);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.SOUTH, true), 6, 6, 8, box);
+            this.generateBox(level, box, 1, 6, 8, 5, 6, 8, iblockdata, iblockdata, false);
+            this.placeBlock(level, (IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true), 1, 7, 8, box);
+            this.generateBox(level, box, 2, 7, 8, 4, 7, 8, iblockdata, iblockdata, false);
+            this.placeBlock(level, (IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true), 5, 7, 8, box);
+            this.placeBlock(level, (IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true), 2, 8, 8, box);
+            this.placeBlock(level, iblockdata, 3, 8, 8, box);
+            this.placeBlock(level, (IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true), 4, 8, 8, box);
             if (!this.hasPlacedSpawner) {
-                BlockPos.MutableBlockPos blockpos_mutableblockpos = this.getWorldPos(3, 5, 5);
+                BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(3, 5, 5);
 
-                if (boundingbox.isInside(blockpos_mutableblockpos)) {
+                if (box.isInside(blockposition_mutableblockposition)) {
                     this.hasPlacedSpawner = true;
-                    worldgenlevel.setBlock(blockpos_mutableblockpos, Blocks.SPAWNER.defaultBlockState(), 2);
-                    BlockEntity blockentity = worldgenlevel.getBlockEntity(blockpos_mutableblockpos);
+                    // CraftBukkit start
+                    /*
+                    generatoraccessseed.setBlock(blockposition_mutableblockposition, Blocks.SPAWNER.defaultBlockState(), 2);
+                    TileEntity tileentity = generatoraccessseed.getBlockEntity(blockposition_mutableblockposition);
 
-                    if (blockentity instanceof SpawnerBlockEntity) {
-                        SpawnerBlockEntity spawnerblockentity = (SpawnerBlockEntity) blockentity;
+                    if (tileentity instanceof TileEntityMobSpawner) {
+                        TileEntityMobSpawner tileentitymobspawner = (TileEntityMobSpawner) tileentity;
 
-                        spawnerblockentity.setEntityId(EntityType.BLAZE, randomsource);
+                        tileentitymobspawner.setEntityId(EntityTypes.BLAZE, randomsource);
                     }
+                    */
+                    placeCraftSpawner(level, blockposition_mutableblockposition, org.bukkit.entity.EntityType.BLAZE, 2);
+                    // CraftBukkit end
                 }
             }
 
             for (int i = 0; i <= 6; ++i) {
                 for (int j = 0; j <= 6; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, box);
                 }
             }
 
@@ -464,105 +456,103 @@
         private static final int HEIGHT = 14;
         private static final int DEPTH = 13;
 
-        public CastleEntrance(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_ENTRANCE, i, boundingbox);
-            this.setOrientation(direction);
+        public CastleEntrance(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_ENTRANCE, genDepth, box);
+            this.setOrientation(orientation);
         }
 
-        public CastleEntrance(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_ENTRANCE, compoundtag);
+        public CastleEntrance(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_ENTRANCE, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateChildForward((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 5, 3, true);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateChildForward((NetherFortressPieces.StartPiece) piece, pieces, random, 5, 3, true);
         }
 
-        public static NetherFortressPieces.CastleEntrance createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -5, -3, 0, 13, 14, 13, direction);
+        public static NetherFortressPieces.CastleEntrance createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -5, -3, 0, 13, 14, 13, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.CastleEntrance(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.CastleEntrance(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 0, 12, 4, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 5, 0, 12, 13, 12, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 5, 0, 1, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 11, 5, 0, 12, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 5, 11, 4, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 8, 5, 11, 10, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 9, 11, 7, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 5, 0, 4, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 8, 5, 0, 10, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 9, 0, 7, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 11, 2, 10, 12, 10, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 8, 0, 7, 8, 0, Blocks.NETHER_BRICK_FENCE.defaultBlockState(), Blocks.NETHER_BRICK_FENCE.defaultBlockState(), false);
-            BlockState blockstate = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
-            BlockState blockstate1 = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 3, 0, 12, 4, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 5, 0, 12, 13, 12, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 5, 0, 1, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 11, 5, 0, 12, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 5, 11, 4, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 8, 5, 11, 10, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 9, 11, 7, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 5, 0, 4, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 8, 5, 0, 10, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 9, 0, 7, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 11, 2, 10, 12, 10, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 8, 0, 7, 8, 0, Blocks.NETHER_BRICK_FENCE.defaultBlockState(), Blocks.NETHER_BRICK_FENCE.defaultBlockState(), false);
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
 
             int i;
 
             for (i = 1; i <= 11; i += 2) {
-                this.generateBox(worldgenlevel, boundingbox, i, 10, 0, i, 11, 0, blockstate, blockstate, false);
-                this.generateBox(worldgenlevel, boundingbox, i, 10, 12, i, 11, 12, blockstate, blockstate, false);
-                this.generateBox(worldgenlevel, boundingbox, 0, 10, i, 0, 11, i, blockstate1, blockstate1, false);
-                this.generateBox(worldgenlevel, boundingbox, 12, 10, i, 12, 11, i, blockstate1, blockstate1, false);
-                this.placeBlock(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, 13, 0, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, 13, 12, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), 0, 13, i, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), 12, 13, i, boundingbox);
+                this.generateBox(level, box, i, 10, 0, i, 11, 0, iblockdata, iblockdata, false);
+                this.generateBox(level, box, i, 10, 12, i, 11, 12, iblockdata, iblockdata, false);
+                this.generateBox(level, box, 0, 10, i, 0, 11, i, iblockdata1, iblockdata1, false);
+                this.generateBox(level, box, 12, 10, i, 12, 11, i, iblockdata1, iblockdata1, false);
+                this.placeBlock(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, 13, 0, box);
+                this.placeBlock(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, 13, 12, box);
+                this.placeBlock(level, Blocks.NETHER_BRICKS.defaultBlockState(), 0, 13, i, box);
+                this.placeBlock(level, Blocks.NETHER_BRICKS.defaultBlockState(), 12, 13, i, box);
                 if (i != 11) {
-                    this.placeBlock(worldgenlevel, blockstate, i + 1, 13, 0, boundingbox);
-                    this.placeBlock(worldgenlevel, blockstate, i + 1, 13, 12, boundingbox);
-                    this.placeBlock(worldgenlevel, blockstate1, 0, 13, i + 1, boundingbox);
-                    this.placeBlock(worldgenlevel, blockstate1, 12, 13, i + 1, boundingbox);
+                    this.placeBlock(level, iblockdata, i + 1, 13, 0, box);
+                    this.placeBlock(level, iblockdata, i + 1, 13, 12, box);
+                    this.placeBlock(level, iblockdata1, 0, 13, i + 1, box);
+                    this.placeBlock(level, iblockdata1, 12, 13, i + 1, box);
                 }
             }
 
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 0, 13, 0, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.EAST, true), 0, 13, 12, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.WEST, true), 12, 13, 12, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.WEST, true), 12, 13, 0, boundingbox);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 0, 13, 0, box);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.EAST, true), 0, 13, 12, box);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.WEST, true), 12, 13, 12, box);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.WEST, true), 12, 13, 0, box);
 
             for (i = 3; i <= 9; i += 2) {
-                this.generateBox(worldgenlevel, boundingbox, 1, 7, i, 1, 8, i, (BlockState) blockstate1.setValue(FenceBlock.WEST, true), (BlockState) blockstate1.setValue(FenceBlock.WEST, true), false);
-                this.generateBox(worldgenlevel, boundingbox, 11, 7, i, 11, 8, i, (BlockState) blockstate1.setValue(FenceBlock.EAST, true), (BlockState) blockstate1.setValue(FenceBlock.EAST, true), false);
+                this.generateBox(level, box, 1, 7, i, 1, 8, i, (IBlockData) iblockdata1.setValue(FenceBlock.WEST, true), (IBlockData) iblockdata1.setValue(FenceBlock.WEST, true), false);
+                this.generateBox(level, box, 11, 7, i, 11, 8, i, (IBlockData) iblockdata1.setValue(FenceBlock.EAST, true), (IBlockData) iblockdata1.setValue(FenceBlock.EAST, true), false);
             }
 
-            this.generateBox(worldgenlevel, boundingbox, 4, 2, 0, 8, 2, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 4, 12, 2, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 0, 0, 8, 1, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 0, 9, 8, 1, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 4, 3, 1, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 9, 0, 4, 12, 1, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 2, 0, 8, 2, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 4, 12, 2, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 0, 0, 8, 1, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 0, 9, 8, 1, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 0, 4, 3, 1, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 9, 0, 4, 12, 1, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
 
             int j;
 
             for (i = 4; i <= 8; ++i) {
                 for (j = 0; j <= 2; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, boundingbox);
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, 12 - j, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, box);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, 12 - j, box);
                 }
             }
 
             for (i = 0; i <= 2; ++i) {
                 for (j = 4; j <= 8; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, boundingbox);
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), 12 - i, -1, j, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, box);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), 12 - i, -1, j, box);
                 }
             }
 
-            this.generateBox(worldgenlevel, boundingbox, 5, 5, 5, 7, 5, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 1, 6, 6, 4, 6, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.placeBlock(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), 6, 0, 6, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.LAVA.defaultBlockState(), 6, 5, 6, boundingbox);
-            BlockPos.MutableBlockPos blockpos_mutableblockpos = this.getWorldPos(6, 5, 6);
+            this.generateBox(level, box, 5, 5, 5, 7, 5, 7, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 6, 1, 6, 6, 4, 6, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.placeBlock(level, Blocks.NETHER_BRICKS.defaultBlockState(), 6, 0, 6, box);
+            this.placeBlock(level, Blocks.LAVA.defaultBlockState(), 6, 5, 6, box);
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(6, 5, 6);
 
-            if (boundingbox.isInside(blockpos_mutableblockpos)) {
-                worldgenlevel.scheduleTick(blockpos_mutableblockpos, (Fluid) Fluids.LAVA, 0);
+            if (box.isInside(blockposition_mutableblockposition)) {
+                level.scheduleTick(blockposition_mutableblockposition, (Fluid) Fluids.LAVA, 0);
             }
 
         }
@@ -574,45 +564,43 @@
         private static final int HEIGHT = 7;
         private static final int DEPTH = 5;
 
-        public CastleSmallCorridorPiece(int i, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR, i, boundingbox);
-            this.setOrientation(direction);
+        public CastleSmallCorridorPiece(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR, genDepth, box);
+            this.setOrientation(orientation);
         }
 
-        public CastleSmallCorridorPiece(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR, compoundtag);
+        public CastleSmallCorridorPiece(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateChildForward((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 0, true);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateChildForward((NetherFortressPieces.StartPiece) piece, pieces, random, 1, 0, true);
         }
 
-        public static NetherFortressPieces.CastleSmallCorridorPiece createPiece(StructurePieceAccessor structurepieceaccessor, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, 0, 0, 5, 7, 5, direction);
+        public static NetherFortressPieces.CastleSmallCorridorPiece createPiece(StructurePieceAccessor pieces, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, 0, 0, 5, 7, 5, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.CastleSmallCorridorPiece(l, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.CastleSmallCorridorPiece(genDepth, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 4, 1, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 4, 5, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            BlockState blockstate = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 1, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 4, 5, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
 
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 0, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 2, 0, 4, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 1, 0, 4, 1, blockstate, blockstate, false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 3, 0, 4, 3, blockstate, blockstate, false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 3, 1, 4, 4, 1, blockstate, blockstate, false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 3, 3, 4, 4, 3, blockstate, blockstate, false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 6, 0, 4, 6, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 0, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 2, 0, 4, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 3, 1, 0, 4, 1, iblockdata, iblockdata, false);
+            this.generateBox(level, box, 0, 3, 3, 0, 4, 3, iblockdata, iblockdata, false);
+            this.generateBox(level, box, 4, 3, 1, 4, 4, 1, iblockdata, iblockdata, false);
+            this.generateBox(level, box, 4, 3, 3, 4, 4, 3, iblockdata, iblockdata, false);
+            this.generateBox(level, box, 0, 6, 0, 4, 6, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
 
             for (int i = 0; i <= 4; ++i) {
                 for (int j = 0; j <= 4; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, box);
                 }
             }
 
@@ -626,61 +614,58 @@
         private static final int DEPTH = 5;
         private boolean isNeedingChest;
 
-        public CastleSmallCorridorRightTurnPiece(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_RIGHT_TURN, i, boundingbox);
-            this.setOrientation(direction);
-            this.isNeedingChest = randomsource.nextInt(3) == 0;
+        public CastleSmallCorridorRightTurnPiece(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_RIGHT_TURN, genDepth, box);
+            this.setOrientation(orientation);
+            this.isNeedingChest = random.nextInt(3) == 0;
         }
 
-        public CastleSmallCorridorRightTurnPiece(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_RIGHT_TURN, compoundtag);
-            this.isNeedingChest = compoundtag.getBoolean("Chest");
+        public CastleSmallCorridorRightTurnPiece(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_RIGHT_TURN, tag);
+            this.isNeedingChest = tag.getBoolean("Chest");
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putBoolean("Chest", this.isNeedingChest);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("Chest", this.isNeedingChest);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateChildRight((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 0, 1, true);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateChildRight((NetherFortressPieces.StartPiece) piece, pieces, random, 0, 1, true);
         }
 
-        public static NetherFortressPieces.CastleSmallCorridorRightTurnPiece createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, 0, 0, 5, 7, 5, direction);
+        public static NetherFortressPieces.CastleSmallCorridorRightTurnPiece createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, 0, 0, 5, 7, 5, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.CastleSmallCorridorRightTurnPiece(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.CastleSmallCorridorRightTurnPiece(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 4, 1, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 4, 5, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            BlockState blockstate = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
-            BlockState blockstate1 = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 1, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 4, 5, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
 
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 0, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 1, 0, 4, 1, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 3, 0, 4, 3, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 2, 0, 4, 5, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 2, 4, 4, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 3, 4, 1, 4, 4, blockstate, blockstate, false);
-            this.generateBox(worldgenlevel, boundingbox, 3, 3, 4, 3, 4, 4, blockstate, blockstate, false);
-            if (this.isNeedingChest && boundingbox.isInside(this.getWorldPos(1, 2, 3))) {
+            this.generateBox(level, box, 0, 2, 0, 0, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 3, 1, 0, 4, 1, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 0, 3, 3, 0, 4, 3, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 4, 2, 0, 4, 5, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 2, 4, 4, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 3, 4, 1, 4, 4, iblockdata, iblockdata, false);
+            this.generateBox(level, box, 3, 3, 4, 3, 4, 4, iblockdata, iblockdata, false);
+            if (this.isNeedingChest && box.isInside(this.getWorldPos(1, 2, 3))) {
                 this.isNeedingChest = false;
-                this.createChest(worldgenlevel, boundingbox, randomsource, 1, 2, 3, BuiltInLootTables.NETHER_BRIDGE);
+                this.createChest(level, box, random, 1, 2, 3, BuiltInLootTables.NETHER_BRIDGE);
             }
 
-            this.generateBox(worldgenlevel, boundingbox, 0, 6, 0, 4, 6, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 6, 0, 4, 6, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
 
             for (int i = 0; i <= 4; ++i) {
                 for (int j = 0; j <= 4; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, box);
                 }
             }
 
@@ -694,61 +679,58 @@
         private static final int DEPTH = 5;
         private boolean isNeedingChest;
 
-        public CastleSmallCorridorLeftTurnPiece(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_LEFT_TURN, i, boundingbox);
-            this.setOrientation(direction);
-            this.isNeedingChest = randomsource.nextInt(3) == 0;
+        public CastleSmallCorridorLeftTurnPiece(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_LEFT_TURN, genDepth, box);
+            this.setOrientation(orientation);
+            this.isNeedingChest = random.nextInt(3) == 0;
         }
 
-        public CastleSmallCorridorLeftTurnPiece(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_LEFT_TURN, compoundtag);
-            this.isNeedingChest = compoundtag.getBoolean("Chest");
+        public CastleSmallCorridorLeftTurnPiece(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_LEFT_TURN, tag);
+            this.isNeedingChest = tag.getBoolean("Chest");
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putBoolean("Chest", this.isNeedingChest);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("Chest", this.isNeedingChest);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateChildLeft((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 0, 1, true);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateChildLeft((NetherFortressPieces.StartPiece) piece, pieces, random, 0, 1, true);
         }
 
-        public static NetherFortressPieces.CastleSmallCorridorLeftTurnPiece createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, 0, 0, 5, 7, 5, direction);
+        public static NetherFortressPieces.CastleSmallCorridorLeftTurnPiece createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, 0, 0, 5, 7, 5, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.CastleSmallCorridorLeftTurnPiece(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.CastleSmallCorridorLeftTurnPiece(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 4, 1, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 4, 5, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            BlockState blockstate = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
-            BlockState blockstate1 = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 1, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 4, 5, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
 
-            this.generateBox(worldgenlevel, boundingbox, 4, 2, 0, 4, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 3, 1, 4, 4, 1, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 3, 3, 4, 4, 3, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 0, 5, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 4, 3, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 3, 4, 1, 4, 4, blockstate, blockstate, false);
-            this.generateBox(worldgenlevel, boundingbox, 3, 3, 4, 3, 4, 4, blockstate, blockstate, false);
-            if (this.isNeedingChest && boundingbox.isInside(this.getWorldPos(3, 2, 3))) {
+            this.generateBox(level, box, 4, 2, 0, 4, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 3, 1, 4, 4, 1, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 4, 3, 3, 4, 4, 3, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 0, 2, 0, 0, 5, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 4, 3, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 3, 4, 1, 4, 4, iblockdata, iblockdata, false);
+            this.generateBox(level, box, 3, 3, 4, 3, 4, 4, iblockdata, iblockdata, false);
+            if (this.isNeedingChest && box.isInside(this.getWorldPos(3, 2, 3))) {
                 this.isNeedingChest = false;
-                this.createChest(worldgenlevel, boundingbox, randomsource, 3, 2, 3, BuiltInLootTables.NETHER_BRIDGE);
+                this.createChest(level, box, random, 3, 2, 3, BuiltInLootTables.NETHER_BRIDGE);
             }
 
-            this.generateBox(worldgenlevel, boundingbox, 0, 6, 0, 4, 6, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 6, 0, 4, 6, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
 
             for (int i = 0; i <= 4; ++i) {
                 for (int j = 0; j <= 4; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, box);
                 }
             }
 
@@ -761,56 +743,54 @@
         private static final int HEIGHT = 14;
         private static final int DEPTH = 10;
 
-        public CastleCorridorStairsPiece(int i, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_CORRIDOR_STAIRS, i, boundingbox);
-            this.setOrientation(direction);
+        public CastleCorridorStairsPiece(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_CORRIDOR_STAIRS, genDepth, box);
+            this.setOrientation(orientation);
         }
 
-        public CastleCorridorStairsPiece(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_CORRIDOR_STAIRS, compoundtag);
+        public CastleCorridorStairsPiece(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_CORRIDOR_STAIRS, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateChildForward((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 0, true);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateChildForward((NetherFortressPieces.StartPiece) piece, pieces, random, 1, 0, true);
         }
 
-        public static NetherFortressPieces.CastleCorridorStairsPiece createPiece(StructurePieceAccessor structurepieceaccessor, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, -7, 0, 5, 14, 10, direction);
+        public static NetherFortressPieces.CastleCorridorStairsPiece createPiece(StructurePieceAccessor pieces, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -7, 0, 5, 14, 10, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.CastleCorridorStairsPiece(l, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.CastleCorridorStairsPiece(genDepth, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            BlockState blockstate = (BlockState) Blocks.NETHER_BRICK_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.SOUTH);
-            BlockState blockstate1 = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            IBlockData iblockdata = (IBlockData) Blocks.NETHER_BRICK_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.SOUTH);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
 
             for (int i = 0; i <= 9; ++i) {
                 int j = Math.max(1, 7 - i);
                 int k = Math.min(Math.max(j + 5, 14 - i), 13);
                 int l = i;
 
-                this.generateBox(worldgenlevel, boundingbox, 0, 0, i, 4, j, i, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-                this.generateBox(worldgenlevel, boundingbox, 1, j + 1, i, 3, k - 1, i, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+                this.generateBox(level, box, 0, 0, i, 4, j, i, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+                this.generateBox(level, box, 1, j + 1, i, 3, k - 1, i, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
                 if (i <= 6) {
-                    this.placeBlock(worldgenlevel, blockstate, 1, j + 1, i, boundingbox);
-                    this.placeBlock(worldgenlevel, blockstate, 2, j + 1, i, boundingbox);
-                    this.placeBlock(worldgenlevel, blockstate, 3, j + 1, i, boundingbox);
+                    this.placeBlock(level, iblockdata, 1, j + 1, i, box);
+                    this.placeBlock(level, iblockdata, 2, j + 1, i, box);
+                    this.placeBlock(level, iblockdata, 3, j + 1, i, box);
                 }
 
-                this.generateBox(worldgenlevel, boundingbox, 0, k, i, 4, k, i, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-                this.generateBox(worldgenlevel, boundingbox, 0, j + 1, i, 0, k - 1, i, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-                this.generateBox(worldgenlevel, boundingbox, 4, j + 1, i, 4, k - 1, i, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+                this.generateBox(level, box, 0, k, i, 4, k, i, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+                this.generateBox(level, box, 0, j + 1, i, 0, k - 1, i, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+                this.generateBox(level, box, 4, j + 1, i, 4, k - 1, i, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
                 if ((i & 1) == 0) {
-                    this.generateBox(worldgenlevel, boundingbox, 0, j + 2, i, 0, j + 3, i, blockstate1, blockstate1, false);
-                    this.generateBox(worldgenlevel, boundingbox, 4, j + 2, i, 4, j + 3, i, blockstate1, blockstate1, false);
+                    this.generateBox(level, box, 0, j + 2, i, 0, j + 3, i, iblockdata1, iblockdata1, false);
+                    this.generateBox(level, box, 4, j + 2, i, 4, j + 3, i, iblockdata1, iblockdata1, false);
                 }
 
                 for (int i1 = 0; i1 <= 4; ++i1) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i1, -1, l, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i1, -1, l, box);
                 }
             }
 
@@ -823,66 +803,64 @@
         private static final int HEIGHT = 7;
         private static final int DEPTH = 9;
 
-        public CastleCorridorTBalconyPiece(int i, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_CORRIDOR_T_BALCONY, i, boundingbox);
-            this.setOrientation(direction);
+        public CastleCorridorTBalconyPiece(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_CORRIDOR_T_BALCONY, genDepth, box);
+            this.setOrientation(orientation);
         }
 
-        public CastleCorridorTBalconyPiece(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_CORRIDOR_T_BALCONY, compoundtag);
+        public CastleCorridorTBalconyPiece(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_CORRIDOR_T_BALCONY, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
             byte b0 = 1;
-            Direction direction = this.getOrientation();
+            Direction enumdirection = this.getOrientation();
 
-            if (direction == Direction.WEST || direction == Direction.NORTH) {
+            if (enumdirection == Direction.WEST || enumdirection == Direction.NORTH) {
                 b0 = 5;
             }
 
-            this.generateChildLeft((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 0, b0, randomsource.nextInt(8) > 0);
-            this.generateChildRight((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 0, b0, randomsource.nextInt(8) > 0);
+            this.generateChildLeft((NetherFortressPieces.StartPiece) piece, pieces, random, 0, b0, random.nextInt(8) > 0);
+            this.generateChildRight((NetherFortressPieces.StartPiece) piece, pieces, random, 0, b0, random.nextInt(8) > 0);
         }
 
-        public static NetherFortressPieces.CastleCorridorTBalconyPiece createPiece(StructurePieceAccessor structurepieceaccessor, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -3, 0, 0, 9, 7, 9, direction);
+        public static NetherFortressPieces.CastleCorridorTBalconyPiece createPiece(StructurePieceAccessor pieces, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -3, 0, 0, 9, 7, 9, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.CastleCorridorTBalconyPiece(l, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.CastleCorridorTBalconyPiece(genDepth, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            BlockState blockstate = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
-            BlockState blockstate1 = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
 
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 8, 1, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 8, 5, 8, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 6, 0, 8, 6, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 2, 5, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 2, 0, 8, 5, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 3, 0, 1, 4, 0, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 7, 3, 0, 7, 4, 0, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 4, 8, 2, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 1, 4, 2, 2, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 1, 4, 7, 2, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 3, 8, 7, 3, 8, blockstate1, blockstate1, false);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true)).setValue(FenceBlock.SOUTH, true), 0, 3, 8, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.SOUTH, true), 8, 3, 8, boundingbox);
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 6, 0, 3, 7, blockstate, blockstate, false);
-            this.generateBox(worldgenlevel, boundingbox, 8, 3, 6, 8, 3, 7, blockstate, blockstate, false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 4, 0, 5, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 8, 3, 4, 8, 5, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 3, 5, 2, 5, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 6, 3, 5, 7, 5, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 4, 5, 1, 5, 5, blockstate1, blockstate1, false);
-            this.generateBox(worldgenlevel, boundingbox, 7, 4, 5, 7, 5, 5, blockstate1, blockstate1, false);
+            this.generateBox(level, box, 0, 0, 0, 8, 1, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 8, 5, 8, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 6, 0, 8, 6, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 2, 5, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 6, 2, 0, 8, 5, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 3, 0, 1, 4, 0, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 7, 3, 0, 7, 4, 0, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 0, 2, 4, 8, 2, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 1, 4, 2, 2, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 6, 1, 4, 7, 2, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 3, 8, 7, 3, 8, iblockdata1, iblockdata1, false);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true)).setValue(FenceBlock.SOUTH, true), 0, 3, 8, box);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.SOUTH, true), 8, 3, 8, box);
+            this.generateBox(level, box, 0, 3, 6, 0, 3, 7, iblockdata, iblockdata, false);
+            this.generateBox(level, box, 8, 3, 6, 8, 3, 7, iblockdata, iblockdata, false);
+            this.generateBox(level, box, 0, 3, 4, 0, 5, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 8, 3, 4, 8, 5, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 3, 5, 2, 5, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 6, 3, 5, 7, 5, 5, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 4, 5, 1, 5, 5, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 7, 4, 5, 7, 5, 5, iblockdata1, iblockdata1, false);
 
             for (int i = 0; i <= 5; ++i) {
                 for (int j = 0; j <= 8; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), j, -1, i, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), j, -1, i, box);
                 }
             }
 
@@ -895,43 +873,41 @@
         private static final int HEIGHT = 7;
         private static final int DEPTH = 5;
 
-        public CastleSmallCorridorCrossingPiece(int i, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_CROSSING, i, boundingbox);
-            this.setOrientation(direction);
+        public CastleSmallCorridorCrossingPiece(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_CROSSING, genDepth, box);
+            this.setOrientation(orientation);
         }
 
-        public CastleSmallCorridorCrossingPiece(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_CROSSING, compoundtag);
+        public CastleSmallCorridorCrossingPiece(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_CROSSING, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateChildForward((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 0, true);
-            this.generateChildLeft((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 0, 1, true);
-            this.generateChildRight((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 0, 1, true);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateChildForward((NetherFortressPieces.StartPiece) piece, pieces, random, 1, 0, true);
+            this.generateChildLeft((NetherFortressPieces.StartPiece) piece, pieces, random, 0, 1, true);
+            this.generateChildRight((NetherFortressPieces.StartPiece) piece, pieces, random, 0, 1, true);
         }
 
-        public static NetherFortressPieces.CastleSmallCorridorCrossingPiece createPiece(StructurePieceAccessor structurepieceaccessor, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, 0, 0, 5, 7, 5, direction);
+        public static NetherFortressPieces.CastleSmallCorridorCrossingPiece createPiece(StructurePieceAccessor pieces, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, 0, 0, 5, 7, 5, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.CastleSmallCorridorCrossingPiece(l, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.CastleSmallCorridorCrossingPiece(genDepth, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 4, 1, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 4, 5, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 0, 0, 5, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 2, 0, 4, 5, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 4, 0, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 2, 4, 4, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 6, 0, 4, 6, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 1, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 4, 5, 4, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 0, 0, 5, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 2, 0, 4, 5, 0, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 4, 0, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 2, 4, 4, 5, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 6, 0, 4, 6, 4, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
 
             for (int i = 0; i <= 4; ++i) {
                 for (int j = 0; j <= 4; ++j) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, -1, j, box);
                 }
             }
 
@@ -944,77 +920,75 @@
         private static final int HEIGHT = 14;
         private static final int DEPTH = 13;
 
-        public CastleStalkRoom(int i, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_STALK_ROOM, i, boundingbox);
-            this.setOrientation(direction);
+        public CastleStalkRoom(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_STALK_ROOM, genDepth, box);
+            this.setOrientation(orientation);
         }
 
-        public CastleStalkRoom(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_CASTLE_STALK_ROOM, compoundtag);
+        public CastleStalkRoom(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_CASTLE_STALK_ROOM, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateChildForward((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 5, 3, true);
-            this.generateChildForward((NetherFortressPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 5, 11, true);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateChildForward((NetherFortressPieces.StartPiece) piece, pieces, random, 5, 3, true);
+            this.generateChildForward((NetherFortressPieces.StartPiece) piece, pieces, random, 5, 11, true);
         }
 
-        public static NetherFortressPieces.CastleStalkRoom createPiece(StructurePieceAccessor structurepieceaccessor, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -5, -3, 0, 13, 14, 13, direction);
+        public static NetherFortressPieces.CastleStalkRoom createPiece(StructurePieceAccessor pieces, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -5, -3, 0, 13, 14, 13, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.CastleStalkRoom(l, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.CastleStalkRoom(genDepth, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 3, 0, 12, 4, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 5, 0, 12, 13, 12, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 5, 0, 1, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 11, 5, 0, 12, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 5, 11, 4, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 8, 5, 11, 10, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 9, 11, 7, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 5, 0, 4, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 8, 5, 0, 10, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 9, 0, 7, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 11, 2, 10, 12, 10, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            BlockState blockstate = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
-            BlockState blockstate1 = (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
-            BlockState blockstate2 = (BlockState) blockstate1.setValue(FenceBlock.WEST, true);
-            BlockState blockstate3 = (BlockState) blockstate1.setValue(FenceBlock.EAST, true);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 3, 0, 12, 4, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 5, 0, 12, 13, 12, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 5, 0, 1, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 11, 5, 0, 12, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 5, 11, 4, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 8, 5, 11, 10, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 9, 11, 7, 12, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 5, 0, 4, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 8, 5, 0, 10, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 9, 0, 7, 12, 1, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 11, 2, 10, 12, 10, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+            IBlockData iblockdata2 = (IBlockData) iblockdata1.setValue(FenceBlock.WEST, true);
+            IBlockData iblockdata3 = (IBlockData) iblockdata1.setValue(FenceBlock.EAST, true);
 
             int i;
 
             for (i = 1; i <= 11; i += 2) {
-                this.generateBox(worldgenlevel, boundingbox, i, 10, 0, i, 11, 0, blockstate, blockstate, false);
-                this.generateBox(worldgenlevel, boundingbox, i, 10, 12, i, 11, 12, blockstate, blockstate, false);
-                this.generateBox(worldgenlevel, boundingbox, 0, 10, i, 0, 11, i, blockstate1, blockstate1, false);
-                this.generateBox(worldgenlevel, boundingbox, 12, 10, i, 12, 11, i, blockstate1, blockstate1, false);
-                this.placeBlock(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, 13, 0, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), i, 13, 12, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), 0, 13, i, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), 12, 13, i, boundingbox);
+                this.generateBox(level, box, i, 10, 0, i, 11, 0, iblockdata, iblockdata, false);
+                this.generateBox(level, box, i, 10, 12, i, 11, 12, iblockdata, iblockdata, false);
+                this.generateBox(level, box, 0, 10, i, 0, 11, i, iblockdata1, iblockdata1, false);
+                this.generateBox(level, box, 12, 10, i, 12, 11, i, iblockdata1, iblockdata1, false);
+                this.placeBlock(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, 13, 0, box);
+                this.placeBlock(level, Blocks.NETHER_BRICKS.defaultBlockState(), i, 13, 12, box);
+                this.placeBlock(level, Blocks.NETHER_BRICKS.defaultBlockState(), 0, 13, i, box);
+                this.placeBlock(level, Blocks.NETHER_BRICKS.defaultBlockState(), 12, 13, i, box);
                 if (i != 11) {
-                    this.placeBlock(worldgenlevel, blockstate, i + 1, 13, 0, boundingbox);
-                    this.placeBlock(worldgenlevel, blockstate, i + 1, 13, 12, boundingbox);
-                    this.placeBlock(worldgenlevel, blockstate1, 0, 13, i + 1, boundingbox);
-                    this.placeBlock(worldgenlevel, blockstate1, 12, 13, i + 1, boundingbox);
+                    this.placeBlock(level, iblockdata, i + 1, 13, 0, box);
+                    this.placeBlock(level, iblockdata, i + 1, 13, 12, box);
+                    this.placeBlock(level, iblockdata1, 0, 13, i + 1, box);
+                    this.placeBlock(level, iblockdata1, 12, 13, i + 1, box);
                 }
             }
 
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 0, 13, 0, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.EAST, true), 0, 13, 12, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.WEST, true), 12, 13, 12, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.WEST, true), 12, 13, 0, boundingbox);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 0, 13, 0, box);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.EAST, true), 0, 13, 12, box);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.WEST, true), 12, 13, 12, box);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.NETHER_BRICK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.WEST, true), 12, 13, 0, box);
 
             for (i = 3; i <= 9; i += 2) {
-                this.generateBox(worldgenlevel, boundingbox, 1, 7, i, 1, 8, i, blockstate2, blockstate2, false);
-                this.generateBox(worldgenlevel, boundingbox, 11, 7, i, 11, 8, i, blockstate3, blockstate3, false);
+                this.generateBox(level, box, 1, 7, i, 1, 8, i, iblockdata2, iblockdata2, false);
+                this.generateBox(level, box, 11, 7, i, 11, 8, i, iblockdata3, iblockdata3, false);
             }
 
-            BlockState blockstate4 = (BlockState) Blocks.NETHER_BRICK_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.NORTH);
+            IBlockData iblockdata4 = (IBlockData) Blocks.NETHER_BRICK_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.NORTH);
 
             int j;
             int k;
@@ -1023,68 +997,68 @@
                 int l = j + 4;
 
                 for (k = 5; k <= 7; ++k) {
-                    this.placeBlock(worldgenlevel, blockstate4, k, 5 + j, l, boundingbox);
+                    this.placeBlock(level, iblockdata4, k, 5 + j, l, box);
                 }
 
                 if (l >= 5 && l <= 8) {
-                    this.generateBox(worldgenlevel, boundingbox, 5, 5, l, 7, j + 4, l, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+                    this.generateBox(level, box, 5, 5, l, 7, j + 4, l, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
                 } else if (l >= 9 && l <= 10) {
-                    this.generateBox(worldgenlevel, boundingbox, 5, 8, l, 7, j + 4, l, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+                    this.generateBox(level, box, 5, 8, l, 7, j + 4, l, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
                 }
 
                 if (j >= 1) {
-                    this.generateBox(worldgenlevel, boundingbox, 5, 6 + j, l, 7, 9 + j, l, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+                    this.generateBox(level, box, 5, 6 + j, l, 7, 9 + j, l, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
                 }
             }
 
             for (j = 5; j <= 7; ++j) {
-                this.placeBlock(worldgenlevel, blockstate4, j, 12, 11, boundingbox);
+                this.placeBlock(level, iblockdata4, j, 12, 11, box);
             }
 
-            this.generateBox(worldgenlevel, boundingbox, 5, 6, 7, 5, 7, 7, blockstate3, blockstate3, false);
-            this.generateBox(worldgenlevel, boundingbox, 7, 6, 7, 7, 7, 7, blockstate2, blockstate2, false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 13, 12, 7, 13, 12, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 5, 2, 3, 5, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 5, 9, 3, 5, 10, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 2, 5, 4, 2, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 9, 5, 2, 10, 5, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 9, 5, 9, 10, 5, 10, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 10, 5, 4, 10, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            BlockState blockstate5 = (BlockState) blockstate4.setValue(StairBlock.FACING, Direction.EAST);
-            BlockState blockstate6 = (BlockState) blockstate4.setValue(StairBlock.FACING, Direction.WEST);
+            this.generateBox(level, box, 5, 6, 7, 5, 7, 7, iblockdata3, iblockdata3, false);
+            this.generateBox(level, box, 7, 6, 7, 7, 7, 7, iblockdata2, iblockdata2, false);
+            this.generateBox(level, box, 5, 13, 12, 7, 13, 12, Blocks.AIR.defaultBlockState(), Blocks.AIR.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 5, 2, 3, 5, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 5, 9, 3, 5, 10, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 2, 5, 4, 2, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 9, 5, 2, 10, 5, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 9, 5, 9, 10, 5, 10, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 10, 5, 4, 10, 5, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            IBlockData iblockdata5 = (IBlockData) iblockdata4.setValue(StairBlock.FACING, Direction.EAST);
+            IBlockData iblockdata6 = (IBlockData) iblockdata4.setValue(StairBlock.FACING, Direction.WEST);
 
-            this.placeBlock(worldgenlevel, blockstate6, 4, 5, 2, boundingbox);
-            this.placeBlock(worldgenlevel, blockstate6, 4, 5, 3, boundingbox);
-            this.placeBlock(worldgenlevel, blockstate6, 4, 5, 9, boundingbox);
-            this.placeBlock(worldgenlevel, blockstate6, 4, 5, 10, boundingbox);
-            this.placeBlock(worldgenlevel, blockstate5, 8, 5, 2, boundingbox);
-            this.placeBlock(worldgenlevel, blockstate5, 8, 5, 3, boundingbox);
-            this.placeBlock(worldgenlevel, blockstate5, 8, 5, 9, boundingbox);
-            this.placeBlock(worldgenlevel, blockstate5, 8, 5, 10, boundingbox);
-            this.generateBox(worldgenlevel, boundingbox, 3, 4, 4, 4, 4, 8, Blocks.SOUL_SAND.defaultBlockState(), Blocks.SOUL_SAND.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 8, 4, 4, 9, 4, 8, Blocks.SOUL_SAND.defaultBlockState(), Blocks.SOUL_SAND.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 3, 5, 4, 4, 5, 8, Blocks.NETHER_WART.defaultBlockState(), Blocks.NETHER_WART.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 8, 5, 4, 9, 5, 8, Blocks.NETHER_WART.defaultBlockState(), Blocks.NETHER_WART.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 2, 0, 8, 2, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 2, 4, 12, 2, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 0, 0, 8, 1, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 0, 9, 8, 1, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 4, 3, 1, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 9, 0, 4, 12, 1, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.placeBlock(level, iblockdata6, 4, 5, 2, box);
+            this.placeBlock(level, iblockdata6, 4, 5, 3, box);
+            this.placeBlock(level, iblockdata6, 4, 5, 9, box);
+            this.placeBlock(level, iblockdata6, 4, 5, 10, box);
+            this.placeBlock(level, iblockdata5, 8, 5, 2, box);
+            this.placeBlock(level, iblockdata5, 8, 5, 3, box);
+            this.placeBlock(level, iblockdata5, 8, 5, 9, box);
+            this.placeBlock(level, iblockdata5, 8, 5, 10, box);
+            this.generateBox(level, box, 3, 4, 4, 4, 4, 8, Blocks.SOUL_SAND.defaultBlockState(), Blocks.SOUL_SAND.defaultBlockState(), false);
+            this.generateBox(level, box, 8, 4, 4, 9, 4, 8, Blocks.SOUL_SAND.defaultBlockState(), Blocks.SOUL_SAND.defaultBlockState(), false);
+            this.generateBox(level, box, 3, 5, 4, 4, 5, 8, Blocks.NETHER_WART.defaultBlockState(), Blocks.NETHER_WART.defaultBlockState(), false);
+            this.generateBox(level, box, 8, 5, 4, 9, 5, 8, Blocks.NETHER_WART.defaultBlockState(), Blocks.NETHER_WART.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 2, 0, 8, 2, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 2, 4, 12, 2, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 0, 0, 8, 1, 3, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 0, 9, 8, 1, 12, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 0, 4, 3, 1, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 9, 0, 4, 12, 1, 8, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
 
             int i1;
 
             for (k = 4; k <= 8; ++k) {
                 for (i1 = 0; i1 <= 2; ++i1) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), k, -1, i1, boundingbox);
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), k, -1, 12 - i1, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), k, -1, i1, box);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), k, -1, 12 - i1, box);
                 }
             }
 
             for (k = 0; k <= 2; ++k) {
                 for (i1 = 4; i1 <= 8; ++i1) {
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), k, -1, i1, boundingbox);
-                    this.fillColumnDown(worldgenlevel, Blocks.NETHER_BRICKS.defaultBlockState(), 12 - k, -1, i1, boundingbox);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), k, -1, i1, box);
+                    this.fillColumnDown(level, Blocks.NETHER_BRICKS.defaultBlockState(), 12 - k, -1, i1, box);
                 }
             }
 
@@ -1098,33 +1072,31 @@
         private static final int DEPTH = 8;
         private final int selfSeed;
 
-        public BridgeEndFiller(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.NETHER_FORTRESS_BRIDGE_END_FILLER, i, boundingbox);
-            this.setOrientation(direction);
-            this.selfSeed = randomsource.nextInt();
+        public BridgeEndFiller(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.NETHER_FORTRESS_BRIDGE_END_FILLER, genDepth, box);
+            this.setOrientation(orientation);
+            this.selfSeed = random.nextInt();
         }
 
-        public BridgeEndFiller(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_BRIDGE_END_FILLER, compoundtag);
-            this.selfSeed = compoundtag.getInt("Seed");
+        public BridgeEndFiller(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_BRIDGE_END_FILLER, tag);
+            this.selfSeed = tag.getInt("Seed");
         }
 
-        public static NetherFortressPieces.BridgeEndFiller createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, -3, 0, 5, 10, 8, direction);
+        public static NetherFortressPieces.BridgeEndFiller createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -3, 0, 5, 10, 8, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new NetherFortressPieces.BridgeEndFiller(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new NetherFortressPieces.BridgeEndFiller(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putInt("Seed", this.selfSeed);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putInt("Seed", this.selfSeed);
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
             RandomSource randomsource1 = RandomSource.create((long) this.selfSeed);
 
             int i;
@@ -1134,24 +1106,24 @@
             for (j = 0; j <= 4; ++j) {
                 for (k = 3; k <= 4; ++k) {
                     i = randomsource1.nextInt(8);
-                    this.generateBox(worldgenlevel, boundingbox, j, k, 0, j, k, i, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+                    this.generateBox(level, box, j, k, 0, j, k, i, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
                 }
             }
 
             j = randomsource1.nextInt(8);
-            this.generateBox(worldgenlevel, boundingbox, 0, 5, 0, 0, 5, j, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 0, 5, 0, 0, 5, j, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             j = randomsource1.nextInt(8);
-            this.generateBox(worldgenlevel, boundingbox, 4, 5, 0, 4, 5, j, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 5, 0, 4, 5, j, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
 
             for (j = 0; j <= 4; ++j) {
                 k = randomsource1.nextInt(5);
-                this.generateBox(worldgenlevel, boundingbox, j, 2, 0, j, 2, k, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+                this.generateBox(level, box, j, 2, 0, j, 2, k, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
             }
 
             for (j = 0; j <= 4; ++j) {
                 for (k = 0; k <= 1; ++k) {
                     i = randomsource1.nextInt(3);
-                    this.generateBox(worldgenlevel, boundingbox, j, k, 0, j, k, i, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
+                    this.generateBox(level, box, j, k, 0, j, k, i, Blocks.NETHER_BRICKS.defaultBlockState(), Blocks.NETHER_BRICKS.defaultBlockState(), false);
                 }
             }
 
@@ -1165,61 +1137,60 @@
         public List<NetherFortressPieces.PieceWeight> availableCastlePieces;
         public final List<StructurePiece> pendingChildren = Lists.newArrayList();
 
-        public StartPiece(RandomSource randomsource, int i, int j) {
-            super(i, j, getRandomHorizontalDirection(randomsource));
+        public StartPiece(RandomSource random, int x, int z) {
+            super(x, z, getRandomHorizontalDirection(random));
             this.availableBridgePieces = Lists.newArrayList();
-            NetherFortressPieces.PieceWeight[] anetherfortresspieces_pieceweight = NetherFortressPieces.BRIDGE_PIECE_WEIGHTS;
-            int k = anetherfortresspieces_pieceweight.length;
+            NetherFortressPieces.PieceWeight[] anetherfortresspieces_n = NetherFortressPieces.BRIDGE_PIECE_WEIGHTS;
+            int k = anetherfortresspieces_n.length;
 
-            NetherFortressPieces.PieceWeight netherfortresspieces_pieceweight;
+            NetherFortressPieces.PieceWeight netherfortresspieces_n;
             int l;
 
             for (l = 0; l < k; ++l) {
-                netherfortresspieces_pieceweight = anetherfortresspieces_pieceweight[l];
-                netherfortresspieces_pieceweight.placeCount = 0;
-                this.availableBridgePieces.add(netherfortresspieces_pieceweight);
+                netherfortresspieces_n = anetherfortresspieces_n[l];
+                netherfortresspieces_n.placeCount = 0;
+                this.availableBridgePieces.add(netherfortresspieces_n);
             }
 
             this.availableCastlePieces = Lists.newArrayList();
-            anetherfortresspieces_pieceweight = NetherFortressPieces.CASTLE_PIECE_WEIGHTS;
-            k = anetherfortresspieces_pieceweight.length;
+            anetherfortresspieces_n = NetherFortressPieces.CASTLE_PIECE_WEIGHTS;
+            k = anetherfortresspieces_n.length;
 
             for (l = 0; l < k; ++l) {
-                netherfortresspieces_pieceweight = anetherfortresspieces_pieceweight[l];
-                netherfortresspieces_pieceweight.placeCount = 0;
-                this.availableCastlePieces.add(netherfortresspieces_pieceweight);
+                netherfortresspieces_n = anetherfortresspieces_n[l];
+                netherfortresspieces_n.placeCount = 0;
+                this.availableCastlePieces.add(netherfortresspieces_n);
             }
 
         }
 
-        public StartPiece(CompoundTag compoundtag) {
-            super(StructurePieceType.NETHER_FORTRESS_START, compoundtag);
+        public StartPiece(CompoundTag tag) {
+            super(StructurePieceType.NETHER_FORTRESS_START, tag);
         }
     }
 
     private abstract static class NetherBridgePiece extends StructurePiece {
 
-        protected NetherBridgePiece(StructurePieceType structurepiecetype, int i, BoundingBox boundingbox) {
-            super(structurepiecetype, i, boundingbox);
+        protected NetherBridgePiece(StructurePieceType type, int genDepth, BoundingBox boundingBox) {
+            super(type, genDepth, boundingBox);
         }
 
-        public NetherBridgePiece(StructurePieceType structurepiecetype, CompoundTag compoundtag) {
-            super(structurepiecetype, compoundtag);
+        public NetherBridgePiece(StructurePieceType type, CompoundTag tag) {
+            super(type, tag);
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {}
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {}
 
-        private int updatePieceWeight(List<NetherFortressPieces.PieceWeight> list) {
+        private int updatePieceWeight(List<NetherFortressPieces.PieceWeight> weights) {
             boolean flag = false;
             int i = 0;
 
-            NetherFortressPieces.PieceWeight netherfortresspieces_pieceweight;
+            NetherFortressPieces.PieceWeight netherfortresspieces_n;
 
-            for (Iterator iterator = list.iterator(); iterator.hasNext(); i += netherfortresspieces_pieceweight.weight) {
-                netherfortresspieces_pieceweight = (NetherFortressPieces.PieceWeight) iterator.next();
-                if (netherfortresspieces_pieceweight.maxPlaceCount > 0 && netherfortresspieces_pieceweight.placeCount < netherfortresspieces_pieceweight.maxPlaceCount) {
+            for (Iterator iterator = weights.iterator(); iterator.hasNext(); i += netherfortresspieces_n.weight) {
+                netherfortresspieces_n = (NetherFortressPieces.PieceWeight) iterator.next();
+                if (netherfortresspieces_n.maxPlaceCount > 0 && netherfortresspieces_n.placeCount < netherfortresspieces_n.maxPlaceCount) {
                     flag = true;
                 }
             }
@@ -1227,78 +1198,78 @@
             return flag ? i : -1;
         }
 
-        private NetherFortressPieces.NetherBridgePiece generatePiece(NetherFortressPieces.StartPiece netherfortresspieces_startpiece, List<NetherFortressPieces.PieceWeight> list, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            int i1 = this.updatePieceWeight(list);
-            boolean flag = i1 > 0 && l <= 30;
+        private NetherFortressPieces.NetherBridgePiece generatePiece(NetherFortressPieces.StartPiece startPiece, List<NetherFortressPieces.PieceWeight> weights, StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            int i1 = this.updatePieceWeight(weights);
+            boolean flag = i1 > 0 && genDepth <= 30;
             int j1 = 0;
 
             while (j1 < 5 && flag) {
                 ++j1;
-                int k1 = randomsource.nextInt(i1);
-                Iterator iterator = list.iterator();
+                int k1 = random.nextInt(i1);
+                Iterator iterator = weights.iterator();
 
                 while (iterator.hasNext()) {
-                    NetherFortressPieces.PieceWeight netherfortresspieces_pieceweight = (NetherFortressPieces.PieceWeight) iterator.next();
+                    NetherFortressPieces.PieceWeight netherfortresspieces_n = (NetherFortressPieces.PieceWeight) iterator.next();
 
-                    k1 -= netherfortresspieces_pieceweight.weight;
+                    k1 -= netherfortresspieces_n.weight;
                     if (k1 < 0) {
-                        if (!netherfortresspieces_pieceweight.doPlace(l) || netherfortresspieces_pieceweight == netherfortresspieces_startpiece.previousPiece && !netherfortresspieces_pieceweight.allowInRow) {
+                        if (!netherfortresspieces_n.doPlace(genDepth) || netherfortresspieces_n == startPiece.previousPiece && !netherfortresspieces_n.allowInRow) {
                             break;
                         }
 
-                        NetherFortressPieces.NetherBridgePiece netherfortresspieces_netherbridgepiece = NetherFortressPieces.findAndCreateBridgePieceFactory(netherfortresspieces_pieceweight, structurepieceaccessor, randomsource, i, j, k, direction, l);
+                        NetherFortressPieces.NetherBridgePiece netherfortresspieces_m = NetherFortressPieces.findAndCreateBridgePieceFactory(netherfortresspieces_n, pieces, random, x, y, z, orientation, genDepth);
 
-                        if (netherfortresspieces_netherbridgepiece != null) {
-                            ++netherfortresspieces_pieceweight.placeCount;
-                            netherfortresspieces_startpiece.previousPiece = netherfortresspieces_pieceweight;
-                            if (!netherfortresspieces_pieceweight.isValid()) {
-                                list.remove(netherfortresspieces_pieceweight);
+                        if (netherfortresspieces_m != null) {
+                            ++netherfortresspieces_n.placeCount;
+                            startPiece.previousPiece = netherfortresspieces_n;
+                            if (!netherfortresspieces_n.isValid()) {
+                                weights.remove(netherfortresspieces_n);
                             }
 
-                            return netherfortresspieces_netherbridgepiece;
+                            return netherfortresspieces_m;
                         }
                     }
                 }
             }
 
-            return NetherFortressPieces.BridgeEndFiller.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
+            return NetherFortressPieces.BridgeEndFiller.createPiece(pieces, random, x, y, z, orientation, genDepth);
         }
 
-        private StructurePiece generateAndAddPiece(NetherFortressPieces.StartPiece netherfortresspieces_startpiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, @Nullable Direction direction, int l, boolean flag) {
-            if (Math.abs(i - netherfortresspieces_startpiece.getBoundingBox().minX()) <= 112 && Math.abs(k - netherfortresspieces_startpiece.getBoundingBox().minZ()) <= 112) {
-                List<NetherFortressPieces.PieceWeight> list = netherfortresspieces_startpiece.availableBridgePieces;
+        private StructurePiece generateAndAddPiece(NetherFortressPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, @Nullable Direction orientation, int genDepth, boolean castlePiece) {
+            if (Math.abs(x - startPiece.getBoundingBox().minX()) <= 112 && Math.abs(z - startPiece.getBoundingBox().minZ()) <= 112) {
+                List<NetherFortressPieces.PieceWeight> list = startPiece.availableBridgePieces;
 
-                if (flag) {
-                    list = netherfortresspieces_startpiece.availableCastlePieces;
+                if (castlePiece) {
+                    list = startPiece.availableCastlePieces;
                 }
 
-                NetherFortressPieces.NetherBridgePiece netherfortresspieces_netherbridgepiece = this.generatePiece(netherfortresspieces_startpiece, list, structurepieceaccessor, randomsource, i, j, k, direction, l + 1);
+                NetherFortressPieces.NetherBridgePiece netherfortresspieces_m = this.generatePiece(startPiece, list, pieces, random, x, y, z, orientation, genDepth + 1);
 
-                if (netherfortresspieces_netherbridgepiece != null) {
-                    structurepieceaccessor.addPiece(netherfortresspieces_netherbridgepiece);
-                    netherfortresspieces_startpiece.pendingChildren.add(netherfortresspieces_netherbridgepiece);
+                if (netherfortresspieces_m != null) {
+                    pieces.addPiece(netherfortresspieces_m);
+                    startPiece.pendingChildren.add(netherfortresspieces_m);
                 }
 
-                return netherfortresspieces_netherbridgepiece;
+                return netherfortresspieces_m;
             } else {
-                return NetherFortressPieces.BridgeEndFiller.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
+                return NetherFortressPieces.BridgeEndFiller.createPiece(pieces, random, x, y, z, orientation, genDepth);
             }
         }
 
         @Nullable
-        protected StructurePiece generateChildForward(NetherFortressPieces.StartPiece netherfortresspieces_startpiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, boolean flag) {
-            Direction direction = this.getOrientation();
+        protected StructurePiece generateChildForward(NetherFortressPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int offsetX, int offsetY, boolean castlePiece) {
+            Direction enumdirection = this.getOrientation();
 
-            if (direction != null) {
-                switch (direction) {
+            if (enumdirection != null) {
+                switch (enumdirection) {
                     case NORTH:
-                        return this.generateAndAddPiece(netherfortresspieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + i, this.boundingBox.minY() + j, this.boundingBox.minZ() - 1, direction, this.getGenDepth(), flag);
+                        return this.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() - 1, enumdirection, this.getGenDepth(), castlePiece);
                     case SOUTH:
-                        return this.generateAndAddPiece(netherfortresspieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + i, this.boundingBox.minY() + j, this.boundingBox.maxZ() + 1, direction, this.getGenDepth(), flag);
+                        return this.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.maxZ() + 1, enumdirection, this.getGenDepth(), castlePiece);
                     case WEST:
-                        return this.generateAndAddPiece(netherfortresspieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY() + j, this.boundingBox.minZ() + i, direction, this.getGenDepth(), flag);
+                        return this.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, enumdirection, this.getGenDepth(), castlePiece);
                     case EAST:
-                        return this.generateAndAddPiece(netherfortresspieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY() + j, this.boundingBox.minZ() + i, direction, this.getGenDepth(), flag);
+                        return this.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, enumdirection, this.getGenDepth(), castlePiece);
                 }
             }
 
@@ -1306,19 +1277,19 @@
         }
 
         @Nullable
-        protected StructurePiece generateChildLeft(NetherFortressPieces.StartPiece netherfortresspieces_startpiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, boolean flag) {
-            Direction direction = this.getOrientation();
+        protected StructurePiece generateChildLeft(NetherFortressPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int offsetY, int offsetX, boolean castlePiece) {
+            Direction enumdirection = this.getOrientation();
 
-            if (direction != null) {
-                switch (direction) {
+            if (enumdirection != null) {
+                switch (enumdirection) {
                     case NORTH:
-                        return this.generateAndAddPiece(netherfortresspieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY() + i, this.boundingBox.minZ() + j, Direction.WEST, this.getGenDepth(), flag);
+                        return this.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, Direction.WEST, this.getGenDepth(), castlePiece);
                     case SOUTH:
-                        return this.generateAndAddPiece(netherfortresspieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY() + i, this.boundingBox.minZ() + j, Direction.WEST, this.getGenDepth(), flag);
+                        return this.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, Direction.WEST, this.getGenDepth(), castlePiece);
                     case WEST:
-                        return this.generateAndAddPiece(netherfortresspieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + j, this.boundingBox.minY() + i, this.boundingBox.minZ() - 1, Direction.NORTH, this.getGenDepth(), flag);
+                        return this.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() - 1, Direction.NORTH, this.getGenDepth(), castlePiece);
                     case EAST:
-                        return this.generateAndAddPiece(netherfortresspieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + j, this.boundingBox.minY() + i, this.boundingBox.minZ() - 1, Direction.NORTH, this.getGenDepth(), flag);
+                        return this.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() - 1, Direction.NORTH, this.getGenDepth(), castlePiece);
                 }
             }
 
@@ -1326,27 +1297,27 @@
         }
 
         @Nullable
-        protected StructurePiece generateChildRight(NetherFortressPieces.StartPiece netherfortresspieces_startpiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, boolean flag) {
-            Direction direction = this.getOrientation();
+        protected StructurePiece generateChildRight(NetherFortressPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int offsetY, int offsetX, boolean castlePiece) {
+            Direction enumdirection = this.getOrientation();
 
-            if (direction != null) {
-                switch (direction) {
+            if (enumdirection != null) {
+                switch (enumdirection) {
                     case NORTH:
-                        return this.generateAndAddPiece(netherfortresspieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY() + i, this.boundingBox.minZ() + j, Direction.EAST, this.getGenDepth(), flag);
+                        return this.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, Direction.EAST, this.getGenDepth(), castlePiece);
                     case SOUTH:
-                        return this.generateAndAddPiece(netherfortresspieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY() + i, this.boundingBox.minZ() + j, Direction.EAST, this.getGenDepth(), flag);
+                        return this.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, Direction.EAST, this.getGenDepth(), castlePiece);
                     case WEST:
-                        return this.generateAndAddPiece(netherfortresspieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + j, this.boundingBox.minY() + i, this.boundingBox.maxZ() + 1, Direction.SOUTH, this.getGenDepth(), flag);
+                        return this.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.maxZ() + 1, Direction.SOUTH, this.getGenDepth(), castlePiece);
                     case EAST:
-                        return this.generateAndAddPiece(netherfortresspieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + j, this.boundingBox.minY() + i, this.boundingBox.maxZ() + 1, Direction.SOUTH, this.getGenDepth(), flag);
+                        return this.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.maxZ() + 1, Direction.SOUTH, this.getGenDepth(), castlePiece);
                 }
             }
 
             return null;
         }
 
-        protected static boolean isOkBox(BoundingBox boundingbox) {
-            return boundingbox != null && boundingbox.minY() > 10;
+        protected static boolean isOkBox(BoundingBox box) {
+            return box != null && box.minY() > 10;
         }
     }
 }
