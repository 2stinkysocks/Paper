--- a/net/minecraft/world/level/levelgen/structure/structures/EndCityPieces.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/EndCityPieces.java
@@ -33,30 +33,28 @@
     private static final int MAX_GEN_DEPTH = 8;
     static final EndCityPieces.SectionGenerator HOUSE_TOWER_GENERATOR = new EndCityPieces.SectionGenerator() {
         @Override
-        @Override
         public void init() {}
 
         @Override
-        @Override
-        public boolean generate(StructureTemplateManager structuretemplatemanager, int i, EndCityPieces.EndCityPiece endcitypieces_endcitypiece, BlockPos blockpos, List<StructurePiece> list, RandomSource randomsource) {
-            if (i > 8) {
+        public boolean generate(StructureTemplateManager structureTemplateManager, int counter, EndCityPieces.EndCityPiece piece, BlockPos startPos, List<StructurePiece> pieces, RandomSource random) {
+            if (counter > 8) {
                 return false;
             } else {
-                Rotation rotation = endcitypieces_endcitypiece.placeSettings().getRotation();
-                EndCityPieces.EndCityPiece endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece, blockpos, "base_floor", rotation, true));
-                int j = randomsource.nextInt(3);
+                Rotation enumblockrotation = piece.placeSettings().getRotation();
+                EndCityPieces.EndCityPiece endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, piece, startPos, "base_floor", enumblockrotation, true));
+                int j = random.nextInt(3);
 
                 if (j == 0) {
-                    EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(-1, 4, -1), "base_roof", rotation, true));
+                    EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 4, -1), "base_roof", enumblockrotation, true));
                 } else if (j == 1) {
-                    endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(-1, 0, -1), "second_floor_2", rotation, false));
-                    endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(-1, 8, -1), "second_roof", rotation, false));
-                    EndCityPieces.recursiveChildren(structuretemplatemanager, EndCityPieces.TOWER_GENERATOR, i + 1, endcitypieces_endcitypiece1, (BlockPos) null, list, randomsource);
+                    endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 0, -1), "second_floor_2", enumblockrotation, false));
+                    endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 8, -1), "second_roof", enumblockrotation, false));
+                    EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.TOWER_GENERATOR, counter + 1, endcitypieces_a1, (BlockPos) null, pieces, random);
                 } else if (j == 2) {
-                    endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(-1, 0, -1), "second_floor_2", rotation, false));
-                    endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(-1, 4, -1), "third_floor_2", rotation, false));
-                    endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(-1, 8, -1), "third_roof", rotation, true));
-                    EndCityPieces.recursiveChildren(structuretemplatemanager, EndCityPieces.TOWER_GENERATOR, i + 1, endcitypieces_endcitypiece1, (BlockPos) null, list, randomsource);
+                    endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 0, -1), "second_floor_2", enumblockrotation, false));
+                    endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 4, -1), "third_floor_2", enumblockrotation, false));
+                    endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 8, -1), "third_roof", enumblockrotation, true));
+                    EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.TOWER_GENERATOR, counter + 1, endcitypieces_a1, (BlockPos) null, pieces, random);
                 }
 
                 return true;
@@ -66,46 +64,44 @@
     static final List<Tuple<Rotation, BlockPos>> TOWER_BRIDGES = Lists.newArrayList(new Tuple[]{new Tuple<>(Rotation.NONE, new BlockPos(1, -1, 0)), new Tuple<>(Rotation.CLOCKWISE_90, new BlockPos(6, -1, 1)), new Tuple<>(Rotation.COUNTERCLOCKWISE_90, new BlockPos(0, -1, 5)), new Tuple<>(Rotation.CLOCKWISE_180, new BlockPos(5, -1, 6))});
     static final EndCityPieces.SectionGenerator TOWER_GENERATOR = new EndCityPieces.SectionGenerator() {
         @Override
-        @Override
         public void init() {}
 
         @Override
-        @Override
-        public boolean generate(StructureTemplateManager structuretemplatemanager, int i, EndCityPieces.EndCityPiece endcitypieces_endcitypiece, BlockPos blockpos, List<StructurePiece> list, RandomSource randomsource) {
-            Rotation rotation = endcitypieces_endcitypiece.placeSettings().getRotation();
-            EndCityPieces.EndCityPiece endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece, new BlockPos(3 + randomsource.nextInt(2), -3, 3 + randomsource.nextInt(2)), "tower_base", rotation, true));
+        public boolean generate(StructureTemplateManager structureTemplateManager, int counter, EndCityPieces.EndCityPiece piece, BlockPos startPos, List<StructurePiece> pieces, RandomSource random) {
+            Rotation enumblockrotation = piece.placeSettings().getRotation();
+            EndCityPieces.EndCityPiece endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, piece, new BlockPos(3 + random.nextInt(2), -3, 3 + random.nextInt(2)), "tower_base", enumblockrotation, true));
 
-            endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(0, 7, 0), "tower_piece", rotation, true));
-            EndCityPieces.EndCityPiece endcitypieces_endcitypiece2 = randomsource.nextInt(3) == 0 ? endcitypieces_endcitypiece1 : null;
-            int j = 1 + randomsource.nextInt(3);
+            endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, 7, 0), "tower_piece", enumblockrotation, true));
+            EndCityPieces.EndCityPiece endcitypieces_a2 = random.nextInt(3) == 0 ? endcitypieces_a1 : null;
+            int j = 1 + random.nextInt(3);
 
             for (int k = 0; k < j; ++k) {
-                endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(0, 4, 0), "tower_piece", rotation, true));
-                if (k < j - 1 && randomsource.nextBoolean()) {
-                    endcitypieces_endcitypiece2 = endcitypieces_endcitypiece1;
+                endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, 4, 0), "tower_piece", enumblockrotation, true));
+                if (k < j - 1 && random.nextBoolean()) {
+                    endcitypieces_a2 = endcitypieces_a1;
                 }
             }
 
-            if (endcitypieces_endcitypiece2 != null) {
+            if (endcitypieces_a2 != null) {
                 Iterator iterator = EndCityPieces.TOWER_BRIDGES.iterator();
 
                 while (iterator.hasNext()) {
                     Tuple<Rotation, BlockPos> tuple = (Tuple) iterator.next();
 
-                    if (randomsource.nextBoolean()) {
-                        EndCityPieces.EndCityPiece endcitypieces_endcitypiece3 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece2, (BlockPos) tuple.getB(), "bridge_end", rotation.getRotated((Rotation) tuple.getA()), true));
+                    if (random.nextBoolean()) {
+                        EndCityPieces.EndCityPiece endcitypieces_a3 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a2, (BlockPos) tuple.getB(), "bridge_end", enumblockrotation.getRotated((Rotation) tuple.getA()), true));
 
-                        EndCityPieces.recursiveChildren(structuretemplatemanager, EndCityPieces.TOWER_BRIDGE_GENERATOR, i + 1, endcitypieces_endcitypiece3, (BlockPos) null, list, randomsource);
+                        EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.TOWER_BRIDGE_GENERATOR, counter + 1, endcitypieces_a3, (BlockPos) null, pieces, random);
                     }
                 }
 
-                EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(-1, 4, -1), "tower_top", rotation, true));
+                EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 4, -1), "tower_top", enumblockrotation, true));
             } else {
-                if (i != 7) {
-                    return EndCityPieces.recursiveChildren(structuretemplatemanager, EndCityPieces.FAT_TOWER_GENERATOR, i + 1, endcitypieces_endcitypiece1, (BlockPos) null, list, randomsource);
+                if (counter != 7) {
+                    return EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.FAT_TOWER_GENERATOR, counter + 1, endcitypieces_a1, (BlockPos) null, pieces, random);
                 }
 
-                EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(-1, 4, -1), "tower_top", rotation, true));
+                EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 4, -1), "tower_top", enumblockrotation, true));
             }
 
             return true;
@@ -115,135 +111,131 @@
         public boolean shipCreated;
 
         @Override
-        @Override
         public void init() {
             this.shipCreated = false;
         }
 
         @Override
-        @Override
-        public boolean generate(StructureTemplateManager structuretemplatemanager, int i, EndCityPieces.EndCityPiece endcitypieces_endcitypiece, BlockPos blockpos, List<StructurePiece> list, RandomSource randomsource) {
-            Rotation rotation = endcitypieces_endcitypiece.placeSettings().getRotation();
-            int j = randomsource.nextInt(4) + 1;
-            EndCityPieces.EndCityPiece endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece, new BlockPos(0, 0, -4), "bridge_piece", rotation, true));
+        public boolean generate(StructureTemplateManager structureTemplateManager, int counter, EndCityPieces.EndCityPiece piece, BlockPos startPos, List<StructurePiece> pieces, RandomSource random) {
+            Rotation enumblockrotation = piece.placeSettings().getRotation();
+            int j = random.nextInt(4) + 1;
+            EndCityPieces.EndCityPiece endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, piece, new BlockPos(0, 0, -4), "bridge_piece", enumblockrotation, true));
 
-            endcitypieces_endcitypiece1.setGenDepth(-1);
+            endcitypieces_a1.setGenDepth(-1);
             byte b0 = 0;
 
             for (int k = 0; k < j; ++k) {
-                if (randomsource.nextBoolean()) {
-                    endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(0, b0, -4), "bridge_piece", rotation, true));
+                if (random.nextBoolean()) {
+                    endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, b0, -4), "bridge_piece", enumblockrotation, true));
                     b0 = 0;
                 } else {
-                    if (randomsource.nextBoolean()) {
-                        endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(0, b0, -4), "bridge_steep_stairs", rotation, true));
+                    if (random.nextBoolean()) {
+                        endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, b0, -4), "bridge_steep_stairs", enumblockrotation, true));
                     } else {
-                        endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(0, b0, -8), "bridge_gentle_stairs", rotation, true));
+                        endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, b0, -8), "bridge_gentle_stairs", enumblockrotation, true));
                     }
 
                     b0 = 4;
                 }
             }
 
-            if (!this.shipCreated && randomsource.nextInt(10 - i) == 0) {
-                EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(-8 + randomsource.nextInt(8), b0, -70 + randomsource.nextInt(10)), "ship", rotation, true));
+            if (!this.shipCreated && random.nextInt(10 - counter) == 0) {
+                EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-8 + random.nextInt(8), b0, -70 + random.nextInt(10)), "ship", enumblockrotation, true));
                 this.shipCreated = true;
-            } else if (!EndCityPieces.recursiveChildren(structuretemplatemanager, EndCityPieces.HOUSE_TOWER_GENERATOR, i + 1, endcitypieces_endcitypiece1, new BlockPos(-3, b0 + 1, -11), list, randomsource)) {
+            } else if (!EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.HOUSE_TOWER_GENERATOR, counter + 1, endcitypieces_a1, new BlockPos(-3, b0 + 1, -11), pieces, random)) {
                 return false;
             }
 
-            endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(4, b0, 0), "bridge_end", rotation.getRotated(Rotation.CLOCKWISE_180), true));
-            endcitypieces_endcitypiece1.setGenDepth(-1);
+            endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(4, b0, 0), "bridge_end", enumblockrotation.getRotated(Rotation.CLOCKWISE_180), true));
+            endcitypieces_a1.setGenDepth(-1);
             return true;
         }
     };
     static final List<Tuple<Rotation, BlockPos>> FAT_TOWER_BRIDGES = Lists.newArrayList(new Tuple[]{new Tuple<>(Rotation.NONE, new BlockPos(4, -1, 0)), new Tuple<>(Rotation.CLOCKWISE_90, new BlockPos(12, -1, 4)), new Tuple<>(Rotation.COUNTERCLOCKWISE_90, new BlockPos(0, -1, 8)), new Tuple<>(Rotation.CLOCKWISE_180, new BlockPos(8, -1, 12))});
     static final EndCityPieces.SectionGenerator FAT_TOWER_GENERATOR = new EndCityPieces.SectionGenerator() {
         @Override
-        @Override
         public void init() {}
 
         @Override
-        @Override
-        public boolean generate(StructureTemplateManager structuretemplatemanager, int i, EndCityPieces.EndCityPiece endcitypieces_endcitypiece, BlockPos blockpos, List<StructurePiece> list, RandomSource randomsource) {
-            Rotation rotation = endcitypieces_endcitypiece.placeSettings().getRotation();
-            EndCityPieces.EndCityPiece endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece, new BlockPos(-3, 4, -3), "fat_tower_base", rotation, true));
+        public boolean generate(StructureTemplateManager structureTemplateManager, int counter, EndCityPieces.EndCityPiece piece, BlockPos startPos, List<StructurePiece> pieces, RandomSource random) {
+            Rotation enumblockrotation = piece.placeSettings().getRotation();
+            EndCityPieces.EndCityPiece endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, piece, new BlockPos(-3, 4, -3), "fat_tower_base", enumblockrotation, true));
 
-            endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(0, 4, 0), "fat_tower_middle", rotation, true));
+            endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, 4, 0), "fat_tower_middle", enumblockrotation, true));
 
-            for (int j = 0; j < 2 && randomsource.nextInt(3) != 0; ++j) {
-                endcitypieces_endcitypiece1 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(0, 8, 0), "fat_tower_middle", rotation, true));
+            for (int j = 0; j < 2 && random.nextInt(3) != 0; ++j) {
+                endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, 8, 0), "fat_tower_middle", enumblockrotation, true));
                 Iterator iterator = EndCityPieces.FAT_TOWER_BRIDGES.iterator();
 
                 while (iterator.hasNext()) {
                     Tuple<Rotation, BlockPos> tuple = (Tuple) iterator.next();
 
-                    if (randomsource.nextBoolean()) {
-                        EndCityPieces.EndCityPiece endcitypieces_endcitypiece2 = EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, (BlockPos) tuple.getB(), "bridge_end", rotation.getRotated((Rotation) tuple.getA()), true));
+                    if (random.nextBoolean()) {
+                        EndCityPieces.EndCityPiece endcitypieces_a2 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, (BlockPos) tuple.getB(), "bridge_end", enumblockrotation.getRotated((Rotation) tuple.getA()), true));
 
-                        EndCityPieces.recursiveChildren(structuretemplatemanager, EndCityPieces.TOWER_BRIDGE_GENERATOR, i + 1, endcitypieces_endcitypiece2, (BlockPos) null, list, randomsource);
+                        EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.TOWER_BRIDGE_GENERATOR, counter + 1, endcitypieces_a2, (BlockPos) null, pieces, random);
                     }
                 }
             }
 
-            EndCityPieces.addHelper(list, EndCityPieces.addPiece(structuretemplatemanager, endcitypieces_endcitypiece1, new BlockPos(-2, 8, -2), "fat_tower_top", rotation, true));
+            EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-2, 8, -2), "fat_tower_top", enumblockrotation, true));
             return true;
         }
     };
 
     public EndCityPieces() {}
 
-    static EndCityPieces.EndCityPiece addPiece(StructureTemplateManager structuretemplatemanager, EndCityPieces.EndCityPiece endcitypieces_endcitypiece, BlockPos blockpos, String s, Rotation rotation, boolean flag) {
-        EndCityPieces.EndCityPiece endcitypieces_endcitypiece1 = new EndCityPieces.EndCityPiece(structuretemplatemanager, s, endcitypieces_endcitypiece.templatePosition(), rotation, flag);
-        BlockPos blockpos1 = endcitypieces_endcitypiece.template().calculateConnectedPosition(endcitypieces_endcitypiece.placeSettings(), blockpos, endcitypieces_endcitypiece1.placeSettings(), BlockPos.ZERO);
+    static EndCityPieces.EndCityPiece addPiece(StructureTemplateManager structureTemplateManager, EndCityPieces.EndCityPiece piece, BlockPos startPos, String name, Rotation rotation, boolean overwrite) {
+        EndCityPieces.EndCityPiece endcitypieces_a1 = new EndCityPieces.EndCityPiece(structureTemplateManager, name, piece.templatePosition(), rotation, overwrite);
+        BlockPos blockposition1 = piece.template().calculateConnectedPosition(piece.placeSettings(), startPos, endcitypieces_a1.placeSettings(), BlockPos.ZERO);
 
-        endcitypieces_endcitypiece1.move(blockpos1.getX(), blockpos1.getY(), blockpos1.getZ());
-        return endcitypieces_endcitypiece1;
+        endcitypieces_a1.move(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
+        return endcitypieces_a1;
     }
 
-    public static void startHouseTower(StructureTemplateManager structuretemplatemanager, BlockPos blockpos, Rotation rotation, List<StructurePiece> list, RandomSource randomsource) {
+    public static void startHouseTower(StructureTemplateManager structureTemplateManager, BlockPos startPos, Rotation rotation, List<StructurePiece> pieces, RandomSource random) {
         EndCityPieces.FAT_TOWER_GENERATOR.init();
         EndCityPieces.HOUSE_TOWER_GENERATOR.init();
         EndCityPieces.TOWER_BRIDGE_GENERATOR.init();
         EndCityPieces.TOWER_GENERATOR.init();
-        EndCityPieces.EndCityPiece endcitypieces_endcitypiece = addHelper(list, new EndCityPieces.EndCityPiece(structuretemplatemanager, "base_floor", blockpos, rotation, true));
+        EndCityPieces.EndCityPiece endcitypieces_a = addHelper(pieces, new EndCityPieces.EndCityPiece(structureTemplateManager, "base_floor", startPos, rotation, true));
 
-        endcitypieces_endcitypiece = addHelper(list, addPiece(structuretemplatemanager, endcitypieces_endcitypiece, new BlockPos(-1, 0, -1), "second_floor_1", rotation, false));
-        endcitypieces_endcitypiece = addHelper(list, addPiece(structuretemplatemanager, endcitypieces_endcitypiece, new BlockPos(-1, 4, -1), "third_floor_1", rotation, false));
-        endcitypieces_endcitypiece = addHelper(list, addPiece(structuretemplatemanager, endcitypieces_endcitypiece, new BlockPos(-1, 8, -1), "third_roof", rotation, true));
-        recursiveChildren(structuretemplatemanager, EndCityPieces.TOWER_GENERATOR, 1, endcitypieces_endcitypiece, (BlockPos) null, list, randomsource);
+        endcitypieces_a = addHelper(pieces, addPiece(structureTemplateManager, endcitypieces_a, new BlockPos(-1, 0, -1), "second_floor_1", rotation, false));
+        endcitypieces_a = addHelper(pieces, addPiece(structureTemplateManager, endcitypieces_a, new BlockPos(-1, 4, -1), "third_floor_1", rotation, false));
+        endcitypieces_a = addHelper(pieces, addPiece(structureTemplateManager, endcitypieces_a, new BlockPos(-1, 8, -1), "third_roof", rotation, true));
+        recursiveChildren(structureTemplateManager, EndCityPieces.TOWER_GENERATOR, 1, endcitypieces_a, (BlockPos) null, pieces, random);
     }
 
-    static EndCityPieces.EndCityPiece addHelper(List<StructurePiece> list, EndCityPieces.EndCityPiece endcitypieces_endcitypiece) {
-        list.add(endcitypieces_endcitypiece);
-        return endcitypieces_endcitypiece;
+    static EndCityPieces.EndCityPiece addHelper(List<StructurePiece> pieces, EndCityPieces.EndCityPiece piece) {
+        pieces.add(piece);
+        return piece;
     }
 
-    static boolean recursiveChildren(StructureTemplateManager structuretemplatemanager, EndCityPieces.SectionGenerator endcitypieces_sectiongenerator, int i, EndCityPieces.EndCityPiece endcitypieces_endcitypiece, BlockPos blockpos, List<StructurePiece> list, RandomSource randomsource) {
-        if (i > 8) {
+    static boolean recursiveChildren(StructureTemplateManager structureTemplateManager, EndCityPieces.SectionGenerator sectionGenerator, int counter, EndCityPieces.EndCityPiece piece, BlockPos startPos, List<StructurePiece> pieces, RandomSource random) {
+        if (counter > 8) {
             return false;
         } else {
             List<StructurePiece> list1 = Lists.newArrayList();
 
-            if (endcitypieces_sectiongenerator.generate(structuretemplatemanager, i, endcitypieces_endcitypiece, blockpos, list1, randomsource)) {
+            if (sectionGenerator.generate(structureTemplateManager, counter, piece, startPos, list1, random)) {
                 boolean flag = false;
-                int j = randomsource.nextInt();
+                int j = random.nextInt();
                 Iterator iterator = list1.iterator();
 
                 while (iterator.hasNext()) {
                     StructurePiece structurepiece = (StructurePiece) iterator.next();
 
                     structurepiece.setGenDepth(j);
-                    StructurePiece structurepiece1 = StructurePiece.findCollisionPiece(list, structurepiece.getBoundingBox());
+                    StructurePiece structurepiece1 = StructurePiece.findCollisionPiece(pieces, structurepiece.getBoundingBox());
 
-                    if (structurepiece1 != null && structurepiece1.getGenDepth() != endcitypieces_endcitypiece.getGenDepth()) {
+                    if (structurepiece1 != null && structurepiece1.getGenDepth() != piece.getGenDepth()) {
                         flag = true;
                         break;
                     }
                 }
 
                 if (!flag) {
-                    list.addAll(list1);
+                    pieces.addAll(list1);
                     return true;
                 }
             }
@@ -254,62 +246,64 @@
 
     public static class EndCityPiece extends TemplateStructurePiece {
 
-        public EndCityPiece(StructureTemplateManager structuretemplatemanager, String s, BlockPos blockpos, Rotation rotation, boolean flag) {
-            super(StructurePieceType.END_CITY_PIECE, 0, structuretemplatemanager, makeResourceLocation(s), s, makeSettings(flag, rotation), blockpos);
+        public EndCityPiece(StructureTemplateManager structureTemplateManager, String name, BlockPos startPos, Rotation rotation, boolean overwrite) {
+            super(StructurePieceType.END_CITY_PIECE, 0, structureTemplateManager, makeResourceLocation(name), name, makeSettings(overwrite, rotation), startPos);
         }
 
-        public EndCityPiece(StructureTemplateManager structuretemplatemanager, CompoundTag compoundtag) {
-            super(StructurePieceType.END_CITY_PIECE, compoundtag, structuretemplatemanager, (resourcelocation) -> {
-                return makeSettings(compoundtag.getBoolean("OW"), Rotation.valueOf(compoundtag.getString("Rot")));
+        public EndCityPiece(StructureTemplateManager structureTemplateManager, CompoundTag tag) {
+            super(StructurePieceType.END_CITY_PIECE, tag, structureTemplateManager, (minecraftkey) -> {
+                return makeSettings(tag.getBoolean("OW"), Rotation.valueOf(tag.getString("Rot")));
             });
         }
 
-        private static StructurePlaceSettings makeSettings(boolean flag, Rotation rotation) {
-            BlockIgnoreProcessor blockignoreprocessor = flag ? BlockIgnoreProcessor.STRUCTURE_BLOCK : BlockIgnoreProcessor.STRUCTURE_AND_AIR;
+        private static StructurePlaceSettings makeSettings(boolean overwrite, Rotation rotation) {
+            BlockIgnoreProcessor definedstructureprocessorblockignore = overwrite ? BlockIgnoreProcessor.STRUCTURE_BLOCK : BlockIgnoreProcessor.STRUCTURE_AND_AIR;
 
-            return (new StructurePlaceSettings()).setIgnoreEntities(true).addProcessor(blockignoreprocessor).setRotation(rotation);
+            return (new StructurePlaceSettings()).setIgnoreEntities(true).addProcessor(definedstructureprocessorblockignore).setRotation(rotation);
         }
 
         @Override
-        @Override
         protected ResourceLocation makeTemplateLocation() {
             return makeResourceLocation(this.templateName);
         }
 
-        private static ResourceLocation makeResourceLocation(String s) {
-            return new ResourceLocation("end_city/" + s);
+        private static ResourceLocation makeResourceLocation(String name) {
+            return new ResourceLocation("end_city/" + name);
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putString("Rot", this.placeSettings.getRotation().name());
-            compoundtag.putBoolean("OW", this.placeSettings.getProcessors().get(0) == BlockIgnoreProcessor.STRUCTURE_BLOCK);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putString("Rot", this.placeSettings.getRotation().name());
+            tag.putBoolean("OW", this.placeSettings.getProcessors().get(0) == BlockIgnoreProcessor.STRUCTURE_BLOCK);
         }
 
         @Override
-        @Override
-        protected void handleDataMarker(String s, BlockPos blockpos, ServerLevelAccessor serverlevelaccessor, RandomSource randomsource, BoundingBox boundingbox) {
-            if (s.startsWith("Chest")) {
-                BlockPos blockpos1 = blockpos.below();
+        protected void handleDataMarker(String name, BlockPos pos, ServerLevelAccessor level, RandomSource random, BoundingBox box) {
+            if (name.startsWith("Chest")) {
+                BlockPos blockposition1 = pos.below();
 
-                if (boundingbox.isInside(blockpos1)) {
-                    RandomizableContainer.setBlockEntityLootTable(serverlevelaccessor, randomsource, blockpos1, BuiltInLootTables.END_CITY_TREASURE);
+                if (box.isInside(blockposition1)) {
+                    // CraftBukkit start - ensure block transformation
+                    /*
+                    RandomizableContainer.setBlockEntityLootTable(worldaccess, randomsource, blockposition1, LootTables.END_CITY_TREASURE);
+                    */
+                    setCraftLootTable(level, blockposition1, random, BuiltInLootTables.END_CITY_TREASURE);
+                    // CraftBukkit end
                 }
-            } else if (boundingbox.isInside(blockpos) && Level.isInSpawnableBounds(blockpos)) {
-                if (s.startsWith("Sentry")) {
-                    Shulker shulker = (Shulker) EntityType.SHULKER.create(serverlevelaccessor.getLevel());
+            } else if (box.isInside(pos) && Level.isInSpawnableBounds(pos)) {
+                if (name.startsWith("Sentry")) {
+                    Shulker entityshulker = (Shulker) EntityType.SHULKER.create(level.getLevel());
 
-                    if (shulker != null) {
-                        shulker.setPos((double) blockpos.getX() + 0.5D, (double) blockpos.getY(), (double) blockpos.getZ() + 0.5D);
-                        serverlevelaccessor.addFreshEntity(shulker);
+                    if (entityshulker != null) {
+                        entityshulker.setPos((double) pos.getX() + 0.5D, (double) pos.getY(), (double) pos.getZ() + 0.5D);
+                        level.addFreshEntity(entityshulker);
                     }
-                } else if (s.startsWith("Elytra")) {
-                    ItemFrame itemframe = new ItemFrame(serverlevelaccessor.getLevel(), blockpos, this.placeSettings.getRotation().rotate(Direction.SOUTH));
+                } else if (name.startsWith("Elytra")) {
+                    ItemFrame entityitemframe = new ItemFrame(level.getLevel(), pos, this.placeSettings.getRotation().rotate(Direction.SOUTH));
 
-                    itemframe.setItem(new ItemStack(Items.ELYTRA), false);
-                    serverlevelaccessor.addFreshEntity(itemframe);
+                    entityitemframe.setItem(new ItemStack(Items.ELYTRA), false);
+                    level.addFreshEntity(entityitemframe);
                 }
             }
 
