--- a/net/minecraft/world/level/levelgen/structure/structures/StrongholdPieces.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/StrongholdPieces.java
@@ -8,7 +8,6 @@
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.util.RandomSource;
-import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.StructureManager;
 import net.minecraft.world.level.WorldGenLevel;
@@ -22,10 +21,8 @@
 import net.minecraft.world.level.block.SlabBlock;
 import net.minecraft.world.level.block.StairBlock;
 import net.minecraft.world.level.block.WallTorchBlock;
-import net.minecraft.world.level.block.entity.BlockEntity;
-import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
-import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
+import net.minecraft.world.level.block.state.IBlockData;
+import net.minecraft.world.level.block.state.properties.BlockPropertyDoubleBlockHalf;
 import net.minecraft.world.level.block.state.properties.SlabType;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
@@ -45,34 +42,32 @@
     public static final int MAGIC_START_Y = 64;
     private static final StrongholdPieces.PieceWeight[] STRONGHOLD_PIECE_WEIGHTS = new StrongholdPieces.PieceWeight[]{new StrongholdPieces.PieceWeight(StrongholdPieces.Straight.class, 40, 0), new StrongholdPieces.PieceWeight(StrongholdPieces.PrisonHall.class, 5, 5), new StrongholdPieces.PieceWeight(StrongholdPieces.LeftTurn.class, 20, 0), new StrongholdPieces.PieceWeight(StrongholdPieces.RightTurn.class, 20, 0), new StrongholdPieces.PieceWeight(StrongholdPieces.RoomCrossing.class, 10, 6), new StrongholdPieces.PieceWeight(StrongholdPieces.StraightStairsDown.class, 5, 5), new StrongholdPieces.PieceWeight(StrongholdPieces.StairsDown.class, 5, 5), new StrongholdPieces.PieceWeight(StrongholdPieces.FiveCrossing.class, 5, 4), new StrongholdPieces.PieceWeight(StrongholdPieces.ChestCorridor.class, 5, 4), new StrongholdPieces.PieceWeight(StrongholdPieces.Library.class, 10, 2) {
                 @Override
-                @Override
-                public boolean doPlace(int i) {
-                    return super.doPlace(i) && i > 4;
+                public boolean doPlace(int genDepth) {
+                    return super.doPlace(genDepth) && genDepth > 4;
                 }
             }, new StrongholdPieces.PieceWeight(StrongholdPieces.PortalRoom.class, 20, 1) {
                 @Override
-                @Override
-                public boolean doPlace(int i) {
-                    return super.doPlace(i) && i > 5;
+                public boolean doPlace(int genDepth) {
+                    return super.doPlace(genDepth) && genDepth > 5;
                 }
-            }};
+            } }; // CraftBukkit - fix decompile styling
     private static List<StrongholdPieces.PieceWeight> currentPieces;
     static Class<? extends StrongholdPieces.StrongholdPiece> imposedPiece;
     private static int totalWeight;
-    static final StrongholdPieces.SmoothStoneSelector SMOOTH_STONE_SELECTOR = new StrongholdPieces.SmoothStoneSelector();
+    static final StrongholdPieces.k SMOOTH_STONE_SELECTOR = new StrongholdPieces.k();
 
     public StrongholdPieces() {}
 
     public static void resetPieces() {
         StrongholdPieces.currentPieces = Lists.newArrayList();
-        StrongholdPieces.PieceWeight[] astrongholdpieces_pieceweight = StrongholdPieces.STRONGHOLD_PIECE_WEIGHTS;
-        int i = astrongholdpieces_pieceweight.length;
+        StrongholdPieces.PieceWeight[] astrongholdpieces_f = StrongholdPieces.STRONGHOLD_PIECE_WEIGHTS;
+        int i = astrongholdpieces_f.length;
 
         for (int j = 0; j < i; ++j) {
-            StrongholdPieces.PieceWeight strongholdpieces_pieceweight = astrongholdpieces_pieceweight[j];
+            StrongholdPieces.PieceWeight strongholdpieces_f = astrongholdpieces_f[j];
 
-            strongholdpieces_pieceweight.placeCount = 0;
-            StrongholdPieces.currentPieces.add(strongholdpieces_pieceweight);
+            strongholdpieces_f.placeCount = 0;
+            StrongholdPieces.currentPieces.add(strongholdpieces_f);
         }
 
         StrongholdPieces.imposedPiece = null;
@@ -83,11 +78,11 @@
 
         StrongholdPieces.totalWeight = 0;
 
-        StrongholdPieces.PieceWeight strongholdpieces_pieceweight;
+        StrongholdPieces.PieceWeight strongholdpieces_f;
 
-        for (Iterator iterator = StrongholdPieces.currentPieces.iterator(); iterator.hasNext(); StrongholdPieces.totalWeight += strongholdpieces_pieceweight.weight) {
-            strongholdpieces_pieceweight = (StrongholdPieces.PieceWeight) iterator.next();
-            if (strongholdpieces_pieceweight.maxPlaceCount > 0 && strongholdpieces_pieceweight.placeCount < strongholdpieces_pieceweight.maxPlaceCount) {
+        for (Iterator iterator = StrongholdPieces.currentPieces.iterator(); iterator.hasNext(); StrongholdPieces.totalWeight += strongholdpieces_f.weight) {
+            strongholdpieces_f = (StrongholdPieces.PieceWeight) iterator.next();
+            if (strongholdpieces_f.maxPlaceCount > 0 && strongholdpieces_f.placeCount < strongholdpieces_f.maxPlaceCount) {
                 flag = true;
             }
         }
@@ -95,46 +90,46 @@
         return flag;
     }
 
-    private static StrongholdPieces.StrongholdPiece findAndCreatePieceFactory(Class<? extends StrongholdPieces.StrongholdPiece> oclass, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, @Nullable Direction direction, int l) {
+    private static StrongholdPieces.StrongholdPiece findAndCreatePieceFactory(Class<? extends StrongholdPieces.StrongholdPiece> pieceClass, StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, @Nullable Direction direction, int genDepth) {
         Object object = null;
 
-        if (oclass == StrongholdPieces.Straight.class) {
-            object = StrongholdPieces.Straight.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
-        } else if (oclass == StrongholdPieces.PrisonHall.class) {
-            object = StrongholdPieces.PrisonHall.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
-        } else if (oclass == StrongholdPieces.LeftTurn.class) {
-            object = StrongholdPieces.LeftTurn.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
-        } else if (oclass == StrongholdPieces.RightTurn.class) {
-            object = StrongholdPieces.RightTurn.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
-        } else if (oclass == StrongholdPieces.RoomCrossing.class) {
-            object = StrongholdPieces.RoomCrossing.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
-        } else if (oclass == StrongholdPieces.StraightStairsDown.class) {
-            object = StrongholdPieces.StraightStairsDown.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
-        } else if (oclass == StrongholdPieces.StairsDown.class) {
-            object = StrongholdPieces.StairsDown.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
-        } else if (oclass == StrongholdPieces.FiveCrossing.class) {
-            object = StrongholdPieces.FiveCrossing.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
-        } else if (oclass == StrongholdPieces.ChestCorridor.class) {
-            object = StrongholdPieces.ChestCorridor.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
-        } else if (oclass == StrongholdPieces.Library.class) {
-            object = StrongholdPieces.Library.createPiece(structurepieceaccessor, randomsource, i, j, k, direction, l);
-        } else if (oclass == StrongholdPieces.PortalRoom.class) {
-            object = StrongholdPieces.PortalRoom.createPiece(structurepieceaccessor, i, j, k, direction, l);
+        if (pieceClass == StrongholdPieces.Straight.class) {
+            object = StrongholdPieces.Straight.createPiece(pieces, random, x, y, z, direction, genDepth);
+        } else if (pieceClass == StrongholdPieces.PrisonHall.class) {
+            object = StrongholdPieces.PrisonHall.createPiece(pieces, random, x, y, z, direction, genDepth);
+        } else if (pieceClass == StrongholdPieces.LeftTurn.class) {
+            object = StrongholdPieces.LeftTurn.createPiece(pieces, random, x, y, z, direction, genDepth);
+        } else if (pieceClass == StrongholdPieces.RightTurn.class) {
+            object = StrongholdPieces.RightTurn.createPiece(pieces, random, x, y, z, direction, genDepth);
+        } else if (pieceClass == StrongholdPieces.RoomCrossing.class) {
+            object = StrongholdPieces.RoomCrossing.createPiece(pieces, random, x, y, z, direction, genDepth);
+        } else if (pieceClass == StrongholdPieces.StraightStairsDown.class) {
+            object = StrongholdPieces.StraightStairsDown.createPiece(pieces, random, x, y, z, direction, genDepth);
+        } else if (pieceClass == StrongholdPieces.StairsDown.class) {
+            object = StrongholdPieces.StairsDown.createPiece(pieces, random, x, y, z, direction, genDepth);
+        } else if (pieceClass == StrongholdPieces.FiveCrossing.class) {
+            object = StrongholdPieces.FiveCrossing.createPiece(pieces, random, x, y, z, direction, genDepth);
+        } else if (pieceClass == StrongholdPieces.ChestCorridor.class) {
+            object = StrongholdPieces.ChestCorridor.createPiece(pieces, random, x, y, z, direction, genDepth);
+        } else if (pieceClass == StrongholdPieces.Library.class) {
+            object = StrongholdPieces.Library.createPiece(pieces, random, x, y, z, direction, genDepth);
+        } else if (pieceClass == StrongholdPieces.PortalRoom.class) {
+            object = StrongholdPieces.PortalRoom.createPiece(pieces, x, y, z, direction, genDepth);
         }
 
         return (StrongholdPieces.StrongholdPiece) object;
     }
 
-    private static StrongholdPieces.StrongholdPiece generatePieceFromSmallDoor(StrongholdPieces.StartPiece strongholdpieces_startpiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
+    private static StrongholdPieces.StrongholdPiece generatePieceFromSmallDoor(StrongholdPieces.StartPiece piece, StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction direction, int genDepth) {
         if (!updatePieceWeight()) {
             return null;
         } else {
             if (StrongholdPieces.imposedPiece != null) {
-                StrongholdPieces.StrongholdPiece strongholdpieces_strongholdpiece = findAndCreatePieceFactory(StrongholdPieces.imposedPiece, structurepieceaccessor, randomsource, i, j, k, direction, l);
+                StrongholdPieces.StrongholdPiece strongholdpieces_p = findAndCreatePieceFactory(StrongholdPieces.imposedPiece, pieces, random, x, y, z, direction, genDepth);
 
                 StrongholdPieces.imposedPiece = null;
-                if (strongholdpieces_strongholdpiece != null) {
-                    return strongholdpieces_strongholdpiece;
+                if (strongholdpieces_p != null) {
+                    return strongholdpieces_p;
                 }
             }
 
@@ -142,55 +137,55 @@
 
             while (i1 < 5) {
                 ++i1;
-                int j1 = randomsource.nextInt(StrongholdPieces.totalWeight);
+                int j1 = random.nextInt(StrongholdPieces.totalWeight);
                 Iterator iterator = StrongholdPieces.currentPieces.iterator();
 
                 while (iterator.hasNext()) {
-                    StrongholdPieces.PieceWeight strongholdpieces_pieceweight = (StrongholdPieces.PieceWeight) iterator.next();
+                    StrongholdPieces.PieceWeight strongholdpieces_f = (StrongholdPieces.PieceWeight) iterator.next();
 
-                    j1 -= strongholdpieces_pieceweight.weight;
+                    j1 -= strongholdpieces_f.weight;
                     if (j1 < 0) {
-                        if (!strongholdpieces_pieceweight.doPlace(l) || strongholdpieces_pieceweight == strongholdpieces_startpiece.previousPiece) {
+                        if (!strongholdpieces_f.doPlace(genDepth) || strongholdpieces_f == piece.previousPiece) {
                             break;
                         }
 
-                        StrongholdPieces.StrongholdPiece strongholdpieces_strongholdpiece1 = findAndCreatePieceFactory(strongholdpieces_pieceweight.pieceClass, structurepieceaccessor, randomsource, i, j, k, direction, l);
+                        StrongholdPieces.StrongholdPiece strongholdpieces_p1 = findAndCreatePieceFactory(strongholdpieces_f.pieceClass, pieces, random, x, y, z, direction, genDepth);
 
-                        if (strongholdpieces_strongholdpiece1 != null) {
-                            ++strongholdpieces_pieceweight.placeCount;
-                            strongholdpieces_startpiece.previousPiece = strongholdpieces_pieceweight;
-                            if (!strongholdpieces_pieceweight.isValid()) {
-                                StrongholdPieces.currentPieces.remove(strongholdpieces_pieceweight);
+                        if (strongholdpieces_p1 != null) {
+                            ++strongholdpieces_f.placeCount;
+                            piece.previousPiece = strongholdpieces_f;
+                            if (!strongholdpieces_f.isValid()) {
+                                StrongholdPieces.currentPieces.remove(strongholdpieces_f);
                             }
 
-                            return strongholdpieces_strongholdpiece1;
+                            return strongholdpieces_p1;
                         }
                     }
                 }
             }
 
-            BoundingBox boundingbox = StrongholdPieces.FillerCorridor.findPieceBox(structurepieceaccessor, randomsource, i, j, k, direction);
+            BoundingBox structureboundingbox = StrongholdPieces.FillerCorridor.findPieceBox(pieces, random, x, y, z, direction);
 
-            if (boundingbox != null && boundingbox.minY() > 1) {
-                return new StrongholdPieces.FillerCorridor(l, boundingbox, direction);
+            if (structureboundingbox != null && structureboundingbox.minY() > 1) {
+                return new StrongholdPieces.FillerCorridor(genDepth, structureboundingbox, direction);
             } else {
                 return null;
             }
         }
     }
 
-    static StructurePiece generateAndAddPiece(StrongholdPieces.StartPiece strongholdpieces_startpiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, @Nullable Direction direction, int l) {
-        if (l > 50) {
+    static StructurePiece generateAndAddPiece(StrongholdPieces.StartPiece piece, StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, @Nullable Direction direction, int genDepth) {
+        if (genDepth > 50) {
             return null;
-        } else if (Math.abs(i - strongholdpieces_startpiece.getBoundingBox().minX()) <= 112 && Math.abs(k - strongholdpieces_startpiece.getBoundingBox().minZ()) <= 112) {
-            StrongholdPieces.StrongholdPiece strongholdpieces_strongholdpiece = generatePieceFromSmallDoor(strongholdpieces_startpiece, structurepieceaccessor, randomsource, i, j, k, direction, l + 1);
+        } else if (Math.abs(x - piece.getBoundingBox().minX()) <= 112 && Math.abs(z - piece.getBoundingBox().minZ()) <= 112) {
+            StrongholdPieces.StrongholdPiece strongholdpieces_p = generatePieceFromSmallDoor(piece, pieces, random, x, y, z, direction, genDepth + 1);
 
-            if (strongholdpieces_strongholdpiece != null) {
-                structurepieceaccessor.addPiece(strongholdpieces_strongholdpiece);
-                strongholdpieces_startpiece.pendingChildren.add(strongholdpieces_strongholdpiece);
+            if (strongholdpieces_p != null) {
+                pieces.addPiece(strongholdpieces_p);
+                piece.pendingChildren.add(strongholdpieces_p);
             }
 
-            return strongholdpieces_strongholdpiece;
+            return strongholdpieces_p;
         } else {
             return null;
         }
@@ -203,13 +198,13 @@
         public int placeCount;
         public final int maxPlaceCount;
 
-        public PieceWeight(Class<? extends StrongholdPieces.StrongholdPiece> oclass, int i, int j) {
-            this.pieceClass = oclass;
-            this.weight = i;
-            this.maxPlaceCount = j;
+        public PieceWeight(Class<? extends StrongholdPieces.StrongholdPiece> pieceClass, int weight, int maxPlaceCount) {
+            this.pieceClass = pieceClass;
+            this.weight = weight;
+            this.maxPlaceCount = maxPlaceCount;
         }
 
-        public boolean doPlace(int i) {
+        public boolean doPlace(int genDepth) {
             return this.maxPlaceCount == 0 || this.placeCount < this.maxPlaceCount;
         }
 
@@ -226,67 +221,64 @@
         private final boolean leftChild;
         private final boolean rightChild;
 
-        public Straight(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.STRONGHOLD_STRAIGHT, i, boundingbox);
-            this.setOrientation(direction);
-            this.entryDoor = this.randomSmallDoor(randomsource);
-            this.leftChild = randomsource.nextInt(2) == 0;
-            this.rightChild = randomsource.nextInt(2) == 0;
+        public Straight(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_STRAIGHT, genDepth, box);
+            this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
+            this.leftChild = random.nextInt(2) == 0;
+            this.rightChild = random.nextInt(2) == 0;
         }
 
-        public Straight(CompoundTag compoundtag) {
-            super(StructurePieceType.STRONGHOLD_STRAIGHT, compoundtag);
-            this.leftChild = compoundtag.getBoolean("Left");
-            this.rightChild = compoundtag.getBoolean("Right");
+        public Straight(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_STRAIGHT, tag);
+            this.leftChild = tag.getBoolean("Left");
+            this.rightChild = tag.getBoolean("Right");
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putBoolean("Left", this.leftChild);
-            compoundtag.putBoolean("Right", this.rightChild);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("Left", this.leftChild);
+            tag.putBoolean("Right", this.rightChild);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 1);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
             if (this.leftChild) {
-                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 2);
+                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) piece, pieces, random, 1, 2);
             }
 
             if (this.rightChild) {
-                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 2);
+                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) piece, pieces, random, 1, 2);
             }
 
         }
 
-        public static StrongholdPieces.Straight createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, -1, 0, 5, 5, 7, direction);
+        public static StrongholdPieces.Straight createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction direction, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 7, direction);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new StrongholdPieces.Straight(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.Straight(genDepth, random, structureboundingbox, direction) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 4, 4, 6, true, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, this.entryDoor, 1, 1, 0);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING, 1, 1, 6);
-            BlockState blockstate = (BlockState) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.EAST);
-            BlockState blockstate1 = (BlockState) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.WEST);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 4, 6, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 1, 0);
+            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.a.OPENING, 1, 1, 6);
+            IBlockData iblockdata = (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.EAST);
+            IBlockData iblockdata1 = (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.WEST);
 
-            this.maybeGenerateBlock(worldgenlevel, boundingbox, randomsource, 0.1F, 1, 2, 1, blockstate);
-            this.maybeGenerateBlock(worldgenlevel, boundingbox, randomsource, 0.1F, 3, 2, 1, blockstate1);
-            this.maybeGenerateBlock(worldgenlevel, boundingbox, randomsource, 0.1F, 1, 2, 5, blockstate);
-            this.maybeGenerateBlock(worldgenlevel, boundingbox, randomsource, 0.1F, 3, 2, 5, blockstate1);
+            this.maybeGenerateBlock(level, box, random, 0.1F, 1, 2, 1, iblockdata);
+            this.maybeGenerateBlock(level, box, random, 0.1F, 3, 2, 1, iblockdata1);
+            this.maybeGenerateBlock(level, box, random, 0.1F, 1, 2, 5, iblockdata);
+            this.maybeGenerateBlock(level, box, random, 0.1F, 3, 2, 5, iblockdata1);
             if (this.leftChild) {
-                this.generateBox(worldgenlevel, boundingbox, 0, 1, 2, 0, 3, 4, StrongholdPieces.Straight.CAVE_AIR, StrongholdPieces.Straight.CAVE_AIR, false);
+                this.generateBox(level, box, 0, 1, 2, 0, 3, 4, StrongholdPieces.Straight.CAVE_AIR, StrongholdPieces.Straight.CAVE_AIR, false);
             }
 
             if (this.rightChild) {
-                this.generateBox(worldgenlevel, boundingbox, 4, 1, 2, 4, 3, 4, StrongholdPieces.Straight.CAVE_AIR, StrongholdPieces.Straight.CAVE_AIR, false);
+                this.generateBox(level, box, 4, 1, 2, 4, 3, 4, StrongholdPieces.Straight.CAVE_AIR, StrongholdPieces.Straight.CAVE_AIR, false);
             }
 
         }
@@ -298,149 +290,143 @@
         protected static final int HEIGHT = 5;
         protected static final int DEPTH = 11;
 
-        public PrisonHall(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.STRONGHOLD_PRISON_HALL, i, boundingbox);
-            this.setOrientation(direction);
-            this.entryDoor = this.randomSmallDoor(randomsource);
+        public PrisonHall(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_PRISON_HALL, genDepth, box);
+            this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
         }
 
-        public PrisonHall(CompoundTag compoundtag) {
-            super(StructurePieceType.STRONGHOLD_PRISON_HALL, compoundtag);
+        public PrisonHall(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_PRISON_HALL, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 1);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
         }
 
-        public static StrongholdPieces.PrisonHall createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, -1, 0, 9, 5, 11, direction);
+        public static StrongholdPieces.PrisonHall createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 9, 5, 11, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new StrongholdPieces.PrisonHall(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.PrisonHall(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 8, 4, 10, true, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, this.entryDoor, 1, 1, 0);
-            this.generateBox(worldgenlevel, boundingbox, 1, 1, 10, 3, 3, 10, StrongholdPieces.PrisonHall.CAVE_AIR, StrongholdPieces.PrisonHall.CAVE_AIR, false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 1, 1, 4, 3, 1, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 4, 1, 3, 4, 3, 3, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 4, 1, 7, 4, 3, 7, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 4, 1, 9, 4, 3, 9, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 8, 4, 10, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 1, 0);
+            this.generateBox(level, box, 1, 1, 10, 3, 3, 10, StrongholdPieces.PrisonHall.CAVE_AIR, StrongholdPieces.PrisonHall.CAVE_AIR, false);
+            this.generateBox(level, box, 4, 1, 1, 4, 3, 1, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 1, 3, 4, 3, 3, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 1, 7, 4, 3, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 1, 9, 4, 3, 9, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
 
             for (int i = 1; i <= 3; ++i) {
-                this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, i, 4, boundingbox);
-                this.placeBlock(worldgenlevel, (BlockState) ((BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)).setValue(IronBarsBlock.EAST, true), 4, i, 5, boundingbox);
-                this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, i, 6, boundingbox);
-                this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 5, i, 5, boundingbox);
-                this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 6, i, 5, boundingbox);
-                this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 7, i, 5, boundingbox);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, i, 4, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)).setValue(IronBarsBlock.EAST, true), 4, i, 5, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, i, 6, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 5, i, 5, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 6, i, 5, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 7, i, 5, box);
             }
 
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, 3, 2, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, 3, 8, boundingbox);
-            BlockState blockstate = (BlockState) Blocks.IRON_DOOR.defaultBlockState().setValue(DoorBlock.FACING, Direction.WEST);
-            BlockState blockstate1 = (BlockState) ((BlockState) Blocks.IRON_DOOR.defaultBlockState().setValue(DoorBlock.FACING, Direction.WEST)).setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, 3, 2, box);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, 3, 8, box);
+            IBlockData iblockdata = (IBlockData) Blocks.IRON_DOOR.defaultBlockState().setValue(DoorBlock.FACING, Direction.WEST);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.IRON_DOOR.defaultBlockState().setValue(DoorBlock.FACING, Direction.WEST)).setValue(DoorBlock.HALF, BlockPropertyDoubleBlockHalf.UPPER);
 
-            this.placeBlock(worldgenlevel, blockstate, 4, 1, 2, boundingbox);
-            this.placeBlock(worldgenlevel, blockstate1, 4, 2, 2, boundingbox);
-            this.placeBlock(worldgenlevel, blockstate, 4, 1, 8, boundingbox);
-            this.placeBlock(worldgenlevel, blockstate1, 4, 2, 8, boundingbox);
+            this.placeBlock(level, iblockdata, 4, 1, 2, box);
+            this.placeBlock(level, iblockdata1, 4, 2, 2, box);
+            this.placeBlock(level, iblockdata, 4, 1, 8, box);
+            this.placeBlock(level, iblockdata1, 4, 2, 8, box);
         }
     }
 
-    public static class LeftTurn extends StrongholdPieces.Turn {
+    public static class LeftTurn extends StrongholdPieces.q {
 
-        public LeftTurn(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.STRONGHOLD_LEFT_TURN, i, boundingbox);
-            this.setOrientation(direction);
-            this.entryDoor = this.randomSmallDoor(randomsource);
+        public LeftTurn(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_LEFT_TURN, genDepth, box);
+            this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
         }
 
-        public LeftTurn(CompoundTag compoundtag) {
-            super(StructurePieceType.STRONGHOLD_LEFT_TURN, compoundtag);
+        public LeftTurn(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_LEFT_TURN, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            Direction direction = this.getOrientation();
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            Direction enumdirection = this.getOrientation();
 
-            if (direction != Direction.NORTH && direction != Direction.EAST) {
-                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 1);
+            if (enumdirection != Direction.NORTH && enumdirection != Direction.EAST) {
+                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
             } else {
-                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 1);
+                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
             }
 
         }
 
-        public static StrongholdPieces.LeftTurn createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, -1, 0, 5, 5, 5, direction);
+        public static StrongholdPieces.LeftTurn createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 5, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new StrongholdPieces.LeftTurn(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.LeftTurn(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 4, 4, 4, true, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, this.entryDoor, 1, 1, 0);
-            Direction direction = this.getOrientation();
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 4, 4, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 1, 0);
+            Direction enumdirection = this.getOrientation();
 
-            if (direction != Direction.NORTH && direction != Direction.EAST) {
-                this.generateBox(worldgenlevel, boundingbox, 4, 1, 1, 4, 3, 3, StrongholdPieces.LeftTurn.CAVE_AIR, StrongholdPieces.LeftTurn.CAVE_AIR, false);
+            if (enumdirection != Direction.NORTH && enumdirection != Direction.EAST) {
+                this.generateBox(level, box, 4, 1, 1, 4, 3, 3, StrongholdPieces.LeftTurn.CAVE_AIR, StrongholdPieces.LeftTurn.CAVE_AIR, false);
             } else {
-                this.generateBox(worldgenlevel, boundingbox, 0, 1, 1, 0, 3, 3, StrongholdPieces.LeftTurn.CAVE_AIR, StrongholdPieces.LeftTurn.CAVE_AIR, false);
+                this.generateBox(level, box, 0, 1, 1, 0, 3, 3, StrongholdPieces.LeftTurn.CAVE_AIR, StrongholdPieces.LeftTurn.CAVE_AIR, false);
             }
 
         }
     }
 
-    public static class RightTurn extends StrongholdPieces.Turn {
+    public static class RightTurn extends StrongholdPieces.q {
 
-        public RightTurn(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.STRONGHOLD_RIGHT_TURN, i, boundingbox);
-            this.setOrientation(direction);
-            this.entryDoor = this.randomSmallDoor(randomsource);
+        public RightTurn(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_RIGHT_TURN, genDepth, box);
+            this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
         }
 
-        public RightTurn(CompoundTag compoundtag) {
-            super(StructurePieceType.STRONGHOLD_RIGHT_TURN, compoundtag);
+        public RightTurn(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_RIGHT_TURN, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            Direction direction = this.getOrientation();
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            Direction enumdirection = this.getOrientation();
 
-            if (direction != Direction.NORTH && direction != Direction.EAST) {
-                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 1);
+            if (enumdirection != Direction.NORTH && enumdirection != Direction.EAST) {
+                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
             } else {
-                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 1);
+                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
             }
 
         }
 
-        public static StrongholdPieces.RightTurn createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, -1, 0, 5, 5, 5, direction);
+        public static StrongholdPieces.RightTurn createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 5, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new StrongholdPieces.RightTurn(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.RightTurn(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 4, 4, 4, true, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, this.entryDoor, 1, 1, 0);
-            Direction direction = this.getOrientation();
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 4, 4, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 1, 0);
+            Direction enumdirection = this.getOrientation();
 
-            if (direction != Direction.NORTH && direction != Direction.EAST) {
-                this.generateBox(worldgenlevel, boundingbox, 0, 1, 1, 0, 3, 3, StrongholdPieces.RightTurn.CAVE_AIR, StrongholdPieces.RightTurn.CAVE_AIR, false);
+            if (enumdirection != Direction.NORTH && enumdirection != Direction.EAST) {
+                this.generateBox(level, box, 0, 1, 1, 0, 3, 3, StrongholdPieces.RightTurn.CAVE_AIR, StrongholdPieces.RightTurn.CAVE_AIR, false);
             } else {
-                this.generateBox(worldgenlevel, boundingbox, 4, 1, 1, 4, 3, 3, StrongholdPieces.RightTurn.CAVE_AIR, StrongholdPieces.RightTurn.CAVE_AIR, false);
+                this.generateBox(level, box, 4, 1, 1, 4, 3, 3, StrongholdPieces.RightTurn.CAVE_AIR, StrongholdPieces.RightTurn.CAVE_AIR, false);
             }
 
         }
@@ -453,128 +439,125 @@
         protected static final int DEPTH = 11;
         protected final int type;
 
-        public RoomCrossing(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.STRONGHOLD_ROOM_CROSSING, i, boundingbox);
-            this.setOrientation(direction);
-            this.entryDoor = this.randomSmallDoor(randomsource);
-            this.type = randomsource.nextInt(5);
+        public RoomCrossing(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_ROOM_CROSSING, genDepth, box);
+            this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
+            this.type = random.nextInt(5);
         }
 
-        public RoomCrossing(CompoundTag compoundtag) {
-            super(StructurePieceType.STRONGHOLD_ROOM_CROSSING, compoundtag);
-            this.type = compoundtag.getInt("Type");
+        public RoomCrossing(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_ROOM_CROSSING, tag);
+            this.type = tag.getInt("Type");
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putInt("Type", this.type);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putInt("Type", this.type);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 4, 1);
-            this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 4);
-            this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 4);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 4, 1);
+            this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) piece, pieces, random, 1, 4);
+            this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) piece, pieces, random, 1, 4);
         }
 
-        public static StrongholdPieces.RoomCrossing createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -4, -1, 0, 11, 7, 11, direction);
+        public static StrongholdPieces.RoomCrossing createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -4, -1, 0, 11, 7, 11, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new StrongholdPieces.RoomCrossing(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.RoomCrossing(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 10, 6, 10, true, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, this.entryDoor, 4, 1, 0);
-            this.generateBox(worldgenlevel, boundingbox, 4, 1, 10, 6, 3, 10, StrongholdPieces.RoomCrossing.CAVE_AIR, StrongholdPieces.RoomCrossing.CAVE_AIR, false);
-            this.generateBox(worldgenlevel, boundingbox, 0, 1, 4, 0, 3, 6, StrongholdPieces.RoomCrossing.CAVE_AIR, StrongholdPieces.RoomCrossing.CAVE_AIR, false);
-            this.generateBox(worldgenlevel, boundingbox, 10, 1, 4, 10, 3, 6, StrongholdPieces.RoomCrossing.CAVE_AIR, StrongholdPieces.RoomCrossing.CAVE_AIR, false);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 10, 6, 10, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 4, 1, 0);
+            this.generateBox(level, box, 4, 1, 10, 6, 3, 10, StrongholdPieces.RoomCrossing.CAVE_AIR, StrongholdPieces.RoomCrossing.CAVE_AIR, false);
+            this.generateBox(level, box, 0, 1, 4, 0, 3, 6, StrongholdPieces.RoomCrossing.CAVE_AIR, StrongholdPieces.RoomCrossing.CAVE_AIR, false);
+            this.generateBox(level, box, 10, 1, 4, 10, 3, 6, StrongholdPieces.RoomCrossing.CAVE_AIR, StrongholdPieces.RoomCrossing.CAVE_AIR, false);
             int i;
 
             switch (this.type) {
                 case 0:
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 5, 1, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 5, 2, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 5, 3, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.WEST), 4, 3, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.EAST), 6, 3, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.SOUTH), 5, 3, 4, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.NORTH), 5, 3, 6, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 4, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 6, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 6, 1, 4, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 6, 1, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 6, 1, 6, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 5, 1, 4, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 5, 1, 6, boundingbox);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 5, 1, 5, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 5, 2, 5, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 5, 3, 5, box);
+                    this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.WEST), 4, 3, 5, box);
+                    this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.EAST), 6, 3, 5, box);
+                    this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.SOUTH), 5, 3, 4, box);
+                    this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.NORTH), 5, 3, 6, box);
+                    this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 4, box);
+                    this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 5, box);
+                    this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 6, box);
+                    this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 6, 1, 4, box);
+                    this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 6, 1, 5, box);
+                    this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 6, 1, 6, box);
+                    this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 5, 1, 4, box);
+                    this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 5, 1, 6, box);
                     break;
                 case 1:
                     for (i = 0; i < 5; ++i) {
-                        this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 3, 1, 3 + i, boundingbox);
-                        this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 7, 1, 3 + i, boundingbox);
-                        this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 3 + i, 1, 3, boundingbox);
-                        this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 3 + i, 1, 7, boundingbox);
+                        this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 1, 3 + i, box);
+                        this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 7, 1, 3 + i, box);
+                        this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3 + i, 1, 3, box);
+                        this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3 + i, 1, 7, box);
                     }
 
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 5, 1, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 5, 2, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 5, 3, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.WATER.defaultBlockState(), 5, 4, 5, boundingbox);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 5, 1, 5, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 5, 2, 5, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 5, 3, 5, box);
+                    this.placeBlock(level, Blocks.WATER.defaultBlockState(), 5, 4, 5, box);
                     break;
                 case 2:
                     for (i = 1; i <= 9; ++i) {
-                        this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 1, 3, i, boundingbox);
-                        this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 9, 3, i, boundingbox);
+                        this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 1, 3, i, box);
+                        this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 9, 3, i, box);
                     }
 
                     for (i = 1; i <= 9; ++i) {
-                        this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), i, 3, 1, boundingbox);
-                        this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), i, 3, 9, boundingbox);
+                        this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), i, 3, 1, box);
+                        this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), i, 3, 9, box);
                     }
 
-                    this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 5, 1, 4, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 5, 1, 6, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 5, 3, 4, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 5, 3, 6, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 4, 1, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 6, 1, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 4, 3, 5, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 6, 3, 5, boundingbox);
+                    this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 5, 1, 4, box);
+                    this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 5, 1, 6, box);
+                    this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 5, 3, 4, box);
+                    this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 5, 3, 6, box);
+                    this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 4, 1, 5, box);
+                    this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 6, 1, 5, box);
+                    this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 4, 3, 5, box);
+                    this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 6, 3, 5, box);
 
                     for (i = 1; i <= 3; ++i) {
-                        this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 4, i, 4, boundingbox);
-                        this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 6, i, 4, boundingbox);
-                        this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 4, i, 6, boundingbox);
-                        this.placeBlock(worldgenlevel, Blocks.COBBLESTONE.defaultBlockState(), 6, i, 6, boundingbox);
+                        this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 4, i, 4, box);
+                        this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 6, i, 4, box);
+                        this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 4, i, 6, box);
+                        this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 6, i, 6, box);
                     }
 
-                    this.placeBlock(worldgenlevel, Blocks.WALL_TORCH.defaultBlockState(), 5, 3, 5, boundingbox);
+                    this.placeBlock(level, Blocks.WALL_TORCH.defaultBlockState(), 5, 3, 5, box);
 
                     for (i = 2; i <= 8; ++i) {
-                        this.placeBlock(worldgenlevel, Blocks.OAK_PLANKS.defaultBlockState(), 2, 3, i, boundingbox);
-                        this.placeBlock(worldgenlevel, Blocks.OAK_PLANKS.defaultBlockState(), 3, 3, i, boundingbox);
+                        this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 2, 3, i, box);
+                        this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 3, 3, i, box);
                         if (i <= 3 || i >= 7) {
-                            this.placeBlock(worldgenlevel, Blocks.OAK_PLANKS.defaultBlockState(), 4, 3, i, boundingbox);
-                            this.placeBlock(worldgenlevel, Blocks.OAK_PLANKS.defaultBlockState(), 5, 3, i, boundingbox);
-                            this.placeBlock(worldgenlevel, Blocks.OAK_PLANKS.defaultBlockState(), 6, 3, i, boundingbox);
+                            this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 4, 3, i, box);
+                            this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 5, 3, i, box);
+                            this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 6, 3, i, box);
                         }
 
-                        this.placeBlock(worldgenlevel, Blocks.OAK_PLANKS.defaultBlockState(), 7, 3, i, boundingbox);
-                        this.placeBlock(worldgenlevel, Blocks.OAK_PLANKS.defaultBlockState(), 8, 3, i, boundingbox);
+                        this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 7, 3, i, box);
+                        this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 8, 3, i, box);
                     }
 
-                    BlockState blockstate = (BlockState) Blocks.LADDER.defaultBlockState().setValue(LadderBlock.FACING, Direction.WEST);
+                    IBlockData iblockdata = (IBlockData) Blocks.LADDER.defaultBlockState().setValue(LadderBlock.FACING, Direction.WEST);
 
-                    this.placeBlock(worldgenlevel, blockstate, 9, 1, 3, boundingbox);
-                    this.placeBlock(worldgenlevel, blockstate, 9, 2, 3, boundingbox);
-                    this.placeBlock(worldgenlevel, blockstate, 9, 3, 3, boundingbox);
-                    this.createChest(worldgenlevel, boundingbox, randomsource, 3, 4, 8, BuiltInLootTables.STRONGHOLD_CROSSING);
+                    this.placeBlock(level, iblockdata, 9, 1, 3, box);
+                    this.placeBlock(level, iblockdata, 9, 2, 3, box);
+                    this.placeBlock(level, iblockdata, 9, 3, 3, box);
+                    this.createChest(level, box, random, 3, 4, 8, BuiltInLootTables.STRONGHOLD_CROSSING);
             }
 
         }
@@ -586,44 +569,42 @@
         private static final int HEIGHT = 11;
         private static final int DEPTH = 8;
 
-        public StraightStairsDown(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.STRONGHOLD_STRAIGHT_STAIRS_DOWN, i, boundingbox);
-            this.setOrientation(direction);
-            this.entryDoor = this.randomSmallDoor(randomsource);
+        public StraightStairsDown(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_STRAIGHT_STAIRS_DOWN, genDepth, box);
+            this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
         }
 
-        public StraightStairsDown(CompoundTag compoundtag) {
-            super(StructurePieceType.STRONGHOLD_STRAIGHT_STAIRS_DOWN, compoundtag);
+        public StraightStairsDown(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_STRAIGHT_STAIRS_DOWN, tag);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 1);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
         }
 
-        public static StrongholdPieces.StraightStairsDown createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, -7, 0, 5, 11, 8, direction);
+        public static StrongholdPieces.StraightStairsDown createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -7, 0, 5, 11, 8, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new StrongholdPieces.StraightStairsDown(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.StraightStairsDown(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 4, 10, 7, true, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, this.entryDoor, 1, 7, 0);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING, 1, 1, 7);
-            BlockState blockstate = (BlockState) Blocks.COBBLESTONE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.SOUTH);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 10, 7, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 7, 0);
+            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.a.OPENING, 1, 1, 7);
+            IBlockData iblockdata = (IBlockData) Blocks.COBBLESTONE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.SOUTH);
 
             for (int i = 0; i < 6; ++i) {
-                this.placeBlock(worldgenlevel, blockstate, 1, 6 - i, 1 + i, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate, 2, 6 - i, 1 + i, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate, 3, 6 - i, 1 + i, boundingbox);
+                this.placeBlock(level, iblockdata, 1, 6 - i, 1 + i, box);
+                this.placeBlock(level, iblockdata, 2, 6 - i, 1 + i, box);
+                this.placeBlock(level, iblockdata, 3, 6 - i, 1 + i, box);
                 if (i < 5) {
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 1, 5 - i, 1 + i, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 2, 5 - i, 1 + i, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 3, 5 - i, 1 + i, boundingbox);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 5 - i, 1 + i, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 5 - i, 1 + i, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 5 - i, 1 + i, box);
                 }
             }
 
@@ -637,75 +618,72 @@
         private static final int DEPTH = 5;
         private final boolean isSource;
 
-        public StairsDown(StructurePieceType structurepiecetype, int i, int j, int k, Direction direction) {
-            super(structurepiecetype, i, makeBoundingBox(j, 64, k, direction, 5, 11, 5));
+        public StairsDown(StructurePieceType type, int genDepth, int x, int z, Direction orientation) {
+            super(type, genDepth, makeBoundingBox(x, 64, z, orientation, 5, 11, 5));
             this.isSource = true;
-            this.setOrientation(direction);
-            this.entryDoor = StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING;
+            this.setOrientation(orientation);
+            this.entryDoor = StrongholdPieces.StrongholdPiece.a.OPENING;
         }
 
-        public StairsDown(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.STRONGHOLD_STAIRS_DOWN, i, boundingbox);
+        public StairsDown(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_STAIRS_DOWN, genDepth, box);
             this.isSource = false;
-            this.setOrientation(direction);
-            this.entryDoor = this.randomSmallDoor(randomsource);
+            this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
         }
 
-        public StairsDown(StructurePieceType structurepiecetype, CompoundTag compoundtag) {
-            super(structurepiecetype, compoundtag);
-            this.isSource = compoundtag.getBoolean("Source");
+        public StairsDown(StructurePieceType type, CompoundTag tag) {
+            super(type, tag);
+            this.isSource = tag.getBoolean("Source");
         }
 
-        public StairsDown(CompoundTag compoundtag) {
-            this(StructurePieceType.STRONGHOLD_STAIRS_DOWN, compoundtag);
+        public StairsDown(CompoundTag tag) {
+            this(StructurePieceType.STRONGHOLD_STAIRS_DOWN, tag);
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putBoolean("Source", this.isSource);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("Source", this.isSource);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
             if (this.isSource) {
                 StrongholdPieces.imposedPiece = StrongholdPieces.FiveCrossing.class;
             }
 
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 1);
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
         }
 
-        public static StrongholdPieces.StairsDown createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, -7, 0, 5, 11, 5, direction);
+        public static StrongholdPieces.StairsDown createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -7, 0, 5, 11, 5, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new StrongholdPieces.StairsDown(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.StairsDown(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 4, 10, 4, true, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, this.entryDoor, 1, 7, 0);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING, 1, 1, 4);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 2, 6, 1, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 1, 5, 1, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 1, 6, 1, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 1, 5, 2, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 1, 4, 3, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 1, 5, 3, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 2, 4, 3, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 3, 3, 3, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 3, 4, 3, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 3, 3, 2, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 3, 2, 1, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 3, 3, 1, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 2, 2, 1, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 1, 1, 1, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 1, 2, 1, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 1, 1, 2, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 1, 1, 3, boundingbox);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 10, 4, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 7, 0);
+            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.a.OPENING, 1, 1, 4);
+            this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 6, 1, box);
+            this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 5, 1, box);
+            this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 1, 6, 1, box);
+            this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 5, 2, box);
+            this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 4, 3, box);
+            this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 1, 5, 3, box);
+            this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 4, 3, box);
+            this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 3, 3, box);
+            this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 3, 4, 3, box);
+            this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 3, 2, box);
+            this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 2, 1, box);
+            this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 3, 3, 1, box);
+            this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 2, 1, box);
+            this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 1, 1, box);
+            this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 1, 2, 1, box);
+            this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 1, 2, box);
+            this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 1, 1, 3, box);
         }
     }
 
@@ -719,107 +697,104 @@
         private final boolean rightLow;
         private final boolean rightHigh;
 
-        public FiveCrossing(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.STRONGHOLD_FIVE_CROSSING, i, boundingbox);
-            this.setOrientation(direction);
-            this.entryDoor = this.randomSmallDoor(randomsource);
-            this.leftLow = randomsource.nextBoolean();
-            this.leftHigh = randomsource.nextBoolean();
-            this.rightLow = randomsource.nextBoolean();
-            this.rightHigh = randomsource.nextInt(3) > 0;
+        public FiveCrossing(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_FIVE_CROSSING, genDepth, box);
+            this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
+            this.leftLow = random.nextBoolean();
+            this.leftHigh = random.nextBoolean();
+            this.rightLow = random.nextBoolean();
+            this.rightHigh = random.nextInt(3) > 0;
         }
 
-        public FiveCrossing(CompoundTag compoundtag) {
-            super(StructurePieceType.STRONGHOLD_FIVE_CROSSING, compoundtag);
-            this.leftLow = compoundtag.getBoolean("leftLow");
-            this.leftHigh = compoundtag.getBoolean("leftHigh");
-            this.rightLow = compoundtag.getBoolean("rightLow");
-            this.rightHigh = compoundtag.getBoolean("rightHigh");
+        public FiveCrossing(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_FIVE_CROSSING, tag);
+            this.leftLow = tag.getBoolean("leftLow");
+            this.leftHigh = tag.getBoolean("leftHigh");
+            this.rightLow = tag.getBoolean("rightLow");
+            this.rightHigh = tag.getBoolean("rightHigh");
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putBoolean("leftLow", this.leftLow);
-            compoundtag.putBoolean("leftHigh", this.leftHigh);
-            compoundtag.putBoolean("rightLow", this.rightLow);
-            compoundtag.putBoolean("rightHigh", this.rightHigh);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("leftLow", this.leftLow);
+            tag.putBoolean("leftHigh", this.leftHigh);
+            tag.putBoolean("rightLow", this.rightLow);
+            tag.putBoolean("rightHigh", this.rightHigh);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
             int i = 3;
             int j = 5;
-            Direction direction = this.getOrientation();
+            Direction enumdirection = this.getOrientation();
 
-            if (direction == Direction.WEST || direction == Direction.NORTH) {
+            if (enumdirection == Direction.WEST || enumdirection == Direction.NORTH) {
                 i = 8 - i;
                 j = 8 - j;
             }
 
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 5, 1);
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 5, 1);
             if (this.leftLow) {
-                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, i, 1);
+                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) piece, pieces, random, i, 1);
             }
 
             if (this.leftHigh) {
-                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, j, 7);
+                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) piece, pieces, random, j, 7);
             }
 
             if (this.rightLow) {
-                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, i, 1);
+                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) piece, pieces, random, i, 1);
             }
 
             if (this.rightHigh) {
-                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, j, 7);
+                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) piece, pieces, random, j, 7);
             }
 
         }
 
-        public static StrongholdPieces.FiveCrossing createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -4, -3, 0, 10, 9, 11, direction);
+        public static StrongholdPieces.FiveCrossing createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -4, -3, 0, 10, 9, 11, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new StrongholdPieces.FiveCrossing(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.FiveCrossing(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 9, 8, 10, true, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, this.entryDoor, 4, 3, 0);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 9, 8, 10, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 4, 3, 0);
             if (this.leftLow) {
-                this.generateBox(worldgenlevel, boundingbox, 0, 3, 1, 0, 5, 3, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
+                this.generateBox(level, box, 0, 3, 1, 0, 5, 3, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
             }
 
             if (this.rightLow) {
-                this.generateBox(worldgenlevel, boundingbox, 9, 3, 1, 9, 5, 3, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
+                this.generateBox(level, box, 9, 3, 1, 9, 5, 3, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
             }
 
             if (this.leftHigh) {
-                this.generateBox(worldgenlevel, boundingbox, 0, 5, 7, 0, 7, 9, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
+                this.generateBox(level, box, 0, 5, 7, 0, 7, 9, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
             }
 
             if (this.rightHigh) {
-                this.generateBox(worldgenlevel, boundingbox, 9, 5, 7, 9, 7, 9, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
+                this.generateBox(level, box, 9, 5, 7, 9, 7, 9, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
             }
 
-            this.generateBox(worldgenlevel, boundingbox, 5, 1, 10, 7, 3, 10, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 2, 1, 8, 2, 6, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 4, 1, 5, 4, 4, 9, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 8, 1, 5, 8, 4, 9, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 1, 4, 7, 3, 4, 9, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 1, 3, 5, 3, 3, 6, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 1, 3, 4, 3, 3, 4, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 1, 4, 6, 3, 4, 6, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 1, 7, 7, 1, 8, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 5, 1, 9, 7, 1, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 2, 7, 7, 2, 7, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 4, 5, 7, 4, 5, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 8, 5, 7, 8, 5, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 5, 5, 7, 7, 5, 9, (BlockState) Blocks.SMOOTH_STONE_SLAB.defaultBlockState().setValue(SlabBlock.TYPE, SlabType.DOUBLE), (BlockState) Blocks.SMOOTH_STONE_SLAB.defaultBlockState().setValue(SlabBlock.TYPE, SlabType.DOUBLE), false);
-            this.placeBlock(worldgenlevel, (BlockState) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.SOUTH), 6, 5, 6, boundingbox);
+            this.generateBox(level, box, 5, 1, 10, 7, 3, 10, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
+            this.generateBox(level, box, 1, 2, 1, 8, 2, 6, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 1, 5, 4, 4, 9, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 8, 1, 5, 8, 4, 9, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 1, 4, 7, 3, 4, 9, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 1, 3, 5, 3, 3, 6, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 1, 3, 4, 3, 3, 4, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 4, 6, 3, 4, 6, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 1, 7, 7, 1, 8, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 5, 1, 9, 7, 1, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 2, 7, 7, 2, 7, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 5, 7, 4, 5, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
+            this.generateBox(level, box, 8, 5, 7, 8, 5, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 5, 7, 7, 5, 9, (IBlockData) Blocks.SMOOTH_STONE_SLAB.defaultBlockState().setValue(SlabBlock.TYPE, SlabType.DOUBLE), (IBlockData) Blocks.SMOOTH_STONE_SLAB.defaultBlockState().setValue(SlabBlock.TYPE, SlabType.DOUBLE), false);
+            this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.SOUTH), 6, 5, 6, box);
         }
     }
 
@@ -830,55 +805,52 @@
         private static final int DEPTH = 7;
         private boolean hasPlacedChest;
 
-        public ChestCorridor(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.STRONGHOLD_CHEST_CORRIDOR, i, boundingbox);
-            this.setOrientation(direction);
-            this.entryDoor = this.randomSmallDoor(randomsource);
+        public ChestCorridor(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_CHEST_CORRIDOR, genDepth, box);
+            this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
         }
 
-        public ChestCorridor(CompoundTag compoundtag) {
-            super(StructurePieceType.STRONGHOLD_CHEST_CORRIDOR, compoundtag);
-            this.hasPlacedChest = compoundtag.getBoolean("Chest");
+        public ChestCorridor(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_CHEST_CORRIDOR, tag);
+            this.hasPlacedChest = tag.getBoolean("Chest");
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putBoolean("Chest", this.hasPlacedChest);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("Chest", this.hasPlacedChest);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) structurepiece, structurepieceaccessor, randomsource, 1, 1);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
         }
 
-        public static StrongholdPieces.ChestCorridor createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, -1, 0, 5, 5, 7, direction);
+        public static StrongholdPieces.ChestCorridor createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 7, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new StrongholdPieces.ChestCorridor(l, randomsource, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.ChestCorridor(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 4, 4, 6, true, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, this.entryDoor, 1, 1, 0);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING, 1, 1, 6);
-            this.generateBox(worldgenlevel, boundingbox, 3, 1, 2, 3, 1, 4, Blocks.STONE_BRICKS.defaultBlockState(), Blocks.STONE_BRICKS.defaultBlockState(), false);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 1, 1, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 1, 5, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 2, 2, boundingbox);
-            this.placeBlock(worldgenlevel, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 2, 4, boundingbox);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 4, 6, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 1, 0);
+            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.a.OPENING, 1, 1, 6);
+            this.generateBox(level, box, 3, 1, 2, 3, 1, 4, Blocks.STONE_BRICKS.defaultBlockState(), Blocks.STONE_BRICKS.defaultBlockState(), false);
+            this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 1, 1, box);
+            this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 1, 5, box);
+            this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 2, 2, box);
+            this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 2, 4, box);
 
             for (int i = 2; i <= 4; ++i) {
-                this.placeBlock(worldgenlevel, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 2, 1, i, boundingbox);
+                this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 2, 1, i, box);
             }
 
-            if (!this.hasPlacedChest && boundingbox.isInside(this.getWorldPos(3, 2, 3))) {
+            if (!this.hasPlacedChest && box.isInside(this.getWorldPos(3, 2, 3))) {
                 this.hasPlacedChest = true;
-                this.createChest(worldgenlevel, boundingbox, randomsource, 3, 2, 3, BuiltInLootTables.STRONGHOLD_CORRIDOR);
+                this.createChest(level, box, random, 3, 2, 3, BuiltInLootTables.STRONGHOLD_CORRIDOR);
             }
 
         }
@@ -892,50 +864,48 @@
         protected static final int DEPTH = 15;
         private final boolean isTall;
 
-        public Library(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.STRONGHOLD_LIBRARY, i, boundingbox);
-            this.setOrientation(direction);
-            this.entryDoor = this.randomSmallDoor(randomsource);
-            this.isTall = boundingbox.getYSpan() > 6;
+        public Library(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_LIBRARY, genDepth, box);
+            this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
+            this.isTall = box.getYSpan() > 6;
         }
 
-        public Library(CompoundTag compoundtag) {
-            super(StructurePieceType.STRONGHOLD_LIBRARY, compoundtag);
-            this.isTall = compoundtag.getBoolean("Tall");
+        public Library(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_LIBRARY, tag);
+            this.isTall = tag.getBoolean("Tall");
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putBoolean("Tall", this.isTall);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("Tall", this.isTall);
         }
 
-        public static StrongholdPieces.Library createPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -4, -1, 0, 14, 11, 15, direction);
+        public static StrongholdPieces.Library createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -4, -1, 0, 14, 11, 15, orientation);
 
-            if (!isOkBox(boundingbox) || structurepieceaccessor.findCollisionPiece(boundingbox) != null) {
-                boundingbox = BoundingBox.orientBox(i, j, k, -4, -1, 0, 14, 6, 15, direction);
-                if (!isOkBox(boundingbox) || structurepieceaccessor.findCollisionPiece(boundingbox) != null) {
+            if (!isOkBox(structureboundingbox) || pieces.findCollisionPiece(structureboundingbox) != null) {
+                structureboundingbox = BoundingBox.orientBox(x, y, z, -4, -1, 0, 14, 6, 15, orientation);
+                if (!isOkBox(structureboundingbox) || pieces.findCollisionPiece(structureboundingbox) != null) {
                     return null;
                 }
             }
 
-            return new StrongholdPieces.Library(l, randomsource, boundingbox, direction);
+            return new StrongholdPieces.Library(genDepth, random, structureboundingbox, orientation);
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
             byte b0 = 11;
 
             if (!this.isTall) {
                 b0 = 6;
             }
 
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 13, b0 - 1, 14, true, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, this.entryDoor, 4, 1, 0);
-            this.generateMaybeBox(worldgenlevel, boundingbox, randomsource, 0.07F, 2, 1, 1, 11, 4, 13, Blocks.COBWEB.defaultBlockState(), Blocks.COBWEB.defaultBlockState(), false, false);
+            this.generateBox(level, box, 0, 0, 0, 13, b0 - 1, 14, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 4, 1, 0);
+            this.generateMaybeBox(level, box, random, 0.07F, 2, 1, 1, 11, 4, 13, Blocks.COBWEB.defaultBlockState(), Blocks.COBWEB.defaultBlockState(), false, false);
             boolean flag = true;
             boolean flag1 = true;
 
@@ -943,99 +913,99 @@
 
             for (i = 1; i <= 13; ++i) {
                 if ((i - 1) % 4 == 0) {
-                    this.generateBox(worldgenlevel, boundingbox, 1, 1, i, 1, 4, i, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                    this.generateBox(worldgenlevel, boundingbox, 12, 1, i, 12, 4, i, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.EAST), 2, 3, i, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.WEST), 11, 3, i, boundingbox);
+                    this.generateBox(level, box, 1, 1, i, 1, 4, i, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                    this.generateBox(level, box, 12, 1, i, 12, 4, i, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                    this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.EAST), 2, 3, i, box);
+                    this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.WEST), 11, 3, i, box);
                     if (this.isTall) {
-                        this.generateBox(worldgenlevel, boundingbox, 1, 6, i, 1, 9, i, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                        this.generateBox(worldgenlevel, boundingbox, 12, 6, i, 12, 9, i, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                        this.generateBox(level, box, 1, 6, i, 1, 9, i, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                        this.generateBox(level, box, 12, 6, i, 12, 9, i, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
                     }
                 } else {
-                    this.generateBox(worldgenlevel, boundingbox, 1, 1, i, 1, 4, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
-                    this.generateBox(worldgenlevel, boundingbox, 12, 1, i, 12, 4, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                    this.generateBox(level, box, 1, 1, i, 1, 4, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                    this.generateBox(level, box, 12, 1, i, 12, 4, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
                     if (this.isTall) {
-                        this.generateBox(worldgenlevel, boundingbox, 1, 6, i, 1, 9, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
-                        this.generateBox(worldgenlevel, boundingbox, 12, 6, i, 12, 9, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                        this.generateBox(level, box, 1, 6, i, 1, 9, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                        this.generateBox(level, box, 12, 6, i, 12, 9, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
                     }
                 }
             }
 
             for (i = 3; i < 12; i += 2) {
-                this.generateBox(worldgenlevel, boundingbox, 3, 1, i, 4, 3, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
-                this.generateBox(worldgenlevel, boundingbox, 6, 1, i, 7, 3, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
-                this.generateBox(worldgenlevel, boundingbox, 9, 1, i, 10, 3, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                this.generateBox(level, box, 3, 1, i, 4, 3, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                this.generateBox(level, box, 6, 1, i, 7, 3, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                this.generateBox(level, box, 9, 1, i, 10, 3, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
             }
 
             if (this.isTall) {
-                this.generateBox(worldgenlevel, boundingbox, 1, 5, 1, 3, 5, 13, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                this.generateBox(worldgenlevel, boundingbox, 10, 5, 1, 12, 5, 13, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                this.generateBox(worldgenlevel, boundingbox, 4, 5, 1, 9, 5, 2, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                this.generateBox(worldgenlevel, boundingbox, 4, 5, 12, 9, 5, 13, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                this.placeBlock(worldgenlevel, Blocks.OAK_PLANKS.defaultBlockState(), 9, 5, 11, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.OAK_PLANKS.defaultBlockState(), 8, 5, 11, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.OAK_PLANKS.defaultBlockState(), 9, 5, 10, boundingbox);
-                BlockState blockstate = (BlockState) ((BlockState) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
-                BlockState blockstate1 = (BlockState) ((BlockState) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+                this.generateBox(level, box, 1, 5, 1, 3, 5, 13, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                this.generateBox(level, box, 10, 5, 1, 12, 5, 13, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                this.generateBox(level, box, 4, 5, 1, 9, 5, 2, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                this.generateBox(level, box, 4, 5, 12, 9, 5, 13, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 9, 5, 11, box);
+                this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 8, 5, 11, box);
+                this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 9, 5, 10, box);
+                IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
+                IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
 
-                this.generateBox(worldgenlevel, boundingbox, 3, 6, 3, 3, 6, 11, blockstate1, blockstate1, false);
-                this.generateBox(worldgenlevel, boundingbox, 10, 6, 3, 10, 6, 9, blockstate1, blockstate1, false);
-                this.generateBox(worldgenlevel, boundingbox, 4, 6, 2, 9, 6, 2, blockstate, blockstate, false);
-                this.generateBox(worldgenlevel, boundingbox, 4, 6, 12, 7, 6, 12, blockstate, blockstate, false);
-                this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 3, 6, 2, boundingbox);
-                this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.EAST, true), 3, 6, 12, boundingbox);
-                this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.WEST, true), 10, 6, 2, boundingbox);
+                this.generateBox(level, box, 3, 6, 3, 3, 6, 11, iblockdata1, iblockdata1, false);
+                this.generateBox(level, box, 10, 6, 3, 10, 6, 9, iblockdata1, iblockdata1, false);
+                this.generateBox(level, box, 4, 6, 2, 9, 6, 2, iblockdata, iblockdata, false);
+                this.generateBox(level, box, 4, 6, 12, 7, 6, 12, iblockdata, iblockdata, false);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 3, 6, 2, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.EAST, true), 3, 6, 12, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.WEST, true), 10, 6, 2, box);
 
                 for (int j = 0; j <= 2; ++j) {
-                    this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.WEST, true), 8 + j, 6, 12 - j, boundingbox);
+                    this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.WEST, true), 8 + j, 6, 12 - j, box);
                     if (j != 2) {
-                        this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 8 + j, 6, 11 - j, boundingbox);
+                        this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 8 + j, 6, 11 - j, box);
                     }
                 }
 
-                BlockState blockstate2 = (BlockState) Blocks.LADDER.defaultBlockState().setValue(LadderBlock.FACING, Direction.SOUTH);
+                IBlockData iblockdata2 = (IBlockData) Blocks.LADDER.defaultBlockState().setValue(LadderBlock.FACING, Direction.SOUTH);
 
-                this.placeBlock(worldgenlevel, blockstate2, 10, 1, 13, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate2, 10, 2, 13, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate2, 10, 3, 13, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate2, 10, 4, 13, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate2, 10, 5, 13, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate2, 10, 6, 13, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate2, 10, 7, 13, boundingbox);
+                this.placeBlock(level, iblockdata2, 10, 1, 13, box);
+                this.placeBlock(level, iblockdata2, 10, 2, 13, box);
+                this.placeBlock(level, iblockdata2, 10, 3, 13, box);
+                this.placeBlock(level, iblockdata2, 10, 4, 13, box);
+                this.placeBlock(level, iblockdata2, 10, 5, 13, box);
+                this.placeBlock(level, iblockdata2, 10, 6, 13, box);
+                this.placeBlock(level, iblockdata2, 10, 7, 13, box);
                 boolean flag2 = true;
                 boolean flag3 = true;
-                BlockState blockstate3 = (BlockState) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true);
+                IBlockData iblockdata3 = (IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true);
 
-                this.placeBlock(worldgenlevel, blockstate3, 6, 9, 7, boundingbox);
-                BlockState blockstate4 = (BlockState) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true);
+                this.placeBlock(level, iblockdata3, 6, 9, 7, box);
+                IBlockData iblockdata4 = (IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true);
 
-                this.placeBlock(worldgenlevel, blockstate4, 7, 9, 7, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate3, 6, 8, 7, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate4, 7, 8, 7, boundingbox);
-                BlockState blockstate5 = (BlockState) ((BlockState) blockstate1.setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
+                this.placeBlock(level, iblockdata4, 7, 9, 7, box);
+                this.placeBlock(level, iblockdata3, 6, 8, 7, box);
+                this.placeBlock(level, iblockdata4, 7, 8, 7, box);
+                IBlockData iblockdata5 = (IBlockData) ((IBlockData) iblockdata1.setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
 
-                this.placeBlock(worldgenlevel, blockstate5, 6, 7, 7, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate5, 7, 7, 7, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate3, 5, 7, 7, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate4, 8, 7, 7, boundingbox);
-                this.placeBlock(worldgenlevel, (BlockState) blockstate3.setValue(FenceBlock.NORTH, true), 6, 7, 6, boundingbox);
-                this.placeBlock(worldgenlevel, (BlockState) blockstate3.setValue(FenceBlock.SOUTH, true), 6, 7, 8, boundingbox);
-                this.placeBlock(worldgenlevel, (BlockState) blockstate4.setValue(FenceBlock.NORTH, true), 7, 7, 6, boundingbox);
-                this.placeBlock(worldgenlevel, (BlockState) blockstate4.setValue(FenceBlock.SOUTH, true), 7, 7, 8, boundingbox);
-                BlockState blockstate6 = Blocks.TORCH.defaultBlockState();
+                this.placeBlock(level, iblockdata5, 6, 7, 7, box);
+                this.placeBlock(level, iblockdata5, 7, 7, 7, box);
+                this.placeBlock(level, iblockdata3, 5, 7, 7, box);
+                this.placeBlock(level, iblockdata4, 8, 7, 7, box);
+                this.placeBlock(level, (IBlockData) iblockdata3.setValue(FenceBlock.NORTH, true), 6, 7, 6, box);
+                this.placeBlock(level, (IBlockData) iblockdata3.setValue(FenceBlock.SOUTH, true), 6, 7, 8, box);
+                this.placeBlock(level, (IBlockData) iblockdata4.setValue(FenceBlock.NORTH, true), 7, 7, 6, box);
+                this.placeBlock(level, (IBlockData) iblockdata4.setValue(FenceBlock.SOUTH, true), 7, 7, 8, box);
+                IBlockData iblockdata6 = Blocks.TORCH.defaultBlockState();
 
-                this.placeBlock(worldgenlevel, blockstate6, 5, 8, 7, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate6, 8, 8, 7, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate6, 6, 8, 6, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate6, 6, 8, 8, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate6, 7, 8, 6, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate6, 7, 8, 8, boundingbox);
+                this.placeBlock(level, iblockdata6, 5, 8, 7, box);
+                this.placeBlock(level, iblockdata6, 8, 8, 7, box);
+                this.placeBlock(level, iblockdata6, 6, 8, 6, box);
+                this.placeBlock(level, iblockdata6, 6, 8, 8, box);
+                this.placeBlock(level, iblockdata6, 7, 8, 6, box);
+                this.placeBlock(level, iblockdata6, 7, 8, 8, box);
             }
 
-            this.createChest(worldgenlevel, boundingbox, randomsource, 3, 3, 5, BuiltInLootTables.STRONGHOLD_LIBRARY);
+            this.createChest(level, box, random, 3, 3, 5, BuiltInLootTables.STRONGHOLD_LIBRARY);
             if (this.isTall) {
-                this.placeBlock(worldgenlevel, StrongholdPieces.Library.CAVE_AIR, 12, 9, 1, boundingbox);
-                this.createChest(worldgenlevel, boundingbox, randomsource, 12, 8, 1, BuiltInLootTables.STRONGHOLD_LIBRARY);
+                this.placeBlock(level, StrongholdPieces.Library.CAVE_AIR, 12, 9, 1, box);
+                this.createChest(level, box, random, 12, 8, 1, BuiltInLootTables.STRONGHOLD_LIBRARY);
             }
 
         }
@@ -1048,132 +1018,134 @@
         protected static final int DEPTH = 16;
         private boolean hasPlacedSpawner;
 
-        public PortalRoom(int i, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.STRONGHOLD_PORTAL_ROOM, i, boundingbox);
-            this.setOrientation(direction);
+        public PortalRoom(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_PORTAL_ROOM, genDepth, box);
+            this.setOrientation(orientation);
         }
 
-        public PortalRoom(CompoundTag compoundtag) {
-            super(StructurePieceType.STRONGHOLD_PORTAL_ROOM, compoundtag);
-            this.hasPlacedSpawner = compoundtag.getBoolean("Mob");
+        public PortalRoom(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_PORTAL_ROOM, tag);
+            this.hasPlacedSpawner = tag.getBoolean("Mob");
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putBoolean("Mob", this.hasPlacedSpawner);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("Mob", this.hasPlacedSpawner);
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
-            if (structurepiece != null) {
-                ((StrongholdPieces.StartPiece) structurepiece).portalRoomPiece = this;
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            if (piece != null) {
+                ((StrongholdPieces.StartPiece) piece).portalRoomPiece = this;
             }
 
         }
 
-        public static StrongholdPieces.PortalRoom createPiece(StructurePieceAccessor structurepieceaccessor, int i, int j, int k, Direction direction, int l) {
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -4, -1, 0, 11, 8, 16, direction);
+        public static StrongholdPieces.PortalRoom createPiece(StructurePieceAccessor pieces, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -4, -1, 0, 11, 8, 16, orientation);
 
-            return isOkBox(boundingbox) && structurepieceaccessor.findCollisionPiece(boundingbox) == null ? new StrongholdPieces.PortalRoom(l, boundingbox, direction) : null;
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.PortalRoom(genDepth, structureboundingbox, orientation) : null;
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 10, 7, 15, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(worldgenlevel, randomsource, boundingbox, StrongholdPieces.StrongholdPiece.SmallDoorType.GRATES, 4, 1, 0);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 10, 7, 15, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.a.GRATES, 4, 1, 0);
             boolean flag = true;
 
-            this.generateBox(worldgenlevel, boundingbox, 1, 6, 1, 1, 6, 14, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 9, 6, 1, 9, 6, 14, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 2, 6, 1, 8, 6, 2, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 2, 6, 14, 8, 6, 14, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 1, 1, 1, 2, 1, 4, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 8, 1, 1, 9, 1, 4, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 1, 1, 1, 1, 1, 3, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 9, 1, 1, 9, 1, 3, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
-            this.generateBox(worldgenlevel, boundingbox, 3, 1, 8, 7, 1, 12, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 4, 1, 9, 6, 1, 11, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
-            BlockState blockstate = (BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true);
-            BlockState blockstate1 = (BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true);
+            this.generateBox(level, box, 1, 6, 1, 1, 6, 14, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 9, 6, 1, 9, 6, 14, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 2, 6, 1, 8, 6, 2, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 2, 6, 14, 8, 6, 14, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 1, 1, 1, 2, 1, 4, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 8, 1, 1, 9, 1, 4, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 1, 1, 1, 1, 1, 3, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
+            this.generateBox(level, box, 9, 1, 1, 9, 1, 3, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
+            this.generateBox(level, box, 3, 1, 8, 7, 1, 12, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 1, 9, 6, 1, 11, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true);
 
             int i;
 
             for (i = 3; i < 14; i += 2) {
-                this.generateBox(worldgenlevel, boundingbox, 0, 3, i, 0, 4, i, blockstate, blockstate, false);
-                this.generateBox(worldgenlevel, boundingbox, 10, 3, i, 10, 4, i, blockstate, blockstate, false);
+                this.generateBox(level, box, 0, 3, i, 0, 4, i, iblockdata, iblockdata, false);
+                this.generateBox(level, box, 10, 3, i, 10, 4, i, iblockdata, iblockdata, false);
             }
 
             for (i = 2; i < 9; i += 2) {
-                this.generateBox(worldgenlevel, boundingbox, i, 3, 15, i, 4, 15, blockstate1, blockstate1, false);
+                this.generateBox(level, box, i, 3, 15, i, 4, 15, iblockdata1, iblockdata1, false);
             }
 
-            BlockState blockstate2 = (BlockState) Blocks.STONE_BRICK_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.NORTH);
+            IBlockData iblockdata2 = (IBlockData) Blocks.STONE_BRICK_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.NORTH);
 
-            this.generateBox(worldgenlevel, boundingbox, 4, 1, 5, 6, 1, 7, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 4, 2, 6, 6, 2, 7, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(worldgenlevel, boundingbox, 4, 3, 7, 6, 3, 7, false, randomsource, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 1, 5, 6, 1, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 2, 6, 6, 2, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 3, 7, 6, 3, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
 
             for (int j = 4; j <= 6; ++j) {
-                this.placeBlock(worldgenlevel, blockstate2, j, 1, 4, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate2, j, 2, 5, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate2, j, 3, 6, boundingbox);
+                this.placeBlock(level, iblockdata2, j, 1, 4, box);
+                this.placeBlock(level, iblockdata2, j, 2, 5, box);
+                this.placeBlock(level, iblockdata2, j, 3, 6, box);
             }
 
-            BlockState blockstate3 = (BlockState) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.NORTH);
-            BlockState blockstate4 = (BlockState) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.SOUTH);
-            BlockState blockstate5 = (BlockState) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.EAST);
-            BlockState blockstate6 = (BlockState) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.WEST);
+            IBlockData iblockdata3 = (IBlockData) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.NORTH);
+            IBlockData iblockdata4 = (IBlockData) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.SOUTH);
+            IBlockData iblockdata5 = (IBlockData) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.EAST);
+            IBlockData iblockdata6 = (IBlockData) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.WEST);
             boolean flag1 = true;
             boolean[] aboolean = new boolean[12];
 
             for (int k = 0; k < aboolean.length; ++k) {
-                aboolean[k] = randomsource.nextFloat() > 0.9F;
+                aboolean[k] = random.nextFloat() > 0.9F;
                 flag1 &= aboolean[k];
             }
 
-            this.placeBlock(worldgenlevel, (BlockState) blockstate3.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[0]), 4, 3, 8, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) blockstate3.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[1]), 5, 3, 8, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) blockstate3.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[2]), 6, 3, 8, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) blockstate4.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[3]), 4, 3, 12, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) blockstate4.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[4]), 5, 3, 12, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) blockstate4.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[5]), 6, 3, 12, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) blockstate5.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[6]), 3, 3, 9, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) blockstate5.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[7]), 3, 3, 10, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) blockstate5.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[8]), 3, 3, 11, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) blockstate6.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[9]), 7, 3, 9, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) blockstate6.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[10]), 7, 3, 10, boundingbox);
-            this.placeBlock(worldgenlevel, (BlockState) blockstate6.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[11]), 7, 3, 11, boundingbox);
+            this.placeBlock(level, (IBlockData) iblockdata3.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[0]), 4, 3, 8, box);
+            this.placeBlock(level, (IBlockData) iblockdata3.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[1]), 5, 3, 8, box);
+            this.placeBlock(level, (IBlockData) iblockdata3.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[2]), 6, 3, 8, box);
+            this.placeBlock(level, (IBlockData) iblockdata4.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[3]), 4, 3, 12, box);
+            this.placeBlock(level, (IBlockData) iblockdata4.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[4]), 5, 3, 12, box);
+            this.placeBlock(level, (IBlockData) iblockdata4.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[5]), 6, 3, 12, box);
+            this.placeBlock(level, (IBlockData) iblockdata5.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[6]), 3, 3, 9, box);
+            this.placeBlock(level, (IBlockData) iblockdata5.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[7]), 3, 3, 10, box);
+            this.placeBlock(level, (IBlockData) iblockdata5.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[8]), 3, 3, 11, box);
+            this.placeBlock(level, (IBlockData) iblockdata6.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[9]), 7, 3, 9, box);
+            this.placeBlock(level, (IBlockData) iblockdata6.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[10]), 7, 3, 10, box);
+            this.placeBlock(level, (IBlockData) iblockdata6.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[11]), 7, 3, 11, box);
             if (flag1) {
-                BlockState blockstate7 = Blocks.END_PORTAL.defaultBlockState();
+                IBlockData iblockdata7 = Blocks.END_PORTAL.defaultBlockState();
 
-                this.placeBlock(worldgenlevel, blockstate7, 4, 3, 9, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate7, 5, 3, 9, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate7, 6, 3, 9, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate7, 4, 3, 10, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate7, 5, 3, 10, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate7, 6, 3, 10, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate7, 4, 3, 11, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate7, 5, 3, 11, boundingbox);
-                this.placeBlock(worldgenlevel, blockstate7, 6, 3, 11, boundingbox);
+                this.placeBlock(level, iblockdata7, 4, 3, 9, box);
+                this.placeBlock(level, iblockdata7, 5, 3, 9, box);
+                this.placeBlock(level, iblockdata7, 6, 3, 9, box);
+                this.placeBlock(level, iblockdata7, 4, 3, 10, box);
+                this.placeBlock(level, iblockdata7, 5, 3, 10, box);
+                this.placeBlock(level, iblockdata7, 6, 3, 10, box);
+                this.placeBlock(level, iblockdata7, 4, 3, 11, box);
+                this.placeBlock(level, iblockdata7, 5, 3, 11, box);
+                this.placeBlock(level, iblockdata7, 6, 3, 11, box);
             }
 
             if (!this.hasPlacedSpawner) {
-                BlockPos.MutableBlockPos blockpos_mutableblockpos = this.getWorldPos(5, 3, 6);
+                BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(5, 3, 6);
 
-                if (boundingbox.isInside(blockpos_mutableblockpos)) {
+                if (box.isInside(blockposition_mutableblockposition)) {
                     this.hasPlacedSpawner = true;
-                    worldgenlevel.setBlock(blockpos_mutableblockpos, Blocks.SPAWNER.defaultBlockState(), 2);
-                    BlockEntity blockentity = worldgenlevel.getBlockEntity(blockpos_mutableblockpos);
+                    // CraftBukkit start
+                    /*
+                    generatoraccessseed.setBlock(blockposition_mutableblockposition, Blocks.SPAWNER.defaultBlockState(), 2);
+                    TileEntity tileentity = generatoraccessseed.getBlockEntity(blockposition_mutableblockposition);
 
-                    if (blockentity instanceof SpawnerBlockEntity) {
-                        SpawnerBlockEntity spawnerblockentity = (SpawnerBlockEntity) blockentity;
+                    if (tileentity instanceof TileEntityMobSpawner) {
+                        TileEntityMobSpawner tileentitymobspawner = (TileEntityMobSpawner) tileentity;
 
-                        spawnerblockentity.setEntityId(EntityType.SILVERFISH, randomsource);
+                        tileentitymobspawner.setEntityId(EntityTypes.SILVERFISH, randomsource);
                     }
+                    */
+                    placeCraftSpawner(level, blockposition_mutableblockposition, org.bukkit.entity.EntityType.SILVERFISH, 2);
+                    // CraftBukkit end
                 }
             }
 
@@ -1182,99 +1154,98 @@
 
     private abstract static class StrongholdPiece extends StructurePiece {
 
-        protected StrongholdPieces.StrongholdPiece.SmallDoorType entryDoor;
+        protected StrongholdPieces.StrongholdPiece.a entryDoor;
 
-        protected StrongholdPiece(StructurePieceType structurepiecetype, int i, BoundingBox boundingbox) {
-            super(structurepiecetype, i, boundingbox);
-            this.entryDoor = StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING;
+        protected StrongholdPiece(StructurePieceType type, int genDepth, BoundingBox boundingBox) {
+            super(type, genDepth, boundingBox);
+            this.entryDoor = StrongholdPieces.StrongholdPiece.a.OPENING;
         }
 
-        public StrongholdPiece(StructurePieceType structurepiecetype, CompoundTag compoundtag) {
-            super(structurepiecetype, compoundtag);
-            this.entryDoor = StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING;
-            this.entryDoor = StrongholdPieces.StrongholdPiece.SmallDoorType.valueOf(compoundtag.getString("EntryDoor"));
+        public StrongholdPiece(StructurePieceType type, CompoundTag tag) {
+            super(type, tag);
+            this.entryDoor = StrongholdPieces.StrongholdPiece.a.OPENING;
+            this.entryDoor = StrongholdPieces.StrongholdPiece.a.valueOf(tag.getString("EntryDoor"));
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            compoundtag.putString("EntryDoor", this.entryDoor.name());
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            tag.putString("EntryDoor", this.entryDoor.name());
         }
 
-        protected void generateSmallDoor(WorldGenLevel worldgenlevel, RandomSource randomsource, BoundingBox boundingbox, StrongholdPieces.StrongholdPiece.SmallDoorType strongholdpieces_strongholdpiece_smalldoortype, int i, int j, int k) {
-            switch (strongholdpieces_strongholdpiece_smalldoortype) {
+        protected void generateSmallDoor(WorldGenLevel level, RandomSource random, BoundingBox box, StrongholdPieces.StrongholdPiece.a type, int x, int y, int z) {
+            switch (type) {
                 case OPENING:
-                    this.generateBox(worldgenlevel, boundingbox, i, j, k, i + 3 - 1, j + 3 - 1, k, StrongholdPieces.StrongholdPiece.CAVE_AIR, StrongholdPieces.StrongholdPiece.CAVE_AIR, false);
+                    this.generateBox(level, box, x, y, z, x + 3 - 1, y + 3 - 1, z, StrongholdPieces.StrongholdPiece.CAVE_AIR, StrongholdPieces.StrongholdPiece.CAVE_AIR, false);
                     break;
                 case WOOD_DOOR:
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i, j, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i, j + 1, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i, j + 2, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i + 1, j + 2, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i + 2, j + 2, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i + 2, j + 1, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i + 2, j, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.OAK_DOOR.defaultBlockState(), i + 1, j, k, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.OAK_DOOR.defaultBlockState().setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), i + 1, j + 1, k, boundingbox);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x, y, z, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x, y + 1, z, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x, y + 2, z, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x + 1, y + 2, z, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x + 2, y + 2, z, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x + 2, y + 1, z, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x + 2, y, z, box);
+                    this.placeBlock(level, Blocks.OAK_DOOR.defaultBlockState(), x + 1, y, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.OAK_DOOR.defaultBlockState().setValue(DoorBlock.HALF, BlockPropertyDoubleBlockHalf.UPPER), x + 1, y + 1, z, box);
                     break;
                 case GRATES:
-                    this.placeBlock(worldgenlevel, Blocks.CAVE_AIR.defaultBlockState(), i + 1, j, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.CAVE_AIR.defaultBlockState(), i + 1, j + 1, k, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true), i, j, k, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true), i, j + 1, k, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), i, j + 2, k, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), i + 1, j + 2, k, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) ((BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), i + 2, j + 2, k, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true), i + 2, j + 1, k, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true), i + 2, j, k, boundingbox);
+                    this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), x + 1, y, z, box);
+                    this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), x + 1, y + 1, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true), x, y, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true), x, y + 1, z, box);
+                    this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), x, y + 2, z, box);
+                    this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), x + 1, y + 2, z, box);
+                    this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), x + 2, y + 2, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true), x + 2, y + 1, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true), x + 2, y, z, box);
                     break;
                 case IRON_DOOR:
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i, j, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i, j + 1, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i, j + 2, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i + 1, j + 2, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i + 2, j + 2, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i + 2, j + 1, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), i + 2, j, k, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.IRON_DOOR.defaultBlockState(), i + 1, j, k, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.IRON_DOOR.defaultBlockState().setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), i + 1, j + 1, k, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.STONE_BUTTON.defaultBlockState().setValue(ButtonBlock.FACING, Direction.NORTH), i + 2, j + 1, k + 1, boundingbox);
-                    this.placeBlock(worldgenlevel, (BlockState) Blocks.STONE_BUTTON.defaultBlockState().setValue(ButtonBlock.FACING, Direction.SOUTH), i + 2, j + 1, k - 1, boundingbox);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x, y, z, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x, y + 1, z, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x, y + 2, z, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x + 1, y + 2, z, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x + 2, y + 2, z, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x + 2, y + 1, z, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x + 2, y, z, box);
+                    this.placeBlock(level, Blocks.IRON_DOOR.defaultBlockState(), x + 1, y, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.IRON_DOOR.defaultBlockState().setValue(DoorBlock.HALF, BlockPropertyDoubleBlockHalf.UPPER), x + 1, y + 1, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.STONE_BUTTON.defaultBlockState().setValue(ButtonBlock.FACING, Direction.NORTH), x + 2, y + 1, z + 1, box);
+                    this.placeBlock(level, (IBlockData) Blocks.STONE_BUTTON.defaultBlockState().setValue(ButtonBlock.FACING, Direction.SOUTH), x + 2, y + 1, z - 1, box);
             }
 
         }
 
-        protected StrongholdPieces.StrongholdPiece.SmallDoorType randomSmallDoor(RandomSource randomsource) {
-            int i = randomsource.nextInt(5);
+        protected StrongholdPieces.StrongholdPiece.a randomSmallDoor(RandomSource random) {
+            int i = random.nextInt(5);
 
             switch (i) {
                 case 0:
                 case 1:
                 default:
-                    return StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING;
+                    return StrongholdPieces.StrongholdPiece.a.OPENING;
                 case 2:
-                    return StrongholdPieces.StrongholdPiece.SmallDoorType.WOOD_DOOR;
+                    return StrongholdPieces.StrongholdPiece.a.WOOD_DOOR;
                 case 3:
-                    return StrongholdPieces.StrongholdPiece.SmallDoorType.GRATES;
+                    return StrongholdPieces.StrongholdPiece.a.GRATES;
                 case 4:
-                    return StrongholdPieces.StrongholdPiece.SmallDoorType.IRON_DOOR;
+                    return StrongholdPieces.StrongholdPiece.a.IRON_DOOR;
             }
         }
 
         @Nullable
-        protected StructurePiece generateSmallDoorChildForward(StrongholdPieces.StartPiece strongholdpieces_startpiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j) {
-            Direction direction = this.getOrientation();
+        protected StructurePiece generateSmallDoorChildForward(StrongholdPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int offsetX, int offsetY) {
+            Direction enumdirection = this.getOrientation();
 
-            if (direction != null) {
-                switch (direction) {
+            if (enumdirection != null) {
+                switch (enumdirection) {
                     case NORTH:
-                        return StrongholdPieces.generateAndAddPiece(strongholdpieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + i, this.boundingBox.minY() + j, this.boundingBox.minZ() - 1, direction, this.getGenDepth());
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() - 1, enumdirection, this.getGenDepth());
                     case SOUTH:
-                        return StrongholdPieces.generateAndAddPiece(strongholdpieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + i, this.boundingBox.minY() + j, this.boundingBox.maxZ() + 1, direction, this.getGenDepth());
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.maxZ() + 1, enumdirection, this.getGenDepth());
                     case WEST:
-                        return StrongholdPieces.generateAndAddPiece(strongholdpieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY() + j, this.boundingBox.minZ() + i, direction, this.getGenDepth());
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, enumdirection, this.getGenDepth());
                     case EAST:
-                        return StrongholdPieces.generateAndAddPiece(strongholdpieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY() + j, this.boundingBox.minZ() + i, direction, this.getGenDepth());
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, enumdirection, this.getGenDepth());
                 }
             }
 
@@ -1282,19 +1253,19 @@
         }
 
         @Nullable
-        protected StructurePiece generateSmallDoorChildLeft(StrongholdPieces.StartPiece strongholdpieces_startpiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j) {
-            Direction direction = this.getOrientation();
+        protected StructurePiece generateSmallDoorChildLeft(StrongholdPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int offsetY, int offsetX) {
+            Direction enumdirection = this.getOrientation();
 
-            if (direction != null) {
-                switch (direction) {
+            if (enumdirection != null) {
+                switch (enumdirection) {
                     case NORTH:
-                        return StrongholdPieces.generateAndAddPiece(strongholdpieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY() + i, this.boundingBox.minZ() + j, Direction.WEST, this.getGenDepth());
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, Direction.WEST, this.getGenDepth());
                     case SOUTH:
-                        return StrongholdPieces.generateAndAddPiece(strongholdpieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY() + i, this.boundingBox.minZ() + j, Direction.WEST, this.getGenDepth());
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, Direction.WEST, this.getGenDepth());
                     case WEST:
-                        return StrongholdPieces.generateAndAddPiece(strongholdpieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + j, this.boundingBox.minY() + i, this.boundingBox.minZ() - 1, Direction.NORTH, this.getGenDepth());
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() - 1, Direction.NORTH, this.getGenDepth());
                     case EAST:
-                        return StrongholdPieces.generateAndAddPiece(strongholdpieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + j, this.boundingBox.minY() + i, this.boundingBox.minZ() - 1, Direction.NORTH, this.getGenDepth());
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() - 1, Direction.NORTH, this.getGenDepth());
                 }
             }
 
@@ -1302,34 +1273,34 @@
         }
 
         @Nullable
-        protected StructurePiece generateSmallDoorChildRight(StrongholdPieces.StartPiece strongholdpieces_startpiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j) {
-            Direction direction = this.getOrientation();
+        protected StructurePiece generateSmallDoorChildRight(StrongholdPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int offsetY, int offsetX) {
+            Direction enumdirection = this.getOrientation();
 
-            if (direction != null) {
-                switch (direction) {
+            if (enumdirection != null) {
+                switch (enumdirection) {
                     case NORTH:
-                        return StrongholdPieces.generateAndAddPiece(strongholdpieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY() + i, this.boundingBox.minZ() + j, Direction.EAST, this.getGenDepth());
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, Direction.EAST, this.getGenDepth());
                     case SOUTH:
-                        return StrongholdPieces.generateAndAddPiece(strongholdpieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY() + i, this.boundingBox.minZ() + j, Direction.EAST, this.getGenDepth());
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, Direction.EAST, this.getGenDepth());
                     case WEST:
-                        return StrongholdPieces.generateAndAddPiece(strongholdpieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + j, this.boundingBox.minY() + i, this.boundingBox.maxZ() + 1, Direction.SOUTH, this.getGenDepth());
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.maxZ() + 1, Direction.SOUTH, this.getGenDepth());
                     case EAST:
-                        return StrongholdPieces.generateAndAddPiece(strongholdpieces_startpiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + j, this.boundingBox.minY() + i, this.boundingBox.maxZ() + 1, Direction.SOUTH, this.getGenDepth());
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.maxZ() + 1, Direction.SOUTH, this.getGenDepth());
                 }
             }
 
             return null;
         }
 
-        protected static boolean isOkBox(BoundingBox boundingbox) {
-            return boundingbox != null && boundingbox.minY() > 10;
+        protected static boolean isOkBox(BoundingBox box) {
+            return box != null && box.minY() > 10;
         }
 
-        protected static enum SmallDoorType {
+        protected static enum a {
 
             OPENING, WOOD_DOOR, GRATES, IRON_DOOR;
 
-            private SmallDoorType() {}
+            private a() {}
         }
     }
 
@@ -1340,16 +1311,15 @@
         public StrongholdPieces.PortalRoom portalRoomPiece;
         public final List<StructurePiece> pendingChildren = Lists.newArrayList();
 
-        public StartPiece(RandomSource randomsource, int i, int j) {
-            super(StructurePieceType.STRONGHOLD_START, 0, i, j, getRandomHorizontalDirection(randomsource));
+        public StartPiece(RandomSource random, int x, int z) {
+            super(StructurePieceType.STRONGHOLD_START, 0, x, z, getRandomHorizontalDirection(random));
         }
 
-        public StartPiece(CompoundTag compoundtag) {
-            super(StructurePieceType.STRONGHOLD_START, compoundtag);
+        public StartPiece(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_START, tag);
         }
 
         @Override
-        @Override
         public BlockPos getLocatorPosition() {
             return this.portalRoomPiece != null ? this.portalRoomPiece.getLocatorPosition() : super.getLocatorPosition();
         }
@@ -1359,37 +1329,36 @@
 
         private final int steps;
 
-        public FillerCorridor(int i, BoundingBox boundingbox, Direction direction) {
-            super(StructurePieceType.STRONGHOLD_FILLER_CORRIDOR, i, boundingbox);
-            this.setOrientation(direction);
-            this.steps = direction != Direction.NORTH && direction != Direction.SOUTH ? boundingbox.getXSpan() : boundingbox.getZSpan();
+        public FillerCorridor(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_FILLER_CORRIDOR, genDepth, box);
+            this.setOrientation(orientation);
+            this.steps = orientation != Direction.NORTH && orientation != Direction.SOUTH ? box.getXSpan() : box.getZSpan();
         }
 
-        public FillerCorridor(CompoundTag compoundtag) {
-            super(StructurePieceType.STRONGHOLD_FILLER_CORRIDOR, compoundtag);
-            this.steps = compoundtag.getInt("Steps");
+        public FillerCorridor(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_FILLER_CORRIDOR, tag);
+            this.steps = tag.getInt("Steps");
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putInt("Steps", this.steps);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putInt("Steps", this.steps);
         }
 
-        public static BoundingBox findPieceBox(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction) {
+        public static BoundingBox findPieceBox(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation) {
             boolean flag = true;
-            BoundingBox boundingbox = BoundingBox.orientBox(i, j, k, -1, -1, 0, 5, 5, 4, direction);
-            StructurePiece structurepiece = structurepieceaccessor.findCollisionPiece(boundingbox);
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 4, orientation);
+            StructurePiece structurepiece = pieces.findCollisionPiece(structureboundingbox);
 
             if (structurepiece == null) {
                 return null;
             } else {
-                if (structurepiece.getBoundingBox().minY() == boundingbox.minY()) {
+                if (structurepiece.getBoundingBox().minY() == structureboundingbox.minY()) {
                     for (int l = 2; l >= 1; --l) {
-                        boundingbox = BoundingBox.orientBox(i, j, k, -1, -1, 0, 5, 5, l, direction);
-                        if (!structurepiece.getBoundingBox().intersects(boundingbox)) {
-                            return BoundingBox.orientBox(i, j, k, -1, -1, 0, 5, 5, l + 1, direction);
+                        structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, l, orientation);
+                        if (!structurepiece.getBoundingBox().intersects(structureboundingbox)) {
+                            return BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, l + 1, orientation);
                         }
                     }
                 }
@@ -1399,42 +1368,40 @@
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
             for (int i = 0; i < this.steps; ++i) {
-                this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 0, 0, i, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 1, 0, i, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 2, 0, i, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 3, 0, i, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 4, 0, i, boundingbox);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 0, 0, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 0, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 0, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 0, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 4, 0, i, box);
 
                 for (int j = 1; j <= 3; ++j) {
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 0, j, i, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.CAVE_AIR.defaultBlockState(), 1, j, i, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.CAVE_AIR.defaultBlockState(), 2, j, i, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.CAVE_AIR.defaultBlockState(), 3, j, i, boundingbox);
-                    this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 4, j, i, boundingbox);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 0, j, i, box);
+                    this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), 1, j, i, box);
+                    this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), 2, j, i, box);
+                    this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), 3, j, i, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 4, j, i, box);
                 }
 
-                this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 0, 4, i, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 1, 4, i, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 2, 4, i, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 3, 4, i, boundingbox);
-                this.placeBlock(worldgenlevel, Blocks.STONE_BRICKS.defaultBlockState(), 4, 4, i, boundingbox);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 0, 4, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 4, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 4, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 4, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 4, 4, i, box);
             }
 
         }
     }
 
-    private static class SmoothStoneSelector extends StructurePiece.BlockSelector {
+    private static class k extends StructurePiece.BlockSelector {
 
-        SmoothStoneSelector() {}
+        k() {}
 
         @Override
-        @Override
-        public void next(RandomSource randomsource, int i, int j, int k, boolean flag) {
-            if (flag) {
-                float f = randomsource.nextFloat();
+        public void next(RandomSource random, int x, int y, int z, boolean wall) {
+            if (wall) {
+                float f = random.nextFloat();
 
                 if (f < 0.2F) {
                     this.next = Blocks.CRACKED_STONE_BRICKS.defaultBlockState();
@@ -1452,18 +1419,18 @@
         }
     }
 
-    public abstract static class Turn extends StrongholdPieces.StrongholdPiece {
+    public abstract static class q extends StrongholdPieces.StrongholdPiece {
 
         protected static final int WIDTH = 5;
         protected static final int HEIGHT = 5;
         protected static final int DEPTH = 5;
 
-        protected Turn(StructurePieceType structurepiecetype, int i, BoundingBox boundingbox) {
-            super(structurepiecetype, i, boundingbox);
+        protected q(StructurePieceType type, int genDepth, BoundingBox boundingBox) {
+            super(type, genDepth, boundingBox);
         }
 
-        public Turn(StructurePieceType structurepiecetype, CompoundTag compoundtag) {
-            super(structurepiecetype, compoundtag);
+        public q(StructurePieceType type, CompoundTag tag) {
+            super(type, tag);
         }
     }
 }
