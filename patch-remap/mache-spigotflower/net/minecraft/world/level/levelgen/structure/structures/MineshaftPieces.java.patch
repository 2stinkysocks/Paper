--- a/net/minecraft/world/level/levelgen/structure/structures/MineshaftPieces.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/MineshaftPieces.java
@@ -12,10 +12,10 @@
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.Tag;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.BiomeTags;
 import net.minecraft.util.RandomSource;
-import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.vehicle.MinecartChest;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
@@ -29,9 +29,7 @@
 import net.minecraft.world.level.block.FenceBlock;
 import net.minecraft.world.level.block.RailBlock;
 import net.minecraft.world.level.block.WallTorchBlock;
-import net.minecraft.world.level.block.entity.BlockEntity;
-import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.properties.RailShape;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
@@ -55,43 +53,43 @@
 
     public MineshaftPieces() {}
 
-    private static MineshaftPieces.MineShaftPiece createRandomShaftPiece(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, @Nullable Direction direction, int l, MineshaftStructure.Type mineshaftstructure_type) {
-        int i1 = randomsource.nextInt(100);
-        BoundingBox boundingbox;
+    private static MineshaftPieces.MineShaftPiece createRandomShaftPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, @Nullable Direction orientation, int genDepth, MineshaftStructure.Type type) {
+        int i1 = random.nextInt(100);
+        BoundingBox structureboundingbox;
 
         if (i1 >= 80) {
-            boundingbox = MineshaftPieces.MineShaftCrossing.findCrossing(structurepieceaccessor, randomsource, i, j, k, direction);
-            if (boundingbox != null) {
-                return new MineshaftPieces.MineShaftCrossing(l, boundingbox, direction, mineshaftstructure_type);
+            structureboundingbox = MineshaftPieces.MineShaftCrossing.findCrossing(pieces, random, x, y, z, orientation);
+            if (structureboundingbox != null) {
+                return new MineshaftPieces.MineShaftCrossing(genDepth, structureboundingbox, orientation, type);
             }
         } else if (i1 >= 70) {
-            boundingbox = MineshaftPieces.MineShaftStairs.findStairs(structurepieceaccessor, randomsource, i, j, k, direction);
-            if (boundingbox != null) {
-                return new MineshaftPieces.MineShaftStairs(l, boundingbox, direction, mineshaftstructure_type);
+            structureboundingbox = MineshaftPieces.MineShaftStairs.findStairs(pieces, random, x, y, z, orientation);
+            if (structureboundingbox != null) {
+                return new MineshaftPieces.MineShaftStairs(genDepth, structureboundingbox, orientation, type);
             }
         } else {
-            boundingbox = MineshaftPieces.MineShaftCorridor.findCorridorSize(structurepieceaccessor, randomsource, i, j, k, direction);
-            if (boundingbox != null) {
-                return new MineshaftPieces.MineShaftCorridor(l, randomsource, boundingbox, direction, mineshaftstructure_type);
+            structureboundingbox = MineshaftPieces.MineShaftCorridor.findCorridorSize(pieces, random, x, y, z, orientation);
+            if (structureboundingbox != null) {
+                return new MineshaftPieces.MineShaftCorridor(genDepth, random, structureboundingbox, orientation, type);
             }
         }
 
         return null;
     }
 
-    static MineshaftPieces.MineShaftPiece generateAndAddPiece(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction, int l) {
-        if (l > 8) {
+    static MineshaftPieces.MineShaftPiece generateAndAddPiece(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction direction, int genDepth) {
+        if (genDepth > 8) {
             return null;
-        } else if (Math.abs(i - structurepiece.getBoundingBox().minX()) <= 80 && Math.abs(k - structurepiece.getBoundingBox().minZ()) <= 80) {
-            MineshaftStructure.Type mineshaftstructure_type = ((MineshaftPieces.MineShaftPiece) structurepiece).type;
-            MineshaftPieces.MineShaftPiece mineshaftpieces_mineshaftpiece = createRandomShaftPiece(structurepieceaccessor, randomsource, i, j, k, direction, l + 1, mineshaftstructure_type);
+        } else if (Math.abs(x - piece.getBoundingBox().minX()) <= 80 && Math.abs(z - piece.getBoundingBox().minZ()) <= 80) {
+            MineshaftStructure.Type mineshaftstructure_a = ((MineshaftPieces.MineShaftPiece) piece).type;
+            MineshaftPieces.MineShaftPiece mineshaftpieces_c = createRandomShaftPiece(pieces, random, x, y, z, direction, genDepth + 1, mineshaftstructure_a);
 
-            if (mineshaftpieces_mineshaftpiece != null) {
-                structurepieceaccessor.addPiece(mineshaftpieces_mineshaftpiece);
-                mineshaftpieces_mineshaftpiece.addChildren(structurepiece, structurepieceaccessor, randomsource);
+            if (mineshaftpieces_c != null) {
+                pieces.addPiece(mineshaftpieces_c);
+                mineshaftpieces_c.addChildren(piece, pieces, random);
             }
 
-            return mineshaftpieces_mineshaftpiece;
+            return mineshaftpieces_c;
         } else {
             return null;
         }
@@ -102,140 +100,137 @@
         private final Direction direction;
         private final boolean isTwoFloored;
 
-        public MineShaftCrossing(CompoundTag compoundtag) {
-            super(StructurePieceType.MINE_SHAFT_CROSSING, compoundtag);
-            this.isTwoFloored = compoundtag.getBoolean("tf");
-            this.direction = Direction.from2DDataValue(compoundtag.getInt("D"));
+        public MineShaftCrossing(CompoundTag tag) {
+            super(StructurePieceType.MINE_SHAFT_CROSSING, tag);
+            this.isTwoFloored = tag.getBoolean("tf");
+            this.direction = Direction.from2DDataValue(tag.getInt("D"));
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putBoolean("tf", this.isTwoFloored);
-            compoundtag.putInt("D", this.direction.get2DDataValue());
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("tf", this.isTwoFloored);
+            tag.putInt("D", this.direction.get2DDataValue());
         }
 
-        public MineShaftCrossing(int i, BoundingBox boundingbox, @Nullable Direction direction, MineshaftStructure.Type mineshaftstructure_type) {
-            super(StructurePieceType.MINE_SHAFT_CROSSING, i, mineshaftstructure_type, boundingbox);
+        public MineShaftCrossing(int genDepth, BoundingBox boundingBox, @Nullable Direction direction, MineshaftStructure.Type type) {
+            super(StructurePieceType.MINE_SHAFT_CROSSING, genDepth, type, boundingBox);
             this.direction = direction;
-            this.isTwoFloored = boundingbox.getYSpan() > 3;
+            this.isTwoFloored = boundingBox.getYSpan() > 3;
         }
 
         @Nullable
-        public static BoundingBox findCrossing(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction) {
+        public static BoundingBox findCrossing(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction direction) {
             byte b0;
 
-            if (randomsource.nextInt(4) == 0) {
+            if (random.nextInt(4) == 0) {
                 b0 = 6;
             } else {
                 b0 = 2;
             }
 
-            BoundingBox boundingbox;
+            BoundingBox structureboundingbox;
 
             switch (direction) {
                 case NORTH:
                 default:
-                    boundingbox = new BoundingBox(-1, 0, -4, 3, b0, 0);
+                    structureboundingbox = new BoundingBox(-1, 0, -4, 3, b0, 0);
                     break;
                 case SOUTH:
-                    boundingbox = new BoundingBox(-1, 0, 0, 3, b0, 4);
+                    structureboundingbox = new BoundingBox(-1, 0, 0, 3, b0, 4);
                     break;
                 case WEST:
-                    boundingbox = new BoundingBox(-4, 0, -1, 0, b0, 3);
+                    structureboundingbox = new BoundingBox(-4, 0, -1, 0, b0, 3);
                     break;
                 case EAST:
-                    boundingbox = new BoundingBox(0, 0, -1, 4, b0, 3);
+                    structureboundingbox = new BoundingBox(0, 0, -1, 4, b0, 3);
             }
 
-            boundingbox.move(i, j, k);
-            return structurepieceaccessor.findCollisionPiece(boundingbox) != null ? null : boundingbox;
+            structureboundingbox.move(x, y, z);
+            return pieces.findCollisionPiece(structureboundingbox) != null ? null : structureboundingbox;
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
             int i = this.getGenDepth();
 
             switch (this.direction) {
                 case NORTH:
                 default:
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() - 1, Direction.NORTH, i);
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, Direction.WEST, i);
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, Direction.EAST, i);
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() - 1, Direction.NORTH, i);
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, Direction.WEST, i);
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, Direction.EAST, i);
                     break;
                 case SOUTH:
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, Direction.WEST, i);
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, Direction.EAST, i);
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, Direction.WEST, i);
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, Direction.EAST, i);
                     break;
                 case WEST:
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() - 1, Direction.NORTH, i);
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, Direction.WEST, i);
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() - 1, Direction.NORTH, i);
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, Direction.WEST, i);
                     break;
                 case EAST:
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() - 1, Direction.NORTH, i);
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, Direction.EAST, i);
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() - 1, Direction.NORTH, i);
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, Direction.EAST, i);
             }
 
             if (this.isTwoFloored) {
-                if (randomsource.nextBoolean()) {
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + 1, this.boundingBox.minY() + 3 + 1, this.boundingBox.minZ() - 1, Direction.NORTH, i);
+                if (random.nextBoolean()) {
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() + 1, this.boundingBox.minY() + 3 + 1, this.boundingBox.minZ() - 1, Direction.NORTH, i);
                 }
 
-                if (randomsource.nextBoolean()) {
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY() + 3 + 1, this.boundingBox.minZ() + 1, Direction.WEST, i);
+                if (random.nextBoolean()) {
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() + 3 + 1, this.boundingBox.minZ() + 1, Direction.WEST, i);
                 }
 
-                if (randomsource.nextBoolean()) {
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY() + 3 + 1, this.boundingBox.minZ() + 1, Direction.EAST, i);
+                if (random.nextBoolean()) {
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() + 3 + 1, this.boundingBox.minZ() + 1, Direction.EAST, i);
                 }
 
-                if (randomsource.nextBoolean()) {
-                    MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + 1, this.boundingBox.minY() + 3 + 1, this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
+                if (random.nextBoolean()) {
+                    MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() + 1, this.boundingBox.minY() + 3 + 1, this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
                 }
             }
 
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            if (!this.isInInvalidLocation(worldgenlevel, boundingbox)) {
-                BlockState blockstate = this.type.getPlanksState();
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            if (!this.isInInvalidLocation(level, box)) {
+                IBlockData iblockdata = this.type.getPlanksState();
 
                 if (this.isTwoFloored) {
-                    this.generateBox(worldgenlevel, boundingbox, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.minZ(), this.boundingBox.maxX() - 1, this.boundingBox.minY() + 3 - 1, this.boundingBox.maxZ(), MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
-                    this.generateBox(worldgenlevel, boundingbox, this.boundingBox.minX(), this.boundingBox.minY(), this.boundingBox.minZ() + 1, this.boundingBox.maxX(), this.boundingBox.minY() + 3 - 1, this.boundingBox.maxZ() - 1, MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
-                    this.generateBox(worldgenlevel, boundingbox, this.boundingBox.minX() + 1, this.boundingBox.maxY() - 2, this.boundingBox.minZ(), this.boundingBox.maxX() - 1, this.boundingBox.maxY(), this.boundingBox.maxZ(), MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
-                    this.generateBox(worldgenlevel, boundingbox, this.boundingBox.minX(), this.boundingBox.maxY() - 2, this.boundingBox.minZ() + 1, this.boundingBox.maxX(), this.boundingBox.maxY(), this.boundingBox.maxZ() - 1, MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
-                    this.generateBox(worldgenlevel, boundingbox, this.boundingBox.minX() + 1, this.boundingBox.minY() + 3, this.boundingBox.minZ() + 1, this.boundingBox.maxX() - 1, this.boundingBox.minY() + 3, this.boundingBox.maxZ() - 1, MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
+                    this.generateBox(level, box, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.minZ(), this.boundingBox.maxX() - 1, this.boundingBox.minY() + 3 - 1, this.boundingBox.maxZ(), MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
+                    this.generateBox(level, box, this.boundingBox.minX(), this.boundingBox.minY(), this.boundingBox.minZ() + 1, this.boundingBox.maxX(), this.boundingBox.minY() + 3 - 1, this.boundingBox.maxZ() - 1, MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
+                    this.generateBox(level, box, this.boundingBox.minX() + 1, this.boundingBox.maxY() - 2, this.boundingBox.minZ(), this.boundingBox.maxX() - 1, this.boundingBox.maxY(), this.boundingBox.maxZ(), MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
+                    this.generateBox(level, box, this.boundingBox.minX(), this.boundingBox.maxY() - 2, this.boundingBox.minZ() + 1, this.boundingBox.maxX(), this.boundingBox.maxY(), this.boundingBox.maxZ() - 1, MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
+                    this.generateBox(level, box, this.boundingBox.minX() + 1, this.boundingBox.minY() + 3, this.boundingBox.minZ() + 1, this.boundingBox.maxX() - 1, this.boundingBox.minY() + 3, this.boundingBox.maxZ() - 1, MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
                 } else {
-                    this.generateBox(worldgenlevel, boundingbox, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.minZ(), this.boundingBox.maxX() - 1, this.boundingBox.maxY(), this.boundingBox.maxZ(), MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
-                    this.generateBox(worldgenlevel, boundingbox, this.boundingBox.minX(), this.boundingBox.minY(), this.boundingBox.minZ() + 1, this.boundingBox.maxX(), this.boundingBox.maxY(), this.boundingBox.maxZ() - 1, MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
+                    this.generateBox(level, box, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.minZ(), this.boundingBox.maxX() - 1, this.boundingBox.maxY(), this.boundingBox.maxZ(), MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
+                    this.generateBox(level, box, this.boundingBox.minX(), this.boundingBox.minY(), this.boundingBox.minZ() + 1, this.boundingBox.maxX(), this.boundingBox.maxY(), this.boundingBox.maxZ() - 1, MineshaftPieces.MineShaftCrossing.CAVE_AIR, MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
                 }
 
-                this.placeSupportPillar(worldgenlevel, boundingbox, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, this.boundingBox.maxY());
-                this.placeSupportPillar(worldgenlevel, boundingbox, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.maxZ() - 1, this.boundingBox.maxY());
-                this.placeSupportPillar(worldgenlevel, boundingbox, this.boundingBox.maxX() - 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, this.boundingBox.maxY());
-                this.placeSupportPillar(worldgenlevel, boundingbox, this.boundingBox.maxX() - 1, this.boundingBox.minY(), this.boundingBox.maxZ() - 1, this.boundingBox.maxY());
+                this.placeSupportPillar(level, box, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, this.boundingBox.maxY());
+                this.placeSupportPillar(level, box, this.boundingBox.minX() + 1, this.boundingBox.minY(), this.boundingBox.maxZ() - 1, this.boundingBox.maxY());
+                this.placeSupportPillar(level, box, this.boundingBox.maxX() - 1, this.boundingBox.minY(), this.boundingBox.minZ() + 1, this.boundingBox.maxY());
+                this.placeSupportPillar(level, box, this.boundingBox.maxX() - 1, this.boundingBox.minY(), this.boundingBox.maxZ() - 1, this.boundingBox.maxY());
                 int i = this.boundingBox.minY() - 1;
 
                 for (int j = this.boundingBox.minX(); j <= this.boundingBox.maxX(); ++j) {
                     for (int k = this.boundingBox.minZ(); k <= this.boundingBox.maxZ(); ++k) {
-                        this.setPlanksBlock(worldgenlevel, boundingbox, blockstate, j, i, k);
+                        this.setPlanksBlock(level, box, iblockdata, j, i, k);
                     }
                 }
 
             }
         }
 
-        private void placeSupportPillar(WorldGenLevel worldgenlevel, BoundingBox boundingbox, int i, int j, int k, int l) {
-            if (!this.getBlock(worldgenlevel, i, l + 1, k, boundingbox).isAir()) {
-                this.generateBox(worldgenlevel, boundingbox, i, j, k, i, l, k, this.type.getPlanksState(), MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
+        private void placeSupportPillar(WorldGenLevel level, BoundingBox box, int x, int y, int z, int maxY) {
+            if (!this.getBlock(level, x, maxY + 1, z, box).isAir()) {
+                this.generateBox(level, box, x, y, z, x, maxY, z, this.type.getPlanksState(), MineshaftPieces.MineShaftCrossing.CAVE_AIR, false);
             }
 
         }
@@ -243,72 +238,70 @@
 
     public static class MineShaftStairs extends MineshaftPieces.MineShaftPiece {
 
-        public MineShaftStairs(int i, BoundingBox boundingbox, Direction direction, MineshaftStructure.Type mineshaftstructure_type) {
-            super(StructurePieceType.MINE_SHAFT_STAIRS, i, mineshaftstructure_type, boundingbox);
-            this.setOrientation(direction);
+        public MineShaftStairs(int genDepth, BoundingBox boundingBox, Direction orientation, MineshaftStructure.Type type) {
+            super(StructurePieceType.MINE_SHAFT_STAIRS, genDepth, type, boundingBox);
+            this.setOrientation(orientation);
         }
 
-        public MineShaftStairs(CompoundTag compoundtag) {
-            super(StructurePieceType.MINE_SHAFT_STAIRS, compoundtag);
+        public MineShaftStairs(CompoundTag tag) {
+            super(StructurePieceType.MINE_SHAFT_STAIRS, tag);
         }
 
         @Nullable
-        public static BoundingBox findStairs(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction) {
-            BoundingBox boundingbox;
+        public static BoundingBox findStairs(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction direction) {
+            BoundingBox structureboundingbox;
 
             switch (direction) {
                 case NORTH:
                 default:
-                    boundingbox = new BoundingBox(0, -5, -8, 2, 2, 0);
+                    structureboundingbox = new BoundingBox(0, -5, -8, 2, 2, 0);
                     break;
                 case SOUTH:
-                    boundingbox = new BoundingBox(0, -5, 0, 2, 2, 8);
+                    structureboundingbox = new BoundingBox(0, -5, 0, 2, 2, 8);
                     break;
                 case WEST:
-                    boundingbox = new BoundingBox(-8, -5, 0, 0, 2, 2);
+                    structureboundingbox = new BoundingBox(-8, -5, 0, 0, 2, 2);
                     break;
                 case EAST:
-                    boundingbox = new BoundingBox(0, -5, 0, 8, 2, 2);
+                    structureboundingbox = new BoundingBox(0, -5, 0, 8, 2, 2);
             }
 
-            boundingbox.move(i, j, k);
-            return structurepieceaccessor.findCollisionPiece(boundingbox) != null ? null : boundingbox;
+            structureboundingbox.move(x, y, z);
+            return pieces.findCollisionPiece(structureboundingbox) != null ? null : structureboundingbox;
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
             int i = this.getGenDepth();
-            Direction direction = this.getOrientation();
+            Direction enumdirection = this.getOrientation();
 
-            if (direction != null) {
-                switch (direction) {
+            if (enumdirection != null) {
+                switch (enumdirection) {
                     case NORTH:
                     default:
-                        MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX(), this.boundingBox.minY(), this.boundingBox.minZ() - 1, Direction.NORTH, i);
+                        MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX(), this.boundingBox.minY(), this.boundingBox.minZ() - 1, Direction.NORTH, i);
                         break;
                     case SOUTH:
-                        MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX(), this.boundingBox.minY(), this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
+                        MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX(), this.boundingBox.minY(), this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
                         break;
                     case WEST:
-                        MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY(), this.boundingBox.minZ(), Direction.WEST, i);
+                        MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY(), this.boundingBox.minZ(), Direction.WEST, i);
                         break;
                     case EAST:
-                        MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY(), this.boundingBox.minZ(), Direction.EAST, i);
+                        MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY(), this.boundingBox.minZ(), Direction.EAST, i);
                 }
             }
 
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            if (!this.isInInvalidLocation(worldgenlevel, boundingbox)) {
-                this.generateBox(worldgenlevel, boundingbox, 0, 5, 0, 2, 7, 1, MineshaftPieces.MineShaftStairs.CAVE_AIR, MineshaftPieces.MineShaftStairs.CAVE_AIR, false);
-                this.generateBox(worldgenlevel, boundingbox, 0, 0, 7, 2, 2, 8, MineshaftPieces.MineShaftStairs.CAVE_AIR, MineshaftPieces.MineShaftStairs.CAVE_AIR, false);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            if (!this.isInInvalidLocation(level, box)) {
+                this.generateBox(level, box, 0, 5, 0, 2, 7, 1, MineshaftPieces.MineShaftStairs.CAVE_AIR, MineshaftPieces.MineShaftStairs.CAVE_AIR, false);
+                this.generateBox(level, box, 0, 0, 7, 2, 2, 8, MineshaftPieces.MineShaftStairs.CAVE_AIR, MineshaftPieces.MineShaftStairs.CAVE_AIR, false);
 
                 for (int i = 0; i < 5; ++i) {
-                    this.generateBox(worldgenlevel, boundingbox, 0, 5 - i - (i < 4 ? 1 : 0), 2 + i, 2, 7 - i, 2 + i, MineshaftPieces.MineShaftStairs.CAVE_AIR, MineshaftPieces.MineShaftStairs.CAVE_AIR, false);
+                    this.generateBox(level, box, 0, 5 - i - (i < 4 ? 1 : 0), 2 + i, 2, 7 - i, 2 + i, MineshaftPieces.MineShaftStairs.CAVE_AIR, MineshaftPieces.MineShaftStairs.CAVE_AIR, false);
                 }
 
             }
@@ -322,61 +315,60 @@
         private boolean hasPlacedSpider;
         private final int numSections;
 
-        public MineShaftCorridor(CompoundTag compoundtag) {
-            super(StructurePieceType.MINE_SHAFT_CORRIDOR, compoundtag);
-            this.hasRails = compoundtag.getBoolean("hr");
-            this.spiderCorridor = compoundtag.getBoolean("sc");
-            this.hasPlacedSpider = compoundtag.getBoolean("hps");
-            this.numSections = compoundtag.getInt("Num");
+        public MineShaftCorridor(CompoundTag tag) {
+            super(StructurePieceType.MINE_SHAFT_CORRIDOR, tag);
+            this.hasRails = tag.getBoolean("hr");
+            this.spiderCorridor = tag.getBoolean("sc");
+            this.hasPlacedSpider = tag.getBoolean("hps");
+            this.numSections = tag.getInt("Num");
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            compoundtag.putBoolean("hr", this.hasRails);
-            compoundtag.putBoolean("sc", this.spiderCorridor);
-            compoundtag.putBoolean("hps", this.hasPlacedSpider);
-            compoundtag.putInt("Num", this.numSections);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("hr", this.hasRails);
+            tag.putBoolean("sc", this.spiderCorridor);
+            tag.putBoolean("hps", this.hasPlacedSpider);
+            tag.putInt("Num", this.numSections);
         }
 
-        public MineShaftCorridor(int i, RandomSource randomsource, BoundingBox boundingbox, Direction direction, MineshaftStructure.Type mineshaftstructure_type) {
-            super(StructurePieceType.MINE_SHAFT_CORRIDOR, i, mineshaftstructure_type, boundingbox);
-            this.setOrientation(direction);
-            this.hasRails = randomsource.nextInt(3) == 0;
-            this.spiderCorridor = !this.hasRails && randomsource.nextInt(23) == 0;
+        public MineShaftCorridor(int genDepth, RandomSource random, BoundingBox boundingBox, Direction orientation, MineshaftStructure.Type type) {
+            super(StructurePieceType.MINE_SHAFT_CORRIDOR, genDepth, type, boundingBox);
+            this.setOrientation(orientation);
+            this.hasRails = random.nextInt(3) == 0;
+            this.spiderCorridor = !this.hasRails && random.nextInt(23) == 0;
             if (this.getOrientation().getAxis() == Direction.Axis.Z) {
-                this.numSections = boundingbox.getZSpan() / 5;
+                this.numSections = boundingBox.getZSpan() / 5;
             } else {
-                this.numSections = boundingbox.getXSpan() / 5;
+                this.numSections = boundingBox.getXSpan() / 5;
             }
 
         }
 
         @Nullable
-        public static BoundingBox findCorridorSize(StructurePieceAccessor structurepieceaccessor, RandomSource randomsource, int i, int j, int k, Direction direction) {
-            for (int l = randomsource.nextInt(3) + 2; l > 0; --l) {
+        public static BoundingBox findCorridorSize(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction direction) {
+            for (int l = random.nextInt(3) + 2; l > 0; --l) {
                 int i1 = l * 5;
-                BoundingBox boundingbox;
+                BoundingBox structureboundingbox;
 
                 switch (direction) {
                     case NORTH:
                     default:
-                        boundingbox = new BoundingBox(0, 0, -(i1 - 1), 2, 2, 0);
+                        structureboundingbox = new BoundingBox(0, 0, -(i1 - 1), 2, 2, 0);
                         break;
                     case SOUTH:
-                        boundingbox = new BoundingBox(0, 0, 0, 2, 2, i1 - 1);
+                        structureboundingbox = new BoundingBox(0, 0, 0, 2, 2, i1 - 1);
                         break;
                     case WEST:
-                        boundingbox = new BoundingBox(-(i1 - 1), 0, 0, 0, 2, 2);
+                        structureboundingbox = new BoundingBox(-(i1 - 1), 0, 0, 0, 2, 2);
                         break;
                     case EAST:
-                        boundingbox = new BoundingBox(0, 0, 0, i1 - 1, 2, 2);
+                        structureboundingbox = new BoundingBox(0, 0, 0, i1 - 1, 2, 2);
                 }
 
-                boundingbox.move(i, j, k);
-                if (structurepieceaccessor.findCollisionPiece(boundingbox) == null) {
-                    return boundingbox;
+                structureboundingbox.move(x, y, z);
+                if (pieces.findCollisionPiece(structureboundingbox) == null) {
+                    return structureboundingbox;
                 }
             }
 
@@ -384,49 +376,48 @@
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
             int i = this.getGenDepth();
-            int j = randomsource.nextInt(4);
-            Direction direction = this.getOrientation();
+            int j = random.nextInt(4);
+            Direction enumdirection = this.getOrientation();
 
-            if (direction != null) {
-                switch (direction) {
+            if (enumdirection != null) {
+                switch (enumdirection) {
                     case NORTH:
                     default:
                         if (j <= 1) {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX(), this.boundingBox.minY() - 1 + randomsource.nextInt(3), this.boundingBox.minZ() - 1, direction, i);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX(), this.boundingBox.minY() - 1 + random.nextInt(3), this.boundingBox.minZ() - 1, enumdirection, i);
                         } else if (j == 2) {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY() - 1 + randomsource.nextInt(3), this.boundingBox.minZ(), Direction.WEST, i);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() - 1 + random.nextInt(3), this.boundingBox.minZ(), Direction.WEST, i);
                         } else {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY() - 1 + randomsource.nextInt(3), this.boundingBox.minZ(), Direction.EAST, i);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() - 1 + random.nextInt(3), this.boundingBox.minZ(), Direction.EAST, i);
                         }
                         break;
                     case SOUTH:
                         if (j <= 1) {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX(), this.boundingBox.minY() - 1 + randomsource.nextInt(3), this.boundingBox.maxZ() + 1, direction, i);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX(), this.boundingBox.minY() - 1 + random.nextInt(3), this.boundingBox.maxZ() + 1, enumdirection, i);
                         } else if (j == 2) {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY() - 1 + randomsource.nextInt(3), this.boundingBox.maxZ() - 3, Direction.WEST, i);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() - 1 + random.nextInt(3), this.boundingBox.maxZ() - 3, Direction.WEST, i);
                         } else {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY() - 1 + randomsource.nextInt(3), this.boundingBox.maxZ() - 3, Direction.EAST, i);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() - 1 + random.nextInt(3), this.boundingBox.maxZ() - 3, Direction.EAST, i);
                         }
                         break;
                     case WEST:
                         if (j <= 1) {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY() - 1 + randomsource.nextInt(3), this.boundingBox.minZ(), direction, i);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() - 1 + random.nextInt(3), this.boundingBox.minZ(), enumdirection, i);
                         } else if (j == 2) {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX(), this.boundingBox.minY() - 1 + randomsource.nextInt(3), this.boundingBox.minZ() - 1, Direction.NORTH, i);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX(), this.boundingBox.minY() - 1 + random.nextInt(3), this.boundingBox.minZ() - 1, Direction.NORTH, i);
                         } else {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX(), this.boundingBox.minY() - 1 + randomsource.nextInt(3), this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX(), this.boundingBox.minY() - 1 + random.nextInt(3), this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
                         }
                         break;
                     case EAST:
                         if (j <= 1) {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY() - 1 + randomsource.nextInt(3), this.boundingBox.minZ(), direction, i);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() - 1 + random.nextInt(3), this.boundingBox.minZ(), enumdirection, i);
                         } else if (j == 2) {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() - 3, this.boundingBox.minY() - 1 + randomsource.nextInt(3), this.boundingBox.minZ() - 1, Direction.NORTH, i);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.maxX() - 3, this.boundingBox.minY() - 1 + random.nextInt(3), this.boundingBox.minZ() - 1, Direction.NORTH, i);
                         } else {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() - 3, this.boundingBox.minY() - 1 + randomsource.nextInt(3), this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.maxX() - 3, this.boundingBox.minY() - 1 + random.nextInt(3), this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
                         }
                 }
             }
@@ -435,22 +426,22 @@
                 int k;
                 int l;
 
-                if (direction != Direction.NORTH && direction != Direction.SOUTH) {
+                if (enumdirection != Direction.NORTH && enumdirection != Direction.SOUTH) {
                     for (l = this.boundingBox.minX() + 3; l + 3 <= this.boundingBox.maxX(); l += 5) {
-                        k = randomsource.nextInt(5);
+                        k = random.nextInt(5);
                         if (k == 0) {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, l, this.boundingBox.minY(), this.boundingBox.minZ() - 1, Direction.NORTH, i + 1);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, l, this.boundingBox.minY(), this.boundingBox.minZ() - 1, Direction.NORTH, i + 1);
                         } else if (k == 1) {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, l, this.boundingBox.minY(), this.boundingBox.maxZ() + 1, Direction.SOUTH, i + 1);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, l, this.boundingBox.minY(), this.boundingBox.maxZ() + 1, Direction.SOUTH, i + 1);
                         }
                     }
                 } else {
                     for (l = this.boundingBox.minZ() + 3; l + 3 <= this.boundingBox.maxZ(); l += 5) {
-                        k = randomsource.nextInt(5);
+                        k = random.nextInt(5);
                         if (k == 0) {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY(), l, Direction.WEST, i + 1);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY(), l, Direction.WEST, i + 1);
                         } else if (k == 1) {
-                            MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY(), l, Direction.EAST, i + 1);
+                            MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY(), l, Direction.EAST, i + 1);
                         }
                     }
                 }
@@ -459,18 +450,17 @@
         }
 
         @Override
-        @Override
-        protected boolean createChest(WorldGenLevel worldgenlevel, BoundingBox boundingbox, RandomSource randomsource, int i, int j, int k, ResourceLocation resourcelocation) {
-            BlockPos.MutableBlockPos blockpos_mutableblockpos = this.getWorldPos(i, j, k);
+        protected boolean createChest(WorldGenLevel level, BoundingBox box, RandomSource random, int x, int y, int z, ResourceLocation lootTable) {
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(x, y, z);
 
-            if (boundingbox.isInside(blockpos_mutableblockpos) && worldgenlevel.getBlockState(blockpos_mutableblockpos).isAir() && !worldgenlevel.getBlockState(blockpos_mutableblockpos.below()).isAir()) {
-                BlockState blockstate = (BlockState) Blocks.RAIL.defaultBlockState().setValue(RailBlock.SHAPE, randomsource.nextBoolean() ? RailShape.NORTH_SOUTH : RailShape.EAST_WEST);
+            if (box.isInside(blockposition_mutableblockposition) && level.getBlockState(blockposition_mutableblockposition).isAir() && !level.getBlockState(blockposition_mutableblockposition.below()).isAir()) {
+                IBlockData iblockdata = (IBlockData) Blocks.RAIL.defaultBlockState().setValue(RailBlock.SHAPE, random.nextBoolean() ? RailShape.NORTH_SOUTH : RailShape.EAST_WEST);
 
-                this.placeBlock(worldgenlevel, blockstate, i, j, k, boundingbox);
-                MinecartChest minecartchest = new MinecartChest(worldgenlevel.getLevel(), (double) blockpos_mutableblockpos.getX() + 0.5D, (double) blockpos_mutableblockpos.getY() + 0.5D, (double) blockpos_mutableblockpos.getZ() + 0.5D);
+                this.placeBlock(level, iblockdata, x, y, z, box);
+                MinecartChest entityminecartchest = new MinecartChest(level.getLevel(), (double) blockposition_mutableblockposition.getX() + 0.5D, (double) blockposition_mutableblockposition.getY() + 0.5D, (double) blockposition_mutableblockposition.getZ() + 0.5D);
 
-                minecartchest.setLootTable(resourcelocation, randomsource.nextLong());
-                worldgenlevel.addFreshEntity(minecartchest);
+                entityminecartchest.setLootTable(lootTable, random.nextLong());
+                level.addFreshEntity(entityminecartchest);
                 return true;
             } else {
                 return false;
@@ -478,20 +468,19 @@
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            if (!this.isInInvalidLocation(worldgenlevel, boundingbox)) {
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            if (!this.isInInvalidLocation(level, box)) {
                 boolean flag = false;
                 boolean flag1 = true;
                 boolean flag2 = false;
                 boolean flag3 = true;
                 int i = this.numSections * 5 - 1;
-                BlockState blockstate = this.type.getPlanksState();
+                IBlockData iblockdata = this.type.getPlanksState();
 
-                this.generateBox(worldgenlevel, boundingbox, 0, 0, 0, 2, 1, i, MineshaftPieces.MineShaftCorridor.CAVE_AIR, MineshaftPieces.MineShaftCorridor.CAVE_AIR, false);
-                this.generateMaybeBox(worldgenlevel, boundingbox, randomsource, 0.8F, 0, 2, 0, 2, 2, i, MineshaftPieces.MineShaftCorridor.CAVE_AIR, MineshaftPieces.MineShaftCorridor.CAVE_AIR, false, false);
+                this.generateBox(level, box, 0, 0, 0, 2, 1, i, MineshaftPieces.MineShaftCorridor.CAVE_AIR, MineshaftPieces.MineShaftCorridor.CAVE_AIR, false);
+                this.generateMaybeBox(level, box, random, 0.8F, 0, 2, 0, 2, 2, i, MineshaftPieces.MineShaftCorridor.CAVE_AIR, MineshaftPieces.MineShaftCorridor.CAVE_AIR, false, false);
                 if (this.spiderCorridor) {
-                    this.generateMaybeBox(worldgenlevel, boundingbox, randomsource, 0.6F, 0, 0, 0, 2, 1, i, Blocks.COBWEB.defaultBlockState(), MineshaftPieces.MineShaftCorridor.CAVE_AIR, false, true);
+                    this.generateMaybeBox(level, box, random, 0.6F, 0, 0, 0, 2, 1, i, Blocks.COBWEB.defaultBlockState(), MineshaftPieces.MineShaftCorridor.CAVE_AIR, false, true);
                 }
 
                 int j;
@@ -499,66 +488,71 @@
 
                 for (k = 0; k < this.numSections; ++k) {
                     j = 2 + k * 5;
-                    this.placeSupport(worldgenlevel, boundingbox, 0, 0, j, 2, 2, randomsource);
-                    this.maybePlaceCobWeb(worldgenlevel, boundingbox, randomsource, 0.1F, 0, 2, j - 1);
-                    this.maybePlaceCobWeb(worldgenlevel, boundingbox, randomsource, 0.1F, 2, 2, j - 1);
-                    this.maybePlaceCobWeb(worldgenlevel, boundingbox, randomsource, 0.1F, 0, 2, j + 1);
-                    this.maybePlaceCobWeb(worldgenlevel, boundingbox, randomsource, 0.1F, 2, 2, j + 1);
-                    this.maybePlaceCobWeb(worldgenlevel, boundingbox, randomsource, 0.05F, 0, 2, j - 2);
-                    this.maybePlaceCobWeb(worldgenlevel, boundingbox, randomsource, 0.05F, 2, 2, j - 2);
-                    this.maybePlaceCobWeb(worldgenlevel, boundingbox, randomsource, 0.05F, 0, 2, j + 2);
-                    this.maybePlaceCobWeb(worldgenlevel, boundingbox, randomsource, 0.05F, 2, 2, j + 2);
-                    if (randomsource.nextInt(100) == 0) {
-                        this.createChest(worldgenlevel, boundingbox, randomsource, 2, 0, j - 1, BuiltInLootTables.ABANDONED_MINESHAFT);
+                    this.placeSupport(level, box, 0, 0, j, 2, 2, random);
+                    this.maybePlaceCobWeb(level, box, random, 0.1F, 0, 2, j - 1);
+                    this.maybePlaceCobWeb(level, box, random, 0.1F, 2, 2, j - 1);
+                    this.maybePlaceCobWeb(level, box, random, 0.1F, 0, 2, j + 1);
+                    this.maybePlaceCobWeb(level, box, random, 0.1F, 2, 2, j + 1);
+                    this.maybePlaceCobWeb(level, box, random, 0.05F, 0, 2, j - 2);
+                    this.maybePlaceCobWeb(level, box, random, 0.05F, 2, 2, j - 2);
+                    this.maybePlaceCobWeb(level, box, random, 0.05F, 0, 2, j + 2);
+                    this.maybePlaceCobWeb(level, box, random, 0.05F, 2, 2, j + 2);
+                    if (random.nextInt(100) == 0) {
+                        this.createChest(level, box, random, 2, 0, j - 1, BuiltInLootTables.ABANDONED_MINESHAFT);
                     }
 
-                    if (randomsource.nextInt(100) == 0) {
-                        this.createChest(worldgenlevel, boundingbox, randomsource, 0, 0, j + 1, BuiltInLootTables.ABANDONED_MINESHAFT);
+                    if (random.nextInt(100) == 0) {
+                        this.createChest(level, box, random, 0, 0, j + 1, BuiltInLootTables.ABANDONED_MINESHAFT);
                     }
 
                     if (this.spiderCorridor && !this.hasPlacedSpider) {
                         boolean flag4 = true;
-                        int l = j - 1 + randomsource.nextInt(3);
-                        BlockPos.MutableBlockPos blockpos_mutableblockpos = this.getWorldPos(1, 0, l);
+                        int l = j - 1 + random.nextInt(3);
+                        BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(1, 0, l);
 
-                        if (boundingbox.isInside(blockpos_mutableblockpos) && this.isInterior(worldgenlevel, 1, 0, l, boundingbox)) {
+                        if (box.isInside(blockposition_mutableblockposition) && this.isInterior(level, 1, 0, l, box)) {
                             this.hasPlacedSpider = true;
-                            worldgenlevel.setBlock(blockpos_mutableblockpos, Blocks.SPAWNER.defaultBlockState(), 2);
-                            BlockEntity blockentity = worldgenlevel.getBlockEntity(blockpos_mutableblockpos);
+                            // CraftBukkit start
+                            /*
+                            generatoraccessseed.setBlock(blockposition_mutableblockposition, Blocks.SPAWNER.defaultBlockState(), 2);
+                            TileEntity tileentity = generatoraccessseed.getBlockEntity(blockposition_mutableblockposition);
 
-                            if (blockentity instanceof SpawnerBlockEntity) {
-                                SpawnerBlockEntity spawnerblockentity = (SpawnerBlockEntity) blockentity;
+                            if (tileentity instanceof TileEntityMobSpawner) {
+                                TileEntityMobSpawner tileentitymobspawner = (TileEntityMobSpawner) tileentity;
 
-                                spawnerblockentity.setEntityId(EntityType.CAVE_SPIDER, randomsource);
+                                tileentitymobspawner.setEntityId(EntityTypes.CAVE_SPIDER, randomsource);
                             }
+                            */
+                            placeCraftSpawner(level, blockposition_mutableblockposition, org.bukkit.entity.EntityType.CAVE_SPIDER, 2);
+                            // CraftBukkit end
                         }
                     }
                 }
 
                 for (k = 0; k <= 2; ++k) {
                     for (j = 0; j <= i; ++j) {
-                        this.setPlanksBlock(worldgenlevel, boundingbox, blockstate, k, -1, j);
+                        this.setPlanksBlock(level, box, iblockdata, k, -1, j);
                     }
                 }
 
                 boolean flag5 = true;
 
-                this.placeDoubleLowerOrUpperSupport(worldgenlevel, boundingbox, 0, -1, 2);
+                this.placeDoubleLowerOrUpperSupport(level, box, 0, -1, 2);
                 if (this.numSections > 1) {
                     j = i - 2;
-                    this.placeDoubleLowerOrUpperSupport(worldgenlevel, boundingbox, 0, -1, j);
+                    this.placeDoubleLowerOrUpperSupport(level, box, 0, -1, j);
                 }
 
                 if (this.hasRails) {
-                    BlockState blockstate1 = (BlockState) Blocks.RAIL.defaultBlockState().setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                    IBlockData iblockdata1 = (IBlockData) Blocks.RAIL.defaultBlockState().setValue(RailBlock.SHAPE, RailShape.NORTH_SOUTH);
 
                     for (int i1 = 0; i1 <= i; ++i1) {
-                        BlockState blockstate2 = this.getBlock(worldgenlevel, 1, -1, i1, boundingbox);
+                        IBlockData iblockdata2 = this.getBlock(level, 1, -1, i1, box);
 
-                        if (!blockstate2.isAir() && blockstate2.isSolidRender(worldgenlevel, this.getWorldPos(1, -1, i1))) {
-                            float f = this.isInterior(worldgenlevel, 1, 0, i1, boundingbox) ? 0.7F : 0.9F;
+                        if (!iblockdata2.isAir() && iblockdata2.isSolidRender(level, this.getWorldPos(1, -1, i1))) {
+                            float f = this.isInterior(level, 1, 0, i1, box) ? 0.7F : 0.9F;
 
-                            this.maybeGenerateBlock(worldgenlevel, boundingbox, randomsource, f, 1, 0, i1, blockstate1);
+                            this.maybeGenerateBlock(level, box, random, f, 1, 0, i1, iblockdata1);
                         }
                     }
                 }
@@ -566,142 +560,141 @@
             }
         }
 
-        private void placeDoubleLowerOrUpperSupport(WorldGenLevel worldgenlevel, BoundingBox boundingbox, int i, int j, int k) {
-            BlockState blockstate = this.type.getWoodState();
-            BlockState blockstate1 = this.type.getPlanksState();
+        private void placeDoubleLowerOrUpperSupport(WorldGenLevel level, BoundingBox box, int x, int y, int z) {
+            IBlockData iblockdata = this.type.getWoodState();
+            IBlockData iblockdata1 = this.type.getPlanksState();
 
-            if (this.getBlock(worldgenlevel, i, j, k, boundingbox).is(blockstate1.getBlock())) {
-                this.fillPillarDownOrChainUp(worldgenlevel, blockstate, i, j, k, boundingbox);
+            if (this.getBlock(level, x, y, z, box).is(iblockdata1.getBlock())) {
+                this.fillPillarDownOrChainUp(level, iblockdata, x, y, z, box);
             }
 
-            if (this.getBlock(worldgenlevel, i + 2, j, k, boundingbox).is(blockstate1.getBlock())) {
-                this.fillPillarDownOrChainUp(worldgenlevel, blockstate, i + 2, j, k, boundingbox);
+            if (this.getBlock(level, x + 2, y, z, box).is(iblockdata1.getBlock())) {
+                this.fillPillarDownOrChainUp(level, iblockdata, x + 2, y, z, box);
             }
 
         }
 
         @Override
-        @Override
-        protected void fillColumnDown(WorldGenLevel worldgenlevel, BlockState blockstate, int i, int j, int k, BoundingBox boundingbox) {
-            BlockPos.MutableBlockPos blockpos_mutableblockpos = this.getWorldPos(i, j, k);
+        protected void fillColumnDown(WorldGenLevel level, IBlockData state, int x, int y, int z, BoundingBox box) {
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(x, y, z);
 
-            if (boundingbox.isInside(blockpos_mutableblockpos)) {
-                int l = blockpos_mutableblockpos.getY();
+            if (box.isInside(blockposition_mutableblockposition)) {
+                int l = blockposition_mutableblockposition.getY();
 
-                while (this.isReplaceableByStructures(worldgenlevel.getBlockState(blockpos_mutableblockpos)) && blockpos_mutableblockpos.getY() > worldgenlevel.getMinBuildHeight() + 1) {
-                    blockpos_mutableblockpos.move(Direction.DOWN);
+                while (this.isReplaceableByStructures(level.getBlockState(blockposition_mutableblockposition)) && blockposition_mutableblockposition.getY() > level.getMinBuildHeight() + 1) {
+                    blockposition_mutableblockposition.move(Direction.DOWN);
                 }
 
-                if (this.canPlaceColumnOnTopOf(worldgenlevel, blockpos_mutableblockpos, worldgenlevel.getBlockState(blockpos_mutableblockpos))) {
-                    while (blockpos_mutableblockpos.getY() < l) {
-                        blockpos_mutableblockpos.move(Direction.UP);
-                        worldgenlevel.setBlock(blockpos_mutableblockpos, blockstate, 2);
+                if (this.canPlaceColumnOnTopOf(level, blockposition_mutableblockposition, level.getBlockState(blockposition_mutableblockposition))) {
+                    while (blockposition_mutableblockposition.getY() < l) {
+                        blockposition_mutableblockposition.move(Direction.UP);
+                        level.setBlock(blockposition_mutableblockposition, state, 2);
                     }
 
                 }
             }
         }
 
-        protected void fillPillarDownOrChainUp(WorldGenLevel worldgenlevel, BlockState blockstate, int i, int j, int k, BoundingBox boundingbox) {
-            BlockPos.MutableBlockPos blockpos_mutableblockpos = this.getWorldPos(i, j, k);
+        protected void fillPillarDownOrChainUp(WorldGenLevel level, IBlockData state, int x, int y, int z, BoundingBox box) {
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(x, y, z);
 
-            if (boundingbox.isInside(blockpos_mutableblockpos)) {
-                int l = blockpos_mutableblockpos.getY();
+            if (box.isInside(blockposition_mutableblockposition)) {
+                int l = blockposition_mutableblockposition.getY();
                 int i1 = 1;
                 boolean flag = true;
 
                 for (boolean flag1 = true; flag || flag1; ++i1) {
-                    BlockState blockstate1;
+                    IBlockData iblockdata1;
                     boolean flag2;
 
                     if (flag) {
-                        blockpos_mutableblockpos.setY(l - i1);
-                        blockstate1 = worldgenlevel.getBlockState(blockpos_mutableblockpos);
-                        flag2 = this.isReplaceableByStructures(blockstate1) && !blockstate1.is(Blocks.LAVA);
-                        if (!flag2 && this.canPlaceColumnOnTopOf(worldgenlevel, blockpos_mutableblockpos, blockstate1)) {
-                            fillColumnBetween(worldgenlevel, blockstate, blockpos_mutableblockpos, l - i1 + 1, l);
+                        blockposition_mutableblockposition.setY(l - i1);
+                        iblockdata1 = level.getBlockState(blockposition_mutableblockposition);
+                        flag2 = this.isReplaceableByStructures(iblockdata1) && !iblockdata1.is(Blocks.LAVA);
+                        if (!flag2 && this.canPlaceColumnOnTopOf(level, blockposition_mutableblockposition, iblockdata1)) {
+                            fillColumnBetween(level, state, blockposition_mutableblockposition, l - i1 + 1, l);
                             return;
                         }
 
-                        flag = i1 <= 20 && flag2 && blockpos_mutableblockpos.getY() > worldgenlevel.getMinBuildHeight() + 1;
+                        flag = i1 <= 20 && flag2 && blockposition_mutableblockposition.getY() > level.getMinBuildHeight() + 1;
                     }
 
                     if (flag1) {
-                        blockpos_mutableblockpos.setY(l + i1);
-                        blockstate1 = worldgenlevel.getBlockState(blockpos_mutableblockpos);
-                        flag2 = this.isReplaceableByStructures(blockstate1);
-                        if (!flag2 && this.canHangChainBelow(worldgenlevel, blockpos_mutableblockpos, blockstate1)) {
-                            worldgenlevel.setBlock(blockpos_mutableblockpos.setY(l + 1), this.type.getFenceState(), 2);
-                            fillColumnBetween(worldgenlevel, Blocks.CHAIN.defaultBlockState(), blockpos_mutableblockpos, l + 2, l + i1);
+                        blockposition_mutableblockposition.setY(l + i1);
+                        iblockdata1 = level.getBlockState(blockposition_mutableblockposition);
+                        flag2 = this.isReplaceableByStructures(iblockdata1);
+                        if (!flag2 && this.canHangChainBelow(level, blockposition_mutableblockposition, iblockdata1)) {
+                            level.setBlock(blockposition_mutableblockposition.setY(l + 1), this.type.getFenceState(), 2);
+                            fillColumnBetween(level, Blocks.CHAIN.defaultBlockState(), blockposition_mutableblockposition, l + 2, l + i1);
                             return;
                         }
 
-                        flag1 = i1 <= 50 && flag2 && blockpos_mutableblockpos.getY() < worldgenlevel.getMaxBuildHeight() - 1;
+                        flag1 = i1 <= 50 && flag2 && blockposition_mutableblockposition.getY() < level.getMaxBuildHeight() - 1;
                     }
                 }
 
             }
         }
 
-        private static void fillColumnBetween(WorldGenLevel worldgenlevel, BlockState blockstate, BlockPos.MutableBlockPos blockpos_mutableblockpos, int i, int j) {
-            for (int k = i; k < j; ++k) {
-                worldgenlevel.setBlock(blockpos_mutableblockpos.setY(k), blockstate, 2);
+        private static void fillColumnBetween(WorldGenLevel level, IBlockData state, BlockPos.MutableBlockPos pos, int minY, int maxY) {
+            for (int k = minY; k < maxY; ++k) {
+                level.setBlock(pos.setY(k), state, 2);
             }
 
         }
 
-        private boolean canPlaceColumnOnTopOf(LevelReader levelreader, BlockPos blockpos, BlockState blockstate) {
-            return blockstate.isFaceSturdy(levelreader, blockpos, Direction.UP);
+        private boolean canPlaceColumnOnTopOf(LevelReader level, BlockPos pos, IBlockData state) {
+            return state.isFaceSturdy(level, pos, Direction.UP);
         }
 
-        private boolean canHangChainBelow(LevelReader levelreader, BlockPos blockpos, BlockState blockstate) {
-            return Block.canSupportCenter(levelreader, blockpos, Direction.DOWN) && !(blockstate.getBlock() instanceof FallingBlock);
+        private boolean canHangChainBelow(LevelReader level, BlockPos pos, IBlockData state) {
+            return Block.canSupportCenter(level, pos, Direction.DOWN) && !(state.getBlock() instanceof FallingBlock);
         }
 
-        private void placeSupport(WorldGenLevel worldgenlevel, BoundingBox boundingbox, int i, int j, int k, int l, int i1, RandomSource randomsource) {
-            if (this.isSupportingBox(worldgenlevel, boundingbox, i, i1, l, k)) {
-                BlockState blockstate = this.type.getPlanksState();
-                BlockState blockstate1 = this.type.getFenceState();
+        private void placeSupport(WorldGenLevel level, BoundingBox box, int minX, int minY, int z, int maxY, int maxX, RandomSource random) {
+            if (this.isSupportingBox(level, box, minX, maxX, maxY, z)) {
+                IBlockData iblockdata = this.type.getPlanksState();
+                IBlockData iblockdata1 = this.type.getFenceState();
 
-                this.generateBox(worldgenlevel, boundingbox, i, j, k, i, l - 1, k, (BlockState) blockstate1.setValue(FenceBlock.WEST, true), MineshaftPieces.MineShaftCorridor.CAVE_AIR, false);
-                this.generateBox(worldgenlevel, boundingbox, i1, j, k, i1, l - 1, k, (BlockState) blockstate1.setValue(FenceBlock.EAST, true), MineshaftPieces.MineShaftCorridor.CAVE_AIR, false);
-                if (randomsource.nextInt(4) == 0) {
-                    this.generateBox(worldgenlevel, boundingbox, i, l, k, i, l, k, blockstate, MineshaftPieces.MineShaftCorridor.CAVE_AIR, false);
-                    this.generateBox(worldgenlevel, boundingbox, i1, l, k, i1, l, k, blockstate, MineshaftPieces.MineShaftCorridor.CAVE_AIR, false);
+                this.generateBox(level, box, minX, minY, z, minX, maxY - 1, z, (IBlockData) iblockdata1.setValue(FenceBlock.WEST, true), MineshaftPieces.MineShaftCorridor.CAVE_AIR, false);
+                this.generateBox(level, box, maxX, minY, z, maxX, maxY - 1, z, (IBlockData) iblockdata1.setValue(FenceBlock.EAST, true), MineshaftPieces.MineShaftCorridor.CAVE_AIR, false);
+                if (random.nextInt(4) == 0) {
+                    this.generateBox(level, box, minX, maxY, z, minX, maxY, z, iblockdata, MineshaftPieces.MineShaftCorridor.CAVE_AIR, false);
+                    this.generateBox(level, box, maxX, maxY, z, maxX, maxY, z, iblockdata, MineshaftPieces.MineShaftCorridor.CAVE_AIR, false);
                 } else {
-                    this.generateBox(worldgenlevel, boundingbox, i, l, k, i1, l, k, blockstate, MineshaftPieces.MineShaftCorridor.CAVE_AIR, false);
-                    this.maybeGenerateBlock(worldgenlevel, boundingbox, randomsource, 0.05F, i + 1, l, k - 1, (BlockState) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.SOUTH));
-                    this.maybeGenerateBlock(worldgenlevel, boundingbox, randomsource, 0.05F, i + 1, l, k + 1, (BlockState) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.NORTH));
+                    this.generateBox(level, box, minX, maxY, z, maxX, maxY, z, iblockdata, MineshaftPieces.MineShaftCorridor.CAVE_AIR, false);
+                    this.maybeGenerateBlock(level, box, random, 0.05F, minX + 1, maxY, z - 1, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.SOUTH));
+                    this.maybeGenerateBlock(level, box, random, 0.05F, minX + 1, maxY, z + 1, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.NORTH));
                 }
 
             }
         }
 
-        private void maybePlaceCobWeb(WorldGenLevel worldgenlevel, BoundingBox boundingbox, RandomSource randomsource, float f, int i, int j, int k) {
-            if (this.isInterior(worldgenlevel, i, j, k, boundingbox) && randomsource.nextFloat() < f && this.hasSturdyNeighbours(worldgenlevel, boundingbox, i, j, k, 2)) {
-                this.placeBlock(worldgenlevel, Blocks.COBWEB.defaultBlockState(), i, j, k, boundingbox);
+        private void maybePlaceCobWeb(WorldGenLevel level, BoundingBox box, RandomSource random, float chance, int x, int y, int z) {
+            if (this.isInterior(level, x, y, z, box) && random.nextFloat() < chance && this.hasSturdyNeighbours(level, box, x, y, z, 2)) {
+                this.placeBlock(level, Blocks.COBWEB.defaultBlockState(), x, y, z, box);
             }
 
         }
 
-        private boolean hasSturdyNeighbours(WorldGenLevel worldgenlevel, BoundingBox boundingbox, int i, int j, int k, int l) {
-            BlockPos.MutableBlockPos blockpos_mutableblockpos = this.getWorldPos(i, j, k);
+        private boolean hasSturdyNeighbours(WorldGenLevel level, BoundingBox box, int x, int y, int z, int required) {
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(x, y, z);
             int i1 = 0;
-            Direction[] adirection = Direction.values();
-            int j1 = adirection.length;
+            Direction[] aenumdirection = Direction.values();
+            int j1 = aenumdirection.length;
 
             for (int k1 = 0; k1 < j1; ++k1) {
-                Direction direction = adirection[k1];
+                Direction enumdirection = aenumdirection[k1];
 
-                blockpos_mutableblockpos.move(direction);
-                if (boundingbox.isInside(blockpos_mutableblockpos) && worldgenlevel.getBlockState(blockpos_mutableblockpos).isFaceSturdy(worldgenlevel, blockpos_mutableblockpos, direction.getOpposite())) {
+                blockposition_mutableblockposition.move(enumdirection);
+                if (box.isInside(blockposition_mutableblockposition) && level.getBlockState(blockposition_mutableblockposition).isFaceSturdy(level, blockposition_mutableblockposition, enumdirection.getOpposite())) {
                     ++i1;
-                    if (i1 >= l) {
+                    if (i1 >= required) {
                         return true;
                     }
                 }
 
-                blockpos_mutableblockpos.move(direction.getOpposite());
+                blockposition_mutableblockposition.move(enumdirection.getOpposite());
             }
 
             return false;
@@ -712,33 +705,31 @@
 
         protected MineshaftStructure.Type type;
 
-        public MineShaftPiece(StructurePieceType structurepiecetype, int i, MineshaftStructure.Type mineshaftstructure_type, BoundingBox boundingbox) {
-            super(structurepiecetype, i, boundingbox);
-            this.type = mineshaftstructure_type;
+        public MineShaftPiece(StructurePieceType structurePieceType, int genDepth, MineshaftStructure.Type type, BoundingBox boundingBox) {
+            super(structurePieceType, genDepth, boundingBox);
+            this.type = type;
         }
 
-        public MineShaftPiece(StructurePieceType structurepiecetype, CompoundTag compoundtag) {
-            super(structurepiecetype, compoundtag);
-            this.type = MineshaftStructure.Type.byId(compoundtag.getInt("MST"));
+        public MineShaftPiece(StructurePieceType type, CompoundTag tag) {
+            super(type, tag);
+            this.type = MineshaftStructure.Type.byId(tag.getInt("MST"));
         }
 
         @Override
-        @Override
-        protected boolean canBeReplaced(LevelReader levelreader, int i, int j, int k, BoundingBox boundingbox) {
-            BlockState blockstate = this.getBlock(levelreader, i, j, k, boundingbox);
+        protected boolean canBeReplaced(LevelReader level, int x, int y, int z, BoundingBox box) {
+            IBlockData iblockdata = this.getBlock(level, x, y, z, box);
 
-            return !blockstate.is(this.type.getPlanksState().getBlock()) && !blockstate.is(this.type.getWoodState().getBlock()) && !blockstate.is(this.type.getFenceState().getBlock()) && !blockstate.is(Blocks.CHAIN);
+            return !iblockdata.is(this.type.getPlanksState().getBlock()) && !iblockdata.is(this.type.getWoodState().getBlock()) && !iblockdata.is(this.type.getFenceState().getBlock()) && !iblockdata.is(Blocks.CHAIN);
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            compoundtag.putInt("MST", this.type.ordinal());
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            tag.putInt("MST", this.type.ordinal());
         }
 
-        protected boolean isSupportingBox(BlockGetter blockgetter, BoundingBox boundingbox, int i, int j, int k, int l) {
-            for (int i1 = i; i1 <= j; ++i1) {
-                if (this.getBlock(blockgetter, i1, k + 1, l, boundingbox).isAir()) {
+        protected boolean isSupportingBox(BlockGetter level, BoundingBox box, int xStart, int xEnd, int y, int z) {
+            for (int i1 = xStart; i1 <= xEnd; ++i1) {
+                if (this.getBlock(level, i1, y + 1, z, box).isAir()) {
                     return false;
                 }
             }
@@ -746,16 +737,16 @@
             return true;
         }
 
-        protected boolean isInInvalidLocation(LevelAccessor levelaccessor, BoundingBox boundingbox) {
-            int i = Math.max(this.boundingBox.minX() - 1, boundingbox.minX());
-            int j = Math.max(this.boundingBox.minY() - 1, boundingbox.minY());
-            int k = Math.max(this.boundingBox.minZ() - 1, boundingbox.minZ());
-            int l = Math.min(this.boundingBox.maxX() + 1, boundingbox.maxX());
-            int i1 = Math.min(this.boundingBox.maxY() + 1, boundingbox.maxY());
-            int j1 = Math.min(this.boundingBox.maxZ() + 1, boundingbox.maxZ());
-            BlockPos.MutableBlockPos blockpos_mutableblockpos = new BlockPos.MutableBlockPos((i + l) / 2, (j + i1) / 2, (k + j1) / 2);
+        protected boolean isInInvalidLocation(LevelAccessor level, BoundingBox boundingBox) {
+            int i = Math.max(this.boundingBox.minX() - 1, boundingBox.minX());
+            int j = Math.max(this.boundingBox.minY() - 1, boundingBox.minY());
+            int k = Math.max(this.boundingBox.minZ() - 1, boundingBox.minZ());
+            int l = Math.min(this.boundingBox.maxX() + 1, boundingBox.maxX());
+            int i1 = Math.min(this.boundingBox.maxY() + 1, boundingBox.maxY());
+            int j1 = Math.min(this.boundingBox.maxZ() + 1, boundingBox.maxZ());
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos((i + l) / 2, (j + i1) / 2, (k + j1) / 2);
 
-            if (levelaccessor.getBiome(blockpos_mutableblockpos).is(BiomeTags.MINESHAFT_BLOCKING)) {
+            if (level.getBiome(blockposition_mutableblockposition).is(BiomeTags.MINESHAFT_BLOCKING)) {
                 return true;
             } else {
                 int k1;
@@ -763,11 +754,11 @@
 
                 for (k1 = i; k1 <= l; ++k1) {
                     for (l1 = k; l1 <= j1; ++l1) {
-                        if (levelaccessor.getBlockState(blockpos_mutableblockpos.set(k1, j, l1)).liquid()) {
+                        if (level.getBlockState(blockposition_mutableblockposition.set(k1, j, l1)).liquid()) {
                             return true;
                         }
 
-                        if (levelaccessor.getBlockState(blockpos_mutableblockpos.set(k1, i1, l1)).liquid()) {
+                        if (level.getBlockState(blockposition_mutableblockposition.set(k1, i1, l1)).liquid()) {
                             return true;
                         }
                     }
@@ -775,11 +766,11 @@
 
                 for (k1 = i; k1 <= l; ++k1) {
                     for (l1 = j; l1 <= i1; ++l1) {
-                        if (levelaccessor.getBlockState(blockpos_mutableblockpos.set(k1, l1, k)).liquid()) {
+                        if (level.getBlockState(blockposition_mutableblockposition.set(k1, l1, k)).liquid()) {
                             return true;
                         }
 
-                        if (levelaccessor.getBlockState(blockpos_mutableblockpos.set(k1, l1, j1)).liquid()) {
+                        if (level.getBlockState(blockposition_mutableblockposition.set(k1, l1, j1)).liquid()) {
                             return true;
                         }
                     }
@@ -787,11 +778,11 @@
 
                 for (k1 = k; k1 <= j1; ++k1) {
                     for (l1 = j; l1 <= i1; ++l1) {
-                        if (levelaccessor.getBlockState(blockpos_mutableblockpos.set(i, l1, k1)).liquid()) {
+                        if (level.getBlockState(blockposition_mutableblockposition.set(i, l1, k1)).liquid()) {
                             return true;
                         }
 
-                        if (levelaccessor.getBlockState(blockpos_mutableblockpos.set(l, l1, k1)).liquid()) {
+                        if (level.getBlockState(blockposition_mutableblockposition.set(l, l1, k1)).liquid()) {
                             return true;
                         }
                     }
@@ -801,13 +792,13 @@
             }
         }
 
-        protected void setPlanksBlock(WorldGenLevel worldgenlevel, BoundingBox boundingbox, BlockState blockstate, int i, int j, int k) {
-            if (this.isInterior(worldgenlevel, i, j, k, boundingbox)) {
-                BlockPos.MutableBlockPos blockpos_mutableblockpos = this.getWorldPos(i, j, k);
-                BlockState blockstate1 = worldgenlevel.getBlockState(blockpos_mutableblockpos);
+        protected void setPlanksBlock(WorldGenLevel level, BoundingBox box, IBlockData plankState, int x, int y, int z) {
+            if (this.isInterior(level, x, y, z, box)) {
+                BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(x, y, z);
+                IBlockData iblockdata1 = level.getBlockState(blockposition_mutableblockposition);
 
-                if (!blockstate1.isFaceSturdy(worldgenlevel, blockpos_mutableblockpos, Direction.UP)) {
-                    worldgenlevel.setBlock(blockpos_mutableblockpos, blockstate, 2);
+                if (!iblockdata1.isFaceSturdy(level, blockposition_mutableblockposition, Direction.UP)) {
+                    level.setBlock(blockposition_mutableblockposition, plankState, 2);
                 }
 
             }
@@ -818,18 +809,18 @@
 
         private final List<BoundingBox> childEntranceBoxes = Lists.newLinkedList();
 
-        public MineShaftRoom(int i, RandomSource randomsource, int j, int k, MineshaftStructure.Type mineshaftstructure_type) {
-            super(StructurePieceType.MINE_SHAFT_ROOM, i, mineshaftstructure_type, new BoundingBox(j, 50, k, j + 7 + randomsource.nextInt(6), 54 + randomsource.nextInt(6), k + 7 + randomsource.nextInt(6)));
-            this.type = mineshaftstructure_type;
+        public MineShaftRoom(int genDepth, RandomSource random, int x, int z, MineshaftStructure.Type type) {
+            super(StructurePieceType.MINE_SHAFT_ROOM, genDepth, type, new BoundingBox(x, 50, z, x + 7 + random.nextInt(6), 54 + random.nextInt(6), z + 7 + random.nextInt(6)));
+            this.type = type;
         }
 
-        public MineShaftRoom(CompoundTag compoundtag) {
-            super(StructurePieceType.MINE_SHAFT_ROOM, compoundtag);
-            DataResult dataresult = BoundingBox.CODEC.listOf().parse(NbtOps.INSTANCE, compoundtag.getList("Entrances", 11));
+        public MineShaftRoom(CompoundTag tag) {
+            super(StructurePieceType.MINE_SHAFT_ROOM, tag);
+            DataResult<List<BoundingBox>> dataresult = BoundingBox.CODEC.listOf().parse(NbtOps.INSTANCE, tag.getList("Entrances", 11)); // CraftBukkit - decompile error
             Logger logger = MineshaftPieces.LOGGER;
 
             Objects.requireNonNull(logger);
-            Optional optional = dataresult.resultOrPartial(logger::error);
+            Optional<List<BoundingBox>> optional = dataresult.resultOrPartial(logger::error); // CraftBukkit - decompile error
             List list = this.childEntranceBoxes;
 
             Objects.requireNonNull(this.childEntranceBoxes);
@@ -837,8 +828,7 @@
         }
 
         @Override
-        @Override
-        public void addChildren(StructurePiece structurepiece, StructurePieceAccessor structurepieceaccessor, RandomSource randomsource) {
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
             int i = this.getGenDepth();
             int j = this.boundingBox.getYSpan() - 3 - 1;
 
@@ -847,104 +837,101 @@
             }
 
             int k;
-            MineshaftPieces.MineShaftPiece mineshaftpieces_mineshaftpiece;
-            BoundingBox boundingbox;
+            MineshaftPieces.MineShaftPiece mineshaftpieces_c;
+            BoundingBox structureboundingbox;
 
             for (k = 0; k < this.boundingBox.getXSpan(); k += 4) {
-                k += randomsource.nextInt(this.boundingBox.getXSpan());
+                k += random.nextInt(this.boundingBox.getXSpan());
                 if (k + 3 > this.boundingBox.getXSpan()) {
                     break;
                 }
 
-                mineshaftpieces_mineshaftpiece = MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + k, this.boundingBox.minY() + randomsource.nextInt(j) + 1, this.boundingBox.minZ() - 1, Direction.NORTH, i);
-                if (mineshaftpieces_mineshaftpiece != null) {
-                    boundingbox = mineshaftpieces_mineshaftpiece.getBoundingBox();
-                    this.childEntranceBoxes.add(new BoundingBox(boundingbox.minX(), boundingbox.minY(), this.boundingBox.minZ(), boundingbox.maxX(), boundingbox.maxY(), this.boundingBox.minZ() + 1));
+                mineshaftpieces_c = MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() + k, this.boundingBox.minY() + random.nextInt(j) + 1, this.boundingBox.minZ() - 1, Direction.NORTH, i);
+                if (mineshaftpieces_c != null) {
+                    structureboundingbox = mineshaftpieces_c.getBoundingBox();
+                    this.childEntranceBoxes.add(new BoundingBox(structureboundingbox.minX(), structureboundingbox.minY(), this.boundingBox.minZ(), structureboundingbox.maxX(), structureboundingbox.maxY(), this.boundingBox.minZ() + 1));
                 }
             }
 
             for (k = 0; k < this.boundingBox.getXSpan(); k += 4) {
-                k += randomsource.nextInt(this.boundingBox.getXSpan());
+                k += random.nextInt(this.boundingBox.getXSpan());
                 if (k + 3 > this.boundingBox.getXSpan()) {
                     break;
                 }
 
-                mineshaftpieces_mineshaftpiece = MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() + k, this.boundingBox.minY() + randomsource.nextInt(j) + 1, this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
-                if (mineshaftpieces_mineshaftpiece != null) {
-                    boundingbox = mineshaftpieces_mineshaftpiece.getBoundingBox();
-                    this.childEntranceBoxes.add(new BoundingBox(boundingbox.minX(), boundingbox.minY(), this.boundingBox.maxZ() - 1, boundingbox.maxX(), boundingbox.maxY(), this.boundingBox.maxZ()));
+                mineshaftpieces_c = MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() + k, this.boundingBox.minY() + random.nextInt(j) + 1, this.boundingBox.maxZ() + 1, Direction.SOUTH, i);
+                if (mineshaftpieces_c != null) {
+                    structureboundingbox = mineshaftpieces_c.getBoundingBox();
+                    this.childEntranceBoxes.add(new BoundingBox(structureboundingbox.minX(), structureboundingbox.minY(), this.boundingBox.maxZ() - 1, structureboundingbox.maxX(), structureboundingbox.maxY(), this.boundingBox.maxZ()));
                 }
             }
 
             for (k = 0; k < this.boundingBox.getZSpan(); k += 4) {
-                k += randomsource.nextInt(this.boundingBox.getZSpan());
+                k += random.nextInt(this.boundingBox.getZSpan());
                 if (k + 3 > this.boundingBox.getZSpan()) {
                     break;
                 }
 
-                mineshaftpieces_mineshaftpiece = MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.minX() - 1, this.boundingBox.minY() + randomsource.nextInt(j) + 1, this.boundingBox.minZ() + k, Direction.WEST, i);
-                if (mineshaftpieces_mineshaftpiece != null) {
-                    boundingbox = mineshaftpieces_mineshaftpiece.getBoundingBox();
-                    this.childEntranceBoxes.add(new BoundingBox(this.boundingBox.minX(), boundingbox.minY(), boundingbox.minZ(), this.boundingBox.minX() + 1, boundingbox.maxY(), boundingbox.maxZ()));
+                mineshaftpieces_c = MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() + random.nextInt(j) + 1, this.boundingBox.minZ() + k, Direction.WEST, i);
+                if (mineshaftpieces_c != null) {
+                    structureboundingbox = mineshaftpieces_c.getBoundingBox();
+                    this.childEntranceBoxes.add(new BoundingBox(this.boundingBox.minX(), structureboundingbox.minY(), structureboundingbox.minZ(), this.boundingBox.minX() + 1, structureboundingbox.maxY(), structureboundingbox.maxZ()));
                 }
             }
 
             for (k = 0; k < this.boundingBox.getZSpan(); k += 4) {
-                k += randomsource.nextInt(this.boundingBox.getZSpan());
+                k += random.nextInt(this.boundingBox.getZSpan());
                 if (k + 3 > this.boundingBox.getZSpan()) {
                     break;
                 }
 
-                mineshaftpieces_mineshaftpiece = MineshaftPieces.generateAndAddPiece(structurepiece, structurepieceaccessor, randomsource, this.boundingBox.maxX() + 1, this.boundingBox.minY() + randomsource.nextInt(j) + 1, this.boundingBox.minZ() + k, Direction.EAST, i);
-                if (mineshaftpieces_mineshaftpiece != null) {
-                    boundingbox = mineshaftpieces_mineshaftpiece.getBoundingBox();
-                    this.childEntranceBoxes.add(new BoundingBox(this.boundingBox.maxX() - 1, boundingbox.minY(), boundingbox.minZ(), this.boundingBox.maxX(), boundingbox.maxY(), boundingbox.maxZ()));
+                mineshaftpieces_c = MineshaftPieces.generateAndAddPiece(piece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() + random.nextInt(j) + 1, this.boundingBox.minZ() + k, Direction.EAST, i);
+                if (mineshaftpieces_c != null) {
+                    structureboundingbox = mineshaftpieces_c.getBoundingBox();
+                    this.childEntranceBoxes.add(new BoundingBox(this.boundingBox.maxX() - 1, structureboundingbox.minY(), structureboundingbox.minZ(), this.boundingBox.maxX(), structureboundingbox.maxY(), structureboundingbox.maxZ()));
                 }
             }
 
         }
 
         @Override
-        @Override
-        public void postProcess(WorldGenLevel worldgenlevel, StructureManager structuremanager, ChunkGenerator chunkgenerator, RandomSource randomsource, BoundingBox boundingbox, ChunkPos chunkpos, BlockPos blockpos) {
-            if (!this.isInInvalidLocation(worldgenlevel, boundingbox)) {
-                this.generateBox(worldgenlevel, boundingbox, this.boundingBox.minX(), this.boundingBox.minY() + 1, this.boundingBox.minZ(), this.boundingBox.maxX(), Math.min(this.boundingBox.minY() + 3, this.boundingBox.maxY()), this.boundingBox.maxZ(), MineshaftPieces.MineShaftRoom.CAVE_AIR, MineshaftPieces.MineShaftRoom.CAVE_AIR, false);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            if (!this.isInInvalidLocation(level, box)) {
+                this.generateBox(level, box, this.boundingBox.minX(), this.boundingBox.minY() + 1, this.boundingBox.minZ(), this.boundingBox.maxX(), Math.min(this.boundingBox.minY() + 3, this.boundingBox.maxY()), this.boundingBox.maxZ(), MineshaftPieces.MineShaftRoom.CAVE_AIR, MineshaftPieces.MineShaftRoom.CAVE_AIR, false);
                 Iterator iterator = this.childEntranceBoxes.iterator();
 
                 while (iterator.hasNext()) {
-                    BoundingBox boundingbox1 = (BoundingBox) iterator.next();
+                    BoundingBox structureboundingbox1 = (BoundingBox) iterator.next();
 
-                    this.generateBox(worldgenlevel, boundingbox, boundingbox1.minX(), boundingbox1.maxY() - 2, boundingbox1.minZ(), boundingbox1.maxX(), boundingbox1.maxY(), boundingbox1.maxZ(), MineshaftPieces.MineShaftRoom.CAVE_AIR, MineshaftPieces.MineShaftRoom.CAVE_AIR, false);
+                    this.generateBox(level, box, structureboundingbox1.minX(), structureboundingbox1.maxY() - 2, structureboundingbox1.minZ(), structureboundingbox1.maxX(), structureboundingbox1.maxY(), structureboundingbox1.maxZ(), MineshaftPieces.MineShaftRoom.CAVE_AIR, MineshaftPieces.MineShaftRoom.CAVE_AIR, false);
                 }
 
-                this.generateUpperHalfSphere(worldgenlevel, boundingbox, this.boundingBox.minX(), this.boundingBox.minY() + 4, this.boundingBox.minZ(), this.boundingBox.maxX(), this.boundingBox.maxY(), this.boundingBox.maxZ(), MineshaftPieces.MineShaftRoom.CAVE_AIR, false);
+                this.generateUpperHalfSphere(level, box, this.boundingBox.minX(), this.boundingBox.minY() + 4, this.boundingBox.minZ(), this.boundingBox.maxX(), this.boundingBox.maxY(), this.boundingBox.maxZ(), MineshaftPieces.MineShaftRoom.CAVE_AIR, false);
             }
         }
 
         @Override
-        @Override
-        public void move(int i, int j, int k) {
-            super.move(i, j, k);
+        public void move(int x, int y, int z) {
+            super.move(x, y, z);
             Iterator iterator = this.childEntranceBoxes.iterator();
 
             while (iterator.hasNext()) {
-                BoundingBox boundingbox = (BoundingBox) iterator.next();
+                BoundingBox structureboundingbox = (BoundingBox) iterator.next();
 
-                boundingbox.move(i, j, k);
+                structureboundingbox.move(x, y, z);
             }
 
         }
 
         @Override
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext structurepieceserializationcontext, CompoundTag compoundtag) {
-            super.addAdditionalSaveData(structurepieceserializationcontext, compoundtag);
-            DataResult dataresult = BoundingBox.CODEC.listOf().encodeStart(NbtOps.INSTANCE, this.childEntranceBoxes);
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            DataResult<Tag> dataresult = BoundingBox.CODEC.listOf().encodeStart(NbtOps.INSTANCE, this.childEntranceBoxes); // CraftBukkit - decompile error
             Logger logger = MineshaftPieces.LOGGER;
 
             Objects.requireNonNull(logger);
-            dataresult.resultOrPartial(logger::error).ifPresent((tag) -> {
-                compoundtag.put("Entrances", tag);
+            dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+                tag.put("Entrances", nbtbase);
             });
         }
     }
