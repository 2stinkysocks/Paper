--- a/net/minecraft/world/level/gameevent/GameEventDispatcher.java
+++ b/net/minecraft/world/level/gameevent/GameEventDispatcher.java
@@ -10,30 +10,44 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftGameEvent;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.event.world.GenericGameEvent;
+// CraftBukkit end
 
 public class GameEventDispatcher {
 
     private final ServerLevel level;
 
-    public GameEventDispatcher(ServerLevel serverlevel) {
-        this.level = serverlevel;
+    public GameEventDispatcher(ServerLevel level) {
+        this.level = level;
     }
 
-    public void post(GameEvent gameevent, Vec3 vec3, GameEvent.Context gameevent_context) {
-        int i = gameevent.getNotificationRadius();
-        BlockPos blockpos = BlockPos.containing(vec3);
-        int j = SectionPos.blockToSectionCoord(blockpos.getX() - i);
-        int k = SectionPos.blockToSectionCoord(blockpos.getY() - i);
-        int l = SectionPos.blockToSectionCoord(blockpos.getZ() - i);
-        int i1 = SectionPos.blockToSectionCoord(blockpos.getX() + i);
-        int j1 = SectionPos.blockToSectionCoord(blockpos.getY() + i);
-        int k1 = SectionPos.blockToSectionCoord(blockpos.getZ() + i);
+    public void post(GameEvent event, Vec3 pos, GameEvent.Context context) {
+        int i = event.getNotificationRadius();
+        BlockPos blockposition = BlockPos.containing(pos);
+        // CraftBukkit start
+        GenericGameEvent event1 = new GenericGameEvent(CraftGameEvent.minecraftToBukkit(event), CraftLocation.toBukkit(blockposition, level.getWorld()), (context.sourceEntity() == null) ? null : context.sourceEntity().getBukkitEntity(), i, !Bukkit.isPrimaryThread());
+        level.getCraftServer().getPluginManager().callEvent(event1);
+        if (event1.isCancelled()) {
+            return;
+        }
+        i = event1.getRadius();
+        // CraftBukkit end
+        int j = SectionPos.blockToSectionCoord(blockposition.getX() - i);
+        int k = SectionPos.blockToSectionCoord(blockposition.getY() - i);
+        int l = SectionPos.blockToSectionCoord(blockposition.getZ() - i);
+        int i1 = SectionPos.blockToSectionCoord(blockposition.getX() + i);
+        int j1 = SectionPos.blockToSectionCoord(blockposition.getY() + i);
+        int k1 = SectionPos.blockToSectionCoord(blockposition.getZ() + i);
         List<GameEvent.ListenerInfo> list = new ArrayList();
-        GameEventListenerRegistry.ListenerVisitor gameeventlistenerregistry_listenervisitor = (gameeventlistener, vec31) -> {
-            if (gameeventlistener.getDeliveryMode() == GameEventListener.DeliveryMode.BY_DISTANCE) {
-                list.add(new GameEvent.ListenerInfo(gameevent, vec3, gameevent_context, gameeventlistener, vec31));
+        GameEventListenerRegistry.ListenerVisitor gameeventlistenerregistry_a = (gameeventlistener, vec3d1) -> {
+            if (gameeventlistener.getDeliveryMode() == GameEventListener.a.BY_DISTANCE) {
+                list.add(new GameEvent.ListenerInfo(event, pos, context, gameeventlistener, vec3d1));
             } else {
-                gameeventlistener.handleGameEvent(this.level, gameevent, gameevent_context, vec3);
+                gameeventlistener.handleGameEvent(this.level, event, context, pos);
             }
 
         };
@@ -41,11 +55,11 @@
 
         for (int l1 = j; l1 <= i1; ++l1) {
             for (int i2 = l; i2 <= k1; ++i2) {
-                LevelChunk levelchunk = this.level.getChunkSource().getChunkNow(l1, i2);
+                LevelChunk chunk = this.level.getChunkSource().getChunkNow(l1, i2);
 
-                if (levelchunk != null) {
+                if (chunk != null) {
                     for (int j2 = k; j2 <= j1; ++j2) {
-                        flag |= levelchunk.getListenerRegistry(j2).visitInRangeListeners(gameevent, vec3, gameevent_context, gameeventlistenerregistry_listenervisitor);
+                        flag |= chunk.getListenerRegistry(j2).visitInRangeListeners(event, pos, context, gameeventlistenerregistry_a);
                     }
                 }
             }
@@ -56,20 +70,20 @@
         }
 
         if (flag) {
-            DebugPackets.sendGameEventInfo(this.level, gameevent, vec3);
+            DebugPackets.sendGameEventInfo(this.level, event, pos);
         }
 
     }
 
-    private void handleGameEventMessagesInQueue(List<GameEvent.ListenerInfo> list) {
-        Collections.sort(list);
-        Iterator iterator = list.iterator();
+    private void handleGameEventMessagesInQueue(List<GameEvent.ListenerInfo> listenerInfos) {
+        Collections.sort(listenerInfos);
+        Iterator iterator = listenerInfos.iterator();
 
         while (iterator.hasNext()) {
-            GameEvent.ListenerInfo gameevent_listenerinfo = (GameEvent.ListenerInfo) iterator.next();
-            GameEventListener gameeventlistener = gameevent_listenerinfo.recipient();
+            GameEvent.ListenerInfo gameevent_b = (GameEvent.ListenerInfo) iterator.next();
+            GameEventListener gameeventlistener = gameevent_b.recipient();
 
-            gameeventlistener.handleGameEvent(this.level, gameevent_listenerinfo.gameEvent(), gameevent_listenerinfo.context(), gameevent_listenerinfo.source());
+            gameeventlistener.handleGameEvent(this.level, gameevent_b.gameEvent(), gameevent_b.context(), gameevent_b.source());
         }
 
     }
