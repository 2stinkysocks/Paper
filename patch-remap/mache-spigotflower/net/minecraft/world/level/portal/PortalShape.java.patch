--- a/net/minecraft/world/level/portal/PortalShape.java
+++ b/net/minecraft/world/level/portal/PortalShape.java
@@ -15,12 +15,16 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.NetherPortalBlock;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftPortalEvent;
+import org.bukkit.event.world.PortalCreateEvent;
+// CraftBukkit end
 
 public class PortalShape {
 
@@ -28,8 +32,8 @@
     public static final int MAX_WIDTH = 21;
     private static final int MIN_HEIGHT = 3;
     public static final int MAX_HEIGHT = 21;
-    private static final BlockBehaviour.StatePredicate FRAME = (blockstate, blockgetter, blockpos) -> {
-        return blockstate.is(Blocks.OBSIDIAN);
+    private static final BlockBehaviour.StatePredicate FRAME = (iblockdata, iblockaccess, blockposition) -> {
+        return iblockdata.is(Blocks.OBSIDIAN);
     };
     private static final float SAFE_TRAVEL_MAX_ENTITY_XY = 4.0F;
     private static final double SAFE_TRAVEL_MAX_VERTICAL_DELTA = 1.0D;
@@ -41,32 +45,34 @@
     private BlockPos bottomLeft;
     private int height;
     private final int width;
+    org.bukkit.craftbukkit.util.BlockStateListPopulator blocks; // CraftBukkit - add field
 
-    public static Optional<PortalShape> findEmptyPortalShape(LevelAccessor levelaccessor, BlockPos blockpos, Direction.Axis direction_axis) {
-        return findPortalShape(levelaccessor, blockpos, (portalshape) -> {
-            return portalshape.isValid() && portalshape.numPortalBlocks == 0;
-        }, direction_axis);
+    public static Optional<PortalShape> findEmptyPortalShape(LevelAccessor level, BlockPos bottomLeft, Direction.Axis axis) {
+        return findPortalShape(level, bottomLeft, (blockportalshape) -> {
+            return blockportalshape.isValid() && blockportalshape.numPortalBlocks == 0;
+        }, axis);
     }
 
-    public static Optional<PortalShape> findPortalShape(LevelAccessor levelaccessor, BlockPos blockpos, Predicate<PortalShape> predicate, Direction.Axis direction_axis) {
-        Optional<PortalShape> optional = Optional.of(new PortalShape(levelaccessor, blockpos, direction_axis)).filter(predicate);
+    public static Optional<PortalShape> findPortalShape(LevelAccessor level, BlockPos bottomLeft, Predicate<PortalShape> predicate, Direction.Axis axis) {
+        Optional<PortalShape> optional = Optional.of(new PortalShape(level, bottomLeft, axis)).filter(predicate);
 
         if (optional.isPresent()) {
             return optional;
         } else {
-            Direction.Axis direction_axis1 = direction_axis == Direction.Axis.X ? Direction.Axis.Z : Direction.Axis.X;
+            Direction.Axis enumdirection_enumaxis1 = axis == Direction.Axis.X ? Direction.Axis.Z : Direction.Axis.X;
 
-            return Optional.of(new PortalShape(levelaccessor, blockpos, direction_axis1)).filter(predicate);
+            return Optional.of(new PortalShape(level, bottomLeft, enumdirection_enumaxis1)).filter(predicate);
         }
     }
 
-    public PortalShape(LevelAccessor levelaccessor, BlockPos blockpos, Direction.Axis direction_axis) {
-        this.level = levelaccessor;
-        this.axis = direction_axis;
-        this.rightDir = direction_axis == Direction.Axis.X ? Direction.WEST : Direction.SOUTH;
-        this.bottomLeft = this.calculateBottomLeft(blockpos);
+    public PortalShape(LevelAccessor level, BlockPos bottomLeft, Direction.Axis axis) {
+        blocks = new org.bukkit.craftbukkit.util.BlockStateListPopulator(level.getMinecraftWorld()); // CraftBukkit
+        this.level = level;
+        this.axis = axis;
+        this.rightDir = axis == Direction.Axis.X ? Direction.WEST : Direction.SOUTH;
+        this.bottomLeft = this.calculateBottomLeft(bottomLeft);
         if (this.bottomLeft == null) {
-            this.bottomLeft = blockpos;
+            this.bottomLeft = bottomLeft;
             this.width = 1;
             this.height = 1;
         } else {
@@ -79,15 +85,15 @@
     }
 
     @Nullable
-    private BlockPos calculateBottomLeft(BlockPos blockpos) {
-        for (int i = Math.max(this.level.getMinBuildHeight(), blockpos.getY() - 21); blockpos.getY() > i && isEmpty(this.level.getBlockState(blockpos.below())); blockpos = blockpos.below()) {
+    private BlockPos calculateBottomLeft(BlockPos pos) {
+        for (int i = Math.max(this.level.getMinBuildHeight(), pos.getY() - 21); pos.getY() > i && isEmpty(this.level.getBlockState(pos.below())); pos = pos.below()) {
             ;
         }
 
-        Direction direction = this.rightDir.getOpposite();
-        int j = this.getDistanceUntilEdgeAboveFrame(blockpos, direction) - 1;
+        Direction enumdirection = this.rightDir.getOpposite();
+        int j = this.getDistanceUntilEdgeAboveFrame(pos, enumdirection) - 1;
 
-        return j < 0 ? null : blockpos.relative(direction, j);
+        return j < 0 ? null : pos.relative(enumdirection, j);
     }
 
     private int calculateWidth() {
@@ -96,159 +102,182 @@
         return i >= 2 && i <= 21 ? i : 0;
     }
 
-    private int getDistanceUntilEdgeAboveFrame(BlockPos blockpos, Direction direction) {
-        BlockPos.MutableBlockPos blockpos_mutableblockpos = new BlockPos.MutableBlockPos();
+    private int getDistanceUntilEdgeAboveFrame(BlockPos pos, Direction direction) {
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
 
         for (int i = 0; i <= 21; ++i) {
-            blockpos_mutableblockpos.set(blockpos).move(direction, i);
-            BlockState blockstate = this.level.getBlockState(blockpos_mutableblockpos);
+            blockposition_mutableblockposition.set(pos).move(direction, i);
+            IBlockData iblockdata = this.level.getBlockState(blockposition_mutableblockposition);
 
-            if (!isEmpty(blockstate)) {
-                if (PortalShape.FRAME.test(blockstate, this.level, blockpos_mutableblockpos)) {
+            if (!isEmpty(iblockdata)) {
+                if (PortalShape.FRAME.test(iblockdata, this.level, blockposition_mutableblockposition)) {
+                    blocks.setBlock(blockposition_mutableblockposition, iblockdata, 18); // CraftBukkit - lower left / right
                     return i;
                 }
                 break;
             }
 
-            BlockState blockstate1 = this.level.getBlockState(blockpos_mutableblockpos.move(Direction.DOWN));
+            IBlockData iblockdata1 = this.level.getBlockState(blockposition_mutableblockposition.move(Direction.DOWN));
 
-            if (!PortalShape.FRAME.test(blockstate1, this.level, blockpos_mutableblockpos)) {
+            if (!PortalShape.FRAME.test(iblockdata1, this.level, blockposition_mutableblockposition)) {
                 break;
             }
+            blocks.setBlock(blockposition_mutableblockposition, iblockdata1, 18); // CraftBukkit - bottom row
         }
 
         return 0;
     }
 
     private int calculateHeight() {
-        BlockPos.MutableBlockPos blockpos_mutableblockpos = new BlockPos.MutableBlockPos();
-        int i = this.getDistanceUntilTop(blockpos_mutableblockpos);
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
+        int i = this.getDistanceUntilTop(blockposition_mutableblockposition);
 
-        return i >= 3 && i <= 21 && this.hasTopFrame(blockpos_mutableblockpos, i) ? i : 0;
+        return i >= 3 && i <= 21 && this.hasTopFrame(blockposition_mutableblockposition, i) ? i : 0;
     }
 
-    private boolean hasTopFrame(BlockPos.MutableBlockPos blockpos_mutableblockpos, int i) {
+    private boolean hasTopFrame(BlockPos.MutableBlockPos pos, int distanceToTop) {
         for (int j = 0; j < this.width; ++j) {
-            BlockPos.MutableBlockPos blockpos_mutableblockpos1 = blockpos_mutableblockpos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, j);
+            BlockPos.MutableBlockPos blockposition_mutableblockposition1 = pos.set(this.bottomLeft).move(Direction.UP, distanceToTop).move(this.rightDir, j);
 
-            if (!PortalShape.FRAME.test(this.level.getBlockState(blockpos_mutableblockpos1), this.level, blockpos_mutableblockpos1)) {
+            if (!PortalShape.FRAME.test(this.level.getBlockState(blockposition_mutableblockposition1), this.level, blockposition_mutableblockposition1)) {
                 return false;
             }
+            blocks.setBlock(blockposition_mutableblockposition1, this.level.getBlockState(blockposition_mutableblockposition1), 18); // CraftBukkit - upper row
         }
 
         return true;
     }
 
-    private int getDistanceUntilTop(BlockPos.MutableBlockPos blockpos_mutableblockpos) {
+    private int getDistanceUntilTop(BlockPos.MutableBlockPos pos) {
         for (int i = 0; i < 21; ++i) {
-            blockpos_mutableblockpos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, -1);
-            if (!PortalShape.FRAME.test(this.level.getBlockState(blockpos_mutableblockpos), this.level, blockpos_mutableblockpos)) {
+            pos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, -1);
+            if (!PortalShape.FRAME.test(this.level.getBlockState(pos), this.level, pos)) {
                 return i;
             }
 
-            blockpos_mutableblockpos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, this.width);
-            if (!PortalShape.FRAME.test(this.level.getBlockState(blockpos_mutableblockpos), this.level, blockpos_mutableblockpos)) {
+            pos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, this.width);
+            if (!PortalShape.FRAME.test(this.level.getBlockState(pos), this.level, pos)) {
                 return i;
             }
 
             for (int j = 0; j < this.width; ++j) {
-                blockpos_mutableblockpos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, j);
-                BlockState blockstate = this.level.getBlockState(blockpos_mutableblockpos);
+                pos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, j);
+                IBlockData iblockdata = this.level.getBlockState(pos);
 
-                if (!isEmpty(blockstate)) {
+                if (!isEmpty(iblockdata)) {
                     return i;
                 }
 
-                if (blockstate.is(Blocks.NETHER_PORTAL)) {
+                if (iblockdata.is(Blocks.NETHER_PORTAL)) {
                     ++this.numPortalBlocks;
                 }
             }
+            // CraftBukkit start - left and right
+            blocks.setBlock(pos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, -1), this.level.getBlockState(pos), 18);
+            blocks.setBlock(pos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, this.width), this.level.getBlockState(pos), 18);
+            // CraftBukkit end
         }
 
         return 21;
     }
 
-    private static boolean isEmpty(BlockState blockstate) {
-        return blockstate.isAir() || blockstate.is(BlockTags.FIRE) || blockstate.is(Blocks.NETHER_PORTAL);
+    private static boolean isEmpty(IBlockData state) {
+        return state.isAir() || state.is(BlockTags.FIRE) || state.is(Blocks.NETHER_PORTAL);
     }
 
     public boolean isValid() {
         return this.bottomLeft != null && this.width >= 2 && this.width <= 21 && this.height >= 3 && this.height <= 21;
     }
 
-    public void createPortalBlocks() {
-        BlockState blockstate = (BlockState) Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, this.axis);
+    // CraftBukkit start - return boolean
+    public boolean createPortalBlocks() {
+        org.bukkit.World bworld = this.level.getMinecraftWorld().getWorld();
 
-        BlockPos.betweenClosed(this.bottomLeft, this.bottomLeft.relative(Direction.UP, this.height - 1).relative(this.rightDir, this.width - 1)).forEach((blockpos) -> {
-            this.level.setBlock(blockpos, blockstate, 18);
+        // Copy below for loop
+        IBlockData iblockdata = (IBlockData) Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, this.axis);
+
+        BlockPos.betweenClosed(this.bottomLeft, this.bottomLeft.relative(Direction.UP, this.height - 1).relative(this.rightDir, this.width - 1)).forEach((blockposition) -> {
+            blocks.setBlock(blockposition, iblockdata, 18);
         });
+
+        PortalCreateEvent event = new PortalCreateEvent((java.util.List<org.bukkit.block.BlockState>) (java.util.List) blocks.getList(), bworld, null, PortalCreateEvent.CreateReason.FIRE);
+        this.level.getMinecraftWorld().getServer().server.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) {
+            return false;
+        }
+        // CraftBukkit end
+        BlockPos.betweenClosed(this.bottomLeft, this.bottomLeft.relative(Direction.UP, this.height - 1).relative(this.rightDir, this.width - 1)).forEach((blockposition) -> {
+            this.level.setBlock(blockposition, iblockdata, 18);
+        });
+        return true; // CraftBukkit
     }
 
     public boolean isComplete() {
         return this.isValid() && this.numPortalBlocks == this.width * this.height;
     }
 
-    public static Vec3 getRelativePosition(BlockUtil.FoundRectangle blockutil_foundrectangle, Direction.Axis direction_axis, Vec3 vec3, EntityDimensions entitydimensions) {
-        double d0 = (double) blockutil_foundrectangle.axis1Size - (double) entitydimensions.width;
-        double d1 = (double) blockutil_foundrectangle.axis2Size - (double) entitydimensions.height;
-        BlockPos blockpos = blockutil_foundrectangle.minCorner;
+    public static Vec3 getRelativePosition(BlockUtil.FoundRectangle foundRectangle, Direction.Axis axis, Vec3 pos, EntityDimensions entityDimensions) {
+        double d0 = (double) foundRectangle.axis1Size - (double) entityDimensions.width;
+        double d1 = (double) foundRectangle.axis2Size - (double) entityDimensions.height;
+        BlockPos blockposition = foundRectangle.minCorner;
         double d2;
         double d3;
 
         if (d0 > 0.0D) {
-            d2 = (double) blockpos.get(direction_axis) + (double) entitydimensions.width / 2.0D;
-            d3 = Mth.clamp(Mth.inverseLerp(vec3.get(direction_axis) - d2, 0.0D, d0), 0.0D, 1.0D);
+            d2 = (double) blockposition.get(axis) + (double) entityDimensions.width / 2.0D;
+            d3 = Mth.clamp(Mth.inverseLerp(pos.get(axis) - d2, 0.0D, d0), 0.0D, 1.0D);
         } else {
             d3 = 0.5D;
         }
 
-        Direction.Axis direction_axis1;
+        Direction.Axis enumdirection_enumaxis1;
 
         if (d1 > 0.0D) {
-            direction_axis1 = Direction.Axis.Y;
-            d2 = Mth.clamp(Mth.inverseLerp(vec3.get(direction_axis1) - (double) blockpos.get(direction_axis1), 0.0D, d1), 0.0D, 1.0D);
+            enumdirection_enumaxis1 = Direction.Axis.Y;
+            d2 = Mth.clamp(Mth.inverseLerp(pos.get(enumdirection_enumaxis1) - (double) blockposition.get(enumdirection_enumaxis1), 0.0D, d1), 0.0D, 1.0D);
         } else {
             d2 = 0.0D;
         }
 
-        direction_axis1 = direction_axis == Direction.Axis.X ? Direction.Axis.Z : Direction.Axis.X;
-        double d4 = vec3.get(direction_axis1) - ((double) blockpos.get(direction_axis1) + 0.5D);
+        enumdirection_enumaxis1 = axis == Direction.Axis.X ? Direction.Axis.Z : Direction.Axis.X;
+        double d4 = pos.get(enumdirection_enumaxis1) - ((double) blockposition.get(enumdirection_enumaxis1) + 0.5D);
 
         return new Vec3(d3, d2, d4);
     }
 
-    public static PortalInfo createPortalInfo(ServerLevel serverlevel, BlockUtil.FoundRectangle blockutil_foundrectangle, Direction.Axis direction_axis, Vec3 vec3, Entity entity, Vec3 vec31, float f, float f1) {
-        BlockPos blockpos = blockutil_foundrectangle.minCorner;
-        BlockState blockstate = serverlevel.getBlockState(blockpos);
-        Direction.Axis direction_axis1 = (Direction.Axis) blockstate.getOptionalValue(BlockStateProperties.HORIZONTAL_AXIS).orElse(Direction.Axis.X);
-        double d0 = (double) blockutil_foundrectangle.axis1Size;
-        double d1 = (double) blockutil_foundrectangle.axis2Size;
-        EntityDimensions entitydimensions = entity.getDimensions(entity.getPose());
-        int i = direction_axis == direction_axis1 ? 0 : 90;
-        Vec3 vec32 = direction_axis == direction_axis1 ? vec31 : new Vec3(vec31.z, vec31.y, -vec31.x);
-        double d2 = (double) entitydimensions.width / 2.0D + (d0 - (double) entitydimensions.width) * vec3.x();
-        double d3 = (d1 - (double) entitydimensions.height) * vec3.y();
-        double d4 = 0.5D + vec3.z();
-        boolean flag = direction_axis1 == Direction.Axis.X;
-        Vec3 vec33 = new Vec3((double) blockpos.getX() + (flag ? d2 : d4), (double) blockpos.getY() + d3, (double) blockpos.getZ() + (flag ? d4 : d2));
-        Vec3 vec34 = findCollisionFreePosition(vec33, serverlevel, entity, entitydimensions);
+    public static PortalInfo createPortalInfo(ServerLevel worldserver, BlockUtil.FoundRectangle blockutil_rectangle, Direction.Axis enumdirection_enumaxis, Vec3 vec3d, Entity entity, Vec3 vec3d1, float f, float f1, CraftPortalEvent portalEventInfo) { // CraftBukkit
+        BlockPos blockposition = blockutil_rectangle.minCorner;
+        IBlockData iblockdata = worldserver.getBlockState(blockposition);
+        Direction.Axis enumdirection_enumaxis1 = (Direction.Axis) iblockdata.getOptionalValue(BlockStateProperties.HORIZONTAL_AXIS).orElse(Direction.Axis.X);
+        double d0 = (double) blockutil_rectangle.axis1Size;
+        double d1 = (double) blockutil_rectangle.axis2Size;
+        EntityDimensions entitysize = entity.getDimensions(entity.getPose());
+        int i = enumdirection_enumaxis == enumdirection_enumaxis1 ? 0 : 90;
+        Vec3 vec3d2 = enumdirection_enumaxis == enumdirection_enumaxis1 ? vec3d1 : new Vec3(vec3d1.z, vec3d1.y, -vec3d1.x);
+        double d2 = (double) entitysize.width / 2.0D + (d0 - (double) entitysize.width) * vec3d.x();
+        double d3 = (d1 - (double) entitysize.height) * vec3d.y();
+        double d4 = 0.5D + vec3d.z();
+        boolean flag = enumdirection_enumaxis1 == Direction.Axis.X;
+        Vec3 vec3d3 = new Vec3((double) blockposition.getX() + (flag ? d2 : d4), (double) blockposition.getY() + d3, (double) blockposition.getZ() + (flag ? d4 : d2));
+        Vec3 vec3d4 = findCollisionFreePosition(vec3d3, worldserver, entity, entitysize);
 
-        return new PortalInfo(vec34, vec32, f + (float) i, f1);
+        return new PortalInfo(vec3d4, vec3d2, f + (float) i, f1, worldserver, portalEventInfo); // CraftBukkit
     }
 
-    private static Vec3 findCollisionFreePosition(Vec3 vec3, ServerLevel serverlevel, Entity entity, EntityDimensions entitydimensions) {
-        if (entitydimensions.width <= 4.0F && entitydimensions.height <= 4.0F) {
-            double d0 = (double) entitydimensions.height / 2.0D;
-            Vec3 vec31 = vec3.add(0.0D, d0, 0.0D);
-            VoxelShape voxelshape = Shapes.create(AABB.ofSize(vec31, (double) entitydimensions.width, 0.0D, (double) entitydimensions.width).expandTowards(0.0D, 1.0D, 0.0D).inflate(1.0E-6D));
-            Optional<Vec3> optional = serverlevel.findFreePosition(entity, voxelshape, vec31, (double) entitydimensions.width, (double) entitydimensions.height, (double) entitydimensions.width);
-            Optional<Vec3> optional1 = optional.map((vec32) -> {
-                return vec32.subtract(0.0D, d0, 0.0D);
+    private static Vec3 findCollisionFreePosition(Vec3 pos, ServerLevel level, Entity entity, EntityDimensions dimensions) {
+        if (dimensions.width <= 4.0F && dimensions.height <= 4.0F) {
+            double d0 = (double) dimensions.height / 2.0D;
+            Vec3 vec3d1 = pos.add(0.0D, d0, 0.0D);
+            VoxelShape voxelshape = Shapes.create(AABB.ofSize(vec3d1, (double) dimensions.width, 0.0D, (double) dimensions.width).expandTowards(0.0D, 1.0D, 0.0D).inflate(1.0E-6D));
+            Optional<Vec3> optional = level.findFreePosition(entity, voxelshape, vec3d1, (double) dimensions.width, (double) dimensions.height, (double) dimensions.width);
+            Optional<Vec3> optional1 = optional.map((vec3d2) -> {
+                return vec3d2.subtract(0.0D, d0, 0.0D);
             });
 
-            return (Vec3) optional1.orElse(vec3);
+            return (Vec3) optional1.orElse(pos);
         } else {
-            return vec3;
+            return pos;
         }
     }
 }
