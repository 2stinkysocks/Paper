--- a/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -15,6 +15,7 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundMapItemDataPacket;
@@ -32,6 +33,15 @@
 import net.minecraft.world.level.saveddata.SavedData;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import java.util.UUID;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.map.CraftMapView;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+// CraftBukkit end
+
 public class MapItemSavedData extends SavedData {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -39,246 +49,293 @@
     private static final int HALF_MAP_SIZE = 64;
     public static final int MAX_SCALE = 4;
     public static final int TRACKED_DECORATION_LIMIT = 256;
-    public final int centerX;
-    public final int centerZ;
-    public final ResourceKey<Level> dimension;
-    private final boolean trackingPosition;
-    private final boolean unlimitedTracking;
-    public final byte scale;
+    public int centerX;
+    public int centerZ;
+    public ResourceKey<Level> dimension;
+    public boolean trackingPosition;
+    public boolean unlimitedTracking;
+    public byte scale;
     public byte[] colors = new byte[16384];
-    public final boolean locked;
-    private final List<MapItemSavedData.HoldingPlayer> carriedBy = Lists.newArrayList();
-    private final Map<Player, MapItemSavedData.HoldingPlayer> carriedByPlayers = Maps.newHashMap();
+    public boolean locked;
+    public final List<MapItemSavedData.HoldingPlayer> carriedBy = Lists.newArrayList();
+    public final Map<Player, MapItemSavedData.HoldingPlayer> carriedByPlayers = Maps.newHashMap();
     private final Map<String, MapBanner> bannerMarkers = Maps.newHashMap();
-    final Map<String, MapDecoration> decorations = Maps.newLinkedHashMap();
+    public final Map<String, MapDecoration> decorations = Maps.newLinkedHashMap();
     private final Map<String, MapFrame> frameMarkers = Maps.newHashMap();
     private int trackedDecorationCount;
 
-    public static SavedData.Factory<MapItemSavedData> factory() {
-        return new SavedData.Factory<>(() -> {
+    // CraftBukkit start
+    public final CraftMapView mapView;
+    private CraftServer server;
+    public UUID uniqueId = null;
+    public String id;
+    // CraftBukkit end
+
+    public static SavedData.a<MapItemSavedData> factory() {
+        return new SavedData.a<>(() -> {
             throw new IllegalStateException("Should never create an empty map saved data");
         }, MapItemSavedData::load, DataFixTypes.SAVED_DATA_MAP_DATA);
     }
 
-    private MapItemSavedData(int i, int j, byte b0, boolean flag, boolean flag1, boolean flag2, ResourceKey<Level> resourcekey) {
-        this.scale = b0;
-        this.centerX = i;
-        this.centerZ = j;
-        this.dimension = resourcekey;
-        this.trackingPosition = flag;
-        this.unlimitedTracking = flag1;
-        this.locked = flag2;
+    private MapItemSavedData(int x, int z, byte scale, boolean trackingPosition, boolean unlimitedTracking, boolean locked, ResourceKey<Level> dimension) {
+        this.scale = scale;
+        this.centerX = x;
+        this.centerZ = z;
+        this.dimension = dimension;
+        this.trackingPosition = trackingPosition;
+        this.unlimitedTracking = unlimitedTracking;
+        this.locked = locked;
         this.setDirty();
+        // CraftBukkit start
+        mapView = new CraftMapView(this);
+        server = (CraftServer) org.bukkit.Bukkit.getServer();
+        // CraftBukkit end
     }
 
-    public static MapItemSavedData createFresh(double d0, double d1, byte b0, boolean flag, boolean flag1, ResourceKey<Level> resourcekey) {
-        int i = 128 * (1 << b0);
-        int j = Mth.floor((d0 + 64.0D) / (double) i);
+    public static MapItemSavedData createFresh(double x, double d1, byte z, boolean flag, boolean scale, ResourceKey<Level> trackingPosition) {
+        int i = 128 * (1 << z);
+        int j = Mth.floor((x + 64.0D) / (double) i);
         int k = Mth.floor((d1 + 64.0D) / (double) i);
         int l = j * i + i / 2 - 64;
         int i1 = k * i + i / 2 - 64;
 
-        return new MapItemSavedData(l, i1, b0, flag, flag1, false, resourcekey);
+        return new MapItemSavedData(l, i1, z, flag, scale, false, trackingPosition);
     }
 
-    public static MapItemSavedData createForClient(byte b0, boolean flag, ResourceKey<Level> resourcekey) {
-        return new MapItemSavedData(0, 0, b0, false, false, flag, resourcekey);
+    public static MapItemSavedData createForClient(byte scale, boolean locked, ResourceKey<Level> dimension) {
+        return new MapItemSavedData(0, 0, scale, false, false, locked, dimension);
     }
 
-    public static MapItemSavedData load(CompoundTag compoundtag) {
-        DataResult dataresult = DimensionType.parseLegacy(new Dynamic(NbtOps.INSTANCE, compoundtag.get("dimension")));
+    public static MapItemSavedData load(CompoundTag compoundTag) {
+        DataResult<ResourceKey<Level>> dataresult = DimensionType.parseLegacy(new Dynamic(NbtOps.INSTANCE, compoundTag.get("dimension"))); // CraftBukkit - decompile error
         Logger logger = MapItemSavedData.LOGGER;
 
         Objects.requireNonNull(logger);
-        ResourceKey<Level> resourcekey = (ResourceKey) dataresult.resultOrPartial(logger::error).orElseThrow(() -> {
-            return new IllegalArgumentException("Invalid map dimension: " + compoundtag.get("dimension"));
+        // CraftBukkit start
+        ResourceKey<Level> resourcekey = dataresult.resultOrPartial(logger::error).orElseGet(() -> {
+            long least = compoundTag.getLong("UUIDLeast");
+            long most = compoundTag.getLong("UUIDMost");
+
+            if (least != 0L && most != 0L) {
+                UUID uniqueId = new UUID(most, least);
+
+                CraftWorld world = (CraftWorld) Bukkit.getWorld(uniqueId);
+                // Check if the stored world details are correct.
+                if (world == null) {
+                    /* All Maps which do not have their valid world loaded are set to a dimension which hopefully won't be reached.
+                       This is to prevent them being corrupted with the wrong map data. */
+                    // PAIL: Use Vanilla exception handling for now
+                } else {
+                    return world.getHandle().dimension();
+                }
+            }
+            throw new IllegalArgumentException("Invalid map dimension: " + compoundTag.get("dimension"));
+            // CraftBukkit end
         });
-        int i = compoundtag.getInt("xCenter");
-        int j = compoundtag.getInt("zCenter");
-        byte b0 = (byte) Mth.clamp(compoundtag.getByte("scale"), 0, 4);
-        boolean flag = !compoundtag.contains("trackingPosition", 1) || compoundtag.getBoolean("trackingPosition");
-        boolean flag1 = compoundtag.getBoolean("unlimitedTracking");
-        boolean flag2 = compoundtag.getBoolean("locked");
-        MapItemSavedData mapitemsaveddata = new MapItemSavedData(i, j, b0, flag, flag1, flag2, resourcekey);
-        byte[] abyte = compoundtag.getByteArray("colors");
+        int i = compoundTag.getInt("xCenter");
+        int j = compoundTag.getInt("zCenter");
+        byte b0 = (byte) Mth.clamp(compoundTag.getByte("scale"), 0, 4);
+        boolean flag = !compoundTag.contains("trackingPosition", 1) || compoundTag.getBoolean("trackingPosition");
+        boolean flag1 = compoundTag.getBoolean("unlimitedTracking");
+        boolean flag2 = compoundTag.getBoolean("locked");
+        MapItemSavedData worldmap = new MapItemSavedData(i, j, b0, flag, flag1, flag2, resourcekey);
+        byte[] abyte = compoundTag.getByteArray("colors");
 
         if (abyte.length == 16384) {
-            mapitemsaveddata.colors = abyte;
+            worldmap.colors = abyte;
         }
 
-        ListTag listtag = compoundtag.getList("banners", 10);
+        ListTag nbttaglist = compoundTag.getList("banners", 10);
 
-        for (int k = 0; k < listtag.size(); ++k) {
-            MapBanner mapbanner = MapBanner.load(listtag.getCompound(k));
+        for (int k = 0; k < nbttaglist.size(); ++k) {
+            MapBanner mapiconbanner = MapBanner.load(nbttaglist.getCompound(k));
 
-            mapitemsaveddata.bannerMarkers.put(mapbanner.getId(), mapbanner);
-            mapitemsaveddata.addDecoration(mapbanner.getDecoration(), (LevelAccessor) null, mapbanner.getId(), (double) mapbanner.getPos().getX(), (double) mapbanner.getPos().getZ(), 180.0D, mapbanner.getName());
+            worldmap.bannerMarkers.put(mapiconbanner.getId(), mapiconbanner);
+            worldmap.addDecoration(mapiconbanner.getDecoration(), (LevelAccessor) null, mapiconbanner.getId(), (double) mapiconbanner.getPos().getX(), (double) mapiconbanner.getPos().getZ(), 180.0D, mapiconbanner.getName());
         }
 
-        ListTag listtag1 = compoundtag.getList("frames", 10);
+        ListTag nbttaglist1 = compoundTag.getList("frames", 10);
 
-        for (int l = 0; l < listtag1.size(); ++l) {
-            MapFrame mapframe = MapFrame.load(listtag1.getCompound(l));
+        for (int l = 0; l < nbttaglist1.size(); ++l) {
+            MapFrame worldmapframe = MapFrame.load(nbttaglist1.getCompound(l));
 
-            mapitemsaveddata.frameMarkers.put(mapframe.getId(), mapframe);
-            mapitemsaveddata.addDecoration(MapDecoration.Type.FRAME, (LevelAccessor) null, "frame-" + mapframe.getEntityId(), (double) mapframe.getPos().getX(), (double) mapframe.getPos().getZ(), (double) mapframe.getRotation(), (Component) null);
+            worldmap.frameMarkers.put(worldmapframe.getId(), worldmapframe);
+            worldmap.addDecoration(MapDecoration.Type.FRAME, (LevelAccessor) null, "frame-" + worldmapframe.getEntityId(), (double) worldmapframe.getPos().getX(), (double) worldmapframe.getPos().getZ(), (double) worldmapframe.getRotation(), (Component) null);
         }
 
-        return mapitemsaveddata;
+        return worldmap;
     }
 
     @Override
-    @Override
-    public CompoundTag save(CompoundTag compoundtag) {
-        DataResult dataresult = ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.dimension.location());
+    public CompoundTag save(CompoundTag compound) {
+        DataResult<Tag> dataresult = ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.dimension.location()); // CraftBukkit - decompile error
         Logger logger = MapItemSavedData.LOGGER;
 
         Objects.requireNonNull(logger);
-        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> {
-            compoundtag.put("dimension", tag);
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+            compound.put("dimension", nbtbase);
         });
-        compoundtag.putInt("xCenter", this.centerX);
-        compoundtag.putInt("zCenter", this.centerZ);
-        compoundtag.putByte("scale", this.scale);
-        compoundtag.putByteArray("colors", this.colors);
-        compoundtag.putBoolean("trackingPosition", this.trackingPosition);
-        compoundtag.putBoolean("unlimitedTracking", this.unlimitedTracking);
-        compoundtag.putBoolean("locked", this.locked);
-        ListTag listtag = new ListTag();
+        // CraftBukkit start
+        if (true) {
+            if (this.uniqueId == null) {
+                for (org.bukkit.World world : server.getWorlds()) {
+                    CraftWorld cWorld = (CraftWorld) world;
+                    if (cWorld.getHandle().dimension() == this.dimension) {
+                        this.uniqueId = cWorld.getUID();
+                        break;
+                    }
+                }
+            }
+            /* Perform a second check to see if a matching world was found, this is a necessary
+               change incase Maps are forcefully unlinked from a World and lack a UID.*/
+            if (this.uniqueId != null) {
+                compound.putLong("UUIDLeast", this.uniqueId.getLeastSignificantBits());
+                compound.putLong("UUIDMost", this.uniqueId.getMostSignificantBits());
+            }
+        }
+        // CraftBukkit end
+        compound.putInt("xCenter", this.centerX);
+        compound.putInt("zCenter", this.centerZ);
+        compound.putByte("scale", this.scale);
+        compound.putByteArray("colors", this.colors);
+        compound.putBoolean("trackingPosition", this.trackingPosition);
+        compound.putBoolean("unlimitedTracking", this.unlimitedTracking);
+        compound.putBoolean("locked", this.locked);
+        ListTag nbttaglist = new ListTag();
         Iterator iterator = this.bannerMarkers.values().iterator();
 
         while (iterator.hasNext()) {
-            MapBanner mapbanner = (MapBanner) iterator.next();
+            MapBanner mapiconbanner = (MapBanner) iterator.next();
 
-            listtag.add(mapbanner.save());
+            nbttaglist.add(mapiconbanner.save());
         }
 
-        compoundtag.put("banners", listtag);
-        ListTag listtag1 = new ListTag();
+        compound.put("banners", nbttaglist);
+        ListTag nbttaglist1 = new ListTag();
         Iterator iterator1 = this.frameMarkers.values().iterator();
 
         while (iterator1.hasNext()) {
-            MapFrame mapframe = (MapFrame) iterator1.next();
+            MapFrame worldmapframe = (MapFrame) iterator1.next();
 
-            listtag1.add(mapframe.save());
+            nbttaglist1.add(worldmapframe.save());
         }
 
-        compoundtag.put("frames", listtag1);
-        return compoundtag;
+        compound.put("frames", nbttaglist1);
+        return compound;
     }
 
     public MapItemSavedData locked() {
-        MapItemSavedData mapitemsaveddata = new MapItemSavedData(this.centerX, this.centerZ, this.scale, this.trackingPosition, this.unlimitedTracking, true, this.dimension);
+        MapItemSavedData worldmap = new MapItemSavedData(this.centerX, this.centerZ, this.scale, this.trackingPosition, this.unlimitedTracking, true, this.dimension);
 
-        mapitemsaveddata.bannerMarkers.putAll(this.bannerMarkers);
-        mapitemsaveddata.decorations.putAll(this.decorations);
-        mapitemsaveddata.trackedDecorationCount = this.trackedDecorationCount;
-        System.arraycopy(this.colors, 0, mapitemsaveddata.colors, 0, this.colors.length);
-        mapitemsaveddata.setDirty();
-        return mapitemsaveddata;
+        worldmap.bannerMarkers.putAll(this.bannerMarkers);
+        worldmap.decorations.putAll(this.decorations);
+        worldmap.trackedDecorationCount = this.trackedDecorationCount;
+        System.arraycopy(this.colors, 0, worldmap.colors, 0, this.colors.length);
+        worldmap.setDirty();
+        return worldmap;
     }
 
-    public MapItemSavedData scaled(int i) {
-        return createFresh((double) this.centerX, (double) this.centerZ, (byte) Mth.clamp(this.scale + i, 0, 4), this.trackingPosition, this.unlimitedTracking, this.dimension);
+    public MapItemSavedData scaled(int scalar) {
+        return createFresh((double) this.centerX, (double) this.centerZ, (byte) Mth.clamp(this.scale + scalar, 0, 4), this.trackingPosition, this.unlimitedTracking, this.dimension);
     }
 
-    public void tickCarriedBy(Player player, ItemStack itemstack) {
+    public void tickCarriedBy(Player player, ItemStack mapStack) {
         if (!this.carriedByPlayers.containsKey(player)) {
-            MapItemSavedData.HoldingPlayer mapitemsaveddata_holdingplayer = new MapItemSavedData.HoldingPlayer(player);
+            MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = new MapItemSavedData.HoldingPlayer(player);
 
-            this.carriedByPlayers.put(player, mapitemsaveddata_holdingplayer);
-            this.carriedBy.add(mapitemsaveddata_holdingplayer);
+            this.carriedByPlayers.put(player, worldmap_worldmaphumantracker);
+            this.carriedBy.add(worldmap_worldmaphumantracker);
         }
 
-        if (!player.getInventory().contains(itemstack)) {
+        if (!player.getInventory().contains(mapStack)) {
             this.removeDecoration(player.getName().getString());
         }
 
         for (int i = 0; i < this.carriedBy.size(); ++i) {
-            MapItemSavedData.HoldingPlayer mapitemsaveddata_holdingplayer1 = (MapItemSavedData.HoldingPlayer) this.carriedBy.get(i);
-            String s = mapitemsaveddata_holdingplayer1.player.getName().getString();
+            MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker1 = (MapItemSavedData.HoldingPlayer) this.carriedBy.get(i);
+            String s = worldmap_worldmaphumantracker1.player.getName().getString();
 
-            if (!mapitemsaveddata_holdingplayer1.player.isRemoved() && (mapitemsaveddata_holdingplayer1.player.getInventory().contains(itemstack) || itemstack.isFramed())) {
-                if (!itemstack.isFramed() && mapitemsaveddata_holdingplayer1.player.level().dimension() == this.dimension && this.trackingPosition) {
-                    this.addDecoration(MapDecoration.Type.PLAYER, mapitemsaveddata_holdingplayer1.player.level(), s, mapitemsaveddata_holdingplayer1.player.getX(), mapitemsaveddata_holdingplayer1.player.getZ(), (double) mapitemsaveddata_holdingplayer1.player.getYRot(), (Component) null);
+            if (!worldmap_worldmaphumantracker1.player.isRemoved() && (worldmap_worldmaphumantracker1.player.getInventory().contains(mapStack) || mapStack.isFramed())) {
+                if (!mapStack.isFramed() && worldmap_worldmaphumantracker1.player.level().dimension() == this.dimension && this.trackingPosition) {
+                    this.addDecoration(MapDecoration.Type.PLAYER, worldmap_worldmaphumantracker1.player.level(), s, worldmap_worldmaphumantracker1.player.getX(), worldmap_worldmaphumantracker1.player.getZ(), (double) worldmap_worldmaphumantracker1.player.getYRot(), (Component) null);
                 }
             } else {
-                this.carriedByPlayers.remove(mapitemsaveddata_holdingplayer1.player);
-                this.carriedBy.remove(mapitemsaveddata_holdingplayer1);
+                this.carriedByPlayers.remove(worldmap_worldmaphumantracker1.player);
+                this.carriedBy.remove(worldmap_worldmaphumantracker1);
                 this.removeDecoration(s);
             }
         }
 
-        if (itemstack.isFramed() && this.trackingPosition) {
-            ItemFrame itemframe = itemstack.getFrame();
-            BlockPos blockpos = itemframe.getPos();
-            MapFrame mapframe = (MapFrame) this.frameMarkers.get(MapFrame.frameId(blockpos));
+        if (mapStack.isFramed() && this.trackingPosition) {
+            ItemFrame entityitemframe = mapStack.getFrame();
+            BlockPos blockposition = entityitemframe.getPos();
+            MapFrame worldmapframe = (MapFrame) this.frameMarkers.get(MapFrame.frameId(blockposition));
 
-            if (mapframe != null && itemframe.getId() != mapframe.getEntityId() && this.frameMarkers.containsKey(mapframe.getId())) {
-                this.removeDecoration("frame-" + mapframe.getEntityId());
+            if (worldmapframe != null && entityitemframe.getId() != worldmapframe.getEntityId() && this.frameMarkers.containsKey(worldmapframe.getId())) {
+                this.removeDecoration("frame-" + worldmapframe.getEntityId());
             }
 
-            MapFrame mapframe1 = new MapFrame(blockpos, itemframe.getDirection().get2DDataValue() * 90, itemframe.getId());
+            MapFrame worldmapframe1 = new MapFrame(blockposition, entityitemframe.getDirection().get2DDataValue() * 90, entityitemframe.getId());
 
-            this.addDecoration(MapDecoration.Type.FRAME, player.level(), "frame-" + itemframe.getId(), (double) blockpos.getX(), (double) blockpos.getZ(), (double) (itemframe.getDirection().get2DDataValue() * 90), (Component) null);
-            this.frameMarkers.put(mapframe1.getId(), mapframe1);
+            this.addDecoration(MapDecoration.Type.FRAME, player.level(), "frame-" + entityitemframe.getId(), (double) blockposition.getX(), (double) blockposition.getZ(), (double) (entityitemframe.getDirection().get2DDataValue() * 90), (Component) null);
+            this.frameMarkers.put(worldmapframe1.getId(), worldmapframe1);
         }
 
-        CompoundTag compoundtag = itemstack.getTag();
+        CompoundTag nbttagcompound = mapStack.getTag();
 
-        if (compoundtag != null && compoundtag.contains("Decorations", 9)) {
-            ListTag listtag = compoundtag.getList("Decorations", 10);
+        if (nbttagcompound != null && nbttagcompound.contains("Decorations", 9)) {
+            ListTag nbttaglist = nbttagcompound.getList("Decorations", 10);
 
-            for (int j = 0; j < listtag.size(); ++j) {
-                CompoundTag compoundtag1 = listtag.getCompound(j);
+            for (int j = 0; j < nbttaglist.size(); ++j) {
+                CompoundTag nbttagcompound1 = nbttaglist.getCompound(j);
 
-                if (!this.decorations.containsKey(compoundtag1.getString("id"))) {
-                    this.addDecoration(MapDecoration.Type.byIcon(compoundtag1.getByte("type")), player.level(), compoundtag1.getString("id"), compoundtag1.getDouble("x"), compoundtag1.getDouble("z"), compoundtag1.getDouble("rot"), (Component) null);
+                if (!this.decorations.containsKey(nbttagcompound1.getString("id"))) {
+                    this.addDecoration(MapDecoration.Type.byIcon(nbttagcompound1.getByte("type")), player.level(), nbttagcompound1.getString("id"), nbttagcompound1.getDouble("x"), nbttagcompound1.getDouble("z"), nbttagcompound1.getDouble("rot"), (Component) null);
                 }
             }
         }
 
     }
 
-    private void removeDecoration(String s) {
-        MapDecoration mapdecoration = (MapDecoration) this.decorations.remove(s);
+    private void removeDecoration(String identifier) {
+        MapDecoration mapicon = (MapDecoration) this.decorations.remove(identifier);
 
-        if (mapdecoration != null && mapdecoration.type().shouldTrackCount()) {
+        if (mapicon != null && mapicon.type().shouldTrackCount()) {
             --this.trackedDecorationCount;
         }
 
         this.setDecorationsDirty();
     }
 
-    public static void addTargetDecoration(ItemStack itemstack, BlockPos blockpos, String s, MapDecoration.Type mapdecoration_type) {
-        ListTag listtag;
+    public static void addTargetDecoration(ItemStack map, BlockPos target, String decorationName, MapDecoration.Type type) {
+        ListTag nbttaglist;
 
-        if (itemstack.hasTag() && itemstack.getTag().contains("Decorations", 9)) {
-            listtag = itemstack.getTag().getList("Decorations", 10);
+        if (map.hasTag() && map.getTag().contains("Decorations", 9)) {
+            nbttaglist = map.getTag().getList("Decorations", 10);
         } else {
-            listtag = new ListTag();
-            itemstack.addTagElement("Decorations", listtag);
+            nbttaglist = new ListTag();
+            map.addTagElement("Decorations", nbttaglist);
         }
 
-        CompoundTag compoundtag = new CompoundTag();
+        CompoundTag nbttagcompound = new CompoundTag();
 
-        compoundtag.putByte("type", mapdecoration_type.getIcon());
-        compoundtag.putString("id", s);
-        compoundtag.putDouble("x", (double) blockpos.getX());
-        compoundtag.putDouble("z", (double) blockpos.getZ());
-        compoundtag.putDouble("rot", 180.0D);
-        listtag.add(compoundtag);
-        if (mapdecoration_type.hasMapColor()) {
-            CompoundTag compoundtag1 = itemstack.getOrCreateTagElement("display");
+        nbttagcompound.putByte("type", type.getIcon());
+        nbttagcompound.putString("id", decorationName);
+        nbttagcompound.putDouble("x", (double) target.getX());
+        nbttagcompound.putDouble("z", (double) target.getZ());
+        nbttagcompound.putDouble("rot", 180.0D);
+        nbttaglist.add(nbttagcompound);
+        if (type.hasMapColor()) {
+            CompoundTag nbttagcompound1 = map.getOrCreateTagElement("display");
 
-            compoundtag1.putInt("MapColor", mapdecoration_type.getMapColor());
+            nbttagcompound1.putInt("MapColor", type.getMapColor());
         }
 
     }
 
-    private void addDecoration(MapDecoration.Type mapdecoration_type, @Nullable LevelAccessor levelaccessor, String s, double d0, double d1, double d2, @Nullable Component component) {
+    private void addDecoration(MapDecoration.Type type, @Nullable LevelAccessor level, String decorationName, double levelX, double d1, double levelZ, @Nullable Component ichatbasecomponent) {
         int i = 1 << this.scale;
-        float f = (float) (d0 - (double) this.centerX) / (float) i;
+        float f = (float) (levelX - (double) this.centerX) / (float) i;
         float f1 = (float) (d1 - (double) this.centerZ) / (float) i;
         byte b0 = (byte) ((int) ((double) (f * 2.0F) + 0.5D));
         byte b1 = (byte) ((int) ((double) (f1 * 2.0F) + 0.5D));
@@ -286,30 +343,30 @@
         byte b2;
 
         if (f >= -63.0F && f1 >= -63.0F && f <= 63.0F && f1 <= 63.0F) {
-            d2 += d2 < 0.0D ? -8.0D : 8.0D;
-            b2 = (byte) ((int) (d2 * 16.0D / 360.0D));
-            if (this.dimension == Level.NETHER && levelaccessor != null) {
-                int j = (int) (levelaccessor.getLevelData().getDayTime() / 10L);
+            levelZ += levelZ < 0.0D ? -8.0D : 8.0D;
+            b2 = (byte) ((int) (levelZ * 16.0D / 360.0D));
+            if (this.dimension == Level.NETHER && level != null) {
+                int j = (int) (level.getLevelData().getDayTime() / 10L);
 
                 b2 = (byte) (j * j * 34187121 + j * 121 >> 15 & 15);
             }
         } else {
-            if (mapdecoration_type != MapDecoration.Type.PLAYER) {
-                this.removeDecoration(s);
+            if (type != MapDecoration.Type.PLAYER) {
+                this.removeDecoration(decorationName);
                 return;
             }
 
             boolean flag1 = true;
 
             if (Math.abs(f) < 320.0F && Math.abs(f1) < 320.0F) {
-                mapdecoration_type = MapDecoration.Type.PLAYER_OFF_MAP;
+                type = MapDecoration.Type.PLAYER_OFF_MAP;
             } else {
                 if (!this.unlimitedTracking) {
-                    this.removeDecoration(s);
+                    this.removeDecoration(decorationName);
                     return;
                 }
 
-                mapdecoration_type = MapDecoration.Type.PLAYER_OFF_LIMITS;
+                type = MapDecoration.Type.PLAYER_OFF_LIMITS;
             }
 
             b2 = 0;
@@ -330,15 +387,15 @@
             }
         }
 
-        MapDecoration mapdecoration = new MapDecoration(mapdecoration_type, b0, b1, b2, component);
-        MapDecoration mapdecoration1 = (MapDecoration) this.decorations.put(s, mapdecoration);
+        MapDecoration mapicon = new MapDecoration(type, b0, b1, b2, ichatbasecomponent);
+        MapDecoration mapicon1 = (MapDecoration) this.decorations.put(decorationName, mapicon);
 
-        if (!mapdecoration.equals(mapdecoration1)) {
-            if (mapdecoration1 != null && mapdecoration1.type().shouldTrackCount()) {
+        if (!mapicon.equals(mapicon1)) {
+            if (mapicon1 != null && mapicon1.type().shouldTrackCount()) {
                 --this.trackedDecorationCount;
             }
 
-            if (mapdecoration_type.shouldTrackCount()) {
+            if (type.shouldTrackCount()) {
                 ++this.trackedDecorationCount;
             }
 
@@ -348,64 +405,64 @@
     }
 
     @Nullable
-    public Packet<?> getUpdatePacket(int i, Player player) {
-        MapItemSavedData.HoldingPlayer mapitemsaveddata_holdingplayer = (MapItemSavedData.HoldingPlayer) this.carriedByPlayers.get(player);
+    public Packet<?> getUpdatePacket(int mapId, Player player) {
+        MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = (MapItemSavedData.HoldingPlayer) this.carriedByPlayers.get(player);
 
-        return mapitemsaveddata_holdingplayer == null ? null : mapitemsaveddata_holdingplayer.nextUpdatePacket(i);
+        return worldmap_worldmaphumantracker == null ? null : worldmap_worldmaphumantracker.nextUpdatePacket(mapId);
     }
 
-    private void setColorsDirty(int i, int j) {
+    public void setColorsDirty(int x, int z) {
         this.setDirty();
         Iterator iterator = this.carriedBy.iterator();
 
         while (iterator.hasNext()) {
-            MapItemSavedData.HoldingPlayer mapitemsaveddata_holdingplayer = (MapItemSavedData.HoldingPlayer) iterator.next();
+            MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = (MapItemSavedData.HoldingPlayer) iterator.next();
 
-            mapitemsaveddata_holdingplayer.markColorsDirty(i, j);
+            worldmap_worldmaphumantracker.markColorsDirty(x, z);
         }
 
     }
 
-    private void setDecorationsDirty() {
+    public void setDecorationsDirty() {
         this.setDirty();
         this.carriedBy.forEach(MapItemSavedData.HoldingPlayer::markDecorationsDirty);
     }
 
     public MapItemSavedData.HoldingPlayer getHoldingPlayer(Player player) {
-        MapItemSavedData.HoldingPlayer mapitemsaveddata_holdingplayer = (MapItemSavedData.HoldingPlayer) this.carriedByPlayers.get(player);
+        MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = (MapItemSavedData.HoldingPlayer) this.carriedByPlayers.get(player);
 
-        if (mapitemsaveddata_holdingplayer == null) {
-            mapitemsaveddata_holdingplayer = new MapItemSavedData.HoldingPlayer(player);
-            this.carriedByPlayers.put(player, mapitemsaveddata_holdingplayer);
-            this.carriedBy.add(mapitemsaveddata_holdingplayer);
+        if (worldmap_worldmaphumantracker == null) {
+            worldmap_worldmaphumantracker = new MapItemSavedData.HoldingPlayer(player);
+            this.carriedByPlayers.put(player, worldmap_worldmaphumantracker);
+            this.carriedBy.add(worldmap_worldmaphumantracker);
         }
 
-        return mapitemsaveddata_holdingplayer;
+        return worldmap_worldmaphumantracker;
     }
 
-    public boolean toggleBanner(LevelAccessor levelaccessor, BlockPos blockpos) {
-        double d0 = (double) blockpos.getX() + 0.5D;
-        double d1 = (double) blockpos.getZ() + 0.5D;
+    public boolean toggleBanner(LevelAccessor accessor, BlockPos pos) {
+        double d0 = (double) pos.getX() + 0.5D;
+        double d1 = (double) pos.getZ() + 0.5D;
         int i = 1 << this.scale;
         double d2 = (d0 - (double) this.centerX) / (double) i;
         double d3 = (d1 - (double) this.centerZ) / (double) i;
         boolean flag = true;
 
         if (d2 >= -63.0D && d3 >= -63.0D && d2 <= 63.0D && d3 <= 63.0D) {
-            MapBanner mapbanner = MapBanner.fromWorld(levelaccessor, blockpos);
+            MapBanner mapiconbanner = MapBanner.fromWorld(accessor, pos);
 
-            if (mapbanner == null) {
+            if (mapiconbanner == null) {
                 return false;
             }
 
-            if (this.bannerMarkers.remove(mapbanner.getId(), mapbanner)) {
-                this.removeDecoration(mapbanner.getId());
+            if (this.bannerMarkers.remove(mapiconbanner.getId(), mapiconbanner)) {
+                this.removeDecoration(mapiconbanner.getId());
                 return true;
             }
 
             if (!this.isTrackedCountOverLimit(256)) {
-                this.bannerMarkers.put(mapbanner.getId(), mapbanner);
-                this.addDecoration(mapbanner.getDecoration(), levelaccessor, mapbanner.getId(), d0, d1, 180.0D, mapbanner.getName());
+                this.bannerMarkers.put(mapiconbanner.getId(), mapiconbanner);
+                this.addDecoration(mapiconbanner.getDecoration(), accessor, mapiconbanner.getId(), d0, d1, 180.0D, mapiconbanner.getName());
                 return true;
             }
         }
@@ -413,18 +470,18 @@
         return false;
     }
 
-    public void checkBanners(BlockGetter blockgetter, int i, int j) {
+    public void checkBanners(BlockGetter reader, int x, int z) {
         Iterator iterator = this.bannerMarkers.values().iterator();
 
         while (iterator.hasNext()) {
-            MapBanner mapbanner = (MapBanner) iterator.next();
+            MapBanner mapiconbanner = (MapBanner) iterator.next();
 
-            if (mapbanner.getPos().getX() == i && mapbanner.getPos().getZ() == j) {
-                MapBanner mapbanner1 = MapBanner.fromWorld(blockgetter, mapbanner.getPos());
+            if (mapiconbanner.getPos().getX() == x && mapiconbanner.getPos().getZ() == z) {
+                MapBanner mapiconbanner1 = MapBanner.fromWorld(reader, mapiconbanner.getPos());
 
-                if (!mapbanner.equals(mapbanner1)) {
+                if (!mapiconbanner.equals(mapiconbanner1)) {
                     iterator.remove();
-                    this.removeDecoration(mapbanner.getId());
+                    this.removeDecoration(mapiconbanner.getId());
                 }
             }
         }
@@ -435,52 +492,52 @@
         return this.bannerMarkers.values();
     }
 
-    public void removedFromFrame(BlockPos blockpos, int i) {
-        this.removeDecoration("frame-" + i);
-        this.frameMarkers.remove(MapFrame.frameId(blockpos));
+    public void removedFromFrame(BlockPos pos, int entityId) {
+        this.removeDecoration("frame-" + entityId);
+        this.frameMarkers.remove(MapFrame.frameId(pos));
     }
 
-    public boolean updateColor(int i, int j, byte b0) {
-        byte b1 = this.colors[i + j * 128];
+    public boolean updateColor(int x, int z, byte color) {
+        byte b1 = this.colors[x + z * 128];
 
-        if (b1 != b0) {
-            this.setColor(i, j, b0);
+        if (b1 != color) {
+            this.setColor(x, z, color);
             return true;
         } else {
             return false;
         }
     }
 
-    public void setColor(int i, int j, byte b0) {
-        this.colors[i + j * 128] = b0;
-        this.setColorsDirty(i, j);
+    public void setColor(int x, int z, byte color) {
+        this.colors[x + z * 128] = color;
+        this.setColorsDirty(x, z);
     }
 
     public boolean isExplorationMap() {
         Iterator iterator = this.decorations.values().iterator();
 
-        MapDecoration mapdecoration;
+        MapDecoration mapicon;
 
         do {
             if (!iterator.hasNext()) {
                 return false;
             }
 
-            mapdecoration = (MapDecoration) iterator.next();
-        } while (!mapdecoration.type().isExplorationMapElement());
+            mapicon = (MapDecoration) iterator.next();
+        } while (!mapicon.type().isExplorationMapElement());
 
         return true;
     }
 
-    public void addClientSideDecorations(List<MapDecoration> list) {
+    public void addClientSideDecorations(List<MapDecoration> decorations) {
         this.decorations.clear();
         this.trackedDecorationCount = 0;
 
-        for (int i = 0; i < list.size(); ++i) {
-            MapDecoration mapdecoration = (MapDecoration) list.get(i);
+        for (int i = 0; i < decorations.size(); ++i) {
+            MapDecoration mapicon = (MapDecoration) decorations.get(i);
 
-            this.decorations.put("icon-" + i, mapdecoration);
-            if (mapdecoration.type().shouldTrackCount()) {
+            this.decorations.put("icon-" + i, mapicon);
+            if (mapicon.type().shouldTrackCount()) {
                 ++this.trackedDecorationCount;
             }
         }
@@ -491,8 +548,8 @@
         return this.decorations.values();
     }
 
-    public boolean isTrackedCountOverLimit(int i) {
-        return this.trackedDecorationCount >= i;
+    public boolean isTrackedCountOverLimit(int trackedCount) {
+        return this.trackedDecorationCount >= trackedCount;
     }
 
     public class HoldingPlayer {
@@ -507,11 +564,11 @@
         private int tick;
         public int step;
 
-        HoldingPlayer(Player player) {
-            this.player = player;
+        HoldingPlayer(Player entityhuman) {
+            this.player = entityhuman;
         }
 
-        private MapItemSavedData.MapPatch createPatch() {
+        private MapItemSavedData.MapPatch createPatch(byte[] buffer) { // CraftBukkit
             int i = this.minDirtyX;
             int j = this.minDirtyY;
             int k = this.maxDirtyX + 1 - this.minDirtyX;
@@ -520,7 +577,7 @@
 
             for (int i1 = 0; i1 < k; ++i1) {
                 for (int j1 = 0; j1 < l; ++j1) {
-                    abyte[i1 + j1 * k] = MapItemSavedData.this.colors[i + i1 + (j + j1) * 128];
+                    abyte[i1 + j1 * k] = buffer[i + i1 + (j + j1) * 128]; // CraftBukkit
                 }
             }
 
@@ -528,40 +585,50 @@
         }
 
         @Nullable
-        Packet<?> nextUpdatePacket(int i) {
-            MapItemSavedData.MapPatch mapitemsaveddata_mappatch;
+        Packet<?> nextUpdatePacket(int mapId) {
+            MapItemSavedData.MapPatch worldmap_b;
+            org.bukkit.craftbukkit.map.RenderData render = MapItemSavedData.this.mapView.render((org.bukkit.craftbukkit.entity.CraftPlayer) this.player.getBukkitEntity()); // CraftBukkit
 
             if (this.dirtyData) {
                 this.dirtyData = false;
-                mapitemsaveddata_mappatch = this.createPatch();
+                worldmap_b = this.createPatch(render.buffer); // CraftBukkit
             } else {
-                mapitemsaveddata_mappatch = null;
+                worldmap_b = null;
             }
 
             Collection collection;
 
-            if (this.dirtyDecorations && this.tick++ % 5 == 0) {
+            if ((true || this.dirtyDecorations) && this.tick++ % 5 == 0) { // CraftBukkit - custom maps don't update this yet
                 this.dirtyDecorations = false;
-                collection = MapItemSavedData.this.decorations.values();
+                // CraftBukkit start
+                java.util.Collection<MapDecoration> icons = new java.util.ArrayList<MapDecoration>();
+
+                for (org.bukkit.map.MapCursor cursor : render.cursors) {
+                    if (cursor.isVisible()) {
+                        icons.add(new MapDecoration(MapDecoration.Type.byIcon(cursor.getRawType()), cursor.getX(), cursor.getY(), cursor.getDirection(), CraftChatMessage.fromStringOrNull(cursor.getCaption())));
+                    }
+                }
+                collection = icons;
+                // CraftBukkit end
             } else {
                 collection = null;
             }
 
-            return collection == null && mapitemsaveddata_mappatch == null ? null : new ClientboundMapItemDataPacket(i, MapItemSavedData.this.scale, MapItemSavedData.this.locked, collection, mapitemsaveddata_mappatch);
+            return collection == null && worldmap_b == null ? null : new ClientboundMapItemDataPacket(mapId, MapItemSavedData.this.scale, MapItemSavedData.this.locked, collection, worldmap_b);
         }
 
-        void markColorsDirty(int i, int j) {
+        void markColorsDirty(int x, int z) {
             if (this.dirtyData) {
-                this.minDirtyX = Math.min(this.minDirtyX, i);
-                this.minDirtyY = Math.min(this.minDirtyY, j);
-                this.maxDirtyX = Math.max(this.maxDirtyX, i);
-                this.maxDirtyY = Math.max(this.maxDirtyY, j);
+                this.minDirtyX = Math.min(this.minDirtyX, x);
+                this.minDirtyY = Math.min(this.minDirtyY, z);
+                this.maxDirtyX = Math.max(this.maxDirtyX, x);
+                this.maxDirtyY = Math.max(this.maxDirtyY, z);
             } else {
                 this.dirtyData = true;
-                this.minDirtyX = i;
-                this.minDirtyY = j;
-                this.maxDirtyX = i;
-                this.maxDirtyY = j;
+                this.minDirtyX = x;
+                this.minDirtyY = z;
+                this.maxDirtyX = x;
+                this.maxDirtyY = z;
             }
 
         }
@@ -579,18 +646,18 @@
         public final int height;
         public final byte[] mapColors;
 
-        public MapPatch(int i, int j, int k, int l, byte[] abyte) {
-            this.startX = i;
-            this.startY = j;
-            this.width = k;
-            this.height = l;
-            this.mapColors = abyte;
+        public MapPatch(int startX, int startY, int width, int height, byte[] mapColors) {
+            this.startX = startX;
+            this.startY = startY;
+            this.width = width;
+            this.height = height;
+            this.mapColors = mapColors;
         }
 
-        public void applyToMap(MapItemSavedData mapitemsaveddata) {
+        public void applyToMap(MapItemSavedData savedData) {
             for (int i = 0; i < this.width; ++i) {
                 for (int j = 0; j < this.height; ++j) {
-                    mapitemsaveddata.setColor(this.startX + i, this.startY + j, this.mapColors[i + j * this.width]);
+                    savedData.setColor(this.startX + i, this.startY + j, this.mapColors[i + j * this.width]);
                 }
             }
 
