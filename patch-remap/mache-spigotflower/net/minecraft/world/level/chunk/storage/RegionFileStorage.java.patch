--- a/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
+++ b/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
@@ -21,17 +21,17 @@
 
     public static final String ANVIL_EXTENSION = ".mca";
     private static final int MAX_CACHE_SIZE = 256;
-    private final Long2ObjectLinkedOpenHashMap<RegionFile> regionCache = new Long2ObjectLinkedOpenHashMap();
+    public final Long2ObjectLinkedOpenHashMap<RegionFile> regionCache = new Long2ObjectLinkedOpenHashMap();
     private final Path folder;
     private final boolean sync;
 
-    RegionFileStorage(Path path, boolean flag) {
-        this.folder = path;
-        this.sync = flag;
+    RegionFileStorage(Path folder, boolean sync) {
+        this.folder = folder;
+        this.sync = sync;
     }
 
-    private RegionFile getRegionFile(ChunkPos chunkpos) throws IOException {
-        long i = ChunkPos.asLong(chunkpos.getRegionX(), chunkpos.getRegionZ());
+    private RegionFile getRegionFile(ChunkPos chunkcoordintpair, boolean existingOnly) throws IOException { // CraftBukkit
+        long i = ChunkPos.asLong(chunkcoordintpair.getRegionX(), chunkcoordintpair.getRegionZ());
         RegionFile regionfile = (RegionFile) this.regionCache.getAndMoveToFirst(i);
 
         if (regionfile != null) {
@@ -43,8 +43,9 @@
 
             FileUtil.createDirectoriesSafe(this.folder);
             Path path = this.folder;
-            int j = chunkpos.getRegionX();
-            Path path1 = path.resolve("r." + j + "." + chunkpos.getRegionZ() + ".mca");
+            int j = chunkcoordintpair.getRegionX();
+            Path path1 = path.resolve("r." + j + "." + chunkcoordintpair.getRegionZ() + ".mca");
+            if (existingOnly && !java.nio.file.Files.exists(path1)) return null; // CraftBukkit
             RegionFile regionfile1 = new RegionFile(path1, this.folder, this.sync);
 
             this.regionCache.putAndMoveToFirst(i, regionfile1);
@@ -53,20 +54,25 @@
     }
 
     @Nullable
-    public CompoundTag read(ChunkPos chunkpos) throws IOException {
-        RegionFile regionfile = this.getRegionFile(chunkpos);
-        DataInputStream datainputstream = regionfile.getChunkDataInputStream(chunkpos);
+    public CompoundTag read(ChunkPos chunkPos) throws IOException {
+        // CraftBukkit start - SPIGOT-5680: There's no good reason to preemptively create files on read, save that for writing
+        RegionFile regionfile = this.getRegionFile(chunkPos, true);
+        if (regionfile == null) {
+            return null;
+        }
+        // CraftBukkit end
+        DataInputStream datainputstream = regionfile.getChunkDataInputStream(chunkPos);
 
-        CompoundTag compoundtag;
+        CompoundTag nbttagcompound;
         label43:
         {
             try {
                 if (datainputstream != null) {
-                    compoundtag = NbtIo.read((DataInput) datainputstream);
+                    nbttagcompound = NbtIo.read((DataInput) datainputstream);
                     break label43;
                 }
 
-                compoundtag = null;
+                nbttagcompound = null;
             } catch (Throwable throwable) {
                 if (datainputstream != null) {
                     try {
@@ -83,23 +89,28 @@
                 datainputstream.close();
             }
 
-            return compoundtag;
+            return nbttagcompound;
         }
 
         if (datainputstream != null) {
             datainputstream.close();
         }
 
-        return compoundtag;
+        return nbttagcompound;
     }
 
-    public void scanChunk(ChunkPos chunkpos, StreamTagVisitor streamtagvisitor) throws IOException {
-        RegionFile regionfile = this.getRegionFile(chunkpos);
-        DataInputStream datainputstream = regionfile.getChunkDataInputStream(chunkpos);
+    public void scanChunk(ChunkPos chunkPos, StreamTagVisitor visitor) throws IOException {
+        // CraftBukkit start - SPIGOT-5680: There's no good reason to preemptively create files on read, save that for writing
+        RegionFile regionfile = this.getRegionFile(chunkPos, true);
+        if (regionfile == null) {
+            return;
+        }
+        // CraftBukkit end
+        DataInputStream datainputstream = regionfile.getChunkDataInputStream(chunkPos);
 
         try {
             if (datainputstream != null) {
-                NbtIo.parse(datainputstream, streamtagvisitor, NbtAccounter.unlimitedHeap());
+                NbtIo.parse(datainputstream, visitor, NbtAccounter.unlimitedHeap());
             }
         } catch (Throwable throwable) {
             if (datainputstream != null) {
@@ -119,16 +130,16 @@
 
     }
 
-    protected void write(ChunkPos chunkpos, @Nullable CompoundTag compoundtag) throws IOException {
-        RegionFile regionfile = this.getRegionFile(chunkpos);
+    protected void write(ChunkPos chunkPos, @Nullable CompoundTag chunkData) throws IOException {
+        RegionFile regionfile = this.getRegionFile(chunkPos, false); // CraftBukkit
 
-        if (compoundtag == null) {
-            regionfile.clear(chunkpos);
+        if (chunkData == null) {
+            regionfile.clear(chunkPos);
         } else {
-            DataOutputStream dataoutputstream = regionfile.getChunkDataOutputStream(chunkpos);
+            DataOutputStream dataoutputstream = regionfile.getChunkDataOutputStream(chunkPos);
 
             try {
-                NbtIo.write(compoundtag, (DataOutput) dataoutputstream);
+                NbtIo.write(chunkData, (DataOutput) dataoutputstream);
             } catch (Throwable throwable) {
                 if (dataoutputstream != null) {
                     try {
@@ -148,9 +159,8 @@
 
     }
 
-    @Override
     public void close() throws IOException {
-        ExceptionCollector<IOException> exceptioncollector = new ExceptionCollector<>();
+        ExceptionCollector<IOException> exceptionsuppressor = new ExceptionCollector<>();
         ObjectIterator objectiterator = this.regionCache.values().iterator();
 
         while (objectiterator.hasNext()) {
@@ -159,11 +169,11 @@
             try {
                 regionfile.close();
             } catch (IOException ioexception) {
-                exceptioncollector.add(ioexception);
+                exceptionsuppressor.add(ioexception);
             }
         }
 
-        exceptioncollector.throwIfPresent();
+        exceptionsuppressor.throwIfPresent();
     }
 
     public void flush() throws IOException {
