--- a/net/minecraft/world/level/chunk/storage/ChunkStorage.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkStorage.java
@@ -12,10 +12,16 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.level.ServerChunkCache;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.chunk.ChunkGenerator;
+// CraftBukkit start
+import java.util.concurrent.ExecutionException;
+import net.minecraft.world.level.chunk.ChunkStatus;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.structure.LegacyStructureDataHandler;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 
@@ -27,74 +33,118 @@
     @Nullable
     private volatile LegacyStructureDataHandler legacyStructureHandler;
 
-    public ChunkStorage(Path path, DataFixer datafixer, boolean flag) {
-        this.fixerUpper = datafixer;
-        this.worker = new IOWorker(path, flag, "chunk");
+    public ChunkStorage(Path regionFolder, DataFixer fixerUpper, boolean sync) {
+        this.fixerUpper = fixerUpper;
+        this.worker = new IOWorker(regionFolder, sync, "chunk");
     }
 
-    public boolean isOldChunkAround(ChunkPos chunkpos, int i) {
-        return this.worker.isOldChunkAround(chunkpos, i);
+    public boolean isOldChunkAround(ChunkPos pos, int radius) {
+        return this.worker.isOldChunkAround(pos, radius);
     }
 
-    public CompoundTag upgradeChunkTag(ResourceKey<Level> resourcekey, Supplier<DimensionDataStorage> supplier, CompoundTag compoundtag, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> optional) {
-        int i = getVersion(compoundtag);
+    // CraftBukkit start
+    private boolean check(ServerChunkCache cps, int x, int z) {
+        ChunkPos pos = new ChunkPos(x, z);
+        if (cps != null) {
+            com.google.common.base.Preconditions.checkState(org.bukkit.Bukkit.isPrimaryThread(), "primary thread");
+            if (cps.hasChunk(x, z)) {
+                return true;
+            }
+        }
 
+        CompoundTag nbt;
+        try {
+            nbt = read(pos).get().orElse(null);
+        } catch (InterruptedException | ExecutionException ex) {
+            throw new RuntimeException(ex);
+        }
+        if (nbt != null) {
+            CompoundTag level = nbt.getCompound("Level");
+            if (level.getBoolean("TerrainPopulated")) {
+                return true;
+            }
+
+            ChunkStatus status = ChunkStatus.byName(level.getString("Status"));
+            if (status != null && status.isOrAfter(ChunkStatus.FEATURES)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    public CompoundTag upgradeChunkTag(ResourceKey<LevelStem> resourcekey, Supplier<DimensionDataStorage> supplier, CompoundTag nbttagcompound, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> optional, ChunkPos pos, @Nullable LevelAccessor generatoraccess) {
+        // CraftBukkit end
+        int i = getVersion(nbttagcompound);
+
+        // CraftBukkit start
+        if (i < 1466) {
+            CompoundTag level = nbttagcompound.getCompound("Level");
+            if (level.getBoolean("TerrainPopulated") && !level.getBoolean("LightPopulated")) {
+                ServerChunkCache cps = (generatoraccess == null) ? null : ((ServerLevel) generatoraccess).getChunkSource();
+                if (check(cps, pos.x - 1, pos.z) && check(cps, pos.x - 1, pos.z - 1) && check(cps, pos.x, pos.z - 1)) {
+                    level.putBoolean("LightPopulated", true);
+                }
+            }
+        }
+        // CraftBukkit end
+
         if (i < 1493) {
-            compoundtag = DataFixTypes.CHUNK.update(this.fixerUpper, compoundtag, i, 1493);
-            if (compoundtag.getCompound("Level").getBoolean("hasLegacyStructureData")) {
-                LegacyStructureDataHandler legacystructuredatahandler = this.getLegacyStructureHandler(resourcekey, supplier);
+            nbttagcompound = DataFixTypes.CHUNK.update(this.fixerUpper, nbttagcompound, i, 1493);
+            if (nbttagcompound.getCompound("Level").getBoolean("hasLegacyStructureData")) {
+                LegacyStructureDataHandler persistentstructurelegacy = this.getLegacyStructureHandler(resourcekey, supplier);
 
-                compoundtag = legacystructuredatahandler.updateFromLegacy(compoundtag);
+                nbttagcompound = persistentstructurelegacy.updateFromLegacy(nbttagcompound);
             }
         }
 
-        injectDatafixingContext(compoundtag, resourcekey, optional);
-        compoundtag = DataFixTypes.CHUNK.updateToCurrentVersion(this.fixerUpper, compoundtag, Math.max(1493, i));
+        injectDatafixingContext(nbttagcompound, resourcekey, optional);
+        nbttagcompound = DataFixTypes.CHUNK.updateToCurrentVersion(this.fixerUpper, nbttagcompound, Math.max(1493, i));
         if (i < SharedConstants.getCurrentVersion().getDataVersion().getVersion()) {
-            NbtUtils.addCurrentDataVersion(compoundtag);
+            NbtUtils.addCurrentDataVersion(nbttagcompound);
         }
 
-        compoundtag.remove("__context");
-        return compoundtag;
+        nbttagcompound.remove("__context");
+        return nbttagcompound;
     }
 
-    private LegacyStructureDataHandler getLegacyStructureHandler(ResourceKey<Level> resourcekey, Supplier<DimensionDataStorage> supplier) {
-        LegacyStructureDataHandler legacystructuredatahandler = this.legacyStructureHandler;
+    private LegacyStructureDataHandler getLegacyStructureHandler(ResourceKey<LevelStem> level, Supplier<DimensionDataStorage> storage) { // CraftBukkit
+        LegacyStructureDataHandler persistentstructurelegacy = this.legacyStructureHandler;
 
-        if (legacystructuredatahandler == null) {
+        if (persistentstructurelegacy == null) {
             synchronized (this) {
-                legacystructuredatahandler = this.legacyStructureHandler;
-                if (legacystructuredatahandler == null) {
-                    this.legacyStructureHandler = legacystructuredatahandler = LegacyStructureDataHandler.getLegacyStructureHandler(resourcekey, (DimensionDataStorage) supplier.get());
+                persistentstructurelegacy = this.legacyStructureHandler;
+                if (persistentstructurelegacy == null) {
+                    this.legacyStructureHandler = persistentstructurelegacy = LegacyStructureDataHandler.getLegacyStructureHandler(level, (DimensionDataStorage) storage.get());
                 }
             }
         }
 
-        return legacystructuredatahandler;
+        return persistentstructurelegacy;
     }
 
-    public static void injectDatafixingContext(CompoundTag compoundtag, ResourceKey<Level> resourcekey, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> optional) {
-        CompoundTag compoundtag1 = new CompoundTag();
+    public static void injectDatafixingContext(CompoundTag chunkData, ResourceKey<LevelStem> levelKey, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> chunkGeneratorKey) { // CraftBukkit
+        CompoundTag nbttagcompound1 = new CompoundTag();
 
-        compoundtag1.putString("dimension", resourcekey.location().toString());
-        optional.ifPresent((resourcekey1) -> {
-            compoundtag1.putString("generator", resourcekey1.location().toString());
+        nbttagcompound1.putString("dimension", levelKey.location().toString());
+        chunkGeneratorKey.ifPresent((resourcekey1) -> {
+            nbttagcompound1.putString("generator", resourcekey1.location().toString());
         });
-        compoundtag.put("__context", compoundtag1);
+        chunkData.put("__context", nbttagcompound1);
     }
 
-    public static int getVersion(CompoundTag compoundtag) {
-        return NbtUtils.getDataVersion(compoundtag, -1);
+    public static int getVersion(CompoundTag chunkData) {
+        return NbtUtils.getDataVersion(chunkData, -1);
     }
 
-    public CompletableFuture<Optional<CompoundTag>> read(ChunkPos chunkpos) {
-        return this.worker.loadAsync(chunkpos);
+    public CompletableFuture<Optional<CompoundTag>> read(ChunkPos chunkPos) {
+        return this.worker.loadAsync(chunkPos);
     }
 
-    public void write(ChunkPos chunkpos, CompoundTag compoundtag) {
-        this.worker.store(chunkpos, compoundtag);
+    public void write(ChunkPos chunkPos, CompoundTag chunkData) {
+        this.worker.store(chunkPos, chunkData);
         if (this.legacyStructureHandler != null) {
-            this.legacyStructureHandler.removeIndex(chunkpos.toLong());
+            this.legacyStructureHandler.removeIndex(chunkPos.toLong());
         }
 
     }
@@ -103,7 +153,6 @@
         this.worker.synchronize(true).join();
     }
 
-    @Override
     public void close() throws IOException {
         this.worker.close();
     }
