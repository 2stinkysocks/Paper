--- a/net/minecraft/world/level/ClipContext.java
+++ b/net/minecraft/world/level/ClipContext.java
@@ -6,7 +6,7 @@
 import net.minecraft.tags.FluidTags;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.CollisionContext;
@@ -21,16 +21,16 @@
     private final ClipContext.Fluid fluid;
     private final CollisionContext collisionContext;
 
-    public ClipContext(Vec3 vec3, Vec3 vec31, ClipContext.Block clipcontext_block, ClipContext.Fluid clipcontext_fluid, Entity entity) {
-        this(vec3, vec31, clipcontext_block, clipcontext_fluid, CollisionContext.of(entity));
+    public ClipContext(Vec3 from, Vec3 to, ClipContext.Block block, ClipContext.Fluid fluid, Entity entity) {
+        this(from, to, block, fluid, (entity == null) ? CollisionContext.empty() : CollisionContext.of(entity)); // CraftBukkit
     }
 
-    public ClipContext(Vec3 vec3, Vec3 vec31, ClipContext.Block clipcontext_block, ClipContext.Fluid clipcontext_fluid, CollisionContext collisioncontext) {
-        this.from = vec3;
-        this.to = vec31;
-        this.block = clipcontext_block;
-        this.fluid = clipcontext_fluid;
-        this.collisionContext = collisioncontext;
+    public ClipContext(Vec3 vec3d, Vec3 vec3d1, ClipContext.Block raytrace_blockcollisionoption, ClipContext.Fluid raytrace_fluidcollisionoption, CollisionContext voxelshapecollision) {
+        this.from = vec3d;
+        this.to = vec3d1;
+        this.block = raytrace_blockcollisionoption;
+        this.fluid = raytrace_fluidcollisionoption;
+        this.collisionContext = voxelshapecollision;
     }
 
     public Vec3 getTo() {
@@ -41,56 +41,55 @@
         return this.from;
     }
 
-    public VoxelShape getBlockShape(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos) {
-        return this.block.get(blockstate, blockgetter, blockpos, this.collisionContext);
+    public VoxelShape getBlockShape(IBlockData blockState, BlockGetter level, BlockPos pos) {
+        return this.block.get(blockState, level, pos, this.collisionContext);
     }
 
-    public VoxelShape getFluidShape(FluidState fluidstate, BlockGetter blockgetter, BlockPos blockpos) {
-        return this.fluid.canPick(fluidstate) ? fluidstate.getShape(blockgetter, blockpos) : Shapes.empty();
+    public VoxelShape getFluidShape(FluidState state, BlockGetter level, BlockPos pos) {
+        return this.fluid.canPick(state) ? state.getShape(level, pos) : Shapes.empty();
     }
 
     public static enum Block implements ClipContext.ShapeGetter {
 
-        COLLIDER(BlockBehaviour.BlockStateBase::getCollisionShape), OUTLINE(BlockBehaviour.BlockStateBase::getShape), VISUAL(BlockBehaviour.BlockStateBase::getVisualShape), FALLDAMAGE_RESETTING((blockstate, blockgetter, blockpos, collisioncontext) -> {
-            return blockstate.is(BlockTags.FALL_DAMAGE_RESETTING) ? Shapes.block() : Shapes.empty();
+        COLLIDER(BlockBehaviour.BlockStateBase::getCollisionShape), OUTLINE(BlockBehaviour.BlockStateBase::getShape), VISUAL(BlockBehaviour.BlockStateBase::getVisualShape), FALLDAMAGE_RESETTING((iblockdata, iblockaccess, blockposition, voxelshapecollision) -> {
+            return iblockdata.is(BlockTags.FALL_DAMAGE_RESETTING) ? Shapes.block() : Shapes.empty();
         });
 
         private final ClipContext.ShapeGetter shapeGetter;
 
-        private Block(ClipContext.ShapeGetter clipcontext_shapegetter) {
-            this.shapeGetter = clipcontext_shapegetter;
+        private Block(ClipContext.ShapeGetter raytrace_c) {
+            this.shapeGetter = raytrace_c;
         }
 
         @Override
-        @Override
-        public VoxelShape get(BlockState blockstate, BlockGetter blockgetter, BlockPos blockpos, CollisionContext collisioncontext) {
-            return this.shapeGetter.get(blockstate, blockgetter, blockpos, collisioncontext);
+        public VoxelShape get(IBlockData state, BlockGetter block, BlockPos pos, CollisionContext collisionContext) {
+            return this.shapeGetter.get(state, block, pos, collisionContext);
         }
     }
 
     public static enum Fluid {
 
-        NONE((fluidstate) -> {
+        NONE((fluid) -> {
             return false;
-        }), SOURCE_ONLY(FluidState::isSource), ANY((fluidstate) -> {
-            return !fluidstate.isEmpty();
-        }), WATER((fluidstate) -> {
-            return fluidstate.is(FluidTags.WATER);
+        }), SOURCE_ONLY(FluidState::isSource), ANY((fluid) -> {
+            return !fluid.isEmpty();
+        }), WATER((fluid) -> {
+            return fluid.is(FluidTags.WATER);
         });
 
         private final Predicate<FluidState> canPick;
 
-        private Fluid(Predicate<FluidState> predicate) {
+        private Fluid(Predicate<FluidState> predicate) { // CraftBukkit - decompile error
             this.canPick = predicate;
         }
 
-        public boolean canPick(FluidState fluidstate) {
-            return this.canPick.test(fluidstate);
+        public boolean canPick(FluidState state) {
+            return this.canPick.test(state);
         }
     }
 
     public interface ShapeGetter {
 
-        VoxelShape get(BlockState state, BlockGetter block, BlockPos pos, CollisionContext collisionContext);
+        VoxelShape get(IBlockData state, BlockGetter block, BlockPos pos, CollisionContext collisionContext);
     }
 }
