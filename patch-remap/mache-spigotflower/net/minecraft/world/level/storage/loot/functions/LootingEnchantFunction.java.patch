--- a/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
+++ b/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
@@ -22,10 +22,10 @@
 
     public static final int NO_LIMIT = 0;
     public static final Codec<LootingEnchantFunction> CODEC = RecordCodecBuilder.create((instance) -> {
-        return commonFields(instance).and(instance.group(NumberProviders.CODEC.fieldOf("count").forGetter((lootingenchantfunction) -> {
-            return lootingenchantfunction.value;
-        }), ExtraCodecs.strictOptionalField(Codec.INT, "limit", 0).forGetter((lootingenchantfunction) -> {
-            return lootingenchantfunction.limit;
+        return commonFields(instance).and(instance.group(NumberProviders.CODEC.fieldOf("count").forGetter((lootenchantfunction) -> {
+            return lootenchantfunction.value;
+        }), ExtraCodecs.strictOptionalField(Codec.INT, "limit", 0).forGetter((lootenchantfunction) -> {
+            return lootenchantfunction.limit;
         }))).apply(instance, LootingEnchantFunction::new);
     });
     private final NumberProvider value;
@@ -38,13 +38,11 @@
     }
 
     @Override
-    @Override
     public LootItemFunctionType getType() {
         return LootItemFunctions.LOOTING_ENCHANT;
     }
 
     @Override
-    @Override
     public Set<LootContextParam<?>> getReferencedContextParams() {
         return Sets.union(ImmutableSet.of(LootContextParams.KILLER_ENTITY), this.value.getReferencedContextParams());
     }
@@ -54,54 +52,56 @@
     }
 
     @Override
-    @Override
-    public ItemStack run(ItemStack itemstack, LootContext lootcontext) {
-        Entity entity = (Entity) lootcontext.getParamOrNull(LootContextParams.KILLER_ENTITY);
+    public ItemStack run(ItemStack stack, LootContext context) {
+        Entity entity = (Entity) context.getParamOrNull(LootContextParams.KILLER_ENTITY);
 
         if (entity instanceof LivingEntity) {
             int i = EnchantmentHelper.getMobLooting((LivingEntity) entity);
+            // CraftBukkit start - use lootingModifier if set by plugin
+            if (context.hasParam(LootContextParams.LOOTING_MOD)) {
+                i = context.getParamOrNull(LootContextParams.LOOTING_MOD);
+            }
+            // CraftBukkit end
 
-            if (i == 0) {
-                return itemstack;
+            if (i <= 0) { // CraftBukkit - account for possible negative looting values from Bukkit
+                return stack;
             }
 
-            float f = (float) i * this.value.getFloat(lootcontext);
+            float f = (float) i * this.value.getFloat(context);
 
-            itemstack.grow(Math.round(f));
-            if (this.hasLimit() && itemstack.getCount() > this.limit) {
-                itemstack.setCount(this.limit);
+            stack.grow(Math.round(f));
+            if (this.hasLimit() && stack.getCount() > this.limit) {
+                stack.setCount(this.limit);
             }
         }
 
-        return itemstack;
+        return stack;
     }
 
-    public static LootingEnchantFunction.Builder lootingMultiplier(NumberProvider numberprovider) {
-        return new LootingEnchantFunction.Builder(numberprovider);
+    public static LootingEnchantFunction.Builder lootingMultiplier(NumberProvider lootingMultiplier) {
+        return new LootingEnchantFunction.Builder(lootingMultiplier);
     }
 
-    public static class Builder extends LootItemConditionalFunction.Builder<LootingEnchantFunction.Builder> {
+    public static class Builder extends LootItemConditionalFunction.a<LootingEnchantFunction.Builder> {
 
         private final NumberProvider count;
         private int limit = 0;
 
-        public Builder(NumberProvider numberprovider) {
-            this.count = numberprovider;
+        public Builder(NumberProvider lootingMultiplier) {
+            this.count = lootingMultiplier;
         }
 
         @Override
-        @Override
         protected LootingEnchantFunction.Builder getThis() {
             return this;
         }
 
-        public LootingEnchantFunction.Builder setLimit(int i) {
-            this.limit = i;
+        public LootingEnchantFunction.Builder setLimit(int limit) {
+            this.limit = limit;
             return this;
         }
 
         @Override
-        @Override
         public LootItemFunction build() {
             return new LootingEnchantFunction(this.getConditions(), this.count, this.limit);
         }
