--- a/net/minecraft/world/item/crafting/SmithingTransformRecipe.java
+++ b/net/minecraft/world/item/crafting/SmithingTransformRecipe.java
@@ -9,6 +9,13 @@
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
+// CraftBukkit start
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftRecipe;
+import org.bukkit.craftbukkit.inventory.CraftSmithingTransformRecipe;
+import org.bukkit.inventory.Recipe;
+// CraftBukkit end
 
 public class SmithingTransformRecipe implements SmithingRecipe {
 
@@ -17,70 +24,73 @@
     final Ingredient addition;
     final ItemStack result;
 
-    public SmithingTransformRecipe(Ingredient ingredient, Ingredient ingredient1, Ingredient ingredient2, ItemStack itemstack) {
-        this.template = ingredient;
-        this.base = ingredient1;
-        this.addition = ingredient2;
+    public SmithingTransformRecipe(Ingredient recipeitemstack, Ingredient recipeitemstack1, Ingredient recipeitemstack2, ItemStack itemstack) {
+        this.template = recipeitemstack;
+        this.base = recipeitemstack1;
+        this.addition = recipeitemstack2;
         this.result = itemstack;
     }
 
     @Override
-    @Override
     public boolean matches(Container container, Level level) {
         return this.template.test(container.getItem(0)) && this.base.test(container.getItem(1)) && this.addition.test(container.getItem(2));
     }
 
     @Override
-    @Override
-    public ItemStack assemble(Container container, RegistryAccess registryaccess) {
+    public ItemStack assemble(Container container, RegistryAccess registryAccess) {
         ItemStack itemstack = this.result.copy();
-        CompoundTag compoundtag = container.getItem(1).getTag();
+        CompoundTag nbttagcompound = container.getItem(1).getTag();
 
-        if (compoundtag != null) {
-            itemstack.setTag(compoundtag.copy());
+        if (nbttagcompound != null) {
+            itemstack.setTag(nbttagcompound.copy());
         }
 
         return itemstack;
     }
 
     @Override
-    @Override
-    public ItemStack getResultItem(RegistryAccess registryaccess) {
+    public ItemStack getResultItem(RegistryAccess registryAccess) {
         return this.result;
     }
 
     @Override
-    @Override
-    public boolean isTemplateIngredient(ItemStack itemstack) {
-        return this.template.test(itemstack);
+    public boolean isTemplateIngredient(ItemStack stack) {
+        return this.template.test(stack);
     }
 
     @Override
-    @Override
-    public boolean isBaseIngredient(ItemStack itemstack) {
-        return this.base.test(itemstack);
+    public boolean isBaseIngredient(ItemStack stack) {
+        return this.base.test(stack);
     }
 
     @Override
-    @Override
-    public boolean isAdditionIngredient(ItemStack itemstack) {
-        return this.addition.test(itemstack);
+    public boolean isAdditionIngredient(ItemStack stack) {
+        return this.addition.test(stack);
     }
 
     @Override
-    @Override
     public RecipeSerializer<?> getSerializer() {
         return RecipeSerializer.SMITHING_TRANSFORM;
     }
 
     @Override
-    @Override
     public boolean isIncomplete() {
         return Stream.of(this.template, this.base, this.addition).anyMatch(Ingredient::isEmpty);
     }
 
-    public static class Serializer implements RecipeSerializer<SmithingTransformRecipe> {
+    // CraftBukkit start
+    @Override
+    public Recipe toBukkitRecipe(NamespacedKey id) {
+        CraftItemStack result = CraftItemStack.asCraftMirror(this.result);
 
+        CraftSmithingTransformRecipe recipe = new CraftSmithingTransformRecipe(id, result, CraftRecipe.toBukkit(this.template), CraftRecipe.toBukkit(this.base), CraftRecipe.toBukkit(this.addition));
+
+        return recipe;
+    }
+    // CraftBukkit end
+
+    public static class a implements RecipeSerializer<SmithingTransformRecipe> {
+
         private static final Codec<SmithingTransformRecipe> CODEC = RecordCodecBuilder.create((instance) -> {
             return instance.group(Ingredient.CODEC.fieldOf("template").forGetter((smithingtransformrecipe) -> {
                 return smithingtransformrecipe.template;
@@ -93,31 +103,28 @@
             })).apply(instance, SmithingTransformRecipe::new);
         });
 
-        public Serializer() {}
+        public a() {}
 
         @Override
-        @Override
         public Codec<SmithingTransformRecipe> codec() {
-            return SmithingTransformRecipe.Serializer.CODEC;
+            return SmithingTransformRecipe.a.CODEC;
         }
 
         @Override
-        @Override
-        public SmithingTransformRecipe fromNetwork(FriendlyByteBuf friendlybytebuf) {
-            Ingredient ingredient = Ingredient.fromNetwork(friendlybytebuf);
-            Ingredient ingredient1 = Ingredient.fromNetwork(friendlybytebuf);
-            Ingredient ingredient2 = Ingredient.fromNetwork(friendlybytebuf);
-            ItemStack itemstack = friendlybytebuf.readItem();
+        public SmithingTransformRecipe fromNetwork(FriendlyByteBuf packetdataserializer) {
+            Ingredient recipeitemstack = Ingredient.fromNetwork(packetdataserializer);
+            Ingredient recipeitemstack1 = Ingredient.fromNetwork(packetdataserializer);
+            Ingredient recipeitemstack2 = Ingredient.fromNetwork(packetdataserializer);
+            ItemStack itemstack = packetdataserializer.readItem();
 
-            return new SmithingTransformRecipe(ingredient, ingredient1, ingredient2, itemstack);
+            return new SmithingTransformRecipe(recipeitemstack, recipeitemstack1, recipeitemstack2, itemstack);
         }
 
-        @Override
-        public void toNetwork(FriendlyByteBuf friendlybytebuf, SmithingTransformRecipe smithingtransformrecipe) {
-            smithingtransformrecipe.template.toNetwork(friendlybytebuf);
-            smithingtransformrecipe.base.toNetwork(friendlybytebuf);
-            smithingtransformrecipe.addition.toNetwork(friendlybytebuf);
-            friendlybytebuf.writeItem(smithingtransformrecipe.result);
+        public void toNetwork(FriendlyByteBuf packetdataserializer, SmithingTransformRecipe smithingtransformrecipe) {
+            smithingtransformrecipe.template.toNetwork(packetdataserializer);
+            smithingtransformrecipe.base.toNetwork(packetdataserializer);
+            smithingtransformrecipe.addition.toNetwork(packetdataserializer);
+            packetdataserializer.writeItem(smithingtransformrecipe.result);
         }
     }
 }
