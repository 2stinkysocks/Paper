--- a/net/minecraft/world/item/crafting/ShapelessRecipe.java
+++ b/net/minecraft/world/item/crafting/ShapelessRecipe.java
@@ -10,11 +10,17 @@
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.util.ExtraCodecs;
 import net.minecraft.world.entity.player.StackedContents;
-import net.minecraft.world.inventory.CraftingContainer;
+import net.minecraft.world.inventory.InventoryCrafting;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
+// CraftBukkit start
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftRecipe;
+import org.bukkit.craftbukkit.inventory.CraftShapelessRecipe;
+// CraftBukkit end
 
-public class ShapelessRecipe implements CraftingRecipe {
+public class ShapelessRecipe implements RecipeCrafting {
 
     final String group;
     final CraftingBookCategory category;
@@ -28,129 +34,134 @@
         this.ingredients = nonnulllist;
     }
 
+    // CraftBukkit start
+    @SuppressWarnings("unchecked")
     @Override
+    public org.bukkit.inventory.ShapelessRecipe toBukkitRecipe(NamespacedKey id) {
+        CraftItemStack result = CraftItemStack.asCraftMirror(this.result);
+        CraftShapelessRecipe recipe = new CraftShapelessRecipe(id, result, this);
+        recipe.setGroup(this.group);
+        recipe.setCategory(CraftRecipe.getCategory(this.category()));
+
+        for (Ingredient list : this.ingredients) {
+            recipe.addIngredient(CraftRecipe.toBukkit(list));
+        }
+        return recipe;
+    }
+    // CraftBukkit end
+
     @Override
     public RecipeSerializer<?> getSerializer() {
         return RecipeSerializer.SHAPELESS_RECIPE;
     }
 
     @Override
-    @Override
     public String getGroup() {
         return this.group;
     }
 
     @Override
-    @Override
     public CraftingBookCategory category() {
         return this.category;
     }
 
     @Override
-    @Override
-    public ItemStack getResultItem(RegistryAccess registryaccess) {
+    public ItemStack getResultItem(RegistryAccess registryAccess) {
         return this.result;
     }
 
     @Override
-    @Override
     public NonNullList<Ingredient> getIngredients() {
         return this.ingredients;
     }
 
-    @Override
-    public boolean matches(CraftingContainer craftingcontainer, Level level) {
-        StackedContents stackedcontents = new StackedContents();
+    public boolean matches(InventoryCrafting inv, Level level) {
+        StackedContents autorecipestackmanager = new StackedContents();
         int i = 0;
 
-        for (int j = 0; j < craftingcontainer.getContainerSize(); ++j) {
-            ItemStack itemstack = craftingcontainer.getItem(j);
+        for (int j = 0; j < inv.getContainerSize(); ++j) {
+            ItemStack itemstack = inv.getItem(j);
 
             if (!itemstack.isEmpty()) {
                 ++i;
-                stackedcontents.accountStack(itemstack, 1);
+                autorecipestackmanager.accountStack(itemstack, 1);
             }
         }
 
-        return i == this.ingredients.size() && stackedcontents.canCraft(this, (IntList) null);
+        return i == this.ingredients.size() && autorecipestackmanager.canCraft(this, (IntList) null);
     }
 
-    @Override
-    public ItemStack assemble(CraftingContainer craftingcontainer, RegistryAccess registryaccess) {
+    public ItemStack assemble(InventoryCrafting container, RegistryAccess registryAccess) {
         return this.result.copy();
     }
 
     @Override
-    @Override
-    public boolean canCraftInDimensions(int i, int j) {
-        return i * j >= this.ingredients.size();
+    public boolean canCraftInDimensions(int width, int height) {
+        return width * height >= this.ingredients.size();
     }
 
     public static class Serializer implements RecipeSerializer<ShapelessRecipe> {
 
         private static final Codec<ShapelessRecipe> CODEC = RecordCodecBuilder.create((instance) -> {
-            return instance.group(ExtraCodecs.strictOptionalField(Codec.STRING, "group", "").forGetter((shapelessrecipe) -> {
-                return shapelessrecipe.group;
-            }), CraftingBookCategory.CODEC.fieldOf("category").orElse(CraftingBookCategory.MISC).forGetter((shapelessrecipe) -> {
-                return shapelessrecipe.category;
-            }), ItemStack.ITEM_WITH_COUNT_CODEC.fieldOf("result").forGetter((shapelessrecipe) -> {
-                return shapelessrecipe.result;
+            return instance.group(ExtraCodecs.strictOptionalField(Codec.STRING, "group", "").forGetter((shapelessrecipes) -> {
+                return shapelessrecipes.group;
+            }), CraftingBookCategory.CODEC.fieldOf("category").orElse(CraftingBookCategory.MISC).forGetter((shapelessrecipes) -> {
+                return shapelessrecipes.category;
+            }), ItemStack.ITEM_WITH_COUNT_CODEC.fieldOf("result").forGetter((shapelessrecipes) -> {
+                return shapelessrecipes.result;
             }), Ingredient.CODEC_NONEMPTY.listOf().fieldOf("ingredients").flatXmap((list) -> {
-                Ingredient[] aingredient = (Ingredient[]) list.stream().filter((ingredient) -> {
-                    return !ingredient.isEmpty();
+                Ingredient[] arecipeitemstack = (Ingredient[]) list.stream().filter((recipeitemstack) -> {
+                    return !recipeitemstack.isEmpty();
                 }).toArray((i) -> {
                     return new Ingredient[i];
                 });
 
-                return aingredient.length == 0 ? DataResult.error(() -> {
+                return arecipeitemstack.length == 0 ? DataResult.error(() -> {
                     return "No ingredients for shapeless recipe";
-                }) : (aingredient.length > 9 ? DataResult.error(() -> {
+                }) : (arecipeitemstack.length > 9 ? DataResult.error(() -> {
                     return "Too many ingredients for shapeless recipe";
-                }) : DataResult.success(NonNullList.of(Ingredient.EMPTY, aingredient)));
-            }, DataResult::success).forGetter((shapelessrecipe) -> {
-                return shapelessrecipe.ingredients;
+                }) : DataResult.success(NonNullList.of(Ingredient.EMPTY, arecipeitemstack)));
+            }, DataResult::success).forGetter((shapelessrecipes) -> {
+                return shapelessrecipes.ingredients;
             })).apply(instance, ShapelessRecipe::new);
         });
 
         public Serializer() {}
 
         @Override
-        @Override
         public Codec<ShapelessRecipe> codec() {
             return ShapelessRecipe.Serializer.CODEC;
         }
 
         @Override
-        @Override
-        public ShapelessRecipe fromNetwork(FriendlyByteBuf friendlybytebuf) {
-            String s = friendlybytebuf.readUtf();
-            CraftingBookCategory craftingbookcategory = (CraftingBookCategory) friendlybytebuf.readEnum(CraftingBookCategory.class);
-            int i = friendlybytebuf.readVarInt();
+        public ShapelessRecipe fromNetwork(FriendlyByteBuf packetdataserializer) {
+            String s = packetdataserializer.readUtf();
+            CraftingBookCategory craftingbookcategory = (CraftingBookCategory) packetdataserializer.readEnum(CraftingBookCategory.class);
+            int i = packetdataserializer.readVarInt();
             NonNullList<Ingredient> nonnulllist = NonNullList.withSize(i, Ingredient.EMPTY);
 
             for (int j = 0; j < nonnulllist.size(); ++j) {
-                nonnulllist.set(j, Ingredient.fromNetwork(friendlybytebuf));
+                nonnulllist.set(j, Ingredient.fromNetwork(packetdataserializer));
             }
 
-            ItemStack itemstack = friendlybytebuf.readItem();
+            ItemStack itemstack = packetdataserializer.readItem();
 
             return new ShapelessRecipe(s, craftingbookcategory, itemstack, nonnulllist);
         }
 
-        @Override
-        public void toNetwork(FriendlyByteBuf friendlybytebuf, ShapelessRecipe shapelessrecipe) {
-            friendlybytebuf.writeUtf(shapelessrecipe.group);
-            friendlybytebuf.writeEnum(shapelessrecipe.category);
-            friendlybytebuf.writeVarInt(shapelessrecipe.ingredients.size());
-            Iterator iterator = shapelessrecipe.ingredients.iterator();
+        public void toNetwork(FriendlyByteBuf buffer, ShapelessRecipe recipe) {
+            buffer.writeUtf(recipe.group);
+            buffer.writeEnum(recipe.category);
+            buffer.writeVarInt(recipe.ingredients.size());
+            Iterator iterator = recipe.ingredients.iterator();
 
             while (iterator.hasNext()) {
-                Ingredient ingredient = (Ingredient) iterator.next();
+                Ingredient recipeitemstack = (Ingredient) iterator.next();
 
-                ingredient.toNetwork(friendlybytebuf);
+                recipeitemstack.toNetwork(buffer);
             }
 
-            friendlybytebuf.writeItem(shapelessrecipe.result);
+            buffer.writeItem(recipe.result);
         }
     }
 }
