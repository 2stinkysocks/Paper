--- a/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -10,14 +10,14 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -41,48 +41,42 @@
     public static int ticksToBeFrog = Math.abs(-24000);
     public static float HITBOX_WIDTH = 0.4F;
     public static float HITBOX_HEIGHT = 0.3F;
-    private int age;
+    public int age;
     protected static final ImmutableList<SensorType<? extends Sensor<? super Tadpole>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.HURT_BY, SensorType.FROG_TEMPTATIONS);
     protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.BREED_TARGET, MemoryModuleType.IS_PANICKING);
 
-    public Tadpole(EntityType<? extends AbstractFish> entitytype, Level level) {
-        super(entitytype, level);
+    public Tadpole(EntityType<? extends AbstractFish> entityType, Level level) {
+        super(entityType, level);
         this.moveControl = new SmoothSwimmingMoveControl(this, 85, 10, 0.02F, 0.1F, true);
         this.lookControl = new SmoothSwimmingLookControl(this, 10);
     }
 
     @Override
-    @Override
     protected PathNavigation createNavigation(Level level) {
         return new WaterBoundPathNavigation(this, level);
     }
 
     @Override
-    @Override
     protected Brain.Provider<Tadpole> brainProvider() {
         return Brain.provider(Tadpole.MEMORY_TYPES, Tadpole.SENSOR_TYPES);
     }
 
     @Override
-    @Override
     protected Brain<?> makeBrain(Dynamic<?> dynamic) {
         return TadpoleAi.makeBrain(this.brainProvider().makeBrain(dynamic));
     }
 
     @Override
-    @Override
     public Brain<Tadpole> getBrain() {
-        return super.getBrain();
+        return (Brain<Tadpole>) super.getBrain(); // CraftBukkit - decompile error
     }
 
     @Override
-    @Override
     protected SoundEvent getFlopSound() {
         return SoundEvents.TADPOLE_FLOP;
     }
 
     @Override
-    @Override
     protected void customServerAiStep() {
         this.level().getProfiler().push("tadpoleBrain");
         this.getBrain().tick((ServerLevel) this.level(), this);
@@ -98,7 +92,6 @@
     }
 
     @Override
-    @Override
     public void aiStep() {
         super.aiStep();
         if (!this.level().isClientSide) {
@@ -108,114 +101,101 @@
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putInt("Age", this.age);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putInt("Age", this.age);
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.setAge(compoundtag.getInt("Age"));
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.setAge(compound.getInt("Age"));
     }
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return null;
     }
 
     @Nullable
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.TADPOLE_HURT;
     }
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.TADPOLE_DEATH;
     }
 
     @Override
-    @Override
-    public InteractionResult mobInteract(Player player, InteractionHand interactionhand) {
-        ItemStack itemstack = player.getItemInHand(interactionhand);
+    public InteractionResult mobInteract(Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
 
         if (this.isFood(itemstack)) {
             this.feed(player, itemstack);
             return InteractionResult.sidedSuccess(this.level().isClientSide);
         } else {
-            return (InteractionResult) Bucketable.bucketMobPickup(player, interactionhand, this).orElse(super.mobInteract(player, interactionhand));
+            return (InteractionResult) Bucketable.bucketMobPickup(player, hand, this).orElse(super.mobInteract(player, hand));
         }
     }
 
     @Override
-    @Override
     protected void sendDebugPackets() {
         super.sendDebugPackets();
         DebugPackets.sendEntityBrain(this);
     }
 
     @Override
-    @Override
     public boolean fromBucket() {
         return true;
     }
 
     @Override
-    @Override
-    public void setFromBucket(boolean flag) {}
+    public void setFromBucket(boolean fromBucket) {}
 
     @Override
-    @Override
-    public void saveToBucketTag(ItemStack itemstack) {
-        Bucketable.saveDefaultDataToBucketTag(this, itemstack);
-        CompoundTag compoundtag = itemstack.getOrCreateTag();
+    public void saveToBucketTag(ItemStack stack) {
+        Bucketable.saveDefaultDataToBucketTag(this, stack);
+        CompoundTag nbttagcompound = stack.getOrCreateTag();
 
-        compoundtag.putInt("Age", this.getAge());
+        nbttagcompound.putInt("Age", this.getAge());
     }
 
     @Override
-    @Override
-    public void loadFromBucketTag(CompoundTag compoundtag) {
-        Bucketable.loadDefaultDataFromBucketTag(this, compoundtag);
-        if (compoundtag.contains("Age")) {
-            this.setAge(compoundtag.getInt("Age"));
+    public void loadFromBucketTag(CompoundTag tag) {
+        Bucketable.loadDefaultDataFromBucketTag(this, tag);
+        if (tag.contains("Age")) {
+            this.setAge(tag.getInt("Age"));
         }
 
     }
 
     @Override
-    @Override
     public ItemStack getBucketItemStack() {
         return new ItemStack(Items.TADPOLE_BUCKET);
     }
 
     @Override
-    @Override
     public SoundEvent getPickupSound() {
         return SoundEvents.BUCKET_FILL_TADPOLE;
     }
 
-    private boolean isFood(ItemStack itemstack) {
-        return Frog.TEMPTATION_ITEM.test(itemstack);
+    private boolean isFood(ItemStack stack) {
+        return Frog.TEMPTATION_ITEM.test(stack);
     }
 
-    private void feed(Player player, ItemStack itemstack) {
-        this.usePlayerItem(player, itemstack);
+    private void feed(Player player, ItemStack stack) {
+        this.usePlayerItem(player, stack);
         this.ageUp(AgeableMob.getSpeedUpSecondsWhenFeeding(this.getTicksLeftUntilAdult()));
         this.level().addParticle(ParticleTypes.HAPPY_VILLAGER, this.getRandomX(1.0D), this.getRandomY() + 0.5D, this.getRandomZ(1.0D), 0.0D, 0.0D, 0.0D);
     }
 
-    private void usePlayerItem(Player player, ItemStack itemstack) {
+    private void usePlayerItem(Player player, ItemStack stack) {
         if (!player.getAbilities().instabuild) {
-            itemstack.shrink(1);
+            stack.shrink(1);
         }
 
     }
@@ -224,12 +204,12 @@
         return this.age;
     }
 
-    private void ageUp(int i) {
-        this.setAge(this.age + i * 20);
+    private void ageUp(int offset) {
+        this.setAge(this.age + offset * 20);
     }
 
-    private void setAge(int i) {
-        this.age = i;
+    private void setAge(int age) {
+        this.age = age;
         if (this.age >= Tadpole.ticksToBeFrog) {
             this.ageUp();
         }
@@ -237,15 +217,15 @@
     }
 
     private void ageUp() {
-        Level level = this.level();
+        Level world = this.level();
 
-        if (level instanceof ServerLevel) {
-            ServerLevel serverlevel = (ServerLevel) level;
+        if (world instanceof ServerLevel) {
+            ServerLevel worldserver = (ServerLevel) world;
             Frog frog = (Frog) EntityType.FROG.create(this.level());
 
             if (frog != null) {
                 frog.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
-                frog.finalizeSpawn(serverlevel, this.level().getCurrentDifficultyAt(frog.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData) null, (CompoundTag) null);
+                frog.finalizeSpawn(worldserver, this.level().getCurrentDifficultyAt(frog.blockPosition()), EnumMobSpawn.CONVERSION, (GroupDataEntity) null, (CompoundTag) null);
                 frog.setNoAi(this.isNoAi());
                 if (this.hasCustomName()) {
                     frog.setCustomName(this.getCustomName());
@@ -253,8 +233,14 @@
                 }
 
                 frog.setPersistenceRequired();
+                // CraftBukkit start
+                if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTransformEvent(this, frog, org.bukkit.event.entity.EntityTransformEvent.TransformReason.METAMORPHOSIS).isCancelled()) {
+                    this.setAge(0); // Sets the age to 0 for avoid a loop if the event is canceled
+                    return;
+                }
+                // CraftBukkit end
                 this.playSound(SoundEvents.TADPOLE_GROW_UP, 0.15F, 1.0F);
-                serverlevel.addFreshEntityWithPassengers(frog);
+                worldserver.addFreshEntityWithPassengers(frog, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.METAMORPHOSIS); // CraftBukkit - add SpawnReason
                 this.discard();
             }
         }
@@ -266,7 +252,6 @@
     }
 
     @Override
-    @Override
     public boolean shouldDropExperience() {
         return false;
     }
