--- a/net/minecraft/world/entity/animal/Rabbit.java
+++ b/net/minecraft/world/entity/animal/Rabbit.java
@@ -27,10 +27,10 @@
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.VariantHolder;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -62,10 +62,13 @@
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.CarrotBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
 
 public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
 
@@ -85,16 +88,14 @@
     private int jumpDelayTicks;
     int moreCarrotTicks;
 
-    public Rabbit(EntityType<? extends Rabbit> entitytype, Level level) {
-        super(entitytype, level);
+    public Rabbit(EntityType<? extends Rabbit> entityType, Level level) {
+        super(entityType, level);
         this.jumpControl = new Rabbit.RabbitJumpControl(this);
         this.moveControl = new Rabbit.RabbitMoveControl(this);
-        this.setSpeedModifier(0.0D);
     }
 
     @Override
-    @Override
-    protected void registerGoals() {
+    public void registerGoals() {
         this.goalSelector.addGoal(1, new FloatGoal(this));
         this.goalSelector.addGoal(1, new ClimbOnTopOfPowderSnowGoal(this, this.level()));
         this.goalSelector.addGoal(1, new Rabbit.RabbitPanicGoal(this, 2.2D));
@@ -109,7 +110,6 @@
     }
 
     @Override
-    @Override
     protected float getJumpPower() {
         float f = 0.3F;
 
@@ -117,12 +117,12 @@
             f = 0.5F;
         }
 
-        Path path = this.navigation.getPath();
+        Path pathentity = this.navigation.getPath();
 
-        if (path != null && !path.isDone()) {
-            Vec3 vec3 = path.getNextEntityPos(this);
+        if (pathentity != null && !pathentity.isDone()) {
+            Vec3 vec3d = pathentity.getNextEntityPos(this);
 
-            if (vec3.y > this.getY() + 0.5D) {
+            if (vec3d.y > this.getY() + 0.5D) {
                 f = 0.5F;
             }
         }
@@ -135,7 +135,6 @@
     }
 
     @Override
-    @Override
     protected void jumpFromGround() {
         super.jumpFromGround();
         double d0 = this.moveControl.getSpeedModifier();
@@ -154,20 +153,19 @@
 
     }
 
-    public float getJumpCompletion(float f) {
-        return this.jumpDuration == 0 ? 0.0F : ((float) this.jumpTicks + f) / (float) this.jumpDuration;
+    public float getJumpCompletion(float partialTick) {
+        return this.jumpDuration == 0 ? 0.0F : ((float) this.jumpTicks + partialTick) / (float) this.jumpDuration;
     }
 
-    public void setSpeedModifier(double d0) {
-        this.getNavigation().setSpeedModifier(d0);
-        this.moveControl.setWantedPosition(this.moveControl.getWantedX(), this.moveControl.getWantedY(), this.moveControl.getWantedZ(), d0);
+    public void setSpeedModifier(double speedModifier) {
+        this.getNavigation().setSpeedModifier(speedModifier);
+        this.moveControl.setWantedPosition(this.moveControl.getWantedX(), this.moveControl.getWantedY(), this.moveControl.getWantedZ(), speedModifier);
     }
 
     @Override
-    @Override
-    public void setJumping(boolean flag) {
-        super.setJumping(flag);
-        if (flag) {
+    public void setJumping(boolean jumping) {
+        super.setJumping(jumping);
+        if (jumping) {
             this.playSound(this.getJumpSound(), this.getSoundVolume(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) * 0.8F);
         }
 
@@ -180,14 +178,12 @@
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Rabbit.DATA_TYPE_ID, Rabbit.Variant.BROWN.id);
     }
 
     @Override
-    @Override
     public void customServerAiStep() {
         if (this.jumpDelayTicks > 0) {
             --this.jumpDelayTicks;
@@ -207,31 +203,31 @@
             }
 
             if (this.getVariant() == Rabbit.Variant.EVIL && this.jumpDelayTicks == 0) {
-                LivingEntity livingentity = this.getTarget();
+                LivingEntity entityliving = this.getTarget();
 
-                if (livingentity != null && this.distanceToSqr((Entity) livingentity) < 16.0D) {
-                    this.facePoint(livingentity.getX(), livingentity.getZ());
-                    this.moveControl.setWantedPosition(livingentity.getX(), livingentity.getY(), livingentity.getZ(), this.moveControl.getSpeedModifier());
+                if (entityliving != null && this.distanceToSqr((Entity) entityliving) < 16.0D) {
+                    this.facePoint(entityliving.getX(), entityliving.getZ());
+                    this.moveControl.setWantedPosition(entityliving.getX(), entityliving.getY(), entityliving.getZ(), this.moveControl.getSpeedModifier());
                     this.startJumping();
                     this.wasOnGround = true;
                 }
             }
 
-            Rabbit.RabbitJumpControl rabbit_rabbitjumpcontrol = (Rabbit.RabbitJumpControl) this.jumpControl;
+            Rabbit.RabbitJumpControl entityrabbit_controllerjumprabbit = (Rabbit.RabbitJumpControl) this.jumpControl;
 
-            if (!rabbit_rabbitjumpcontrol.wantJump()) {
+            if (!entityrabbit_controllerjumprabbit.wantJump()) {
                 if (this.moveControl.hasWanted() && this.jumpDelayTicks == 0) {
-                    Path path = this.navigation.getPath();
-                    Vec3 vec3 = new Vec3(this.moveControl.getWantedX(), this.moveControl.getWantedY(), this.moveControl.getWantedZ());
+                    Path pathentity = this.navigation.getPath();
+                    Vec3 vec3d = new Vec3(this.moveControl.getWantedX(), this.moveControl.getWantedY(), this.moveControl.getWantedZ());
 
-                    if (path != null && !path.isDone()) {
-                        vec3 = path.getNextEntityPos(this);
+                    if (pathentity != null && !pathentity.isDone()) {
+                        vec3d = pathentity.getNextEntityPos(this);
                     }
 
-                    this.facePoint(vec3.x, vec3.z);
+                    this.facePoint(vec3d.x, vec3d.z);
                     this.startJumping();
                 }
-            } else if (!rabbit_rabbitjumpcontrol.canJump()) {
+            } else if (!entityrabbit_controllerjumprabbit.canJump()) {
                 this.enableJumpControl();
             }
         }
@@ -240,13 +236,12 @@
     }
 
     @Override
-    @Override
     public boolean canSpawnSprintParticle() {
         return false;
     }
 
-    private void facePoint(double d0, double d1) {
-        this.setYRot((float) (Mth.atan2(d1 - this.getZ(), d0 - this.getX()) * 57.2957763671875D) - 90.0F);
+    private void facePoint(double x, double d1) {
+        this.setYRot((float) (Mth.atan2(d1 - this.getZ(), x - this.getX()) * 57.2957763671875D) - 90.0F);
     }
 
     private void enableJumpControl() {
@@ -272,7 +267,6 @@
     }
 
     @Override
-    @Override
     public void aiStep() {
         super.aiStep();
         if (this.jumpTicks != this.jumpDuration) {
@@ -290,19 +284,17 @@
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putInt("RabbitType", this.getVariant().id);
-        compoundtag.putInt("MoreCarrotTicks", this.moreCarrotTicks);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putInt("RabbitType", this.getVariant().id);
+        compound.putInt("MoreCarrotTicks", this.moreCarrotTicks);
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.setVariant(Rabbit.Variant.byId(compoundtag.getInt("RabbitType")));
-        this.moreCarrotTicks = compoundtag.getInt("MoreCarrotTicks");
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.setVariant(Rabbit.Variant.byId(compound.getInt("RabbitType")));
+        this.moreCarrotTicks = compound.getInt("MoreCarrotTicks");
     }
 
     protected SoundEvent getJumpSound() {
@@ -310,25 +302,21 @@
     }
 
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.RABBIT_AMBIENT;
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.RABBIT_HURT;
     }
 
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.RABBIT_DEATH;
     }
 
     @Override
-    @Override
     public boolean doHurtTarget(Entity entity) {
         if (this.getVariant() == Rabbit.Variant.EVIL) {
             this.playSound(SoundEvents.RABBIT_ATTACK, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
@@ -339,61 +327,56 @@
     }
 
     @Override
-    @Override
     public SoundSource getSoundSource() {
         return this.getVariant() == Rabbit.Variant.EVIL ? SoundSource.HOSTILE : SoundSource.NEUTRAL;
     }
 
-    private static boolean isTemptingItem(ItemStack itemstack) {
-        return itemstack.is(Items.CARROT) || itemstack.is(Items.GOLDEN_CARROT) || itemstack.is(Blocks.DANDELION.asItem());
+    private static boolean isTemptingItem(ItemStack stack) {
+        return stack.is(Items.CARROT) || stack.is(Items.GOLDEN_CARROT) || stack.is(Blocks.DANDELION.asItem());
     }
 
     @Nullable
     @Override
-    @Override
-    public Rabbit getBreedOffspring(ServerLevel serverlevel, AgeableMob ageablemob) {
-        Rabbit rabbit = (Rabbit) EntityType.RABBIT.create(serverlevel);
+    public Rabbit getBreedOffspring(ServerLevel level, AgeableMob otherParent) {
+        Rabbit entityrabbit = (Rabbit) EntityType.RABBIT.create(level);
 
-        if (rabbit != null) {
-            Rabbit.Variant rabbit_variant = getRandomRabbitVariant(serverlevel, this.blockPosition());
+        if (entityrabbit != null) {
+            Rabbit.Variant entityrabbit_variant = getRandomRabbitVariant(level, this.blockPosition());
 
             if (this.random.nextInt(20) != 0) {
                 label15:
                 {
-                    if (ageablemob instanceof Rabbit) {
-                        Rabbit rabbit1 = (Rabbit) ageablemob;
+                    if (otherParent instanceof Rabbit) {
+                        Rabbit entityrabbit1 = (Rabbit) otherParent;
 
                         if (this.random.nextBoolean()) {
-                            rabbit_variant = rabbit1.getVariant();
+                            entityrabbit_variant = entityrabbit1.getVariant();
                             break label15;
                         }
                     }
 
-                    rabbit_variant = this.getVariant();
+                    entityrabbit_variant = this.getVariant();
                 }
             }
 
-            rabbit.setVariant(rabbit_variant);
+            entityrabbit.setVariant(entityrabbit_variant);
         }
 
-        return rabbit;
+        return entityrabbit;
     }
 
     @Override
-    @Override
-    public boolean isFood(ItemStack itemstack) {
-        return isTemptingItem(itemstack);
+    public boolean isFood(ItemStack stack) {
+        return isTemptingItem(stack);
     }
 
     @Override
-    @Override
     public Rabbit.Variant getVariant() {
         return Rabbit.Variant.byId((Integer) this.entityData.get(Rabbit.DATA_TYPE_ID));
     }
 
-    @Override
-    public void setVariant(Rabbit.Variant rabbit_variant) {
-        if (rabbit_variant == Rabbit.Variant.EVIL) {
+    public void setVariant(Rabbit.Variant variant) {
+        if (variant == Rabbit.Variant.EVIL) {
             this.getAttribute(Attributes.ARMOR).setBaseValue(8.0D);
             this.goalSelector.addGoal(4, new MeleeAttackGoal(this, 1.4D, true));
             this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers());
@@ -404,34 +387,33 @@
             }
         }
 
-        this.entityData.set(Rabbit.DATA_TYPE_ID, rabbit_variant.id);
+        this.entityData.set(Rabbit.DATA_TYPE_ID, variant.id);
     }
 
     @Nullable
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
-        Rabbit.Variant rabbit_variant = getRandomRabbitVariant(serverlevelaccessor, this.blockPosition());
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
+        Rabbit.Variant entityrabbit_variant = getRandomRabbitVariant(level, this.blockPosition());
 
-        if (spawngroupdata instanceof Rabbit.RabbitGroupData) {
-            rabbit_variant = ((Rabbit.RabbitGroupData) spawngroupdata).variant;
+        if (spawnData instanceof Rabbit.RabbitGroupData) {
+            entityrabbit_variant = ((Rabbit.RabbitGroupData) spawnData).variant;
         } else {
-            spawngroupdata = new Rabbit.RabbitGroupData(rabbit_variant);
+            spawnData = new Rabbit.RabbitGroupData(entityrabbit_variant);
         }
 
-        this.setVariant(rabbit_variant);
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, (SpawnGroupData) spawngroupdata, compoundtag);
+        this.setVariant(entityrabbit_variant);
+        return super.finalizeSpawn(level, difficulty, reason, (GroupDataEntity) spawnData, dataTag);
     }
 
-    private static Rabbit.Variant getRandomRabbitVariant(LevelAccessor levelaccessor, BlockPos blockpos) {
-        Holder<Biome> holder = levelaccessor.getBiome(blockpos);
-        int i = levelaccessor.getRandom().nextInt(100);
+    private static Rabbit.Variant getRandomRabbitVariant(LevelAccessor level, BlockPos pos) {
+        Holder<Biome> holder = level.getBiome(pos);
+        int i = level.getRandom().nextInt(100);
 
         return holder.is(BiomeTags.SPAWNS_WHITE_RABBITS) ? (i < 80 ? Rabbit.Variant.WHITE : Rabbit.Variant.WHITE_SPLOTCHED) : (holder.is(BiomeTags.SPAWNS_GOLD_RABBITS) ? Rabbit.Variant.GOLD : (i < 50 ? Rabbit.Variant.BROWN : (i < 90 ? Rabbit.Variant.SALT : Rabbit.Variant.BLACK)));
     }
 
-    public static boolean checkRabbitSpawnRules(EntityType<Rabbit> entitytype, LevelAccessor levelaccessor, MobSpawnType mobspawntype, BlockPos blockpos, RandomSource randomsource) {
-        return levelaccessor.getBlockState(blockpos.below()).is(BlockTags.RABBITS_SPAWNABLE_ON) && isBrightEnoughToSpawn(levelaccessor, blockpos);
+    public static boolean checkRabbitSpawnRules(EntityType<Rabbit> rabbit, LevelAccessor level, EnumMobSpawn spawnType, BlockPos pos, RandomSource random) {
+        return level.getBlockState(pos.below()).is(BlockTags.RABBITS_SPAWNABLE_ON) && isBrightEnoughToSpawn(level, pos);
     }
 
     boolean wantsMoreFood() {
@@ -439,20 +421,18 @@
     }
 
     @Override
-    @Override
-    public void handleEntityEvent(byte b0) {
-        if (b0 == 1) {
+    public void handleEntityEvent(byte id) {
+        if (id == 1) {
             this.spawnSprintParticle();
             this.jumpDuration = 10;
             this.jumpTicks = 0;
         } else {
-            super.handleEntityEvent(b0);
+            super.handleEntityEvent(id);
         }
 
     }
 
     @Override
-    @Override
     public Vec3 getLeashOffset() {
         return new Vec3(0.0D, (double) (0.6F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
     }
@@ -475,12 +455,11 @@
             return this.canJump;
         }
 
-        public void setCanJump(boolean flag) {
-            this.canJump = flag;
+        public void setCanJump(boolean canJump) {
+            this.canJump = canJump;
         }
 
         @Override
-        @Override
         public void tick() {
             if (this.jump) {
                 this.rabbit.startJumping();
@@ -501,7 +480,6 @@
         }
 
         @Override
-        @Override
         public void tick() {
             if (this.rabbit.onGround() && !this.rabbit.jumping && !((Rabbit.RabbitJumpControl) this.rabbit.jumpControl).wantJump()) {
                 this.rabbit.setSpeedModifier(0.0D);
@@ -513,13 +491,12 @@
         }
 
         @Override
-        @Override
-        public void setWantedPosition(double d0, double d1, double d2, double d3) {
+        public void setWantedPosition(double x, double d1, double y, double d3) {
             if (this.rabbit.isInWater()) {
                 d3 = 1.5D;
             }
 
-            super.setWantedPosition(d0, d1, d2, d3);
+            super.setWantedPosition(x, d1, y, d3);
             if (d3 > 0.0D) {
                 this.nextJumpSpeed = d3;
             }
@@ -531,13 +508,12 @@
 
         private final Rabbit rabbit;
 
-        public RabbitPanicGoal(Rabbit rabbit, double d0) {
-            super(rabbit, d0);
+        public RabbitPanicGoal(Rabbit rabbit, double speedModifier) {
+            super(rabbit, speedModifier);
             this.rabbit = rabbit;
         }
 
         @Override
-        @Override
         public void tick() {
             super.tick();
             this.rabbit.setSpeedModifier(this.speedModifier);
@@ -548,13 +524,12 @@
 
         private final Rabbit rabbit;
 
-        public RabbitAvoidEntityGoal(Rabbit rabbit, Class<T> oclass, float f, double d0, double d1) {
-            super(rabbit, oclass, f, d0, d1);
+        public RabbitAvoidEntityGoal(Rabbit rabbit, Class<T> entityClassToAvoid, float maxDist, double walkSpeedModifier, double d1) {
+            super(rabbit, entityClassToAvoid, maxDist, walkSpeedModifier, d1);
             this.rabbit = rabbit;
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return this.rabbit.getVariant() != Rabbit.Variant.EVIL && super.canUse();
         }
@@ -572,7 +547,6 @@
         }
 
         @Override
-        @Override
         public boolean canUse() {
             if (this.nextStartTick <= 0) {
                 if (!this.rabbit.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
@@ -587,32 +561,40 @@
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return this.canRaid && super.canContinueToUse();
         }
 
         @Override
-        @Override
         public void tick() {
             super.tick();
             this.rabbit.getLookControl().setLookAt((double) this.blockPos.getX() + 0.5D, (double) (this.blockPos.getY() + 1), (double) this.blockPos.getZ() + 0.5D, 10.0F, (float) this.rabbit.getMaxHeadXRot());
             if (this.isReachedTarget()) {
-                Level level = this.rabbit.level();
-                BlockPos blockpos = this.blockPos.above();
-                BlockState blockstate = level.getBlockState(blockpos);
-                Block block = blockstate.getBlock();
+                Level world = this.rabbit.level();
+                BlockPos blockposition = this.blockPos.above();
+                IBlockData iblockdata = world.getBlockState(blockposition);
+                Block block = iblockdata.getBlock();
 
                 if (this.canRaid && block instanceof CarrotBlock) {
-                    int i = (Integer) blockstate.getValue(CarrotBlock.AGE);
+                    int i = (Integer) iblockdata.getValue(CarrotBlock.AGE);
 
                     if (i == 0) {
-                        level.setBlock(blockpos, Blocks.AIR.defaultBlockState(), 2);
-                        level.destroyBlock(blockpos, true, this.rabbit);
+                        // CraftBukkit start
+                        if (!CraftEventFactory.callEntityChangeBlockEvent(this.rabbit, blockposition, Blocks.AIR.defaultBlockState())) {
+                            return;
+                        }
+                        // CraftBukkit end
+                        world.setBlock(blockposition, Blocks.AIR.defaultBlockState(), 2);
+                        world.destroyBlock(blockposition, true, this.rabbit);
                     } else {
-                        level.setBlock(blockpos, (BlockState) blockstate.setValue(CarrotBlock.AGE, i - 1), 2);
-                        level.gameEvent(GameEvent.BLOCK_CHANGE, blockpos, GameEvent.Context.of((Entity) this.rabbit));
-                        level.levelEvent(2001, blockpos, Block.getId(blockstate));
+                        // CraftBukkit start
+                        if (!CraftEventFactory.callEntityChangeBlockEvent(this.rabbit, blockposition, iblockdata.setValue(CarrotBlock.AGE, i - 1))) {
+                            return;
+                        }
+                        // CraftBukkit end
+                        world.setBlock(blockposition, (IBlockData) iblockdata.setValue(CarrotBlock.AGE, i - 1), 2);
+                        world.gameEvent(GameEvent.BLOCK_CHANGE, blockposition, GameEvent.Context.of((Entity) this.rabbit));
+                        world.levelEvent(2001, blockposition, Block.getId(iblockdata));
                     }
 
                     this.rabbit.moreCarrotTicks = 40;
@@ -625,13 +607,12 @@
         }
 
         @Override
-        @Override
-        protected boolean isValidTarget(LevelReader levelreader, BlockPos blockpos) {
-            BlockState blockstate = levelreader.getBlockState(blockpos);
+        protected boolean isValidTarget(LevelReader level, BlockPos pos) {
+            IBlockData iblockdata = level.getBlockState(pos);
 
-            if (blockstate.is(Blocks.FARMLAND) && this.wantsToRaid && !this.canRaid) {
-                blockstate = levelreader.getBlockState(blockpos.above());
-                if (blockstate.getBlock() instanceof CarrotBlock && ((CarrotBlock) blockstate.getBlock()).isMaxAge(blockstate)) {
+            if (iblockdata.is(Blocks.FARMLAND) && this.wantsToRaid && !this.canRaid) {
+                iblockdata = level.getBlockState(pos.above());
+                if (iblockdata.getBlock() instanceof CarrotBlock && ((CarrotBlock) iblockdata.getBlock()).isMaxAge(iblockdata)) {
                     this.canRaid = true;
                     return true;
                 }
@@ -656,7 +637,6 @@
         }
 
         @Override
-        @Override
         public String getSerializedName() {
             return this.name;
         }
@@ -665,8 +645,8 @@
             return this.id;
         }
 
-        public static Rabbit.Variant byId(int i) {
-            return (Rabbit.Variant) Rabbit.Variant.BY_ID.apply(i);
+        public static Rabbit.Variant byId(int id) {
+            return (Rabbit.Variant) Rabbit.Variant.BY_ID.apply(id);
         }
     }
 
@@ -674,9 +654,9 @@
 
         public final Rabbit.Variant variant;
 
-        public RabbitGroupData(Rabbit.Variant rabbit_variant) {
+        public RabbitGroupData(Rabbit.Variant variant) {
             super(1.0F);
-            this.variant = rabbit_variant;
+            this.variant = variant;
         }
     }
 }
