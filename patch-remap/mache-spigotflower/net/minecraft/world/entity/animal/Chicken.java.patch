--- a/net/minecraft/world/entity/animal/Chicken.java
+++ b/net/minecraft/world/entity/animal/Chicken.java
@@ -11,10 +11,10 @@
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
@@ -29,9 +29,9 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
-import net.minecraft.world.level.ItemLike;
+import net.minecraft.world.level.IMaterial;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.Vec3;
@@ -49,14 +49,13 @@
     public int eggTime;
     public boolean isChickenJockey;
 
-    public Chicken(EntityType<? extends Chicken> entitytype, Level level) {
-        super(entitytype, level);
+    public Chicken(EntityType<? extends Chicken> entityType, Level level) {
+        super(entityType, level);
         this.eggTime = this.random.nextInt(6000) + 6000;
         this.setPathfindingMalus(BlockPathTypes.WATER, 0.0F);
     }
 
     @Override
-    @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.4D));
@@ -69,9 +68,8 @@
     }
 
     @Override
-    @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions entitydimensions) {
-        return this.isBaby() ? entitydimensions.height * 0.85F : entitydimensions.height * 0.92F;
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions size) {
+        return this.isBaby() ? size.height * 0.85F : size.height * 0.92F;
     }
 
     public static AttributeSupplier.Builder createAttributes() {
@@ -79,7 +77,6 @@
     }
 
     @Override
-    @Override
     public void aiStep() {
         super.aiStep();
         this.oFlap = this.flap;
@@ -91,16 +88,18 @@
         }
 
         this.flapping *= 0.9F;
-        Vec3 vec3 = this.getDeltaMovement();
+        Vec3 vec3d = this.getDeltaMovement();
 
-        if (!this.onGround() && vec3.y < 0.0D) {
-            this.setDeltaMovement(vec3.multiply(1.0D, 0.6D, 1.0D));
+        if (!this.onGround() && vec3d.y < 0.0D) {
+            this.setDeltaMovement(vec3d.multiply(1.0D, 0.6D, 1.0D));
         }
 
         this.flap += this.flapping * 2.0F;
         if (!this.level().isClientSide && this.isAlive() && !this.isBaby() && !this.isChickenJockey() && --this.eggTime <= 0) {
             this.playSound(SoundEvents.CHICKEN_EGG, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
-            this.spawnAtLocation((ItemLike) Items.EGG);
+            this.forceDrops = true; // CraftBukkit
+            this.spawnAtLocation((IMaterial) Items.EGG);
+            this.forceDrops = false; // CraftBukkit
             this.gameEvent(GameEvent.ENTITY_PLACE);
             this.eggTime = this.random.nextInt(6000) + 6000;
         }
@@ -108,106 +107,92 @@
     }
 
     @Override
-    @Override
     protected boolean isFlapping() {
         return this.flyDist > this.nextFlap;
     }
 
     @Override
-    @Override
     protected void onFlap() {
         this.nextFlap = this.flyDist + this.flapSpeed / 2.0F;
     }
 
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.CHICKEN_AMBIENT;
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.CHICKEN_HURT;
     }
 
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.CHICKEN_DEATH;
     }
 
     @Override
-    @Override
-    protected void playStepSound(BlockPos blockpos, BlockState blockstate) {
+    protected void playStepSound(BlockPos pos, IBlockData block) {
         this.playSound(SoundEvents.CHICKEN_STEP, 0.15F, 1.0F);
     }
 
     @Nullable
     @Override
-    @Override
-    public Chicken getBreedOffspring(ServerLevel serverlevel, AgeableMob ageablemob) {
-        return (Chicken) EntityType.CHICKEN.create(serverlevel);
+    public Chicken getBreedOffspring(ServerLevel level, AgeableMob otherParent) {
+        return (Chicken) EntityType.CHICKEN.create(level);
     }
 
     @Override
-    @Override
-    public boolean isFood(ItemStack itemstack) {
-        return Chicken.FOOD_ITEMS.test(itemstack);
+    public boolean isFood(ItemStack stack) {
+        return Chicken.FOOD_ITEMS.test(stack);
     }
 
     @Override
-    @Override
     public int getExperienceReward() {
         return this.isChickenJockey() ? 10 : super.getExperienceReward();
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.isChickenJockey = compoundtag.getBoolean("IsChickenJockey");
-        if (compoundtag.contains("EggLayTime")) {
-            this.eggTime = compoundtag.getInt("EggLayTime");
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.isChickenJockey = compound.getBoolean("IsChickenJockey");
+        if (compound.contains("EggLayTime")) {
+            this.eggTime = compound.getInt("EggLayTime");
         }
 
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putBoolean("IsChickenJockey", this.isChickenJockey);
-        compoundtag.putInt("EggLayTime", this.eggTime);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putBoolean("IsChickenJockey", this.isChickenJockey);
+        compound.putInt("EggLayTime", this.eggTime);
     }
 
     @Override
-    @Override
-    public boolean removeWhenFarAway(double d0) {
+    public boolean removeWhenFarAway(double distanceToClosestPlayer) {
         return this.isChickenJockey();
     }
 
     @Override
-    @Override
-    protected void positionRider(Entity entity, Entity.MoveFunction entity_movefunction) {
-        super.positionRider(entity, entity_movefunction);
-        if (entity instanceof LivingEntity) {
-            ((LivingEntity) entity).yBodyRot = this.yBodyRot;
+    protected void positionRider(Entity passenger, Entity.MoveFunction callback) {
+        super.positionRider(passenger, callback);
+        if (passenger instanceof LivingEntity) {
+            ((LivingEntity) passenger).yBodyRot = this.yBodyRot;
         }
 
     }
 
     @Override
-    @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitydimensions, float f) {
-        return new Vector3f(0.0F, entitydimensions.height, -0.1F * f);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, entitysize.height, -0.1F * f);
     }
 
     public boolean isChickenJockey() {
         return this.isChickenJockey;
     }
 
-    public void setChickenJockey(boolean flag) {
-        this.isChickenJockey = flag;
+    public void setChickenJockey(boolean isChickenJockey) {
+        this.isChickenJockey = isChickenJockey;
     }
 }
