--- a/net/minecraft/world/entity/animal/Panda.java
+++ b/net/minecraft/world/entity/animal/Panda.java
@@ -22,7 +22,7 @@
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.StringRepresentable;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgeableMob;
@@ -30,11 +30,11 @@
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.MoveControl;
@@ -58,15 +58,20 @@
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.level.GameRules;
-import net.minecraft.world.level.ItemLike;
+import net.minecraft.world.level.IMaterial;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.Vec3;
 import org.joml.Vector3f;
 
+// CraftBukkit start;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+// CraftBukkit end
+
 public class Panda extends Animal {
 
     private static final EntityDataAccessor<Integer> UNHAPPY_COUNTER = SynchedEntityData.defineId(Panda.class, EntityDataSerializers.INT);
@@ -94,14 +99,14 @@
     private float rollAmount;
     private float rollAmountO;
     Panda.PandaLookAtPlayerGoal lookAtPlayerGoal;
-    static final Predicate<ItemEntity> PANDA_ITEMS = (itementity) -> {
-        ItemStack itemstack = itementity.getItem();
+    static final Predicate<ItemEntity> PANDA_ITEMS = (entityitem) -> {
+        ItemStack itemstack = entityitem.getItem();
 
-        return (itemstack.is(Blocks.BAMBOO.asItem()) || itemstack.is(Blocks.CAKE.asItem())) && itementity.isAlive() && !itementity.hasPickUpDelay();
+        return (itemstack.is(Blocks.BAMBOO.asItem()) || itemstack.is(Blocks.CAKE.asItem())) && entityitem.isAlive() && !entityitem.hasPickUpDelay();
     };
 
-    public Panda(EntityType<? extends Panda> entitytype, Level level) {
-        super(entitytype, level);
+    public Panda(EntityType<? extends Panda> entityType, Level level) {
+        super(entityType, level);
         this.moveControl = new Panda.PandaMoveControl(this);
         if (!this.isBaby()) {
             this.setCanPickUpLoot(true);
@@ -110,19 +115,18 @@
     }
 
     @Override
-    @Override
     public boolean canTakeItem(ItemStack itemstack) {
-        EquipmentSlot equipmentslot = Mob.getEquipmentSlotForItem(itemstack);
+        EquipmentSlot enumitemslot = Mob.getEquipmentSlotForItem(itemstack);
 
-        return !this.getItemBySlot(equipmentslot).isEmpty() ? false : equipmentslot == EquipmentSlot.MAINHAND && super.canTakeItem(itemstack);
+        return !this.getItemBySlot(enumitemslot).isEmpty() ? false : enumitemslot == EquipmentSlot.MAINHAND && super.canTakeItem(itemstack);
     }
 
     public int getUnhappyCounter() {
         return (Integer) this.entityData.get(Panda.UNHAPPY_COUNTER);
     }
 
-    public void setUnhappyCounter(int i) {
-        this.entityData.set(Panda.UNHAPPY_COUNTER, i);
+    public void setUnhappyCounter(int unhappyCounter) {
+        this.entityData.set(Panda.UNHAPPY_COUNTER, unhappyCounter);
     }
 
     public boolean isSneezing() {
@@ -133,37 +137,37 @@
         return this.getFlag(8);
     }
 
-    public void sit(boolean flag) {
-        this.setFlag(8, flag);
+    public void sit(boolean sitting) {
+        this.setFlag(8, sitting);
     }
 
     public boolean isOnBack() {
         return this.getFlag(16);
     }
 
-    public void setOnBack(boolean flag) {
-        this.setFlag(16, flag);
+    public void setOnBack(boolean onBack) {
+        this.setFlag(16, onBack);
     }
 
     public boolean isEating() {
         return (Integer) this.entityData.get(Panda.EAT_COUNTER) > 0;
     }
 
-    public void eat(boolean flag) {
-        this.entityData.set(Panda.EAT_COUNTER, flag ? 1 : 0);
+    public void eat(boolean eating) {
+        this.entityData.set(Panda.EAT_COUNTER, eating ? 1 : 0);
     }
 
     private int getEatCounter() {
         return (Integer) this.entityData.get(Panda.EAT_COUNTER);
     }
 
-    private void setEatCounter(int i) {
-        this.entityData.set(Panda.EAT_COUNTER, i);
+    private void setEatCounter(int eatCounter) {
+        this.entityData.set(Panda.EAT_COUNTER, eatCounter);
     }
 
-    public void sneeze(boolean flag) {
-        this.setFlag(2, flag);
-        if (!flag) {
+    public void sneeze(boolean sneezing) {
+        this.setFlag(2, sneezing);
+        if (!sneezing) {
             this.setSneezeCounter(0);
         }
 
@@ -173,44 +177,43 @@
         return (Integer) this.entityData.get(Panda.SNEEZE_COUNTER);
     }
 
-    public void setSneezeCounter(int i) {
-        this.entityData.set(Panda.SNEEZE_COUNTER, i);
+    public void setSneezeCounter(int sneezeCounter) {
+        this.entityData.set(Panda.SNEEZE_COUNTER, sneezeCounter);
     }
 
     public Panda.Gene getMainGene() {
         return Panda.Gene.byId((Byte) this.entityData.get(Panda.MAIN_GENE_ID));
     }
 
-    public void setMainGene(Panda.Gene panda_gene) {
-        if (panda_gene.getId() > 6) {
-            panda_gene = Panda.Gene.getRandom(this.random);
+    public void setMainGene(Panda.Gene pandaType) {
+        if (pandaType.getId() > 6) {
+            pandaType = Panda.Gene.getRandom(this.random);
         }
 
-        this.entityData.set(Panda.MAIN_GENE_ID, (byte) panda_gene.getId());
+        this.entityData.set(Panda.MAIN_GENE_ID, (byte) pandaType.getId());
     }
 
     public Panda.Gene getHiddenGene() {
         return Panda.Gene.byId((Byte) this.entityData.get(Panda.HIDDEN_GENE_ID));
     }
 
-    public void setHiddenGene(Panda.Gene panda_gene) {
-        if (panda_gene.getId() > 6) {
-            panda_gene = Panda.Gene.getRandom(this.random);
+    public void setHiddenGene(Panda.Gene pandaType) {
+        if (pandaType.getId() > 6) {
+            pandaType = Panda.Gene.getRandom(this.random);
         }
 
-        this.entityData.set(Panda.HIDDEN_GENE_ID, (byte) panda_gene.getId());
+        this.entityData.set(Panda.HIDDEN_GENE_ID, (byte) pandaType.getId());
     }
 
     public boolean isRolling() {
         return this.getFlag(4);
     }
 
-    public void roll(boolean flag) {
-        this.setFlag(4, flag);
+    public void roll(boolean rolling) {
+        this.setFlag(4, rolling);
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Panda.UNHAPPY_COUNTER, 0);
@@ -221,58 +224,54 @@
         this.entityData.define(Panda.EAT_COUNTER, 0);
     }
 
-    private boolean getFlag(int i) {
-        return ((Byte) this.entityData.get(Panda.DATA_ID_FLAGS) & i) != 0;
+    private boolean getFlag(int flag) {
+        return ((Byte) this.entityData.get(Panda.DATA_ID_FLAGS) & flag) != 0;
     }
 
-    private void setFlag(int i, boolean flag) {
+    private void setFlag(int flagId, boolean value) {
         byte b0 = (Byte) this.entityData.get(Panda.DATA_ID_FLAGS);
 
-        if (flag) {
-            this.entityData.set(Panda.DATA_ID_FLAGS, (byte) (b0 | i));
+        if (value) {
+            this.entityData.set(Panda.DATA_ID_FLAGS, (byte) (b0 | flagId));
         } else {
-            this.entityData.set(Panda.DATA_ID_FLAGS, (byte) (b0 & ~i));
+            this.entityData.set(Panda.DATA_ID_FLAGS, (byte) (b0 & ~flagId));
         }
 
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putString("MainGene", this.getMainGene().getSerializedName());
-        compoundtag.putString("HiddenGene", this.getHiddenGene().getSerializedName());
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putString("MainGene", this.getMainGene().getSerializedName());
+        compound.putString("HiddenGene", this.getHiddenGene().getSerializedName());
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.setMainGene(Panda.Gene.byName(compoundtag.getString("MainGene")));
-        this.setHiddenGene(Panda.Gene.byName(compoundtag.getString("HiddenGene")));
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.setMainGene(Panda.Gene.byName(compound.getString("MainGene")));
+        this.setHiddenGene(Panda.Gene.byName(compound.getString("HiddenGene")));
     }
 
     @Nullable
     @Override
-    @Override
-    public AgeableMob getBreedOffspring(ServerLevel serverlevel, AgeableMob ageablemob) {
-        Panda panda = (Panda) EntityType.PANDA.create(serverlevel);
+    public AgeableMob getBreedOffspring(ServerLevel level, AgeableMob otherParent) {
+        Panda entitypanda = (Panda) EntityType.PANDA.create(level);
 
-        if (panda != null) {
-            if (ageablemob instanceof Panda) {
-                Panda panda1 = (Panda) ageablemob;
+        if (entitypanda != null) {
+            if (otherParent instanceof Panda) {
+                Panda entitypanda1 = (Panda) otherParent;
 
-                panda.setGeneFromParents(this, panda1);
+                entitypanda.setGeneFromParents(this, entitypanda1);
             }
 
-            panda.setAttributes();
+            entitypanda.setAttributes();
         }
 
-        return panda;
+        return entitypanda;
     }
 
     @Override
-    @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
         this.goalSelector.addGoal(2, new Panda.PandaPanicGoal(this, 2.0D));
@@ -322,19 +321,16 @@
     }
 
     @Override
-    @Override
     public boolean isAggressive() {
         return this.getVariant() == Panda.Gene.AGGRESSIVE;
     }
 
     @Override
-    @Override
     public boolean canBeLeashed(Player player) {
         return false;
     }
 
     @Override
-    @Override
     public boolean doHurtTarget(Entity entity) {
         this.playSound(SoundEvents.PANDA_BITE, 1.0F, 1.0F);
         if (!this.isAggressive()) {
@@ -345,7 +341,6 @@
     }
 
     @Override
-    @Override
     public void tick() {
         super.tick();
         if (this.isWorried()) {
@@ -357,16 +352,16 @@
             }
         }
 
-        LivingEntity livingentity = this.getTarget();
+        LivingEntity entityliving = this.getTarget();
 
-        if (livingentity == null) {
+        if (entityliving == null) {
             this.gotBamboo = false;
             this.didBite = false;
         }
 
         if (this.getUnhappyCounter() > 0) {
-            if (livingentity != null) {
-                this.lookAt(livingentity, 90.0F, 90.0F);
+            if (entityliving != null) {
+                this.lookAt(entityliving, 90.0F, 90.0F);
             }
 
             if (this.getUnhappyCounter() == 29 || this.getUnhappyCounter() == 14) {
@@ -439,16 +434,16 @@
             this.playSound(SoundEvents.PANDA_EAT, 0.5F + 0.5F * (float) this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
 
             for (int i = 0; i < 6; ++i) {
-                Vec3 vec3 = new Vec3(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, ((double) this.random.nextFloat() - 0.5D) * 0.1D);
+                Vec3 vec3d = new Vec3(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, ((double) this.random.nextFloat() - 0.5D) * 0.1D);
 
-                vec3 = vec3.xRot(-this.getXRot() * 0.017453292F);
-                vec3 = vec3.yRot(-this.getYRot() * 0.017453292F);
+                vec3d = vec3d.xRot(-this.getXRot() * 0.017453292F);
+                vec3d = vec3d.yRot(-this.getYRot() * 0.017453292F);
                 double d0 = (double) (-this.random.nextFloat()) * 0.6D - 0.3D;
-                Vec3 vec31 = new Vec3(((double) this.random.nextFloat() - 0.5D) * 0.8D, d0, 1.0D + ((double) this.random.nextFloat() - 0.5D) * 0.4D);
+                Vec3 vec3d1 = new Vec3(((double) this.random.nextFloat() - 0.5D) * 0.8D, d0, 1.0D + ((double) this.random.nextFloat() - 0.5D) * 0.4D);
 
-                vec31 = vec31.yRot(-this.yBodyRot * 0.017453292F);
-                vec31 = vec31.add(this.getX(), this.getEyeY() + 1.0D, this.getZ());
-                this.level().addParticle(new ItemParticleOption(ParticleTypes.ITEM, this.getItemBySlot(EquipmentSlot.MAINHAND)), vec31.x, vec31.y, vec31.z, vec3.x, vec3.y + 0.05D, vec3.z);
+                vec3d1 = vec3d1.yRot(-this.yBodyRot * 0.017453292F);
+                vec3d1 = vec3d1.add(this.getX(), this.getEyeY() + 1.0D, this.getZ());
+                this.level().addParticle(new ItemParticleOption(ParticleTypes.ITEM, this.getItemBySlot(EquipmentSlot.MAINHAND)), vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z);
             }
         }
 
@@ -484,16 +479,16 @@
 
     }
 
-    public float getSitAmount(float f) {
-        return Mth.lerp(f, this.sitAmountO, this.sitAmount);
+    public float getSitAmount(float partialTick) {
+        return Mth.lerp(partialTick, this.sitAmountO, this.sitAmount);
     }
 
-    public float getLieOnBackAmount(float f) {
-        return Mth.lerp(f, this.onBackAmountO, this.onBackAmount);
+    public float getLieOnBackAmount(float partialTick) {
+        return Mth.lerp(partialTick, this.onBackAmountO, this.onBackAmount);
     }
 
-    public float getRollAmount(float f) {
-        return Mth.lerp(f, this.rollAmountO, this.rollAmount);
+    public float getRollAmount(float partialTick) {
+        return Mth.lerp(partialTick, this.rollAmountO, this.rollAmount);
     }
 
     private void handleRoll() {
@@ -502,18 +497,18 @@
             this.roll(false);
         } else {
             if (!this.level().isClientSide) {
-                Vec3 vec3 = this.getDeltaMovement();
+                Vec3 vec3d = this.getDeltaMovement();
 
                 if (this.rollCounter == 1) {
                     float f = this.getYRot() * 0.017453292F;
                     float f1 = this.isBaby() ? 0.1F : 0.2F;
 
-                    this.rollDelta = new Vec3(vec3.x + (double) (-Mth.sin(f) * f1), 0.0D, vec3.z + (double) (Mth.cos(f) * f1));
+                    this.rollDelta = new Vec3(vec3d.x + (double) (-Mth.sin(f) * f1), 0.0D, vec3d.z + (double) (Mth.cos(f) * f1));
                     this.setDeltaMovement(this.rollDelta.add(0.0D, 0.27D, 0.0D));
                 } else if ((float) this.rollCounter != 7.0F && (float) this.rollCounter != 15.0F && (float) this.rollCounter != 23.0F) {
-                    this.setDeltaMovement(this.rollDelta.x, vec3.y, this.rollDelta.z);
+                    this.setDeltaMovement(this.rollDelta.x, vec3d.y, this.rollDelta.z);
                 } else {
-                    this.setDeltaMovement(0.0D, this.onGround() ? 0.27D : vec3.y, 0.0D);
+                    this.setDeltaMovement(0.0D, this.onGround() ? 0.27D : vec3d.y, 0.0D);
                 }
             }
 
@@ -521,83 +516,80 @@
     }
 
     private void afterSneeze() {
-        Vec3 vec3 = this.getDeltaMovement();
+        Vec3 vec3d = this.getDeltaMovement();
 
-        this.level().addParticle(ParticleTypes.SNEEZE, this.getX() - (double) (this.getBbWidth() + 1.0F) * 0.5D * (double) Mth.sin(this.yBodyRot * 0.017453292F), this.getEyeY() - 0.10000000149011612D, this.getZ() + (double) (this.getBbWidth() + 1.0F) * 0.5D * (double) Mth.cos(this.yBodyRot * 0.017453292F), vec3.x, 0.0D, vec3.z);
+        this.level().addParticle(ParticleTypes.SNEEZE, this.getX() - (double) (this.getBbWidth() + 1.0F) * 0.5D * (double) Mth.sin(this.yBodyRot * 0.017453292F), this.getEyeY() - 0.10000000149011612D, this.getZ() + (double) (this.getBbWidth() + 1.0F) * 0.5D * (double) Mth.cos(this.yBodyRot * 0.017453292F), vec3d.x, 0.0D, vec3d.z);
         this.playSound(SoundEvents.PANDA_SNEEZE, 1.0F, 1.0F);
         List<Panda> list = this.level().getEntitiesOfClass(Panda.class, this.getBoundingBox().inflate(10.0D));
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
-            Panda panda = (Panda) iterator.next();
+            Panda entitypanda = (Panda) iterator.next();
 
-            if (!panda.isBaby() && panda.onGround() && !panda.isInWater() && panda.canPerformAction()) {
-                panda.jumpFromGround();
+            if (!entitypanda.isBaby() && entitypanda.onGround() && !entitypanda.isInWater() && entitypanda.canPerformAction()) {
+                entitypanda.jumpFromGround();
             }
         }
 
         if (!this.level().isClientSide() && this.random.nextInt(700) == 0 && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
-            this.spawnAtLocation((ItemLike) Items.SLIME_BALL);
+            this.spawnAtLocation((IMaterial) Items.SLIME_BALL);
         }
 
     }
 
     @Override
-    @Override
-    protected void pickUpItem(ItemEntity itementity) {
-        if (this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty() && Panda.PANDA_ITEMS.test(itementity)) {
-            this.onItemPickup(itementity);
-            ItemStack itemstack = itementity.getItem();
+    protected void pickUpItem(ItemEntity itemEntity) {
+        if (!CraftEventFactory.callEntityPickupItemEvent(this, itemEntity, 0, !(this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty() && Panda.PANDA_ITEMS.test(itemEntity))).isCancelled()) { // CraftBukkit
+            this.onItemPickup(itemEntity);
+            ItemStack itemstack = itemEntity.getItem();
 
             this.setItemSlot(EquipmentSlot.MAINHAND, itemstack);
             this.setGuaranteedDrop(EquipmentSlot.MAINHAND);
-            this.take(itementity, itemstack.getCount());
-            itementity.discard();
+            this.take(itemEntity, itemstack.getCount());
+            itemEntity.discard();
         }
 
     }
 
     @Override
-    @Override
-    public boolean hurt(DamageSource damagesource, float f) {
+    public boolean hurt(DamageSource source, float amount) {
         if (!this.level().isClientSide) {
             this.sit(false);
         }
 
-        return super.hurt(damagesource, f);
+        return super.hurt(source, amount);
     }
 
     @Nullable
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
-        RandomSource randomsource = serverlevelaccessor.getRandom();
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
+        RandomSource randomsource = level.getRandom();
 
         this.setMainGene(Panda.Gene.getRandom(randomsource));
         this.setHiddenGene(Panda.Gene.getRandom(randomsource));
         this.setAttributes();
-        if (spawngroupdata == null) {
-            spawngroupdata = new AgeableMob.AgeableMobGroupData(0.2F);
+        if (spawnData == null) {
+            spawnData = new AgeableMob.AgeableMobGroupData(0.2F);
         }
 
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, (SpawnGroupData) spawngroupdata, compoundtag);
+        return super.finalizeSpawn(level, difficulty, reason, (GroupDataEntity) spawnData, dataTag);
     }
 
-    public void setGeneFromParents(Panda panda, @Nullable Panda panda1) {
-        if (panda1 == null) {
+    public void setGeneFromParents(Panda father, @Nullable Panda mother) {
+        if (mother == null) {
             if (this.random.nextBoolean()) {
-                this.setMainGene(panda.getOneOfGenesRandomly());
+                this.setMainGene(father.getOneOfGenesRandomly());
                 this.setHiddenGene(Panda.Gene.getRandom(this.random));
             } else {
                 this.setMainGene(Panda.Gene.getRandom(this.random));
-                this.setHiddenGene(panda.getOneOfGenesRandomly());
+                this.setHiddenGene(father.getOneOfGenesRandomly());
             }
         } else if (this.random.nextBoolean()) {
-            this.setMainGene(panda.getOneOfGenesRandomly());
-            this.setHiddenGene(panda1.getOneOfGenesRandomly());
+            this.setMainGene(father.getOneOfGenesRandomly());
+            this.setHiddenGene(mother.getOneOfGenesRandomly());
         } else {
-            this.setMainGene(panda1.getOneOfGenesRandomly());
-            this.setHiddenGene(panda.getOneOfGenesRandomly());
+            this.setMainGene(mother.getOneOfGenesRandomly());
+            this.setHiddenGene(father.getOneOfGenesRandomly());
         }
 
         if (this.random.nextInt(32) == 0) {
@@ -635,9 +627,8 @@
     }
 
     @Override
-    @Override
-    public InteractionResult mobInteract(Player player, InteractionHand interactionhand) {
-        ItemStack itemstack = player.getItemInHand(interactionhand);
+    public InteractionResult mobInteract(Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
 
         if (this.isScared()) {
             return InteractionResult.PASS;
@@ -650,10 +641,10 @@
             }
 
             if (this.isBaby()) {
-                this.usePlayerItem(player, interactionhand, itemstack);
+                this.usePlayerItem(player, hand, itemstack);
                 this.ageUp((int) ((float) (-this.getAge() / 20) * 0.1F), true);
             } else if (!this.level().isClientSide && this.getAge() == 0 && this.canFallInLove()) {
-                this.usePlayerItem(player, interactionhand, itemstack);
+                this.usePlayerItem(player, hand, itemstack);
                 this.setInLove(player);
             } else {
                 if (this.level().isClientSide || this.isSitting() || this.isInWater()) {
@@ -669,7 +660,7 @@
                 }
 
                 this.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(itemstack.getItem(), 1));
-                this.usePlayerItem(player, interactionhand, itemstack);
+                this.usePlayerItem(player, hand, itemstack);
             }
 
             return InteractionResult.SUCCESS;
@@ -680,38 +671,33 @@
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return this.isAggressive() ? SoundEvents.PANDA_AGGRESSIVE_AMBIENT : (this.isWorried() ? SoundEvents.PANDA_WORRIED_AMBIENT : SoundEvents.PANDA_AMBIENT);
     }
 
     @Override
-    @Override
-    protected void playStepSound(BlockPos blockpos, BlockState blockstate) {
+    protected void playStepSound(BlockPos pos, IBlockData block) {
         this.playSound(SoundEvents.PANDA_STEP, 0.15F, 1.0F);
     }
 
     @Override
-    @Override
-    public boolean isFood(ItemStack itemstack) {
-        return itemstack.is(Blocks.BAMBOO.asItem());
+    public boolean isFood(ItemStack stack) {
+        return stack.is(Blocks.BAMBOO.asItem());
     }
 
-    private boolean isFoodOrCake(ItemStack itemstack) {
-        return this.isFood(itemstack) || itemstack.is(Blocks.CAKE.asItem());
+    private boolean isFoodOrCake(ItemStack stack) {
+        return this.isFood(stack) || stack.is(Blocks.CAKE.asItem());
     }
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.PANDA_DEATH;
     }
 
     @Nullable
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.PANDA_HURT;
     }
 
@@ -720,9 +706,8 @@
     }
 
     @Override
-    @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitydimensions, float f) {
-        return new Vector3f(0.0F, entitydimensions.height - (this.isBaby() ? 0.4375F : 0.0F) * f, 0.0F);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, entitysize.height - (this.isBaby() ? 0.4375F : 0.0F) * f, 0.0F);
     }
 
     private static class PandaMoveControl extends MoveControl {
@@ -735,7 +720,6 @@
         }
 
         @Override
-        @Override
         public void tick() {
             if (this.panda.canPerformAction()) {
                 super.tick();
@@ -748,7 +732,7 @@
         NORMAL(0, "normal", false), LAZY(1, "lazy", false), WORRIED(2, "worried", false), PLAYFUL(3, "playful", false), BROWN(4, "brown", true), WEAK(5, "weak", true), AGGRESSIVE(6, "aggressive", false);
 
         public static final StringRepresentable.EnumCodec<Panda.Gene> CODEC = StringRepresentable.fromEnum(Panda.Gene::values);
-        private static final IntFunction<Panda.Gene> BY_ID = ByIdMap.continuous(Panda.Gene::getId, values(), ByIdMap.OutOfBoundsStrategy.ZERO);
+        private static final IntFunction<Panda.Gene> BY_ID = ByIdMap.continuous(Panda.Gene::getId, values(), ByIdMap.a.ZERO);
         private static final int MAX_GENE = 6;
         private final int id;
         private final String name;
@@ -765,7 +749,6 @@
         }
 
         @Override
-        @Override
         public String getSerializedName() {
             return this.name;
         }
@@ -774,20 +757,20 @@
             return this.isRecessive;
         }
 
-        static Panda.Gene getVariantFromGenes(Panda.Gene panda_gene, Panda.Gene panda_gene1) {
-            return panda_gene.isRecessive() ? (panda_gene == panda_gene1 ? panda_gene : Panda.Gene.NORMAL) : panda_gene;
+        static Panda.Gene getVariantFromGenes(Panda.Gene mainGene, Panda.Gene hiddenGene) {
+            return mainGene.isRecessive() ? (mainGene == hiddenGene ? mainGene : Panda.Gene.NORMAL) : mainGene;
         }
 
-        public static Panda.Gene byId(int i) {
-            return (Panda.Gene) Panda.Gene.BY_ID.apply(i);
+        public static Panda.Gene byId(int index) {
+            return (Panda.Gene) Panda.Gene.BY_ID.apply(index);
         }
 
-        public static Panda.Gene byName(String s) {
-            return (Panda.Gene) Panda.Gene.CODEC.byName(s, Panda.Gene.NORMAL);
+        public static Panda.Gene byName(String name) {
+            return (Panda.Gene) Panda.Gene.CODEC.byName(name, Panda.Gene.NORMAL);
         }
 
-        public static Panda.Gene getRandom(RandomSource randomsource) {
-            int i = randomsource.nextInt(16);
+        public static Panda.Gene getRandom(RandomSource random) {
+            int i = random.nextInt(16);
 
             return i == 0 ? Panda.Gene.LAZY : (i == 1 ? Panda.Gene.WORRIED : (i == 2 ? Panda.Gene.PLAYFUL : (i == 4 ? Panda.Gene.AGGRESSIVE : (i < 9 ? Panda.Gene.WEAK : (i < 11 ? Panda.Gene.BROWN : Panda.Gene.NORMAL)))));
         }
@@ -797,19 +780,17 @@
 
         private final Panda panda;
 
-        public PandaPanicGoal(Panda panda, double d0) {
-            super(panda, d0);
+        public PandaPanicGoal(Panda panda, double speedModifier) {
+            super(panda, speedModifier);
             this.panda = panda;
         }
 
         @Override
-        @Override
         protected boolean shouldPanic() {
             return this.mob.isFreezing() || this.mob.isOnFire();
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             if (this.panda.isSitting()) {
                 this.panda.getNavigation().stop();
@@ -825,13 +806,12 @@
         private final Panda panda;
         private int unhappyCooldown;
 
-        public PandaBreedGoal(Panda panda, double d0) {
-            super(panda, d0);
+        public PandaBreedGoal(Panda panda, double speedModifier) {
+            super(panda, speedModifier);
             this.panda = panda;
         }
 
         @Override
-        @Override
         public boolean canUse() {
             if (super.canUse() && this.panda.getUnhappyCounter() == 0) {
                 if (!this.canFindBamboo()) {
@@ -839,9 +819,9 @@
                         this.panda.setUnhappyCounter(32);
                         this.unhappyCooldown = this.panda.tickCount + 600;
                         if (this.panda.isEffectiveAi()) {
-                            Player player = this.level.getNearestPlayer(Panda.BREED_TARGETING, this.panda);
+                            Player entityhuman = this.level.getNearestPlayer(Panda.BREED_TARGETING, this.panda);
 
-                            this.panda.lookAtPlayerGoal.setTarget(player);
+                            this.panda.lookAtPlayerGoal.setTarget(entityhuman);
                         }
                     }
 
@@ -855,15 +835,15 @@
         }
 
         private boolean canFindBamboo() {
-            BlockPos blockpos = this.panda.blockPosition();
-            BlockPos.MutableBlockPos blockpos_mutableblockpos = new BlockPos.MutableBlockPos();
+            BlockPos blockposition = this.panda.blockPosition();
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
 
             for (int i = 0; i < 3; ++i) {
                 for (int j = 0; j < 8; ++j) {
                     for (int k = 0; k <= j; k = k > 0 ? -k : 1 - k) {
                         for (int l = k < j && k > -j ? j : 0; l <= j; l = l > 0 ? -l : 1 - l) {
-                            blockpos_mutableblockpos.setWithOffset(blockpos, k, i, l);
-                            if (this.level.getBlockState(blockpos_mutableblockpos).is(Blocks.BAMBOO)) {
+                            blockposition_mutableblockposition.setWithOffset(blockposition, k, i, l);
+                            if (this.level.getBlockState(blockposition_mutableblockposition).is(Blocks.BAMBOO)) {
                                 return true;
                             }
                         }
@@ -879,13 +859,12 @@
 
         private final Panda panda;
 
-        public PandaAttackGoal(Panda panda, double d0, boolean flag) {
-            super(panda, d0, flag);
+        public PandaAttackGoal(Panda panda, double speedModifier, boolean flag) {
+            super(panda, speedModifier, flag);
             this.panda = panda;
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return this.panda.canPerformAction() && super.canUse();
         }
@@ -895,16 +874,15 @@
 
         private final Panda panda;
 
-        public PandaAvoidGoal(Panda panda, Class<T> oclass, float f, double d0, double d1) {
-            Predicate predicate = EntitySelector.NO_SPECTATORS;
+        public PandaAvoidGoal(Panda panda, Class<T> entityClassToAvoid, float maxDist, double walkSpeedModifier, double d1) {
+            // Predicate predicate = IEntitySelector.NO_SPECTATORS;
 
-            Objects.requireNonNull(predicate);
-            super(panda, oclass, f, d0, d1, predicate::test);
+            // Objects.requireNonNull(predicate);
+            super(panda, entityClassToAvoid, maxDist, walkSpeedModifier, d1, EntitySelector.NO_SPECTATORS::test);
             this.panda = panda;
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return this.panda.isWorried() && this.panda.canPerformAction() && super.canUse();
         }
@@ -915,11 +893,10 @@
         private int cooldown;
 
         public PandaSitGoal() {
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE));
+            this.setFlags(EnumSet.of(Goal.Type.MOVE));
         }
 
         @Override
-        @Override
         public boolean canUse() {
             if (this.cooldown <= Panda.this.tickCount && !Panda.this.isBaby() && !Panda.this.isInWater() && Panda.this.canPerformAction() && Panda.this.getUnhappyCounter() <= 0) {
                 List<ItemEntity> list = Panda.this.level().getEntitiesOfClass(ItemEntity.class, Panda.this.getBoundingBox().inflate(6.0D, 6.0D, 6.0D), Panda.PANDA_ITEMS);
@@ -931,13 +908,11 @@
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return !Panda.this.isInWater() && (Panda.this.isLazy() || Panda.this.random.nextInt(reducedTickDelay(600)) != 1) ? Panda.this.random.nextInt(reducedTickDelay(2000)) != 1 : false;
         }
 
         @Override
-        @Override
         public void tick() {
             if (!Panda.this.isSitting() && !Panda.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty()) {
                 Panda.this.tryToSit();
@@ -946,7 +921,6 @@
         }
 
         @Override
-        @Override
         public void start() {
             List<ItemEntity> list = Panda.this.level().getEntitiesOfClass(ItemEntity.class, Panda.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Panda.PANDA_ITEMS);
 
@@ -960,7 +934,6 @@
         }
 
         @Override
-        @Override
         public void stop() {
             ItemStack itemstack = Panda.this.getItemBySlot(EquipmentSlot.MAINHAND);
 
@@ -986,26 +959,22 @@
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return this.cooldown < this.panda.tickCount && this.panda.isLazy() && this.panda.canPerformAction() && this.panda.random.nextInt(reducedTickDelay(400)) == 1;
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return !this.panda.isInWater() && (this.panda.isLazy() || this.panda.random.nextInt(reducedTickDelay(600)) != 1) ? this.panda.random.nextInt(reducedTickDelay(2000)) != 1 : false;
         }
 
         @Override
-        @Override
         public void start() {
             this.panda.setOnBack(true);
             this.cooldown = 0;
         }
 
         @Override
-        @Override
         public void stop() {
             this.panda.setOnBack(false);
             this.cooldown = this.panda.tickCount + 200;
@@ -1021,19 +990,16 @@
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return this.panda.isBaby() && this.panda.canPerformAction() ? (this.panda.isWeak() && this.panda.random.nextInt(reducedTickDelay(500)) == 1 ? true : this.panda.random.nextInt(reducedTickDelay(6000)) == 1) : false;
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return false;
         }
 
         @Override
-        @Override
         public void start() {
             this.panda.sneeze(true);
         }
@@ -1043,23 +1009,21 @@
 
         private final Panda panda;
 
-        public PandaLookAtPlayerGoal(Panda panda, Class<? extends LivingEntity> oclass, float f) {
-            super(panda, oclass, f);
+        public PandaLookAtPlayerGoal(Panda panda, Class<? extends LivingEntity> lookAtType, float lookDistance) {
+            super(panda, lookAtType, lookDistance);
             this.panda = panda;
         }
 
-        public void setTarget(LivingEntity livingentity) {
-            this.lookAt = livingentity;
+        public void setTarget(LivingEntity lookAt) {
+            this.lookAt = lookAt;
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return this.lookAt != null && super.canContinueToUse();
         }
 
         @Override
-        @Override
         public boolean canUse() {
             if (this.mob.getRandom().nextFloat() >= this.probability) {
                 return false;
@@ -1068,7 +1032,7 @@
                     if (this.lookAtType == Player.class) {
                         this.lookAt = this.mob.level().getNearestPlayer(this.lookAtContext, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
                     } else {
-                        this.lookAt = this.mob.level().getNearestEntity(this.mob.level().getEntitiesOfClass(this.lookAtType, this.mob.getBoundingBox().inflate((double) this.lookDistance, 3.0D, (double) this.lookDistance), (livingentity) -> {
+                        this.lookAt = this.mob.level().getNearestEntity(this.mob.level().getEntitiesOfClass(this.lookAtType, this.mob.getBoundingBox().inflate((double) this.lookDistance, 3.0D, (double) this.lookDistance), (entityliving) -> {
                             return true;
                         }), this.lookAtContext, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
                     }
@@ -1079,7 +1043,6 @@
         }
 
         @Override
-        @Override
         public void tick() {
             if (this.lookAt != null) {
                 super.tick();
@@ -1094,11 +1057,10 @@
 
         public PandaRollGoal(Panda panda) {
             this.panda = panda;
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK, Goal.Flag.JUMP));
+            this.setFlags(EnumSet.of(Goal.Type.MOVE, Goal.Type.LOOK, Goal.Type.JUMP));
         }
 
         @Override
-        @Override
         public boolean canUse() {
             if ((this.panda.isBaby() || this.panda.isPlayful()) && this.panda.onGround()) {
                 if (!this.panda.canPerformAction()) {
@@ -1118,19 +1080,16 @@
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return false;
         }
 
         @Override
-        @Override
         public void start() {
             this.panda.roll(true);
         }
 
         @Override
-        @Override
         public boolean isInterruptable() {
             return false;
         }
@@ -1140,13 +1099,12 @@
 
         private final Panda panda;
 
-        public PandaHurtByTargetGoal(Panda panda, Class<?>... aclass) {
-            super(panda, aclass);
+        public PandaHurtByTargetGoal(Panda panda, Class<?>... entityClassToIgnoreDamage) {
+            super(panda, entityClassToIgnoreDamage);
             this.panda = panda;
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             if (!this.panda.gotBamboo && !this.panda.didBite) {
                 return super.canContinueToUse();
@@ -1157,10 +1115,9 @@
         }
 
         @Override
-        @Override
-        protected void alertOther(Mob mob, LivingEntity livingentity) {
+        protected void alertOther(Mob mob, LivingEntity target) {
             if (mob instanceof Panda && mob.isAggressive()) {
-                mob.setTarget(livingentity);
+                mob.setTarget(target, EntityTargetEvent.TargetReason.TARGET_ATTACKED_ENTITY, true); // CraftBukkit
             }
 
         }
