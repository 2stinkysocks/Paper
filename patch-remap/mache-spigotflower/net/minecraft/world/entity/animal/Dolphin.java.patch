--- a/net/minecraft/world/entity/animal/Dolphin.java
+++ b/net/minecraft/world/entity/animal/Dolphin.java
@@ -19,20 +19,20 @@
 import net.minecraft.tags.StructureTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.EnumMoveType;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.MoverType;
-import net.minecraft.world.entity.Pose;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.SmoothSwimmingLookControl;
@@ -44,8 +44,8 @@
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
+import net.minecraft.world.entity.ai.goal.PathfinderGoalRandomSwim;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
-import net.minecraft.world.entity.ai.goal.RandomSwimmingGoal;
 import net.minecraft.world.entity.ai.goal.TryFindWaterGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
@@ -58,23 +58,33 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
-import net.minecraft.world.level.pathfinder.PathComputationType;
+import net.minecraft.world.level.pathfinder.PathMode;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+// CraftBukkit end
 
 public class Dolphin extends WaterAnimal {
 
+    // CraftBukkit start - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+    @Override
+    public int getDefaultMaxAirSupply() {
+        return TOTAL_AIR_SUPPLY;
+    }
+    // CraftBukkit end
     private static final EntityDataAccessor<BlockPos> TREASURE_POS = SynchedEntityData.defineId(Dolphin.class, EntityDataSerializers.BLOCK_POS);
     private static final EntityDataAccessor<Boolean> GOT_FISH = SynchedEntityData.defineId(Dolphin.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Integer> MOISTNESS_LEVEL = SynchedEntityData.defineId(Dolphin.class, EntityDataSerializers.INT);
     static final TargetingConditions SWIM_WITH_PLAYER_TARGETING = TargetingConditions.forNonCombat().range(10.0D).ignoreLineOfSight();
     public static final int TOTAL_AIR_SUPPLY = 4800;
     private static final int TOTAL_MOISTNESS_LEVEL = 2400;
-    public static final Predicate<ItemEntity> ALLOWED_ITEMS = (itementity) -> {
-        return !itementity.hasPickUpDelay() && itementity.isAlive() && itementity.isInWater();
+    public static final Predicate<ItemEntity> ALLOWED_ITEMS = (entityitem) -> {
+        return !entityitem.hasPickUpDelay() && entityitem.isAlive() && entityitem.isInWater();
     };
 
-    public Dolphin(EntityType<? extends Dolphin> entitytype, Level level) {
-        super(entitytype, level);
+    public Dolphin(EntityType<? extends Dolphin> entityType, Level level) {
+        super(entityType, level);
         this.moveControl = new SmoothSwimmingMoveControl(this, 85, 10, 0.02F, 0.1F, true);
         this.lookControl = new SmoothSwimmingLookControl(this, 10);
         this.setCanPickUpLoot(true);
@@ -82,19 +92,17 @@
 
     @Nullable
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
         this.setAirSupply(this.getMaxAirSupply());
         this.setXRot(0.0F);
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, spawngroupdata, compoundtag);
+        return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
     }
 
     @Override
-    @Override
-    protected void handleAirSupply(int i) {}
+    protected void handleAirSupply(int airSupply) {}
 
-    public void setTreasurePos(BlockPos blockpos) {
-        this.entityData.set(Dolphin.TREASURE_POS, blockpos);
+    public void setTreasurePos(BlockPos pos) {
+        this.entityData.set(Dolphin.TREASURE_POS, pos);
     }
 
     public BlockPos getTreasurePos() {
@@ -105,20 +113,19 @@
         return (Boolean) this.entityData.get(Dolphin.GOT_FISH);
     }
 
-    public void setGotFish(boolean flag) {
-        this.entityData.set(Dolphin.GOT_FISH, flag);
+    public void setGotFish(boolean gotFish) {
+        this.entityData.set(Dolphin.GOT_FISH, gotFish);
     }
 
     public int getMoistnessLevel() {
         return (Integer) this.entityData.get(Dolphin.MOISTNESS_LEVEL);
     }
 
-    public void setMoisntessLevel(int i) {
-        this.entityData.set(Dolphin.MOISTNESS_LEVEL, i);
+    public void setMoisntessLevel(int moistnessLevel) {
+        this.entityData.set(Dolphin.MOISTNESS_LEVEL, moistnessLevel);
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Dolphin.TREASURE_POS, BlockPos.ZERO);
@@ -127,37 +134,34 @@
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putInt("TreasurePosX", this.getTreasurePos().getX());
-        compoundtag.putInt("TreasurePosY", this.getTreasurePos().getY());
-        compoundtag.putInt("TreasurePosZ", this.getTreasurePos().getZ());
-        compoundtag.putBoolean("GotFish", this.gotFish());
-        compoundtag.putInt("Moistness", this.getMoistnessLevel());
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putInt("TreasurePosX", this.getTreasurePos().getX());
+        compound.putInt("TreasurePosY", this.getTreasurePos().getY());
+        compound.putInt("TreasurePosZ", this.getTreasurePos().getZ());
+        compound.putBoolean("GotFish", this.gotFish());
+        compound.putInt("Moistness", this.getMoistnessLevel());
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        int i = compoundtag.getInt("TreasurePosX");
-        int j = compoundtag.getInt("TreasurePosY");
-        int k = compoundtag.getInt("TreasurePosZ");
+    public void readAdditionalSaveData(CompoundTag compound) {
+        int i = compound.getInt("TreasurePosX");
+        int j = compound.getInt("TreasurePosY");
+        int k = compound.getInt("TreasurePosZ");
 
         this.setTreasurePos(new BlockPos(i, j, k));
-        super.readAdditionalSaveData(compoundtag);
-        this.setGotFish(compoundtag.getBoolean("GotFish"));
-        this.setMoisntessLevel(compoundtag.getInt("Moistness"));
+        super.readAdditionalSaveData(compound);
+        this.setGotFish(compound.getBoolean("GotFish"));
+        this.setMoisntessLevel(compound.getInt("Moistness"));
     }
 
     @Override
-    @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new BreathAirGoal(this));
         this.goalSelector.addGoal(0, new TryFindWaterGoal(this));
         this.goalSelector.addGoal(1, new Dolphin.DolphinSwimToTreasureGoal(this));
         this.goalSelector.addGoal(2, new Dolphin.DolphinSwimWithPlayerGoal(this, 4.0D));
-        this.goalSelector.addGoal(4, new RandomSwimmingGoal(this, 1.0D, 10));
+        this.goalSelector.addGoal(4, new PathfinderGoalRandomSwim(this, 1.0D, 10));
         this.goalSelector.addGoal(4, new RandomLookAroundGoal(this));
         this.goalSelector.addGoal(5, new LookAtPlayerGoal(this, Player.class, 6.0F));
         this.goalSelector.addGoal(5, new DolphinJumpGoal(this, 10));
@@ -173,13 +177,11 @@
     }
 
     @Override
-    @Override
     protected PathNavigation createNavigation(Level level) {
         return new WaterBoundPathNavigation(this, level);
     }
 
     @Override
-    @Override
     public boolean doHurtTarget(Entity entity) {
         boolean flag = entity.hurt(this.damageSources().mobAttack(this), (float) ((int) this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
 
@@ -192,68 +194,65 @@
     }
 
     @Override
-    @Override
     public int getMaxAirSupply() {
-        return 4800;
+        return maxAirTicks; // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
     }
 
     @Override
-    @Override
-    protected int increaseAirSupply(int i) {
+    protected int increaseAirSupply(int currentAir) {
         return this.getMaxAirSupply();
     }
 
     @Override
-    @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions entitydimensions) {
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions size) {
         return 0.3F;
     }
 
     @Override
-    @Override
     public int getMaxHeadXRot() {
         return 1;
     }
 
     @Override
-    @Override
     public int getMaxHeadYRot() {
         return 1;
     }
 
     @Override
-    @Override
     protected boolean canRide(Entity entity) {
         return true;
     }
 
     @Override
-    @Override
     public boolean canTakeItem(ItemStack itemstack) {
-        EquipmentSlot equipmentslot = Mob.getEquipmentSlotForItem(itemstack);
+        EquipmentSlot enumitemslot = Mob.getEquipmentSlotForItem(itemstack);
 
-        return !this.getItemBySlot(equipmentslot).isEmpty() ? false : equipmentslot == EquipmentSlot.MAINHAND && super.canTakeItem(itemstack);
+        return !this.getItemBySlot(enumitemslot).isEmpty() ? false : enumitemslot == EquipmentSlot.MAINHAND && super.canTakeItem(itemstack);
     }
 
     @Override
-    @Override
-    protected void pickUpItem(ItemEntity itementity) {
+    protected void pickUpItem(ItemEntity itemEntity) {
         if (this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty()) {
-            ItemStack itemstack = itementity.getItem();
+            ItemStack itemstack = itemEntity.getItem();
 
             if (this.canHoldItem(itemstack)) {
-                this.onItemPickup(itementity);
+                // CraftBukkit start - call EntityPickupItemEvent
+                if (CraftEventFactory.callEntityPickupItemEvent(this, itemEntity, 0, false).isCancelled()) {
+                    return;
+                }
+                itemstack = itemEntity.getItem(); // CraftBukkit- update ItemStack from event
+                // CraftBukkit start
+                this.onItemPickup(itemEntity);
                 this.setItemSlot(EquipmentSlot.MAINHAND, itemstack);
                 this.setGuaranteedDrop(EquipmentSlot.MAINHAND);
-                this.take(itementity, itemstack.getCount());
-                itementity.discard();
+                this.take(itemEntity, itemstack.getCount());
+                itemEntity.discard();
             }
         }
 
     }
 
     @Override
-    @Override
     public void tick() {
         super.tick();
         if (this.isNoAi()) {
@@ -276,14 +275,14 @@
             }
 
             if (this.level().isClientSide && this.isInWater() && this.getDeltaMovement().lengthSqr() > 0.03D) {
-                Vec3 vec3 = this.getViewVector(0.0F);
+                Vec3 vec3d = this.getViewVector(0.0F);
                 float f = Mth.cos(this.getYRot() * 0.017453292F) * 0.3F;
                 float f1 = Mth.sin(this.getYRot() * 0.017453292F) * 0.3F;
                 float f2 = 1.2F - this.random.nextFloat() * 0.7F;
 
                 for (int i = 0; i < 2; ++i) {
-                    this.level().addParticle(ParticleTypes.DOLPHIN, this.getX() - vec3.x * (double) f2 + (double) f, this.getY() - vec3.y, this.getZ() - vec3.z * (double) f2 + (double) f1, 0.0D, 0.0D, 0.0D);
-                    this.level().addParticle(ParticleTypes.DOLPHIN, this.getX() - vec3.x * (double) f2 - (double) f, this.getY() - vec3.y, this.getZ() - vec3.z * (double) f2 - (double) f1, 0.0D, 0.0D, 0.0D);
+                    this.level().addParticle(ParticleTypes.DOLPHIN, this.getX() - vec3d.x * (double) f2 + (double) f, this.getY() - vec3d.y, this.getZ() - vec3d.z * (double) f2 + (double) f1, 0.0D, 0.0D, 0.0D);
+                    this.level().addParticle(ParticleTypes.DOLPHIN, this.getX() - vec3d.x * (double) f2 - (double) f, this.getY() - vec3d.y, this.getZ() - vec3d.z * (double) f2 - (double) f1, 0.0D, 0.0D, 0.0D);
                 }
             }
 
@@ -291,31 +290,29 @@
     }
 
     @Override
-    @Override
-    public void handleEntityEvent(byte b0) {
-        if (b0 == 38) {
+    public void handleEntityEvent(byte id) {
+        if (id == 38) {
             this.addParticlesAroundSelf(ParticleTypes.HAPPY_VILLAGER);
         } else {
-            super.handleEntityEvent(b0);
+            super.handleEntityEvent(id);
         }
 
     }
 
-    private void addParticlesAroundSelf(ParticleOptions particleoptions) {
+    private void addParticlesAroundSelf(ParticleOptions particleOption) {
         for (int i = 0; i < 7; ++i) {
             double d0 = this.random.nextGaussian() * 0.01D;
             double d1 = this.random.nextGaussian() * 0.01D;
             double d2 = this.random.nextGaussian() * 0.01D;
 
-            this.level().addParticle(particleoptions, this.getRandomX(1.0D), this.getRandomY() + 0.2D, this.getRandomZ(1.0D), d0, d1, d2);
+            this.level().addParticle(particleOption, this.getRandomX(1.0D), this.getRandomY() + 0.2D, this.getRandomZ(1.0D), d0, d1, d2);
         }
 
     }
 
     @Override
-    @Override
-    protected InteractionResult mobInteract(Player player, InteractionHand interactionhand) {
-        ItemStack itemstack = player.getItemInHand(interactionhand);
+    protected InteractionResult mobInteract(Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
 
         if (!itemstack.isEmpty() && itemstack.is(ItemTags.FISHES)) {
             if (!this.level().isClientSide) {
@@ -329,66 +326,59 @@
 
             return InteractionResult.sidedSuccess(this.level().isClientSide);
         } else {
-            return super.mobInteract(player, interactionhand);
+            return super.mobInteract(player, hand);
         }
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.DOLPHIN_HURT;
     }
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.DOLPHIN_DEATH;
     }
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return this.isInWater() ? SoundEvents.DOLPHIN_AMBIENT_WATER : SoundEvents.DOLPHIN_AMBIENT;
     }
 
     @Override
-    @Override
     protected SoundEvent getSwimSplashSound() {
         return SoundEvents.DOLPHIN_SPLASH;
     }
 
     @Override
-    @Override
     protected SoundEvent getSwimSound() {
         return SoundEvents.DOLPHIN_SWIM;
     }
 
     protected boolean closeToNextPos() {
-        BlockPos blockpos = this.getNavigation().getTargetPos();
+        BlockPos blockposition = this.getNavigation().getTargetPos();
 
-        return blockpos != null ? blockpos.closerToCenterThan(this.position(), 12.0D) : false;
+        return blockposition != null ? blockposition.closerToCenterThan(this.position(), 12.0D) : false;
     }
 
     @Override
-    @Override
-    public void travel(Vec3 vec3) {
+    public void travel(Vec3 travelVector) {
         if (this.isEffectiveAi() && this.isInWater()) {
-            this.moveRelative(this.getSpeed(), vec3);
-            this.move(MoverType.SELF, this.getDeltaMovement());
+            this.moveRelative(this.getSpeed(), travelVector);
+            this.move(EnumMoveType.SELF, this.getDeltaMovement());
             this.setDeltaMovement(this.getDeltaMovement().scale(0.9D));
             if (this.getTarget() == null) {
                 this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.005D, 0.0D));
             }
         } else {
-            super.travel(vec3);
+            super.travel(travelVector);
         }
 
     }
 
     @Override
-    @Override
     public boolean canBeLeashed(Player player) {
         return true;
     }
@@ -400,43 +390,39 @@
 
         DolphinSwimToTreasureGoal(Dolphin dolphin) {
             this.dolphin = dolphin;
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
+            this.setFlags(EnumSet.of(Goal.Type.MOVE, Goal.Type.LOOK));
         }
 
         @Override
-        @Override
         public boolean isInterruptable() {
             return false;
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return this.dolphin.gotFish() && this.dolphin.getAirSupply() >= 100;
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
-            BlockPos blockpos = this.dolphin.getTreasurePos();
+            BlockPos blockposition = this.dolphin.getTreasurePos();
 
-            return !BlockPos.containing((double) blockpos.getX(), this.dolphin.getY(), (double) blockpos.getZ()).closerToCenterThan(this.dolphin.position(), 4.0D) && !this.stuck && this.dolphin.getAirSupply() >= 100;
+            return !BlockPos.containing((double) blockposition.getX(), this.dolphin.getY(), (double) blockposition.getZ()).closerToCenterThan(this.dolphin.position(), 4.0D) && !this.stuck && this.dolphin.getAirSupply() >= 100;
         }
 
         @Override
-        @Override
         public void start() {
             if (this.dolphin.level() instanceof ServerLevel) {
-                ServerLevel serverlevel = (ServerLevel) this.dolphin.level();
+                ServerLevel worldserver = (ServerLevel) this.dolphin.level();
 
                 this.stuck = false;
                 this.dolphin.getNavigation().stop();
-                BlockPos blockpos = this.dolphin.blockPosition();
-                BlockPos blockpos1 = serverlevel.findNearestMapStructure(StructureTags.DOLPHIN_LOCATED, blockpos, 50, false);
+                BlockPos blockposition = this.dolphin.blockPosition();
+                BlockPos blockposition1 = worldserver.findNearestMapStructure(StructureTags.DOLPHIN_LOCATED, blockposition, 50, false);
 
-                if (blockpos1 != null) {
-                    this.dolphin.setTreasurePos(blockpos1);
-                    serverlevel.broadcastEntityEvent(this.dolphin, (byte) 38);
+                if (blockposition1 != null) {
+                    this.dolphin.setTreasurePos(blockposition1);
+                    worldserver.broadcastEntityEvent(this.dolphin, (byte) 38);
                 } else {
                     this.stuck = true;
                 }
@@ -444,46 +430,44 @@
         }
 
         @Override
-        @Override
         public void stop() {
-            BlockPos blockpos = this.dolphin.getTreasurePos();
+            BlockPos blockposition = this.dolphin.getTreasurePos();
 
-            if (BlockPos.containing((double) blockpos.getX(), this.dolphin.getY(), (double) blockpos.getZ()).closerToCenterThan(this.dolphin.position(), 4.0D) || this.stuck) {
+            if (BlockPos.containing((double) blockposition.getX(), this.dolphin.getY(), (double) blockposition.getZ()).closerToCenterThan(this.dolphin.position(), 4.0D) || this.stuck) {
                 this.dolphin.setGotFish(false);
             }
 
         }
 
         @Override
-        @Override
         public void tick() {
-            Level level = this.dolphin.level();
+            Level world = this.dolphin.level();
 
             if (this.dolphin.closeToNextPos() || this.dolphin.getNavigation().isDone()) {
-                Vec3 vec3 = Vec3.atCenterOf(this.dolphin.getTreasurePos());
-                Vec3 vec31 = DefaultRandomPos.getPosTowards(this.dolphin, 16, 1, vec3, 0.39269909262657166D);
+                Vec3 vec3d = Vec3.atCenterOf(this.dolphin.getTreasurePos());
+                Vec3 vec3d1 = DefaultRandomPos.getPosTowards(this.dolphin, 16, 1, vec3d, 0.39269909262657166D);
 
-                if (vec31 == null) {
-                    vec31 = DefaultRandomPos.getPosTowards(this.dolphin, 8, 4, vec3, 1.5707963705062866D);
+                if (vec3d1 == null) {
+                    vec3d1 = DefaultRandomPos.getPosTowards(this.dolphin, 8, 4, vec3d, 1.5707963705062866D);
                 }
 
-                if (vec31 != null) {
-                    BlockPos blockpos = BlockPos.containing(vec31);
+                if (vec3d1 != null) {
+                    BlockPos blockposition = BlockPos.containing(vec3d1);
 
-                    if (!level.getFluidState(blockpos).is(FluidTags.WATER) || !level.getBlockState(blockpos).isPathfindable(level, blockpos, PathComputationType.WATER)) {
-                        vec31 = DefaultRandomPos.getPosTowards(this.dolphin, 8, 5, vec3, 1.5707963705062866D);
+                    if (!world.getFluidState(blockposition).is(FluidTags.WATER) || !world.getBlockState(blockposition).isPathfindable(world, blockposition, PathMode.WATER)) {
+                        vec3d1 = DefaultRandomPos.getPosTowards(this.dolphin, 8, 5, vec3d, 1.5707963705062866D);
                     }
                 }
 
-                if (vec31 == null) {
+                if (vec3d1 == null) {
                     this.stuck = true;
                     return;
                 }
 
-                this.dolphin.getLookControl().setLookAt(vec31.x, vec31.y, vec31.z, (float) (this.dolphin.getMaxHeadYRot() + 20), (float) this.dolphin.getMaxHeadXRot());
-                this.dolphin.getNavigation().moveTo(vec31.x, vec31.y, vec31.z, 1.3D);
-                if (level.random.nextInt(this.adjustedTickDelay(80)) == 0) {
-                    level.broadcastEntityEvent(this.dolphin, (byte) 38);
+                this.dolphin.getLookControl().setLookAt(vec3d1.x, vec3d1.y, vec3d1.z, (float) (this.dolphin.getMaxHeadYRot() + 20), (float) this.dolphin.getMaxHeadXRot());
+                this.dolphin.getNavigation().moveTo(vec3d1.x, vec3d1.y, vec3d1.z, 1.3D);
+                if (world.random.nextInt(this.adjustedTickDelay(80)) == 0) {
+                    world.broadcastEntityEvent(this.dolphin, (byte) 38);
                 }
             }
 
@@ -497,40 +481,35 @@
         @Nullable
         private Player player;
 
-        DolphinSwimWithPlayerGoal(Dolphin dolphin, double d0) {
+        DolphinSwimWithPlayerGoal(Dolphin dolphin, double speedModifier) {
             this.dolphin = dolphin;
-            this.speedModifier = d0;
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
+            this.speedModifier = speedModifier;
+            this.setFlags(EnumSet.of(Goal.Type.MOVE, Goal.Type.LOOK));
         }
 
         @Override
-        @Override
         public boolean canUse() {
             this.player = this.dolphin.level().getNearestPlayer(Dolphin.SWIM_WITH_PLAYER_TARGETING, this.dolphin);
             return this.player == null ? false : this.player.isSwimming() && this.dolphin.getTarget() != this.player;
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return this.player != null && this.player.isSwimming() && this.dolphin.distanceToSqr((Entity) this.player) < 256.0D;
         }
 
         @Override
-        @Override
         public void start() {
-            this.player.addEffect(new MobEffectInstance(MobEffects.DOLPHINS_GRACE, 100), this.dolphin);
+            this.player.addEffect(new MobEffectInstance(MobEffects.DOLPHINS_GRACE, 100), this.dolphin, EntityPotionEffectEvent.Cause.DOLPHIN); // CraftBukkit
         }
 
         @Override
-        @Override
         public void stop() {
             this.player = null;
             this.dolphin.getNavigation().stop();
         }
 
         @Override
-        @Override
         public void tick() {
             this.dolphin.getLookControl().setLookAt(this.player, (float) (this.dolphin.getMaxHeadYRot() + 20), (float) this.dolphin.getMaxHeadXRot());
             if (this.dolphin.distanceToSqr((Entity) this.player) < 6.25D) {
@@ -540,7 +519,7 @@
             }
 
             if (this.player.isSwimming() && this.player.level().random.nextInt(6) == 0) {
-                this.player.addEffect(new MobEffectInstance(MobEffects.DOLPHINS_GRACE, 100), this.dolphin);
+                this.player.addEffect(new MobEffectInstance(MobEffects.DOLPHINS_GRACE, 100), this.dolphin, EntityPotionEffectEvent.Cause.DOLPHIN); // CraftBukkit
             }
 
         }
@@ -553,7 +532,6 @@
         PlayWithItemsGoal() {}
 
         @Override
-        @Override
         public boolean canUse() {
             if (this.cooldown > Dolphin.this.tickCount) {
                 return false;
@@ -565,7 +543,6 @@
         }
 
         @Override
-        @Override
         public void start() {
             List<ItemEntity> list = Dolphin.this.level().getEntitiesOfClass(ItemEntity.class, Dolphin.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Dolphin.ALLOWED_ITEMS);
 
@@ -578,7 +555,6 @@
         }
 
         @Override
-        @Override
         public void stop() {
             ItemStack itemstack = Dolphin.this.getItemBySlot(EquipmentSlot.MAINHAND);
 
@@ -591,7 +567,6 @@
         }
 
         @Override
-        @Override
         public void tick() {
             List<ItemEntity> list = Dolphin.this.level().getEntitiesOfClass(ItemEntity.class, Dolphin.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Dolphin.ALLOWED_ITEMS);
             ItemStack itemstack = Dolphin.this.getItemBySlot(EquipmentSlot.MAINHAND);
@@ -605,19 +580,19 @@
 
         }
 
-        private void drop(ItemStack itemstack) {
-            if (!itemstack.isEmpty()) {
+        private void drop(ItemStack stack) {
+            if (!stack.isEmpty()) {
                 double d0 = Dolphin.this.getEyeY() - 0.30000001192092896D;
-                ItemEntity itementity = new ItemEntity(Dolphin.this.level(), Dolphin.this.getX(), d0, Dolphin.this.getZ(), itemstack);
+                ItemEntity entityitem = new ItemEntity(Dolphin.this.level(), Dolphin.this.getX(), d0, Dolphin.this.getZ(), stack);
 
-                itementity.setPickUpDelay(40);
-                itementity.setThrower(Dolphin.this);
+                entityitem.setPickUpDelay(40);
+                entityitem.setThrower(Dolphin.this);
                 float f = 0.3F;
                 float f1 = Dolphin.this.random.nextFloat() * 6.2831855F;
                 float f2 = 0.02F * Dolphin.this.random.nextFloat();
 
-                itementity.setDeltaMovement((double) (0.3F * -Mth.sin(Dolphin.this.getYRot() * 0.017453292F) * Mth.cos(Dolphin.this.getXRot() * 0.017453292F) + Mth.cos(f1) * f2), (double) (0.3F * Mth.sin(Dolphin.this.getXRot() * 0.017453292F) * 1.5F), (double) (0.3F * Mth.cos(Dolphin.this.getYRot() * 0.017453292F) * Mth.cos(Dolphin.this.getXRot() * 0.017453292F) + Mth.sin(f1) * f2));
-                Dolphin.this.level().addFreshEntity(itementity);
+                entityitem.setDeltaMovement((double) (0.3F * -Mth.sin(Dolphin.this.getYRot() * 0.017453292F) * Mth.cos(Dolphin.this.getXRot() * 0.017453292F) + Mth.cos(f1) * f2), (double) (0.3F * Mth.sin(Dolphin.this.getXRot() * 0.017453292F) * 1.5F), (double) (0.3F * Mth.cos(Dolphin.this.getYRot() * 0.017453292F) * Mth.cos(Dolphin.this.getXRot() * 0.017453292F) + Mth.sin(f1) * f2));
+                Dolphin.this.level().addFreshEntity(entityitem);
             }
         }
     }
