--- a/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -25,16 +25,16 @@
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.util.Mth;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.AnimationState;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -46,8 +46,8 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.RenderShape;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.EnumRenderType;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.level.pathfinder.Path;
@@ -81,24 +81,31 @@
         return Mob.createMobAttributes().add(Attributes.MOVEMENT_SPEED, 0.10000000149011612D).add(Attributes.MAX_HEALTH, 14.0D);
     }
 
-    public Sniffer(EntityType<? extends Animal> entitytype, Level level) {
-        super(entitytype, level);
-        this.entityData.define(Sniffer.DATA_STATE, Sniffer.State.IDLING);
-        this.entityData.define(Sniffer.DATA_DROP_SEED_AT_TICK, 0);
+    public Sniffer(EntityType<? extends Animal> entityType, Level level) {
+        super(entityType, level);
+        // this.entityData.define(Sniffer.DATA_STATE, Sniffer.State.IDLING); // CraftBukkit - moved down to appropriate location
+        // this.entityData.define(Sniffer.DATA_DROP_SEED_AT_TICK, 0); // CraftBukkit - moved down to appropriate location
         this.getNavigation().setCanFloat(true);
         this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F);
         this.setPathfindingMalus(BlockPathTypes.DANGER_POWDER_SNOW, -1.0F);
         this.setPathfindingMalus(BlockPathTypes.DAMAGE_CAUTIOUS, -1.0F);
     }
 
+    // CraftBukkit start - SPIGOT-7295: moved from constructor to appropriate location
     @Override
+    protected void defineSynchedData() {
+        super.defineSynchedData();
+        this.entityData.define(Sniffer.DATA_STATE, Sniffer.State.IDLING);
+        this.entityData.define(Sniffer.DATA_DROP_SEED_AT_TICK, 0);
+    }
+    // CraftBukkit end
+
     @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions entitydimensions) {
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions dimensions) {
         return this.getDimensions(pose).height * 0.6F;
     }
 
     @Override
-    @Override
     public void onPathfindingStart() {
         super.onPathfindingStart();
         if (this.isOnFire() || this.isInWater()) {
@@ -108,14 +115,12 @@
     }
 
     @Override
-    @Override
     public void onPathfindingDone() {
         this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F);
     }
 
     @Override
-    @Override
-    public EntityDimensions getDimensions(Pose pose) {
+    public EntityDimensions getDimensions(EntityPose pose) {
         return this.entityData.hasItem(Sniffer.DATA_STATE) && this.getState() == Sniffer.State.DIGGING ? Sniffer.DIGGING_DIMENSIONS.scale(this.getScale()) : super.getDimensions(pose);
     }
 
@@ -136,28 +141,27 @@
     }
 
     private BlockPos getHeadBlock() {
-        Vec3 vec3 = this.getHeadPosition();
+        Vec3 vec3d = this.getHeadPosition();
 
-        return BlockPos.containing(vec3.x(), this.getY() + 0.20000000298023224D, vec3.z());
+        return BlockPos.containing(vec3d.x(), this.getY() + 0.20000000298023224D, vec3d.z());
     }
 
     private Vec3 getHeadPosition() {
         return this.position().add(this.getForward().scale(2.25D));
     }
 
-    private Sniffer.State getState() {
+    public Sniffer.State getState() {
         return (Sniffer.State) this.entityData.get(Sniffer.DATA_STATE);
     }
 
-    private Sniffer setState(Sniffer.State sniffer_state) {
-        this.entityData.set(Sniffer.DATA_STATE, sniffer_state);
+    private Sniffer setState(Sniffer.State state) {
+        this.entityData.set(Sniffer.DATA_STATE, state);
         return this;
     }
 
     @Override
-    @Override
-    public void onSyncedDataUpdated(EntityDataAccessor<?> entitydataaccessor) {
-        if (Sniffer.DATA_STATE.equals(entitydataaccessor)) {
+    public void onSyncedDataUpdated(EntityDataAccessor<?> key) {
+        if (Sniffer.DATA_STATE.equals(key)) {
             Sniffer.State sniffer_state = this.getState();
 
             this.resetAnimations();
@@ -181,7 +185,7 @@
             this.refreshDimensions();
         }
 
-        super.onSyncedDataUpdated(entitydataaccessor);
+        super.onSyncedDataUpdated(key);
     }
 
     private void resetAnimations() {
@@ -192,8 +196,8 @@
         this.scentingAnimationState.stop();
     }
 
-    public Sniffer transitionTo(Sniffer.State sniffer_state) {
-        switch (sniffer_state) {
+    public Sniffer transitionTo(Sniffer.State state) {
+        switch (state) {
             case SCENTING:
                 this.setState(Sniffer.State.SCENTING).onScentingStart();
                 break;
@@ -233,69 +237,76 @@
         return this;
     }
 
-    public Sniffer onDiggingComplete(boolean flag) {
-        if (flag) {
+    public Sniffer onDiggingComplete(boolean storeExploredPosition) {
+        if (storeExploredPosition) {
             this.storeExploredPosition(this.getOnPos());
         }
 
         return this;
     }
 
-    Optional<BlockPos> calculateDigPosition() {
+    public Optional<BlockPos> calculateDigPosition() {
         return IntStream.range(0, 5).mapToObj((i) -> {
             return LandRandomPos.getPos(this, 10 + 2 * i, 3);
-        }).filter(Objects::nonNull).map(BlockPos::containing).filter((blockpos) -> {
-            return this.level().getWorldBorder().isWithinBounds(blockpos);
+        }).filter(Objects::nonNull).map(BlockPos::containing).filter((blockposition) -> {
+            return this.level().getWorldBorder().isWithinBounds(blockposition);
         }).map(BlockPos::below).filter(this::canDig).findFirst();
     }
 
-    boolean canDig() {
+    public boolean canDig() {
         return !this.isPanicking() && !this.isTempted() && !this.isBaby() && !this.isInWater() && this.onGround() && !this.isPassenger() && this.canDig(this.getHeadBlock().below());
     }
 
-    private boolean canDig(BlockPos blockpos) {
-        return this.level().getBlockState(blockpos).is(BlockTags.SNIFFER_DIGGABLE_BLOCK) && this.getExploredPositions().noneMatch((globalpos) -> {
-            return GlobalPos.of(this.level().dimension(), blockpos).equals(globalpos);
-        }) && (Boolean) Optional.ofNullable(this.getNavigation().createPath(blockpos, 1)).map(Path::canReach).orElse(false);
+    private boolean canDig(BlockPos pos) {
+        return this.level().getBlockState(pos).is(BlockTags.SNIFFER_DIGGABLE_BLOCK) && this.getExploredPositions().noneMatch((globalpos) -> {
+            return GlobalPos.of(this.level().dimension(), pos).equals(globalpos);
+        }) && (Boolean) Optional.ofNullable(this.getNavigation().createPath(pos, 1)).map(Path::canReach).orElse(false);
     }
 
     private void dropSeed() {
         if (!this.level().isClientSide() && (Integer) this.entityData.get(Sniffer.DATA_DROP_SEED_AT_TICK) == this.tickCount) {
-            ServerLevel serverlevel = (ServerLevel) this.level();
-            LootTable loottable = serverlevel.getServer().getLootData().getLootTable(BuiltInLootTables.SNIFFER_DIGGING);
-            LootParams lootparams = (new LootParams.Builder(serverlevel)).withParameter(LootContextParams.ORIGIN, this.getHeadPosition()).withParameter(LootContextParams.THIS_ENTITY, this).create(LootContextParamSets.GIFT);
+            ServerLevel worldserver = (ServerLevel) this.level();
+            LootTable loottable = worldserver.getServer().getLootData().getLootTable(BuiltInLootTables.SNIFFER_DIGGING);
+            LootParams lootparams = (new LootParams.Builder(worldserver)).withParameter(LootContextParams.ORIGIN, this.getHeadPosition()).withParameter(LootContextParams.THIS_ENTITY, this).create(LootContextParamSets.GIFT);
             List<ItemStack> list = loottable.getRandomItems(lootparams);
-            BlockPos blockpos = this.getHeadBlock();
+            BlockPos blockposition = this.getHeadBlock();
             Iterator iterator = list.iterator();
 
             while (iterator.hasNext()) {
                 ItemStack itemstack = (ItemStack) iterator.next();
-                ItemEntity itementity = new ItemEntity(serverlevel, (double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ(), itemstack);
+                ItemEntity entityitem = new ItemEntity(worldserver, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), itemstack);
 
-                itementity.setDefaultPickUpDelay();
-                serverlevel.addFreshEntity(itementity);
+                // CraftBukkit start - handle EntityDropItemEvent
+                org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+                org.bukkit.Bukkit.getPluginManager().callEvent(event);
+                if (event.isCancelled()) {
+                    continue;
+                }
+                // CraftBukkit end
+                entityitem.setDefaultPickUpDelay();
+                worldserver.addFreshEntity(entityitem);
             }
 
             this.playSound(SoundEvents.SNIFFER_DROP_SEED, 1.0F, 1.0F);
         }
     }
 
-    private Sniffer emitDiggingParticles(AnimationState animationstate) {
-        boolean flag = animationstate.getAccumulatedTime() > 1700L && animationstate.getAccumulatedTime() < 6000L;
+    private Sniffer emitDiggingParticles(AnimationState animationState) {
+        boolean flag = animationState.getAccumulatedTime() > 1700L && animationState.getAccumulatedTime() < 6000L;
 
         if (flag) {
-            BlockPos blockpos = this.getHeadBlock();
-            BlockState blockstate = this.level().getBlockState(blockpos.below());
+            BlockPos blockposition = this.getHeadBlock();
+            IBlockData iblockdata = this.level().getBlockState(blockposition.below());
 
-            if (blockstate.getRenderShape() != RenderShape.INVISIBLE) {
+            if (iblockdata.getRenderShape() != EnumRenderType.INVISIBLE) {
                 for (int i = 0; i < 30; ++i) {
-                    Vec3 vec3 = Vec3.atCenterOf(blockpos).add(0.0D, -0.6499999761581421D, 0.0D);
+                    Vec3 vec3d = Vec3.atCenterOf(blockposition).add(0.0D, -0.6499999761581421D, 0.0D);
 
-                    this.level().addParticle(new BlockParticleOption(ParticleTypes.BLOCK, blockstate), vec3.x, vec3.y, vec3.z, 0.0D, 0.0D, 0.0D);
+                    this.level().addParticle(new BlockParticleOption(ParticleTypes.BLOCK, iblockdata), vec3d.x, vec3d.y, vec3d.z, 0.0D, 0.0D, 0.0D);
                 }
 
                 if (this.tickCount % 10 == 0) {
-                    this.level().playLocalSound(this.getX(), this.getY(), this.getZ(), blockstate.getSoundType().getHitSound(), this.getSoundSource(), 0.5F, 0.5F, false);
+                    this.level().playLocalSound(this.getX(), this.getY(), this.getZ(), iblockdata.getSoundType().getHitSound(), this.getSoundSource(), 0.5F, 0.5F, false);
                 }
             }
         }
@@ -307,20 +318,19 @@
         return this;
     }
 
-    private Sniffer storeExploredPosition(BlockPos blockpos) {
+    public Sniffer storeExploredPosition(BlockPos pos) {
         List<GlobalPos> list = (List) this.getExploredPositions().limit(20L).collect(Collectors.toList());
 
-        list.add(0, GlobalPos.of(this.level().dimension(), blockpos));
-        this.getBrain().setMemory(MemoryModuleType.SNIFFER_EXPLORED_POSITIONS, (Object) list);
+        list.add(0, GlobalPos.of(this.level().dimension(), pos));
+        this.getBrain().setMemory(MemoryModuleType.SNIFFER_EXPLORED_POSITIONS, list); // CraftBukkit - decompile error
         return this;
     }
 
-    private Stream<GlobalPos> getExploredPositions() {
+    public Stream<GlobalPos> getExploredPositions() {
         return this.getBrain().getMemory(MemoryModuleType.SNIFFER_EXPLORED_POSITIONS).stream().flatMap(Collection::stream);
     }
 
     @Override
-    @Override
     protected void jumpFromGround() {
         super.jumpFromGround();
         double d0 = this.moveControl.getSpeedModifier();
@@ -336,26 +346,23 @@
     }
 
     @Override
-    @Override
-    public void spawnChildFromBreeding(ServerLevel serverlevel, Animal animal) {
+    public void spawnChildFromBreeding(ServerLevel level, Animal mate) {
         ItemStack itemstack = new ItemStack(Items.SNIFFER_EGG);
-        ItemEntity itementity = new ItemEntity(serverlevel, this.position().x(), this.position().y(), this.position().z(), itemstack);
+        ItemEntity entityitem = new ItemEntity(level, this.position().x(), this.position().y(), this.position().z(), itemstack);
 
-        itementity.setDefaultPickUpDelay();
-        this.finalizeSpawnChildFromBreeding(serverlevel, animal, (AgeableMob) null);
+        entityitem.setDefaultPickUpDelay();
+        this.finalizeSpawnChildFromBreeding(level, mate, (AgeableMob) null);
         this.playSound(SoundEvents.SNIFFER_EGG_PLOP, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 0.5F);
-        serverlevel.addFreshEntity(itementity);
+        level.addFreshEntity(entityitem);
     }
 
     @Override
-    @Override
-    public void die(DamageSource damagesource) {
+    public void die(DamageSource damageSource) {
         this.transitionTo(Sniffer.State.IDLING);
-        super.die(damagesource);
+        super.die(damageSource);
     }
 
     @Override
-    @Override
     public void tick() {
         switch (this.getState()) {
             case DIGGING:
@@ -369,27 +376,24 @@
     }
 
     @Override
-    @Override
-    public InteractionResult mobInteract(Player player, InteractionHand interactionhand) {
-        ItemStack itemstack = player.getItemInHand(interactionhand);
+    public InteractionResult mobInteract(Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
         boolean flag = this.isFood(itemstack);
-        InteractionResult interactionresult = super.mobInteract(player, interactionhand);
+        InteractionResult enuminteractionresult = super.mobInteract(player, hand);
 
-        if (interactionresult.consumesAction() && flag) {
+        if (enuminteractionresult.consumesAction() && flag) {
             this.level().playSound((Player) null, (Entity) this, this.getEatingSound(itemstack), SoundSource.NEUTRAL, 1.0F, Mth.randomBetween(this.level().random, 0.8F, 1.2F));
         }
 
-        return interactionresult;
+        return enuminteractionresult;
     }
 
     @Override
-    @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitydimensions, float f) {
-        return new Vector3f(0.0F, entitydimensions.height + 0.34375F * f, 0.0F);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, entitysize.height + 0.34375F * f, 0.0F);
     }
 
     @Override
-    @Override
     public float getNameTagOffsetY() {
         return super.getNameTagOffsetY() + 0.3F;
     }
@@ -402,98 +406,83 @@
     }
 
     @Override
-    @Override
-    protected void playStepSound(BlockPos blockpos, BlockState blockstate) {
+    protected void playStepSound(BlockPos pos, IBlockData state) {
         this.playSound(SoundEvents.SNIFFER_STEP, 0.15F, 1.0F);
     }
 
     @Override
-    @Override
-    public SoundEvent getEatingSound(ItemStack itemstack) {
+    public SoundEvent getEatingSound(ItemStack stack) {
         return SoundEvents.SNIFFER_EAT;
     }
 
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return Set.of(Sniffer.State.DIGGING, Sniffer.State.SEARCHING).contains(this.getState()) ? null : SoundEvents.SNIFFER_IDLE;
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.SNIFFER_HURT;
     }
 
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.SNIFFER_DEATH;
     }
 
     @Override
-    @Override
     public int getMaxHeadYRot() {
         return 50;
     }
 
     @Override
-    @Override
-    public void setBaby(boolean flag) {
-        this.setAge(flag ? -48000 : 0);
+    public void setBaby(boolean baby) {
+        this.setAge(baby ? -48000 : 0);
     }
 
     @Override
-    @Override
-    public AgeableMob getBreedOffspring(ServerLevel serverlevel, AgeableMob ageablemob) {
-        return (AgeableMob) EntityType.SNIFFER.create(serverlevel);
+    public AgeableMob getBreedOffspring(ServerLevel level, AgeableMob otherParent) {
+        return (AgeableMob) EntityType.SNIFFER.create(level);
     }
 
     @Override
-    @Override
-    public boolean canMate(Animal animal) {
-        if (!(animal instanceof Sniffer)) {
+    public boolean canMate(Animal otherAnimal) {
+        if (!(otherAnimal instanceof Sniffer)) {
             return false;
         } else {
-            Sniffer sniffer = (Sniffer) animal;
+            Sniffer sniffer = (Sniffer) otherAnimal;
             Set<Sniffer.State> set = Set.of(Sniffer.State.IDLING, Sniffer.State.SCENTING, Sniffer.State.FEELING_HAPPY);
 
-            return set.contains(this.getState()) && set.contains(sniffer.getState()) && super.canMate(animal);
+            return set.contains(this.getState()) && set.contains(sniffer.getState()) && super.canMate(otherAnimal);
         }
     }
 
     @Override
-    @Override
     public AABB getBoundingBoxForCulling() {
         return super.getBoundingBoxForCulling().inflate(0.6000000238418579D);
     }
 
     @Override
-    @Override
-    public boolean isFood(ItemStack itemstack) {
-        return itemstack.is(ItemTags.SNIFFER_FOOD);
+    public boolean isFood(ItemStack stack) {
+        return stack.is(ItemTags.SNIFFER_FOOD);
     }
 
     @Override
-    @Override
     protected Brain<?> makeBrain(Dynamic<?> dynamic) {
         return SnifferAi.makeBrain(this.brainProvider().makeBrain(dynamic));
     }
 
     @Override
-    @Override
     public Brain<Sniffer> getBrain() {
-        return super.getBrain();
+        return (Brain<Sniffer>) super.getBrain(); // CraftBukkit - decompile error
     }
 
     @Override
-    @Override
     protected Brain.Provider<Sniffer> brainProvider() {
         return Brain.provider(SnifferAi.MEMORY_TYPES, SnifferAi.SENSOR_TYPES);
     }
 
     @Override
-    @Override
     protected void customServerAiStep() {
         this.level().getProfiler().push("snifferBrain");
         this.getBrain().tick((ServerLevel) this.level(), this);
@@ -504,7 +493,6 @@
     }
 
     @Override
-    @Override
     protected void sendDebugPackets() {
         super.sendDebugPackets();
         DebugPackets.sendEntityBrain(this);
