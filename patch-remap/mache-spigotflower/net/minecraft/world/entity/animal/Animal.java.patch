--- a/net/minecraft/world/entity/animal/Animal.java
+++ b/net/minecraft/world/entity/animal/Animal.java
@@ -12,13 +12,13 @@
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.util.RandomSource;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.entity.ExperienceOrb;
-import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -29,22 +29,27 @@
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityBreedEvent;
+import org.bukkit.event.entity.EntityEnterLoveModeEvent;
+// CraftBukkit end
 
 public abstract class Animal extends AgeableMob {
 
     protected static final int PARENT_AGE_AFTER_BREEDING = 6000;
-    private int inLove;
+    public int inLove;
     @Nullable
-    private UUID loveCause;
+    public UUID loveCause;
+    public ItemStack breedItem; // CraftBukkit - Add breedItem variable
 
-    protected Animal(EntityType<? extends Animal> entitytype, Level level) {
-        super(entitytype, level);
+    protected Animal(EntityType<? extends Animal> entityType, Level level) {
+        super(entityType, level);
         this.setPathfindingMalus(BlockPathTypes.DANGER_FIRE, 16.0F);
         this.setPathfindingMalus(BlockPathTypes.DAMAGE_FIRE, -1.0F);
     }
 
     @Override
-    @Override
     protected void customServerAiStep() {
         if (this.getAge() != 0) {
             this.inLove = 0;
@@ -54,7 +59,6 @@
     }
 
     @Override
-    @Override
     public void aiStep() {
         super.aiStep();
         if (this.getAge() != 0) {
@@ -75,89 +79,86 @@
     }
 
     @Override
-    @Override
-    public boolean hurt(DamageSource damagesource, float f) {
-        if (this.isInvulnerableTo(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
         } else {
+            // CraftBukkit start
+            boolean result = super.hurt(source, amount);
+            if (result) {
             this.inLove = 0;
-            return super.hurt(damagesource, f);
+            }
+            return result;
+            // CraftBukkit end
         }
     }
 
     @Override
-    @Override
-    public float getWalkTargetValue(BlockPos blockpos, LevelReader levelreader) {
-        return levelreader.getBlockState(blockpos.below()).is(Blocks.GRASS_BLOCK) ? 10.0F : levelreader.getPathfindingCostFromLightLevels(blockpos);
+    public float getWalkTargetValue(BlockPos pos, LevelReader level) {
+        return level.getBlockState(pos.below()).is(Blocks.GRASS_BLOCK) ? 10.0F : level.getPathfindingCostFromLightLevels(pos);
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putInt("InLove", this.inLove);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putInt("InLove", this.inLove);
         if (this.loveCause != null) {
-            compoundtag.putUUID("LoveCause", this.loveCause);
+            compound.putUUID("LoveCause", this.loveCause);
         }
 
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.inLove = compoundtag.getInt("InLove");
-        this.loveCause = compoundtag.hasUUID("LoveCause") ? compoundtag.getUUID("LoveCause") : null;
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.inLove = compound.getInt("InLove");
+        this.loveCause = compound.hasUUID("LoveCause") ? compound.getUUID("LoveCause") : null;
     }
 
-    public static boolean checkAnimalSpawnRules(EntityType<? extends Animal> entitytype, LevelAccessor levelaccessor, MobSpawnType mobspawntype, BlockPos blockpos, RandomSource randomsource) {
-        boolean flag = MobSpawnType.ignoresLightRequirements(mobspawntype) || isBrightEnoughToSpawn(levelaccessor, blockpos);
+    public static boolean checkAnimalSpawnRules(EntityType<? extends Animal> animal, LevelAccessor level, EnumMobSpawn spawnType, BlockPos pos, RandomSource random) {
+        boolean flag = EnumMobSpawn.ignoresLightRequirements(spawnType) || isBrightEnoughToSpawn(level, pos);
 
-        return levelaccessor.getBlockState(blockpos.below()).is(BlockTags.ANIMALS_SPAWNABLE_ON) && flag;
+        return level.getBlockState(pos.below()).is(BlockTags.ANIMALS_SPAWNABLE_ON) && flag;
     }
 
-    protected static boolean isBrightEnoughToSpawn(BlockAndTintGetter blockandtintgetter, BlockPos blockpos) {
-        return blockandtintgetter.getRawBrightness(blockpos, 0) > 8;
+    protected static boolean isBrightEnoughToSpawn(BlockAndTintGetter level, BlockPos pos) {
+        return level.getRawBrightness(pos, 0) > 8;
     }
 
     @Override
-    @Override
     public int getAmbientSoundInterval() {
         return 120;
     }
 
     @Override
-    @Override
-    public boolean removeWhenFarAway(double d0) {
+    public boolean removeWhenFarAway(double distanceToClosestPlayer) {
         return false;
     }
 
     @Override
-    @Override
     public int getExperienceReward() {
         return 1 + this.level().random.nextInt(3);
     }
 
-    public boolean isFood(ItemStack itemstack) {
-        return itemstack.is(Items.WHEAT);
+    public boolean isFood(ItemStack stack) {
+        return stack.is(Items.WHEAT);
     }
 
     @Override
-    @Override
-    public InteractionResult mobInteract(Player player, InteractionHand interactionhand) {
-        ItemStack itemstack = player.getItemInHand(interactionhand);
+    public InteractionResult mobInteract(Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
 
         if (this.isFood(itemstack)) {
             int i = this.getAge();
 
             if (!this.level().isClientSide && i == 0 && this.canFallInLove()) {
-                this.usePlayerItem(player, interactionhand, itemstack);
+                this.usePlayerItem(player, hand, itemstack);
                 this.setInLove(player);
                 return InteractionResult.SUCCESS;
             }
 
             if (this.isBaby()) {
-                this.usePlayerItem(player, interactionhand, itemstack);
+                this.usePlayerItem(player, hand, itemstack);
                 this.ageUp(getSpeedUpSecondsWhenFeeding(-i), true);
                 return InteractionResult.sidedSuccess(this.level().isClientSide);
             }
@@ -167,12 +168,12 @@
             }
         }
 
-        return super.mobInteract(player, interactionhand);
+        return super.mobInteract(player, hand);
     }
 
-    protected void usePlayerItem(Player player, InteractionHand interactionhand, ItemStack itemstack) {
+    protected void usePlayerItem(Player player, EnumHand hand, ItemStack stack) {
         if (!player.getAbilities().instabuild) {
-            itemstack.shrink(1);
+            stack.shrink(1);
         }
 
     }
@@ -182,16 +183,23 @@
     }
 
     public void setInLove(@Nullable Player player) {
-        this.inLove = 600;
+        // CraftBukkit start
+        EntityEnterLoveModeEvent entityEnterLoveModeEvent = CraftEventFactory.callEntityEnterLoveModeEvent(player, this, 600);
+        if (entityEnterLoveModeEvent.isCancelled()) {
+            return;
+        }
+        this.inLove = entityEnterLoveModeEvent.getTicksInLove();
+        // CraftBukkit end
         if (player != null) {
             this.loveCause = player.getUUID();
         }
+        this.breedItem = player.getInventory().getSelected(); // CraftBukkit
 
         this.level().broadcastEntityEvent(this, (byte) 18);
     }
 
-    public void setInLoveTime(int i) {
-        this.inLove = i;
+    public void setInLoveTime(int inLove) {
+        this.inLove = inLove;
     }
 
     public int getInLoveTime() {
@@ -203,9 +211,9 @@
         if (this.loveCause == null) {
             return null;
         } else {
-            Player player = this.level().getPlayerByUUID(this.loveCause);
+            Player entityhuman = this.level().getPlayerByUUID(this.loveCause);
 
-            return player instanceof ServerPlayer ? (ServerPlayer) player : null;
+            return entityhuman instanceof ServerPlayer ? (ServerPlayer) entityhuman : null;
         }
     }
 
@@ -217,43 +225,63 @@
         this.inLove = 0;
     }
 
-    public boolean canMate(Animal animal) {
-        return animal == this ? false : (animal.getClass() != this.getClass() ? false : this.isInLove() && animal.isInLove());
+    public boolean canMate(Animal otherAnimal) {
+        return otherAnimal == this ? false : (otherAnimal.getClass() != this.getClass() ? false : this.isInLove() && otherAnimal.isInLove());
     }
 
-    public void spawnChildFromBreeding(ServerLevel serverlevel, Animal animal) {
-        AgeableMob ageablemob = this.getBreedOffspring(serverlevel, animal);
+    public void spawnChildFromBreeding(ServerLevel level, Animal mate) {
+        AgeableMob entityageable = this.getBreedOffspring(level, mate);
 
-        if (ageablemob != null) {
-            ageablemob.setBaby(true);
-            ageablemob.moveTo(this.getX(), this.getY(), this.getZ(), 0.0F, 0.0F);
-            this.finalizeSpawnChildFromBreeding(serverlevel, animal, ageablemob);
-            serverlevel.addFreshEntityWithPassengers(ageablemob);
+        if (entityageable != null) {
+            entityageable.setBaby(true);
+            entityageable.moveTo(this.getX(), this.getY(), this.getZ(), 0.0F, 0.0F);
+            // CraftBukkit start - call EntityBreedEvent
+            ServerPlayer breeder = Optional.ofNullable(this.getLoveCause()).or(() -> {
+                return Optional.ofNullable(mate.getLoveCause());
+            }).orElse(null);
+            int experience = this.getRandom().nextInt(7) + 1;
+            EntityBreedEvent entityBreedEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityBreedEvent(entityageable, this, mate, breeder, this.breedItem, experience);
+            if (entityBreedEvent.isCancelled()) {
+                return;
+            }
+            experience = entityBreedEvent.getExperience();
+            this.finalizeSpawnChildFromBreeding(level, mate, entityageable, experience);
+            level.addFreshEntityWithPassengers(entityageable, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING);
+            // CraftBukkit end
         }
     }
 
-    public void finalizeSpawnChildFromBreeding(ServerLevel serverlevel, Animal animal, @Nullable AgeableMob ageablemob) {
+    public void finalizeSpawnChildFromBreeding(ServerLevel level, Animal animal, @Nullable AgeableMob baby) {
+        // CraftBukkit start
+        this.finalizeSpawnChildFromBreeding(level, animal, baby, this.getRandom().nextInt(7) + 1);
+    }
+
+    public void finalizeSpawnChildFromBreeding(ServerLevel worldserver, Animal entityanimal, @Nullable AgeableMob entityageable, int experience) {
+        // CraftBukkit end
         Optional.ofNullable(this.getLoveCause()).or(() -> {
-            return Optional.ofNullable(animal.getLoveCause());
-        }).ifPresent((serverplayer) -> {
-            serverplayer.awardStat(Stats.ANIMALS_BRED);
-            CriteriaTriggers.BRED_ANIMALS.trigger(serverplayer, this, animal, ageablemob);
+            return Optional.ofNullable(entityanimal.getLoveCause());
+        }).ifPresent((entityplayer) -> {
+            entityplayer.awardStat(Stats.ANIMALS_BRED);
+            CriteriaTriggers.BRED_ANIMALS.trigger(entityplayer, this, entityanimal, entityageable);
         });
         this.setAge(6000);
-        animal.setAge(6000);
+        entityanimal.setAge(6000);
         this.resetLove();
-        animal.resetLove();
-        serverlevel.broadcastEntityEvent(this, (byte) 18);
-        if (serverlevel.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
-            serverlevel.addFreshEntity(new ExperienceOrb(serverlevel, this.getX(), this.getY(), this.getZ(), this.getRandom().nextInt(7) + 1));
+        entityanimal.resetLove();
+        worldserver.broadcastEntityEvent(this, (byte) 18);
+        if (worldserver.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
+            // CraftBukkit start - use event experience
+            if (experience > 0) {
+                worldserver.addFreshEntity(new ExperienceOrb(worldserver, this.getX(), this.getY(), this.getZ(), experience));
+            }
+            // CraftBukkit end
         }
 
     }
 
     @Override
-    @Override
-    public void handleEntityEvent(byte b0) {
-        if (b0 == 18) {
+    public void handleEntityEvent(byte id) {
+        if (id == 18) {
             for (int i = 0; i < 7; ++i) {
                 double d0 = this.random.nextGaussian() * 0.02D;
                 double d1 = this.random.nextGaussian() * 0.02D;
@@ -262,7 +290,7 @@
                 this.level().addParticle(ParticleTypes.HEART, this.getRandomX(1.0D), this.getRandomY() + 0.5D, this.getRandomZ(1.0D), d0, d1, d2);
             }
         } else {
-            super.handleEntityEvent(b0);
+            super.handleEntityEvent(id);
         }
 
     }
