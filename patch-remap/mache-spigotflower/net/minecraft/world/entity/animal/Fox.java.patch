--- a/net/minecraft/world/entity/animal/Fox.java
+++ b/net/minecraft/world/entity/animal/Fox.java
@@ -35,20 +35,20 @@
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.StringRepresentable;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.ExperienceOrb;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.Pose;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.TamableAnimal;
 import net.minecraft.world.entity.VariantHolder;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
@@ -62,12 +62,12 @@
 import net.minecraft.world.entity.ai.goal.FloatGoal;
 import net.minecraft.world.entity.ai.goal.FollowParentGoal;
 import net.minecraft.world.entity.ai.goal.Goal;
-import net.minecraft.world.entity.ai.goal.JumpGoal;
 import net.minecraft.world.entity.ai.goal.LeapAtTargetGoal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
 import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
 import net.minecraft.world.entity.ai.goal.MoveToBlockGoal;
 import net.minecraft.world.entity.ai.goal.PanicGoal;
+import net.minecraft.world.entity.ai.goal.PathfinderGoalWaterJumpAbstract;
 import net.minecraft.world.entity.ai.goal.StrollThroughVillageGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
@@ -88,7 +88,7 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.CaveVines;
 import net.minecraft.world.level.block.SweetBerryBushBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.Vec3;
@@ -105,18 +105,18 @@
     private static final int FLAG_SLEEPING = 32;
     private static final int FLAG_FACEPLANTED = 64;
     private static final int FLAG_DEFENDING = 128;
-    private static final EntityDataAccessor<Optional<UUID>> DATA_TRUSTED_ID_0 = SynchedEntityData.defineId(Fox.class, EntityDataSerializers.OPTIONAL_UUID);
-    private static final EntityDataAccessor<Optional<UUID>> DATA_TRUSTED_ID_1 = SynchedEntityData.defineId(Fox.class, EntityDataSerializers.OPTIONAL_UUID);
-    static final Predicate<ItemEntity> ALLOWED_ITEMS = (itementity) -> {
-        return !itementity.hasPickUpDelay() && itementity.isAlive();
+    public static final EntityDataAccessor<Optional<UUID>> DATA_TRUSTED_ID_0 = SynchedEntityData.defineId(Fox.class, EntityDataSerializers.OPTIONAL_UUID);
+    public static final EntityDataAccessor<Optional<UUID>> DATA_TRUSTED_ID_1 = SynchedEntityData.defineId(Fox.class, EntityDataSerializers.OPTIONAL_UUID);
+    static final Predicate<ItemEntity> ALLOWED_ITEMS = (entityitem) -> {
+        return !entityitem.hasPickUpDelay() && entityitem.isAlive();
     };
     private static final Predicate<Entity> TRUSTED_TARGET_SELECTOR = (entity) -> {
         if (!(entity instanceof LivingEntity)) {
             return false;
         } else {
-            LivingEntity livingentity = (LivingEntity) entity;
+            LivingEntity entityliving = (LivingEntity) entity;
 
-            return livingentity.getLastHurtMob() != null && livingentity.getLastHurtMobTimestamp() < livingentity.tickCount + 600;
+            return entityliving.getLastHurtMob() != null && entityliving.getLastHurtMobTimestamp() < entityliving.tickCount + 600;
         }
     };
     static final Predicate<Entity> STALKABLE_PREY = (entity) -> {
@@ -135,17 +135,16 @@
     float crouchAmountO;
     private int ticksSinceEaten;
 
-    public Fox(EntityType<? extends Fox> entitytype, Level level) {
-        super(entitytype, level);
+    public Fox(EntityType<? extends Fox> entityType, Level level) {
+        super(entityType, level);
         this.lookControl = new Fox.FoxLookControl();
-        this.moveControl = new Fox.FoxMoveControl();
+        this.moveControl = new Fox.m();
         this.setPathfindingMalus(BlockPathTypes.DANGER_OTHER, 0.0F);
         this.setPathfindingMalus(BlockPathTypes.DAMAGE_OTHER, 0.0F);
         this.setCanPickUpLoot(true);
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Fox.DATA_TRUSTED_ID_0, Optional.empty());
@@ -155,27 +154,26 @@
     }
 
     @Override
-    @Override
     protected void registerGoals() {
-        this.landTargetGoal = new NearestAttackableTargetGoal<>(this, Animal.class, 10, false, false, (livingentity) -> {
-            return livingentity instanceof Chicken || livingentity instanceof Rabbit;
+        this.landTargetGoal = new NearestAttackableTargetGoal<>(this, Animal.class, 10, false, false, (entityliving) -> {
+            return entityliving instanceof Chicken || entityliving instanceof Rabbit;
         });
         this.turtleEggTargetGoal = new NearestAttackableTargetGoal<>(this, Turtle.class, 10, false, false, Turtle.BABY_ON_LAND_SELECTOR);
-        this.fishTargetGoal = new NearestAttackableTargetGoal<>(this, AbstractFish.class, 20, false, false, (livingentity) -> {
-            return livingentity instanceof AbstractSchoolingFish;
+        this.fishTargetGoal = new NearestAttackableTargetGoal<>(this, AbstractFish.class, 20, false, false, (entityliving) -> {
+            return entityliving instanceof AbstractSchoolingFish;
         });
         this.goalSelector.addGoal(0, new Fox.FoxFloatGoal());
         this.goalSelector.addGoal(0, new ClimbOnTopOfPowderSnowGoal(this, this.level()));
         this.goalSelector.addGoal(1, new Fox.FaceplantGoal());
         this.goalSelector.addGoal(2, new Fox.FoxPanicGoal(2.2D));
         this.goalSelector.addGoal(3, new Fox.FoxBreedGoal(1.0D));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Player.class, 16.0F, 1.6D, 1.4D, (livingentity) -> {
-            return Fox.AVOID_PLAYERS.test(livingentity) && !this.trusts(livingentity.getUUID()) && !this.isDefending();
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Player.class, 16.0F, 1.6D, 1.4D, (entityliving) -> {
+            return Fox.AVOID_PLAYERS.test(entityliving) && !this.trusts(entityliving.getUUID()) && !this.isDefending();
         }));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Wolf.class, 8.0F, 1.6D, 1.4D, (livingentity) -> {
-            return !((Wolf) livingentity).isTame() && !this.isDefending();
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Wolf.class, 8.0F, 1.6D, 1.4D, (entityliving) -> {
+            return !((Wolf) entityliving).isTame() && !this.isDefending();
         }));
-        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (livingentity) -> {
+        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (entityliving) -> {
             return !this.isDefending();
         }));
         this.goalSelector.addGoal(5, new Fox.StalkPreyGoal());
@@ -191,19 +189,17 @@
         this.goalSelector.addGoal(11, new Fox.FoxSearchForItemsGoal());
         this.goalSelector.addGoal(12, new Fox.FoxLookAtPlayerGoal(this, Player.class, 24.0F));
         this.goalSelector.addGoal(13, new Fox.PerchAndSearchGoal());
-        this.targetSelector.addGoal(3, new Fox.DefendTrustedTargetGoal(LivingEntity.class, false, false, (livingentity) -> {
-            return Fox.TRUSTED_TARGET_SELECTOR.test(livingentity) && !this.trusts(livingentity.getUUID());
+        this.targetSelector.addGoal(3, new Fox.DefendTrustedTargetGoal(LivingEntity.class, false, false, (entityliving) -> {
+            return Fox.TRUSTED_TARGET_SELECTOR.test(entityliving) && !this.trusts(entityliving.getUUID());
         }));
     }
 
     @Override
-    @Override
-    public SoundEvent getEatingSound(ItemStack itemstack) {
+    public SoundEvent getEatingSound(ItemStack itemStack) {
         return SoundEvents.FOX_EAT;
     }
 
     @Override
-    @Override
     public void aiStep() {
         if (!this.level().isClientSide && this.isAlive() && this.isEffectiveAi()) {
             ++this.ticksSinceEaten;
@@ -224,9 +220,9 @@
                 }
             }
 
-            LivingEntity livingentity = this.getTarget();
+            LivingEntity entityliving = this.getTarget();
 
-            if (livingentity == null || !livingentity.isAlive()) {
+            if (entityliving == null || !entityliving.isAlive()) {
                 this.setIsCrouching(false);
                 this.setIsInterested(false);
             }
@@ -246,20 +242,18 @@
     }
 
     @Override
-    @Override
     protected boolean isImmobile() {
         return this.isDeadOrDying();
     }
 
-    private boolean canEat(ItemStack itemstack) {
-        return itemstack.getItem().isEdible() && this.getTarget() == null && this.onGround() && !this.isSleeping();
+    private boolean canEat(ItemStack stack) {
+        return stack.getItem().isEdible() && this.getTarget() == null && this.onGround() && !this.isSleeping();
     }
 
     @Override
-    @Override
-    protected void populateDefaultEquipmentSlots(RandomSource randomsource, DifficultyInstance difficultyinstance) {
-        if (randomsource.nextFloat() < 0.2F) {
-            float f = randomsource.nextFloat();
+    protected void populateDefaultEquipmentSlots(RandomSource random, DifficultyInstance difficulty) {
+        if (random.nextFloat() < 0.2F) {
+            float f = random.nextFloat();
             ItemStack itemstack;
 
             if (f < 0.05F) {
@@ -267,7 +261,7 @@
             } else if (f < 0.2F) {
                 itemstack = new ItemStack(Items.EGG);
             } else if (f < 0.4F) {
-                itemstack = randomsource.nextBoolean() ? new ItemStack(Items.RABBIT_FOOT) : new ItemStack(Items.RABBIT_HIDE);
+                itemstack = random.nextBoolean() ? new ItemStack(Items.RABBIT_FOOT) : new ItemStack(Items.RABBIT_HIDE);
             } else if (f < 0.6F) {
                 itemstack = new ItemStack(Items.WHEAT);
             } else if (f < 0.8F) {
@@ -282,20 +276,19 @@
     }
 
     @Override
-    @Override
-    public void handleEntityEvent(byte b0) {
-        if (b0 == 45) {
+    public void handleEntityEvent(byte id) {
+        if (id == 45) {
             ItemStack itemstack = this.getItemBySlot(EquipmentSlot.MAINHAND);
 
             if (!itemstack.isEmpty()) {
                 for (int i = 0; i < 8; ++i) {
-                    Vec3 vec3 = (new Vec3(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D)).xRot(-this.getXRot() * 0.017453292F).yRot(-this.getYRot() * 0.017453292F);
+                    Vec3 vec3d = (new Vec3(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D)).xRot(-this.getXRot() * 0.017453292F).yRot(-this.getYRot() * 0.017453292F);
 
-                    this.level().addParticle(new ItemParticleOption(ParticleTypes.ITEM, itemstack), this.getX() + this.getLookAngle().x / 2.0D, this.getY(), this.getZ() + this.getLookAngle().z / 2.0D, vec3.x, vec3.y + 0.05D, vec3.z);
+                    this.level().addParticle(new ItemParticleOption(ParticleTypes.ITEM, itemstack), this.getX() + this.getLookAngle().x / 2.0D, this.getY(), this.getZ() + this.getLookAngle().z / 2.0D, vec3d.x, vec3d.y + 0.05D, vec3d.z);
                 }
             }
         } else {
-            super.handleEntityEvent(b0);
+            super.handleEntityEvent(id);
         }
 
     }
@@ -306,51 +299,49 @@
 
     @Nullable
     @Override
-    @Override
-    public Fox getBreedOffspring(ServerLevel serverlevel, AgeableMob ageablemob) {
-        Fox fox = (Fox) EntityType.FOX.create(serverlevel);
+    public Fox getBreedOffspring(ServerLevel level, AgeableMob otherParent) {
+        Fox entityfox = (Fox) EntityType.FOX.create(level);
 
-        if (fox != null) {
-            fox.setVariant(this.random.nextBoolean() ? this.getVariant() : ((Fox) ageablemob).getVariant());
+        if (entityfox != null) {
+            entityfox.setVariant(this.random.nextBoolean() ? this.getVariant() : ((Fox) otherParent).getVariant());
         }
 
-        return fox;
+        return entityfox;
     }
 
-    public static boolean checkFoxSpawnRules(EntityType<Fox> entitytype, LevelAccessor levelaccessor, MobSpawnType mobspawntype, BlockPos blockpos, RandomSource randomsource) {
-        return levelaccessor.getBlockState(blockpos.below()).is(BlockTags.FOXES_SPAWNABLE_ON) && isBrightEnoughToSpawn(levelaccessor, blockpos);
+    public static boolean checkFoxSpawnRules(EntityType<Fox> fox, LevelAccessor level, EnumMobSpawn spawnType, BlockPos pos, RandomSource random) {
+        return level.getBlockState(pos.below()).is(BlockTags.FOXES_SPAWNABLE_ON) && isBrightEnoughToSpawn(level, pos);
     }
 
     @Nullable
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
-        Holder<Biome> holder = serverlevelaccessor.getBiome(this.blockPosition());
-        Fox.Type fox_type = Fox.Type.byBiome(holder);
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
+        Holder<Biome> holder = level.getBiome(this.blockPosition());
+        Fox.Type entityfox_type = Fox.Type.byBiome(holder);
         boolean flag = false;
 
-        if (spawngroupdata instanceof Fox.FoxGroupData) {
-            Fox.FoxGroupData fox_foxgroupdata = (Fox.FoxGroupData) spawngroupdata;
+        if (spawnData instanceof Fox.FoxGroupData) {
+            Fox.FoxGroupData entityfox_i = (Fox.FoxGroupData) spawnData;
 
-            fox_type = fox_foxgroupdata.type;
-            if (fox_foxgroupdata.getGroupSize() >= 2) {
+            entityfox_type = entityfox_i.type;
+            if (entityfox_i.getGroupSize() >= 2) {
                 flag = true;
             }
         } else {
-            spawngroupdata = new Fox.FoxGroupData(fox_type);
+            spawnData = new Fox.FoxGroupData(entityfox_type);
         }
 
-        this.setVariant(fox_type);
+        this.setVariant(entityfox_type);
         if (flag) {
             this.setAge(-24000);
         }
 
-        if (serverlevelaccessor instanceof ServerLevel) {
+        if (level instanceof ServerLevel) {
             this.setTargetGoals();
         }
 
-        this.populateDefaultEquipmentSlots(serverlevelaccessor.getRandom(), difficultyinstance);
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, (SpawnGroupData) spawngroupdata, compoundtag);
+        this.populateDefaultEquipmentSlots(level.getRandom(), difficulty);
+        return super.finalizeSpawn(level, difficulty, reason, (GroupDataEntity) spawnData, dataTag);
     }
 
     private void setTargetGoals() {
@@ -367,30 +358,26 @@
     }
 
     @Override
-    @Override
-    protected void usePlayerItem(Player player, InteractionHand interactionhand, ItemStack itemstack) {
-        if (this.isFood(itemstack)) {
-            this.playSound(this.getEatingSound(itemstack), 1.0F, 1.0F);
+    protected void usePlayerItem(Player player, EnumHand hand, ItemStack stack) {
+        if (this.isFood(stack)) {
+            this.playSound(this.getEatingSound(stack), 1.0F, 1.0F);
         }
 
-        super.usePlayerItem(player, interactionhand, itemstack);
+        super.usePlayerItem(player, hand, stack);
     }
 
     @Override
-    @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions entitydimensions) {
-        return this.isBaby() ? entitydimensions.height * 0.85F : 0.4F;
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions size) {
+        return this.isBaby() ? size.height * 0.85F : 0.4F;
     }
 
     @Override
-    @Override
     public Fox.Type getVariant() {
         return Fox.Type.byId((Integer) this.entityData.get(Fox.DATA_TYPE_ID));
     }
 
-    @Override
-    public void setVariant(Fox.Type fox_type) {
-        this.entityData.set(Fox.DATA_TYPE_ID, fox_type.getId());
+    public void setVariant(Fox.Type variant) {
+        this.entityData.set(Fox.DATA_TYPE_ID, variant.getId());
     }
 
     List<UUID> getTrustedUUIDs() {
@@ -411,45 +398,43 @@
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
         List<UUID> list = this.getTrustedUUIDs();
-        ListTag listtag = new ListTag();
+        ListTag nbttaglist = new ListTag();
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
             UUID uuid = (UUID) iterator.next();
 
             if (uuid != null) {
-                listtag.add(NbtUtils.createUUID(uuid));
+                nbttaglist.add(NbtUtils.createUUID(uuid));
             }
         }
 
-        compoundtag.put("Trusted", listtag);
-        compoundtag.putBoolean("Sleeping", this.isSleeping());
-        compoundtag.putString("Type", this.getVariant().getSerializedName());
-        compoundtag.putBoolean("Sitting", this.isSitting());
-        compoundtag.putBoolean("Crouching", this.isCrouching());
+        compound.put("Trusted", nbttaglist);
+        compound.putBoolean("Sleeping", this.isSleeping());
+        compound.putString("Type", this.getVariant().getSerializedName());
+        compound.putBoolean("Sitting", this.isSitting());
+        compound.putBoolean("Crouching", this.isCrouching());
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        ListTag listtag = compoundtag.getList("Trusted", 11);
-        Iterator iterator = listtag.iterator();
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        ListTag nbttaglist = compound.getList("Trusted", 11);
+        Iterator iterator = nbttaglist.iterator();
 
         while (iterator.hasNext()) {
-            Tag tag = (Tag) iterator.next();
+            Tag nbtbase = (Tag) iterator.next();
 
-            this.addTrustedUUID(NbtUtils.loadUUID(tag));
+            this.addTrustedUUID(NbtUtils.loadUUID(nbtbase));
         }
 
-        this.setSleeping(compoundtag.getBoolean("Sleeping"));
-        this.setVariant(Fox.Type.byName(compoundtag.getString("Type")));
-        this.setSitting(compoundtag.getBoolean("Sitting"));
-        this.setIsCrouching(compoundtag.getBoolean("Crouching"));
+        this.setSleeping(compound.getBoolean("Sleeping"));
+        this.setVariant(Fox.Type.byName(compound.getString("Type")));
+        this.setSitting(compound.getBoolean("Sitting"));
+        this.setIsCrouching(compound.getBoolean("Crouching"));
         if (this.level() instanceof ServerLevel) {
             this.setTargetGoals();
         }
@@ -460,89 +445,86 @@
         return this.getFlag(1);
     }
 
-    public void setSitting(boolean flag) {
-        this.setFlag(1, flag);
+    public void setSitting(boolean sitting) {
+        this.setFlag(1, sitting);
     }
 
     public boolean isFaceplanted() {
         return this.getFlag(64);
     }
 
-    void setFaceplanted(boolean flag) {
-        this.setFlag(64, flag);
+    void setFaceplanted(boolean faceplanted) {
+        this.setFlag(64, faceplanted);
     }
 
     boolean isDefending() {
         return this.getFlag(128);
     }
 
-    void setDefending(boolean flag) {
-        this.setFlag(128, flag);
+    void setDefending(boolean defending) {
+        this.setFlag(128, defending);
     }
 
     @Override
-    @Override
     public boolean isSleeping() {
         return this.getFlag(32);
     }
 
-    void setSleeping(boolean flag) {
-        this.setFlag(32, flag);
+    public void setSleeping(boolean sleeping) {
+        this.setFlag(32, sleeping);
     }
 
-    private void setFlag(int i, boolean flag) {
-        if (flag) {
-            this.entityData.set(Fox.DATA_FLAGS_ID, (byte) ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) | i));
+    private void setFlag(int flagId, boolean value) {
+        if (value) {
+            this.entityData.set(Fox.DATA_FLAGS_ID, (byte) ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) | flagId));
         } else {
-            this.entityData.set(Fox.DATA_FLAGS_ID, (byte) ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) & ~i));
+            this.entityData.set(Fox.DATA_FLAGS_ID, (byte) ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) & ~flagId));
         }
 
     }
 
-    private boolean getFlag(int i) {
-        return ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) & i) != 0;
+    private boolean getFlag(int flagId) {
+        return ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) & flagId) != 0;
     }
 
     @Override
-    @Override
     public boolean canTakeItem(ItemStack itemstack) {
-        EquipmentSlot equipmentslot = Mob.getEquipmentSlotForItem(itemstack);
+        EquipmentSlot enumitemslot = Mob.getEquipmentSlotForItem(itemstack);
 
-        return !this.getItemBySlot(equipmentslot).isEmpty() ? false : equipmentslot == EquipmentSlot.MAINHAND && super.canTakeItem(itemstack);
+        return !this.getItemBySlot(enumitemslot).isEmpty() ? false : enumitemslot == EquipmentSlot.MAINHAND && super.canTakeItem(itemstack);
     }
 
     @Override
-    @Override
-    public boolean canHoldItem(ItemStack itemstack) {
-        Item item = itemstack.getItem();
+    public boolean canHoldItem(ItemStack stack) {
+        Item item = stack.getItem();
         ItemStack itemstack1 = this.getItemBySlot(EquipmentSlot.MAINHAND);
 
         return itemstack1.isEmpty() || this.ticksSinceEaten > 0 && item.isEdible() && !itemstack1.getItem().isEdible();
     }
 
-    private void spitOutItem(ItemStack itemstack) {
-        if (!itemstack.isEmpty() && !this.level().isClientSide) {
-            ItemEntity itementity = new ItemEntity(this.level(), this.getX() + this.getLookAngle().x, this.getY() + 1.0D, this.getZ() + this.getLookAngle().z, itemstack);
+    private void spitOutItem(ItemStack stack) {
+        if (!stack.isEmpty() && !this.level().isClientSide) {
+            ItemEntity entityitem = new ItemEntity(this.level(), this.getX() + this.getLookAngle().x, this.getY() + 1.0D, this.getZ() + this.getLookAngle().z, stack);
 
-            itementity.setPickUpDelay(40);
-            itementity.setThrower(this);
+            entityitem.setPickUpDelay(40);
+            entityitem.setThrower(this);
             this.playSound(SoundEvents.FOX_SPIT, 1.0F, 1.0F);
-            this.level().addFreshEntity(itementity);
+            this.level().addFreshEntity(entityitem);
         }
     }
 
-    private void dropItemStack(ItemStack itemstack) {
-        ItemEntity itementity = new ItemEntity(this.level(), this.getX(), this.getY(), this.getZ(), itemstack);
+    private void dropItemStack(ItemStack stack) {
+        ItemEntity entityitem = new ItemEntity(this.level(), this.getX(), this.getY(), this.getZ(), stack);
 
-        this.level().addFreshEntity(itementity);
+        this.level().addFreshEntity(entityitem);
     }
 
     @Override
-    @Override
-    protected void pickUpItem(ItemEntity itementity) {
-        ItemStack itemstack = itementity.getItem();
+    protected void pickUpItem(ItemEntity itemEntity) {
+        ItemStack itemstack = itemEntity.getItem();
 
-        if (this.canHoldItem(itemstack)) {
+        if (!org.bukkit.craftbukkit.event.CraftEventFactory.callEntityPickupItemEvent(this, itemEntity, itemstack.getCount() - 1, !this.canHoldItem(itemstack)).isCancelled()) { // CraftBukkit - call EntityPickupItemEvent
+            itemstack = itemEntity.getItem(); // CraftBukkit - update ItemStack from event
             int i = itemstack.getCount();
 
             if (i > 1) {
@@ -550,18 +532,17 @@
             }
 
             this.spitOutItem(this.getItemBySlot(EquipmentSlot.MAINHAND));
-            this.onItemPickup(itementity);
+            this.onItemPickup(itemEntity);
             this.setItemSlot(EquipmentSlot.MAINHAND, itemstack.split(1));
             this.setGuaranteedDrop(EquipmentSlot.MAINHAND);
-            this.take(itementity, itemstack.getCount());
-            itementity.discard();
+            this.take(itemEntity, itemstack.getCount());
+            itemEntity.discard();
             this.ticksSinceEaten = 0;
         }
 
     }
 
     @Override
-    @Override
     public void tick() {
         super.tick();
         if (this.isEffectiveAi()) {
@@ -576,10 +557,10 @@
             }
 
             if (this.isFaceplanted() && this.level().random.nextFloat() < 0.2F) {
-                BlockPos blockpos = this.blockPosition();
-                BlockState blockstate = this.level().getBlockState(blockpos);
+                BlockPos blockposition = this.blockPosition();
+                IBlockData iblockdata = this.level().getBlockState(blockposition);
 
-                this.level().levelEvent(2001, blockpos, Block.getId(blockstate));
+                this.level().levelEvent(2001, blockposition, Block.getId(iblockdata));
             }
         }
 
@@ -603,23 +584,21 @@
     }
 
     @Override
-    @Override
-    public boolean isFood(ItemStack itemstack) {
-        return itemstack.is(ItemTags.FOX_FOOD);
+    public boolean isFood(ItemStack stack) {
+        return stack.is(ItemTags.FOX_FOOD);
     }
 
     @Override
-    @Override
-    protected void onOffspringSpawnedFromEgg(Player player, Mob mob) {
-        ((Fox) mob).addTrustedUUID(player.getUUID());
+    protected void onOffspringSpawnedFromEgg(Player player, Mob child) {
+        ((Fox) child).addTrustedUUID(player.getUUID());
     }
 
     public boolean isPouncing() {
         return this.getFlag(16);
     }
 
-    public void setIsPouncing(boolean flag) {
-        this.setFlag(16, flag);
+    public void setIsPouncing(boolean isPouncing) {
+        this.setFlag(16, isPouncing);
     }
 
     public boolean isJumping() {
@@ -630,46 +609,43 @@
         return this.crouchAmount == 3.0F;
     }
 
-    public void setIsCrouching(boolean flag) {
-        this.setFlag(4, flag);
+    public void setIsCrouching(boolean isCrouching) {
+        this.setFlag(4, isCrouching);
     }
 
     @Override
-    @Override
     public boolean isCrouching() {
         return this.getFlag(4);
     }
 
-    public void setIsInterested(boolean flag) {
-        this.setFlag(8, flag);
+    public void setIsInterested(boolean isInterested) {
+        this.setFlag(8, isInterested);
     }
 
     public boolean isInterested() {
         return this.getFlag(8);
     }
 
-    public float getHeadRollAngle(float f) {
-        return Mth.lerp(f, this.interestedAngleO, this.interestedAngle) * 0.11F * 3.1415927F;
+    public float getHeadRollAngle(float partialTick) {
+        return Mth.lerp(partialTick, this.interestedAngleO, this.interestedAngle) * 0.11F * 3.1415927F;
     }
 
-    public float getCrouchAmount(float f) {
-        return Mth.lerp(f, this.crouchAmountO, this.crouchAmount);
+    public float getCrouchAmount(float partialTick) {
+        return Mth.lerp(partialTick, this.crouchAmountO, this.crouchAmount);
     }
 
     @Override
-    @Override
-    public void setTarget(@Nullable LivingEntity livingentity) {
-        if (this.isDefending() && livingentity == null) {
+    public void setTarget(@Nullable LivingEntity livingEntity) {
+        if (this.isDefending() && livingEntity == null) {
             this.setDefending(false);
         }
 
-        super.setTarget(livingentity);
+        super.setTarget(livingEntity);
     }
 
     @Override
-    @Override
-    protected int calculateFallDamage(float f, float f1) {
-        return Mth.ceil((f - 5.0F) * f1);
+    protected int calculateFallDamage(float distance, float damageMultiplier) {
+        return Mth.ceil((distance - 5.0F) * damageMultiplier);
     }
 
     void wakeUp() {
@@ -690,12 +666,11 @@
     }
 
     @Override
-    @Override
     public void playAmbientSound() {
-        SoundEvent soundevent = this.getAmbientSound();
+        SoundEvent soundeffect = this.getAmbientSound();
 
-        if (soundevent == SoundEvents.FOX_SCREECH) {
-            this.playSound(soundevent, 2.0F, this.getVoicePitch());
+        if (soundeffect == SoundEvents.FOX_SCREECH) {
+            this.playSound(soundeffect, 2.0F, this.getVoicePitch());
         } else {
             super.playAmbientSound();
         }
@@ -704,7 +679,6 @@
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         if (this.isSleeping()) {
             return SoundEvents.FOX_SLEEP;
@@ -723,14 +697,12 @@
 
     @Nullable
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.FOX_HURT;
     }
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.FOX_DEATH;
     }
@@ -740,8 +712,7 @@
     }
 
     @Override
-    @Override
-    protected void dropAllDeathLoot(DamageSource damagesource) {
+    protected void dropAllDeathLoot(DamageSource damageSource) {
         ItemStack itemstack = this.getItemBySlot(EquipmentSlot.MAINHAND);
 
         if (!itemstack.isEmpty()) {
@@ -749,18 +720,17 @@
             this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
         }
 
-        super.dropAllDeathLoot(damagesource);
+        super.dropAllDeathLoot(damageSource);
     }
 
     @Override
-    @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitydimensions, float f) {
-        return new Vector3f(0.0F, entitydimensions.height + -0.0625F * f, -0.25F * f);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, entitysize.height + -0.0625F * f, -0.25F * f);
     }
 
-    public static boolean isPathClear(Fox fox, LivingEntity livingentity) {
-        double d0 = livingentity.getZ() - fox.getZ();
-        double d1 = livingentity.getX() - fox.getX();
+    public static boolean isPathClear(Fox fox, LivingEntity livingEntity) {
+        double d0 = livingEntity.getZ() - fox.getZ();
+        double d1 = livingEntity.getX() - fox.getX();
         double d2 = d0 / d1;
         boolean flag = true;
 
@@ -779,7 +749,6 @@
     }
 
     @Override
-    @Override
     public Vec3 getLeashOffset() {
         return new Vec3(0.0D, (double) (0.55F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
     }
@@ -791,7 +760,6 @@
         }
 
         @Override
-        @Override
         public void tick() {
             if (!Fox.this.isSleeping()) {
                 super.tick();
@@ -800,20 +768,18 @@
         }
 
         @Override
-        @Override
         protected boolean resetXRotOnTick() {
             return !Fox.this.isPouncing() && !Fox.this.isCrouching() && !Fox.this.isInterested() && !Fox.this.isFaceplanted();
         }
     }
 
-    private class FoxMoveControl extends MoveControl {
+    private class m extends MoveControl {
 
-        public FoxMoveControl() {
+        public m() {
             super(Fox.this);
         }
 
         @Override
-        @Override
         public void tick() {
             if (Fox.this.canMove()) {
                 super.tick();
@@ -829,14 +795,12 @@
         }
 
         @Override
-        @Override
         public void start() {
             super.start();
             Fox.this.clearStates();
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return Fox.this.isInWater() && Fox.this.getFluidHeight(FluidTags.WATER) > 0.25D || Fox.this.isInLava();
         }
@@ -847,35 +811,30 @@
         int countdown;
 
         public FaceplantGoal() {
-            this.setFlags(EnumSet.of(Goal.Flag.LOOK, Goal.Flag.JUMP, Goal.Flag.MOVE));
+            this.setFlags(EnumSet.of(Goal.Type.LOOK, Goal.Type.JUMP, Goal.Type.MOVE));
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return Fox.this.isFaceplanted();
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return this.canUse() && this.countdown > 0;
         }
 
         @Override
-        @Override
         public void start() {
             this.countdown = this.adjustedTickDelay(40);
         }
 
         @Override
-        @Override
         public void stop() {
             Fox.this.setFaceplanted(false);
         }
 
         @Override
-        @Override
         public void tick() {
             --this.countdown;
         }
@@ -888,7 +847,6 @@
         }
 
         @Override
-        @Override
         public boolean shouldPanic() {
             return !Fox.this.isDefending() && super.shouldPanic();
         }
@@ -901,7 +859,6 @@
         }
 
         @Override
-        @Override
         public void start() {
             ((Fox) this.animal).clearStates();
             ((Fox) this.partner).clearStates();
@@ -909,41 +866,52 @@
         }
 
         @Override
-        @Override
         protected void breed() {
-            ServerLevel serverlevel = (ServerLevel) this.level;
-            Fox fox = (Fox) this.animal.getBreedOffspring(serverlevel, this.partner);
+            ServerLevel worldserver = (ServerLevel) this.level;
+            Fox entityfox = (Fox) this.animal.getBreedOffspring(worldserver, this.partner);
 
-            if (fox != null) {
-                ServerPlayer serverplayer = this.animal.getLoveCause();
-                ServerPlayer serverplayer1 = this.partner.getLoveCause();
-                ServerPlayer serverplayer2 = serverplayer;
+            if (entityfox != null) {
+                ServerPlayer entityplayer = this.animal.getLoveCause();
+                ServerPlayer entityplayer1 = this.partner.getLoveCause();
+                ServerPlayer entityplayer2 = entityplayer;
 
-                if (serverplayer != null) {
-                    fox.addTrustedUUID(serverplayer.getUUID());
+                if (entityplayer != null) {
+                    entityfox.addTrustedUUID(entityplayer.getUUID());
                 } else {
-                    serverplayer2 = serverplayer1;
+                    entityplayer2 = entityplayer1;
                 }
 
-                if (serverplayer1 != null && serverplayer != serverplayer1) {
-                    fox.addTrustedUUID(serverplayer1.getUUID());
+                if (entityplayer1 != null && entityplayer != entityplayer1) {
+                    entityfox.addTrustedUUID(entityplayer1.getUUID());
                 }
+                // CraftBukkit start - call EntityBreedEvent
+                entityfox.setAge(-24000);
+                entityfox.moveTo(this.animal.getX(), this.animal.getY(), this.animal.getZ(), 0.0F, 0.0F);
+                int experience = this.animal.getRandom().nextInt(7) + 1;
+                org.bukkit.event.entity.EntityBreedEvent entityBreedEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityBreedEvent(entityfox, animal, partner, entityplayer, this.animal.breedItem, experience);
+                if (entityBreedEvent.isCancelled()) {
+                    return;
+                }
+                experience = entityBreedEvent.getExperience();
+                // CraftBukkit end
 
-                if (serverplayer2 != null) {
-                    serverplayer2.awardStat(Stats.ANIMALS_BRED);
-                    CriteriaTriggers.BRED_ANIMALS.trigger(serverplayer2, this.animal, this.partner, fox);
+                if (entityplayer2 != null) {
+                    entityplayer2.awardStat(Stats.ANIMALS_BRED);
+                    CriteriaTriggers.BRED_ANIMALS.trigger(entityplayer2, this.animal, this.partner, entityfox);
                 }
 
                 this.animal.setAge(6000);
                 this.partner.setAge(6000);
                 this.animal.resetLove();
                 this.partner.resetLove();
-                fox.setAge(-24000);
-                fox.moveTo(this.animal.getX(), this.animal.getY(), this.animal.getZ(), 0.0F, 0.0F);
-                serverlevel.addFreshEntityWithPassengers(fox);
+                worldserver.addFreshEntityWithPassengers(entityfox, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING); // CraftBukkit - added SpawnReason
                 this.level.broadcastEntityEvent(this.animal, (byte) 18);
                 if (this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
-                    this.level.addFreshEntity(new ExperienceOrb(this.level, this.animal.getX(), this.animal.getY(), this.animal.getZ(), this.animal.getRandom().nextInt(7) + 1));
+                    // CraftBukkit start - use event experience
+                    if (experience > 0) {
+                        this.level.addFreshEntity(new ExperienceOrb(this.level, this.animal.getX(), this.animal.getY(), this.animal.getZ(), experience));
+                    }
+                    // CraftBukkit end
                 }
 
             }
@@ -953,38 +921,35 @@
     private class StalkPreyGoal extends Goal {
 
         public StalkPreyGoal() {
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
+            this.setFlags(EnumSet.of(Goal.Type.MOVE, Goal.Type.LOOK));
         }
 
         @Override
-        @Override
         public boolean canUse() {
             if (Fox.this.isSleeping()) {
                 return false;
             } else {
-                LivingEntity livingentity = Fox.this.getTarget();
+                LivingEntity entityliving = Fox.this.getTarget();
 
-                return livingentity != null && livingentity.isAlive() && Fox.STALKABLE_PREY.test(livingentity) && Fox.this.distanceToSqr((Entity) livingentity) > 36.0D && !Fox.this.isCrouching() && !Fox.this.isInterested() && !Fox.this.jumping;
+                return entityliving != null && entityliving.isAlive() && Fox.STALKABLE_PREY.test(entityliving) && Fox.this.distanceToSqr((Entity) entityliving) > 36.0D && !Fox.this.isCrouching() && !Fox.this.isInterested() && !Fox.this.jumping;
             }
         }
 
         @Override
-        @Override
         public void start() {
             Fox.this.setSitting(false);
             Fox.this.setFaceplanted(false);
         }
 
         @Override
-        @Override
         public void stop() {
-            LivingEntity livingentity = Fox.this.getTarget();
+            LivingEntity entityliving = Fox.this.getTarget();
 
-            if (livingentity != null && Fox.isPathClear(Fox.this, livingentity)) {
+            if (entityliving != null && Fox.isPathClear(Fox.this, entityliving)) {
                 Fox.this.setIsInterested(true);
                 Fox.this.setIsCrouching(true);
                 Fox.this.getNavigation().stop();
-                Fox.this.getLookControl().setLookAt(livingentity, (float) Fox.this.getMaxHeadYRot(), (float) Fox.this.getMaxHeadXRot());
+                Fox.this.getLookControl().setLookAt(entityliving, (float) Fox.this.getMaxHeadYRot(), (float) Fox.this.getMaxHeadXRot());
             } else {
                 Fox.this.setIsInterested(false);
                 Fox.this.setIsCrouching(false);
@@ -993,44 +958,42 @@
         }
 
         @Override
-        @Override
         public void tick() {
-            LivingEntity livingentity = Fox.this.getTarget();
+            LivingEntity entityliving = Fox.this.getTarget();
 
-            if (livingentity != null) {
-                Fox.this.getLookControl().setLookAt(livingentity, (float) Fox.this.getMaxHeadYRot(), (float) Fox.this.getMaxHeadXRot());
-                if (Fox.this.distanceToSqr((Entity) livingentity) <= 36.0D) {
+            if (entityliving != null) {
+                Fox.this.getLookControl().setLookAt(entityliving, (float) Fox.this.getMaxHeadYRot(), (float) Fox.this.getMaxHeadXRot());
+                if (Fox.this.distanceToSqr((Entity) entityliving) <= 36.0D) {
                     Fox.this.setIsInterested(true);
                     Fox.this.setIsCrouching(true);
                     Fox.this.getNavigation().stop();
                 } else {
-                    Fox.this.getNavigation().moveTo((Entity) livingentity, 1.5D);
+                    Fox.this.getNavigation().moveTo((Entity) entityliving, 1.5D);
                 }
 
             }
         }
     }
 
-    public class FoxPounceGoal extends JumpGoal {
+    public class FoxPounceGoal extends PathfinderGoalWaterJumpAbstract {
 
         public FoxPounceGoal() {}
 
         @Override
-        @Override
         public boolean canUse() {
             if (!Fox.this.isFullyCrouched()) {
                 return false;
             } else {
-                LivingEntity livingentity = Fox.this.getTarget();
+                LivingEntity entityliving = Fox.this.getTarget();
 
-                if (livingentity != null && livingentity.isAlive()) {
-                    if (livingentity.getMotionDirection() != livingentity.getDirection()) {
+                if (entityliving != null && entityliving.isAlive()) {
+                    if (entityliving.getMotionDirection() != entityliving.getDirection()) {
                         return false;
                     } else {
-                        boolean flag = Fox.isPathClear(Fox.this, livingentity);
+                        boolean flag = Fox.isPathClear(Fox.this, entityliving);
 
                         if (!flag) {
-                            Fox.this.getNavigation().createPath((Entity) livingentity, 0);
+                            Fox.this.getNavigation().createPath((Entity) entityliving, 0);
                             Fox.this.setIsCrouching(false);
                             Fox.this.setIsInterested(false);
                         }
@@ -1044,11 +1007,10 @@
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
-            LivingEntity livingentity = Fox.this.getTarget();
+            LivingEntity entityliving = Fox.this.getTarget();
 
-            if (livingentity != null && livingentity.isAlive()) {
+            if (entityliving != null && entityliving.isAlive()) {
                 double d0 = Fox.this.getDeltaMovement().y;
 
                 return (d0 * d0 >= 0.05000000074505806D || Math.abs(Fox.this.getXRot()) >= 15.0F || !Fox.this.onGround()) && !Fox.this.isFaceplanted();
@@ -1058,31 +1020,28 @@
         }
 
         @Override
-        @Override
         public boolean isInterruptable() {
             return false;
         }
 
         @Override
-        @Override
         public void start() {
             Fox.this.setJumping(true);
             Fox.this.setIsPouncing(true);
             Fox.this.setIsInterested(false);
-            LivingEntity livingentity = Fox.this.getTarget();
+            LivingEntity entityliving = Fox.this.getTarget();
 
-            if (livingentity != null) {
-                Fox.this.getLookControl().setLookAt(livingentity, 60.0F, 30.0F);
-                Vec3 vec3 = (new Vec3(livingentity.getX() - Fox.this.getX(), livingentity.getY() - Fox.this.getY(), livingentity.getZ() - Fox.this.getZ())).normalize();
+            if (entityliving != null) {
+                Fox.this.getLookControl().setLookAt(entityliving, 60.0F, 30.0F);
+                Vec3 vec3d = (new Vec3(entityliving.getX() - Fox.this.getX(), entityliving.getY() - Fox.this.getY(), entityliving.getZ() - Fox.this.getZ())).normalize();
 
-                Fox.this.setDeltaMovement(Fox.this.getDeltaMovement().add(vec3.x * 0.8D, 0.9D, vec3.z * 0.8D));
+                Fox.this.setDeltaMovement(Fox.this.getDeltaMovement().add(vec3d.x * 0.8D, 0.9D, vec3d.z * 0.8D));
             }
 
             Fox.this.getNavigation().stop();
         }
 
         @Override
-        @Override
         public void stop() {
             Fox.this.setIsCrouching(false);
             Fox.this.crouchAmount = 0.0F;
@@ -1092,29 +1051,28 @@
         }
 
         @Override
-        @Override
         public void tick() {
-            LivingEntity livingentity = Fox.this.getTarget();
+            LivingEntity entityliving = Fox.this.getTarget();
 
-            if (livingentity != null) {
-                Fox.this.getLookControl().setLookAt(livingentity, 60.0F, 30.0F);
+            if (entityliving != null) {
+                Fox.this.getLookControl().setLookAt(entityliving, 60.0F, 30.0F);
             }
 
             if (!Fox.this.isFaceplanted()) {
-                Vec3 vec3 = Fox.this.getDeltaMovement();
+                Vec3 vec3d = Fox.this.getDeltaMovement();
 
-                if (vec3.y * vec3.y < 0.029999999329447746D && Fox.this.getXRot() != 0.0F) {
+                if (vec3d.y * vec3d.y < 0.029999999329447746D && Fox.this.getXRot() != 0.0F) {
                     Fox.this.setXRot(Mth.rotLerp(0.2F, Fox.this.getXRot(), 0.0F));
                 } else {
-                    double d0 = vec3.horizontalDistance();
-                    double d1 = Math.signum(-vec3.y) * Math.acos(d0 / vec3.length()) * 57.2957763671875D;
+                    double d0 = vec3d.horizontalDistance();
+                    double d1 = Math.signum(-vec3d.y) * Math.acos(d0 / vec3d.length()) * 57.2957763671875D;
 
                     Fox.this.setXRot((float) d1);
                 }
             }
 
-            if (livingentity != null && Fox.this.distanceTo(livingentity) <= 2.0F) {
-                Fox.this.doHurtTarget(livingentity);
+            if (entityliving != null && Fox.this.distanceTo(entityliving) <= 2.0F) {
+                Fox.this.doHurtTarget(entityliving);
             } else if (Fox.this.getXRot() > 0.0F && Fox.this.onGround() && (float) Fox.this.getDeltaMovement().y != 0.0F && Fox.this.level().getBlockState(Fox.this.blockPosition()).is(Blocks.SNOW)) {
                 Fox.this.setXRot(60.0F);
                 Fox.this.setTarget((LivingEntity) null);
@@ -1133,7 +1091,6 @@
         }
 
         @Override
-        @Override
         public boolean canUse() {
             if (!Fox.this.isSleeping() && this.mob.getTarget() == null) {
                 if (Fox.this.level().isThundering() && Fox.this.level().canSeeSky(this.mob.blockPosition())) {
@@ -1143,9 +1100,9 @@
                     return false;
                 } else {
                     this.interval = 100;
-                    BlockPos blockpos = this.mob.blockPosition();
+                    BlockPos blockposition = this.mob.blockPosition();
 
-                    return Fox.this.level().isDay() && Fox.this.level().canSeeSky(blockpos) && !((ServerLevel) Fox.this.level()).isVillage(blockpos) && this.setWantedPos();
+                    return Fox.this.level().isDay() && Fox.this.level().canSeeSky(blockposition) && !((ServerLevel) Fox.this.level()).isVillage(blockposition) && this.setWantedPos();
                 }
             } else {
                 return false;
@@ -1153,7 +1110,6 @@
         }
 
         @Override
-        @Override
         public void start() {
             Fox.this.clearStates();
             super.start();
@@ -1167,31 +1123,28 @@
         }
 
         @Override
-        @Override
-        protected void checkAndPerformAttack(LivingEntity livingentity) {
-            if (this.canPerformAttack(livingentity)) {
+        protected void checkAndPerformAttack(LivingEntity entityliving) {
+            if (this.canPerformAttack(entityliving)) {
                 this.resetAttackCooldown();
-                this.mob.doHurtTarget(livingentity);
+                this.mob.doHurtTarget(entityliving);
                 Fox.this.playSound(SoundEvents.FOX_BITE, 1.0F, 1.0F);
             }
 
         }
 
         @Override
-        @Override
         public void start() {
             Fox.this.setIsInterested(false);
             super.start();
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return !Fox.this.isSitting() && !Fox.this.isSleeping() && !Fox.this.isCrouching() && !Fox.this.isFaceplanted() && super.canUse();
         }
     }
 
-    private class SleepGoal extends Fox.FoxBehaviorGoal {
+    private class SleepGoal extends Fox.d {
 
         private static final int WAIT_TIME_BEFORE_SLEEP = reducedTickDelay(140);
         private int countdown;
@@ -1199,17 +1152,15 @@
         public SleepGoal() {
             super();
             this.countdown = Fox.this.random.nextInt(Fox.SleepGoal.WAIT_TIME_BEFORE_SLEEP);
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK, Goal.Flag.JUMP));
+            this.setFlags(EnumSet.of(Goal.Type.MOVE, Goal.Type.LOOK, Goal.Type.JUMP));
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return Fox.this.xxa == 0.0F && Fox.this.yya == 0.0F && Fox.this.zza == 0.0F ? this.canSleep() || Fox.this.isSleeping() : false;
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return this.canSleep();
         }
@@ -1224,14 +1175,12 @@
         }
 
         @Override
-        @Override
         public void stop() {
             this.countdown = Fox.this.random.nextInt(Fox.SleepGoal.WAIT_TIME_BEFORE_SLEEP);
             Fox.this.clearStates();
         }
 
         @Override
-        @Override
         public void start() {
             Fox.this.setSitting(false);
             Fox.this.setIsCrouching(false);
@@ -1247,25 +1196,22 @@
 
         private final Fox fox;
 
-        public FoxFollowParentGoal(Fox fox, double d0) {
-            super(fox, d0);
-            this.fox = fox;
+        public FoxFollowParentGoal(Fox entityfox, double d0) {
+            super(entityfox, d0);
+            this.fox = entityfox;
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return !this.fox.isDefending() && super.canUse();
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return !this.fox.isDefending() && super.canContinueToUse();
         }
 
         @Override
-        @Override
         public void start() {
             this.fox.clearStates();
             super.start();
@@ -1279,20 +1225,17 @@
         }
 
         @Override
-        @Override
         public void start() {
             Fox.this.clearStates();
             super.start();
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return super.canUse() && this.canFoxMove();
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return super.canContinueToUse() && this.canFoxMove();
         }
@@ -1312,27 +1255,23 @@
         }
 
         @Override
-        @Override
         public double acceptedDistance() {
             return 2.0D;
         }
 
         @Override
-        @Override
         public boolean shouldRecalculatePath() {
             return this.tryTicks % 100 == 0;
         }
 
         @Override
-        @Override
-        protected boolean isValidTarget(LevelReader levelreader, BlockPos blockpos) {
-            BlockState blockstate = levelreader.getBlockState(blockpos);
+        protected boolean isValidTarget(LevelReader level, BlockPos pos) {
+            IBlockData iblockdata = level.getBlockState(pos);
 
-            return blockstate.is(Blocks.SWEET_BERRY_BUSH) && (Integer) blockstate.getValue(SweetBerryBushBlock.AGE) >= 2 || CaveVines.hasGlowBerries(blockstate);
+            return iblockdata.is(Blocks.SWEET_BERRY_BUSH) && (Integer) iblockdata.getValue(SweetBerryBushBlock.AGE) >= 2 || CaveVines.hasGlowBerries(iblockdata);
         }
 
         @Override
-        @Override
         public void tick() {
             if (this.isReachedTarget()) {
                 if (this.ticksWaited >= 40) {
@@ -1349,25 +1288,30 @@
 
         protected void onReachedTarget() {
             if (Fox.this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
-                BlockState blockstate = Fox.this.level().getBlockState(this.blockPos);
+                IBlockData iblockdata = Fox.this.level().getBlockState(this.blockPos);
 
-                if (blockstate.is(Blocks.SWEET_BERRY_BUSH)) {
-                    this.pickSweetBerries(blockstate);
-                } else if (CaveVines.hasGlowBerries(blockstate)) {
-                    this.pickGlowBerry(blockstate);
+                if (iblockdata.is(Blocks.SWEET_BERRY_BUSH)) {
+                    this.pickSweetBerries(iblockdata);
+                } else if (CaveVines.hasGlowBerries(iblockdata)) {
+                    this.pickGlowBerry(iblockdata);
                 }
 
             }
         }
 
-        private void pickGlowBerry(BlockState blockstate) {
-            CaveVines.use(Fox.this, blockstate, Fox.this.level(), this.blockPos);
+        private void pickGlowBerry(IBlockData state) {
+            CaveVines.use(Fox.this, state, Fox.this.level(), this.blockPos);
         }
 
-        private void pickSweetBerries(BlockState blockstate) {
-            int i = (Integer) blockstate.getValue(SweetBerryBushBlock.AGE);
+        private void pickSweetBerries(IBlockData state) {
+            int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
 
-            blockstate.setValue(SweetBerryBushBlock.AGE, 1);
+            state.setValue(SweetBerryBushBlock.AGE, 1);
+            // CraftBukkit start - call EntityChangeBlockEvent
+            if (!org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(Fox.this, this.blockPos, state.setValue(SweetBerryBushBlock.AGE, 1))) {
+                return;
+            }
+            // CraftBukkit end
             int j = 1 + Fox.this.level().random.nextInt(2) + (i == 3 ? 1 : 0);
             ItemStack itemstack = Fox.this.getItemBySlot(EquipmentSlot.MAINHAND);
 
@@ -1381,18 +1325,16 @@
             }
 
             Fox.this.playSound(SoundEvents.SWEET_BERRY_BUSH_PICK_BERRIES, 1.0F, 1.0F);
-            Fox.this.level().setBlock(this.blockPos, (BlockState) blockstate.setValue(SweetBerryBushBlock.AGE, 1), 2);
+            Fox.this.level().setBlock(this.blockPos, (IBlockData) state.setValue(SweetBerryBushBlock.AGE, 1), 2);
             Fox.this.level().gameEvent(GameEvent.BLOCK_CHANGE, this.blockPos, GameEvent.Context.of((Entity) Fox.this));
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return !Fox.this.isSleeping() && super.canUse();
         }
 
         @Override
-        @Override
         public void start() {
             this.ticksWaited = 0;
             Fox.this.setSitting(false);
@@ -1403,11 +1345,10 @@
     private class FoxSearchForItemsGoal extends Goal {
 
         public FoxSearchForItemsGoal() {
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE));
+            this.setFlags(EnumSet.of(Goal.Type.MOVE));
         }
 
         @Override
-        @Override
         public boolean canUse() {
             if (!Fox.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty()) {
                 return false;
@@ -1427,7 +1368,6 @@
         }
 
         @Override
-        @Override
         public void tick() {
             List<ItemEntity> list = Fox.this.level().getEntitiesOfClass(ItemEntity.class, Fox.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Fox.ALLOWED_ITEMS);
             ItemStack itemstack = Fox.this.getItemBySlot(EquipmentSlot.MAINHAND);
@@ -1439,7 +1379,6 @@
         }
 
         @Override
-        @Override
         public void start() {
             List<ItemEntity> list = Fox.this.level().getEntitiesOfClass(ItemEntity.class, Fox.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Fox.ALLOWED_ITEMS);
 
@@ -1452,24 +1391,22 @@
 
     private class FoxLookAtPlayerGoal extends LookAtPlayerGoal {
 
-        public FoxLookAtPlayerGoal(Mob mob, Class<? extends LivingEntity> oclass, float f) {
-            super(mob, oclass, f);
+        public FoxLookAtPlayerGoal(Mob mob, Class lookAtType, float lookDistance) {
+            super(mob, lookAtType, lookDistance);
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return super.canUse() && !Fox.this.isFaceplanted() && !Fox.this.isInterested();
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return super.canContinueToUse() && !Fox.this.isFaceplanted() && !Fox.this.isInterested();
         }
     }
 
-    private class PerchAndSearchGoal extends Fox.FoxBehaviorGoal {
+    private class PerchAndSearchGoal extends Fox.d {
 
         private double relX;
         private double relZ;
@@ -1478,23 +1415,20 @@
 
         public PerchAndSearchGoal() {
             super();
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
+            this.setFlags(EnumSet.of(Goal.Type.MOVE, Goal.Type.LOOK));
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return Fox.this.getLastHurtByMob() == null && Fox.this.getRandom().nextFloat() < 0.02F && !Fox.this.isSleeping() && Fox.this.getTarget() == null && Fox.this.getNavigation().isDone() && !this.alertable() && !Fox.this.isPouncing() && !Fox.this.isCrouching();
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return this.looksRemaining > 0;
         }
 
         @Override
-        @Override
         public void start() {
             this.resetLook();
             this.looksRemaining = 2 + Fox.this.getRandom().nextInt(3);
@@ -1503,13 +1437,11 @@
         }
 
         @Override
-        @Override
         public void stop() {
             Fox.this.setSitting(false);
         }
 
         @Override
-        @Override
         public void tick() {
             --this.lookTime;
             if (this.lookTime <= 0) {
@@ -1537,12 +1469,11 @@
         private LivingEntity trustedLastHurt;
         private int timestamp;
 
-        public DefendTrustedTargetGoal(Class<LivingEntity> oclass, boolean flag, boolean flag1, @Nullable Predicate<LivingEntity> predicate) {
+        public DefendTrustedTargetGoal(Class oclass, boolean flag, boolean flag1, @Nullable Predicate<LivingEntity> predicate) { // CraftBukkit - decompile error
             super(Fox.this, oclass, 10, flag, flag1, predicate);
         }
 
         @Override
-        @Override
         public boolean canUse() {
             if (this.randomInterval > 0 && this.mob.getRandom().nextInt(this.randomInterval) != 0) {
                 return false;
@@ -1556,11 +1487,11 @@
                         Entity entity = ((ServerLevel) Fox.this.level()).getEntity(uuid);
 
                         if (entity instanceof LivingEntity) {
-                            LivingEntity livingentity = (LivingEntity) entity;
+                            LivingEntity entityliving = (LivingEntity) entity;
 
-                            this.trustedLastHurt = livingentity;
-                            this.trustedLastHurtBy = livingentity.getLastHurtByMob();
-                            int i = livingentity.getLastHurtByMobTimestamp();
+                            this.trustedLastHurt = entityliving;
+                            this.trustedLastHurtBy = entityliving.getLastHurtByMob();
+                            int i = entityliving.getLastHurtByMobTimestamp();
 
                             return i != this.timestamp && this.canAttack(this.trustedLastHurtBy, this.targetConditions);
                         }
@@ -1572,7 +1503,6 @@
         }
 
         @Override
-        @Override
         public void start() {
             this.setTarget(this.trustedLastHurtBy);
             this.target = this.trustedLastHurtBy;
@@ -1592,7 +1522,7 @@
         RED(0, "red"), SNOW(1, "snow");
 
         public static final StringRepresentable.EnumCodec<Fox.Type> CODEC = StringRepresentable.fromEnum(Fox.Type::values);
-        private static final IntFunction<Fox.Type> BY_ID = ByIdMap.continuous(Fox.Type::getId, values(), ByIdMap.OutOfBoundsStrategy.ZERO);
+        private static final IntFunction<Fox.Type> BY_ID = ByIdMap.continuous(Fox.Type::getId, values(), ByIdMap.a.ZERO);
         private final int id;
         private final String name;
 
@@ -1602,7 +1532,6 @@
         }
 
         @Override
-        @Override
         public String getSerializedName() {
             return this.name;
         }
@@ -1611,16 +1540,16 @@
             return this.id;
         }
 
-        public static Fox.Type byName(String s) {
-            return (Fox.Type) Fox.Type.CODEC.byName(s, Fox.Type.RED);
+        public static Fox.Type byName(String name) {
+            return (Fox.Type) Fox.Type.CODEC.byName(name, Fox.Type.RED);
         }
 
-        public static Fox.Type byId(int i) {
-            return (Fox.Type) Fox.Type.BY_ID.apply(i);
+        public static Fox.Type byId(int index) {
+            return (Fox.Type) Fox.Type.BY_ID.apply(index);
         }
 
-        public static Fox.Type byBiome(Holder<Biome> holder) {
-            return holder.is(BiomeTags.SPAWNS_SNOW_FOXES) ? Fox.Type.SNOW : Fox.Type.RED;
+        public static Fox.Type byBiome(Holder<Biome> biome) {
+            return biome.is(BiomeTags.SPAWNS_SNOW_FOXES) ? Fox.Type.SNOW : Fox.Type.RED;
         }
     }
 
@@ -1628,22 +1557,22 @@
 
         public final Fox.Type type;
 
-        public FoxGroupData(Fox.Type fox_type) {
+        public FoxGroupData(Fox.Type type) {
             super(false);
-            this.type = fox_type;
+            this.type = type;
         }
     }
 
-    private abstract class FoxBehaviorGoal extends Goal {
+    private abstract class d extends Goal {
 
         private final TargetingConditions alertableTargeting = TargetingConditions.forCombat().range(12.0D).ignoreLineOfSight().selector(Fox.this.new FoxAlertableEntitiesSelector());
 
-        FoxBehaviorGoal() {}
+        d() {}
 
         protected boolean hasShelter() {
-            BlockPos blockpos = BlockPos.containing(Fox.this.getX(), Fox.this.getBoundingBox().maxY, Fox.this.getZ());
+            BlockPos blockposition = BlockPos.containing(Fox.this.getX(), Fox.this.getBoundingBox().maxY, Fox.this.getZ());
 
-            return !Fox.this.level().canSeeSky(blockpos) && Fox.this.getWalkTargetValue(blockpos) >= 0.0F;
+            return !Fox.this.level().canSeeSky(blockposition) && Fox.this.getWalkTargetValue(blockposition) >= 0.0F;
         }
 
         protected boolean alertable() {
@@ -1655,9 +1584,8 @@
 
         public FoxAlertableEntitiesSelector() {}
 
-        @Override
-        public boolean test(LivingEntity livingentity) {
-            return livingentity instanceof Fox ? false : (!(livingentity instanceof Chicken) && !(livingentity instanceof Rabbit) && !(livingentity instanceof Monster) ? (livingentity instanceof TamableAnimal ? !((TamableAnimal) livingentity).isTame() : (livingentity instanceof Player && (livingentity.isSpectator() || ((Player) livingentity).isCreative()) ? false : (Fox.this.trusts(livingentity.getUUID()) ? false : !livingentity.isSleeping() && !livingentity.isDiscrete()))) : true);
+        public boolean test(LivingEntity entity) {
+            return entity instanceof Fox ? false : (!(entity instanceof Chicken) && !(entity instanceof Rabbit) && !(entity instanceof Monster) ? (entity instanceof TamableAnimal ? !((TamableAnimal) entity).isTame() : (entity instanceof Player && (entity.isSpectator() || ((Player) entity).isCreative()) ? false : (Fox.this.trusts(entity.getUUID()) ? false : !entity.isSleeping() && !entity.isDiscrete()))) : true);
         }
     }
 }
