--- a/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/net/minecraft/world/entity/animal/allay/Allay.java
@@ -28,18 +28,18 @@
 import net.minecraft.tags.GameEventTags;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.Mth;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMoveType;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.PathfinderMob;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -61,7 +61,7 @@
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.EntityPositionSource;
 import net.minecraft.world.level.gameevent.GameEvent;
@@ -92,40 +92,44 @@
     private final DynamicGameEventListener<Allay.JukeboxListener> dynamicJukeboxListener;
     private final SimpleContainer inventory = new SimpleContainer(1);
     @Nullable
-    private BlockPos jukeboxPos;
-    private long duplicationCooldown;
+    public BlockPos jukeboxPos;
+    public long duplicationCooldown;
     private float holdingItemAnimationTicks;
     private float holdingItemAnimationTicks0;
     private float dancingAnimationTicks;
     private float spinningAnimationTicks;
     private float spinningAnimationTicks0;
+    public boolean forceDancing = false; // CraftBukkit
 
-    public Allay(EntityType<? extends Allay> entitytype, Level level) {
-        super(entitytype, level);
+    public Allay(EntityType<? extends Allay> entityType, Level level) {
+        super(entityType, level);
         this.moveControl = new FlyingMoveControl(this, 20, true);
         this.setCanPickUpLoot(this.canPickUpLoot());
-        this.vibrationUser = new Allay.VibrationUser();
+        this.vibrationUser = new Allay.b();
         this.vibrationData = new VibrationSystem.Data();
         this.dynamicVibrationListener = new DynamicGameEventListener<>(new VibrationSystem.Listener(this));
         this.dynamicJukeboxListener = new DynamicGameEventListener<>(new Allay.JukeboxListener(this.vibrationUser.getPositionSource(), GameEvent.JUKEBOX_PLAY.getNotificationRadius()));
     }
 
+    // CraftBukkit start
+    public void setCanDuplicate(boolean canDuplicate) {
+        this.entityData.set(Allay.DATA_CAN_DUPLICATE, canDuplicate);
+    }
+    // CraftBukkit end
+
     @Override
-    @Override
     protected Brain.Provider<Allay> brainProvider() {
         return Brain.provider(Allay.MEMORY_TYPES, Allay.SENSOR_TYPES);
     }
 
     @Override
-    @Override
     protected Brain<?> makeBrain(Dynamic<?> dynamic) {
         return AllayAi.makeBrain(this.brainProvider().makeBrain(dynamic));
     }
 
     @Override
-    @Override
     public Brain<Allay> getBrain() {
-        return super.getBrain();
+        return (Brain<Allay>) super.getBrain(); // CraftBukkit - decompile error
     }
 
     public static AttributeSupplier.Builder createAttributes() {
@@ -133,18 +137,16 @@
     }
 
     @Override
-    @Override
     protected PathNavigation createNavigation(Level level) {
-        FlyingPathNavigation flyingpathnavigation = new FlyingPathNavigation(this, level);
+        FlyingPathNavigation navigationflying = new FlyingPathNavigation(this, level);
 
-        flyingpathnavigation.setCanOpenDoors(false);
-        flyingpathnavigation.setCanFloat(true);
-        flyingpathnavigation.setCanPassDoors(true);
-        return flyingpathnavigation;
+        navigationflying.setCanOpenDoors(false);
+        navigationflying.setCanFloat(true);
+        navigationflying.setCanPassDoors(true);
+        return navigationflying;
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Allay.DATA_DANCING, false);
@@ -152,20 +154,19 @@
     }
 
     @Override
-    @Override
-    public void travel(Vec3 vec3) {
+    public void travel(Vec3 travelVector) {
         if (this.isControlledByLocalInstance()) {
             if (this.isInWater()) {
-                this.moveRelative(0.02F, vec3);
-                this.move(MoverType.SELF, this.getDeltaMovement());
+                this.moveRelative(0.02F, travelVector);
+                this.move(EnumMoveType.SELF, this.getDeltaMovement());
                 this.setDeltaMovement(this.getDeltaMovement().scale(0.800000011920929D));
             } else if (this.isInLava()) {
-                this.moveRelative(0.02F, vec3);
-                this.move(MoverType.SELF, this.getDeltaMovement());
+                this.moveRelative(0.02F, travelVector);
+                this.move(EnumMoveType.SELF, this.getDeltaMovement());
                 this.setDeltaMovement(this.getDeltaMovement().scale(0.5D));
             } else {
-                this.moveRelative(this.getSpeed(), vec3);
-                this.move(MoverType.SELF, this.getDeltaMovement());
+                this.moveRelative(this.getSpeed(), travelVector);
+                this.move(EnumMoveType.SELF, this.getDeltaMovement());
                 this.setDeltaMovement(this.getDeltaMovement().scale(0.9100000262260437D));
             }
         }
@@ -174,62 +175,53 @@
     }
 
     @Override
-    @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions entitydimensions) {
-        return entitydimensions.height * 0.6F;
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions dimensions) {
+        return dimensions.height * 0.6F;
     }
 
     @Override
-    @Override
-    public boolean hurt(DamageSource damagesource, float f) {
-        Entity entity = damagesource.getEntity();
+    public boolean hurt(DamageSource source, float amount) {
+        Entity entity = source.getEntity();
 
         if (entity instanceof Player) {
-            Player player = (Player) entity;
+            Player entityhuman = (Player) entity;
             Optional<UUID> optional = this.getBrain().getMemory(MemoryModuleType.LIKED_PLAYER);
 
-            if (optional.isPresent() && player.getUUID().equals(optional.get())) {
+            if (optional.isPresent() && entityhuman.getUUID().equals(optional.get())) {
                 return false;
             }
         }
 
-        return super.hurt(damagesource, f);
+        return super.hurt(source, amount);
     }
 
     @Override
-    @Override
-    protected void playStepSound(BlockPos blockpos, BlockState blockstate) {}
+    protected void playStepSound(BlockPos pos, IBlockData state) {}
 
     @Override
-    @Override
-    protected void checkFallDamage(double d0, boolean flag, BlockState blockstate, BlockPos blockpos) {}
+    protected void checkFallDamage(double y, boolean flag, IBlockData onGround, BlockPos state) {}
 
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return this.hasItemInSlot(EquipmentSlot.MAINHAND) ? SoundEvents.ALLAY_AMBIENT_WITH_ITEM : SoundEvents.ALLAY_AMBIENT_WITHOUT_ITEM;
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.ALLAY_HURT;
     }
 
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.ALLAY_DEATH;
     }
 
     @Override
-    @Override
     protected float getSoundVolume() {
         return 0.4F;
     }
 
     @Override
-    @Override
     protected void customServerAiStep() {
         this.level().getProfiler().push("allayBrain");
         this.getBrain().tick((ServerLevel) this.level(), this);
@@ -241,11 +233,10 @@
     }
 
     @Override
-    @Override
     public void aiStep() {
         super.aiStep();
         if (!this.level().isClientSide && this.isAlive() && this.tickCount % 10 == 0) {
-            this.heal(1.0F);
+            this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
         }
 
         if (this.isDancing() && this.shouldStopDancing() && this.tickCount % 20 == 0) {
@@ -257,7 +248,6 @@
     }
 
     @Override
-    @Override
     public void tick() {
         super.tick();
         if (this.level().isClientSide) {
@@ -293,18 +283,16 @@
     }
 
     @Override
-    @Override
     public boolean canPickUpLoot() {
         return !this.isOnPickupCooldown() && this.hasItemInHand();
     }
 
     public boolean hasItemInHand() {
-        return !this.getItemInHand(InteractionHand.MAIN_HAND).isEmpty();
+        return !this.getItemInHand(EnumHand.MAIN_HAND).isEmpty();
     }
 
     @Override
-    @Override
-    public boolean canTakeItem(ItemStack itemstack) {
+    public boolean canTakeItem(ItemStack stack) {
         return false;
     }
 
@@ -313,13 +301,17 @@
     }
 
     @Override
-    @Override
-    protected InteractionResult mobInteract(Player player, InteractionHand interactionhand) {
-        ItemStack itemstack = player.getItemInHand(interactionhand);
-        ItemStack itemstack1 = this.getItemInHand(InteractionHand.MAIN_HAND);
+    protected InteractionResult mobInteract(Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
+        ItemStack itemstack1 = this.getItemInHand(EnumHand.MAIN_HAND);
 
         if (this.isDancing() && this.isDuplicationItem(itemstack) && this.canDuplicate()) {
-            this.duplicateAllay();
+            // CraftBukkit start - handle cancel duplication
+            Allay allay = this.duplicateAllay();
+            if (allay == null) {
+                return InteractionResult.SUCCESS;
+            }
+            // CraftBukkit end
             this.level().broadcastEntityEvent(this, (byte) 18);
             this.level().playSound(player, (Entity) this, SoundEvents.AMETHYST_BLOCK_CHIME, SoundSource.NEUTRAL, 2.0F, 1.0F);
             this.removeInteractionItem(player, itemstack);
@@ -327,15 +319,15 @@
         } else if (itemstack1.isEmpty() && !itemstack.isEmpty()) {
             ItemStack itemstack2 = itemstack.copyWithCount(1);
 
-            this.setItemInHand(InteractionHand.MAIN_HAND, itemstack2);
+            this.setItemInHand(EnumHand.MAIN_HAND, itemstack2);
             this.removeInteractionItem(player, itemstack);
             this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_GIVEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.getBrain().setMemory(MemoryModuleType.LIKED_PLAYER, (Object) player.getUUID());
+            this.getBrain().setMemory(MemoryModuleType.LIKED_PLAYER, player.getUUID()); // CraftBukkit - decompile error
             return InteractionResult.SUCCESS;
-        } else if (!itemstack1.isEmpty() && interactionhand == InteractionHand.MAIN_HAND && itemstack.isEmpty()) {
+        } else if (!itemstack1.isEmpty() && hand == EnumHand.MAIN_HAND && itemstack.isEmpty()) {
             this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
             this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_TAKEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.swing(InteractionHand.MAIN_HAND);
+            this.swing(EnumHand.MAIN_HAND);
             Iterator iterator = this.getInventory().removeAllItems().iterator();
 
             while (iterator.hasNext()) {
@@ -348,17 +340,17 @@
             player.addItem(itemstack1);
             return InteractionResult.SUCCESS;
         } else {
-            return super.mobInteract(player, interactionhand);
+            return super.mobInteract(player, hand);
         }
     }
 
-    public void setJukeboxPlaying(BlockPos blockpos, boolean flag) {
-        if (flag) {
+    public void setJukeboxPlaying(BlockPos jukeboxPos, boolean jukeboxPlaying) {
+        if (jukeboxPlaying) {
             if (!this.isDancing()) {
-                this.jukeboxPos = blockpos;
+                this.jukeboxPos = jukeboxPos;
                 this.setDancing(true);
             }
-        } else if (blockpos.equals(this.jukeboxPos) || this.jukeboxPos == null) {
+        } else if (jukeboxPos.equals(this.jukeboxPos) || this.jukeboxPos == null) {
             this.jukeboxPos = null;
             this.setDancing(false);
         }
@@ -366,79 +358,72 @@
     }
 
     @Override
-    @Override
     public SimpleContainer getInventory() {
         return this.inventory;
     }
 
     @Override
-    @Override
     protected Vec3i getPickupReach() {
         return Allay.ITEM_PICKUP_REACH;
     }
 
     @Override
-    @Override
-    public boolean wantsToPickUp(ItemStack itemstack) {
-        ItemStack itemstack1 = this.getItemInHand(InteractionHand.MAIN_HAND);
+    public boolean wantsToPickUp(ItemStack stack) {
+        ItemStack itemstack1 = this.getItemInHand(EnumHand.MAIN_HAND);
 
-        return !itemstack1.isEmpty() && this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && this.inventory.canAddItem(itemstack) && this.allayConsidersItemEqual(itemstack1, itemstack);
+        return !itemstack1.isEmpty() && this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && this.inventory.canAddItem(stack) && this.allayConsidersItemEqual(itemstack1, stack);
     }
 
-    private boolean allayConsidersItemEqual(ItemStack itemstack, ItemStack itemstack1) {
-        return ItemStack.isSameItem(itemstack, itemstack1) && !this.hasNonMatchingPotion(itemstack, itemstack1);
+    private boolean allayConsidersItemEqual(ItemStack first, ItemStack second) {
+        return ItemStack.isSameItem(first, second) && !this.hasNonMatchingPotion(first, second);
     }
 
-    private boolean hasNonMatchingPotion(ItemStack itemstack, ItemStack itemstack1) {
-        CompoundTag compoundtag = itemstack.getTag();
-        boolean flag = compoundtag != null && compoundtag.contains("Potion");
+    private boolean hasNonMatchingPotion(ItemStack first, ItemStack second) {
+        CompoundTag nbttagcompound = first.getTag();
+        boolean flag = nbttagcompound != null && nbttagcompound.contains("Potion");
 
         if (!flag) {
             return false;
         } else {
-            CompoundTag compoundtag1 = itemstack1.getTag();
-            boolean flag1 = compoundtag1 != null && compoundtag1.contains("Potion");
+            CompoundTag nbttagcompound1 = second.getTag();
+            boolean flag1 = nbttagcompound1 != null && nbttagcompound1.contains("Potion");
 
             if (!flag1) {
                 return true;
             } else {
-                Tag tag = compoundtag.get("Potion");
-                Tag tag1 = compoundtag1.get("Potion");
+                Tag nbtbase = nbttagcompound.get("Potion");
+                Tag nbtbase1 = nbttagcompound1.get("Potion");
 
-                return tag != null && tag1 != null && !tag.equals(tag1);
+                return nbtbase != null && nbtbase1 != null && !nbtbase.equals(nbtbase1);
             }
         }
     }
 
     @Override
-    @Override
-    protected void pickUpItem(ItemEntity itementity) {
-        InventoryCarrier.pickUpItem(this, this, itementity);
+    protected void pickUpItem(ItemEntity itemEntity) {
+        InventoryCarrier.pickUpItem(this, this, itemEntity);
     }
 
     @Override
-    @Override
     protected void sendDebugPackets() {
         super.sendDebugPackets();
         DebugPackets.sendEntityBrain(this);
     }
 
     @Override
-    @Override
     public boolean isFlapping() {
         return !this.onGround();
     }
 
     @Override
-    @Override
-    public void updateDynamicGameEventListener(BiConsumer<DynamicGameEventListener<?>, ServerLevel> biconsumer) {
-        Level level = this.level();
+    public void updateDynamicGameEventListener(BiConsumer<DynamicGameEventListener<?>, ServerLevel> listenerConsumer) {
+        Level world = this.level();
 
-        if (level instanceof ServerLevel) {
-            ServerLevel serverlevel = (ServerLevel) level;
+        if (world instanceof ServerLevel) {
+            ServerLevel worldserver = (ServerLevel) world;
 
-            biconsumer.accept(this.dynamicVibrationListener, serverlevel);
-            biconsumer.accept(this.dynamicJukeboxListener, serverlevel);
+            listenerConsumer.accept(this.dynamicVibrationListener, worldserver);
+            listenerConsumer.accept(this.dynamicJukeboxListener, worldserver);
         }
 
     }
@@ -447,18 +432,19 @@
         return (Boolean) this.entityData.get(Allay.DATA_DANCING);
     }
 
-    public void setDancing(boolean flag) {
-        if (!this.level().isClientSide && this.isEffectiveAi() && (!flag || !this.isPanicking())) {
-            this.entityData.set(Allay.DATA_DANCING, flag);
+    public void setDancing(boolean dancing) {
+        if (!this.level().isClientSide && this.isEffectiveAi() && (!dancing || !this.isPanicking())) {
+            this.entityData.set(Allay.DATA_DANCING, dancing);
         }
     }
 
     private boolean shouldStopDancing() {
+        if (this.forceDancing) {return false;} // CraftBukkit
         return this.jukeboxPos == null || !this.jukeboxPos.closerToCenterThan(this.position(), (double) GameEvent.JUKEBOX_PLAY.getNotificationRadius()) || !this.level().getBlockState(this.jukeboxPos).is(Blocks.JUKEBOX);
     }
 
-    public float getHoldingItemAnimationProgress(float f) {
-        return Mth.lerp(f, this.holdingItemAnimationTicks0, this.holdingItemAnimationTicks) / 5.0F;
+    public float getHoldingItemAnimationProgress(float partialTick) {
+        return Mth.lerp(partialTick, this.holdingItemAnimationTicks0, this.holdingItemAnimationTicks) / 5.0F;
     }
 
     public boolean isSpinning() {
@@ -467,18 +453,16 @@
         return f < 15.0F;
     }
 
-    public float getSpinningProgress(float f) {
-        return Mth.lerp(f, this.spinningAnimationTicks0, this.spinningAnimationTicks) / 15.0F;
+    public float getSpinningProgress(float partialTick) {
+        return Mth.lerp(partialTick, this.spinningAnimationTicks0, this.spinningAnimationTicks) / 15.0F;
     }
 
     @Override
-    @Override
-    public boolean equipmentHasChanged(ItemStack itemstack, ItemStack itemstack1) {
-        return !this.allayConsidersItemEqual(itemstack, itemstack1);
+    public boolean equipmentHasChanged(ItemStack oldItem, ItemStack newItem) {
+        return !this.allayConsidersItemEqual(oldItem, newItem);
     }
 
     @Override
-    @Override
     protected void dropEquipment() {
         super.dropEquipment();
         this.inventory.removeAllItems().forEach(this::spawnAtLocation);
@@ -492,48 +476,44 @@
     }
 
     @Override
-    @Override
-    public boolean removeWhenFarAway(double d0) {
+    public boolean removeWhenFarAway(double distanceToClosestPlayer) {
         return false;
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        this.writeInventoryToTag(compoundtag);
-        DataResult dataresult = VibrationSystem.Data.CODEC.encodeStart(NbtOps.INSTANCE, this.vibrationData);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        this.writeInventoryToTag(compound);
+        DataResult<net.minecraft.nbt.Tag> dataresult = VibrationSystem.Data.CODEC.encodeStart(NbtOps.INSTANCE, this.vibrationData); // CraftBukkit - decompile error
         Logger logger = Allay.LOGGER;
 
         Objects.requireNonNull(logger);
-        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> {
-            compoundtag.put("listener", tag);
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+            compound.put("listener", nbtbase);
         });
-        compoundtag.putLong("DuplicationCooldown", this.duplicationCooldown);
-        compoundtag.putBoolean("CanDuplicate", this.canDuplicate());
+        compound.putLong("DuplicationCooldown", this.duplicationCooldown);
+        compound.putBoolean("CanDuplicate", this.canDuplicate());
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.readInventoryFromTag(compoundtag);
-        if (compoundtag.contains("listener", 10)) {
-            DataResult dataresult = VibrationSystem.Data.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundtag.getCompound("listener")));
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.readInventoryFromTag(compound);
+        if (compound.contains("listener", 10)) {
+            DataResult<VibrationSystem.Data> dataresult = VibrationSystem.Data.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compound.getCompound("listener"))); // CraftBukkit - decompile error
             Logger logger = Allay.LOGGER;
 
             Objects.requireNonNull(logger);
-            dataresult.resultOrPartial(logger::error).ifPresent((vibrationsystem_data) -> {
-                this.vibrationData = vibrationsystem_data;
+            dataresult.resultOrPartial(logger::error).ifPresent((vibrationsystem_a) -> {
+                this.vibrationData = vibrationsystem_a;
             });
         }
 
-        this.duplicationCooldown = (long) compoundtag.getInt("DuplicationCooldown");
-        this.entityData.set(Allay.DATA_CAN_DUPLICATE, compoundtag.getBoolean("CanDuplicate"));
+        this.duplicationCooldown = (long) compound.getInt("DuplicationCooldown");
+        this.entityData.set(Allay.DATA_CAN_DUPLICATE, compound.getBoolean("CanDuplicate"));
     }
 
     @Override
-    @Override
     protected boolean shouldStayCloseToLeashHolder() {
         return false;
     }
@@ -549,11 +529,11 @@
 
     }
 
-    private boolean isDuplicationItem(ItemStack itemstack) {
-        return Allay.DUPLICATION_ITEM.test(itemstack);
+    private boolean isDuplicationItem(ItemStack stack) {
+        return Allay.DUPLICATION_ITEM.test(stack);
     }
 
-    private void duplicateAllay() {
+    public Allay duplicateAllay() { // CraftBukkit - return allay
         Allay allay = (Allay) EntityType.ALLAY.create(this.level());
 
         if (allay != null) {
@@ -561,48 +541,45 @@
             allay.setPersistenceRequired();
             allay.resetDuplicationCooldown();
             this.resetDuplicationCooldown();
-            this.level().addFreshEntity(allay);
+            this.level().addFreshEntity(allay, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DUPLICATION); // CraftBukkit - reason for duplicated allay
         }
-
+        return allay; // CraftBukkit
     }
 
-    private void resetDuplicationCooldown() {
+    public void resetDuplicationCooldown() {
         this.duplicationCooldown = 6000L;
         this.entityData.set(Allay.DATA_CAN_DUPLICATE, false);
     }
 
-    private boolean canDuplicate() {
+    public boolean canDuplicate() {
         return (Boolean) this.entityData.get(Allay.DATA_CAN_DUPLICATE);
     }
 
-    private void removeInteractionItem(Player player, ItemStack itemstack) {
+    private void removeInteractionItem(Player player, ItemStack stack) {
         if (!player.getAbilities().instabuild) {
-            itemstack.shrink(1);
+            stack.shrink(1);
         }
 
     }
 
     @Override
-    @Override
     public Vec3 getLeashOffset() {
         return new Vec3(0.0D, (double) this.getEyeHeight() * 0.6D, (double) this.getBbWidth() * 0.1D);
     }
 
     @Override
-    @Override
     protected float ridingOffset(Entity entity) {
         return 0.04F;
     }
 
     @Override
-    @Override
-    public void handleEntityEvent(byte b0) {
-        if (b0 == 18) {
+    public void handleEntityEvent(byte id) {
+        if (id == 18) {
             for (int i = 0; i < 3; ++i) {
                 this.spawnHeartParticle();
             }
         } else {
-            super.handleEntityEvent(b0);
+            super.handleEntityEvent(id);
         }
 
     }
@@ -616,39 +593,34 @@
     }
 
     @Override
-    @Override
     public VibrationSystem.Data getVibrationData() {
         return this.vibrationData;
     }
 
     @Override
-    @Override
     public VibrationSystem.User getVibrationUser() {
         return this.vibrationUser;
     }
 
-    private class VibrationUser implements VibrationSystem.User {
+    private class b implements VibrationSystem.User {
 
         private static final int VIBRATION_EVENT_LISTENER_RANGE = 16;
         private final PositionSource positionSource = new EntityPositionSource(Allay.this, Allay.this.getEyeHeight());
 
-        VibrationUser() {}
+        b() {}
 
         @Override
-        @Override
         public int getListenerRadius() {
             return 16;
         }
 
         @Override
-        @Override
         public PositionSource getPositionSource() {
             return this.positionSource;
         }
 
         @Override
-        @Override
-        public boolean canReceiveVibration(ServerLevel serverlevel, BlockPos blockpos, GameEvent gameevent, GameEvent.Context gameevent_context) {
+        public boolean canReceiveVibration(ServerLevel level, BlockPos pos, GameEvent gameEvent, GameEvent.Context context) {
             if (Allay.this.isNoAi()) {
                 return false;
             } else {
@@ -659,22 +631,20 @@
                 } else {
                     GlobalPos globalpos = (GlobalPos) optional.get();
 
-                    return globalpos.dimension().equals(serverlevel.dimension()) && globalpos.pos().equals(blockpos);
+                    return globalpos.dimension().equals(level.dimension()) && globalpos.pos().equals(pos);
                 }
             }
         }
 
         @Override
-        @Override
-        public void onReceiveVibration(ServerLevel serverlevel, BlockPos blockpos, GameEvent gameevent, @Nullable Entity entity, @Nullable Entity entity1, float f) {
-            if (gameevent == GameEvent.NOTE_BLOCK_PLAY) {
-                AllayAi.hearNoteblock(Allay.this, new BlockPos(blockpos));
+        public void onReceiveVibration(ServerLevel level, BlockPos pos, GameEvent gameEvent, @Nullable Entity entity, @Nullable Entity playerEntity, float distance) {
+            if (gameEvent == GameEvent.NOTE_BLOCK_PLAY) {
+                AllayAi.hearNoteblock(Allay.this, new BlockPos(pos));
             }
 
         }
 
         @Override
-        @Override
         public TagKey<GameEvent> getListenableEvents() {
             return GameEventTags.ALLAY_CAN_LISTEN;
         }
@@ -691,25 +661,22 @@
         }
 
         @Override
-        @Override
         public PositionSource getListenerSource() {
             return this.listenerSource;
         }
 
         @Override
-        @Override
         public int getListenerRadius() {
             return this.listenerRadius;
         }
 
         @Override
-        @Override
-        public boolean handleGameEvent(ServerLevel serverlevel, GameEvent gameevent, GameEvent.Context gameevent_context, Vec3 vec3) {
-            if (gameevent == GameEvent.JUKEBOX_PLAY) {
-                Allay.this.setJukeboxPlaying(BlockPos.containing(vec3), true);
+        public boolean handleGameEvent(ServerLevel level, GameEvent gameEvent, GameEvent.Context context, Vec3 pos) {
+            if (gameEvent == GameEvent.JUKEBOX_PLAY) {
+                Allay.this.setJukeboxPlaying(BlockPos.containing(pos), true);
                 return true;
-            } else if (gameevent == GameEvent.JUKEBOX_STOP_PLAY) {
-                Allay.this.setJukeboxPlaying(BlockPos.containing(vec3), false);
+            } else if (gameEvent == GameEvent.JUKEBOX_STOP_PLAY) {
+                Allay.this.setJukeboxPlaying(BlockPos.containing(pos), false);
                 return true;
             } else {
                 return false;
