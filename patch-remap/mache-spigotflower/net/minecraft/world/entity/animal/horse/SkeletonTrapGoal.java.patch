--- a/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
+++ b/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
@@ -5,10 +5,10 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LightningBolt;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.monster.Skeleton;
 import net.minecraft.world.item.ItemStack;
@@ -19,47 +19,45 @@
 
     private final SkeletonHorse horse;
 
-    public SkeletonTrapGoal(SkeletonHorse skeletonhorse) {
-        this.horse = skeletonhorse;
+    public SkeletonTrapGoal(SkeletonHorse horse) {
+        this.horse = horse;
     }
 
     @Override
-    @Override
     public boolean canUse() {
         return this.horse.level().hasNearbyAlivePlayer(this.horse.getX(), this.horse.getY(), this.horse.getZ(), 10.0D);
     }
 
     @Override
-    @Override
     public void tick() {
-        ServerLevel serverlevel = (ServerLevel) this.horse.level();
-        DifficultyInstance difficultyinstance = serverlevel.getCurrentDifficultyAt(this.horse.blockPosition());
+        ServerLevel worldserver = (ServerLevel) this.horse.level();
+        DifficultyInstance difficultydamagescaler = worldserver.getCurrentDifficultyAt(this.horse.blockPosition());
 
         this.horse.setTrap(false);
         this.horse.setTamed(true);
         this.horse.setAge(0);
-        LightningBolt lightningbolt = (LightningBolt) EntityType.LIGHTNING_BOLT.create(serverlevel);
+        LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(worldserver);
 
-        if (lightningbolt != null) {
-            lightningbolt.moveTo(this.horse.getX(), this.horse.getY(), this.horse.getZ());
-            lightningbolt.setVisualOnly(true);
-            serverlevel.addFreshEntity(lightningbolt);
-            Skeleton skeleton = this.createSkeleton(difficultyinstance, this.horse);
+        if (entitylightning != null) {
+            entitylightning.moveTo(this.horse.getX(), this.horse.getY(), this.horse.getZ());
+            entitylightning.setVisualOnly(true);
+            worldserver.strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.TRAP); // CraftBukkit
+            Skeleton entityskeleton = this.createSkeleton(difficultydamagescaler, this.horse);
 
-            if (skeleton != null) {
-                skeleton.startRiding(this.horse);
-                serverlevel.addFreshEntityWithPassengers(skeleton);
+            if (entityskeleton != null) {
+                entityskeleton.startRiding(this.horse);
+                worldserver.addFreshEntityWithPassengers(entityskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.TRAP); // CraftBukkit
 
                 for (int i = 0; i < 3; ++i) {
-                    AbstractHorse abstracthorse = this.createHorse(difficultyinstance);
+                    AbstractHorse entityhorseabstract = this.createHorse(difficultydamagescaler);
 
-                    if (abstracthorse != null) {
-                        Skeleton skeleton1 = this.createSkeleton(difficultyinstance, abstracthorse);
+                    if (entityhorseabstract != null) {
+                        Skeleton entityskeleton1 = this.createSkeleton(difficultydamagescaler, entityhorseabstract);
 
-                        if (skeleton1 != null) {
-                            skeleton1.startRiding(abstracthorse);
-                            abstracthorse.push(this.horse.getRandom().triangle(0.0D, 1.1485D), 0.0D, this.horse.getRandom().triangle(0.0D, 1.1485D));
-                            serverlevel.addFreshEntityWithPassengers(abstracthorse);
+                        if (entityskeleton1 != null) {
+                            entityskeleton1.startRiding(entityhorseabstract);
+                            entityhorseabstract.push(this.horse.getRandom().triangle(0.0D, 1.1485D), 0.0D, this.horse.getRandom().triangle(0.0D, 1.1485D));
+                            worldserver.addFreshEntityWithPassengers(entityhorseabstract, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.JOCKEY); // CraftBukkit
                         }
                     }
                 }
@@ -69,43 +67,43 @@
     }
 
     @Nullable
-    private AbstractHorse createHorse(DifficultyInstance difficultyinstance) {
-        SkeletonHorse skeletonhorse = (SkeletonHorse) EntityType.SKELETON_HORSE.create(this.horse.level());
+    private AbstractHorse createHorse(DifficultyInstance difficulty) {
+        SkeletonHorse entityhorseskeleton = (SkeletonHorse) EntityType.SKELETON_HORSE.create(this.horse.level());
 
-        if (skeletonhorse != null) {
-            skeletonhorse.finalizeSpawn((ServerLevel) this.horse.level(), difficultyinstance, MobSpawnType.TRIGGERED, (SpawnGroupData) null, (CompoundTag) null);
-            skeletonhorse.setPos(this.horse.getX(), this.horse.getY(), this.horse.getZ());
-            skeletonhorse.invulnerableTime = 60;
-            skeletonhorse.setPersistenceRequired();
-            skeletonhorse.setTamed(true);
-            skeletonhorse.setAge(0);
+        if (entityhorseskeleton != null) {
+            entityhorseskeleton.finalizeSpawn((ServerLevel) this.horse.level(), difficulty, EnumMobSpawn.TRIGGERED, (GroupDataEntity) null, (CompoundTag) null);
+            entityhorseskeleton.setPos(this.horse.getX(), this.horse.getY(), this.horse.getZ());
+            entityhorseskeleton.invulnerableTime = 60;
+            entityhorseskeleton.setPersistenceRequired();
+            entityhorseskeleton.setTamed(true);
+            entityhorseskeleton.setAge(0);
         }
 
-        return skeletonhorse;
+        return entityhorseskeleton;
     }
 
     @Nullable
-    private Skeleton createSkeleton(DifficultyInstance difficultyinstance, AbstractHorse abstracthorse) {
-        Skeleton skeleton = (Skeleton) EntityType.SKELETON.create(abstracthorse.level());
+    private Skeleton createSkeleton(DifficultyInstance difficulty, AbstractHorse horse) {
+        Skeleton entityskeleton = (Skeleton) EntityType.SKELETON.create(horse.level());
 
-        if (skeleton != null) {
-            skeleton.finalizeSpawn((ServerLevel) abstracthorse.level(), difficultyinstance, MobSpawnType.TRIGGERED, (SpawnGroupData) null, (CompoundTag) null);
-            skeleton.setPos(abstracthorse.getX(), abstracthorse.getY(), abstracthorse.getZ());
-            skeleton.invulnerableTime = 60;
-            skeleton.setPersistenceRequired();
-            if (skeleton.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
-                skeleton.setItemSlot(EquipmentSlot.HEAD, new ItemStack(Items.IRON_HELMET));
+        if (entityskeleton != null) {
+            entityskeleton.finalizeSpawn((ServerLevel) horse.level(), difficulty, EnumMobSpawn.TRIGGERED, (GroupDataEntity) null, (CompoundTag) null);
+            entityskeleton.setPos(horse.getX(), horse.getY(), horse.getZ());
+            entityskeleton.invulnerableTime = 60;
+            entityskeleton.setPersistenceRequired();
+            if (entityskeleton.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+                entityskeleton.setItemSlot(EquipmentSlot.HEAD, new ItemStack(Items.IRON_HELMET));
             }
 
-            skeleton.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(skeleton.getRandom(), this.disenchant(skeleton.getMainHandItem()), (int) (5.0F + difficultyinstance.getSpecialMultiplier() * (float) skeleton.getRandom().nextInt(18)), false));
-            skeleton.setItemSlot(EquipmentSlot.HEAD, EnchantmentHelper.enchantItem(skeleton.getRandom(), this.disenchant(skeleton.getItemBySlot(EquipmentSlot.HEAD)), (int) (5.0F + difficultyinstance.getSpecialMultiplier() * (float) skeleton.getRandom().nextInt(18)), false));
+            entityskeleton.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getMainHandItem()), (int) (5.0F + difficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false));
+            entityskeleton.setItemSlot(EquipmentSlot.HEAD, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getItemBySlot(EquipmentSlot.HEAD)), (int) (5.0F + difficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false));
         }
 
-        return skeleton;
+        return entityskeleton;
     }
 
-    private ItemStack disenchant(ItemStack itemstack) {
-        itemstack.removeTagKey("Enchantments");
-        return itemstack;
+    private ItemStack disenchant(ItemStack stack) {
+        stack.removeTagKey("Enchantments");
+        return stack;
     }
 }
