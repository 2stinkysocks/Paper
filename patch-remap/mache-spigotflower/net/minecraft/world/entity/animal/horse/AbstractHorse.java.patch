--- a/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -27,26 +27,26 @@
 import net.minecraft.world.Container;
 import net.minecraft.world.ContainerListener;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.HasCustomInventoryScreen;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.OwnableEntity;
 import net.minecraft.world.entity.PlayerRideableJumping;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.Saddleable;
 import net.minecraft.world.entity.SlotAccess;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -72,13 +72,18 @@
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.SoundType;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import org.joml.Vector3f;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+// CraftBukkit end
+
 public abstract class AbstractHorse extends Animal implements ContainerListener, HasCustomInventoryScreen, OwnableEntity, PlayerRideableJumping, Saddleable {
 
     public static final int EQUIPMENT_SLOT_OFFSET = 400;
@@ -105,8 +110,8 @@
     });
     private static final float BACKWARDS_MOVE_SPEED_FACTOR = 0.25F;
     private static final float SIDEWAYS_MOVE_SPEED_FACTOR = 0.5F;
-    private static final Predicate<LivingEntity> PARENT_HORSE_SELECTOR = (livingentity) -> {
-        return livingentity instanceof AbstractHorse && ((AbstractHorse) livingentity).isBred();
+    private static final Predicate<LivingEntity> PARENT_HORSE_SELECTOR = (entityliving) -> {
+        return entityliving instanceof AbstractHorse && ((AbstractHorse) entityliving).isBred();
     };
     private static final TargetingConditions MOMMY_TARGETING = TargetingConditions.forNonCombat().range(16.0D).ignoreLineOfSight().selector(AbstractHorse.PARENT_HORSE_SELECTOR);
     private static final Ingredient FOOD_ITEMS = Ingredient.of(Items.WHEAT, Items.SUGAR, Blocks.HAY_BLOCK.asItem(), Items.APPLE, Items.GOLDEN_CARROT, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE);
@@ -126,7 +131,7 @@
     public int tailCounter;
     public int sprintCounter;
     protected boolean isJumping;
-    protected SimpleContainer inventory;
+    public SimpleContainer inventory;
     protected int temper;
     protected float playerJumpPendingScale;
     protected boolean allowStandSliding;
@@ -140,15 +145,15 @@
     protected int gallopSoundCounter;
     @Nullable
     private UUID owner;
+    public int maxDomestication = 100; // CraftBukkit - store max domestication value
 
-    protected AbstractHorse(EntityType<? extends AbstractHorse> entitytype, Level level) {
-        super(entitytype, level);
+    protected AbstractHorse(EntityType<? extends AbstractHorse> entityType, Level level) {
+        super(entityType, level);
         this.setMaxUpStep(1.0F);
         this.createInventory();
     }
 
     @Override
-    @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.2D));
         this.goalSelector.addGoal(1, new RunAroundLikeCrazyGoal(this, 1.2D));
@@ -170,23 +175,22 @@
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(AbstractHorse.DATA_ID_FLAGS, (byte) 0);
     }
 
-    protected boolean getFlag(int i) {
-        return ((Byte) this.entityData.get(AbstractHorse.DATA_ID_FLAGS) & i) != 0;
+    protected boolean getFlag(int flagId) {
+        return ((Byte) this.entityData.get(AbstractHorse.DATA_ID_FLAGS) & flagId) != 0;
     }
 
-    protected void setFlag(int i, boolean flag) {
+    protected void setFlag(int flagId, boolean value) {
         byte b0 = (Byte) this.entityData.get(AbstractHorse.DATA_ID_FLAGS);
 
-        if (flag) {
-            this.entityData.set(AbstractHorse.DATA_ID_FLAGS, (byte) (b0 | i));
+        if (value) {
+            this.entityData.set(AbstractHorse.DATA_ID_FLAGS, (byte) (b0 | flagId));
         } else {
-            this.entityData.set(AbstractHorse.DATA_ID_FLAGS, (byte) (b0 & ~i));
+            this.entityData.set(AbstractHorse.DATA_ID_FLAGS, (byte) (b0 & ~flagId));
         }
 
     }
@@ -197,7 +201,6 @@
 
     @Nullable
     @Override
-    @Override
     public UUID getOwnerUUID() {
         return this.owner;
     }
@@ -210,18 +213,17 @@
         return this.isJumping;
     }
 
-    public void setTamed(boolean flag) {
-        this.setFlag(2, flag);
+    public void setTamed(boolean tamed) {
+        this.setFlag(2, tamed);
     }
 
-    public void setIsJumping(boolean flag) {
-        this.isJumping = flag;
+    public void setIsJumping(boolean jumping) {
+        this.isJumping = jumping;
     }
 
     @Override
-    @Override
-    protected void onLeashDistance(float f) {
-        if (f > 6.0F && this.isEating()) {
+    protected void onLeashDistance(float distance) {
+        if (distance > 6.0F && this.isEating()) {
             this.setEating(false);
         }
 
@@ -239,34 +241,31 @@
         return this.getFlag(8);
     }
 
-    public void setBred(boolean flag) {
-        this.setFlag(8, flag);
+    public void setBred(boolean breeding) {
+        this.setFlag(8, breeding);
     }
 
     @Override
-    @Override
     public boolean isSaddleable() {
         return this.isAlive() && !this.isBaby() && this.isTamed();
     }
 
     @Override
-    @Override
-    public void equipSaddle(@Nullable SoundSource soundsource) {
+    public void equipSaddle(@Nullable SoundSource source) {
         this.inventory.setItem(0, new ItemStack(Items.SADDLE));
     }
 
-    public void equipArmor(Player player, ItemStack itemstack) {
-        if (this.isArmor(itemstack)) {
-            this.inventory.setItem(1, itemstack.copyWithCount(1));
+    public void equipArmor(Player player, ItemStack armor) {
+        if (this.isArmor(armor)) {
+            this.inventory.setItem(1, armor.copyWithCount(1));
             if (!player.getAbilities().instabuild) {
-                itemstack.shrink(1);
+                armor.shrink(1);
             }
         }
 
     }
 
     @Override
-    @Override
     public boolean isSaddled() {
         return this.getFlag(4);
     }
@@ -275,19 +274,18 @@
         return this.temper;
     }
 
-    public void setTemper(int i) {
-        this.temper = i;
+    public void setTemper(int temper) {
+        this.temper = temper;
     }
 
-    public int modifyTemper(int i) {
-        int j = Mth.clamp(this.getTemper() + i, 0, this.getMaxTemper());
+    public int modifyTemper(int addedTemper) {
+        int j = Mth.clamp(this.getTemper() + addedTemper, 0, this.getMaxTemper());
 
         this.setTemper(j);
         return j;
     }
 
     @Override
-    @Override
     public boolean isPushable() {
         return !this.isVehicle();
     }
@@ -295,35 +293,34 @@
     private void eating() {
         this.openMouth();
         if (!this.isSilent()) {
-            SoundEvent soundevent = this.getEatingSound();
+            SoundEvent soundeffect = this.getEatingSound();
 
-            if (soundevent != null) {
-                this.level().playSound((Player) null, this.getX(), this.getY(), this.getZ(), soundevent, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+            if (soundeffect != null) {
+                this.level().playSound((Player) null, this.getX(), this.getY(), this.getZ(), soundeffect, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             }
         }
 
     }
 
     @Override
-    @Override
-    public boolean causeFallDamage(float f, float f1, DamageSource damagesource) {
-        if (f > 1.0F) {
+    public boolean causeFallDamage(float fallDistance, float multiplier, DamageSource source) {
+        if (fallDistance > 1.0F) {
             this.playSound(SoundEvents.HORSE_LAND, 0.4F, 1.0F);
         }
 
-        int i = this.calculateFallDamage(f, f1);
+        int i = this.calculateFallDamage(fallDistance, multiplier);
 
         if (i <= 0) {
             return false;
         } else {
-            this.hurt(damagesource, (float) i);
+            this.hurt(source, (float) i);
             if (this.isVehicle()) {
                 Iterator iterator = this.getIndirectPassengers().iterator();
 
                 while (iterator.hasNext()) {
                     Entity entity = (Entity) iterator.next();
 
-                    entity.hurt(damagesource, (float) i);
+                    entity.hurt(source, (float) i);
                 }
             }
 
@@ -333,25 +330,24 @@
     }
 
     @Override
-    @Override
-    protected int calculateFallDamage(float f, float f1) {
-        return Mth.ceil((f * 0.5F - 3.0F) * f1);
+    protected int calculateFallDamage(float distance, float damageMultiplier) {
+        return Mth.ceil((distance * 0.5F - 3.0F) * damageMultiplier);
     }
 
     protected int getInventorySize() {
         return 2;
     }
 
-    protected void createInventory() {
-        SimpleContainer simplecontainer = this.inventory;
+    public void createInventory() {
+        SimpleContainer inventorysubcontainer = this.inventory;
 
-        this.inventory = new SimpleContainer(this.getInventorySize());
-        if (simplecontainer != null) {
-            simplecontainer.removeListener(this);
-            int i = Math.min(simplecontainer.getContainerSize(), this.inventory.getContainerSize());
+        this.inventory = new SimpleContainer(this.getInventorySize(), (org.bukkit.entity.AbstractHorse) this.getBukkitEntity()); // CraftBukkit
+        if (inventorysubcontainer != null) {
+            inventorysubcontainer.removeListener(this);
+            int i = Math.min(inventorysubcontainer.getContainerSize(), this.inventory.getContainerSize());
 
             for (int j = 0; j < i; ++j) {
-                ItemStack itemstack = simplecontainer.getItem(j);
+                ItemStack itemstack = inventorysubcontainer.getItem(j);
 
                 if (!itemstack.isEmpty()) {
                     this.inventory.setItem(j, itemstack.copy());
@@ -370,8 +366,7 @@
     }
 
     @Override
-    @Override
-    public void containerChanged(Container container) {
+    public void containerChanged(Container invBasic) {
         boolean flag = this.isSaddled();
 
         this.updateContainerEquipment();
@@ -386,9 +381,8 @@
     }
 
     @Override
-    @Override
-    public boolean hurt(DamageSource damagesource, float f) {
-        boolean flag = super.hurt(damagesource, f);
+    public boolean hurt(DamageSource source, float amount) {
+        boolean flag = super.hurt(source, amount);
 
         if (flag && this.random.nextInt(3) == 0) {
             this.standIfPossible();
@@ -412,38 +406,37 @@
     }
 
     @Override
-    @Override
-    protected void playStepSound(BlockPos blockpos, BlockState blockstate) {
-        if (!blockstate.liquid()) {
-            BlockState blockstate1 = this.level().getBlockState(blockpos.above());
-            SoundType soundtype = blockstate.getSoundType();
+    protected void playStepSound(BlockPos pos, IBlockData block) {
+        if (!block.liquid()) {
+            IBlockData iblockdata1 = this.level().getBlockState(pos.above());
+            SoundType soundeffecttype = block.getSoundType();
 
-            if (blockstate1.is(Blocks.SNOW)) {
-                soundtype = blockstate1.getSoundType();
+            if (iblockdata1.is(Blocks.SNOW)) {
+                soundeffecttype = iblockdata1.getSoundType();
             }
 
             if (this.isVehicle() && this.canGallop) {
                 ++this.gallopSoundCounter;
                 if (this.gallopSoundCounter > 5 && this.gallopSoundCounter % 3 == 0) {
-                    this.playGallopSound(soundtype);
+                    this.playGallopSound(soundeffecttype);
                 } else if (this.gallopSoundCounter <= 5) {
-                    this.playSound(SoundEvents.HORSE_STEP_WOOD, soundtype.getVolume() * 0.15F, soundtype.getPitch());
+                    this.playSound(SoundEvents.HORSE_STEP_WOOD, soundeffecttype.getVolume() * 0.15F, soundeffecttype.getPitch());
                 }
-            } else if (this.isWoodSoundType(soundtype)) {
-                this.playSound(SoundEvents.HORSE_STEP_WOOD, soundtype.getVolume() * 0.15F, soundtype.getPitch());
+            } else if (this.isWoodSoundType(soundeffecttype)) {
+                this.playSound(SoundEvents.HORSE_STEP_WOOD, soundeffecttype.getVolume() * 0.15F, soundeffecttype.getPitch());
             } else {
-                this.playSound(SoundEvents.HORSE_STEP, soundtype.getVolume() * 0.15F, soundtype.getPitch());
+                this.playSound(SoundEvents.HORSE_STEP, soundeffecttype.getVolume() * 0.15F, soundeffecttype.getPitch());
             }
 
         }
     }
 
-    private boolean isWoodSoundType(SoundType soundtype) {
-        return soundtype == SoundType.WOOD || soundtype == SoundType.NETHER_WOOD || soundtype == SoundType.STEM || soundtype == SoundType.CHERRY_WOOD || soundtype == SoundType.BAMBOO_WOOD;
+    private boolean isWoodSoundType(SoundType soundType) {
+        return soundType == SoundType.WOOD || soundType == SoundType.NETHER_WOOD || soundType == SoundType.STEM || soundType == SoundType.CHERRY_WOOD || soundType == SoundType.BAMBOO_WOOD;
     }
 
-    protected void playGallopSound(SoundType soundtype) {
-        this.playSound(SoundEvents.HORSE_GALLOP, soundtype.getVolume() * 0.15F, soundtype.getPitch());
+    protected void playGallopSound(SoundType soundType) {
+        this.playSound(SoundEvents.HORSE_GALLOP, soundType.getVolume() * 0.15F, soundType.getPitch());
     }
 
     public static AttributeSupplier.Builder createBaseHorseAttributes() {
@@ -451,29 +444,25 @@
     }
 
     @Override
-    @Override
     public int getMaxSpawnClusterSize() {
         return 6;
     }
 
     public int getMaxTemper() {
-        return 100;
+        return this.maxDomestication; // CraftBukkit - return stored max domestication instead of 100
     }
 
     @Override
-    @Override
     protected float getSoundVolume() {
         return 0.8F;
     }
 
     @Override
-    @Override
     public int getAmbientSoundInterval() {
         return 400;
     }
 
     @Override
-    @Override
     public void openCustomInventoryScreen(Player player) {
         if (!this.level().isClientSide && (!this.isVehicle() || this.hasPassenger((Entity) player)) && this.isTamed()) {
             player.openHorseInventory(this, this.inventory);
@@ -481,38 +470,38 @@
 
     }
 
-    public InteractionResult fedFood(Player player, ItemStack itemstack) {
-        boolean flag = this.handleEating(player, itemstack);
+    public InteractionResult fedFood(Player player, ItemStack stack) {
+        boolean flag = this.handleEating(player, stack);
 
         if (flag & !player.getAbilities().instabuild) {
-            itemstack.shrink(1);
+            stack.shrink(1);
         }
 
         return this.level().isClientSide ? InteractionResult.CONSUME : (flag ? InteractionResult.SUCCESS : InteractionResult.PASS);
     }
 
-    protected boolean handleEating(Player player, ItemStack itemstack) {
+    protected boolean handleEating(Player player, ItemStack stack) {
         boolean flag = false;
         float f = 0.0F;
         short short0 = 0;
         byte b0 = 0;
 
-        if (itemstack.is(Items.WHEAT)) {
+        if (stack.is(Items.WHEAT)) {
             f = 2.0F;
             short0 = 20;
             b0 = 3;
-        } else if (itemstack.is(Items.SUGAR)) {
+        } else if (stack.is(Items.SUGAR)) {
             f = 1.0F;
             short0 = 30;
             b0 = 3;
-        } else if (itemstack.is(Blocks.HAY_BLOCK.asItem())) {
+        } else if (stack.is(Blocks.HAY_BLOCK.asItem())) {
             f = 20.0F;
             short0 = 180;
-        } else if (itemstack.is(Items.APPLE)) {
+        } else if (stack.is(Items.APPLE)) {
             f = 3.0F;
             short0 = 60;
             b0 = 3;
-        } else if (itemstack.is(Items.GOLDEN_CARROT)) {
+        } else if (stack.is(Items.GOLDEN_CARROT)) {
             f = 4.0F;
             short0 = 60;
             b0 = 5;
@@ -520,7 +509,7 @@
                 flag = true;
                 this.setInLove(player);
             }
-        } else if (itemstack.is(Items.GOLDEN_APPLE) || itemstack.is(Items.ENCHANTED_GOLDEN_APPLE)) {
+        } else if (stack.is(Items.GOLDEN_APPLE) || stack.is(Items.ENCHANTED_GOLDEN_APPLE)) {
             f = 10.0F;
             short0 = 240;
             b0 = 10;
@@ -531,7 +520,7 @@
         }
 
         if (this.getHealth() < this.getMaxHealth() && f > 0.0F) {
-            this.heal(f);
+            this.heal(f, EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
             flag = true;
         }
 
@@ -568,15 +557,13 @@
     }
 
     @Override
-    @Override
     public boolean isImmobile() {
         return super.isImmobile() && this.isVehicle() && this.isSaddled() || this.isEating() || this.isStanding();
     }
 
     @Override
-    @Override
-    public boolean isFood(ItemStack itemstack) {
-        return AbstractHorse.FOOD_ITEMS.test(itemstack);
+    public boolean isFood(ItemStack stack) {
+        return AbstractHorse.FOOD_ITEMS.test(stack);
     }
 
     private void moveTail() {
@@ -584,7 +571,6 @@
     }
 
     @Override
-    @Override
     protected void dropEquipment() {
         super.dropEquipment();
         if (this.inventory != null) {
@@ -600,7 +586,6 @@
     }
 
     @Override
-    @Override
     public void aiStep() {
         if (this.random.nextInt(200) == 0) {
             this.moveTail();
@@ -609,7 +594,7 @@
         super.aiStep();
         if (!this.level().isClientSide && this.isAlive()) {
             if (this.random.nextInt(900) == 0 && this.deathTime == 0) {
-                this.heal(1.0F);
+                this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
             }
 
             if (this.canEatGrass()) {
@@ -629,10 +614,10 @@
 
     protected void followMommy() {
         if (this.isBred() && this.isBaby() && !this.isEating()) {
-            LivingEntity livingentity = this.level().getNearestEntity(AbstractHorse.class, AbstractHorse.MOMMY_TARGETING, this, this.getX(), this.getY(), this.getZ(), this.getBoundingBox().inflate(16.0D));
+            LivingEntity entityliving = this.level().getNearestEntity(AbstractHorse.class, AbstractHorse.MOMMY_TARGETING, this, this.getX(), this.getY(), this.getZ(), this.getBoundingBox().inflate(16.0D));
 
-            if (livingentity != null && this.distanceToSqr((Entity) livingentity) > 4.0D) {
-                this.navigation.createPath((Entity) livingentity, 0);
+            if (entityliving != null && this.distanceToSqr((Entity) entityliving) > 4.0D) {
+                this.navigation.createPath((Entity) entityliving, 0);
             }
         }
 
@@ -643,7 +628,6 @@
     }
 
     @Override
-    @Override
     public void tick() {
         super.tick();
         if (this.mouthCounter > 0 && ++this.mouthCounter > 30) {
@@ -712,20 +696,19 @@
     }
 
     @Override
-    @Override
-    public InteractionResult mobInteract(Player player, InteractionHand interactionhand) {
+    public InteractionResult mobInteract(Player player, EnumHand hand) {
         if (!this.isVehicle() && !this.isBaby()) {
             if (this.isTamed() && player.isSecondaryUseActive()) {
                 this.openCustomInventoryScreen(player);
                 return InteractionResult.sidedSuccess(this.level().isClientSide);
             } else {
-                ItemStack itemstack = player.getItemInHand(interactionhand);
+                ItemStack itemstack = player.getItemInHand(hand);
 
                 if (!itemstack.isEmpty()) {
-                    InteractionResult interactionresult = itemstack.interactLivingEntity(player, this, interactionhand);
+                    InteractionResult enuminteractionresult = itemstack.interactLivingEntity(player, this, hand);
 
-                    if (interactionresult.consumesAction()) {
-                        return interactionresult;
+                    if (enuminteractionresult.consumesAction()) {
+                        return enuminteractionresult;
                     }
 
                     if (this.canWearArmor() && this.isArmor(itemstack) && !this.isWearingArmor()) {
@@ -738,7 +721,7 @@
                 return InteractionResult.sidedSuccess(this.level().isClientSide);
             }
         } else {
-            return super.mobInteract(player, interactionhand);
+            return super.mobInteract(player, hand);
         }
     }
 
@@ -750,16 +733,16 @@
 
     }
 
-    public void setEating(boolean flag) {
-        this.setFlag(16, flag);
+    public void setEating(boolean eating) {
+        this.setFlag(16, eating);
     }
 
-    public void setStanding(boolean flag) {
-        if (flag) {
+    public void setStanding(boolean standing) {
+        if (standing) {
             this.setEating(false);
         }
 
-        this.setFlag(32, flag);
+        this.setFlag(32, standing);
     }
 
     @Nullable
@@ -778,10 +761,10 @@
     public void makeMad() {
         if (!this.isStanding()) {
             this.standIfPossible();
-            SoundEvent soundevent = this.getAngrySound();
+            SoundEvent soundeffect = this.getAngrySound();
 
-            if (soundevent != null) {
-                this.playSound(soundevent, this.getSoundVolume(), this.getVoicePitch());
+            if (soundeffect != null) {
+                this.playSound(soundeffect, this.getSoundVolume(), this.getVoicePitch());
             }
         }
 
@@ -799,22 +782,21 @@
     }
 
     @Override
-    @Override
-    protected void tickRidden(Player player, Vec3 vec3) {
-        super.tickRidden(player, vec3);
-        Vec2 vec2 = this.getRiddenRotation(player);
+    protected void tickRidden(Player player, Vec3 travelVector) {
+        super.tickRidden(player, travelVector);
+        Vec2 vec2f = this.getRiddenRotation(player);
 
-        this.setRot(vec2.y, vec2.x);
+        this.setRot(vec2f.y, vec2f.x);
         this.yRotO = this.yBodyRot = this.yHeadRot = this.getYRot();
         if (this.isControlledByLocalInstance()) {
-            if (vec3.z <= 0.0D) {
+            if (travelVector.z <= 0.0D) {
                 this.gallopSoundCounter = 0;
             }
 
             if (this.onGround()) {
                 this.setIsJumping(false);
                 if (this.playerJumpPendingScale > 0.0F && !this.isJumping()) {
-                    this.executeRidersJump(this.playerJumpPendingScale, vec3);
+                    this.executeRidersJump(this.playerJumpPendingScale, travelVector);
                 }
 
                 this.playerJumpPendingScale = 0.0F;
@@ -823,13 +805,12 @@
 
     }
 
-    protected Vec2 getRiddenRotation(LivingEntity livingentity) {
-        return new Vec2(livingentity.getXRot() * 0.5F, livingentity.getYRot());
+    protected Vec2 getRiddenRotation(LivingEntity entity) {
+        return new Vec2(entity.getXRot() * 0.5F, entity.getYRot());
     }
 
     @Override
-    @Override
-    protected Vec3 getRiddenInput(Player player, Vec3 vec3) {
+    protected Vec3 getRiddenInput(Player player, Vec3 travelVector) {
         if (this.onGround() && this.playerJumpPendingScale == 0.0F && this.isStanding() && !this.allowStandSliding) {
             return Vec3.ZERO;
         } else {
@@ -845,24 +826,23 @@
     }
 
     @Override
-    @Override
     protected float getRiddenSpeed(Player player) {
         return (float) this.getAttributeValue(Attributes.MOVEMENT_SPEED);
     }
 
-    protected void executeRidersJump(float f, Vec3 vec3) {
-        double d0 = this.getCustomJump() * (double) f * (double) this.getBlockJumpFactor();
+    protected void executeRidersJump(float playerJumpPendingScale, Vec3 travelVector) {
+        double d0 = this.getCustomJump() * (double) playerJumpPendingScale * (double) this.getBlockJumpFactor();
         double d1 = d0 + (double) this.getJumpBoostPower();
-        Vec3 vec31 = this.getDeltaMovement();
+        Vec3 vec3d1 = this.getDeltaMovement();
 
-        this.setDeltaMovement(vec31.x, d1, vec31.z);
+        this.setDeltaMovement(vec3d1.x, d1, vec3d1.z);
         this.setIsJumping(true);
         this.hasImpulse = true;
-        if (vec3.z > 0.0D) {
+        if (travelVector.z > 0.0D) {
             float f1 = Mth.sin(this.getYRot() * 0.017453292F);
             float f2 = Mth.cos(this.getYRot() * 0.017453292F);
 
-            this.setDeltaMovement(this.getDeltaMovement().add((double) (-0.4F * f1 * f), 0.0D, (double) (0.4F * f2 * f)));
+            this.setDeltaMovement(this.getDeltaMovement().add((double) (-0.4F * f1 * playerJumpPendingScale), 0.0D, (double) (0.4F * f2 * playerJumpPendingScale)));
         }
 
     }
@@ -872,37 +852,36 @@
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putBoolean("EatingHaystack", this.isEating());
-        compoundtag.putBoolean("Bred", this.isBred());
-        compoundtag.putInt("Temper", this.getTemper());
-        compoundtag.putBoolean("Tame", this.isTamed());
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putBoolean("EatingHaystack", this.isEating());
+        compound.putBoolean("Bred", this.isBred());
+        compound.putInt("Temper", this.getTemper());
+        compound.putBoolean("Tame", this.isTamed());
         if (this.getOwnerUUID() != null) {
-            compoundtag.putUUID("Owner", this.getOwnerUUID());
+            compound.putUUID("Owner", this.getOwnerUUID());
         }
+        compound.putInt("Bukkit.MaxDomestication", this.maxDomestication); // CraftBukkit
 
         if (!this.inventory.getItem(0).isEmpty()) {
-            compoundtag.put("SaddleItem", this.inventory.getItem(0).save(new CompoundTag()));
+            compound.put("SaddleItem", this.inventory.getItem(0).save(new CompoundTag()));
         }
 
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.setEating(compoundtag.getBoolean("EatingHaystack"));
-        this.setBred(compoundtag.getBoolean("Bred"));
-        this.setTemper(compoundtag.getInt("Temper"));
-        this.setTamed(compoundtag.getBoolean("Tame"));
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.setEating(compound.getBoolean("EatingHaystack"));
+        this.setBred(compound.getBoolean("Bred"));
+        this.setTemper(compound.getInt("Temper"));
+        this.setTamed(compound.getBoolean("Tame"));
         UUID uuid;
 
-        if (compoundtag.hasUUID("Owner")) {
-            uuid = compoundtag.getUUID("Owner");
+        if (compound.hasUUID("Owner")) {
+            uuid = compound.getUUID("Owner");
         } else {
-            String s = compoundtag.getString("Owner");
+            String s = compound.getString("Owner");
 
             uuid = OldUsersConverter.convertMobOwnerIfNecessary(this.getServer(), s);
         }
@@ -910,9 +889,14 @@
         if (uuid != null) {
             this.setOwnerUUID(uuid);
         }
+        // CraftBukkit start
+        if (compound.contains("Bukkit.MaxDomestication")) {
+            this.maxDomestication = compound.getInt("Bukkit.MaxDomestication");
+        }
+        // CraftBukkit end
 
-        if (compoundtag.contains("SaddleItem", 10)) {
-            ItemStack itemstack = ItemStack.of(compoundtag.getCompound("SaddleItem"));
+        if (compound.contains("SaddleItem", 10)) {
+            ItemStack itemstack = ItemStack.of(compound.getCompound("SaddleItem"));
 
             if (itemstack.is(Items.SADDLE)) {
                 this.inventory.setItem(0, itemstack);
@@ -923,8 +907,7 @@
     }
 
     @Override
-    @Override
-    public boolean canMate(Animal animal) {
+    public boolean canMate(Animal otherAnimal) {
         return false;
     }
 
@@ -934,156 +917,158 @@
 
     @Nullable
     @Override
-    @Override
-    public AgeableMob getBreedOffspring(ServerLevel serverlevel, AgeableMob ageablemob) {
+    public AgeableMob getBreedOffspring(ServerLevel level, AgeableMob otherParent) {
         return null;
     }
 
-    protected void setOffspringAttributes(AgeableMob ageablemob, AbstractHorse abstracthorse) {
-        this.setOffspringAttribute(ageablemob, abstracthorse, Attributes.MAX_HEALTH, (double) AbstractHorse.MIN_HEALTH, (double) AbstractHorse.MAX_HEALTH);
-        this.setOffspringAttribute(ageablemob, abstracthorse, Attributes.JUMP_STRENGTH, (double) AbstractHorse.MIN_JUMP_STRENGTH, (double) AbstractHorse.MAX_JUMP_STRENGTH);
-        this.setOffspringAttribute(ageablemob, abstracthorse, Attributes.MOVEMENT_SPEED, (double) AbstractHorse.MIN_MOVEMENT_SPEED, (double) AbstractHorse.MAX_MOVEMENT_SPEED);
+    protected void setOffspringAttributes(AgeableMob parent, AbstractHorse child) {
+        this.setOffspringAttribute(parent, child, Attributes.MAX_HEALTH, (double) AbstractHorse.MIN_HEALTH, (double) AbstractHorse.MAX_HEALTH);
+        this.setOffspringAttribute(parent, child, Attributes.JUMP_STRENGTH, (double) AbstractHorse.MIN_JUMP_STRENGTH, (double) AbstractHorse.MAX_JUMP_STRENGTH);
+        this.setOffspringAttribute(parent, child, Attributes.MOVEMENT_SPEED, (double) AbstractHorse.MIN_MOVEMENT_SPEED, (double) AbstractHorse.MAX_MOVEMENT_SPEED);
     }
 
-    private void setOffspringAttribute(AgeableMob ageablemob, AbstractHorse abstracthorse, Attribute attribute, double d0, double d1) {
-        double d2 = createOffspringAttribute(this.getAttributeBaseValue(attribute), ageablemob.getAttributeBaseValue(attribute), d0, d1, this.random);
+    private void setOffspringAttribute(AgeableMob otherParent, AbstractHorse child, Attribute attribute, double min, double d1) {
+        double d2 = createOffspringAttribute(this.getAttributeBaseValue(attribute), otherParent.getAttributeBaseValue(attribute), min, d1, this.random);
 
-        abstracthorse.getAttribute(attribute).setBaseValue(d2);
+        child.getAttribute(attribute).setBaseValue(d2);
     }
 
-    static double createOffspringAttribute(double d0, double d1, double d2, double d3, RandomSource randomsource) {
-        if (d3 <= d2) {
+    static double createOffspringAttribute(double value1, double d1, double value2, double d3, RandomSource min) {
+        if (d3 <= value2) {
             throw new IllegalArgumentException("Incorrect range for an attribute");
         } else {
-            d0 = Mth.clamp(d0, d2, d3);
-            d1 = Mth.clamp(d1, d2, d3);
-            double d4 = 0.15D * (d3 - d2);
-            double d5 = Math.abs(d0 - d1) + d4 * 2.0D;
-            double d6 = (d0 + d1) / 2.0D;
-            double d7 = (randomsource.nextDouble() + randomsource.nextDouble() + randomsource.nextDouble()) / 3.0D - 0.5D;
+            value1 = Mth.clamp(value1, value2, d3);
+            d1 = Mth.clamp(d1, value2, d3);
+            double d4 = 0.15D * (d3 - value2);
+            double d5 = Math.abs(value1 - d1) + d4 * 2.0D;
+            double d6 = (value1 + d1) / 2.0D;
+            double d7 = (min.nextDouble() + min.nextDouble() + min.nextDouble()) / 3.0D - 0.5D;
             double d8 = d6 + d5 * d7;
             double d9;
 
             if (d8 > d3) {
                 d9 = d8 - d3;
                 return d3 - d9;
-            } else if (d8 < d2) {
-                d9 = d2 - d8;
-                return d2 + d9;
+            } else if (d8 < value2) {
+                d9 = value2 - d8;
+                return value2 + d9;
             } else {
                 return d8;
             }
         }
     }
 
-    public float getEatAnim(float f) {
-        return Mth.lerp(f, this.eatAnimO, this.eatAnim);
+    public float getEatAnim(float partialTick) {
+        return Mth.lerp(partialTick, this.eatAnimO, this.eatAnim);
     }
 
-    public float getStandAnim(float f) {
-        return Mth.lerp(f, this.standAnimO, this.standAnim);
+    public float getStandAnim(float partialTick) {
+        return Mth.lerp(partialTick, this.standAnimO, this.standAnim);
     }
 
-    public float getMouthAnim(float f) {
-        return Mth.lerp(f, this.mouthAnimO, this.mouthAnim);
+    public float getMouthAnim(float partialTick) {
+        return Mth.lerp(partialTick, this.mouthAnimO, this.mouthAnim);
     }
 
     @Override
-    @Override
-    public void onPlayerJump(int i) {
+    public void onPlayerJump(int jumpPower) {
         if (this.isSaddled()) {
-            if (i < 0) {
-                i = 0;
+            if (jumpPower < 0) {
+                jumpPower = 0;
             } else {
                 this.allowStandSliding = true;
                 this.standIfPossible();
             }
 
-            if (i >= 90) {
+            if (jumpPower >= 90) {
                 this.playerJumpPendingScale = 1.0F;
             } else {
-                this.playerJumpPendingScale = 0.4F + 0.4F * (float) i / 90.0F;
+                this.playerJumpPendingScale = 0.4F + 0.4F * (float) jumpPower / 90.0F;
             }
 
         }
     }
 
     @Override
-    @Override
     public boolean canJump() {
         return this.isSaddled();
     }
 
     @Override
-    @Override
-    public void handleStartJump(int i) {
+    public void handleStartJump(int jumpPower) {
+        // CraftBukkit start
+        float power;
+        if (jumpPower >= 90) {
+            power = 1.0F;
+        } else {
+            power = 0.4F + 0.4F * (float) jumpPower / 90.0F;
+        }
+        if (!CraftEventFactory.callHorseJumpEvent(this, power)) {
+            return;
+        }
+        // CraftBukkit end
         this.allowStandSliding = true;
         this.standIfPossible();
         this.playJumpSound();
     }
 
     @Override
-    @Override
     public void handleStopJump() {}
 
-    protected void spawnTamingParticles(boolean flag) {
-        SimpleParticleType simpleparticletype = flag ? ParticleTypes.HEART : ParticleTypes.SMOKE;
+    protected void spawnTamingParticles(boolean tamed) {
+        SimpleParticleType particletype = tamed ? ParticleTypes.HEART : ParticleTypes.SMOKE;
 
         for (int i = 0; i < 7; ++i) {
             double d0 = this.random.nextGaussian() * 0.02D;
             double d1 = this.random.nextGaussian() * 0.02D;
             double d2 = this.random.nextGaussian() * 0.02D;
 
-            this.level().addParticle(simpleparticletype, this.getRandomX(1.0D), this.getRandomY() + 0.5D, this.getRandomZ(1.0D), d0, d1, d2);
+            this.level().addParticle(particletype, this.getRandomX(1.0D), this.getRandomY() + 0.5D, this.getRandomZ(1.0D), d0, d1, d2);
         }
 
     }
 
     @Override
-    @Override
-    public void handleEntityEvent(byte b0) {
-        if (b0 == 7) {
+    public void handleEntityEvent(byte id) {
+        if (id == 7) {
             this.spawnTamingParticles(true);
-        } else if (b0 == 6) {
+        } else if (id == 6) {
             this.spawnTamingParticles(false);
         } else {
-            super.handleEntityEvent(b0);
+            super.handleEntityEvent(id);
         }
 
     }
 
     @Override
-    @Override
-    protected void positionRider(Entity entity, Entity.MoveFunction entity_movefunction) {
-        super.positionRider(entity, entity_movefunction);
-        if (entity instanceof LivingEntity) {
-            ((LivingEntity) entity).yBodyRot = this.yBodyRot;
+    protected void positionRider(Entity passenger, Entity.MoveFunction callback) {
+        super.positionRider(passenger, callback);
+        if (passenger instanceof LivingEntity) {
+            ((LivingEntity) passenger).yBodyRot = this.yBodyRot;
         }
 
     }
 
-    protected static float generateMaxHealth(IntUnaryOperator intunaryoperator) {
-        return 15.0F + (float) intunaryoperator.applyAsInt(8) + (float) intunaryoperator.applyAsInt(9);
+    protected static float generateMaxHealth(IntUnaryOperator operator) {
+        return 15.0F + (float) operator.applyAsInt(8) + (float) operator.applyAsInt(9);
     }
 
-    protected static double generateJumpStrength(DoubleSupplier doublesupplier) {
-        return 0.4000000059604645D + doublesupplier.getAsDouble() * 0.2D + doublesupplier.getAsDouble() * 0.2D + doublesupplier.getAsDouble() * 0.2D;
+    protected static double generateJumpStrength(DoubleSupplier supplier) {
+        return 0.4000000059604645D + supplier.getAsDouble() * 0.2D + supplier.getAsDouble() * 0.2D + supplier.getAsDouble() * 0.2D;
     }
 
-    protected static double generateSpeed(DoubleSupplier doublesupplier) {
-        return (0.44999998807907104D + doublesupplier.getAsDouble() * 0.3D + doublesupplier.getAsDouble() * 0.3D + doublesupplier.getAsDouble() * 0.3D) * 0.25D;
+    protected static double generateSpeed(DoubleSupplier supplier) {
+        return (0.44999998807907104D + supplier.getAsDouble() * 0.3D + supplier.getAsDouble() * 0.3D + supplier.getAsDouble() * 0.3D) * 0.25D;
     }
 
     @Override
-    @Override
     public boolean onClimbable() {
         return false;
     }
 
     @Override
-    @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions entitydimensions) {
-        return entitydimensions.height * 0.95F;
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions size) {
+        return size.height * 0.95F;
     }
 
     public boolean canWearArmor() {
@@ -1094,25 +1079,23 @@
         return !this.getItemBySlot(EquipmentSlot.CHEST).isEmpty();
     }
 
-    public boolean isArmor(ItemStack itemstack) {
+    public boolean isArmor(ItemStack stack) {
         return false;
     }
 
-    private SlotAccess createEquipmentSlotAccess(final int i, final Predicate<ItemStack> predicate) {
+    private SlotAccess createEquipmentSlotAccess(final int slot, final Predicate<ItemStack> stackFilter) {
         return new SlotAccess() {
             @Override
-            @Override
             public ItemStack get() {
-                return AbstractHorse.this.inventory.getItem(i);
+                return AbstractHorse.this.inventory.getItem(slot);
             }
 
             @Override
-            @Override
-            public boolean set(ItemStack itemstack) {
-                if (!predicate.test(itemstack)) {
+            public boolean set(ItemStack carried) {
+                if (!stackFilter.test(carried)) {
                     return false;
                 } else {
-                    AbstractHorse.this.inventory.setItem(i, itemstack);
+                    AbstractHorse.this.inventory.setItem(slot, carried);
                     AbstractHorse.this.updateContainerEquipment();
                     return true;
                 }
@@ -1121,9 +1104,8 @@
     }
 
     @Override
-    @Override
-    public SlotAccess getSlot(int i) {
-        int j = i - 400;
+    public SlotAccess getSlot(int slot) {
+        int j = slot - 400;
 
         if (j >= 0 && j < 2 && j < this.inventory.getContainerSize()) {
             if (j == 0) {
@@ -1143,22 +1125,21 @@
             }
         }
 
-        int k = i - 500 + 2;
+        int k = slot - 500 + 2;
 
-        return k >= 2 && k < this.inventory.getContainerSize() ? SlotAccess.forContainer(this.inventory, k) : super.getSlot(i);
+        return k >= 2 && k < this.inventory.getContainerSize() ? SlotAccess.forContainer(this.inventory, k) : super.getSlot(slot);
     }
 
     @Nullable
     @Override
-    @Override
     public LivingEntity getControllingPassenger() {
         if (this.isSaddled()) {
             Entity entity = this.getFirstPassenger();
 
             if (entity instanceof Player) {
-                Player player = (Player) entity;
+                Player entityhuman = (Player) entity;
 
-                return player;
+                return entityhuman;
             }
         }
 
@@ -1166,38 +1147,38 @@
     }
 
     @Nullable
-    private Vec3 getDismountLocationInDirection(Vec3 vec3, LivingEntity livingentity) {
-        double d0 = this.getX() + vec3.x;
+    private Vec3 getDismountLocationInDirection(Vec3 direction, LivingEntity passenger) {
+        double d0 = this.getX() + direction.x;
         double d1 = this.getBoundingBox().minY;
-        double d2 = this.getZ() + vec3.z;
-        BlockPos.MutableBlockPos blockpos_mutableblockpos = new BlockPos.MutableBlockPos();
-        UnmodifiableIterator unmodifiableiterator = livingentity.getDismountPoses().iterator();
+        double d2 = this.getZ() + direction.z;
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
+        UnmodifiableIterator unmodifiableiterator = passenger.getDismountPoses().iterator();
 
         while (unmodifiableiterator.hasNext()) {
-            Pose pose = (Pose) unmodifiableiterator.next();
+            EntityPose entitypose = (EntityPose) unmodifiableiterator.next();
 
-            blockpos_mutableblockpos.set(d0, d1, d2);
+            blockposition_mutableblockposition.set(d0, d1, d2);
             double d3 = this.getBoundingBox().maxY + 0.75D;
 
             while (true) {
-                double d4 = this.level().getBlockFloorHeight(blockpos_mutableblockpos);
+                double d4 = this.level().getBlockFloorHeight(blockposition_mutableblockposition);
 
-                if ((double) blockpos_mutableblockpos.getY() + d4 > d3) {
+                if ((double) blockposition_mutableblockposition.getY() + d4 > d3) {
                     break;
                 }
 
                 if (DismountHelper.isBlockFloorValid(d4)) {
-                    AABB aabb = livingentity.getLocalBoundsForPose(pose);
-                    Vec3 vec31 = new Vec3(d0, (double) blockpos_mutableblockpos.getY() + d4, d2);
+                    AABB axisalignedbb = passenger.getLocalBoundsForPose(entitypose);
+                    Vec3 vec3d1 = new Vec3(d0, (double) blockposition_mutableblockposition.getY() + d4, d2);
 
-                    if (DismountHelper.canDismountTo(this.level(), livingentity, aabb.move(vec31))) {
-                        livingentity.setPose(pose);
-                        return vec31;
+                    if (DismountHelper.canDismountTo(this.level(), passenger, axisalignedbb.move(vec3d1))) {
+                        passenger.setPose(entitypose);
+                        return vec3d1;
                     }
                 }
 
-                blockpos_mutableblockpos.move(Direction.UP);
-                if ((double) blockpos_mutableblockpos.getY() >= d3) {
+                blockposition_mutableblockposition.move(Direction.UP);
+                if ((double) blockposition_mutableblockposition.getY() >= d3) {
                     break;
                 }
             }
@@ -1207,37 +1188,35 @@
     }
 
     @Override
-    @Override
-    public Vec3 getDismountLocationForPassenger(LivingEntity livingentity) {
-        Vec3 vec3 = getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) livingentity.getBbWidth(), this.getYRot() + (livingentity.getMainArm() == HumanoidArm.RIGHT ? 90.0F : -90.0F));
-        Vec3 vec31 = this.getDismountLocationInDirection(vec3, livingentity);
+    public Vec3 getDismountLocationForPassenger(LivingEntity livingEntity) {
+        Vec3 vec3d = getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) livingEntity.getBbWidth(), this.getYRot() + (livingEntity.getMainArm() == HumanoidArm.RIGHT ? 90.0F : -90.0F));
+        Vec3 vec3d1 = this.getDismountLocationInDirection(vec3d, livingEntity);
 
-        if (vec31 != null) {
-            return vec31;
+        if (vec3d1 != null) {
+            return vec3d1;
         } else {
-            Vec3 vec32 = getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) livingentity.getBbWidth(), this.getYRot() + (livingentity.getMainArm() == HumanoidArm.LEFT ? 90.0F : -90.0F));
-            Vec3 vec33 = this.getDismountLocationInDirection(vec32, livingentity);
+            Vec3 vec3d2 = getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) livingEntity.getBbWidth(), this.getYRot() + (livingEntity.getMainArm() == HumanoidArm.LEFT ? 90.0F : -90.0F));
+            Vec3 vec3d3 = this.getDismountLocationInDirection(vec3d2, livingEntity);
 
-            return vec33 != null ? vec33 : this.position();
+            return vec3d3 != null ? vec3d3 : this.position();
         }
     }
 
-    protected void randomizeAttributes(RandomSource randomsource) {}
+    protected void randomizeAttributes(RandomSource random) {}
 
     @Nullable
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
-        if (spawngroupdata == null) {
-            spawngroupdata = new AgeableMob.AgeableMobGroupData(0.2F);
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
+        if (spawnData == null) {
+            spawnData = new AgeableMob.AgeableMobGroupData(0.2F);
         }
 
-        this.randomizeAttributes(serverlevelaccessor.getRandom());
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, (SpawnGroupData) spawngroupdata, compoundtag);
+        this.randomizeAttributes(level.getRandom());
+        return super.finalizeSpawn(level, difficulty, reason, (GroupDataEntity) spawnData, dataTag);
     }
 
-    public boolean hasInventoryChanged(Container container) {
-        return this.inventory != container;
+    public boolean hasInventoryChanged(Container inventory) {
+        return this.inventory != inventory;
     }
 
     public int getAmbientStandInterval() {
@@ -1245,12 +1224,11 @@
     }
 
     @Override
-    @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitydimensions, float f) {
-        return new Vector3f(0.0F, this.getPassengersRidingOffsetY(entitydimensions, f) + 0.15F * this.standAnimO * f, -0.7F * this.standAnimO * f);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, this.getPassengersRidingOffsetY(entitysize, f) + 0.15F * this.standAnimO * f, -0.7F * this.standAnimO * f);
     }
 
-    protected float getPassengersRidingOffsetY(EntityDimensions entitydimensions, float f) {
-        return entitydimensions.height + (this.isBaby() ? 0.125F : -0.15625F) * f;
+    protected float getPassengersRidingOffsetY(EntityDimensions entitysize, float f) {
+        return entitysize.height + (this.isBaby() ? 0.125F : -0.15625F) * f;
     }
 }
