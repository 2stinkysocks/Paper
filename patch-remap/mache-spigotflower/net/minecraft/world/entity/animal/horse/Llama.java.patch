--- a/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/net/minecraft/world/entity/animal/horse/Llama.java
@@ -25,10 +25,10 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.VariantHolder;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -59,7 +59,7 @@
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.WoolCarpetBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.Vec3;
 import org.joml.Vector3f;
 
@@ -76,22 +76,27 @@
     @Nullable
     private Llama caravanTail;
 
-    public Llama(EntityType<? extends Llama> entitytype, Level level) {
-        super(entitytype, level);
+    public Llama(EntityType<? extends Llama> entityType, Level level) {
+        super(entityType, level);
     }
 
     public boolean isTraderLlama() {
         return false;
     }
 
-    private void setStrength(int i) {
-        this.entityData.set(Llama.DATA_STRENGTH_ID, Math.max(1, Math.min(5, i)));
+    // CraftBukkit start
+    public void setStrengthPublic(int i) {
+        this.setStrength(i);
     }
+    // CraftBukkit end
+    private void setStrength(int strength) {
+        this.entityData.set(Llama.DATA_STRENGTH_ID, Math.max(1, Math.min(5, strength)));
+    }
 
-    private void setRandomStrength(RandomSource randomsource) {
-        int i = randomsource.nextFloat() < 0.04F ? 5 : 3;
+    private void setRandomStrength(RandomSource random) {
+        int i = random.nextFloat() < 0.04F ? 5 : 3;
 
-        this.setStrength(1 + randomsource.nextInt(i));
+        this.setStrength(1 + random.nextInt(i));
     }
 
     public int getStrength() {
@@ -99,32 +104,29 @@
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putInt("Variant", this.getVariant().id);
-        compoundtag.putInt("Strength", this.getStrength());
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putInt("Variant", this.getVariant().id);
+        compound.putInt("Strength", this.getStrength());
         if (!this.inventory.getItem(1).isEmpty()) {
-            compoundtag.put("DecorItem", this.inventory.getItem(1).save(new CompoundTag()));
+            compound.put("DecorItem", this.inventory.getItem(1).save(new CompoundTag()));
         }
 
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        this.setStrength(compoundtag.getInt("Strength"));
-        super.readAdditionalSaveData(compoundtag);
-        this.setVariant(Llama.Variant.byId(compoundtag.getInt("Variant")));
-        if (compoundtag.contains("DecorItem", 10)) {
-            this.inventory.setItem(1, ItemStack.of(compoundtag.getCompound("DecorItem")));
+    public void readAdditionalSaveData(CompoundTag compound) {
+        this.setStrength(compound.getInt("Strength"));
+        super.readAdditionalSaveData(compound);
+        this.setVariant(Llama.Variant.byId(compound.getInt("Variant")));
+        if (compound.contains("DecorItem", 10)) {
+            this.inventory.setItem(1, ItemStack.of(compound.getCompound("DecorItem")));
         }
 
         this.updateContainerEquipment();
     }
 
     @Override
-    @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
         this.goalSelector.addGoal(1, new RunAroundLikeCrazyGoal(this, 1.2D));
@@ -146,7 +148,6 @@
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Llama.DATA_STRENGTH_ID, 0);
@@ -155,41 +156,36 @@
     }
 
     @Override
-    @Override
     public Llama.Variant getVariant() {
         return Llama.Variant.byId((Integer) this.entityData.get(Llama.DATA_VARIANT_ID));
     }
 
-    @Override
-    public void setVariant(Llama.Variant llama_variant) {
-        this.entityData.set(Llama.DATA_VARIANT_ID, llama_variant.id);
+    public void setVariant(Llama.Variant variant) {
+        this.entityData.set(Llama.DATA_VARIANT_ID, variant.id);
     }
 
     @Override
-    @Override
     protected int getInventorySize() {
         return this.hasChest() ? 2 + 3 * this.getInventoryColumns() : super.getInventorySize();
     }
 
     @Override
-    @Override
-    public boolean isFood(ItemStack itemstack) {
-        return Llama.FOOD_ITEMS.test(itemstack);
+    public boolean isFood(ItemStack stack) {
+        return Llama.FOOD_ITEMS.test(stack);
     }
 
     @Override
-    @Override
-    protected boolean handleEating(Player player, ItemStack itemstack) {
+    protected boolean handleEating(Player player, ItemStack stack) {
         byte b0 = 0;
         byte b1 = 0;
         float f = 0.0F;
         boolean flag = false;
 
-        if (itemstack.is(Items.WHEAT)) {
+        if (stack.is(Items.WHEAT)) {
             b0 = 10;
             b1 = 3;
             f = 2.0F;
-        } else if (itemstack.is(Blocks.HAY_BLOCK.asItem())) {
+        } else if (stack.is(Blocks.HAY_BLOCK.asItem())) {
             b0 = 90;
             b1 = 6;
             f = 10.0F;
@@ -221,9 +217,9 @@
         }
 
         if (flag && !this.isSilent()) {
-            SoundEvent soundevent = this.getEatingSound();
+            SoundEvent soundeffect = this.getEatingSound();
 
-            if (soundevent != null) {
+            if (soundeffect != null) {
                 this.level().playSound((Player) null, this.getX(), this.getY(), this.getZ(), this.getEatingSound(), this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             }
         }
@@ -232,126 +228,109 @@
     }
 
     @Override
-    @Override
     public boolean isImmobile() {
         return this.isDeadOrDying() || this.isEating();
     }
 
     @Nullable
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
-        RandomSource randomsource = serverlevelaccessor.getRandom();
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
+        RandomSource randomsource = level.getRandom();
 
         this.setRandomStrength(randomsource);
-        Llama.Variant llama_variant;
+        Llama.Variant entityllama_variant;
 
-        if (spawngroupdata instanceof Llama.LlamaGroupData) {
-            llama_variant = ((Llama.LlamaGroupData) spawngroupdata).variant;
+        if (spawnData instanceof Llama.LlamaGroupData) {
+            entityllama_variant = ((Llama.LlamaGroupData) spawnData).variant;
         } else {
-            llama_variant = (Llama.Variant) Util.getRandom((Object[]) Llama.Variant.values(), randomsource);
-            spawngroupdata = new Llama.LlamaGroupData(llama_variant);
+            entityllama_variant = (Llama.Variant) Util.getRandom((Object[]) Llama.Variant.values(), randomsource);
+            spawnData = new Llama.LlamaGroupData(entityllama_variant);
         }
 
-        this.setVariant(llama_variant);
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, (SpawnGroupData) spawngroupdata, compoundtag);
+        this.setVariant(entityllama_variant);
+        return super.finalizeSpawn(level, difficulty, reason, (GroupDataEntity) spawnData, dataTag);
     }
 
     @Override
-    @Override
     protected boolean canPerformRearing() {
         return false;
     }
 
     @Override
-    @Override
     protected SoundEvent getAngrySound() {
         return SoundEvents.LLAMA_ANGRY;
     }
 
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.LLAMA_AMBIENT;
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.LLAMA_HURT;
     }
 
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.LLAMA_DEATH;
     }
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getEatingSound() {
         return SoundEvents.LLAMA_EAT;
     }
 
     @Override
-    @Override
-    protected void playStepSound(BlockPos blockpos, BlockState blockstate) {
+    protected void playStepSound(BlockPos pos, IBlockData block) {
         this.playSound(SoundEvents.LLAMA_STEP, 0.15F, 1.0F);
     }
 
     @Override
-    @Override
     protected void playChestEquipsSound() {
         this.playSound(SoundEvents.LLAMA_CHEST, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
     }
 
     @Override
-    @Override
     public int getInventoryColumns() {
         return this.getStrength();
     }
 
     @Override
-    @Override
     public boolean canWearArmor() {
         return true;
     }
 
     @Override
-    @Override
     public boolean isWearingArmor() {
         return !this.inventory.getItem(1).isEmpty();
     }
 
     @Override
-    @Override
-    public boolean isArmor(ItemStack itemstack) {
-        return itemstack.is(ItemTags.WOOL_CARPETS);
+    public boolean isArmor(ItemStack stack) {
+        return stack.is(ItemTags.WOOL_CARPETS);
     }
 
     @Override
-    @Override
     public boolean isSaddleable() {
         return false;
     }
 
     @Override
-    @Override
-    public void containerChanged(Container container) {
-        DyeColor dyecolor = this.getSwag();
+    public void containerChanged(Container invBasic) {
+        DyeColor enumcolor = this.getSwag();
 
-        super.containerChanged(container);
-        DyeColor dyecolor1 = this.getSwag();
+        super.containerChanged(invBasic);
+        DyeColor enumcolor1 = this.getSwag();
 
-        if (this.tickCount > 20 && dyecolor1 != null && dyecolor1 != dyecolor) {
+        if (this.tickCount > 20 && enumcolor1 != null && enumcolor1 != enumcolor) {
             this.playSound(SoundEvents.LLAMA_SWAG, 0.5F, 1.0F);
         }
 
     }
 
     @Override
-    @Override
     protected void updateContainerEquipment() {
         if (!this.level().isClientSide) {
             super.updateContainerEquipment();
@@ -359,13 +338,13 @@
         }
     }
 
-    private void setSwag(@Nullable DyeColor dyecolor) {
-        this.entityData.set(Llama.DATA_SWAG_ID, dyecolor == null ? -1 : dyecolor.getId());
+    private void setSwag(@Nullable DyeColor color) {
+        this.entityData.set(Llama.DATA_SWAG_ID, color == null ? -1 : color.getId());
     }
 
     @Nullable
-    private static DyeColor getDyeColor(ItemStack itemstack) {
-        Block block = Block.byItem(itemstack.getItem());
+    private static DyeColor getDyeColor(ItemStack stack) {
+        Block block = Block.byItem(stack.getItem());
 
         return block instanceof WoolCarpetBlock ? ((WoolCarpetBlock) block).getColor() : null;
     }
@@ -378,37 +357,34 @@
     }
 
     @Override
-    @Override
     public int getMaxTemper() {
         return 30;
     }
 
     @Override
-    @Override
-    public boolean canMate(Animal animal) {
-        return animal != this && animal instanceof Llama && this.canParent() && ((Llama) animal).canParent();
+    public boolean canMate(Animal otherAnimal) {
+        return otherAnimal != this && otherAnimal instanceof Llama && this.canParent() && ((Llama) otherAnimal).canParent();
     }
 
     @Nullable
     @Override
-    @Override
-    public Llama getBreedOffspring(ServerLevel serverlevel, AgeableMob ageablemob) {
-        Llama llama = this.makeNewLlama();
+    public Llama getBreedOffspring(ServerLevel level, AgeableMob otherParent) {
+        Llama entityllama = this.makeNewLlama();
 
-        if (llama != null) {
-            this.setOffspringAttributes(ageablemob, llama);
-            Llama llama1 = (Llama) ageablemob;
-            int i = this.random.nextInt(Math.max(this.getStrength(), llama1.getStrength())) + 1;
+        if (entityllama != null) {
+            this.setOffspringAttributes(otherParent, entityllama);
+            Llama entityllama1 = (Llama) otherParent;
+            int i = this.random.nextInt(Math.max(this.getStrength(), entityllama1.getStrength())) + 1;
 
             if (this.random.nextFloat() < 0.03F) {
                 ++i;
             }
 
-            llama.setStrength(i);
-            llama.setVariant(this.random.nextBoolean() ? this.getVariant() : llama1.getVariant());
+            entityllama.setStrength(i);
+            entityllama.setVariant(this.random.nextBoolean() ? this.getVariant() : entityllama1.getVariant());
         }
 
-        return llama;
+        return entityllama;
     }
 
     @Nullable
@@ -416,43 +392,42 @@
         return (Llama) EntityType.LLAMA.create(this.level());
     }
 
-    private void spit(LivingEntity livingentity) {
-        LlamaSpit llamaspit = new LlamaSpit(this.level(), this);
-        double d0 = livingentity.getX() - this.getX();
-        double d1 = livingentity.getY(0.3333333333333333D) - llamaspit.getY();
-        double d2 = livingentity.getZ() - this.getZ();
+    private void spit(LivingEntity target) {
+        LlamaSpit entityllamaspit = new LlamaSpit(this.level(), this);
+        double d0 = target.getX() - this.getX();
+        double d1 = target.getY(0.3333333333333333D) - entityllamaspit.getY();
+        double d2 = target.getZ() - this.getZ();
         double d3 = Math.sqrt(d0 * d0 + d2 * d2) * 0.20000000298023224D;
 
-        llamaspit.shoot(d0, d1 + d3, d2, 1.5F, 10.0F);
+        entityllamaspit.shoot(d0, d1 + d3, d2, 1.5F, 10.0F);
         if (!this.isSilent()) {
             this.level().playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.LLAMA_SPIT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
         }
 
-        this.level().addFreshEntity(llamaspit);
+        this.level().addFreshEntity(entityllamaspit);
         this.didSpit = true;
     }
 
-    void setDidSpit(boolean flag) {
-        this.didSpit = flag;
+    void setDidSpit(boolean didSpit) {
+        this.didSpit = didSpit;
     }
 
     @Override
-    @Override
-    public boolean causeFallDamage(float f, float f1, DamageSource damagesource) {
-        int i = this.calculateFallDamage(f, f1);
+    public boolean causeFallDamage(float fallDistance, float multiplier, DamageSource source) {
+        int i = this.calculateFallDamage(fallDistance, multiplier);
 
         if (i <= 0) {
             return false;
         } else {
-            if (f >= 6.0F) {
-                this.hurt(damagesource, (float) i);
+            if (fallDistance >= 6.0F) {
+                this.hurt(source, (float) i);
                 if (this.isVehicle()) {
                     Iterator iterator = this.getIndirectPassengers().iterator();
 
                     while (iterator.hasNext()) {
                         Entity entity = (Entity) iterator.next();
 
-                        entity.hurt(damagesource, (float) i);
+                        entity.hurt(source, (float) i);
                     }
                 }
             }
@@ -470,8 +445,8 @@
         this.caravanHead = null;
     }
 
-    public void joinCaravan(Llama llama) {
-        this.caravanHead = llama;
+    public void joinCaravan(Llama caravanHead) {
+        this.caravanHead = caravanHead;
         this.caravanHead.caravanTail = this;
     }
 
@@ -489,13 +464,11 @@
     }
 
     @Override
-    @Override
     protected double followLeashSpeed() {
         return 2.0D;
     }
 
     @Override
-    @Override
     protected void followMommy() {
         if (!this.inCaravan() && this.isBaby()) {
             super.followMommy();
@@ -504,27 +477,23 @@
     }
 
     @Override
-    @Override
     public boolean canEatGrass() {
         return false;
     }
 
     @Override
-    @Override
-    public void performRangedAttack(LivingEntity livingentity, float f) {
-        this.spit(livingentity);
+    public void performRangedAttack(LivingEntity target, float distanceFactor) {
+        this.spit(target);
     }
 
     @Override
-    @Override
     public Vec3 getLeashOffset() {
         return new Vec3(0.0D, 0.75D * (double) this.getEyeHeight(), (double) this.getBbWidth() * 0.5D);
     }
 
     @Override
-    @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitydimensions, float f) {
-        return new Vector3f(0.0F, entitydimensions.height - (this.isBaby() ? 0.8125F : 0.5F) * f, -0.3F * f);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, entitysize.height - (this.isBaby() ? 0.8125F : 0.5F) * f, -0.3F * f);
     }
 
     public static enum Variant implements StringRepresentable {
@@ -532,7 +501,7 @@
         CREAMY(0, "creamy"), WHITE(1, "white"), BROWN(2, "brown"), GRAY(3, "gray");
 
         public static final Codec<Llama.Variant> CODEC = StringRepresentable.fromEnum(Llama.Variant::values);
-        private static final IntFunction<Llama.Variant> BY_ID = ByIdMap.continuous(Llama.Variant::getId, values(), ByIdMap.OutOfBoundsStrategy.CLAMP);
+        private static final IntFunction<Llama.Variant> BY_ID = ByIdMap.continuous(Llama.Variant::getId, values(), ByIdMap.a.CLAMP);
         final int id;
         private final String name;
 
@@ -545,12 +514,11 @@
             return this.id;
         }
 
-        public static Llama.Variant byId(int i) {
-            return (Llama.Variant) Llama.Variant.BY_ID.apply(i);
+        public static Llama.Variant byId(int id) {
+            return (Llama.Variant) Llama.Variant.BY_ID.apply(id);
         }
 
         @Override
-        @Override
         public String getSerializedName() {
             return this.name;
         }
@@ -563,15 +531,14 @@
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
-            Mob mob = this.mob;
+            Mob entityinsentient = this.mob;
 
-            if (mob instanceof Llama) {
-                Llama llama = (Llama) mob;
+            if (entityinsentient instanceof Llama) {
+                Llama entityllama = (Llama) entityinsentient;
 
-                if (llama.didSpit) {
-                    llama.setDidSpit(false);
+                if (entityllama.didSpit) {
+                    entityllama.setDidSpit(false);
                     return false;
                 }
             }
@@ -583,13 +550,12 @@
     private static class LlamaAttackWolfGoal extends NearestAttackableTargetGoal<Wolf> {
 
         public LlamaAttackWolfGoal(Llama llama) {
-            super(llama, Wolf.class, 16, false, true, (livingentity) -> {
-                return !((Wolf) livingentity).isTame();
+            super(llama, Wolf.class, 16, false, true, (entityliving) -> {
+                return !((Wolf) entityliving).isTame();
             });
         }
 
         @Override
-        @Override
         protected double getFollowDistance() {
             return super.getFollowDistance() * 0.25D;
         }
@@ -599,9 +565,9 @@
 
         public final Llama.Variant variant;
 
-        LlamaGroupData(Llama.Variant llama_variant) {
+        LlamaGroupData(Llama.Variant variant) {
             super(true);
-            this.variant = llama_variant;
+            this.variant = variant;
         }
     }
 }
