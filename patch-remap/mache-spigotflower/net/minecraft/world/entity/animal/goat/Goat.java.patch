--- a/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/net/minecraft/world/entity/animal/goat/Goat.java
@@ -22,17 +22,17 @@
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.Pose;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -50,11 +50,17 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.ServerLevelAccessor;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.Vec3;
 import org.joml.Vector3f;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.player.PlayerBucketFillEvent;
+// CraftBukkit end
+
 public class Goat extends Animal {
 
     public static final EntityDimensions LONG_JUMPING_DIMENSIONS = EntityDimensions.scalable(0.9F, 1.3F).scale(0.7F);
@@ -66,13 +72,13 @@
     public static final double GOAT_SCREAMING_CHANCE = 0.02D;
     public static final double UNIHORN_CHANCE = 0.10000000149011612D;
     private static final EntityDataAccessor<Boolean> DATA_IS_SCREAMING_GOAT = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
-    private static final EntityDataAccessor<Boolean> DATA_HAS_LEFT_HORN = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
-    private static final EntityDataAccessor<Boolean> DATA_HAS_RIGHT_HORN = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
+    public static final EntityDataAccessor<Boolean> DATA_HAS_LEFT_HORN = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
+    public static final EntityDataAccessor<Boolean> DATA_HAS_RIGHT_HORN = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
     private boolean isLoweringHead;
     private int lowerHeadTick;
 
-    public Goat(EntityType<? extends Goat> entitytype, Level level) {
-        super(entitytype, level);
+    public Goat(EntityType<? extends Goat> entityType, Level level) {
+        super(entityType, level);
         this.getNavigation().setCanFloat(true);
         this.setPathfindingMalus(BlockPathTypes.POWDER_SNOW, -1.0F);
         this.setPathfindingMalus(BlockPathTypes.DANGER_POWDER_SNOW, -1.0F);
@@ -87,13 +93,11 @@
     }
 
     @Override
-    @Override
     protected Brain.Provider<Goat> brainProvider() {
         return Brain.provider(Goat.MEMORY_TYPES, Goat.SENSOR_TYPES);
     }
 
     @Override
-    @Override
     protected Brain<?> makeBrain(Dynamic<?> dynamic) {
         return GoatAi.makeBrain(this.brainProvider().makeBrain(dynamic));
     }
@@ -103,7 +107,6 @@
     }
 
     @Override
-    @Override
     protected void ageBoundaryReached() {
         if (this.isBaby()) {
             this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue(1.0D);
@@ -116,32 +119,27 @@
     }
 
     @Override
-    @Override
-    protected int calculateFallDamage(float f, float f1) {
-        return super.calculateFallDamage(f, f1) - 10;
+    protected int calculateFallDamage(float fallDistance, float damageMultiplier) {
+        return super.calculateFallDamage(fallDistance, damageMultiplier) - 10;
     }
 
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return this.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_AMBIENT : SoundEvents.GOAT_AMBIENT;
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return this.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_HURT : SoundEvents.GOAT_HURT;
     }
 
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return this.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_DEATH : SoundEvents.GOAT_DEATH;
     }
 
     @Override
-    @Override
-    protected void playStepSound(BlockPos blockpos, BlockState blockstate) {
+    protected void playStepSound(BlockPos pos, IBlockData state) {
         this.playSound(SoundEvents.GOAT_STEP, 0.15F, 1.0F);
     }
 
@@ -151,9 +149,8 @@
 
     @Nullable
     @Override
-    @Override
-    public Goat getBreedOffspring(ServerLevel serverlevel, AgeableMob ageablemob) {
-        Goat goat = (Goat) EntityType.GOAT.create(serverlevel);
+    public Goat getBreedOffspring(ServerLevel level, AgeableMob otherParent) {
+        Goat goat = (Goat) EntityType.GOAT.create(level);
 
         if (goat != null) {
             boolean flag;
@@ -161,8 +158,8 @@
             {
                 label21:
                 {
-                    GoatAi.initMemories(goat, serverlevel.getRandom());
-                    Object object = serverlevel.getRandom().nextBoolean() ? this : ageablemob;
+                    GoatAi.initMemories(goat, level.getRandom());
+                    Object object = level.getRandom().nextBoolean() ? this : otherParent;
 
                     if (object instanceof Goat) {
                         Goat goat1 = (Goat) object;
@@ -172,7 +169,7 @@
                         }
                     }
 
-                    if (serverlevel.getRandom().nextDouble() >= 0.02D) {
+                    if (level.getRandom().nextDouble() >= 0.02D) {
                         flag = false;
                         break label22;
                     }
@@ -190,13 +187,11 @@
     }
 
     @Override
-    @Override
     public Brain<Goat> getBrain() {
-        return super.getBrain();
+        return (Brain<Goat>) super.getBrain(); // CraftBukkit - decompile error
     }
 
     @Override
-    @Override
     protected void customServerAiStep() {
         this.level().getProfiler().push("goatBrain");
         this.getBrain().tick((ServerLevel) this.level(), this);
@@ -208,112 +203,108 @@
     }
 
     @Override
-    @Override
     public int getMaxHeadYRot() {
         return 15;
     }
 
     @Override
-    @Override
-    public void setYHeadRot(float f) {
+    public void setYHeadRot(float rotation) {
         int i = this.getMaxHeadYRot();
-        float f1 = Mth.degreesDifference(this.yBodyRot, f);
+        float f1 = Mth.degreesDifference(this.yBodyRot, rotation);
         float f2 = Mth.clamp(f1, (float) (-i), (float) i);
 
         super.setYHeadRot(this.yBodyRot + f2);
     }
 
     @Override
-    @Override
-    public SoundEvent getEatingSound(ItemStack itemstack) {
+    public SoundEvent getEatingSound(ItemStack stack) {
         return this.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_EAT : SoundEvents.GOAT_EAT;
     }
 
     @Override
-    @Override
-    public InteractionResult mobInteract(Player player, InteractionHand interactionhand) {
-        ItemStack itemstack = player.getItemInHand(interactionhand);
+    public InteractionResult mobInteract(Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
 
         if (itemstack.is(Items.BUCKET) && !this.isBaby()) {
+            // CraftBukkit start - Got milk?
+            PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent((ServerLevel) player.level(), player, this.blockPosition(), this.blockPosition(), null, itemstack, Items.MILK_BUCKET, hand);
+
+            if (event.isCancelled()) {
+                return InteractionResult.PASS;
+            }
+            // CraftBukkit end
             player.playSound(this.getMilkingSound(), 1.0F, 1.0F);
-            ItemStack itemstack1 = ItemUtils.createFilledResult(itemstack, player, Items.MILK_BUCKET.getDefaultInstance());
+            ItemStack itemstack1 = ItemUtils.createFilledResult(itemstack, player, CraftItemStack.asNMSCopy(event.getItemStack())); // CraftBukkit
 
-            player.setItemInHand(interactionhand, itemstack1);
+            player.setItemInHand(hand, itemstack1);
             return InteractionResult.sidedSuccess(this.level().isClientSide);
         } else {
-            InteractionResult interactionresult = super.mobInteract(player, interactionhand);
+            InteractionResult enuminteractionresult = super.mobInteract(player, hand);
 
-            if (interactionresult.consumesAction() && this.isFood(itemstack)) {
+            if (enuminteractionresult.consumesAction() && this.isFood(itemstack)) {
                 this.level().playSound((Player) null, (Entity) this, this.getEatingSound(itemstack), SoundSource.NEUTRAL, 1.0F, Mth.randomBetween(this.level().random, 0.8F, 1.2F));
             }
 
-            return interactionresult;
+            return enuminteractionresult;
         }
     }
 
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
-        RandomSource randomsource = serverlevelaccessor.getRandom();
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
+        RandomSource randomsource = level.getRandom();
 
         GoatAi.initMemories(this, randomsource);
         this.setScreamingGoat(randomsource.nextDouble() < 0.02D);
         this.ageBoundaryReached();
         if (!this.isBaby() && (double) randomsource.nextFloat() < 0.10000000149011612D) {
-            EntityDataAccessor<Boolean> entitydataaccessor = randomsource.nextBoolean() ? Goat.DATA_HAS_LEFT_HORN : Goat.DATA_HAS_RIGHT_HORN;
+            EntityDataAccessor<Boolean> datawatcherobject = randomsource.nextBoolean() ? Goat.DATA_HAS_LEFT_HORN : Goat.DATA_HAS_RIGHT_HORN;
 
-            this.entityData.set(entitydataaccessor, false);
+            this.entityData.set(datawatcherobject, false);
         }
 
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, spawngroupdata, compoundtag);
+        return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
     }
 
     @Override
-    @Override
     protected void sendDebugPackets() {
         super.sendDebugPackets();
         DebugPackets.sendEntityBrain(this);
     }
 
     @Override
-    @Override
-    public EntityDimensions getDimensions(Pose pose) {
-        return pose == Pose.LONG_JUMPING ? Goat.LONG_JUMPING_DIMENSIONS.scale(this.getScale()) : super.getDimensions(pose);
+    public EntityDimensions getDimensions(EntityPose pose) {
+        return pose == EntityPose.LONG_JUMPING ? Goat.LONG_JUMPING_DIMENSIONS.scale(this.getScale()) : super.getDimensions(pose);
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putBoolean("IsScreamingGoat", this.isScreamingGoat());
-        compoundtag.putBoolean("HasLeftHorn", this.hasLeftHorn());
-        compoundtag.putBoolean("HasRightHorn", this.hasRightHorn());
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putBoolean("IsScreamingGoat", this.isScreamingGoat());
+        compound.putBoolean("HasLeftHorn", this.hasLeftHorn());
+        compound.putBoolean("HasRightHorn", this.hasRightHorn());
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.setScreamingGoat(compoundtag.getBoolean("IsScreamingGoat"));
-        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, compoundtag.getBoolean("HasLeftHorn"));
-        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, compoundtag.getBoolean("HasRightHorn"));
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.setScreamingGoat(compound.getBoolean("IsScreamingGoat"));
+        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, compound.getBoolean("HasLeftHorn"));
+        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, compound.getBoolean("HasRightHorn"));
     }
 
     @Override
-    @Override
-    public void handleEntityEvent(byte b0) {
-        if (b0 == 58) {
+    public void handleEntityEvent(byte id) {
+        if (id == 58) {
             this.isLoweringHead = true;
-        } else if (b0 == 59) {
+        } else if (id == 59) {
             this.isLoweringHead = false;
         } else {
-            super.handleEntityEvent(b0);
+            super.handleEntityEvent(id);
         }
 
     }
 
     @Override
-    @Override
     public void aiStep() {
         if (this.isLoweringHead) {
             ++this.lowerHeadTick;
@@ -326,7 +317,6 @@
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Goat.DATA_IS_SCREAMING_GOAT, false);
@@ -349,25 +339,25 @@
         if (!flag && !flag1) {
             return false;
         } else {
-            EntityDataAccessor entitydataaccessor;
+            EntityDataAccessor datawatcherobject;
 
             if (!flag) {
-                entitydataaccessor = Goat.DATA_HAS_RIGHT_HORN;
+                datawatcherobject = Goat.DATA_HAS_RIGHT_HORN;
             } else if (!flag1) {
-                entitydataaccessor = Goat.DATA_HAS_LEFT_HORN;
+                datawatcherobject = Goat.DATA_HAS_LEFT_HORN;
             } else {
-                entitydataaccessor = this.random.nextBoolean() ? Goat.DATA_HAS_LEFT_HORN : Goat.DATA_HAS_RIGHT_HORN;
+                datawatcherobject = this.random.nextBoolean() ? Goat.DATA_HAS_LEFT_HORN : Goat.DATA_HAS_RIGHT_HORN;
             }
 
-            this.entityData.set(entitydataaccessor, false);
-            Vec3 vec3 = this.position();
+            this.entityData.set(datawatcherobject, false);
+            Vec3 vec3d = this.position();
             ItemStack itemstack = this.createHorn();
             double d0 = (double) Mth.randomBetween(this.random, -0.2F, 0.2F);
             double d1 = (double) Mth.randomBetween(this.random, 0.3F, 0.7F);
             double d2 = (double) Mth.randomBetween(this.random, -0.2F, 0.2F);
-            ItemEntity itementity = new ItemEntity(this.level(), vec3.x(), vec3.y(), vec3.z(), itemstack, d0, d1, d2);
+            ItemEntity entityitem = new ItemEntity(this.level(), vec3d.x(), vec3d.y(), vec3d.z(), itemstack, d0, d1, d2);
 
-            this.level().addFreshEntity(itementity);
+            this.level().addFreshEntity(entityitem);
             return true;
         }
     }
@@ -386,21 +376,20 @@
         return (Boolean) this.entityData.get(Goat.DATA_IS_SCREAMING_GOAT);
     }
 
-    public void setScreamingGoat(boolean flag) {
-        this.entityData.set(Goat.DATA_IS_SCREAMING_GOAT, flag);
+    public void setScreamingGoat(boolean isScreamingGoat) {
+        this.entityData.set(Goat.DATA_IS_SCREAMING_GOAT, isScreamingGoat);
     }
 
     public float getRammingXHeadRot() {
         return (float) this.lowerHeadTick / 20.0F * 30.0F * 0.017453292F;
     }
 
-    public static boolean checkGoatSpawnRules(EntityType<? extends Animal> entitytype, LevelAccessor levelaccessor, MobSpawnType mobspawntype, BlockPos blockpos, RandomSource randomsource) {
-        return levelaccessor.getBlockState(blockpos.below()).is(BlockTags.GOATS_SPAWNABLE_ON) && isBrightEnoughToSpawn(levelaccessor, blockpos);
+    public static boolean checkGoatSpawnRules(EntityType<? extends Animal> goat, LevelAccessor level, EnumMobSpawn spawnType, BlockPos pos, RandomSource random) {
+        return level.getBlockState(pos.below()).is(BlockTags.GOATS_SPAWNABLE_ON) && isBrightEnoughToSpawn(level, pos);
     }
 
     @Override
-    @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitydimensions, float f) {
-        return new Vector3f(0.0F, entitydimensions.height - 0.1875F * f, 0.0F);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, entitysize.height - 0.1875F * f, 0.0F);
     }
 }
