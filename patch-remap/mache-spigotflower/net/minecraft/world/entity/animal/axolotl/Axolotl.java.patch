--- a/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -26,7 +26,7 @@
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.StringRepresentable;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
@@ -34,15 +34,15 @@
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.EnumMonsterType;
+import net.minecraft.world.entity.EnumMoveType;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LerpingModel;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.MobType;
-import net.minecraft.world.entity.MoverType;
-import net.minecraft.world.entity.Pose;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.VariantHolder;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
@@ -68,9 +68,16 @@
 
 public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolotl.Variant>, Bucketable {
 
+    // CraftBukkit start - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+    @Override
+    public int getDefaultMaxAirSupply() {
+        return AXOLOTL_TOTAL_AIR_SUPPLY;
+    }
+    // CraftBukkit end
     public static final int TOTAL_PLAYDEAD_TIME = 200;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Axolotl>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.AXOLOTL_ATTACKABLES, SensorType.AXOLOTL_TEMPTATIONS);
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN, MemoryModuleType.IS_PANICKING});
+    // CraftBukkit - decompile error
+    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN, MemoryModuleType.IS_PANICKING});
     private static final EntityDataAccessor<Integer> DATA_VARIANT = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_PLAYING_DEAD = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
@@ -83,8 +90,8 @@
     private final Map<String, Vector3f> modelRotationValues = Maps.newHashMap();
     private static final int REGEN_BUFF_BASE_DURATION = 100;
 
-    public Axolotl(EntityType<? extends Axolotl> entitytype, Level level) {
-        super(entitytype, level);
+    public Axolotl(EntityType<? extends Axolotl> entityType, Level level) {
+        super(entityType, level);
         this.setPathfindingMalus(BlockPathTypes.WATER, 0.0F);
         this.moveControl = new Axolotl.AxolotlMoveControl(this);
         this.lookControl = new Axolotl.AxolotlLookControl(this, 20);
@@ -92,19 +99,16 @@
     }
 
     @Override
-    @Override
     public Map<String, Vector3f> getModelRotationValues() {
         return this.modelRotationValues;
     }
 
     @Override
-    @Override
-    public float getWalkTargetValue(BlockPos blockpos, LevelReader levelreader) {
+    public float getWalkTargetValue(BlockPos pos, LevelReader level) {
         return 0.0F;
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Axolotl.DATA_VARIANT, 0);
@@ -113,23 +117,20 @@
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putInt("Variant", this.getVariant().getId());
-        compoundtag.putBoolean("FromBucket", this.fromBucket());
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putInt("Variant", this.getVariant().getId());
+        compound.putBoolean("FromBucket", this.fromBucket());
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.setVariant(Axolotl.Variant.byId(compoundtag.getInt("Variant")));
-        this.setFromBucket(compoundtag.getBoolean("FromBucket"));
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.setVariant(Axolotl.Variant.byId(compound.getInt("Variant")));
+        this.setFromBucket(compound.getBoolean("FromBucket"));
     }
 
     @Override
-    @Override
     public void playAmbientSound() {
         if (!this.isPlayingDead()) {
             super.playAmbientSound();
@@ -137,34 +138,32 @@
     }
 
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
         boolean flag = false;
 
-        if (mobspawntype == MobSpawnType.BUCKET) {
-            return (SpawnGroupData) spawngroupdata;
+        if (reason == EnumMobSpawn.BUCKET) {
+            return (GroupDataEntity) spawnData;
         } else {
-            RandomSource randomsource = serverlevelaccessor.getRandom();
+            RandomSource randomsource = level.getRandom();
 
-            if (spawngroupdata instanceof Axolotl.AxolotlGroupData) {
-                if (((Axolotl.AxolotlGroupData) spawngroupdata).getGroupSize() >= 2) {
+            if (spawnData instanceof Axolotl.AxolotlGroupData) {
+                if (((Axolotl.AxolotlGroupData) spawnData).getGroupSize() >= 2) {
                     flag = true;
                 }
             } else {
-                spawngroupdata = new Axolotl.AxolotlGroupData(new Axolotl.Variant[]{Axolotl.Variant.getCommonSpawnVariant(randomsource), Axolotl.Variant.getCommonSpawnVariant(randomsource)});
+                spawnData = new Axolotl.AxolotlGroupData(new Axolotl.Variant[]{Axolotl.Variant.getCommonSpawnVariant(randomsource), Axolotl.Variant.getCommonSpawnVariant(randomsource)});
             }
 
-            this.setVariant(((Axolotl.AxolotlGroupData) spawngroupdata).getVariant(randomsource));
+            this.setVariant(((Axolotl.AxolotlGroupData) spawnData).getVariant(randomsource));
             if (flag) {
                 this.setAge(-24000);
             }
 
-            return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, (SpawnGroupData) spawngroupdata, compoundtag);
+            return super.finalizeSpawn(level, difficulty, reason, (GroupDataEntity) spawnData, dataTag);
         }
     }
 
     @Override
-    @Override
     public void baseTick() {
         int i = this.getAirSupply();
 
@@ -175,9 +174,9 @@
 
     }
 
-    protected void handleAirSupply(int i) {
+    protected void handleAirSupply(int airSupply) {
         if (this.isAlive() && !this.isInWaterRainOrBubble()) {
-            this.setAirSupply(i - 1);
+            this.setAirSupply(airSupply - 1);
             if (this.getAirSupply() == -20) {
                 this.setAirSupply(0);
                 this.hurt(this.damageSources().dryOut(), 2.0F);
@@ -195,46 +194,40 @@
     }
 
     @Override
-    @Override
     public int getMaxAirSupply() {
-        return 6000;
+        return maxAirTicks; // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
     }
 
     @Override
-    @Override
     public Axolotl.Variant getVariant() {
         return Axolotl.Variant.byId((Integer) this.entityData.get(Axolotl.DATA_VARIANT));
     }
 
-    @Override
     public void setVariant(Axolotl.Variant axolotl_variant) {
         this.entityData.set(Axolotl.DATA_VARIANT, axolotl_variant.getId());
     }
 
-    private static boolean useRareVariant(RandomSource randomsource) {
-        return randomsource.nextInt(1200) == 0;
+    private static boolean useRareVariant(RandomSource random) {
+        return random.nextInt(1200) == 0;
     }
 
     @Override
-    @Override
-    public boolean checkSpawnObstruction(LevelReader levelreader) {
-        return levelreader.isUnobstructed(this);
+    public boolean checkSpawnObstruction(LevelReader level) {
+        return level.isUnobstructed(this);
     }
 
     @Override
-    @Override
     public boolean isPushedByFluid() {
         return false;
     }
 
     @Override
-    @Override
-    public MobType getMobType() {
-        return MobType.WATER;
+    public EnumMonsterType getMobType() {
+        return EnumMonsterType.WATER;
     }
 
-    public void setPlayingDead(boolean flag) {
-        this.entityData.set(Axolotl.DATA_PLAYING_DEAD, flag);
+    public void setPlayingDead(boolean playingDead) {
+        this.entityData.set(Axolotl.DATA_PLAYING_DEAD, playingDead);
     }
 
     public boolean isPlayingDead() {
@@ -242,22 +235,19 @@
     }
 
     @Override
-    @Override
     public boolean fromBucket() {
         return (Boolean) this.entityData.get(Axolotl.FROM_BUCKET);
     }
 
     @Override
-    @Override
-    public void setFromBucket(boolean flag) {
-        this.entityData.set(Axolotl.FROM_BUCKET, flag);
+    public void setFromBucket(boolean fromBucket) {
+        this.entityData.set(Axolotl.FROM_BUCKET, fromBucket);
     }
 
     @Nullable
     @Override
-    @Override
-    public AgeableMob getBreedOffspring(ServerLevel serverlevel, AgeableMob ageablemob) {
-        Axolotl axolotl = (Axolotl) EntityType.AXOLOTL.create(serverlevel);
+    public AgeableMob getBreedOffspring(ServerLevel level, AgeableMob otherParent) {
+        Axolotl axolotl = (Axolotl) EntityType.AXOLOTL.create(level);
 
         if (axolotl != null) {
             Axolotl.Variant axolotl_variant;
@@ -265,7 +255,7 @@
             if (useRareVariant(this.random)) {
                 axolotl_variant = Axolotl.Variant.getRareSpawnVariant(this.random);
             } else {
-                axolotl_variant = this.random.nextBoolean() ? this.getVariant() : ((Axolotl) ageablemob).getVariant();
+                axolotl_variant = this.random.nextBoolean() ? this.getVariant() : ((Axolotl) otherParent).getVariant();
             }
 
             axolotl.setVariant(axolotl_variant);
@@ -276,19 +266,16 @@
     }
 
     @Override
-    @Override
-    public boolean isFood(ItemStack itemstack) {
-        return itemstack.is(ItemTags.AXOLOTL_TEMPT_ITEMS);
+    public boolean isFood(ItemStack stack) {
+        return stack.is(ItemTags.AXOLOTL_TEMPT_ITEMS);
     }
 
     @Override
-    @Override
     public boolean canBeLeashed(Player player) {
         return true;
     }
 
     @Override
-    @Override
     protected void customServerAiStep() {
         this.level().getProfiler().push("axolotlBrain");
         this.getBrain().tick((ServerLevel) this.level(), this);
@@ -309,18 +296,16 @@
     }
 
     @Override
-    @Override
     protected PathNavigation createNavigation(Level level) {
         return new AmphibiousPathNavigation(this, level);
     }
 
     @Override
-    @Override
-    public boolean doHurtTarget(Entity entity) {
-        boolean flag = entity.hurt(this.damageSources().mobAttack(this), (float) ((int) this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
+    public boolean doHurtTarget(Entity target) {
+        boolean flag = target.hurt(this.damageSources().mobAttack(this), (float) ((int) this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
 
         if (flag) {
-            this.doEnchantDamageEffects(this, entity);
+            this.doEnchantDamageEffects(this, target);
             this.playSound(SoundEvents.AXOLOTL_ATTACK, 1.0F, 1.0F);
         }
 
@@ -328,105 +313,95 @@
     }
 
     @Override
-    @Override
-    public boolean hurt(DamageSource damagesource, float f) {
+    public boolean hurt(DamageSource source, float amount) {
         float f1 = this.getHealth();
 
-        if (!this.level().isClientSide && !this.isNoAi() && this.level().random.nextInt(3) == 0 && ((float) this.level().random.nextInt(3) < f || f1 / this.getMaxHealth() < 0.5F) && f < f1 && this.isInWater() && (damagesource.getEntity() != null || damagesource.getDirectEntity() != null) && !this.isPlayingDead()) {
+        if (!this.level().isClientSide && !this.isNoAi() && this.level().random.nextInt(3) == 0 && ((float) this.level().random.nextInt(3) < amount || f1 / this.getMaxHealth() < 0.5F) && amount < f1 && this.isInWater() && (source.getEntity() != null || source.getDirectEntity() != null) && !this.isPlayingDead()) {
             this.brain.setMemory(MemoryModuleType.PLAY_DEAD_TICKS, (int) 200);
         }
 
-        return super.hurt(damagesource, f);
+        return super.hurt(source, amount);
     }
 
     @Override
-    @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions entitydimensions) {
-        return entitydimensions.height * 0.655F;
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions dimensions) {
+        return dimensions.height * 0.655F;
     }
 
     @Override
-    @Override
     public int getMaxHeadXRot() {
         return 1;
     }
 
     @Override
-    @Override
     public int getMaxHeadYRot() {
         return 1;
     }
 
     @Override
-    @Override
-    public InteractionResult mobInteract(Player player, InteractionHand interactionhand) {
-        return (InteractionResult) Bucketable.bucketMobPickup(player, interactionhand, this).orElse(super.mobInteract(player, interactionhand));
+    public InteractionResult mobInteract(Player player, EnumHand hand) {
+        return (InteractionResult) Bucketable.bucketMobPickup(player, hand, this).orElse(super.mobInteract(player, hand));
     }
 
     @Override
-    @Override
-    public void saveToBucketTag(ItemStack itemstack) {
-        Bucketable.saveDefaultDataToBucketTag(this, itemstack);
-        CompoundTag compoundtag = itemstack.getOrCreateTag();
+    public void saveToBucketTag(ItemStack stack) {
+        Bucketable.saveDefaultDataToBucketTag(this, stack);
+        CompoundTag nbttagcompound = stack.getOrCreateTag();
 
-        compoundtag.putInt("Variant", this.getVariant().getId());
-        compoundtag.putInt("Age", this.getAge());
-        Brain<?> brain = this.getBrain();
+        nbttagcompound.putInt("Variant", this.getVariant().getId());
+        nbttagcompound.putInt("Age", this.getAge());
+        Brain<?> behaviorcontroller = this.getBrain();
 
-        if (brain.hasMemoryValue(MemoryModuleType.HAS_HUNTING_COOLDOWN)) {
-            compoundtag.putLong("HuntingCooldown", brain.getTimeUntilExpiry(MemoryModuleType.HAS_HUNTING_COOLDOWN));
+        if (behaviorcontroller.hasMemoryValue(MemoryModuleType.HAS_HUNTING_COOLDOWN)) {
+            nbttagcompound.putLong("HuntingCooldown", behaviorcontroller.getTimeUntilExpiry(MemoryModuleType.HAS_HUNTING_COOLDOWN));
         }
 
     }
 
     @Override
-    @Override
-    public void loadFromBucketTag(CompoundTag compoundtag) {
-        Bucketable.loadDefaultDataFromBucketTag(this, compoundtag);
-        this.setVariant(Axolotl.Variant.byId(compoundtag.getInt("Variant")));
-        if (compoundtag.contains("Age")) {
-            this.setAge(compoundtag.getInt("Age"));
+    public void loadFromBucketTag(CompoundTag tag) {
+        Bucketable.loadDefaultDataFromBucketTag(this, tag);
+        this.setVariant(Axolotl.Variant.byId(tag.getInt("Variant")));
+        if (tag.contains("Age")) {
+            this.setAge(tag.getInt("Age"));
         }
 
-        if (compoundtag.contains("HuntingCooldown")) {
-            this.getBrain().setMemoryWithExpiry(MemoryModuleType.HAS_HUNTING_COOLDOWN, true, compoundtag.getLong("HuntingCooldown"));
+        if (tag.contains("HuntingCooldown")) {
+            this.getBrain().setMemoryWithExpiry(MemoryModuleType.HAS_HUNTING_COOLDOWN, true, tag.getLong("HuntingCooldown"));
         }
 
     }
 
     @Override
-    @Override
     public ItemStack getBucketItemStack() {
         return new ItemStack(Items.AXOLOTL_BUCKET);
     }
 
     @Override
-    @Override
     public SoundEvent getPickupSound() {
         return SoundEvents.BUCKET_FILL_AXOLOTL;
     }
 
     @Override
-    @Override
     public boolean canBeSeenAsEnemy() {
         return !this.isPlayingDead() && super.canBeSeenAsEnemy();
     }
 
-    public static void onStopAttacking(Axolotl axolotl, LivingEntity livingentity) {
-        Level level = axolotl.level();
+    public static void onStopAttacking(Axolotl axolotl, LivingEntity target) {
+        Level world = axolotl.level();
 
-        if (livingentity.isDeadOrDying()) {
-            DamageSource damagesource = livingentity.getLastDamageSource();
+        if (target.isDeadOrDying()) {
+            DamageSource damagesource = target.getLastDamageSource();
 
             if (damagesource != null) {
                 Entity entity = damagesource.getEntity();
 
                 if (entity != null && entity.getType() == EntityType.PLAYER) {
-                    Player player = (Player) entity;
-                    List<Player> list = level.getEntitiesOfClass(Player.class, axolotl.getBoundingBox().inflate(20.0D));
+                    Player entityhuman = (Player) entity;
+                    List<Player> list = world.getEntitiesOfClass(Player.class, axolotl.getBoundingBox().inflate(20.0D));
 
-                    if (list.contains(player)) {
-                        axolotl.applySupportingEffects(player);
+                    if (list.contains(entityhuman)) {
+                        axolotl.applySupportingEffects(entityhuman);
                     }
                 }
             }
@@ -435,113 +410,100 @@
     }
 
     public void applySupportingEffects(Player player) {
-        MobEffectInstance mobeffectinstance = player.getEffect(MobEffects.REGENERATION);
+        MobEffectInstance mobeffect = player.getEffect(MobEffects.REGENERATION);
 
-        if (mobeffectinstance == null || mobeffectinstance.endsWithin(2399)) {
-            int i = mobeffectinstance != null ? mobeffectinstance.getDuration() : 0;
+        if (mobeffect == null || mobeffect.endsWithin(2399)) {
+            int i = mobeffect != null ? mobeffect.getDuration() : 0;
             int j = Math.min(2400, 100 + i);
 
-            player.addEffect(new MobEffectInstance(MobEffects.REGENERATION, j, 0), this);
+            player.addEffect(new MobEffectInstance(MobEffects.REGENERATION, j, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.AXOLOTL); // CraftBukkit
         }
 
         player.removeEffect(MobEffects.DIG_SLOWDOWN);
     }
 
     @Override
-    @Override
     public boolean requiresCustomPersistence() {
         return super.requiresCustomPersistence() || this.fromBucket();
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.AXOLOTL_HURT;
     }
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.AXOLOTL_DEATH;
     }
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return this.isInWater() ? SoundEvents.AXOLOTL_IDLE_WATER : SoundEvents.AXOLOTL_IDLE_AIR;
     }
 
     @Override
-    @Override
     protected SoundEvent getSwimSplashSound() {
         return SoundEvents.AXOLOTL_SPLASH;
     }
 
     @Override
-    @Override
     protected SoundEvent getSwimSound() {
         return SoundEvents.AXOLOTL_SWIM;
     }
 
     @Override
-    @Override
     protected Brain.Provider<Axolotl> brainProvider() {
         return Brain.provider(Axolotl.MEMORY_TYPES, Axolotl.SENSOR_TYPES);
     }
 
     @Override
-    @Override
     protected Brain<?> makeBrain(Dynamic<?> dynamic) {
         return AxolotlAi.makeBrain(this.brainProvider().makeBrain(dynamic));
     }
 
     @Override
-    @Override
     public Brain<Axolotl> getBrain() {
-        return super.getBrain();
+        return (Brain<Axolotl>) super.getBrain(); // CraftBukkit - decompile error
     }
 
     @Override
-    @Override
     protected void sendDebugPackets() {
         super.sendDebugPackets();
         DebugPackets.sendEntityBrain(this);
     }
 
     @Override
-    @Override
-    public void travel(Vec3 vec3) {
+    public void travel(Vec3 travelVector) {
         if (this.isControlledByLocalInstance() && this.isInWater()) {
-            this.moveRelative(this.getSpeed(), vec3);
-            this.move(MoverType.SELF, this.getDeltaMovement());
+            this.moveRelative(this.getSpeed(), travelVector);
+            this.move(EnumMoveType.SELF, this.getDeltaMovement());
             this.setDeltaMovement(this.getDeltaMovement().scale(0.9D));
         } else {
-            super.travel(vec3);
+            super.travel(travelVector);
         }
 
     }
 
     @Override
-    @Override
-    protected void usePlayerItem(Player player, InteractionHand interactionhand, ItemStack itemstack) {
-        if (itemstack.is(Items.TROPICAL_FISH_BUCKET)) {
-            player.setItemInHand(interactionhand, new ItemStack(Items.WATER_BUCKET));
+    protected void usePlayerItem(Player player, EnumHand hand, ItemStack stack) {
+        if (stack.is(Items.TROPICAL_FISH_BUCKET)) {
+            player.setItemInHand(hand, new ItemStack(Items.WATER_BUCKET));
         } else {
-            super.usePlayerItem(player, interactionhand, itemstack);
+            super.usePlayerItem(player, hand, stack);
         }
 
     }
 
     @Override
-    @Override
-    public boolean removeWhenFarAway(double d0) {
+    public boolean removeWhenFarAway(double distanceToClosestPlayer) {
         return !this.fromBucket() && !this.hasCustomName();
     }
 
-    public static boolean checkAxolotlSpawnRules(EntityType<? extends LivingEntity> entitytype, ServerLevelAccessor serverlevelaccessor, MobSpawnType mobspawntype, BlockPos blockpos, RandomSource randomsource) {
-        return serverlevelaccessor.getBlockState(blockpos.below()).is(BlockTags.AXOLOTLS_SPAWNABLE_ON);
+    public static boolean checkAxolotlSpawnRules(EntityType<? extends LivingEntity> axolotl, ServerLevelAccessor level, EnumMobSpawn spawnType, BlockPos pos, RandomSource random) {
+        return level.getBlockState(pos.below()).is(BlockTags.AXOLOTLS_SPAWNABLE_ON);
     }
 
     private static class AxolotlMoveControl extends SmoothSwimmingMoveControl {
@@ -554,7 +516,6 @@
         }
 
         @Override
-        @Override
         public void tick() {
             if (!this.axolotl.isPlayingDead()) {
                 super.tick();
@@ -570,7 +531,6 @@
         }
 
         @Override
-        @Override
         public void tick() {
             if (!Axolotl.this.isPlayingDead()) {
                 super.tick();
@@ -583,7 +543,7 @@
 
         LUCY(0, "lucy", true), WILD(1, "wild", true), GOLD(2, "gold", true), CYAN(3, "cyan", true), BLUE(4, "blue", false);
 
-        private static final IntFunction<Axolotl.Variant> BY_ID = ByIdMap.continuous(Axolotl.Variant::getId, values(), ByIdMap.OutOfBoundsStrategy.ZERO);
+        private static final IntFunction<Axolotl.Variant> BY_ID = ByIdMap.continuous(Axolotl.Variant::getId, values(), ByIdMap.a.ZERO);
         public static final Codec<Axolotl.Variant> CODEC = StringRepresentable.fromEnum(Axolotl.Variant::values);
         private final int id;
         private final String name;
@@ -604,31 +564,30 @@
         }
 
         @Override
-        @Override
         public String getSerializedName() {
             return this.name;
         }
 
-        public static Axolotl.Variant byId(int i) {
-            return (Axolotl.Variant) Axolotl.Variant.BY_ID.apply(i);
+        public static Axolotl.Variant byId(int id) {
+            return (Axolotl.Variant) Axolotl.Variant.BY_ID.apply(id);
         }
 
-        public static Axolotl.Variant getCommonSpawnVariant(RandomSource randomsource) {
-            return getSpawnVariant(randomsource, true);
+        public static Axolotl.Variant getCommonSpawnVariant(RandomSource random) {
+            return getSpawnVariant(random, true);
         }
 
-        public static Axolotl.Variant getRareSpawnVariant(RandomSource randomsource) {
-            return getSpawnVariant(randomsource, false);
+        public static Axolotl.Variant getRareSpawnVariant(RandomSource random) {
+            return getSpawnVariant(random, false);
         }
 
-        private static Axolotl.Variant getSpawnVariant(RandomSource randomsource, boolean flag) {
+        private static Axolotl.Variant getSpawnVariant(RandomSource random, boolean common) {
             Axolotl.Variant[] aaxolotl_variant = (Axolotl.Variant[]) Arrays.stream(values()).filter((axolotl_variant) -> {
-                return axolotl_variant.common == flag;
+                return axolotl_variant.common == common;
             }).toArray((i) -> {
                 return new Axolotl.Variant[i];
             });
 
-            return (Axolotl.Variant) Util.getRandom((Object[]) aaxolotl_variant, randomsource);
+            return (Axolotl.Variant) Util.getRandom((Object[]) aaxolotl_variant, random);
         }
     }
 
@@ -636,13 +595,13 @@
 
         public final Axolotl.Variant[] types;
 
-        public AxolotlGroupData(Axolotl.Variant... aaxolotl_variant) {
+        public AxolotlGroupData(Axolotl.Variant... types) {
             super(false);
-            this.types = aaxolotl_variant;
+            this.types = types;
         }
 
-        public Axolotl.Variant getVariant(RandomSource randomsource) {
-            return this.types[randomsource.nextInt(this.types.length)];
+        public Axolotl.Variant getVariant(RandomSource random) {
+            return this.types[random.nextInt(this.types.length)];
         }
     }
 }
