--- a/net/minecraft/world/entity/animal/Sheep.java
+++ b/net/minecraft/world/entity/animal/Sheep.java
@@ -21,18 +21,18 @@
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.Shearable;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.BreedGoal;
@@ -47,30 +47,36 @@
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.inventory.AbstractContainerMenu;
-import net.minecraft.world.inventory.CraftingContainer;
+import net.minecraft.world.inventory.InventoryCrafting;
 import net.minecraft.world.inventory.MenuType;
+import net.minecraft.world.inventory.ResultContainer;
 import net.minecraft.world.inventory.TransientCraftingContainer;
-import net.minecraft.world.item.DyeColor;
-import net.minecraft.world.item.DyeItem;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.item.crafting.CraftingRecipe;
 import net.minecraft.world.item.crafting.Ingredient;
+import net.minecraft.world.item.crafting.RecipeCrafting;
 import net.minecraft.world.item.crafting.RecipeType;
-import net.minecraft.world.level.ItemLike;
+import net.minecraft.world.level.IMaterial;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 import org.joml.Vector3f;
+import net.minecraft.world.item.DyeColor;
+import net.minecraft.world.item.DyeItem;
+import net.minecraft.world.item.Item;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.SheepRegrowWoolEvent;
+import org.bukkit.inventory.InventoryView;
+// CraftBukkit end
 
 public class Sheep extends Animal implements Shearable {
 
     private static final int EAT_ANIMATION_TICKS = 40;
     private static final EntityDataAccessor<Byte> DATA_WOOL_ID = SynchedEntityData.defineId(Sheep.class, EntityDataSerializers.BYTE);
-    private static final Map<DyeColor, ItemLike> ITEM_BY_DYE = (Map) Util.make(Maps.newEnumMap(DyeColor.class), (enummap) -> {
+    private static final Map<DyeColor, IMaterial> ITEM_BY_DYE = (Map) Util.make(Maps.newEnumMap(DyeColor.class), (enummap) -> {
         enummap.put(DyeColor.WHITE, Blocks.WHITE_WOOL);
         enummap.put(DyeColor.ORANGE, Blocks.ORANGE_WOOL);
         enummap.put(DyeColor.MAGENTA, Blocks.MAGENTA_WOOL);
@@ -88,33 +94,32 @@
         enummap.put(DyeColor.RED, Blocks.RED_WOOL);
         enummap.put(DyeColor.BLACK, Blocks.BLACK_WOOL);
     });
-    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR = Maps.newEnumMap((Map) Arrays.stream(DyeColor.values()).collect(Collectors.toMap((dyecolor) -> {
-        return dyecolor;
+    private static final Map<DyeColor, float[]> COLORARRAY_BY_COLOR = Maps.newEnumMap((Map) Arrays.stream(DyeColor.values()).collect(Collectors.toMap((enumcolor) -> {
+        return enumcolor;
     }, Sheep::createSheepColor)));
     private int eatAnimationTick;
     private EatBlockGoal eatBlockGoal;
 
-    private static float[] createSheepColor(DyeColor dyecolor) {
-        if (dyecolor == DyeColor.WHITE) {
+    private static float[] createSheepColor(DyeColor dyeColor) {
+        if (dyeColor == DyeColor.WHITE) {
             return new float[]{0.9019608F, 0.9019608F, 0.9019608F};
         } else {
-            float[] afloat = dyecolor.getTextureDiffuseColors();
+            float[] afloat = dyeColor.getTextureDiffuseColors();
             float f = 0.75F;
 
             return new float[]{afloat[0] * 0.75F, afloat[1] * 0.75F, afloat[2] * 0.75F};
         }
     }
 
-    public static float[] getColorArray(DyeColor dyecolor) {
-        return (float[]) Sheep.COLORARRAY_BY_COLOR.get(dyecolor);
+    public static float[] getColorArray(DyeColor dyeColor) {
+        return (float[]) Sheep.COLORARRAY_BY_COLOR.get(dyeColor);
     }
 
-    public Sheep(EntityType<? extends Sheep> entitytype, Level level) {
-        super(entitytype, level);
+    public Sheep(EntityType<? extends Sheep> entityType, Level level) {
+        super(entityType, level);
     }
 
     @Override
-    @Override
     protected void registerGoals() {
         this.eatBlockGoal = new EatBlockGoal(this);
         this.goalSelector.addGoal(0, new FloatGoal(this));
@@ -129,14 +134,12 @@
     }
 
     @Override
-    @Override
     protected void customServerAiStep() {
         this.eatAnimationTick = this.eatBlockGoal.getEatAnimationTick();
         super.customServerAiStep();
     }
 
     @Override
-    @Override
     public void aiStep() {
         if (this.level().isClientSide) {
             this.eatAnimationTick = Math.max(0, this.eatAnimationTick - 1);
@@ -150,95 +153,92 @@
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Sheep.DATA_WOOL_ID, (byte) 0);
     }
 
     @Override
-    @Override
     public ResourceLocation getDefaultLootTable() {
         if (this.isSheared()) {
             return this.getType().getDefaultLootTable();
         } else {
-            ResourceLocation resourcelocation;
+            ResourceLocation minecraftkey;
 
             switch (this.getColor()) {
                 case WHITE:
-                    resourcelocation = BuiltInLootTables.SHEEP_WHITE;
+                    minecraftkey = BuiltInLootTables.SHEEP_WHITE;
                     break;
                 case ORANGE:
-                    resourcelocation = BuiltInLootTables.SHEEP_ORANGE;
+                    minecraftkey = BuiltInLootTables.SHEEP_ORANGE;
                     break;
                 case MAGENTA:
-                    resourcelocation = BuiltInLootTables.SHEEP_MAGENTA;
+                    minecraftkey = BuiltInLootTables.SHEEP_MAGENTA;
                     break;
                 case LIGHT_BLUE:
-                    resourcelocation = BuiltInLootTables.SHEEP_LIGHT_BLUE;
+                    minecraftkey = BuiltInLootTables.SHEEP_LIGHT_BLUE;
                     break;
                 case YELLOW:
-                    resourcelocation = BuiltInLootTables.SHEEP_YELLOW;
+                    minecraftkey = BuiltInLootTables.SHEEP_YELLOW;
                     break;
                 case LIME:
-                    resourcelocation = BuiltInLootTables.SHEEP_LIME;
+                    minecraftkey = BuiltInLootTables.SHEEP_LIME;
                     break;
                 case PINK:
-                    resourcelocation = BuiltInLootTables.SHEEP_PINK;
+                    minecraftkey = BuiltInLootTables.SHEEP_PINK;
                     break;
                 case GRAY:
-                    resourcelocation = BuiltInLootTables.SHEEP_GRAY;
+                    minecraftkey = BuiltInLootTables.SHEEP_GRAY;
                     break;
                 case LIGHT_GRAY:
-                    resourcelocation = BuiltInLootTables.SHEEP_LIGHT_GRAY;
+                    minecraftkey = BuiltInLootTables.SHEEP_LIGHT_GRAY;
                     break;
                 case CYAN:
-                    resourcelocation = BuiltInLootTables.SHEEP_CYAN;
+                    minecraftkey = BuiltInLootTables.SHEEP_CYAN;
                     break;
                 case PURPLE:
-                    resourcelocation = BuiltInLootTables.SHEEP_PURPLE;
+                    minecraftkey = BuiltInLootTables.SHEEP_PURPLE;
                     break;
                 case BLUE:
-                    resourcelocation = BuiltInLootTables.SHEEP_BLUE;
+                    minecraftkey = BuiltInLootTables.SHEEP_BLUE;
                     break;
                 case BROWN:
-                    resourcelocation = BuiltInLootTables.SHEEP_BROWN;
+                    minecraftkey = BuiltInLootTables.SHEEP_BROWN;
                     break;
                 case GREEN:
-                    resourcelocation = BuiltInLootTables.SHEEP_GREEN;
+                    minecraftkey = BuiltInLootTables.SHEEP_GREEN;
                     break;
                 case RED:
-                    resourcelocation = BuiltInLootTables.SHEEP_RED;
+                    minecraftkey = BuiltInLootTables.SHEEP_RED;
                     break;
                 case BLACK:
-                    resourcelocation = BuiltInLootTables.SHEEP_BLACK;
+                    minecraftkey = BuiltInLootTables.SHEEP_BLACK;
                     break;
                 default:
                     throw new IncompatibleClassChangeError();
             }
 
-            return resourcelocation;
+            return minecraftkey;
         }
     }
 
     @Override
-    @Override
-    public void handleEntityEvent(byte b0) {
-        if (b0 == 10) {
+    public void handleEntityEvent(byte id) {
+        if (id == 10) {
             this.eatAnimationTick = 40;
         } else {
-            super.handleEntityEvent(b0);
+            super.handleEntityEvent(id);
         }
 
     }
 
-    public float getHeadEatPositionScale(float f) {
-        return this.eatAnimationTick <= 0 ? 0.0F : (this.eatAnimationTick >= 4 && this.eatAnimationTick <= 36 ? 1.0F : (this.eatAnimationTick < 4 ? ((float) this.eatAnimationTick - f) / 4.0F : -((float) (this.eatAnimationTick - 40) - f) / 4.0F));
+    public float getHeadEatPositionScale(float partialTick) {
+        return this.eatAnimationTick <= 0 ? 0.0F : (this.eatAnimationTick >= 4 && this.eatAnimationTick <= 36 ? 1.0F : (this.eatAnimationTick < 4 ? ((float) this.eatAnimationTick - partialTick) / 4.0F : -((float) (this.eatAnimationTick - 40) - partialTick) / 4.0F));
     }
 
-    public float getHeadEatAngleScale(float f) {
+    public float getHeadEatAngleScale(float partialTick) {
         if (this.eatAnimationTick > 4 && this.eatAnimationTick <= 36) {
-            float f1 = ((float) (this.eatAnimationTick - 4) - f) / 32.0F;
+            float f1 = ((float) (this.eatAnimationTick - 4) - partialTick) / 32.0F;
 
             return 0.62831855F + 0.21991149F * Mth.sin(f1 * 28.7F);
         } else {
@@ -247,86 +247,84 @@
     }
 
     @Override
-    @Override
-    public InteractionResult mobInteract(Player player, InteractionHand interactionhand) {
-        ItemStack itemstack = player.getItemInHand(interactionhand);
+    public InteractionResult mobInteract(Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
 
         if (itemstack.is(Items.SHEARS)) {
             if (!this.level().isClientSide && this.readyForShearing()) {
+                // CraftBukkit start
+                if (!CraftEventFactory.handlePlayerShearEntityEvent(player, this, itemstack, hand)) {
+                    return InteractionResult.PASS;
+                }
+                // CraftBukkit end
                 this.shear(SoundSource.PLAYERS);
                 this.gameEvent(GameEvent.SHEAR, player);
-                itemstack.hurtAndBreak(1, player, (player1) -> {
-                    player1.broadcastBreakEvent(interactionhand);
+                itemstack.hurtAndBreak(1, player, (entityhuman1) -> {
+                    entityhuman1.broadcastBreakEvent(hand);
                 });
                 return InteractionResult.SUCCESS;
             } else {
                 return InteractionResult.CONSUME;
             }
         } else {
-            return super.mobInteract(player, interactionhand);
+            return super.mobInteract(player, hand);
         }
     }
 
     @Override
-    @Override
-    public void shear(SoundSource soundsource) {
-        this.level().playSound((Player) null, (Entity) this, SoundEvents.SHEEP_SHEAR, soundsource, 1.0F, 1.0F);
+    public void shear(SoundSource category) {
+        this.level().playSound((Player) null, (Entity) this, SoundEvents.SHEEP_SHEAR, category, 1.0F, 1.0F);
         this.setSheared(true);
         int i = 1 + this.random.nextInt(3);
 
         for (int j = 0; j < i; ++j) {
-            ItemEntity itementity = this.spawnAtLocation((ItemLike) Sheep.ITEM_BY_DYE.get(this.getColor()), 1);
+            this.forceDrops = true; // CraftBukkit
+            ItemEntity entityitem = this.spawnAtLocation((IMaterial) Sheep.ITEM_BY_DYE.get(this.getColor()), 1);
+            this.forceDrops = false; // CraftBukkit
 
-            if (itementity != null) {
-                itementity.setDeltaMovement(itementity.getDeltaMovement().add((double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F), (double) (this.random.nextFloat() * 0.05F), (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F)));
+            if (entityitem != null) {
+                entityitem.setDeltaMovement(entityitem.getDeltaMovement().add((double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F), (double) (this.random.nextFloat() * 0.05F), (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F)));
             }
         }
 
     }
 
     @Override
-    @Override
     public boolean readyForShearing() {
         return this.isAlive() && !this.isSheared() && !this.isBaby();
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putBoolean("Sheared", this.isSheared());
-        compoundtag.putByte("Color", (byte) this.getColor().getId());
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putBoolean("Sheared", this.isSheared());
+        compound.putByte("Color", (byte) this.getColor().getId());
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.setSheared(compoundtag.getBoolean("Sheared"));
-        this.setColor(DyeColor.byId(compoundtag.getByte("Color")));
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.setSheared(compound.getBoolean("Sheared"));
+        this.setColor(DyeColor.byId(compound.getByte("Color")));
     }
 
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.SHEEP_AMBIENT;
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.SHEEP_HURT;
     }
 
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.SHEEP_DEATH;
     }
 
     @Override
-    @Override
-    protected void playStepSound(BlockPos blockpos, BlockState blockstate) {
+    protected void playStepSound(BlockPos pos, IBlockData block) {
         this.playSound(SoundEvents.SHEEP_STEP, 0.15F, 1.0F);
     }
 
@@ -334,20 +332,20 @@
         return DyeColor.byId((Byte) this.entityData.get(Sheep.DATA_WOOL_ID) & 15);
     }
 
-    public void setColor(DyeColor dyecolor) {
+    public void setColor(DyeColor dyeColor) {
         byte b0 = (Byte) this.entityData.get(Sheep.DATA_WOOL_ID);
 
-        this.entityData.set(Sheep.DATA_WOOL_ID, (byte) (b0 & 240 | dyecolor.getId() & 15));
+        this.entityData.set(Sheep.DATA_WOOL_ID, (byte) (b0 & 240 | dyeColor.getId() & 15));
     }
 
     public boolean isSheared() {
         return ((Byte) this.entityData.get(Sheep.DATA_WOOL_ID) & 16) != 0;
     }
 
-    public void setSheared(boolean flag) {
+    public void setSheared(boolean sheared) {
         byte b0 = (Byte) this.entityData.get(Sheep.DATA_WOOL_ID);
 
-        if (flag) {
+        if (sheared) {
             this.entityData.set(Sheep.DATA_WOOL_ID, (byte) (b0 | 16));
         } else {
             this.entityData.set(Sheep.DATA_WOOL_ID, (byte) (b0 & -17));
@@ -355,28 +353,32 @@
 
     }
 
-    public static DyeColor getRandomSheepColor(RandomSource randomsource) {
-        int i = randomsource.nextInt(100);
+    public static DyeColor getRandomSheepColor(RandomSource random) {
+        int i = random.nextInt(100);
 
-        return i < 5 ? DyeColor.BLACK : (i < 10 ? DyeColor.GRAY : (i < 15 ? DyeColor.LIGHT_GRAY : (i < 18 ? DyeColor.BROWN : (randomsource.nextInt(500) == 0 ? DyeColor.PINK : DyeColor.WHITE))));
+        return i < 5 ? DyeColor.BLACK : (i < 10 ? DyeColor.GRAY : (i < 15 ? DyeColor.LIGHT_GRAY : (i < 18 ? DyeColor.BROWN : (random.nextInt(500) == 0 ? DyeColor.PINK : DyeColor.WHITE))));
     }
 
     @Nullable
     @Override
-    @Override
-    public Sheep getBreedOffspring(ServerLevel serverlevel, AgeableMob ageablemob) {
-        Sheep sheep = (Sheep) EntityType.SHEEP.create(serverlevel);
+    public Sheep getBreedOffspring(ServerLevel level, AgeableMob otherParent) {
+        Sheep entitysheep = (Sheep) EntityType.SHEEP.create(level);
 
-        if (sheep != null) {
-            sheep.setColor(this.getOffspringColor(this, (Sheep) ageablemob));
+        if (entitysheep != null) {
+            entitysheep.setColor(this.getOffspringColor(this, (Sheep) otherParent));
         }
 
-        return sheep;
+        return entitysheep;
     }
 
     @Override
-    @Override
     public void ate() {
+        // CraftBukkit start
+        SheepRegrowWoolEvent event = new SheepRegrowWoolEvent((org.bukkit.entity.Sheep) this.getBukkitEntity());
+        this.level().getCraftServer().getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) return;
+        // CraftBukkit end
         super.ate();
         this.setSheared(false);
         if (this.isBaby()) {
@@ -387,57 +389,60 @@
 
     @Nullable
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
-        this.setColor(getRandomSheepColor(serverlevelaccessor.getRandom()));
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, spawngroupdata, compoundtag);
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
+        this.setColor(getRandomSheepColor(level.getRandom()));
+        return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
     }
 
-    private DyeColor getOffspringColor(Animal animal, Animal animal1) {
-        DyeColor dyecolor = ((Sheep) animal).getColor();
-        DyeColor dyecolor1 = ((Sheep) animal1).getColor();
-        CraftingContainer craftingcontainer = makeContainer(dyecolor, dyecolor1);
-        Optional optional = this.level().getRecipeManager().getRecipeFor(RecipeType.CRAFTING, craftingcontainer, this.level()).map((recipeholder) -> {
-            return ((CraftingRecipe) recipeholder.value()).assemble(craftingcontainer, this.level().registryAccess());
+    private DyeColor getOffspringColor(Animal father, Animal mother) {
+        DyeColor enumcolor = ((Sheep) father).getColor();
+        DyeColor enumcolor1 = ((Sheep) mother).getColor();
+        InventoryCrafting inventorycrafting = makeContainer(enumcolor, enumcolor1);
+        Optional<Item> optional = this.level().getRecipeManager().getRecipeFor(RecipeType.CRAFTING, inventorycrafting, this.level()).map((recipeholder) -> { // CraftBukkit - decompile error
+            return ((RecipeCrafting) recipeholder.value()).assemble(inventorycrafting, this.level().registryAccess());
         }).map(ItemStack::getItem);
 
         Objects.requireNonNull(DyeItem.class);
         optional = optional.filter(DyeItem.class::isInstance);
         Objects.requireNonNull(DyeItem.class);
         return (DyeColor) optional.map(DyeItem.class::cast).map(DyeItem::getDyeColor).orElseGet(() -> {
-            return this.level().random.nextBoolean() ? dyecolor : dyecolor1;
+            return this.level().random.nextBoolean() ? enumcolor : enumcolor1;
         });
     }
 
-    private static CraftingContainer makeContainer(DyeColor dyecolor, DyeColor dyecolor1) {
+    private static InventoryCrafting makeContainer(DyeColor fatherColor, DyeColor motherColor) {
         TransientCraftingContainer transientcraftingcontainer = new TransientCraftingContainer(new AbstractContainerMenu((MenuType) null, -1) {
             @Override
-            @Override
-            public ItemStack quickMoveStack(Player player, int i) {
+            public ItemStack quickMoveStack(Player player, int index) {
                 return ItemStack.EMPTY;
             }
 
             @Override
-            @Override
             public boolean stillValid(Player player) {
                 return false;
             }
+
+            // CraftBukkit start
+            @Override
+            public InventoryView getBukkitView() {
+                return null; // TODO: O.O
+            }
+            // CraftBukkit end
         }, 2, 1);
 
-        transientcraftingcontainer.setItem(0, new ItemStack(DyeItem.byColor(dyecolor)));
-        transientcraftingcontainer.setItem(1, new ItemStack(DyeItem.byColor(dyecolor1)));
+        transientcraftingcontainer.setItem(0, new ItemStack(DyeItem.byColor(fatherColor)));
+        transientcraftingcontainer.setItem(1, new ItemStack(DyeItem.byColor(motherColor)));
+        transientcraftingcontainer.resultInventory = new ResultContainer(); // CraftBukkit - add result slot for event
         return transientcraftingcontainer;
     }
 
     @Override
-    @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions entitydimensions) {
-        return 0.95F * entitydimensions.height;
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions size) {
+        return 0.95F * size.height;
     }
 
     @Override
-    @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitydimensions, float f) {
-        return new Vector3f(0.0F, entitydimensions.height - 0.0625F * f, 0.0F);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, entitysize.height - 0.0625F * f, 0.0F);
     }
 }
