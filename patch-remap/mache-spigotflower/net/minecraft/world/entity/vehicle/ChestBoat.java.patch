--- a/net/minecraft/world/entity/vehicle/ChestBoat.java
+++ b/net/minecraft/world/entity/vehicle/ChestBoat.java
@@ -6,7 +6,7 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.Container;
 import net.minecraft.world.Containers;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
@@ -23,6 +23,13 @@
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.gameevent.GameEvent;
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.inventory.InventoryHolder;
+// CraftBukkit end
 
 public class ChestBoat extends Boat implements HasCustomInventoryScreen, ContainerEntity {
 
@@ -32,82 +39,74 @@
     private ResourceLocation lootTable;
     private long lootTableSeed;
 
-    public ChestBoat(EntityType<? extends Boat> entitytype, Level level) {
-        super(entitytype, level);
+    public ChestBoat(EntityType<? extends Boat> entityType, Level level) {
+        super(entityType, level);
         this.itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
     }
 
-    public ChestBoat(Level level, double d0, double d1, double d2) {
+    public ChestBoat(Level level, double x, double d1, double y) {
         super(EntityType.CHEST_BOAT, level);
         this.itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
-        this.setPos(d0, d1, d2);
-        this.xo = d0;
+        this.setPos(x, d1, y);
+        this.xo = x;
         this.yo = d1;
-        this.zo = d2;
+        this.zo = y;
     }
 
     @Override
-    @Override
     protected float getSinglePassengerXOffset() {
         return 0.15F;
     }
 
     @Override
-    @Override
     protected int getMaxPassengers() {
         return 1;
     }
 
     @Override
-    @Override
-    protected void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        this.addChestVehicleSaveData(compoundtag);
+    protected void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        this.addChestVehicleSaveData(compound);
     }
 
     @Override
-    @Override
-    protected void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.readChestVehicleSaveData(compoundtag);
+    protected void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.readChestVehicleSaveData(compound);
     }
 
     @Override
-    @Override
-    public void destroy(DamageSource damagesource) {
+    public void destroy(DamageSource damageSource) {
         this.destroy(this.getDropItem());
-        this.chestVehicleDestroyed(damagesource, this.level(), this);
+        this.chestVehicleDestroyed(damageSource, this.level(), this);
     }
 
     @Override
-    @Override
-    public void remove(Entity.RemovalReason entity_removalreason) {
-        if (!this.level().isClientSide && entity_removalreason.shouldDestroy()) {
+    public void remove(Entity.RemovalReason reason) {
+        if (!this.level().isClientSide && reason.shouldDestroy()) {
             Containers.dropContents(this.level(), (Entity) this, (Container) this);
         }
 
-        super.remove(entity_removalreason);
+        super.remove(reason);
     }
 
     @Override
-    @Override
-    public InteractionResult interact(Player player, InteractionHand interactionhand) {
+    public InteractionResult interact(Player player, EnumHand hand) {
         if (this.canAddPassenger(player) && !player.isSecondaryUseActive()) {
-            return super.interact(player, interactionhand);
+            return super.interact(player, hand);
         } else {
-            InteractionResult interactionresult = this.interactWithContainerVehicle(player);
+            InteractionResult enuminteractionresult = this.interactWithContainerVehicle(player);
 
-            if (interactionresult.consumesAction()) {
+            if (enuminteractionresult.consumesAction()) {
                 this.gameEvent(GameEvent.CONTAINER_OPEN, player);
                 PiglinAi.angerNearbyPiglins(player, true);
             }
 
-            return interactionresult;
+            return enuminteractionresult;
         }
     }
 
     @Override
-    @Override
     public void openCustomInventoryScreen(Player player) {
         player.openMenu(this);
         if (!player.level().isClientSide) {
@@ -118,7 +117,6 @@
     }
 
     @Override
-    @Override
     public Item getDropItem() {
         Item item;
 
@@ -155,66 +153,56 @@
     }
 
     @Override
-    @Override
     public void clearContent() {
         this.clearChestVehicleContent();
     }
 
     @Override
-    @Override
     public int getContainerSize() {
         return 27;
     }
 
     @Override
-    @Override
-    public ItemStack getItem(int i) {
-        return this.getChestVehicleItem(i);
+    public ItemStack getItem(int slot) {
+        return this.getChestVehicleItem(slot);
     }
 
     @Override
-    @Override
-    public ItemStack removeItem(int i, int j) {
-        return this.removeChestVehicleItem(i, j);
+    public ItemStack removeItem(int slot, int amount) {
+        return this.removeChestVehicleItem(slot, amount);
     }
 
     @Override
-    @Override
-    public ItemStack removeItemNoUpdate(int i) {
-        return this.removeChestVehicleItemNoUpdate(i);
+    public ItemStack removeItemNoUpdate(int slot) {
+        return this.removeChestVehicleItemNoUpdate(slot);
     }
 
     @Override
-    @Override
-    public void setItem(int i, ItemStack itemstack) {
-        this.setChestVehicleItem(i, itemstack);
+    public void setItem(int slot, ItemStack stack) {
+        this.setChestVehicleItem(slot, stack);
     }
 
     @Override
-    @Override
-    public SlotAccess getSlot(int i) {
-        return this.getChestVehicleSlot(i);
+    public SlotAccess getSlot(int slot) {
+        return this.getChestVehicleSlot(slot);
     }
 
     @Override
-    @Override
     public void setChanged() {}
 
     @Override
-    @Override
     public boolean stillValid(Player player) {
         return this.isChestVehicleStillValid(player);
     }
 
     @Nullable
     @Override
-    @Override
-    public AbstractContainerMenu createMenu(int i, Inventory inventory, Player player) {
+    public AbstractContainerMenu createMenu(int containerId, Inventory playerInventory, Player player) {
         if (this.lootTable != null && player.isSpectator()) {
             return null;
         } else {
-            this.unpackLootTable(inventory.player);
-            return ChestMenu.threeRows(i, inventory, this);
+            this.unpackLootTable(playerInventory.player);
+            return ChestMenu.threeRows(containerId, playerInventory, this);
         }
     }
 
@@ -224,44 +212,84 @@
 
     @Nullable
     @Override
-    @Override
     public ResourceLocation getLootTable() {
         return this.lootTable;
     }
 
     @Override
-    @Override
-    public void setLootTable(@Nullable ResourceLocation resourcelocation) {
-        this.lootTable = resourcelocation;
+    public void setLootTable(@Nullable ResourceLocation lootTable) {
+        this.lootTable = lootTable;
     }
 
     @Override
-    @Override
     public long getLootTableSeed() {
         return this.lootTableSeed;
     }
 
     @Override
-    @Override
-    public void setLootTableSeed(long i) {
-        this.lootTableSeed = i;
+    public void setLootTableSeed(long lootTableSeed) {
+        this.lootTableSeed = lootTableSeed;
     }
 
     @Override
-    @Override
     public NonNullList<ItemStack> getItemStacks() {
         return this.itemStacks;
     }
 
     @Override
-    @Override
     public void clearItemStacks() {
         this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
     }
 
     @Override
-    @Override
     public void stopOpen(Player player) {
         this.level().gameEvent(GameEvent.CONTAINER_CLOSE, this.position(), GameEvent.Context.of((Entity) player));
     }
+
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    @Override
+    public List<ItemStack> getContents() {
+        return this.itemStacks;
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public InventoryHolder getOwner() {
+        org.bukkit.entity.Entity entity = getBukkitEntity();
+        if (entity instanceof InventoryHolder) return (InventoryHolder) entity;
+        return null;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    @Override
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    @Override
+    public Location getLocation() {
+        return getBukkitEntity().getLocation();
+    }
+    // CraftBukkit end
 }
