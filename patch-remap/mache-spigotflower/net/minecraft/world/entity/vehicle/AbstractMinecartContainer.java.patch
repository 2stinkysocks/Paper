--- a/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
+++ b/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
@@ -6,7 +6,7 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.Container;
 import net.minecraft.world.Containers;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
@@ -17,103 +17,138 @@
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.inventory.InventoryHolder;
+// CraftBukkit end
 
 public abstract class AbstractMinecartContainer extends AbstractMinecart implements ContainerEntity {
 
     private NonNullList<ItemStack> itemStacks;
     @Nullable
-    private ResourceLocation lootTable;
-    private long lootTableSeed;
+    public ResourceLocation lootTable;
+    public long lootTableSeed;
 
-    protected AbstractMinecartContainer(EntityType<?> entitytype, Level level) {
-        super(entitytype, level);
-        this.itemStacks = NonNullList.withSize(36, ItemStack.EMPTY);
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        return this.itemStacks;
     }
 
-    protected AbstractMinecartContainer(EntityType<?> entitytype, double d0, double d1, double d2, Level level) {
-        super(entitytype, level, d0, d1, d2);
-        this.itemStacks = NonNullList.withSize(36, ItemStack.EMPTY);
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
     }
 
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    public InventoryHolder getOwner() {
+        org.bukkit.entity.Entity cart = getBukkitEntity();
+        if(cart instanceof InventoryHolder) return (InventoryHolder) cart;
+        return null;
+    }
+
     @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
     @Override
-    public void destroy(DamageSource damagesource) {
-        super.destroy(damagesource);
-        this.chestVehicleDestroyed(damagesource, this.level(), this);
+    public Location getLocation() {
+        return getBukkitEntity().getLocation();
     }
+    // CraftBukkit end
 
+    protected AbstractMinecartContainer(EntityType<?> entityType, Level level) {
+        super(entityType, level);
+        this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY); // CraftBukkit - SPIGOT-3513
+    }
+
+    protected AbstractMinecartContainer(EntityType<?> entityType, double x, double d1, double y, Level world) {
+        super(entityType, world, x, d1, y);
+        this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY); // CraftBukkit - SPIGOT-3513
+    }
+
     @Override
+    public void destroy(DamageSource source) {
+        super.destroy(source);
+        this.chestVehicleDestroyed(source, this.level(), this);
+    }
+
     @Override
-    public ItemStack getItem(int i) {
-        return this.getChestVehicleItem(i);
+    public ItemStack getItem(int index) {
+        return this.getChestVehicleItem(index);
     }
 
     @Override
-    @Override
-    public ItemStack removeItem(int i, int j) {
-        return this.removeChestVehicleItem(i, j);
+    public ItemStack removeItem(int index, int count) {
+        return this.removeChestVehicleItem(index, count);
     }
 
     @Override
-    @Override
-    public ItemStack removeItemNoUpdate(int i) {
-        return this.removeChestVehicleItemNoUpdate(i);
+    public ItemStack removeItemNoUpdate(int index) {
+        return this.removeChestVehicleItemNoUpdate(index);
     }
 
     @Override
-    @Override
-    public void setItem(int i, ItemStack itemstack) {
-        this.setChestVehicleItem(i, itemstack);
+    public void setItem(int index, ItemStack stack) {
+        this.setChestVehicleItem(index, stack);
     }
 
     @Override
-    @Override
-    public SlotAccess getSlot(int i) {
-        return this.getChestVehicleSlot(i);
+    public SlotAccess getSlot(int slot) {
+        return this.getChestVehicleSlot(slot);
     }
 
     @Override
-    @Override
     public void setChanged() {}
 
     @Override
-    @Override
     public boolean stillValid(Player player) {
         return this.isChestVehicleStillValid(player);
     }
 
     @Override
-    @Override
-    public void remove(Entity.RemovalReason entity_removalreason) {
-        if (!this.level().isClientSide && entity_removalreason.shouldDestroy()) {
+    public void remove(Entity.RemovalReason reason) {
+        if (!this.level().isClientSide && reason.shouldDestroy()) {
             Containers.dropContents(this.level(), (Entity) this, (Container) this);
         }
 
-        super.remove(entity_removalreason);
+        super.remove(reason);
     }
 
     @Override
-    @Override
-    protected void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        this.addChestVehicleSaveData(compoundtag);
+    protected void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        this.addChestVehicleSaveData(compound);
     }
 
     @Override
-    @Override
-    protected void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.readChestVehicleSaveData(compoundtag);
+    protected void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.readChestVehicleSaveData(compound);
     }
 
     @Override
-    @Override
-    public InteractionResult interact(Player player, InteractionHand interactionhand) {
+    public InteractionResult interact(Player player, EnumHand hand) {
         return this.interactWithContainerVehicle(player);
     }
 
     @Override
-    @Override
     protected void applyNaturalSlowdown() {
         float f = 0.98F;
 
@@ -131,25 +166,23 @@
     }
 
     @Override
-    @Override
     public void clearContent() {
         this.clearChestVehicleContent();
     }
 
-    public void setLootTable(ResourceLocation resourcelocation, long i) {
-        this.lootTable = resourcelocation;
-        this.lootTableSeed = i;
+    public void setLootTable(ResourceLocation lootTable, long lootTableSeed) {
+        this.lootTable = lootTable;
+        this.lootTableSeed = lootTableSeed;
     }
 
     @Nullable
     @Override
-    @Override
-    public AbstractContainerMenu createMenu(int i, Inventory inventory, Player player) {
+    public AbstractContainerMenu createMenu(int containerId, Inventory playerInventory, Player player) {
         if (this.lootTable != null && player.isSpectator()) {
             return null;
         } else {
-            this.unpackChestVehicleLootTable(inventory.player);
-            return this.createMenu(i, inventory);
+            this.unpackChestVehicleLootTable(playerInventory.player);
+            return this.createMenu(containerId, playerInventory);
         }
     }
 
@@ -157,37 +190,31 @@
 
     @Nullable
     @Override
-    @Override
     public ResourceLocation getLootTable() {
         return this.lootTable;
     }
 
     @Override
-    @Override
-    public void setLootTable(@Nullable ResourceLocation resourcelocation) {
-        this.lootTable = resourcelocation;
+    public void setLootTable(@Nullable ResourceLocation lootTable) {
+        this.lootTable = lootTable;
     }
 
     @Override
-    @Override
     public long getLootTableSeed() {
         return this.lootTableSeed;
     }
 
     @Override
-    @Override
-    public void setLootTableSeed(long i) {
-        this.lootTableSeed = i;
+    public void setLootTableSeed(long lootTableSeed) {
+        this.lootTableSeed = lootTableSeed;
     }
 
     @Override
-    @Override
     public NonNullList<ItemStack> getItemStacks() {
         return this.itemStacks;
     }
 
     @Override
-    @Override
     public void clearItemStacks() {
         this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
     }
