--- a/net/minecraft/world/entity/vehicle/MinecartTNT.java
+++ b/net/minecraft/world/entity/vehicle/MinecartTNT.java
@@ -20,36 +20,36 @@
 import net.minecraft.world.level.ExplosionDamageCalculator;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.material.FluidState;
+// CraftBukkit start
+import org.bukkit.event.entity.ExplosionPrimeEvent;
+// CraftBukkit end
 
 public class MinecartTNT extends AbstractMinecart {
 
     private static final byte EVENT_PRIME = 10;
-    private int fuse = -1;
+    public int fuse = -1;
 
-    public MinecartTNT(EntityType<? extends MinecartTNT> entitytype, Level level) {
-        super(entitytype, level);
+    public MinecartTNT(EntityType<? extends MinecartTNT> entityType, Level level) {
+        super(entityType, level);
     }
 
-    public MinecartTNT(Level level, double d0, double d1, double d2) {
-        super(EntityType.TNT_MINECART, level, d0, d1, d2);
+    public MinecartTNT(Level level, double x, double d1, double y) {
+        super(EntityType.TNT_MINECART, level, x, d1, y);
     }
 
     @Override
-    @Override
-    public AbstractMinecart.Type getMinecartType() {
-        return AbstractMinecart.Type.TNT;
+    public AbstractMinecart.EnumMinecartType getMinecartType() {
+        return AbstractMinecart.EnumMinecartType.TNT;
     }
 
     @Override
-    @Override
-    public BlockState getDefaultDisplayBlockState() {
+    public IBlockData getDefaultDisplayBlockState() {
         return Blocks.TNT.defaultBlockState();
     }
 
     @Override
-    @Override
     public void tick() {
         super.tick();
         if (this.fuse > 0) {
@@ -70,29 +70,27 @@
     }
 
     @Override
-    @Override
-    public boolean hurt(DamageSource damagesource, float f) {
-        Entity entity = damagesource.getDirectEntity();
+    public boolean hurt(DamageSource source, float amount) {
+        Entity entity = source.getDirectEntity();
 
         if (entity instanceof AbstractArrow) {
-            AbstractArrow abstractarrow = (AbstractArrow) entity;
+            AbstractArrow entityarrow = (AbstractArrow) entity;
 
-            if (abstractarrow.isOnFire()) {
-                DamageSource damagesource1 = this.damageSources().explosion(this, damagesource.getEntity());
+            if (entityarrow.isOnFire()) {
+                DamageSource damagesource1 = this.damageSources().explosion(this, source.getEntity());
 
-                this.explode(damagesource1, abstractarrow.getDeltaMovement().lengthSqr());
+                this.explode(damagesource1, entityarrow.getDeltaMovement().lengthSqr());
             }
         }
 
-        return super.hurt(damagesource, f);
+        return super.hurt(source, amount);
     }
 
     @Override
-    @Override
-    public void destroy(DamageSource damagesource) {
+    public void destroy(DamageSource source) {
         double d0 = this.getDeltaMovement().horizontalDistanceSqr();
 
-        if (!damageSourceIgnitesTnt(damagesource) && d0 < 0.009999999776482582D) {
+        if (!damageSourceIgnitesTnt(source) && d0 < 0.009999999776482582D) {
             this.destroy(this.getDropItem());
         } else {
             if (this.fuse < 0) {
@@ -104,57 +102,61 @@
     }
 
     @Override
-    @Override
     protected Item getDropItem() {
         return Items.TNT_MINECART;
     }
 
-    protected void explode(double d0) {
-        this.explode((DamageSource) null, d0);
+    public void explode(double radiusModifier) {
+        this.explode((DamageSource) null, radiusModifier);
     }
 
-    protected void explode(@Nullable DamageSource damagesource, double d0) {
+    protected void explode(@Nullable DamageSource damageSource, double radiusModifier) {
         if (!this.level().isClientSide) {
-            double d1 = Math.sqrt(d0);
+            double d1 = Math.sqrt(radiusModifier);
 
             if (d1 > 5.0D) {
                 d1 = 5.0D;
             }
 
-            this.level().explode(this, damagesource, (ExplosionDamageCalculator) null, this.getX(), this.getY(), this.getZ(), (float) (4.0D + this.random.nextDouble() * 1.5D * d1), false, Level.ExplosionInteraction.TNT);
+            // CraftBukkit start
+            ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), (float) (4.0D + this.random.nextDouble() * 1.5D * d1), false);
+            this.level().getCraftServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                fuse = -1;
+                return;
+            }
+            this.level().explode(this, damageSource, (ExplosionDamageCalculator) null, this.getX(), this.getY(), this.getZ(), event.getRadius(), event.getFire(), Level.a.TNT);
+            // CraftBukkit end
             this.discard();
         }
 
     }
 
     @Override
-    @Override
-    public boolean causeFallDamage(float f, float f1, DamageSource damagesource) {
-        if (f >= 3.0F) {
-            float f2 = f / 10.0F;
+    public boolean causeFallDamage(float fallDistance, float multiplier, DamageSource source) {
+        if (fallDistance >= 3.0F) {
+            float f2 = fallDistance / 10.0F;
 
             this.explode((double) (f2 * f2));
         }
 
-        return super.causeFallDamage(f, f1, damagesource);
+        return super.causeFallDamage(fallDistance, multiplier, source);
     }
 
     @Override
-    @Override
-    public void activateMinecart(int i, int j, int k, boolean flag) {
-        if (flag && this.fuse < 0) {
+    public void activateMinecart(int x, int y, int z, boolean receivingPower) {
+        if (receivingPower && this.fuse < 0) {
             this.primeFuse();
         }
 
     }
 
     @Override
-    @Override
-    public void handleEntityEvent(byte b0) {
-        if (b0 == 10) {
+    public void handleEntityEvent(byte id) {
+        if (id == 10) {
             this.primeFuse();
         } else {
-            super.handleEntityEvent(b0);
+            super.handleEntityEvent(id);
         }
 
     }
@@ -179,36 +181,31 @@
     }
 
     @Override
-    @Override
-    public float getBlockExplosionResistance(Explosion explosion, BlockGetter blockgetter, BlockPos blockpos, BlockState blockstate, FluidState fluidstate, float f) {
-        return this.isPrimed() && (blockstate.is(BlockTags.RAILS) || blockgetter.getBlockState(blockpos.above()).is(BlockTags.RAILS)) ? 0.0F : super.getBlockExplosionResistance(explosion, blockgetter, blockpos, blockstate, fluidstate, f);
+    public float getBlockExplosionResistance(Explosion explosion, BlockGetter level, BlockPos pos, IBlockData blockState, FluidState fluidState, float explosionPower) {
+        return this.isPrimed() && (blockState.is(BlockTags.RAILS) || level.getBlockState(pos.above()).is(BlockTags.RAILS)) ? 0.0F : super.getBlockExplosionResistance(explosion, level, pos, blockState, fluidState, explosionPower);
     }
 
     @Override
-    @Override
-    public boolean shouldBlockExplode(Explosion explosion, BlockGetter blockgetter, BlockPos blockpos, BlockState blockstate, float f) {
-        return this.isPrimed() && (blockstate.is(BlockTags.RAILS) || blockgetter.getBlockState(blockpos.above()).is(BlockTags.RAILS)) ? false : super.shouldBlockExplode(explosion, blockgetter, blockpos, blockstate, f);
+    public boolean shouldBlockExplode(Explosion explosion, BlockGetter level, BlockPos pos, IBlockData blockState, float explosionPower) {
+        return this.isPrimed() && (blockState.is(BlockTags.RAILS) || level.getBlockState(pos.above()).is(BlockTags.RAILS)) ? false : super.shouldBlockExplode(explosion, level, pos, blockState, explosionPower);
     }
 
     @Override
-    @Override
-    protected void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        if (compoundtag.contains("TNTFuse", 99)) {
-            this.fuse = compoundtag.getInt("TNTFuse");
+    protected void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        if (compound.contains("TNTFuse", 99)) {
+            this.fuse = compound.getInt("TNTFuse");
         }
 
     }
 
     @Override
-    @Override
-    protected void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putInt("TNTFuse", this.fuse);
+    protected void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putInt("TNTFuse", this.fuse);
     }
 
     @Override
-    @Override
     boolean shouldSourceDestroy(DamageSource damagesource) {
         return damageSourceIgnitesTnt(damagesource);
     }
