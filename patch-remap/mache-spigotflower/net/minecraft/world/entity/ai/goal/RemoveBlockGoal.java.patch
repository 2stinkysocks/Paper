--- a/net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java
+++ b/net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java
@@ -20,6 +20,10 @@
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
 
 public class RemoveBlockGoal extends MoveToBlockGoal {
 
@@ -28,14 +32,13 @@
     private int ticksSinceReachedGoal;
     private static final int WAIT_AFTER_BLOCK_FOUND = 20;
 
-    public RemoveBlockGoal(Block block, PathfinderMob pathfindermob, double d0, int i) {
-        super(pathfindermob, d0, 24, i);
-        this.blockToRemove = block;
-        this.removerMob = pathfindermob;
+    public RemoveBlockGoal(Block blockToRemove, PathfinderMob removerMob, double speedModifier, int i) {
+        super(removerMob, speedModifier, 24, i);
+        this.blockToRemove = blockToRemove;
+        this.removerMob = removerMob;
     }
 
     @Override
-    @Override
     public boolean canUse() {
         if (!this.removerMob.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
             return false;
@@ -52,65 +55,67 @@
     }
 
     @Override
-    @Override
     public void stop() {
         super.stop();
         this.removerMob.fallDistance = 1.0F;
     }
 
     @Override
-    @Override
     public void start() {
         super.start();
         this.ticksSinceReachedGoal = 0;
     }
 
-    public void playDestroyProgressSound(LevelAccessor levelaccessor, BlockPos blockpos) {}
+    public void playDestroyProgressSound(LevelAccessor level, BlockPos pos) {}
 
-    public void playBreakSound(Level level, BlockPos blockpos) {}
+    public void playBreakSound(Level level, BlockPos pos) {}
 
     @Override
-    @Override
     public void tick() {
         super.tick();
-        Level level = this.removerMob.level();
-        BlockPos blockpos = this.removerMob.blockPosition();
-        BlockPos blockpos1 = this.getPosWithBlock(blockpos, level);
+        Level world = this.removerMob.level();
+        BlockPos blockposition = this.removerMob.blockPosition();
+        BlockPos blockposition1 = this.getPosWithBlock(blockposition, world);
         RandomSource randomsource = this.removerMob.getRandom();
 
-        if (this.isReachedTarget() && blockpos1 != null) {
-            Vec3 vec3;
+        if (this.isReachedTarget() && blockposition1 != null) {
+            Vec3 vec3d;
             double d0;
 
             if (this.ticksSinceReachedGoal > 0) {
-                vec3 = this.removerMob.getDeltaMovement();
-                this.removerMob.setDeltaMovement(vec3.x, 0.3D, vec3.z);
-                if (!level.isClientSide) {
+                vec3d = this.removerMob.getDeltaMovement();
+                this.removerMob.setDeltaMovement(vec3d.x, 0.3D, vec3d.z);
+                if (!world.isClientSide) {
                     d0 = 0.08D;
-                    ((ServerLevel) level).sendParticles(new ItemParticleOption(ParticleTypes.ITEM, new ItemStack(Items.EGG)), (double) blockpos1.getX() + 0.5D, (double) blockpos1.getY() + 0.7D, (double) blockpos1.getZ() + 0.5D, 3, ((double) randomsource.nextFloat() - 0.5D) * 0.08D, ((double) randomsource.nextFloat() - 0.5D) * 0.08D, ((double) randomsource.nextFloat() - 0.5D) * 0.08D, 0.15000000596046448D);
+                    ((ServerLevel) world).sendParticles(new ItemParticleOption(ParticleTypes.ITEM, new ItemStack(Items.EGG)), (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.7D, (double) blockposition1.getZ() + 0.5D, 3, ((double) randomsource.nextFloat() - 0.5D) * 0.08D, ((double) randomsource.nextFloat() - 0.5D) * 0.08D, ((double) randomsource.nextFloat() - 0.5D) * 0.08D, 0.15000000596046448D);
                 }
             }
 
             if (this.ticksSinceReachedGoal % 2 == 0) {
-                vec3 = this.removerMob.getDeltaMovement();
-                this.removerMob.setDeltaMovement(vec3.x, -0.3D, vec3.z);
+                vec3d = this.removerMob.getDeltaMovement();
+                this.removerMob.setDeltaMovement(vec3d.x, -0.3D, vec3d.z);
                 if (this.ticksSinceReachedGoal % 6 == 0) {
-                    this.playDestroyProgressSound(level, this.blockPos);
+                    this.playDestroyProgressSound(world, this.blockPos);
                 }
             }
 
             if (this.ticksSinceReachedGoal > 60) {
-                level.removeBlock(blockpos1, false);
-                if (!level.isClientSide) {
+                // CraftBukkit start - Step on eggs
+                if (!CraftEventFactory.callEntityInteractEvent(this.removerMob, CraftBlock.at(world, blockposition1))) {
+                    return;
+                }
+                // CraftBukkit end
+                world.removeBlock(blockposition1, false);
+                if (!world.isClientSide) {
                     for (int i = 0; i < 20; ++i) {
                         d0 = randomsource.nextGaussian() * 0.02D;
                         double d1 = randomsource.nextGaussian() * 0.02D;
                         double d2 = randomsource.nextGaussian() * 0.02D;
 
-                        ((ServerLevel) level).sendParticles(ParticleTypes.POOF, (double) blockpos1.getX() + 0.5D, (double) blockpos1.getY(), (double) blockpos1.getZ() + 0.5D, 1, d0, d1, d2, 0.15000000596046448D);
+                        ((ServerLevel) world).sendParticles(ParticleTypes.POOF, (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY(), (double) blockposition1.getZ() + 0.5D, 1, d0, d1, d2, 0.15000000596046448D);
                     }
 
-                    this.playBreakSound(level, blockpos1);
+                    this.playBreakSound(world, blockposition1);
                 }
             }
 
@@ -120,19 +125,19 @@
     }
 
     @Nullable
-    private BlockPos getPosWithBlock(BlockPos blockpos, BlockGetter blockgetter) {
-        if (blockgetter.getBlockState(blockpos).is(this.blockToRemove)) {
-            return blockpos;
+    private BlockPos getPosWithBlock(BlockPos pos, BlockGetter level) {
+        if (level.getBlockState(pos).is(this.blockToRemove)) {
+            return pos;
         } else {
-            BlockPos[] ablockpos = new BlockPos[]{blockpos.below(), blockpos.west(), blockpos.east(), blockpos.north(), blockpos.south(), blockpos.below().below()};
-            BlockPos[] ablockpos1 = ablockpos;
-            int i = ablockpos.length;
+            BlockPos[] ablockposition = new BlockPos[]{pos.below(), pos.west(), pos.east(), pos.north(), pos.south(), pos.below().below()};
+            BlockPos[] ablockposition1 = ablockposition;
+            int i = ablockposition.length;
 
             for (int j = 0; j < i; ++j) {
-                BlockPos blockpos1 = ablockpos1[j];
+                BlockPos blockposition1 = ablockposition1[j];
 
-                if (blockgetter.getBlockState(blockpos1).is(this.blockToRemove)) {
-                    return blockpos1;
+                if (level.getBlockState(blockposition1).is(this.blockToRemove)) {
+                    return blockposition1;
                 }
             }
 
@@ -141,10 +146,9 @@
     }
 
     @Override
-    @Override
-    protected boolean isValidTarget(LevelReader levelreader, BlockPos blockpos) {
-        ChunkAccess chunkaccess = levelreader.getChunk(SectionPos.blockToSectionCoord(blockpos.getX()), SectionPos.blockToSectionCoord(blockpos.getZ()), ChunkStatus.FULL, false);
+    protected boolean isValidTarget(LevelReader level, BlockPos pos) {
+        ChunkAccess ichunkaccess = level.getChunk(SectionPos.blockToSectionCoord(pos.getX()), SectionPos.blockToSectionCoord(pos.getZ()), ChunkStatus.FULL, false);
 
-        return chunkaccess == null ? false : chunkaccess.getBlockState(blockpos).is(this.blockToRemove) && chunkaccess.getBlockState(blockpos.above()).isAir() && chunkaccess.getBlockState(blockpos.above(2)).isAir();
+        return ichunkaccess == null ? false : ichunkaccess.getBlockState(pos).is(this.blockToRemove) && ichunkaccess.getBlockState(pos.above()).isAir() && ichunkaccess.getBlockState(pos.above(2)).isAir();
     }
 }
