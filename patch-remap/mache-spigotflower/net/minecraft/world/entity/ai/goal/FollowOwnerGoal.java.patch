--- a/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
+++ b/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
@@ -10,9 +10,14 @@
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.LeavesBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.level.pathfinder.WalkNodeEvaluator;
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTeleportEvent;
+// CraftBukkit end
 
 public class FollowOwnerGoal extends Goal {
 
@@ -31,41 +36,39 @@
     private float oldWaterCost;
     private final boolean canFly;
 
-    public FollowOwnerGoal(TamableAnimal tamableanimal, double d0, float f, float f1, boolean flag) {
-        this.tamable = tamableanimal;
-        this.level = tamableanimal.level();
-        this.speedModifier = d0;
-        this.navigation = tamableanimal.getNavigation();
+    public FollowOwnerGoal(TamableAnimal tamable, double speedModifier, float f, float startDistance, boolean stopDistance) {
+        this.tamable = tamable;
+        this.level = tamable.level();
+        this.speedModifier = speedModifier;
+        this.navigation = tamable.getNavigation();
         this.startDistance = f;
-        this.stopDistance = f1;
-        this.canFly = flag;
-        this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
-        if (!(tamableanimal.getNavigation() instanceof GroundPathNavigation) && !(tamableanimal.getNavigation() instanceof FlyingPathNavigation)) {
+        this.stopDistance = startDistance;
+        this.canFly = stopDistance;
+        this.setFlags(EnumSet.of(Goal.Type.MOVE, Goal.Type.LOOK));
+        if (!(tamable.getNavigation() instanceof GroundPathNavigation) && !(tamable.getNavigation() instanceof FlyingPathNavigation)) {
             throw new IllegalArgumentException("Unsupported mob type for FollowOwnerGoal");
         }
     }
 
     @Override
-    @Override
     public boolean canUse() {
-        LivingEntity livingentity = this.tamable.getOwner();
+        LivingEntity entityliving = this.tamable.getOwner();
 
-        if (livingentity == null) {
+        if (entityliving == null) {
             return false;
-        } else if (livingentity.isSpectator()) {
+        } else if (entityliving.isSpectator()) {
             return false;
         } else if (this.unableToMove()) {
             return false;
-        } else if (this.tamable.distanceToSqr((Entity) livingentity) < (double) (this.startDistance * this.startDistance)) {
+        } else if (this.tamable.distanceToSqr((Entity) entityliving) < (double) (this.startDistance * this.startDistance)) {
             return false;
         } else {
-            this.owner = livingentity;
+            this.owner = entityliving;
             return true;
         }
     }
 
     @Override
-    @Override
     public boolean canContinueToUse() {
         return this.navigation.isDone() ? false : (this.unableToMove() ? false : this.tamable.distanceToSqr((Entity) this.owner) > (double) (this.stopDistance * this.stopDistance));
     }
@@ -75,7 +78,6 @@
     }
 
     @Override
-    @Override
     public void start() {
         this.timeToRecalcPath = 0;
         this.oldWaterCost = this.tamable.getPathfindingMalus(BlockPathTypes.WATER);
@@ -83,7 +85,6 @@
     }
 
     @Override
-    @Override
     public void stop() {
         this.owner = null;
         this.navigation.stop();
@@ -91,7 +92,6 @@
     }
 
     @Override
-    @Override
     public void tick() {
         this.tamable.getLookControl().setLookAt(this.owner, 10.0F, (float) this.tamable.getMaxHeadXRot());
         if (--this.timeToRecalcPath <= 0) {
@@ -106,13 +106,13 @@
     }
 
     private void teleportToOwner() {
-        BlockPos blockpos = this.owner.blockPosition();
+        BlockPos blockposition = this.owner.blockPosition();
 
         for (int i = 0; i < 10; ++i) {
             int j = this.randomIntInclusive(-3, 3);
             int k = this.randomIntInclusive(-1, 1);
             int l = this.randomIntInclusive(-3, 3);
-            boolean flag = this.maybeTeleportTo(blockpos.getX() + j, blockpos.getY() + k, blockpos.getZ() + l);
+            boolean flag = this.maybeTeleportTo(blockposition.getX() + j, blockposition.getY() + k, blockposition.getZ() + l);
 
             if (flag) {
                 return;
@@ -121,37 +121,44 @@
 
     }
 
-    private boolean maybeTeleportTo(int i, int j, int k) {
-        if (Math.abs((double) i - this.owner.getX()) < 2.0D && Math.abs((double) k - this.owner.getZ()) < 2.0D) {
+    private boolean maybeTeleportTo(int x, int y, int z) {
+        if (Math.abs((double) x - this.owner.getX()) < 2.0D && Math.abs((double) z - this.owner.getZ()) < 2.0D) {
             return false;
-        } else if (!this.canTeleportTo(new BlockPos(i, j, k))) {
+        } else if (!this.canTeleportTo(new BlockPos(x, y, z))) {
             return false;
         } else {
-            this.tamable.moveTo((double) i + 0.5D, (double) j, (double) k + 0.5D, this.tamable.getYRot(), this.tamable.getXRot());
+            // CraftBukkit start
+            EntityTeleportEvent event = CraftEventFactory.callEntityTeleportEvent(this.tamable, (double) x + 0.5D, (double) y, (double) z + 0.5D);
+            if (event.isCancelled()) {
+                return false;
+            }
+            Location to = event.getTo();
+            this.tamable.moveTo(to.getX(), to.getY(), to.getZ(), to.getYaw(), to.getPitch());
+            // CraftBukkit end
             this.navigation.stop();
             return true;
         }
     }
 
-    private boolean canTeleportTo(BlockPos blockpos) {
-        BlockPathTypes blockpathtypes = WalkNodeEvaluator.getBlockPathTypeStatic(this.level, blockpos.mutable());
+    private boolean canTeleportTo(BlockPos pos) {
+        BlockPathTypes pathtype = WalkNodeEvaluator.getBlockPathTypeStatic(this.level, pos.mutable());
 
-        if (blockpathtypes != BlockPathTypes.WALKABLE) {
+        if (pathtype != BlockPathTypes.WALKABLE) {
             return false;
         } else {
-            BlockState blockstate = this.level.getBlockState(blockpos.below());
+            IBlockData iblockdata = this.level.getBlockState(pos.below());
 
-            if (!this.canFly && blockstate.getBlock() instanceof LeavesBlock) {
+            if (!this.canFly && iblockdata.getBlock() instanceof LeavesBlock) {
                 return false;
             } else {
-                BlockPos blockpos1 = blockpos.subtract(this.tamable.blockPosition());
+                BlockPos blockposition1 = pos.subtract(this.tamable.blockPosition());
 
-                return this.level.noCollision(this.tamable, this.tamable.getBoundingBox().move(blockpos1));
+                return this.level.noCollision(this.tamable, this.tamable.getBoundingBox().move(blockposition1));
             }
         }
     }
 
-    private int randomIntInclusive(int i, int j) {
-        return this.tamable.getRandom().nextInt(j - i + 1) + i;
+    private int randomIntInclusive(int min, int max) {
+        return this.tamable.getRandom().nextInt(max - min + 1) + min;
     }
 }
