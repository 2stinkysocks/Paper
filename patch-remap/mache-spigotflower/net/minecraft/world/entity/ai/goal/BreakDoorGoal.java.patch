--- a/net/minecraft/world/entity/ai/goal/BreakDoorGoal.java
+++ b/net/minecraft/world/entity/ai/goal/BreakDoorGoal.java
@@ -14,16 +14,16 @@
     protected int lastBreakProgress;
     protected int doorBreakTime;
 
-    public BreakDoorGoal(Mob mob, Predicate<Difficulty> predicate) {
+    public BreakDoorGoal(Mob mob, Predicate<Difficulty> validDifficulties) {
         super(mob);
         this.lastBreakProgress = -1;
         this.doorBreakTime = -1;
-        this.validDifficulties = predicate;
+        this.validDifficulties = validDifficulties;
     }
 
-    public BreakDoorGoal(Mob mob, int i, Predicate<Difficulty> predicate) {
-        this(mob, predicate);
-        this.doorBreakTime = i;
+    public BreakDoorGoal(Mob mob, int doorBreakTime, Predicate<Difficulty> validDifficulties) {
+        this(mob, validDifficulties);
+        this.doorBreakTime = doorBreakTime;
     }
 
     protected int getDoorBreakTime() {
@@ -31,33 +31,28 @@
     }
 
     @Override
-    @Override
     public boolean canUse() {
         return !super.canUse() ? false : (!this.mob.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) ? false : this.isValidDifficulty(this.mob.level().getDifficulty()) && !this.isOpen());
     }
 
     @Override
-    @Override
     public void start() {
         super.start();
         this.breakTime = 0;
     }
 
     @Override
-    @Override
     public boolean canContinueToUse() {
         return this.breakTime <= this.getDoorBreakTime() && !this.isOpen() && this.doorPos.closerToCenterThan(this.mob.position(), 2.0D) && this.isValidDifficulty(this.mob.level().getDifficulty());
     }
 
     @Override
-    @Override
     public void stop() {
         super.stop();
         this.mob.level().destroyBlockProgress(this.mob.getId(), this.doorPos, -1);
     }
 
     @Override
-    @Override
     public void tick() {
         super.tick();
         if (this.mob.getRandom().nextInt(20) == 0) {
@@ -76,6 +71,12 @@
         }
 
         if (this.breakTime == this.getDoorBreakTime() && this.isValidDifficulty(this.mob.level().getDifficulty())) {
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityBreakDoorEvent(this.mob, this.doorPos).isCancelled()) {
+                this.start();
+                return;
+            }
+            // CraftBukkit end
             this.mob.level().removeBlock(this.doorPos, false);
             this.mob.level().levelEvent(1021, this.doorPos, 0);
             this.mob.level().levelEvent(2001, this.doorPos, Block.getId(this.mob.level().getBlockState(this.doorPos)));
