--- a/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
+++ b/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
@@ -21,10 +21,15 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.IBlockData;
+import net.minecraft.world.level.gameevent.GameEvent;
+
+// CraftBukkit start
+import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.CropBlock;
 import net.minecraft.world.level.block.FarmBlock;
-import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.gameevent.GameEvent;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
 
 public class HarvestFarmland extends Behavior<Villager> {
 
@@ -40,113 +45,113 @@
         super(ImmutableMap.of(MemoryModuleType.LOOK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.SECONDARY_JOB_SITE, MemoryStatus.VALUE_PRESENT));
     }
 
-    @Override
-    protected boolean checkExtraStartConditions(ServerLevel serverlevel, Villager villager) {
-        if (!serverlevel.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+    protected boolean checkExtraStartConditions(ServerLevel level, Villager owner) {
+        if (!level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
             return false;
-        } else if (villager.getVillagerData().getProfession() != VillagerProfession.FARMER) {
+        } else if (owner.getVillagerData().getProfession() != VillagerProfession.FARMER) {
             return false;
         } else {
-            BlockPos.MutableBlockPos blockpos_mutableblockpos = villager.blockPosition().mutable();
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = owner.blockPosition().mutable();
 
             this.validFarmlandAroundVillager.clear();
 
             for (int i = -1; i <= 1; ++i) {
                 for (int j = -1; j <= 1; ++j) {
                     for (int k = -1; k <= 1; ++k) {
-                        blockpos_mutableblockpos.set(villager.getX() + (double) i, villager.getY() + (double) j, villager.getZ() + (double) k);
-                        if (this.validPos(blockpos_mutableblockpos, serverlevel)) {
-                            this.validFarmlandAroundVillager.add(new BlockPos(blockpos_mutableblockpos));
+                        blockposition_mutableblockposition.set(owner.getX() + (double) i, owner.getY() + (double) j, owner.getZ() + (double) k);
+                        if (this.validPos(blockposition_mutableblockposition, level)) {
+                            this.validFarmlandAroundVillager.add(new BlockPos(blockposition_mutableblockposition));
                         }
                     }
                 }
             }
 
-            this.aboveFarmlandPos = this.getValidFarmland(serverlevel);
+            this.aboveFarmlandPos = this.getValidFarmland(level);
             return this.aboveFarmlandPos != null;
         }
     }
 
     @Nullable
-    private BlockPos getValidFarmland(ServerLevel serverlevel) {
-        return this.validFarmlandAroundVillager.isEmpty() ? null : (BlockPos) this.validFarmlandAroundVillager.get(serverlevel.getRandom().nextInt(this.validFarmlandAroundVillager.size()));
+    private BlockPos getValidFarmland(ServerLevel serverLevel) {
+        return this.validFarmlandAroundVillager.isEmpty() ? null : (BlockPos) this.validFarmlandAroundVillager.get(serverLevel.getRandom().nextInt(this.validFarmlandAroundVillager.size()));
     }
 
-    private boolean validPos(BlockPos blockpos, ServerLevel serverlevel) {
-        BlockState blockstate = serverlevel.getBlockState(blockpos);
-        Block block = blockstate.getBlock();
-        Block block1 = serverlevel.getBlockState(blockpos.below()).getBlock();
+    private boolean validPos(BlockPos pos, ServerLevel serverLevel) {
+        IBlockData iblockdata = serverLevel.getBlockState(pos);
+        Block block = iblockdata.getBlock();
+        Block block1 = serverLevel.getBlockState(pos.below()).getBlock();
 
-        return block instanceof CropBlock && ((CropBlock) block).isMaxAge(blockstate) || blockstate.isAir() && block1 instanceof FarmBlock;
+        return block instanceof CropBlock && ((CropBlock) block).isMaxAge(iblockdata) || iblockdata.isAir() && block1 instanceof FarmBlock;
     }
 
-    @Override
-    protected void start(ServerLevel serverlevel, Villager villager, long i) {
-        if (i > this.nextOkStartTime && this.aboveFarmlandPos != null) {
-            villager.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, (Object) (new BlockPosTracker(this.aboveFarmlandPos)));
-            villager.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (Object) (new WalkTarget(new BlockPosTracker(this.aboveFarmlandPos), 0.5F, 1)));
+    protected void start(ServerLevel level, Villager entity, long gameTime) {
+        if (gameTime > this.nextOkStartTime && this.aboveFarmlandPos != null) {
+            entity.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, (new BlockPosTracker(this.aboveFarmlandPos))); // CraftBukkit - decompile error
+            entity.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (new WalkTarget(new BlockPosTracker(this.aboveFarmlandPos), 0.5F, 1))); // CraftBukkit - decompile error
         }
 
     }
 
-    @Override
-    protected void stop(ServerLevel serverlevel, Villager villager, long i) {
-        villager.getBrain().eraseMemory(MemoryModuleType.LOOK_TARGET);
-        villager.getBrain().eraseMemory(MemoryModuleType.WALK_TARGET);
+    protected void stop(ServerLevel level, Villager entity, long gameTime) {
+        entity.getBrain().eraseMemory(MemoryModuleType.LOOK_TARGET);
+        entity.getBrain().eraseMemory(MemoryModuleType.WALK_TARGET);
         this.timeWorkedSoFar = 0;
-        this.nextOkStartTime = i + 40L;
+        this.nextOkStartTime = gameTime + 40L;
     }
 
-    @Override
-    protected void tick(ServerLevel serverlevel, Villager villager, long i) {
-        if (this.aboveFarmlandPos == null || this.aboveFarmlandPos.closerToCenterThan(villager.position(), 1.0D)) {
-            if (this.aboveFarmlandPos != null && i > this.nextOkStartTime) {
-                BlockState blockstate = serverlevel.getBlockState(this.aboveFarmlandPos);
-                Block block = blockstate.getBlock();
-                Block block1 = serverlevel.getBlockState(this.aboveFarmlandPos.below()).getBlock();
+    protected void tick(ServerLevel level, Villager owner, long gameTime) {
+        if (this.aboveFarmlandPos == null || this.aboveFarmlandPos.closerToCenterThan(owner.position(), 1.0D)) {
+            if (this.aboveFarmlandPos != null && gameTime > this.nextOkStartTime) {
+                IBlockData iblockdata = level.getBlockState(this.aboveFarmlandPos);
+                Block block = iblockdata.getBlock();
+                Block block1 = level.getBlockState(this.aboveFarmlandPos.below()).getBlock();
 
-                if (block instanceof CropBlock && ((CropBlock) block).isMaxAge(blockstate)) {
-                    serverlevel.destroyBlock(this.aboveFarmlandPos, true, villager);
+                if (block instanceof CropBlock && ((CropBlock) block).isMaxAge(iblockdata)) {
+                    if (CraftEventFactory.callEntityChangeBlockEvent(owner, this.aboveFarmlandPos, Blocks.AIR.defaultBlockState())) { // CraftBukkit
+                    level.destroyBlock(this.aboveFarmlandPos, true, owner);
+                    } // CraftBukkit
                 }
 
-                if (blockstate.isAir() && block1 instanceof FarmBlock && villager.hasFarmSeeds()) {
-                    SimpleContainer simplecontainer = villager.getInventory();
+                if (iblockdata.isAir() && block1 instanceof FarmBlock && owner.hasFarmSeeds()) {
+                    SimpleContainer inventorysubcontainer = owner.getInventory();
 
-                    for (int j = 0; j < simplecontainer.getContainerSize(); ++j) {
-                        ItemStack itemstack = simplecontainer.getItem(j);
+                    for (int j = 0; j < inventorysubcontainer.getContainerSize(); ++j) {
+                        ItemStack itemstack = inventorysubcontainer.getItem(j);
                         boolean flag = false;
 
                         if (!itemstack.isEmpty() && itemstack.is(ItemTags.VILLAGER_PLANTABLE_SEEDS)) {
                             Item item = itemstack.getItem();
 
                             if (item instanceof BlockItem) {
-                                BlockItem blockitem = (BlockItem) item;
-                                BlockState blockstate1 = blockitem.getBlock().defaultBlockState();
+                                BlockItem itemblock = (BlockItem) item;
+                                IBlockData iblockdata1 = itemblock.getBlock().defaultBlockState();
 
-                                serverlevel.setBlockAndUpdate(this.aboveFarmlandPos, blockstate1);
-                                serverlevel.gameEvent(GameEvent.BLOCK_PLACE, this.aboveFarmlandPos, GameEvent.Context.of(villager, blockstate1));
+                                if (CraftEventFactory.callEntityChangeBlockEvent(owner, this.aboveFarmlandPos, iblockdata1)) { // CraftBukkit
+                                level.setBlockAndUpdate(this.aboveFarmlandPos, iblockdata1);
+                                level.gameEvent(GameEvent.BLOCK_PLACE, this.aboveFarmlandPos, GameEvent.Context.of(owner, iblockdata1));
                                 flag = true;
+                                } // CraftBukkit
                             }
                         }
 
                         if (flag) {
-                            serverlevel.playSound((Player) null, (double) this.aboveFarmlandPos.getX(), (double) this.aboveFarmlandPos.getY(), (double) this.aboveFarmlandPos.getZ(), SoundEvents.CROP_PLANTED, SoundSource.BLOCKS, 1.0F, 1.0F);
+                            level.playSound((Player) null, (double) this.aboveFarmlandPos.getX(), (double) this.aboveFarmlandPos.getY(), (double) this.aboveFarmlandPos.getZ(), SoundEvents.CROP_PLANTED, SoundSource.BLOCKS, 1.0F, 1.0F);
                             itemstack.shrink(1);
                             if (itemstack.isEmpty()) {
-                                simplecontainer.setItem(j, ItemStack.EMPTY);
+                                inventorysubcontainer.setItem(j, ItemStack.EMPTY);
                             }
                             break;
                         }
                     }
                 }
 
-                if (block instanceof CropBlock && !((CropBlock) block).isMaxAge(blockstate)) {
+                if (block instanceof CropBlock && !((CropBlock) block).isMaxAge(iblockdata)) {
                     this.validFarmlandAroundVillager.remove(this.aboveFarmlandPos);
-                    this.aboveFarmlandPos = this.getValidFarmland(serverlevel);
+                    this.aboveFarmlandPos = this.getValidFarmland(level);
                     if (this.aboveFarmlandPos != null) {
-                        this.nextOkStartTime = i + 20L;
-                        villager.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (Object) (new WalkTarget(new BlockPosTracker(this.aboveFarmlandPos), 0.5F, 1)));
-                        villager.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, (Object) (new BlockPosTracker(this.aboveFarmlandPos)));
+                        this.nextOkStartTime = gameTime + 20L;
+                        owner.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (new WalkTarget(new BlockPosTracker(this.aboveFarmlandPos), 0.5F, 1))); // CraftBukkit - decompile error
+                        owner.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, (new BlockPosTracker(this.aboveFarmlandPos))); // CraftBukkit - decompile error
                     }
                 }
             }
@@ -155,8 +160,7 @@
         }
     }
 
-    @Override
-    protected boolean canStillUse(ServerLevel serverlevel, Villager villager, long i) {
+    protected boolean canStillUse(ServerLevel level, Villager entity, long gameTime) {
         return this.timeWorkedSoFar < 200;
     }
 }
