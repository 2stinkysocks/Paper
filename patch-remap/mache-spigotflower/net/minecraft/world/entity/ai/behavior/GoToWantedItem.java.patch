--- a/net/minecraft/world/entity/ai/behavior/GoToWantedItem.java
+++ b/net/minecraft/world/entity/ai/behavior/GoToWantedItem.java
@@ -13,25 +13,39 @@
 
     public GoToWantedItem() {}
 
-    public static BehaviorControl<LivingEntity> create(float f, boolean flag, int i) {
-        return create((livingentity) -> {
+    public static BehaviorControl<LivingEntity> create(float speedModifier, boolean hasTarget, int maxDistToWalk) {
+        return create((entityliving) -> {
             return true;
-        }, f, flag, i);
+        }, speedModifier, hasTarget, maxDistToWalk);
     }
 
-    public static <E extends LivingEntity> BehaviorControl<E> create(Predicate<E> predicate, float f, boolean flag, int i) {
-        return BehaviorBuilder.create((behaviorbuilder_instance) -> {
-            BehaviorBuilder<E, ? extends MemoryAccessor<? extends K1, WalkTarget>> behaviorbuilder = flag ? behaviorbuilder_instance.registered(MemoryModuleType.WALK_TARGET) : behaviorbuilder_instance.absent(MemoryModuleType.WALK_TARGET);
+    public static <E extends LivingEntity> BehaviorControl<E> create(Predicate<E> canWalkToItem, float speedModifier, boolean hasTarget, int maxDistToWalk) {
+        return BehaviorBuilder.create((behaviorbuilder_b) -> {
+            BehaviorBuilder<E, ? extends MemoryAccessor<? extends K1, WalkTarget>> behaviorbuilder = hasTarget ? behaviorbuilder_b.registered(MemoryModuleType.WALK_TARGET) : behaviorbuilder_b.absent(MemoryModuleType.WALK_TARGET);
 
-            return behaviorbuilder_instance.group(behaviorbuilder_instance.registered(MemoryModuleType.LOOK_TARGET), behaviorbuilder, behaviorbuilder_instance.present(MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM), behaviorbuilder_instance.registered(MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS)).apply(behaviorbuilder_instance, (memoryaccessor, memoryaccessor1, memoryaccessor2, memoryaccessor3) -> {
-                return (serverlevel, livingentity, j) -> {
-                    ItemEntity itementity = (ItemEntity) behaviorbuilder_instance.get(memoryaccessor2);
+            return behaviorbuilder_b.group(behaviorbuilder_b.registered(MemoryModuleType.LOOK_TARGET), behaviorbuilder, behaviorbuilder_b.present(MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM), behaviorbuilder_b.registered(MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS)).apply(behaviorbuilder_b, (memoryaccessor, memoryaccessor1, memoryaccessor2, memoryaccessor3) -> {
+                return (worldserver, entityliving, j) -> {
+                    ItemEntity entityitem = (ItemEntity) behaviorbuilder_b.get(memoryaccessor2);
 
-                    if (behaviorbuilder_instance.tryGet(memoryaccessor3).isEmpty() && predicate.test(livingentity) && itementity.closerThan(livingentity, (double) i) && livingentity.level().getWorldBorder().isWithinBounds(itementity.blockPosition())) {
-                        WalkTarget walktarget = new WalkTarget(new EntityTracker(itementity, false), f, 0);
+                    if (behaviorbuilder_b.tryGet(memoryaccessor3).isEmpty() && canWalkToItem.test(entityliving) && entityitem.closerThan(entityliving, (double) maxDistToWalk) && entityliving.level().getWorldBorder().isWithinBounds(entityitem.blockPosition())) {
+                        // CraftBukkit start
+                        if (entityliving instanceof net.minecraft.world.entity.animal.allay.Allay) {
+                            org.bukkit.event.entity.EntityTargetEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTargetEvent(entityliving, entityitem, org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_ENTITY);
 
-                        memoryaccessor.set(new EntityTracker(itementity, true));
-                        memoryaccessor1.set(walktarget);
+                            if (event.isCancelled()) {
+                                return false;
+                            }
+                            if (!(event.getTarget() instanceof ItemEntity)) {
+                                memoryaccessor2.erase();
+                            }
+
+                            entityitem = (ItemEntity) ((org.bukkit.craftbukkit.entity.CraftEntity) event.getTarget()).getHandle();
+                        }
+                        // CraftBukkit end
+                        WalkTarget memorytarget = new WalkTarget(new EntityTracker(entityitem, false), speedModifier, 0);
+
+                        memoryaccessor.set(new EntityTracker(entityitem, true));
+                        memoryaccessor1.set(memorytarget);
                         return true;
                     } else {
                         return false;
