--- a/net/minecraft/world/entity/ai/behavior/BabyFollowAdult.java
+++ b/net/minecraft/world/entity/ai/behavior/BabyFollowAdult.java
@@ -7,31 +7,48 @@
 import net.minecraft.world.entity.ai.behavior.declarative.BehaviorBuilder;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.WalkTarget;
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+// CraftBukkit end
 
 public class BabyFollowAdult {
 
     public BabyFollowAdult() {}
 
-    public static OneShot<AgeableMob> create(UniformInt uniformint, float f) {
-        return create(uniformint, (livingentity) -> {
-            return f;
+    public static OneShot<AgeableMob> create(UniformInt followRange, float speedModifier) {
+        return create(followRange, (entityliving) -> {
+            return speedModifier;
         });
     }
 
-    public static OneShot<AgeableMob> create(UniformInt uniformint, Function<LivingEntity, Float> function) {
-        return BehaviorBuilder.create((behaviorbuilder_instance) -> {
-            return behaviorbuilder_instance.group(behaviorbuilder_instance.present(MemoryModuleType.NEAREST_VISIBLE_ADULT), behaviorbuilder_instance.registered(MemoryModuleType.LOOK_TARGET), behaviorbuilder_instance.absent(MemoryModuleType.WALK_TARGET)).apply(behaviorbuilder_instance, (memoryaccessor, memoryaccessor1, memoryaccessor2) -> {
-                return (serverlevel, ageablemob, i) -> {
-                    if (!ageablemob.isBaby()) {
+    public static OneShot<AgeableMob> create(UniformInt followRange, Function<LivingEntity, Float> speedModifier) {
+        return BehaviorBuilder.create((behaviorbuilder_b) -> {
+            return behaviorbuilder_b.group(behaviorbuilder_b.present(MemoryModuleType.NEAREST_VISIBLE_ADULT), behaviorbuilder_b.registered(MemoryModuleType.LOOK_TARGET), behaviorbuilder_b.absent(MemoryModuleType.WALK_TARGET)).apply(behaviorbuilder_b, (memoryaccessor, memoryaccessor1, memoryaccessor2) -> {
+                return (worldserver, entityageable, i) -> {
+                    if (!entityageable.isBaby()) {
                         return false;
                     } else {
-                        AgeableMob ageablemob1 = (AgeableMob) behaviorbuilder_instance.get(memoryaccessor);
+                        LivingEntity entityageable1 = (AgeableMob) behaviorbuilder_b.get(memoryaccessor); // CraftBukkit - type
 
-                        if (ageablemob.closerThan(ageablemob1, (double) (uniformint.getMaxValue() + 1)) && !ageablemob.closerThan(ageablemob1, (double) uniformint.getMinValue())) {
-                            WalkTarget walktarget = new WalkTarget(new EntityTracker(ageablemob1, false), (Float) function.apply(ageablemob), uniformint.getMinValue() - 1);
+                        if (entityageable.closerThan(entityageable1, (double) (followRange.getMaxValue() + 1)) && !entityageable.closerThan(entityageable1, (double) followRange.getMinValue())) {
+                            // CraftBukkit start
+                            EntityTargetLivingEntityEvent event = CraftEventFactory.callEntityTargetLivingEvent(entityageable, entityageable1, EntityTargetEvent.TargetReason.FOLLOW_LEADER);
+                            if (event.isCancelled()) {
+                                return false;
+                            }
+                            if (event.getTarget() == null) {
+                                memoryaccessor.erase();
+                                return true;
+                            }
+                            entityageable1 = ((CraftLivingEntity) event.getTarget()).getHandle();
+                            // CraftBukkit end
+                            WalkTarget memorytarget = new WalkTarget(new EntityTracker(entityageable1, false), (Float) speedModifier.apply(entityageable), followRange.getMinValue() - 1);
 
-                            memoryaccessor1.set(new EntityTracker(ageablemob1, true));
-                            memoryaccessor2.set(walktarget);
+                            memoryaccessor1.set(new EntityTracker(entityageable1, true));
+                            memoryaccessor2.set(memorytarget);
                             return true;
                         } else {
                             return false;
