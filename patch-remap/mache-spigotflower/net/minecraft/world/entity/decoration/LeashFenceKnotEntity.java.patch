--- a/net/minecraft/world/entity/decoration/LeashFenceKnotEntity.java
+++ b/net/minecraft/world/entity/decoration/LeashFenceKnotEntity.java
@@ -9,15 +9,17 @@
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
+import net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -25,22 +27,23 @@
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
 
 public class LeashFenceKnotEntity extends HangingEntity {
 
     public static final double OFFSET_Y = 0.375D;
 
-    public LeashFenceKnotEntity(EntityType<? extends LeashFenceKnotEntity> entitytype, Level level) {
-        super(entitytype, level);
+    public LeashFenceKnotEntity(EntityType<? extends LeashFenceKnotEntity> entityType, Level level) {
+        super(entityType, level);
     }
 
-    public LeashFenceKnotEntity(Level level, BlockPos blockpos) {
-        super(EntityType.LEASH_KNOT, level, blockpos);
-        this.setPos((double) blockpos.getX(), (double) blockpos.getY(), (double) blockpos.getZ());
+    public LeashFenceKnotEntity(Level level, BlockPos pos) {
+        super(EntityType.LEASH_KNOT, level, pos);
+        this.setPos((double) pos.getX(), (double) pos.getY(), (double) pos.getZ());
     }
 
     @Override
-    @Override
     protected void recalculateBoundingBox() {
         this.setPosRaw((double) this.pos.getX() + 0.5D, (double) this.pos.getY() + 0.375D, (double) this.pos.getZ() + 0.5D);
         double d0 = (double) this.getType().getWidth() / 2.0D;
@@ -50,50 +53,41 @@
     }
 
     @Override
-    @Override
-    public void setDirection(Direction direction) {}
+    public void setDirection(Direction facingDirection) {}
 
     @Override
-    @Override
     public int getWidth() {
         return 9;
     }
 
     @Override
-    @Override
     public int getHeight() {
         return 9;
     }
 
     @Override
-    @Override
-    protected float getEyeHeight(Pose pose, EntityDimensions entitydimensions) {
+    protected float getEyeHeight(EntityPose pose, EntityDimensions size) {
         return 0.0625F;
     }
 
     @Override
-    @Override
-    public boolean shouldRenderAtSqrDistance(double d0) {
-        return d0 < 1024.0D;
+    public boolean shouldRenderAtSqrDistance(double distance) {
+        return distance < 1024.0D;
     }
 
     @Override
-    @Override
-    public void dropItem(@Nullable Entity entity) {
+    public void dropItem(@Nullable Entity brokenEntity) {
         this.playSound(SoundEvents.LEASH_KNOT_BREAK, 1.0F, 1.0F);
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {}
+    public void addAdditionalSaveData(CompoundTag compound) {}
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {}
+    public void readAdditionalSaveData(CompoundTag compound) {}
 
     @Override
-    @Override
-    public InteractionResult interact(Player player, InteractionHand interactionhand) {
+    public InteractionResult interact(Player player, EnumHand hand) {
         if (this.level().isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
@@ -103,10 +97,16 @@
             Iterator iterator = list.iterator();
 
             while (iterator.hasNext()) {
-                Mob mob = (Mob) iterator.next();
+                Mob entityinsentient = (Mob) iterator.next();
 
-                if (mob.getLeashHolder() == player) {
-                    mob.setLeashedTo(this, true);
+                if (entityinsentient.getLeashHolder() == player) {
+                    // CraftBukkit start
+                    if (CraftEventFactory.callPlayerLeashEntityEvent(entityinsentient, this, player, hand).isCancelled()) {
+                        ((ServerPlayer) player).connection.send(new ClientboundSetEntityLinkPacket(entityinsentient, entityinsentient.getLeashHolder()));
+                        continue;
+                    }
+                    // CraftBukkit end
+                    entityinsentient.setLeashedTo(this, true);
                     flag = true;
                 }
             }
@@ -114,18 +114,32 @@
             boolean flag1 = false;
 
             if (!flag) {
-                this.discard();
-                if (player.getAbilities().instabuild) {
+                // CraftBukkit start - Move below
+                // this.discard();
+                boolean die = true;
+                // CraftBukkit end
+                if (true || player.getAbilities().instabuild) { // CraftBukkit - Process for non-creative as well
                     Iterator iterator1 = list.iterator();
 
                     while (iterator1.hasNext()) {
-                        Mob mob1 = (Mob) iterator1.next();
+                        Mob entityinsentient1 = (Mob) iterator1.next();
 
-                        if (mob1.isLeashed() && mob1.getLeashHolder() == this) {
-                            mob1.dropLeash(true, false);
+                        if (entityinsentient1.isLeashed() && entityinsentient1.getLeashHolder() == this) {
+                            // CraftBukkit start
+                            if (CraftEventFactory.callPlayerUnleashEntityEvent(entityinsentient1, player, hand).isCancelled()) {
+                                die = false;
+                                continue;
+                            }
+                            entityinsentient1.dropLeash(true, !player.getAbilities().instabuild); // false -> survival mode boolean
+                            // CraftBukkit end
                             flag1 = true;
                         }
                     }
+                    // CraftBukkit start
+                    if (die) {
+                        this.discard();
+                    }
+                    // CraftBukkit end
                 }
             }
 
@@ -138,54 +152,49 @@
     }
 
     @Override
-    @Override
     public boolean survives() {
         return this.level().getBlockState(this.pos).is(BlockTags.FENCES);
     }
 
-    public static LeashFenceKnotEntity getOrCreateKnot(Level level, BlockPos blockpos) {
-        int i = blockpos.getX();
-        int j = blockpos.getY();
-        int k = blockpos.getZ();
+    public static LeashFenceKnotEntity getOrCreateKnot(Level level, BlockPos pos) {
+        int i = pos.getX();
+        int j = pos.getY();
+        int k = pos.getZ();
         List<LeashFenceKnotEntity> list = level.getEntitiesOfClass(LeashFenceKnotEntity.class, new AABB((double) i - 1.0D, (double) j - 1.0D, (double) k - 1.0D, (double) i + 1.0D, (double) j + 1.0D, (double) k + 1.0D));
         Iterator iterator = list.iterator();
 
-        LeashFenceKnotEntity leashfenceknotentity;
+        LeashFenceKnotEntity entityleash;
 
         do {
             if (!iterator.hasNext()) {
-                LeashFenceKnotEntity leashfenceknotentity1 = new LeashFenceKnotEntity(level, blockpos);
+                LeashFenceKnotEntity entityleash1 = new LeashFenceKnotEntity(level, pos);
 
-                level.addFreshEntity(leashfenceknotentity1);
-                return leashfenceknotentity1;
+                level.addFreshEntity(entityleash1);
+                return entityleash1;
             }
 
-            leashfenceknotentity = (LeashFenceKnotEntity) iterator.next();
-        } while (!leashfenceknotentity.getPos().equals(blockpos));
+            entityleash = (LeashFenceKnotEntity) iterator.next();
+        } while (!entityleash.getPos().equals(pos));
 
-        return leashfenceknotentity;
+        return entityleash;
     }
 
     @Override
-    @Override
     public void playPlacementSound() {
         this.playSound(SoundEvents.LEASH_KNOT_PLACE, 1.0F, 1.0F);
     }
 
     @Override
-    @Override
     public Packet<ClientGamePacketListener> getAddEntityPacket() {
         return new ClientboundAddEntityPacket(this, 0, this.getPos());
     }
 
     @Override
-    @Override
-    public Vec3 getRopeHoldPosition(float f) {
-        return this.getPosition(f).add(0.0D, 0.2D, 0.0D);
+    public Vec3 getRopeHoldPosition(float partialTicks) {
+        return this.getPosition(partialTicks).add(0.0D, 0.2D, 0.0D);
     }
 
     @Override
-    @Override
     public ItemStack getPickResult() {
         return new ItemStack(Items.LEAD);
     }
