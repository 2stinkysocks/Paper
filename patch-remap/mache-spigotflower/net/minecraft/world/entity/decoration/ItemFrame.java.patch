--- a/net/minecraft/world/entity/decoration/ItemFrame.java
+++ b/net/minecraft/world/entity/decoration/ItemFrame.java
@@ -16,14 +16,14 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.DamageTypeTags;
 import net.minecraft.util.Mth;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.MoverType;
-import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.EnumMoveType;
 import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
@@ -33,7 +33,7 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.DiodeBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.AABB;
@@ -44,50 +44,47 @@
 public class ItemFrame extends HangingEntity {
 
     private static final Logger LOGGER = LogUtils.getLogger();
-    private static final EntityDataAccessor<ItemStack> DATA_ITEM = SynchedEntityData.defineId(ItemFrame.class, EntityDataSerializers.ITEM_STACK);
-    private static final EntityDataAccessor<Integer> DATA_ROTATION = SynchedEntityData.defineId(ItemFrame.class, EntityDataSerializers.INT);
+    public static final EntityDataAccessor<ItemStack> DATA_ITEM = SynchedEntityData.defineId(ItemFrame.class, EntityDataSerializers.ITEM_STACK);
+    public static final EntityDataAccessor<Integer> DATA_ROTATION = SynchedEntityData.defineId(ItemFrame.class, EntityDataSerializers.INT);
     public static final int NUM_ROTATIONS = 8;
-    private float dropChance;
-    private boolean fixed;
+    public float dropChance;
+    public boolean fixed;
 
-    public ItemFrame(EntityType<? extends ItemFrame> entitytype, Level level) {
-        super(entitytype, level);
+    public ItemFrame(EntityType<? extends ItemFrame> entityType, Level level) {
+        super(entityType, level);
         this.dropChance = 1.0F;
     }
 
-    public ItemFrame(Level level, BlockPos blockpos, Direction direction) {
-        this(EntityType.ITEM_FRAME, level, blockpos, direction);
+    public ItemFrame(Level level, BlockPos pos, Direction facingDirection) {
+        this(EntityType.ITEM_FRAME, level, pos, facingDirection);
     }
 
-    public ItemFrame(EntityType<? extends ItemFrame> entitytype, Level level, BlockPos blockpos, Direction direction) {
-        super(entitytype, level, blockpos);
+    public ItemFrame(EntityType<? extends ItemFrame> entityType, Level level, BlockPos pos, Direction direction) {
+        super(entityType, level, pos);
         this.dropChance = 1.0F;
         this.setDirection(direction);
     }
 
     @Override
-    @Override
-    protected float getEyeHeight(Pose pose, EntityDimensions entitydimensions) {
+    protected float getEyeHeight(EntityPose pose, EntityDimensions size) {
         return 0.0F;
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         this.getEntityData().define(ItemFrame.DATA_ITEM, ItemStack.EMPTY);
         this.getEntityData().define(ItemFrame.DATA_ROTATION, 0);
     }
 
     @Override
-    @Override
-    protected void setDirection(Direction direction) {
-        Validate.notNull(direction);
-        this.direction = direction;
-        if (direction.getAxis().isHorizontal()) {
+    public void setDirection(Direction facingDirection) {
+        Validate.notNull(facingDirection);
+        this.direction = facingDirection;
+        if (facingDirection.getAxis().isHorizontal()) {
             this.setXRot(0.0F);
             this.setYRot((float) (this.direction.get2DDataValue() * 90));
         } else {
-            this.setXRot((float) (-90 * direction.getAxisDirection().getStep()));
+            this.setXRot((float) (-90 * facingDirection.getAxisDirection().getStep()));
             this.setYRot(0.0F);
         }
 
@@ -97,21 +94,31 @@
     }
 
     @Override
-    @Override
     protected void recalculateBoundingBox() {
         if (this.direction != null) {
+            // CraftBukkit start code moved in to calculateBoundingBox
+            this.setBoundingBox(calculateBoundingBox(this, this.pos, this.direction, this.getWidth(), this.getHeight()));
+            // CraftBukkit end
+        }
+    }
+
+    // CraftBukkit start - break out BB calc into own method
+    public static AABB calculateBoundingBox(@Nullable Entity entity, BlockPos blockPosition, Direction direction, int width, int height) {
+        {
             double d0 = 0.46875D;
-            double d1 = (double) this.pos.getX() + 0.5D - (double) this.direction.getStepX() * 0.46875D;
-            double d2 = (double) this.pos.getY() + 0.5D - (double) this.direction.getStepY() * 0.46875D;
-            double d3 = (double) this.pos.getZ() + 0.5D - (double) this.direction.getStepZ() * 0.46875D;
+            double d1 = (double) blockPosition.getX() + 0.5D - (double) direction.getStepX() * 0.46875D;
+            double d2 = (double) blockPosition.getY() + 0.5D - (double) direction.getStepY() * 0.46875D;
+            double d3 = (double) blockPosition.getZ() + 0.5D - (double) direction.getStepZ() * 0.46875D;
 
-            this.setPosRaw(d1, d2, d3);
-            double d4 = (double) this.getWidth();
-            double d5 = (double) this.getHeight();
-            double d6 = (double) this.getWidth();
-            Direction.Axis direction_axis = this.direction.getAxis();
+            if (entity != null) {
+                entity.setPosRaw(d1, d2, d3);
+            }
+            double d4 = (double) width;
+            double d5 = (double) height;
+            double d6 = (double) width;
+            Direction.Axis enumdirection_enumaxis = direction.getAxis();
 
-            switch (direction_axis) {
+            switch (enumdirection_enumaxis) {
                 case X:
                     d4 = 1.0D;
                     break;
@@ -125,66 +132,67 @@
             d4 /= 32.0D;
             d5 /= 32.0D;
             d6 /= 32.0D;
-            this.setBoundingBox(new AABB(d1 - d4, d2 - d5, d3 - d6, d1 + d4, d2 + d5, d3 + d6));
+            return new AABB(d1 - d4, d2 - d5, d3 - d6, d1 + d4, d2 + d5, d3 + d6);
         }
     }
+    // CraftBukkit end
 
     @Override
-    @Override
     public boolean survives() {
         if (this.fixed) {
             return true;
         } else if (!this.level().noCollision((Entity) this)) {
             return false;
         } else {
-            BlockState blockstate = this.level().getBlockState(this.pos.relative(this.direction.getOpposite()));
+            IBlockData iblockdata = this.level().getBlockState(this.pos.relative(this.direction.getOpposite()));
 
-            return !blockstate.isSolid() && (!this.direction.getAxis().isHorizontal() || !DiodeBlock.isDiode(blockstate)) ? false : this.level().getEntities((Entity) this, this.getBoundingBox(), ItemFrame.HANGING_ENTITY).isEmpty();
+            return !iblockdata.isSolid() && (!this.direction.getAxis().isHorizontal() || !DiodeBlock.isDiode(iblockdata)) ? false : this.level().getEntities((Entity) this, this.getBoundingBox(), ItemFrame.HANGING_ENTITY).isEmpty();
         }
     }
 
     @Override
-    @Override
-    public void move(MoverType movertype, Vec3 vec3) {
+    public void move(EnumMoveType type, Vec3 pos) {
         if (!this.fixed) {
-            super.move(movertype, vec3);
+            super.move(type, pos);
         }
 
     }
 
     @Override
-    @Override
-    public void push(double d0, double d1, double d2) {
+    public void push(double x, double d1, double y) {
         if (!this.fixed) {
-            super.push(d0, d1, d2);
+            super.push(x, d1, y);
         }
 
     }
 
     @Override
-    @Override
     public void kill() {
         this.removeFramedMap(this.getItem());
         super.kill();
     }
 
     @Override
-    @Override
-    public boolean hurt(DamageSource damagesource, float f) {
+    public boolean hurt(DamageSource source, float amount) {
         if (this.fixed) {
-            return !damagesource.is(DamageTypeTags.BYPASSES_INVULNERABILITY) && !damagesource.isCreativePlayer() ? false : super.hurt(damagesource, f);
-        } else if (this.isInvulnerableTo(damagesource)) {
+            return !source.is(DamageTypeTags.BYPASSES_INVULNERABILITY) && !source.isCreativePlayer() ? false : super.hurt(source, amount);
+        } else if (this.isInvulnerableTo(source)) {
             return false;
-        } else if (!damagesource.is(DamageTypeTags.IS_EXPLOSION) && !this.getItem().isEmpty()) {
+        } else if (!source.is(DamageTypeTags.IS_EXPLOSION) && !this.getItem().isEmpty()) {
             if (!this.level().isClientSide) {
-                this.dropItem(damagesource.getEntity(), false);
-                this.gameEvent(GameEvent.BLOCK_CHANGE, damagesource.getEntity());
+                // CraftBukkit start - fire EntityDamageEvent
+                if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount, false) || this.isRemoved()) {
+                    return true;
+                }
+                // CraftBukkit end
+                this.dropItem(source.getEntity(), false);
+                this.gameEvent(GameEvent.BLOCK_CHANGE, source.getEntity());
                 this.playSound(this.getRemoveItemSound(), 1.0F, 1.0F);
             }
 
             return true;
         } else {
-            return super.hurt(damagesource, f);
+            return super.hurt(source, amount);
         }
     }
 
@@ -193,32 +201,28 @@
     }
 
     @Override
-    @Override
     public int getWidth() {
         return 12;
     }
 
     @Override
-    @Override
     public int getHeight() {
         return 12;
     }
 
     @Override
-    @Override
-    public boolean shouldRenderAtSqrDistance(double d0) {
+    public boolean shouldRenderAtSqrDistance(double distance) {
         double d1 = 16.0D;
 
         d1 *= 64.0D * getViewScale();
-        return d0 < d1 * d1;
+        return distance < d1 * d1;
     }
 
     @Override
-    @Override
-    public void dropItem(@Nullable Entity entity) {
+    public void dropItem(@Nullable Entity brokenEntity) {
         this.playSound(this.getBreakSound(), 1.0F, 1.0F);
-        this.dropItem(entity, true);
-        this.gameEvent(GameEvent.BLOCK_CHANGE, entity);
+        this.dropItem(brokenEntity, true);
+        this.gameEvent(GameEvent.BLOCK_CHANGE, brokenEntity);
     }
 
     public SoundEvent getBreakSound() {
@@ -226,7 +230,6 @@
     }
 
     @Override
-    @Override
     public void playPlacementSound() {
         this.playSound(this.getPlaceSound(), 1.0F, 1.0F);
     }
@@ -235,7 +238,7 @@
         return SoundEvents.ITEM_FRAME_PLACE;
     }
 
-    private void dropItem(@Nullable Entity entity, boolean flag) {
+    private void dropItem(@Nullable Entity entity, boolean dropSelf) {
         if (!this.fixed) {
             ItemStack itemstack = this.getItem();
 
@@ -247,15 +250,15 @@
 
             } else {
                 if (entity instanceof Player) {
-                    Player player = (Player) entity;
+                    Player entityhuman = (Player) entity;
 
-                    if (player.getAbilities().instabuild) {
+                    if (entityhuman.getAbilities().instabuild) {
                         this.removeFramedMap(itemstack);
                         return;
                     }
                 }
 
-                if (flag) {
+                if (dropSelf) {
                     this.spawnAtLocation(this.getFrameItemStack());
                 }
 
@@ -271,17 +274,17 @@
         }
     }
 
-    private void removeFramedMap(ItemStack itemstack) {
+    private void removeFramedMap(ItemStack stack) {
         this.getFramedMapId().ifPresent((i) -> {
-            MapItemSavedData mapitemsaveddata = MapItem.getSavedData(i, this.level());
+            MapItemSavedData worldmap = MapItem.getSavedData(i, this.level());
 
-            if (mapitemsaveddata != null) {
-                mapitemsaveddata.removedFromFrame(this.pos, this.getId());
-                mapitemsaveddata.setDirty(true);
+            if (worldmap != null) {
+                worldmap.removedFromFrame(this.pos, this.getId());
+                worldmap.setDirty(true);
             }
 
         });
-        itemstack.setEntityRepresentation((Entity) null);
+        stack.setEntityRepresentation((Entity) null);
     }
 
     public ItemStack getItem() {
@@ -306,18 +309,24 @@
         return this.getFramedMapId().isPresent();
     }
 
-    public void setItem(ItemStack itemstack) {
-        this.setItem(itemstack, true);
+    public void setItem(ItemStack stack) {
+        this.setItem(stack, true);
     }
 
-    public void setItem(ItemStack itemstack, boolean flag) {
+    public void setItem(ItemStack stack, boolean updateNeighbours) {
+        // CraftBukkit start
+        this.setItem(stack, updateNeighbours, true);
+    }
+
+    public void setItem(ItemStack itemstack, boolean flag, boolean playSound) {
+        // CraftBukkit end
         if (!itemstack.isEmpty()) {
             itemstack = itemstack.copyWithCount(1);
         }
 
         this.onItemChanged(itemstack);
         this.getEntityData().set(ItemFrame.DATA_ITEM, itemstack);
-        if (!itemstack.isEmpty()) {
+        if (!itemstack.isEmpty() && playSound) { // CraftBukkit
             this.playSound(this.getAddItemSound(), 1.0F, 1.0F);
         }
 
@@ -332,36 +341,32 @@
     }
 
     @Override
-    @Override
-    public SlotAccess getSlot(int i) {
-        return i == 0 ? new SlotAccess() {
+    public SlotAccess getSlot(int slot) {
+        return slot == 0 ? new SlotAccess() {
             @Override
-            @Override
             public ItemStack get() {
                 return ItemFrame.this.getItem();
             }
 
             @Override
-            @Override
-            public boolean set(ItemStack itemstack) {
-                ItemFrame.this.setItem(itemstack);
+            public boolean set(ItemStack carried) {
+                ItemFrame.this.setItem(carried);
                 return true;
             }
-        } : super.getSlot(i);
+        } : super.getSlot(slot);
     }
 
     @Override
-    @Override
-    public void onSyncedDataUpdated(EntityDataAccessor<?> entitydataaccessor) {
-        if (entitydataaccessor.equals(ItemFrame.DATA_ITEM)) {
+    public void onSyncedDataUpdated(EntityDataAccessor<?> key) {
+        if (key.equals(ItemFrame.DATA_ITEM)) {
             this.onItemChanged(this.getItem());
         }
 
     }
 
-    private void onItemChanged(ItemStack itemstack) {
-        if (!itemstack.isEmpty() && itemstack.getFrame() != this) {
-            itemstack.setEntityRepresentation(this);
+    private void onItemChanged(ItemStack item) {
+        if (!item.isEmpty() && item.getFrame() != this) {
+            item.setEntityRepresentation(this);
         }
 
         this.recalculateBoundingBox();
@@ -371,44 +376,42 @@
         return (Integer) this.getEntityData().get(ItemFrame.DATA_ROTATION);
     }
 
-    public void setRotation(int i) {
-        this.setRotation(i, true);
+    public void setRotation(int rotation) {
+        this.setRotation(rotation, true);
     }
 
-    private void setRotation(int i, boolean flag) {
-        this.getEntityData().set(ItemFrame.DATA_ROTATION, i % 8);
-        if (flag && this.pos != null) {
+    private void setRotation(int rotation, boolean updateNeighbours) {
+        this.getEntityData().set(ItemFrame.DATA_ROTATION, rotation % 8);
+        if (updateNeighbours && this.pos != null) {
             this.level().updateNeighbourForOutputSignal(this.pos, Blocks.AIR);
         }
 
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
         if (!this.getItem().isEmpty()) {
-            compoundtag.put("Item", this.getItem().save(new CompoundTag()));
-            compoundtag.putByte("ItemRotation", (byte) this.getRotation());
-            compoundtag.putFloat("ItemDropChance", this.dropChance);
+            compound.put("Item", this.getItem().save(new CompoundTag()));
+            compound.putByte("ItemRotation", (byte) this.getRotation());
+            compound.putFloat("ItemDropChance", this.dropChance);
         }
 
-        compoundtag.putByte("Facing", (byte) this.direction.get3DDataValue());
-        compoundtag.putBoolean("Invisible", this.isInvisible());
-        compoundtag.putBoolean("Fixed", this.fixed);
+        compound.putByte("Facing", (byte) this.direction.get3DDataValue());
+        compound.putBoolean("Invisible", this.isInvisible());
+        compound.putBoolean("Fixed", this.fixed);
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        CompoundTag compoundtag1 = compoundtag.getCompound("Item");
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        CompoundTag nbttagcompound1 = compound.getCompound("Item");
 
-        if (compoundtag1 != null && !compoundtag1.isEmpty()) {
-            ItemStack itemstack = ItemStack.of(compoundtag1);
+        if (nbttagcompound1 != null && !nbttagcompound1.isEmpty()) {
+            ItemStack itemstack = ItemStack.of(nbttagcompound1);
 
             if (itemstack.isEmpty()) {
-                ItemFrame.LOGGER.warn("Unable to load item from: {}", compoundtag1);
+                ItemFrame.LOGGER.warn("Unable to load item from: {}", nbttagcompound1);
             }
 
             ItemStack itemstack1 = this.getItem();
@@ -418,21 +421,20 @@
             }
 
             this.setItem(itemstack, false);
-            this.setRotation(compoundtag.getByte("ItemRotation"), false);
-            if (compoundtag.contains("ItemDropChance", 99)) {
-                this.dropChance = compoundtag.getFloat("ItemDropChance");
+            this.setRotation(compound.getByte("ItemRotation"), false);
+            if (compound.contains("ItemDropChance", 99)) {
+                this.dropChance = compound.getFloat("ItemDropChance");
             }
         }
 
-        this.setDirection(Direction.from3DDataValue(compoundtag.getByte("Facing")));
-        this.setInvisible(compoundtag.getBoolean("Invisible"));
-        this.fixed = compoundtag.getBoolean("Fixed");
+        this.setDirection(Direction.from3DDataValue(compound.getByte("Facing")));
+        this.setInvisible(compound.getBoolean("Invisible"));
+        this.fixed = compound.getBoolean("Fixed");
     }
 
     @Override
-    @Override
-    public InteractionResult interact(Player player, InteractionHand interactionhand) {
-        ItemStack itemstack = player.getItemInHand(interactionhand);
+    public InteractionResult interact(Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
         boolean flag = !this.getItem().isEmpty();
         boolean flag1 = !itemstack.isEmpty();
 
@@ -442,9 +444,9 @@
             if (!flag) {
                 if (flag1 && !this.isRemoved()) {
                     if (itemstack.is(Items.FILLED_MAP)) {
-                        MapItemSavedData mapitemsaveddata = MapItem.getSavedData(itemstack, this.level());
+                        MapItemSavedData worldmap = MapItem.getSavedData(itemstack, this.level());
 
-                        if (mapitemsaveddata != null && mapitemsaveddata.isTrackedCountOverLimit(256)) {
+                        if (worldmap != null && worldmap.isTrackedCountOverLimit(256)) {
                             return InteractionResult.FAIL;
                         }
                     }
@@ -476,20 +478,17 @@
     }
 
     @Override
-    @Override
     public Packet<ClientGamePacketListener> getAddEntityPacket() {
         return new ClientboundAddEntityPacket(this, this.direction.get3DDataValue(), this.getPos());
     }
 
     @Override
-    @Override
-    public void recreateFromPacket(ClientboundAddEntityPacket clientboundaddentitypacket) {
-        super.recreateFromPacket(clientboundaddentitypacket);
-        this.setDirection(Direction.from3DDataValue(clientboundaddentitypacket.getData()));
+    public void recreateFromPacket(ClientboundAddEntityPacket packet) {
+        super.recreateFromPacket(packet);
+        this.setDirection(Direction.from3DDataValue(packet.getData()));
     }
 
     @Override
-    @Override
     public ItemStack getPickResult() {
         ItemStack itemstack = this.getItem();
 
@@ -501,11 +500,10 @@
     }
 
     @Override
-    @Override
     public float getVisualRotationYInDegrees() {
-        Direction direction = this.getDirection();
-        int i = direction.getAxis().isVertical() ? 90 * direction.getAxisDirection().getStep() : 0;
+        Direction enumdirection = this.getDirection();
+        int i = enumdirection.getAxis().isVertical() ? 90 * enumdirection.getAxisDirection().getStep() : 0;
 
-        return (float) Mth.wrapDegrees(180 + direction.get2DDataValue() * 90 + this.getRotation() * 45 + i);
+        return (float) Mth.wrapDegrees(180 + enumdirection.get2DDataValue() * 90 + this.getRotation() * 45 + i);
     }
 }
