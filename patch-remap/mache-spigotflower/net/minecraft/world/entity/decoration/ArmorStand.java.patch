--- a/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -18,31 +18,36 @@
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.DamageTypeTags;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.Pose;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.level.EnumSkyBlock;
 import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.gameevent.GameEvent;
-import net.minecraft.world.level.material.PushReaction;
+import net.minecraft.world.level.material.EnumPistonReaction;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.craftbukkit.CraftEquipmentSlot;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerArmorStandManipulateEvent;
+// CraftBukkit end
 
 public class ArmorStand extends LivingEntity {
 
@@ -74,22 +79,22 @@
     public static final EntityDataAccessor<Rotations> DATA_LEFT_LEG_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
     public static final EntityDataAccessor<Rotations> DATA_RIGHT_LEG_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
     private static final Predicate<Entity> RIDABLE_MINECARTS = (entity) -> {
-        return entity instanceof AbstractMinecart && ((AbstractMinecart) entity).getMinecartType() == AbstractMinecart.Type.RIDEABLE;
+        return entity instanceof AbstractMinecart && ((AbstractMinecart) entity).getMinecartType() == AbstractMinecart.EnumMinecartType.RIDEABLE;
     };
     private final NonNullList<ItemStack> handItems;
     private final NonNullList<ItemStack> armorItems;
     private boolean invisible;
     public long lastHit;
-    private int disabledSlots;
-    private Rotations headPose;
-    private Rotations bodyPose;
-    private Rotations leftArmPose;
-    private Rotations rightArmPose;
-    private Rotations leftLegPose;
-    private Rotations rightLegPose;
+    public int disabledSlots;
+    public Rotations headPose;
+    public Rotations bodyPose;
+    public Rotations leftArmPose;
+    public Rotations rightArmPose;
+    public Rotations leftLegPose;
+    public Rotations rightLegPose;
 
-    public ArmorStand(EntityType<? extends ArmorStand> entitytype, Level level) {
-        super(entitytype, level);
+    public ArmorStand(EntityType<? extends ArmorStand> entityType, Level level) {
+        super(entityType, level);
         this.handItems = NonNullList.withSize(2, ItemStack.EMPTY);
         this.armorItems = NonNullList.withSize(4, ItemStack.EMPTY);
         this.headPose = ArmorStand.DEFAULT_HEAD_POSE;
@@ -101,12 +106,18 @@
         this.setMaxUpStep(0.0F);
     }
 
-    public ArmorStand(Level level, double d0, double d1, double d2) {
+    public ArmorStand(Level level, double x, double d1, double y) {
         this(EntityType.ARMOR_STAND, level);
-        this.setPos(d0, d1, d2);
+        this.setPos(x, d1, y);
     }
 
+    // CraftBukkit start - SPIGOT-3607, SPIGOT-3637
     @Override
+    public float getBukkitYaw() {
+        return this.getYRot();
+    }
+    // CraftBukkit end
+
     @Override
     public void refreshDimensions() {
         double d0 = this.getX();
@@ -122,13 +133,11 @@
     }
 
     @Override
-    @Override
     public boolean isEffectiveAi() {
         return super.isEffectiveAi() && this.hasPhysics();
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(ArmorStand.DATA_CLIENT_FLAGS, (byte) 0);
@@ -141,194 +150,191 @@
     }
 
     @Override
-    @Override
     public Iterable<ItemStack> getHandSlots() {
         return this.handItems;
     }
 
     @Override
-    @Override
     public Iterable<ItemStack> getArmorSlots() {
         return this.armorItems;
     }
 
     @Override
-    @Override
-    public ItemStack getItemBySlot(EquipmentSlot equipmentslot) {
-        switch (equipmentslot.getType()) {
+    public ItemStack getItemBySlot(net.minecraft.world.entity.EquipmentSlot slot) {
+        switch (slot.getType()) {
             case HAND:
-                return (ItemStack) this.handItems.get(equipmentslot.getIndex());
+                return (ItemStack) this.handItems.get(slot.getIndex());
             case ARMOR:
-                return (ItemStack) this.armorItems.get(equipmentslot.getIndex());
+                return (ItemStack) this.armorItems.get(slot.getIndex());
             default:
                 return ItemStack.EMPTY;
         }
     }
 
     @Override
+    public void setItemSlot(net.minecraft.world.entity.EquipmentSlot slot, ItemStack stack) {
+        // CraftBukkit start
+        this.setItemSlot(slot, stack, false);
+    }
+
     @Override
-    public void setItemSlot(EquipmentSlot equipmentslot, ItemStack itemstack) {
+    public void setItemSlot(net.minecraft.world.entity.EquipmentSlot enumitemslot, ItemStack itemstack, boolean silent) {
+        // CraftBukkit end
         this.verifyEquippedItem(itemstack);
-        switch (equipmentslot.getType()) {
+        switch (enumitemslot.getType()) {
             case HAND:
-                this.onEquipItem(equipmentslot, (ItemStack) this.handItems.set(equipmentslot.getIndex(), itemstack), itemstack);
+                this.onEquipItem(enumitemslot, (ItemStack) this.handItems.set(enumitemslot.getIndex(), itemstack), itemstack, silent); // CraftBukkit
                 break;
             case ARMOR:
-                this.onEquipItem(equipmentslot, (ItemStack) this.armorItems.set(equipmentslot.getIndex(), itemstack), itemstack);
+                this.onEquipItem(enumitemslot, (ItemStack) this.armorItems.set(enumitemslot.getIndex(), itemstack), itemstack, silent); // CraftBukkit
         }
 
     }
 
     @Override
-    @Override
     public boolean canTakeItem(ItemStack itemstack) {
-        EquipmentSlot equipmentslot = Mob.getEquipmentSlotForItem(itemstack);
+        net.minecraft.world.entity.EquipmentSlot enumitemslot = Mob.getEquipmentSlotForItem(itemstack);
 
-        return this.getItemBySlot(equipmentslot).isEmpty() && !this.isDisabled(equipmentslot);
+        return this.getItemBySlot(enumitemslot).isEmpty() && !this.isDisabled(enumitemslot);
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        ListTag listtag = new ListTag();
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        ListTag nbttaglist = new ListTag();
 
-        CompoundTag compoundtag1;
+        CompoundTag nbttagcompound1;
 
-        for (Iterator iterator = this.armorItems.iterator(); iterator.hasNext(); listtag.add(compoundtag1)) {
+        for (Iterator iterator = this.armorItems.iterator(); iterator.hasNext(); nbttaglist.add(nbttagcompound1)) {
             ItemStack itemstack = (ItemStack) iterator.next();
 
-            compoundtag1 = new CompoundTag();
+            nbttagcompound1 = new CompoundTag();
             if (!itemstack.isEmpty()) {
-                itemstack.save(compoundtag1);
+                itemstack.save(nbttagcompound1);
             }
         }
 
-        compoundtag.put("ArmorItems", listtag);
-        ListTag listtag1 = new ListTag();
+        compound.put("ArmorItems", nbttaglist);
+        ListTag nbttaglist1 = new ListTag();
 
-        CompoundTag compoundtag2;
+        CompoundTag nbttagcompound2;
 
-        for (Iterator iterator1 = this.handItems.iterator(); iterator1.hasNext(); listtag1.add(compoundtag2)) {
+        for (Iterator iterator1 = this.handItems.iterator(); iterator1.hasNext(); nbttaglist1.add(nbttagcompound2)) {
             ItemStack itemstack1 = (ItemStack) iterator1.next();
 
-            compoundtag2 = new CompoundTag();
+            nbttagcompound2 = new CompoundTag();
             if (!itemstack1.isEmpty()) {
-                itemstack1.save(compoundtag2);
+                itemstack1.save(nbttagcompound2);
             }
         }
 
-        compoundtag.put("HandItems", listtag1);
-        compoundtag.putBoolean("Invisible", this.isInvisible());
-        compoundtag.putBoolean("Small", this.isSmall());
-        compoundtag.putBoolean("ShowArms", this.isShowArms());
-        compoundtag.putInt("DisabledSlots", this.disabledSlots);
-        compoundtag.putBoolean("NoBasePlate", this.isNoBasePlate());
+        compound.put("HandItems", nbttaglist1);
+        compound.putBoolean("Invisible", this.isInvisible());
+        compound.putBoolean("Small", this.isSmall());
+        compound.putBoolean("ShowArms", this.isShowArms());
+        compound.putInt("DisabledSlots", this.disabledSlots);
+        compound.putBoolean("NoBasePlate", this.isNoBasePlate());
         if (this.isMarker()) {
-            compoundtag.putBoolean("Marker", this.isMarker());
+            compound.putBoolean("Marker", this.isMarker());
         }
 
-        compoundtag.put("Pose", this.writePose());
+        compound.put("Pose", this.writePose());
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        ListTag listtag;
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        ListTag nbttaglist;
         int i;
 
-        if (compoundtag.contains("ArmorItems", 9)) {
-            listtag = compoundtag.getList("ArmorItems", 10);
+        if (compound.contains("ArmorItems", 9)) {
+            nbttaglist = compound.getList("ArmorItems", 10);
 
             for (i = 0; i < this.armorItems.size(); ++i) {
-                this.armorItems.set(i, ItemStack.of(listtag.getCompound(i)));
+                this.armorItems.set(i, ItemStack.of(nbttaglist.getCompound(i)));
             }
         }
 
-        if (compoundtag.contains("HandItems", 9)) {
-            listtag = compoundtag.getList("HandItems", 10);
+        if (compound.contains("HandItems", 9)) {
+            nbttaglist = compound.getList("HandItems", 10);
 
             for (i = 0; i < this.handItems.size(); ++i) {
-                this.handItems.set(i, ItemStack.of(listtag.getCompound(i)));
+                this.handItems.set(i, ItemStack.of(nbttaglist.getCompound(i)));
             }
         }
 
-        this.setInvisible(compoundtag.getBoolean("Invisible"));
-        this.setSmall(compoundtag.getBoolean("Small"));
-        this.setShowArms(compoundtag.getBoolean("ShowArms"));
-        this.disabledSlots = compoundtag.getInt("DisabledSlots");
-        this.setNoBasePlate(compoundtag.getBoolean("NoBasePlate"));
-        this.setMarker(compoundtag.getBoolean("Marker"));
+        this.setInvisible(compound.getBoolean("Invisible"));
+        this.setSmall(compound.getBoolean("Small"));
+        this.setShowArms(compound.getBoolean("ShowArms"));
+        this.disabledSlots = compound.getInt("DisabledSlots");
+        this.setNoBasePlate(compound.getBoolean("NoBasePlate"));
+        this.setMarker(compound.getBoolean("Marker"));
         this.noPhysics = !this.hasPhysics();
-        CompoundTag compoundtag1 = compoundtag.getCompound("Pose");
+        CompoundTag nbttagcompound1 = compound.getCompound("Pose");
 
-        this.readPose(compoundtag1);
+        this.readPose(nbttagcompound1);
     }
 
-    private void readPose(CompoundTag compoundtag) {
-        ListTag listtag = compoundtag.getList("Head", 5);
+    private void readPose(CompoundTag compound) {
+        ListTag nbttaglist = compound.getList("Head", 5);
 
-        this.setHeadPose(listtag.isEmpty() ? ArmorStand.DEFAULT_HEAD_POSE : new Rotations(listtag));
-        ListTag listtag1 = compoundtag.getList("Body", 5);
+        this.setHeadPose(nbttaglist.isEmpty() ? ArmorStand.DEFAULT_HEAD_POSE : new Rotations(nbttaglist));
+        ListTag nbttaglist1 = compound.getList("Body", 5);
 
-        this.setBodyPose(listtag1.isEmpty() ? ArmorStand.DEFAULT_BODY_POSE : new Rotations(listtag1));
-        ListTag listtag2 = compoundtag.getList("LeftArm", 5);
+        this.setBodyPose(nbttaglist1.isEmpty() ? ArmorStand.DEFAULT_BODY_POSE : new Rotations(nbttaglist1));
+        ListTag nbttaglist2 = compound.getList("LeftArm", 5);
 
-        this.setLeftArmPose(listtag2.isEmpty() ? ArmorStand.DEFAULT_LEFT_ARM_POSE : new Rotations(listtag2));
-        ListTag listtag3 = compoundtag.getList("RightArm", 5);
+        this.setLeftArmPose(nbttaglist2.isEmpty() ? ArmorStand.DEFAULT_LEFT_ARM_POSE : new Rotations(nbttaglist2));
+        ListTag nbttaglist3 = compound.getList("RightArm", 5);
 
-        this.setRightArmPose(listtag3.isEmpty() ? ArmorStand.DEFAULT_RIGHT_ARM_POSE : new Rotations(listtag3));
-        ListTag listtag4 = compoundtag.getList("LeftLeg", 5);
+        this.setRightArmPose(nbttaglist3.isEmpty() ? ArmorStand.DEFAULT_RIGHT_ARM_POSE : new Rotations(nbttaglist3));
+        ListTag nbttaglist4 = compound.getList("LeftLeg", 5);
 
-        this.setLeftLegPose(listtag4.isEmpty() ? ArmorStand.DEFAULT_LEFT_LEG_POSE : new Rotations(listtag4));
-        ListTag listtag5 = compoundtag.getList("RightLeg", 5);
+        this.setLeftLegPose(nbttaglist4.isEmpty() ? ArmorStand.DEFAULT_LEFT_LEG_POSE : new Rotations(nbttaglist4));
+        ListTag nbttaglist5 = compound.getList("RightLeg", 5);
 
-        this.setRightLegPose(listtag5.isEmpty() ? ArmorStand.DEFAULT_RIGHT_LEG_POSE : new Rotations(listtag5));
+        this.setRightLegPose(nbttaglist5.isEmpty() ? ArmorStand.DEFAULT_RIGHT_LEG_POSE : new Rotations(nbttaglist5));
     }
 
     private CompoundTag writePose() {
-        CompoundTag compoundtag = new CompoundTag();
+        CompoundTag nbttagcompound = new CompoundTag();
 
         if (!ArmorStand.DEFAULT_HEAD_POSE.equals(this.headPose)) {
-            compoundtag.put("Head", this.headPose.save());
+            nbttagcompound.put("Head", this.headPose.save());
         }
 
         if (!ArmorStand.DEFAULT_BODY_POSE.equals(this.bodyPose)) {
-            compoundtag.put("Body", this.bodyPose.save());
+            nbttagcompound.put("Body", this.bodyPose.save());
         }
 
         if (!ArmorStand.DEFAULT_LEFT_ARM_POSE.equals(this.leftArmPose)) {
-            compoundtag.put("LeftArm", this.leftArmPose.save());
+            nbttagcompound.put("LeftArm", this.leftArmPose.save());
         }
 
         if (!ArmorStand.DEFAULT_RIGHT_ARM_POSE.equals(this.rightArmPose)) {
-            compoundtag.put("RightArm", this.rightArmPose.save());
+            nbttagcompound.put("RightArm", this.rightArmPose.save());
         }
 
         if (!ArmorStand.DEFAULT_LEFT_LEG_POSE.equals(this.leftLegPose)) {
-            compoundtag.put("LeftLeg", this.leftLegPose.save());
+            nbttagcompound.put("LeftLeg", this.leftLegPose.save());
         }
 
         if (!ArmorStand.DEFAULT_RIGHT_LEG_POSE.equals(this.rightLegPose)) {
-            compoundtag.put("RightLeg", this.rightLegPose.save());
+            nbttagcompound.put("RightLeg", this.rightLegPose.save());
         }
 
-        return compoundtag;
+        return nbttagcompound;
     }
 
     @Override
-    @Override
     public boolean isPushable() {
         return false;
     }
 
     @Override
-    @Override
     protected void doPush(Entity entity) {}
 
     @Override
-    @Override
     protected void pushEntities() {
         List<Entity> list = this.level().getEntities((Entity) this, this.getBoundingBox(), ArmorStand.RIDABLE_MINECARTS);
         Iterator iterator = list.iterator();
@@ -344,9 +350,8 @@
     }
 
     @Override
-    @Override
-    public InteractionResult interactAt(Player player, Vec3 vec3, InteractionHand interactionhand) {
-        ItemStack itemstack = player.getItemInHand(interactionhand);
+    public InteractionResult interactAt(net.minecraft.world.entity.player.Player player, Vec3 vec, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
 
         if (!this.isMarker() && !itemstack.is(Items.NAME_TAG)) {
             if (player.isSpectator()) {
@@ -354,25 +359,25 @@
             } else if (player.level().isClientSide) {
                 return InteractionResult.CONSUME;
             } else {
-                EquipmentSlot equipmentslot = Mob.getEquipmentSlotForItem(itemstack);
+                net.minecraft.world.entity.EquipmentSlot enumitemslot = Mob.getEquipmentSlotForItem(itemstack);
 
                 if (itemstack.isEmpty()) {
-                    EquipmentSlot equipmentslot1 = this.getClickedSlot(vec3);
-                    EquipmentSlot equipmentslot2 = this.isDisabled(equipmentslot1) ? equipmentslot : equipmentslot1;
+                    net.minecraft.world.entity.EquipmentSlot enumitemslot1 = this.getClickedSlot(vec);
+                    net.minecraft.world.entity.EquipmentSlot enumitemslot2 = this.isDisabled(enumitemslot1) ? enumitemslot : enumitemslot1;
 
-                    if (this.hasItemInSlot(equipmentslot2) && this.swapItem(player, equipmentslot2, itemstack, interactionhand)) {
+                    if (this.hasItemInSlot(enumitemslot2) && this.swapItem(player, enumitemslot2, itemstack, hand)) {
                         return InteractionResult.SUCCESS;
                     }
                 } else {
-                    if (this.isDisabled(equipmentslot)) {
+                    if (this.isDisabled(enumitemslot)) {
                         return InteractionResult.FAIL;
                     }
 
-                    if (equipmentslot.getType() == EquipmentSlot.Type.HAND && !this.isShowArms()) {
+                    if (enumitemslot.getType() == net.minecraft.world.entity.EquipmentSlot.Function.HAND && !this.isShowArms()) {
                         return InteractionResult.FAIL;
                     }
 
-                    if (this.swapItem(player, equipmentslot, itemstack, interactionhand)) {
+                    if (this.swapItem(player, enumitemslot, itemstack, hand)) {
                         return InteractionResult.SUCCESS;
                     }
                 }
@@ -384,96 +389,124 @@
         }
     }
 
-    private EquipmentSlot getClickedSlot(Vec3 vec3) {
-        EquipmentSlot equipmentslot = EquipmentSlot.MAINHAND;
+    private net.minecraft.world.entity.EquipmentSlot getClickedSlot(Vec3 vector) {
+        net.minecraft.world.entity.EquipmentSlot enumitemslot = net.minecraft.world.entity.EquipmentSlot.MAINHAND;
         boolean flag = this.isSmall();
-        double d0 = flag ? vec3.y * 2.0D : vec3.y;
-        EquipmentSlot equipmentslot1 = EquipmentSlot.FEET;
+        double d0 = flag ? vector.y * 2.0D : vector.y;
+        net.minecraft.world.entity.EquipmentSlot enumitemslot1 = net.minecraft.world.entity.EquipmentSlot.FEET;
 
-        if (d0 >= 0.1D && d0 < 0.1D + (flag ? 0.8D : 0.45D) && this.hasItemInSlot(equipmentslot1)) {
-            equipmentslot = EquipmentSlot.FEET;
-        } else if (d0 >= 0.9D + (flag ? 0.3D : 0.0D) && d0 < 0.9D + (flag ? 1.0D : 0.7D) && this.hasItemInSlot(EquipmentSlot.CHEST)) {
-            equipmentslot = EquipmentSlot.CHEST;
-        } else if (d0 >= 0.4D && d0 < 0.4D + (flag ? 1.0D : 0.8D) && this.hasItemInSlot(EquipmentSlot.LEGS)) {
-            equipmentslot = EquipmentSlot.LEGS;
-        } else if (d0 >= 1.6D && this.hasItemInSlot(EquipmentSlot.HEAD)) {
-            equipmentslot = EquipmentSlot.HEAD;
-        } else if (!this.hasItemInSlot(EquipmentSlot.MAINHAND) && this.hasItemInSlot(EquipmentSlot.OFFHAND)) {
-            equipmentslot = EquipmentSlot.OFFHAND;
+        if (d0 >= 0.1D && d0 < 0.1D + (flag ? 0.8D : 0.45D) && this.hasItemInSlot(enumitemslot1)) {
+            enumitemslot = net.minecraft.world.entity.EquipmentSlot.FEET;
+        } else if (d0 >= 0.9D + (flag ? 0.3D : 0.0D) && d0 < 0.9D + (flag ? 1.0D : 0.7D) && this.hasItemInSlot(net.minecraft.world.entity.EquipmentSlot.CHEST)) {
+            enumitemslot = net.minecraft.world.entity.EquipmentSlot.CHEST;
+        } else if (d0 >= 0.4D && d0 < 0.4D + (flag ? 1.0D : 0.8D) && this.hasItemInSlot(net.minecraft.world.entity.EquipmentSlot.LEGS)) {
+            enumitemslot = net.minecraft.world.entity.EquipmentSlot.LEGS;
+        } else if (d0 >= 1.6D && this.hasItemInSlot(net.minecraft.world.entity.EquipmentSlot.HEAD)) {
+            enumitemslot = net.minecraft.world.entity.EquipmentSlot.HEAD;
+        } else if (!this.hasItemInSlot(net.minecraft.world.entity.EquipmentSlot.MAINHAND) && this.hasItemInSlot(net.minecraft.world.entity.EquipmentSlot.OFFHAND)) {
+            enumitemslot = net.minecraft.world.entity.EquipmentSlot.OFFHAND;
         }
 
-        return equipmentslot;
+        return enumitemslot;
     }
 
-    private boolean isDisabled(EquipmentSlot equipmentslot) {
-        return (this.disabledSlots & 1 << equipmentslot.getFilterFlag()) != 0 || equipmentslot.getType() == EquipmentSlot.Type.HAND && !this.isShowArms();
+    private boolean isDisabled(net.minecraft.world.entity.EquipmentSlot slot) {
+        return (this.disabledSlots & 1 << slot.getFilterFlag()) != 0 || slot.getType() == net.minecraft.world.entity.EquipmentSlot.Function.HAND && !this.isShowArms();
     }
 
-    private boolean swapItem(Player player, EquipmentSlot equipmentslot, ItemStack itemstack, InteractionHand interactionhand) {
-        ItemStack itemstack1 = this.getItemBySlot(equipmentslot);
+    private boolean swapItem(net.minecraft.world.entity.player.Player player, net.minecraft.world.entity.EquipmentSlot slot, ItemStack stack, EnumHand hand) {
+        ItemStack itemstack1 = this.getItemBySlot(slot);
 
-        if (!itemstack1.isEmpty() && (this.disabledSlots & 1 << equipmentslot.getFilterFlag() + 8) != 0) {
+        if (!itemstack1.isEmpty() && (this.disabledSlots & 1 << slot.getFilterFlag() + 8) != 0) {
             return false;
-        } else if (itemstack1.isEmpty() && (this.disabledSlots & 1 << equipmentslot.getFilterFlag() + 16) != 0) {
+        } else if (itemstack1.isEmpty() && (this.disabledSlots & 1 << slot.getFilterFlag() + 16) != 0) {
             return false;
-        } else if (player.getAbilities().instabuild && itemstack1.isEmpty() && !itemstack.isEmpty()) {
-            this.setItemSlot(equipmentslot, itemstack.copyWithCount(1));
+            // CraftBukkit start
+        } else {
+            org.bukkit.inventory.ItemStack armorStandItem = CraftItemStack.asCraftMirror(itemstack1);
+            org.bukkit.inventory.ItemStack playerHeldItem = CraftItemStack.asCraftMirror(stack);
+
+            Player player1 = (Player) player.getBukkitEntity();
+            org.bukkit.entity.ArmorStand self = (org.bukkit.entity.ArmorStand) this.getBukkitEntity();
+
+            EquipmentSlot slot1 = CraftEquipmentSlot.getSlot(slot);
+            EquipmentSlot hand = CraftEquipmentSlot.getHand(hand);
+            PlayerArmorStandManipulateEvent armorStandManipulateEvent = new PlayerArmorStandManipulateEvent(player1, self, playerHeldItem, armorStandItem, slot1, hand);
+            this.level().getCraftServer().getPluginManager().callEvent(armorStandManipulateEvent);
+
+            if (armorStandManipulateEvent.isCancelled()) {
+                return true;
+            }
+
+        if (player.getAbilities().instabuild && itemstack1.isEmpty() && !stack.isEmpty()) {
+            // CraftBukkit end
+            this.setItemSlot(slot, stack.copyWithCount(1));
             return true;
-        } else if (!itemstack.isEmpty() && itemstack.getCount() > 1) {
+        } else if (!stack.isEmpty() && stack.getCount() > 1) {
             if (!itemstack1.isEmpty()) {
                 return false;
             } else {
-                this.setItemSlot(equipmentslot, itemstack.split(1));
+                this.setItemSlot(slot, stack.split(1));
                 return true;
             }
         } else {
-            this.setItemSlot(equipmentslot, itemstack);
-            player.setItemInHand(interactionhand, itemstack1);
+            this.setItemSlot(slot, stack);
+            player.setItemInHand(hand, itemstack1);
             return true;
         }
+        } // CraftBukkit
     }
 
     @Override
-    @Override
-    public boolean hurt(DamageSource damagesource, float f) {
+    public boolean hurt(DamageSource source, float amount) {
         if (!this.level().isClientSide && !this.isRemoved()) {
-            if (damagesource.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
+            if (source.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
+                // CraftBukkit start
+                if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount)) {
+                    return false;
+                }
+                // CraftBukkit end
                 this.kill();
                 return false;
-            } else if (!this.isInvulnerableTo(damagesource) && !this.invisible && !this.isMarker()) {
-                if (damagesource.is(DamageTypeTags.IS_EXPLOSION)) {
-                    this.brokenByAnything(damagesource);
+            } else if (!this.isInvulnerableTo(source) && (true || !this.invisible) && !this.isMarker()) { // CraftBukkit
+                // CraftBukkit start
+                if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount, true, this.invisible)) {
+                    return false;
+                }
+                // CraftBukkit end
+                if (source.is(DamageTypeTags.IS_EXPLOSION)) {
+                    this.brokenByAnything(source);
                     this.kill();
                     return false;
-                } else if (damagesource.is(DamageTypeTags.IGNITES_ARMOR_STANDS)) {
+                } else if (source.is(DamageTypeTags.IGNITES_ARMOR_STANDS)) {
                     if (this.isOnFire()) {
-                        this.causeDamage(damagesource, 0.15F);
+                        this.causeDamage(source, 0.15F);
                     } else {
                         this.setSecondsOnFire(5);
                     }
 
                     return false;
-                } else if (damagesource.is(DamageTypeTags.BURNS_ARMOR_STANDS) && this.getHealth() > 0.5F) {
-                    this.causeDamage(damagesource, 4.0F);
+                } else if (source.is(DamageTypeTags.BURNS_ARMOR_STANDS) && this.getHealth() > 0.5F) {
+                    this.causeDamage(source, 4.0F);
                     return false;
                 } else {
-                    boolean flag = damagesource.is(DamageTypeTags.CAN_BREAK_ARMOR_STAND);
-                    boolean flag1 = damagesource.is(DamageTypeTags.ALWAYS_KILLS_ARMOR_STANDS);
+                    boolean flag = source.is(DamageTypeTags.CAN_BREAK_ARMOR_STAND);
+                    boolean flag1 = source.is(DamageTypeTags.ALWAYS_KILLS_ARMOR_STANDS);
 
                     if (!flag && !flag1) {
                         return false;
                     } else {
-                        Entity entity = damagesource.getEntity();
+                        Entity entity = source.getEntity();
 
-                        if (entity instanceof Player) {
-                            Player player = (Player) entity;
+                        if (entity instanceof net.minecraft.world.entity.player.Player) {
+                            net.minecraft.world.entity.player.Player entityhuman = (net.minecraft.world.entity.player.Player) entity;
 
-                            if (!player.getAbilities().mayBuild) {
+                            if (!entityhuman.getAbilities().mayBuild) {
                                 return false;
                             }
                         }
 
-                        if (damagesource.isCreativePlayer()) {
+                        if (source.isCreativePlayer()) {
                             this.playBrokenSound();
                             this.showBreakingParticles();
                             this.kill();
@@ -483,12 +516,12 @@
 
                             if (i - this.lastHit > 5L && !flag1) {
                                 this.level().broadcastEntityEvent(this, (byte) 32);
-                                this.gameEvent(GameEvent.ENTITY_DAMAGE, damagesource.getEntity());
+                                this.gameEvent(GameEvent.ENTITY_DAMAGE, source.getEntity());
                                 this.lastHit = i;
                             } else {
-                                this.brokenByPlayer(damagesource);
+                                this.brokenByPlayer(source);
                                 this.showBreakingParticles();
-                                this.kill();
+                                this.discard(); // CraftBukkit - SPIGOT-4890: remain as this.discard() since above damagesource method will call death event
                             }
 
                             return true;
@@ -504,22 +537,20 @@
     }
 
     @Override
-    @Override
-    public void handleEntityEvent(byte b0) {
-        if (b0 == 32) {
+    public void handleEntityEvent(byte id) {
+        if (id == 32) {
             if (this.level().isClientSide) {
                 this.level().playLocalSound(this.getX(), this.getY(), this.getZ(), SoundEvents.ARMOR_STAND_HIT, this.getSoundSource(), 0.3F, 1.0F, false);
                 this.lastHit = this.level().getGameTime();
             }
         } else {
-            super.handleEntityEvent(b0);
+            super.handleEntityEvent(id);
         }
 
     }
 
     @Override
-    @Override
-    public boolean shouldRenderAtSqrDistance(double d0) {
+    public boolean shouldRenderAtSqrDistance(double distance) {
         double d1 = this.getBoundingBox().getSize() * 4.0D;
 
         if (Double.isNaN(d1) || d1 == 0.0D) {
@@ -527,7 +558,7 @@
         }
 
         d1 *= 64.0D;
-        return d0 < d1 * d1;
+        return distance < d1 * d1;
     }
 
     private void showBreakingParticles() {
@@ -537,34 +568,34 @@
 
     }
 
-    private void causeDamage(DamageSource damagesource, float f) {
+    private void causeDamage(DamageSource damageSource, float amount) {
         float f1 = this.getHealth();
 
-        f1 -= f;
+        f1 -= amount;
         if (f1 <= 0.5F) {
-            this.brokenByAnything(damagesource);
+            this.brokenByAnything(damageSource);
             this.kill();
         } else {
             this.setHealth(f1);
-            this.gameEvent(GameEvent.ENTITY_DAMAGE, damagesource.getEntity());
+            this.gameEvent(GameEvent.ENTITY_DAMAGE, damageSource.getEntity());
         }
 
     }
 
-    private void brokenByPlayer(DamageSource damagesource) {
+    private void brokenByPlayer(DamageSource damageSource) {
         ItemStack itemstack = new ItemStack(Items.ARMOR_STAND);
 
         if (this.hasCustomName()) {
             itemstack.setHoverName(this.getCustomName());
         }
 
-        Block.popResource(this.level(), this.blockPosition(), itemstack);
-        this.brokenByAnything(damagesource);
+        drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(itemstack)); // CraftBukkit - add to drops
+        this.brokenByAnything(damageSource);
     }
 
-    private void brokenByAnything(DamageSource damagesource) {
+    private void brokenByAnything(DamageSource damageSource) {
         this.playBrokenSound();
-        this.dropAllDeathLoot(damagesource);
+        // this.dropAllDeathLoot(damagesource); // CraftBukkit - moved down
 
         ItemStack itemstack;
         int i;
@@ -572,7 +603,7 @@
         for (i = 0; i < this.handItems.size(); ++i) {
             itemstack = (ItemStack) this.handItems.get(i);
             if (!itemstack.isEmpty()) {
-                Block.popResource(this.level(), this.blockPosition().above(), itemstack);
+                drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(itemstack)); // CraftBukkit - add to drops
                 this.handItems.set(i, ItemStack.EMPTY);
             }
         }
@@ -580,209 +611,205 @@
         for (i = 0; i < this.armorItems.size(); ++i) {
             itemstack = (ItemStack) this.armorItems.get(i);
             if (!itemstack.isEmpty()) {
-                Block.popResource(this.level(), this.blockPosition().above(), itemstack);
+                drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(itemstack)); // CraftBukkit - add to drops
                 this.armorItems.set(i, ItemStack.EMPTY);
             }
         }
+        this.dropAllDeathLoot(damageSource); // CraftBukkit - moved from above
 
     }
 
     private void playBrokenSound() {
-        this.level().playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.ARMOR_STAND_BREAK, this.getSoundSource(), 1.0F, 1.0F);
+        this.level().playSound((net.minecraft.world.entity.player.Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.ARMOR_STAND_BREAK, this.getSoundSource(), 1.0F, 1.0F);
     }
 
     @Override
-    @Override
-    protected float tickHeadTurn(float f, float f1) {
+    protected float tickHeadTurn(float yRot, float animStep) {
         this.yBodyRotO = this.yRotO;
         this.yBodyRot = this.getYRot();
         return 0.0F;
     }
 
     @Override
-    @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions entitydimensions) {
-        return entitydimensions.height * (this.isBaby() ? 0.5F : 0.9F);
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions size) {
+        return size.height * (this.isBaby() ? 0.5F : 0.9F);
     }
 
     @Override
-    @Override
-    public void travel(Vec3 vec3) {
+    public void travel(Vec3 travelVector) {
         if (this.hasPhysics()) {
-            super.travel(vec3);
+            super.travel(travelVector);
         }
     }
 
     @Override
-    @Override
-    public void setYBodyRot(float f) {
-        this.yBodyRotO = this.yRotO = f;
-        this.yHeadRotO = this.yHeadRot = f;
+    public void setYBodyRot(float offset) {
+        this.yBodyRotO = this.yRotO = offset;
+        this.yHeadRotO = this.yHeadRot = offset;
     }
 
     @Override
-    @Override
-    public void setYHeadRot(float f) {
-        this.yBodyRotO = this.yRotO = f;
-        this.yHeadRotO = this.yHeadRot = f;
+    public void setYHeadRot(float rotation) {
+        this.yBodyRotO = this.yRotO = rotation;
+        this.yHeadRotO = this.yHeadRot = rotation;
     }
 
     @Override
-    @Override
     public void tick() {
         super.tick();
-        Rotations rotations = (Rotations) this.entityData.get(ArmorStand.DATA_HEAD_POSE);
+        Rotations vector3f = (Rotations) this.entityData.get(ArmorStand.DATA_HEAD_POSE);
 
-        if (!this.headPose.equals(rotations)) {
-            this.setHeadPose(rotations);
+        if (!this.headPose.equals(vector3f)) {
+            this.setHeadPose(vector3f);
         }
 
-        Rotations rotations1 = (Rotations) this.entityData.get(ArmorStand.DATA_BODY_POSE);
+        Rotations vector3f1 = (Rotations) this.entityData.get(ArmorStand.DATA_BODY_POSE);
 
-        if (!this.bodyPose.equals(rotations1)) {
-            this.setBodyPose(rotations1);
+        if (!this.bodyPose.equals(vector3f1)) {
+            this.setBodyPose(vector3f1);
         }
 
-        Rotations rotations2 = (Rotations) this.entityData.get(ArmorStand.DATA_LEFT_ARM_POSE);
+        Rotations vector3f2 = (Rotations) this.entityData.get(ArmorStand.DATA_LEFT_ARM_POSE);
 
-        if (!this.leftArmPose.equals(rotations2)) {
-            this.setLeftArmPose(rotations2);
+        if (!this.leftArmPose.equals(vector3f2)) {
+            this.setLeftArmPose(vector3f2);
         }
 
-        Rotations rotations3 = (Rotations) this.entityData.get(ArmorStand.DATA_RIGHT_ARM_POSE);
+        Rotations vector3f3 = (Rotations) this.entityData.get(ArmorStand.DATA_RIGHT_ARM_POSE);
 
-        if (!this.rightArmPose.equals(rotations3)) {
-            this.setRightArmPose(rotations3);
+        if (!this.rightArmPose.equals(vector3f3)) {
+            this.setRightArmPose(vector3f3);
         }
 
-        Rotations rotations4 = (Rotations) this.entityData.get(ArmorStand.DATA_LEFT_LEG_POSE);
+        Rotations vector3f4 = (Rotations) this.entityData.get(ArmorStand.DATA_LEFT_LEG_POSE);
 
-        if (!this.leftLegPose.equals(rotations4)) {
-            this.setLeftLegPose(rotations4);
+        if (!this.leftLegPose.equals(vector3f4)) {
+            this.setLeftLegPose(vector3f4);
         }
 
-        Rotations rotations5 = (Rotations) this.entityData.get(ArmorStand.DATA_RIGHT_LEG_POSE);
+        Rotations vector3f5 = (Rotations) this.entityData.get(ArmorStand.DATA_RIGHT_LEG_POSE);
 
-        if (!this.rightLegPose.equals(rotations5)) {
-            this.setRightLegPose(rotations5);
+        if (!this.rightLegPose.equals(vector3f5)) {
+            this.setRightLegPose(vector3f5);
         }
 
     }
 
     @Override
-    @Override
     protected void updateInvisibilityStatus() {
         this.setInvisible(this.invisible);
     }
 
     @Override
-    @Override
-    public void setInvisible(boolean flag) {
-        this.invisible = flag;
-        super.setInvisible(flag);
+    public void setInvisible(boolean invisible) {
+        this.invisible = invisible;
+        super.setInvisible(invisible);
     }
 
     @Override
-    @Override
     public boolean isBaby() {
         return this.isSmall();
     }
 
+    // CraftBukkit start
     @Override
+    public boolean shouldDropExperience() {
+        return true; // MC-157395, SPIGOT-5193 even baby (small) armor stands should drop
+    }
+    // CraftBukkit end
+
     @Override
     public void kill() {
+        org.bukkit.craftbukkit.event.CraftEventFactory.callEntityDeathEvent(this, drops); // CraftBukkit - call event
         this.remove(Entity.RemovalReason.KILLED);
         this.gameEvent(GameEvent.ENTITY_DIE);
     }
 
     @Override
-    @Override
     public boolean ignoreExplosion(Explosion explosion) {
         return this.isInvisible();
     }
 
     @Override
-    @Override
-    public PushReaction getPistonPushReaction() {
-        return this.isMarker() ? PushReaction.IGNORE : super.getPistonPushReaction();
+    public EnumPistonReaction getPistonPushReaction() {
+        return this.isMarker() ? EnumPistonReaction.IGNORE : super.getPistonPushReaction();
     }
 
     @Override
-    @Override
     public boolean isIgnoringBlockTriggers() {
         return this.isMarker();
     }
 
-    private void setSmall(boolean flag) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 1, flag));
+    public void setSmall(boolean small) {
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 1, small));
     }
 
     public boolean isSmall() {
         return ((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS) & 1) != 0;
     }
 
-    public void setShowArms(boolean flag) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 4, flag));
+    public void setShowArms(boolean showArms) {
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 4, showArms));
     }
 
     public boolean isShowArms() {
         return ((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS) & 4) != 0;
     }
 
-    public void setNoBasePlate(boolean flag) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 8, flag));
+    public void setNoBasePlate(boolean noBasePlate) {
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 8, noBasePlate));
     }
 
     public boolean isNoBasePlate() {
         return ((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS) & 8) != 0;
     }
 
-    private void setMarker(boolean flag) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 16, flag));
+    public void setMarker(boolean marker) {
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 16, marker));
     }
 
     public boolean isMarker() {
         return ((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS) & 16) != 0;
     }
 
-    private byte setBit(byte b0, int i, boolean flag) {
-        if (flag) {
-            b0 = (byte) (b0 | i);
+    private byte setBit(byte oldBit, int offset, boolean value) {
+        if (value) {
+            oldBit = (byte) (oldBit | offset);
         } else {
-            b0 = (byte) (b0 & ~i);
+            oldBit = (byte) (oldBit & ~offset);
         }
 
-        return b0;
+        return oldBit;
     }
 
-    public void setHeadPose(Rotations rotations) {
-        this.headPose = rotations;
-        this.entityData.set(ArmorStand.DATA_HEAD_POSE, rotations);
+    public void setHeadPose(Rotations headPose) {
+        this.headPose = headPose;
+        this.entityData.set(ArmorStand.DATA_HEAD_POSE, headPose);
     }
 
-    public void setBodyPose(Rotations rotations) {
-        this.bodyPose = rotations;
-        this.entityData.set(ArmorStand.DATA_BODY_POSE, rotations);
+    public void setBodyPose(Rotations bodyPose) {
+        this.bodyPose = bodyPose;
+        this.entityData.set(ArmorStand.DATA_BODY_POSE, bodyPose);
     }
 
-    public void setLeftArmPose(Rotations rotations) {
-        this.leftArmPose = rotations;
-        this.entityData.set(ArmorStand.DATA_LEFT_ARM_POSE, rotations);
+    public void setLeftArmPose(Rotations leftArmPose) {
+        this.leftArmPose = leftArmPose;
+        this.entityData.set(ArmorStand.DATA_LEFT_ARM_POSE, leftArmPose);
     }
 
-    public void setRightArmPose(Rotations rotations) {
-        this.rightArmPose = rotations;
-        this.entityData.set(ArmorStand.DATA_RIGHT_ARM_POSE, rotations);
+    public void setRightArmPose(Rotations rightArmPose) {
+        this.rightArmPose = rightArmPose;
+        this.entityData.set(ArmorStand.DATA_RIGHT_ARM_POSE, rightArmPose);
     }
 
-    public void setLeftLegPose(Rotations rotations) {
-        this.leftLegPose = rotations;
-        this.entityData.set(ArmorStand.DATA_LEFT_LEG_POSE, rotations);
+    public void setLeftLegPose(Rotations leftLegPose) {
+        this.leftLegPose = leftLegPose;
+        this.entityData.set(ArmorStand.DATA_LEFT_LEG_POSE, leftLegPose);
     }
 
-    public void setRightLegPose(Rotations rotations) {
-        this.rightLegPose = rotations;
-        this.entityData.set(ArmorStand.DATA_RIGHT_LEG_POSE, rotations);
+    public void setRightLegPose(Rotations rightLegPose) {
+        this.rightLegPose = rightLegPose;
+        this.entityData.set(ArmorStand.DATA_RIGHT_LEG_POSE, rightLegPose);
     }
 
     public Rotations getHeadPose() {
@@ -810,117 +837,103 @@
     }
 
     @Override
-    @Override
     public boolean isPickable() {
         return super.isPickable() && !this.isMarker();
     }
 
     @Override
-    @Override
     public boolean skipAttackInteraction(Entity entity) {
-        return entity instanceof Player && !this.level().mayInteract((Player) entity, this.blockPosition());
+        return entity instanceof net.minecraft.world.entity.player.Player && !this.level().mayInteract((net.minecraft.world.entity.player.Player) entity, this.blockPosition());
     }
 
     @Override
-    @Override
     public HumanoidArm getMainArm() {
         return HumanoidArm.RIGHT;
     }
 
     @Override
-    @Override
-    public LivingEntity.Fallsounds getFallSounds() {
-        return new LivingEntity.Fallsounds(SoundEvents.ARMOR_STAND_FALL, SoundEvents.ARMOR_STAND_FALL);
+    public LivingEntity.a getFallSounds() {
+        return new LivingEntity.a(SoundEvents.ARMOR_STAND_FALL, SoundEvents.ARMOR_STAND_FALL);
     }
 
     @Nullable
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.ARMOR_STAND_HIT;
     }
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.ARMOR_STAND_BREAK;
     }
 
     @Override
-    @Override
-    public void thunderHit(ServerLevel serverlevel, LightningBolt lightningbolt) {}
+    public void thunderHit(ServerLevel level, LightningBolt lightning) {}
 
     @Override
-    @Override
     public boolean isAffectedByPotions() {
         return false;
     }
 
     @Override
-    @Override
-    public void onSyncedDataUpdated(EntityDataAccessor<?> entitydataaccessor) {
-        if (ArmorStand.DATA_CLIENT_FLAGS.equals(entitydataaccessor)) {
+    public void onSyncedDataUpdated(EntityDataAccessor<?> key) {
+        if (ArmorStand.DATA_CLIENT_FLAGS.equals(key)) {
             this.refreshDimensions();
             this.blocksBuilding = !this.isMarker();
         }
 
-        super.onSyncedDataUpdated(entitydataaccessor);
+        super.onSyncedDataUpdated(key);
     }
 
     @Override
-    @Override
     public boolean attackable() {
         return false;
     }
 
     @Override
-    @Override
-    public EntityDimensions getDimensions(Pose pose) {
+    public EntityDimensions getDimensions(EntityPose pose) {
         return this.getDimensionsMarker(this.isMarker());
     }
 
-    private EntityDimensions getDimensionsMarker(boolean flag) {
-        return flag ? ArmorStand.MARKER_DIMENSIONS : (this.isBaby() ? ArmorStand.BABY_DIMENSIONS : this.getType().getDimensions());
+    private EntityDimensions getDimensionsMarker(boolean isMarker) {
+        return isMarker ? ArmorStand.MARKER_DIMENSIONS : (this.isBaby() ? ArmorStand.BABY_DIMENSIONS : this.getType().getDimensions());
     }
 
     @Override
-    @Override
-    public Vec3 getLightProbePosition(float f) {
+    public Vec3 getLightProbePosition(float partialTicks) {
         if (this.isMarker()) {
-            AABB aabb = this.getDimensionsMarker(false).makeBoundingBox(this.position());
-            BlockPos blockpos = this.blockPosition();
+            AABB axisalignedbb = this.getDimensionsMarker(false).makeBoundingBox(this.position());
+            BlockPos blockposition = this.blockPosition();
             int i = Integer.MIN_VALUE;
-            Iterator iterator = BlockPos.betweenClosed(BlockPos.containing(aabb.minX, aabb.minY, aabb.minZ), BlockPos.containing(aabb.maxX, aabb.maxY, aabb.maxZ)).iterator();
+            Iterator iterator = BlockPos.betweenClosed(BlockPos.containing(axisalignedbb.minX, axisalignedbb.minY, axisalignedbb.minZ), BlockPos.containing(axisalignedbb.maxX, axisalignedbb.maxY, axisalignedbb.maxZ)).iterator();
 
             while (iterator.hasNext()) {
-                BlockPos blockpos1 = (BlockPos) iterator.next();
-                int j = Math.max(this.level().getBrightness(LightLayer.BLOCK, blockpos1), this.level().getBrightness(LightLayer.SKY, blockpos1));
+                BlockPos blockposition1 = (BlockPos) iterator.next();
+                int j = Math.max(this.level().getBrightness(EnumSkyBlock.BLOCK, blockposition1), this.level().getBrightness(EnumSkyBlock.SKY, blockposition1));
 
                 if (j == 15) {
-                    return Vec3.atCenterOf(blockpos1);
+                    return Vec3.atCenterOf(blockposition1);
                 }
 
                 if (j > i) {
                     i = j;
-                    blockpos = blockpos1.immutable();
+                    blockposition = blockposition1.immutable();
                 }
             }
 
-            return Vec3.atCenterOf(blockpos);
+            return Vec3.atCenterOf(blockposition);
         } else {
-            return super.getLightProbePosition(f);
+            return super.getLightProbePosition(partialTicks);
         }
     }
 
     @Override
-    @Override
     public ItemStack getPickResult() {
         return new ItemStack(Items.ARMOR_STAND);
     }
 
     @Override
-    @Override
     public boolean canBeSeenByAnyone() {
         return !this.isInvisible() && !this.isMarker();
     }
