--- a/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
+++ b/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
@@ -10,7 +10,7 @@
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.MobSpawnType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.entity.SpawnPlacements;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiTypes;
@@ -38,24 +38,23 @@
     private int spawnDelay;
     private int spawnChance;
 
-    public WanderingTraderSpawner(ServerLevelData serverleveldata) {
-        this.serverLevelData = serverleveldata;
+    public WanderingTraderSpawner(ServerLevelData serverLevelData) {
+        this.serverLevelData = serverLevelData;
         this.tickDelay = 1200;
-        this.spawnDelay = serverleveldata.getWanderingTraderSpawnDelay();
-        this.spawnChance = serverleveldata.getWanderingTraderSpawnChance();
+        this.spawnDelay = serverLevelData.getWanderingTraderSpawnDelay();
+        this.spawnChance = serverLevelData.getWanderingTraderSpawnChance();
         if (this.spawnDelay == 0 && this.spawnChance == 0) {
             this.spawnDelay = 24000;
-            serverleveldata.setWanderingTraderSpawnDelay(this.spawnDelay);
+            serverLevelData.setWanderingTraderSpawnDelay(this.spawnDelay);
             this.spawnChance = 25;
-            serverleveldata.setWanderingTraderSpawnChance(this.spawnChance);
+            serverLevelData.setWanderingTraderSpawnChance(this.spawnChance);
         }
 
     }
 
     @Override
-    @Override
-    public int tick(ServerLevel serverlevel, boolean flag, boolean flag1) {
-        if (!serverlevel.getGameRules().getBoolean(GameRules.RULE_DO_TRADER_SPAWNING)) {
+    public int tick(ServerLevel level, boolean spawnHostiles, boolean spawnPassives) {
+        if (!level.getGameRules().getBoolean(GameRules.RULE_DO_TRADER_SPAWNING)) {
             return 0;
         } else if (--this.tickDelay > 0) {
             return 0;
@@ -67,7 +66,7 @@
                 return 0;
             } else {
                 this.spawnDelay = 24000;
-                if (!serverlevel.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
+                if (!level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
                     return 0;
                 } else {
                     int i = this.spawnChance;
@@ -76,7 +75,7 @@
                     this.serverLevelData.setWanderingTraderSpawnChance(this.spawnChance);
                     if (this.random.nextInt(100) > i) {
                         return 0;
-                    } else if (this.spawn(serverlevel)) {
+                    } else if (this.spawn(level)) {
                         this.spawnChance = 25;
                         return 1;
                     } else {
@@ -87,41 +86,41 @@
         }
     }
 
-    private boolean spawn(ServerLevel serverlevel) {
-        ServerPlayer serverplayer = serverlevel.getRandomPlayer();
+    private boolean spawn(ServerLevel serverLevel) {
+        ServerPlayer entityplayer = serverLevel.getRandomPlayer();
 
-        if (serverplayer == null) {
+        if (entityplayer == null) {
             return true;
         } else if (this.random.nextInt(10) != 0) {
             return false;
         } else {
-            BlockPos blockpos = serverplayer.blockPosition();
+            BlockPos blockposition = entityplayer.blockPosition();
             boolean flag = true;
-            PoiManager poimanager = serverlevel.getPoiManager();
-            Optional<BlockPos> optional = poimanager.find((holder) -> {
+            PoiManager villageplace = serverLevel.getPoiManager();
+            Optional<BlockPos> optional = villageplace.find((holder) -> {
                 return holder.is(PoiTypes.MEETING);
-            }, (blockpos1) -> {
+            }, (blockposition1) -> {
                 return true;
-            }, blockpos, 48, PoiManager.Occupancy.ANY);
-            BlockPos blockpos1 = (BlockPos) optional.orElse(blockpos);
-            BlockPos blockpos2 = this.findSpawnPositionNear(serverlevel, blockpos1, 48);
+            }, blockposition, 48, PoiManager.Occupancy.ANY);
+            BlockPos blockposition1 = (BlockPos) optional.orElse(blockposition);
+            BlockPos blockposition2 = this.findSpawnPositionNear(serverLevel, blockposition1, 48);
 
-            if (blockpos2 != null && this.hasEnoughSpace(serverlevel, blockpos2)) {
-                if (serverlevel.getBiome(blockpos2).is(BiomeTags.WITHOUT_WANDERING_TRADER_SPAWNS)) {
+            if (blockposition2 != null && this.hasEnoughSpace(serverLevel, blockposition2)) {
+                if (serverLevel.getBiome(blockposition2).is(BiomeTags.WITHOUT_WANDERING_TRADER_SPAWNS)) {
                     return false;
                 }
 
-                WanderingTrader wanderingtrader = (WanderingTrader) EntityType.WANDERING_TRADER.spawn(serverlevel, blockpos2, MobSpawnType.EVENT);
+                WanderingTrader entityvillagertrader = (WanderingTrader) EntityType.WANDERING_TRADER.spawn(serverLevel, blockposition2, EnumMobSpawn.EVENT, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.NATURAL); // CraftBukkit
 
-                if (wanderingtrader != null) {
+                if (entityvillagertrader != null) {
                     for (int i = 0; i < 2; ++i) {
-                        this.tryToSpawnLlamaFor(serverlevel, wanderingtrader, 4);
+                        this.tryToSpawnLlamaFor(serverLevel, entityvillagertrader, 4);
                     }
 
-                    this.serverLevelData.setWanderingTraderId(wanderingtrader.getUUID());
-                    wanderingtrader.setDespawnDelay(48000);
-                    wanderingtrader.setWanderTarget(blockpos1);
-                    wanderingtrader.restrictTo(blockpos1, 16);
+                    this.serverLevelData.setWanderingTraderId(entityvillagertrader.getUUID());
+                    // entityvillagertrader.setDespawnDelay(48000); // CraftBukkit - moved to EntityVillagerTrader constructor. This lets the value be modified by plugins on CreatureSpawnEvent
+                    entityvillagertrader.setWanderTarget(blockposition1);
+                    entityvillagertrader.restrictTo(blockposition1, 16);
                     return true;
                 }
             }
@@ -130,49 +129,49 @@
         }
     }
 
-    private void tryToSpawnLlamaFor(ServerLevel serverlevel, WanderingTrader wanderingtrader, int i) {
-        BlockPos blockpos = this.findSpawnPositionNear(serverlevel, wanderingtrader.blockPosition(), i);
+    private void tryToSpawnLlamaFor(ServerLevel serverLevel, WanderingTrader trader, int maxDistance) {
+        BlockPos blockposition = this.findSpawnPositionNear(serverLevel, trader.blockPosition(), maxDistance);
 
-        if (blockpos != null) {
-            TraderLlama traderllama = (TraderLlama) EntityType.TRADER_LLAMA.spawn(serverlevel, blockpos, MobSpawnType.EVENT);
+        if (blockposition != null) {
+            TraderLlama entityllamatrader = (TraderLlama) EntityType.TRADER_LLAMA.spawn(serverLevel, blockposition, EnumMobSpawn.EVENT, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.NATURAL); // CraftBukkit
 
-            if (traderllama != null) {
-                traderllama.setLeashedTo(wanderingtrader, true);
+            if (entityllamatrader != null) {
+                entityllamatrader.setLeashedTo(trader, true);
             }
         }
     }
 
     @Nullable
-    private BlockPos findSpawnPositionNear(LevelReader levelreader, BlockPos blockpos, int i) {
-        BlockPos blockpos1 = null;
+    private BlockPos findSpawnPositionNear(LevelReader level, BlockPos pos, int maxDistance) {
+        BlockPos blockposition1 = null;
 
         for (int j = 0; j < 10; ++j) {
-            int k = blockpos.getX() + this.random.nextInt(i * 2) - i;
-            int l = blockpos.getZ() + this.random.nextInt(i * 2) - i;
-            int i1 = levelreader.getHeight(Heightmap.Types.WORLD_SURFACE, k, l);
-            BlockPos blockpos2 = new BlockPos(k, i1, l);
+            int k = pos.getX() + this.random.nextInt(maxDistance * 2) - maxDistance;
+            int l = pos.getZ() + this.random.nextInt(maxDistance * 2) - maxDistance;
+            int i1 = level.getHeight(Heightmap.Types.WORLD_SURFACE, k, l);
+            BlockPos blockposition2 = new BlockPos(k, i1, l);
 
-            if (NaturalSpawner.isSpawnPositionOk(SpawnPlacements.Type.ON_GROUND, levelreader, blockpos2, EntityType.WANDERING_TRADER)) {
-                blockpos1 = blockpos2;
+            if (NaturalSpawner.isSpawnPositionOk(SpawnPlacements.Surface.ON_GROUND, level, blockposition2, EntityType.WANDERING_TRADER)) {
+                blockposition1 = blockposition2;
                 break;
             }
         }
 
-        return blockpos1;
+        return blockposition1;
     }
 
-    private boolean hasEnoughSpace(BlockGetter blockgetter, BlockPos blockpos) {
-        Iterator iterator = BlockPos.betweenClosed(blockpos, blockpos.offset(1, 2, 1)).iterator();
+    private boolean hasEnoughSpace(BlockGetter level, BlockPos pos) {
+        Iterator iterator = BlockPos.betweenClosed(pos, pos.offset(1, 2, 1)).iterator();
 
-        BlockPos blockpos1;
+        BlockPos blockposition1;
 
         do {
             if (!iterator.hasNext()) {
                 return true;
             }
 
-            blockpos1 = (BlockPos) iterator.next();
-        } while (blockgetter.getBlockState(blockpos1).getCollisionShape(blockgetter, blockpos1).isEmpty());
+            blockposition1 = (BlockPos) iterator.next();
+        } while (level.getBlockState(blockposition1).getCollisionShape(level, blockposition1).isEmpty());
 
         return false;
     }
