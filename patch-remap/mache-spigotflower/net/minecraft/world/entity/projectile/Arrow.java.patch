--- a/net/minecraft/world/entity/projectile/Arrow.java
+++ b/net/minecraft/world/entity/projectile/Arrow.java
@@ -29,51 +29,51 @@
     private static final EntityDataAccessor<Integer> ID_EFFECT_COLOR = SynchedEntityData.defineId(Arrow.class, EntityDataSerializers.INT);
     private static final byte EVENT_POTION_PUFF = 0;
     private static final ItemStack DEFAULT_ARROW_STACK = new ItemStack(Items.ARROW);
-    private Potion potion;
-    private final Set<MobEffectInstance> effects;
+    public Potion potion;
+    public final Set<MobEffectInstance> effects;
     private boolean fixedColor;
 
-    public Arrow(EntityType<? extends Arrow> entitytype, Level level) {
-        super(entitytype, level, Arrow.DEFAULT_ARROW_STACK);
+    public Arrow(EntityType<? extends Arrow> entityType, Level level) {
+        super(entityType, level, Arrow.DEFAULT_ARROW_STACK);
         this.potion = Potions.EMPTY;
         this.effects = Sets.newHashSet();
     }
 
-    public Arrow(Level level, double d0, double d1, double d2, ItemStack itemstack) {
-        super(EntityType.ARROW, d0, d1, d2, level, itemstack);
+    public Arrow(Level world, double d0, double d1, double d2, ItemStack itemstack) {
+        super(EntityType.ARROW, d0, d1, d2, world, itemstack);
         this.potion = Potions.EMPTY;
         this.effects = Sets.newHashSet();
     }
 
-    public Arrow(Level level, LivingEntity livingentity, ItemStack itemstack) {
-        super(EntityType.ARROW, livingentity, level, itemstack);
+    public Arrow(Level world, LivingEntity entityliving, ItemStack itemstack) {
+        super(EntityType.ARROW, entityliving, world, itemstack);
         this.potion = Potions.EMPTY;
         this.effects = Sets.newHashSet();
     }
 
-    public void setEffectsFromItem(ItemStack itemstack) {
-        if (itemstack.is(Items.TIPPED_ARROW)) {
-            this.potion = PotionUtils.getPotion(itemstack);
-            Collection<MobEffectInstance> collection = PotionUtils.getCustomEffects(itemstack);
+    public void setEffectsFromItem(ItemStack stack) {
+        if (stack.is(Items.TIPPED_ARROW)) {
+            this.potion = PotionUtils.getPotion(stack);
+            Collection<MobEffectInstance> collection = PotionUtils.getCustomEffects(stack);
 
             if (!collection.isEmpty()) {
                 Iterator iterator = collection.iterator();
 
                 while (iterator.hasNext()) {
-                    MobEffectInstance mobeffectinstance = (MobEffectInstance) iterator.next();
+                    MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
 
-                    this.effects.add(new MobEffectInstance(mobeffectinstance));
+                    this.effects.add(new MobEffectInstance(mobeffect));
                 }
             }
 
-            int i = getCustomColor(itemstack);
+            int i = getCustomColor(stack);
 
             if (i == -1) {
                 this.updateColor();
             } else {
                 this.setFixedColor(i);
             }
-        } else if (itemstack.is(Items.ARROW)) {
+        } else if (stack.is(Items.ARROW)) {
             this.potion = Potions.EMPTY;
             this.effects.clear();
             this.entityData.set(Arrow.ID_EFFECT_COLOR, -1);
@@ -81,13 +81,13 @@
 
     }
 
-    public static int getCustomColor(ItemStack itemstack) {
-        CompoundTag compoundtag = itemstack.getTag();
+    public static int getCustomColor(ItemStack stack) {
+        CompoundTag nbttagcompound = stack.getTag();
 
-        return compoundtag != null && compoundtag.contains("CustomPotionColor", 99) ? compoundtag.getInt("CustomPotionColor") : -1;
+        return nbttagcompound != null && nbttagcompound.contains("CustomPotionColor", 99) ? nbttagcompound.getInt("CustomPotionColor") : -1;
     }
 
-    private void updateColor() {
+    public void updateColor() {
         this.fixedColor = false;
         if (this.potion == Potions.EMPTY && this.effects.isEmpty()) {
             this.entityData.set(Arrow.ID_EFFECT_COLOR, -1);
@@ -97,20 +97,18 @@
 
     }
 
-    public void addEffect(MobEffectInstance mobeffectinstance) {
-        this.effects.add(mobeffectinstance);
+    public void addEffect(MobEffectInstance effectInstance) {
+        this.effects.add(effectInstance);
         this.getEntityData().set(Arrow.ID_EFFECT_COLOR, PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects)));
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Arrow.ID_EFFECT_COLOR, -1);
     }
 
     @Override
-    @Override
     public void tick() {
         super.tick();
         if (this.level().isClientSide) {
@@ -130,15 +128,15 @@
 
     }
 
-    private void makeParticle(int i) {
+    private void makeParticle(int particleAmount) {
         int j = this.getColor();
 
-        if (j != -1 && i > 0) {
+        if (j != -1 && particleAmount > 0) {
             double d0 = (double) (j >> 16 & 255) / 255.0D;
             double d1 = (double) (j >> 8 & 255) / 255.0D;
             double d2 = (double) (j >> 0 & 255) / 255.0D;
 
-            for (int k = 0; k < i; ++k) {
+            for (int k = 0; k < particleAmount; ++k) {
                 this.level().addParticle(ParticleTypes.ENTITY_EFFECT, this.getRandomX(0.5D), this.getRandomY(), this.getRandomZ(0.5D), d0, d1, d2);
             }
 
@@ -149,56 +147,54 @@
         return (Integer) this.entityData.get(Arrow.ID_EFFECT_COLOR);
     }
 
-    private void setFixedColor(int i) {
+    public void setFixedColor(int fixedColor) {
         this.fixedColor = true;
-        this.entityData.set(Arrow.ID_EFFECT_COLOR, i);
+        this.entityData.set(Arrow.ID_EFFECT_COLOR, fixedColor);
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
         if (this.potion != Potions.EMPTY) {
-            compoundtag.putString("Potion", BuiltInRegistries.POTION.getKey(this.potion).toString());
+            compound.putString("Potion", BuiltInRegistries.POTION.getKey(this.potion).toString());
         }
 
         if (this.fixedColor) {
-            compoundtag.putInt("Color", this.getColor());
+            compound.putInt("Color", this.getColor());
         }
 
         if (!this.effects.isEmpty()) {
-            ListTag listtag = new ListTag();
+            ListTag nbttaglist = new ListTag();
             Iterator iterator = this.effects.iterator();
 
             while (iterator.hasNext()) {
-                MobEffectInstance mobeffectinstance = (MobEffectInstance) iterator.next();
+                MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
 
-                listtag.add(mobeffectinstance.save(new CompoundTag()));
+                nbttaglist.add(mobeffect.save(new CompoundTag()));
             }
 
-            compoundtag.put("custom_potion_effects", listtag);
+            compound.put("custom_potion_effects", nbttaglist);
         }
 
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        if (compoundtag.contains("Potion", 8)) {
-            this.potion = PotionUtils.getPotion(compoundtag);
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        if (compound.contains("Potion", 8)) {
+            this.potion = PotionUtils.getPotion(compound);
         }
 
-        Iterator iterator = PotionUtils.getCustomEffects(compoundtag).iterator();
+        Iterator iterator = PotionUtils.getCustomEffects(compound).iterator();
 
         while (iterator.hasNext()) {
-            MobEffectInstance mobeffectinstance = (MobEffectInstance) iterator.next();
+            MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
 
-            this.addEffect(mobeffectinstance);
+            this.addEffect(mobeffect);
         }
 
-        if (compoundtag.contains("Color", 99)) {
-            this.setFixedColor(compoundtag.getInt("Color"));
+        if (compound.contains("Color", 99)) {
+            this.setFixedColor(compound.getInt("Color"));
         } else {
             this.updateColor();
         }
@@ -206,34 +202,32 @@
     }
 
     @Override
-    @Override
-    protected void doPostHurtEffects(LivingEntity livingentity) {
-        super.doPostHurtEffects(livingentity);
+    protected void doPostHurtEffects(LivingEntity living) {
+        super.doPostHurtEffects(living);
         Entity entity = this.getEffectSource();
         Iterator iterator = this.potion.getEffects().iterator();
 
-        MobEffectInstance mobeffectinstance;
+        MobEffectInstance mobeffect;
 
         while (iterator.hasNext()) {
-            mobeffectinstance = (MobEffectInstance) iterator.next();
-            livingentity.addEffect(new MobEffectInstance(mobeffectinstance.getEffect(), Math.max(mobeffectinstance.mapDuration((i) -> {
+            mobeffect = (MobEffectInstance) iterator.next();
+            living.addEffect(new MobEffectInstance(mobeffect.getEffect(), Math.max(mobeffect.mapDuration((i) -> {
                 return i / 8;
-            }), 1), mobeffectinstance.getAmplifier(), mobeffectinstance.isAmbient(), mobeffectinstance.isVisible()), entity);
+            }), 1), mobeffect.getAmplifier(), mobeffect.isAmbient(), mobeffect.isVisible()), entity, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ARROW); // CraftBukkit
         }
 
         if (!this.effects.isEmpty()) {
             iterator = this.effects.iterator();
 
             while (iterator.hasNext()) {
-                mobeffectinstance = (MobEffectInstance) iterator.next();
-                livingentity.addEffect(mobeffectinstance, entity);
+                mobeffect = (MobEffectInstance) iterator.next();
+                living.addEffect(mobeffect, entity, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ARROW); // CraftBukkit
             }
         }
 
     }
 
     @Override
-    @Override
     protected ItemStack getPickupItem() {
         ItemStack itemstack = super.getPickupItem();
 
@@ -251,9 +245,8 @@
     }
 
     @Override
-    @Override
-    public void handleEntityEvent(byte b0) {
-        if (b0 == 0) {
+    public void handleEntityEvent(byte id) {
+        if (id == 0) {
             int i = this.getColor();
 
             if (i != -1) {
@@ -266,7 +259,7 @@
                 }
             }
         } else {
-            super.handleEntityEvent(b0);
+            super.handleEntityEvent(id);
         }
 
     }
