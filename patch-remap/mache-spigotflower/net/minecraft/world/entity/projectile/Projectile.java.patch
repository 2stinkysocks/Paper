--- a/net/minecraft/world/entity/projectile/Projectile.java
+++ b/net/minecraft/world/entity/projectile/Projectile.java
@@ -18,12 +18,15 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.projectiles.ProjectileSource;
+// CraftBukkit end
 
 public abstract class Projectile extends Entity implements TraceableEntity {
 
@@ -34,32 +37,36 @@
     private boolean leftOwner;
     private boolean hasBeenShot;
 
-    Projectile(EntityType<? extends Projectile> entitytype, Level level) {
-        super(entitytype, level);
+    // CraftBukkit start
+    private boolean hitCancelled = false;
+    // CraftBukkit end
+
+    Projectile(EntityType<? extends Projectile> entityType, Level level) {
+        super(entityType, level);
     }
 
-    public void setOwner(@Nullable Entity entity) {
-        if (entity != null) {
-            this.ownerUUID = entity.getUUID();
-            this.cachedOwner = entity;
+    public void setOwner(@Nullable Entity owner) {
+        if (owner != null) {
+            this.ownerUUID = owner.getUUID();
+            this.cachedOwner = owner;
         }
+        this.projectileSource = (owner != null && owner.getBukkitEntity() instanceof ProjectileSource) ? (ProjectileSource) owner.getBukkitEntity() : null; // CraftBukkit
 
     }
 
     @Nullable
     @Override
-    @Override
     public Entity getOwner() {
         if (this.cachedOwner != null && !this.cachedOwner.isRemoved()) {
             return this.cachedOwner;
         } else {
             if (this.ownerUUID != null) {
-                Level level = this.level();
+                Level world = this.level();
 
-                if (level instanceof ServerLevel) {
-                    ServerLevel serverlevel = (ServerLevel) level;
+                if (world instanceof ServerLevel) {
+                    ServerLevel worldserver = (ServerLevel) world;
 
-                    this.cachedOwner = serverlevel.getEntity(this.ownerUUID);
+                    this.cachedOwner = worldserver.getEntity(this.ownerUUID);
                     return this.cachedOwner;
                 }
             }
@@ -73,17 +80,16 @@
     }
 
     @Override
-    @Override
-    protected void addAdditionalSaveData(CompoundTag compoundtag) {
+    protected void addAdditionalSaveData(CompoundTag compound) {
         if (this.ownerUUID != null) {
-            compoundtag.putUUID("Owner", this.ownerUUID);
+            compound.putUUID("Owner", this.ownerUUID);
         }
 
         if (this.leftOwner) {
-            compoundtag.putBoolean("LeftOwner", true);
+            compound.putBoolean("LeftOwner", true);
         }
 
-        compoundtag.putBoolean("HasBeenShot", this.hasBeenShot);
+        compound.putBoolean("HasBeenShot", this.hasBeenShot);
     }
 
     protected boolean ownedBy(Entity entity) {
@@ -91,31 +97,28 @@
     }
 
     @Override
-    @Override
-    protected void readAdditionalSaveData(CompoundTag compoundtag) {
-        if (compoundtag.hasUUID("Owner")) {
-            this.ownerUUID = compoundtag.getUUID("Owner");
+    protected void readAdditionalSaveData(CompoundTag compound) {
+        if (compound.hasUUID("Owner")) {
+            this.ownerUUID = compound.getUUID("Owner");
             this.cachedOwner = null;
         }
 
-        this.leftOwner = compoundtag.getBoolean("LeftOwner");
-        this.hasBeenShot = compoundtag.getBoolean("HasBeenShot");
+        this.leftOwner = compound.getBoolean("LeftOwner");
+        this.hasBeenShot = compound.getBoolean("HasBeenShot");
     }
 
     @Override
-    @Override
     public void restoreFrom(Entity entity) {
         super.restoreFrom(entity);
         if (entity instanceof Projectile) {
-            Projectile projectile = (Projectile) entity;
+            Projectile iprojectile = (Projectile) entity;
 
-            this.cachedOwner = projectile.cachedOwner;
+            this.cachedOwner = iprojectile.cachedOwner;
         }
 
     }
 
     @Override
-    @Override
     public void tick() {
         if (!this.hasBeenShot) {
             this.gameEvent(GameEvent.PROJECTILE_SHOOT, this.getOwner());
@@ -149,63 +152,77 @@
         return true;
     }
 
-    public void shoot(double d0, double d1, double d2, float f, float f1) {
-        Vec3 vec3 = (new Vec3(d0, d1, d2)).normalize().add(this.random.triangle(0.0D, 0.0172275D * (double) f1), this.random.triangle(0.0D, 0.0172275D * (double) f1), this.random.triangle(0.0D, 0.0172275D * (double) f1)).scale((double) f);
+    public void shoot(double x, double d1, double y, float f, float z) {
+        Vec3 vec3d = (new Vec3(x, d1, y)).normalize().add(this.random.triangle(0.0D, 0.0172275D * (double) z), this.random.triangle(0.0D, 0.0172275D * (double) z), this.random.triangle(0.0D, 0.0172275D * (double) z)).scale((double) f);
 
-        this.setDeltaMovement(vec3);
-        double d3 = vec3.horizontalDistance();
+        this.setDeltaMovement(vec3d);
+        double d3 = vec3d.horizontalDistance();
 
-        this.setYRot((float) (Mth.atan2(vec3.x, vec3.z) * 57.2957763671875D));
-        this.setXRot((float) (Mth.atan2(vec3.y, d3) * 57.2957763671875D));
+        this.setYRot((float) (Mth.atan2(vec3d.x, vec3d.z) * 57.2957763671875D));
+        this.setXRot((float) (Mth.atan2(vec3d.y, d3) * 57.2957763671875D));
         this.yRotO = this.getYRot();
         this.xRotO = this.getXRot();
     }
 
-    public void shootFromRotation(Entity entity, float f, float f1, float f2, float f3, float f4) {
-        float f5 = -Mth.sin(f1 * 0.017453292F) * Mth.cos(f * 0.017453292F);
-        float f6 = -Mth.sin((f + f2) * 0.017453292F);
-        float f7 = Mth.cos(f1 * 0.017453292F) * Mth.cos(f * 0.017453292F);
+    public void shootFromRotation(Entity shooter, float x, float y, float z, float velocity, float inaccuracy) {
+        float f5 = -Mth.sin(y * 0.017453292F) * Mth.cos(x * 0.017453292F);
+        float f6 = -Mth.sin((x + z) * 0.017453292F);
+        float f7 = Mth.cos(y * 0.017453292F) * Mth.cos(x * 0.017453292F);
 
-        this.shoot((double) f5, (double) f6, (double) f7, f3, f4);
-        Vec3 vec3 = entity.getDeltaMovement();
+        this.shoot((double) f5, (double) f6, (double) f7, velocity, inaccuracy);
+        Vec3 vec3d = shooter.getDeltaMovement();
 
-        this.setDeltaMovement(this.getDeltaMovement().add(vec3.x, entity.onGround() ? 0.0D : vec3.y, vec3.z));
+        this.setDeltaMovement(this.getDeltaMovement().add(vec3d.x, shooter.onGround() ? 0.0D : vec3d.y, vec3d.z));
     }
 
-    protected void onHit(HitResult hitresult) {
-        HitResult.Type hitresult_type = hitresult.getType();
+    // CraftBukkit start - call projectile hit event
+    protected void preOnHit(HitResult movingobjectposition) {
+        org.bukkit.event.entity.ProjectileHitEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, movingobjectposition);
+        this.hitCancelled = event != null && event.isCancelled();
+        if (movingobjectposition.getType() == HitResult.EnumMovingObjectType.BLOCK || !this.hitCancelled) {
+            this.onHit(movingobjectposition);
+        }
+    }
+    // CraftBukkit end
 
-        if (hitresult_type == HitResult.Type.ENTITY) {
-            this.onHitEntity((EntityHitResult) hitresult);
-            this.level().gameEvent(GameEvent.PROJECTILE_LAND, hitresult.getLocation(), GameEvent.Context.of(this, (BlockState) null));
-        } else if (hitresult_type == HitResult.Type.BLOCK) {
-            BlockHitResult blockhitresult = (BlockHitResult) hitresult;
+    protected void onHit(HitResult result) {
+        HitResult.EnumMovingObjectType movingobjectposition_enummovingobjecttype = result.getType();
 
-            this.onHitBlock(blockhitresult);
-            BlockPos blockpos = blockhitresult.getBlockPos();
+        if (movingobjectposition_enummovingobjecttype == HitResult.EnumMovingObjectType.ENTITY) {
+            this.onHitEntity((EntityHitResult) result);
+            this.level().gameEvent(GameEvent.PROJECTILE_LAND, result.getLocation(), GameEvent.Context.of(this, (IBlockData) null));
+        } else if (movingobjectposition_enummovingobjecttype == HitResult.EnumMovingObjectType.BLOCK) {
+            BlockHitResult movingobjectpositionblock = (BlockHitResult) result;
 
-            this.level().gameEvent(GameEvent.PROJECTILE_LAND, blockpos, GameEvent.Context.of(this, this.level().getBlockState(blockpos)));
+            this.onHitBlock(movingobjectpositionblock);
+            BlockPos blockposition = movingobjectpositionblock.getBlockPos();
+
+            this.level().gameEvent(GameEvent.PROJECTILE_LAND, blockposition, GameEvent.Context.of(this, this.level().getBlockState(blockposition)));
         }
 
     }
 
-    protected void onHitEntity(EntityHitResult entityhitresult) {}
+    protected void onHitEntity(EntityHitResult result) {}
 
-    protected void onHitBlock(BlockHitResult blockhitresult) {
-        BlockState blockstate = this.level().getBlockState(blockhitresult.getBlockPos());
+    protected void onHitBlock(BlockHitResult result) {
+        // CraftBukkit start - cancellable hit event
+        if (hitCancelled) {
+            return;
+        }
+        // CraftBukkit end
+        IBlockData iblockdata = this.level().getBlockState(result.getBlockPos());
 
-        blockstate.onProjectileHit(this.level(), blockstate, blockhitresult, this);
+        iblockdata.onProjectileHit(this.level(), iblockdata, result, this);
     }
 
     @Override
-    @Override
-    public void lerpMotion(double d0, double d1, double d2) {
-        this.setDeltaMovement(d0, d1, d2);
+    public void lerpMotion(double x, double d1, double y) {
+        this.setDeltaMovement(x, d1, y);
         if (this.xRotO == 0.0F && this.yRotO == 0.0F) {
-            double d3 = Math.sqrt(d0 * d0 + d2 * d2);
+            double d3 = Math.sqrt(x * x + y * y);
 
             this.setXRot((float) (Mth.atan2(d1, d3) * 57.2957763671875D));
-            this.setYRot((float) (Mth.atan2(d0, d2) * 57.2957763671875D));
+            this.setYRot((float) (Mth.atan2(x, y) * 57.2957763671875D));
             this.xRotO = this.getXRot();
             this.yRotO = this.getYRot();
             this.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
@@ -213,38 +230,37 @@
 
     }
 
-    protected boolean canHitEntity(Entity entity) {
-        if (!entity.canBeHitByProjectile()) {
+    protected boolean canHitEntity(Entity target) {
+        if (!target.canBeHitByProjectile()) {
             return false;
         } else {
             Entity entity1 = this.getOwner();
 
-            return entity1 == null || this.leftOwner || !entity1.isPassengerOfSameVehicle(entity);
+            return entity1 == null || this.leftOwner || !entity1.isPassengerOfSameVehicle(target);
         }
     }
 
     protected void updateRotation() {
-        Vec3 vec3 = this.getDeltaMovement();
-        double d0 = vec3.horizontalDistance();
+        Vec3 vec3d = this.getDeltaMovement();
+        double d0 = vec3d.horizontalDistance();
 
-        this.setXRot(lerpRotation(this.xRotO, (float) (Mth.atan2(vec3.y, d0) * 57.2957763671875D)));
-        this.setYRot(lerpRotation(this.yRotO, (float) (Mth.atan2(vec3.x, vec3.z) * 57.2957763671875D)));
+        this.setXRot(lerpRotation(this.xRotO, (float) (Mth.atan2(vec3d.y, d0) * 57.2957763671875D)));
+        this.setYRot(lerpRotation(this.yRotO, (float) (Mth.atan2(vec3d.x, vec3d.z) * 57.2957763671875D)));
     }
 
-    protected static float lerpRotation(float f, float f1) {
-        while (f1 - f < -180.0F) {
-            f -= 360.0F;
+    protected static float lerpRotation(float currentRotation, float targetRotation) {
+        while (targetRotation - currentRotation < -180.0F) {
+            currentRotation -= 360.0F;
         }
 
-        while (f1 - f >= 180.0F) {
-            f += 360.0F;
+        while (targetRotation - currentRotation >= 180.0F) {
+            currentRotation += 360.0F;
         }
 
-        return Mth.lerp(0.2F, f, f1);
+        return Mth.lerp(0.2F, currentRotation, targetRotation);
     }
 
     @Override
-    @Override
     public Packet<ClientGamePacketListener> getAddEntityPacket() {
         Entity entity = this.getOwner();
 
@@ -252,10 +268,9 @@
     }
 
     @Override
-    @Override
-    public void recreateFromPacket(ClientboundAddEntityPacket clientboundaddentitypacket) {
-        super.recreateFromPacket(clientboundaddentitypacket);
-        Entity entity = this.level().getEntity(clientboundaddentitypacket.getData());
+    public void recreateFromPacket(ClientboundAddEntityPacket packet) {
+        super.recreateFromPacket(packet);
+        Entity entity = this.level().getEntity(packet.getData());
 
         if (entity != null) {
             this.setOwner(entity);
@@ -264,14 +279,13 @@
     }
 
     @Override
-    @Override
-    public boolean mayInteract(Level level, BlockPos blockpos) {
+    public boolean mayInteract(Level level, BlockPos pos) {
         Entity entity = this.getOwner();
 
-        return entity instanceof Player ? entity.mayInteract(level, blockpos) : entity == null || level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING);
+        return entity instanceof Player ? entity.mayInteract(level, pos) : entity == null || level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING);
     }
 
-    public boolean mayBreak(Level level) {
-        return this.getType().is(EntityTypeTags.IMPACT_PROJECTILES) && level.getGameRules().getBoolean(GameRules.RULE_PROJECTILESCANBREAKBLOCKS);
+    public boolean mayBreak(Level world) {
+        return this.getType().is(EntityTypeTags.IMPACT_PROJECTILES) && world.getGameRules().getBoolean(GameRules.RULE_PROJECTILESCANBREAKBLOCKS);
     }
 }
