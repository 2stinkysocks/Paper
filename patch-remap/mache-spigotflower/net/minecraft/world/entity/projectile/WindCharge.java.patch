--- a/net/minecraft/world/entity/projectile/WindCharge.java
+++ b/net/minecraft/world/entity/projectile/WindCharge.java
@@ -8,9 +8,9 @@
 import net.minecraft.world.damagesource.DamageSources;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.monster.breeze.Breeze;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.ClipContext;
@@ -24,19 +24,18 @@
 
 public class WindCharge extends AbstractHurtingProjectile implements ItemSupplier {
 
-    public static final WindCharge.WindChargeExplosionDamageCalculator EXPLOSION_DAMAGE_CALCULATOR = new WindCharge.WindChargeExplosionDamageCalculator();
+    public static final WindCharge.a EXPLOSION_DAMAGE_CALCULATOR = new WindCharge.a();
 
-    public WindCharge(EntityType<? extends WindCharge> entitytype, Level level) {
-        super(entitytype, level);
+    public WindCharge(EntityType<? extends WindCharge> entityType, Level level) {
+        super(entityType, level);
     }
 
-    public WindCharge(EntityType<? extends WindCharge> entitytype, Breeze breeze, Level level) {
-        super(entitytype, breeze.getX(), breeze.getSnoutYPosition(), breeze.getZ(), level);
+    public WindCharge(EntityType<? extends WindCharge> entitytypes, Breeze breeze, Level world) {
+        super(entitytypes, breeze.getX(), breeze.getSnoutYPosition(), breeze.getZ(), world);
         this.setOwner(breeze);
     }
 
     @Override
-    @Override
     protected AABB makeBoundingBox() {
         float f = this.getType().getDimensions().width / 2.0F;
         float f1 = this.getType().getDimensions().height;
@@ -46,62 +45,56 @@
     }
 
     @Override
-    @Override
-    protected float getEyeHeight(Pose pose, EntityDimensions entitydimensions) {
+    protected float getEyeHeight(EntityPose pose, EntityDimensions dimensions) {
         return 0.0F;
     }
 
     @Override
-    @Override
     public boolean canCollideWith(Entity entity) {
         return entity instanceof WindCharge ? false : super.canCollideWith(entity);
     }
 
     @Override
-    @Override
-    protected boolean canHitEntity(Entity entity) {
-        return entity instanceof WindCharge ? false : super.canHitEntity(entity);
+    protected boolean canHitEntity(Entity target) {
+        return target instanceof WindCharge ? false : super.canHitEntity(target);
     }
 
     @Override
-    @Override
-    protected void onHitEntity(EntityHitResult entityhitresult) {
-        super.onHitEntity(entityhitresult);
+    protected void onHitEntity(EntityHitResult result) {
+        super.onHitEntity(result);
         if (!this.level().isClientSide) {
-            Entity entity = entityhitresult.getEntity();
+            Entity entity = result.getEntity();
             DamageSources damagesources = this.damageSources();
             Entity entity1 = this.getOwner();
-            LivingEntity livingentity;
+            LivingEntity entityliving;
 
             if (entity1 instanceof LivingEntity) {
-                LivingEntity livingentity1 = (LivingEntity) entity1;
+                LivingEntity entityliving1 = (LivingEntity) entity1;
 
-                livingentity = livingentity1;
+                entityliving = entityliving1;
             } else {
-                livingentity = null;
+                entityliving = null;
             }
 
-            entity.hurt(damagesources.mobProjectile(this, livingentity), 1.0F);
+            entity.hurt(damagesources.mobProjectile(this, entityliving), 1.0F);
             this.explode();
         }
     }
 
-    private void explode() {
-        this.level().explode(this, (DamageSource) null, WindCharge.EXPLOSION_DAMAGE_CALCULATOR, this.getX(), this.getY(), this.getZ(), (float) (3.0D + this.random.nextDouble()), false, Level.ExplosionInteraction.BLOW, ParticleTypes.GUST, ParticleTypes.GUST_EMITTER, SoundEvents.WIND_BURST);
+    public void explode() { // PAIL private -> public
+        this.level().explode(this, (DamageSource) null, WindCharge.EXPLOSION_DAMAGE_CALCULATOR, this.getX(), this.getY(), this.getZ(), (float) (3.0D + this.random.nextDouble()), false, Level.a.BLOW, ParticleTypes.GUST, ParticleTypes.GUST_EMITTER, SoundEvents.WIND_BURST);
     }
 
     @Override
-    @Override
-    protected void onHitBlock(BlockHitResult blockhitresult) {
-        super.onHitBlock(blockhitresult);
+    protected void onHitBlock(BlockHitResult result) {
+        super.onHitBlock(result);
         this.explode();
         this.discard();
     }
 
     @Override
-    @Override
-    protected void onHit(HitResult hitresult) {
-        super.onHit(hitresult);
+    protected void onHit(HitResult result) {
+        super.onHit(result);
         if (!this.level().isClientSide) {
             this.discard();
         }
@@ -109,48 +102,41 @@
     }
 
     @Override
-    @Override
     protected boolean shouldBurn() {
         return false;
     }
 
     @Override
-    @Override
     public ItemStack getItem() {
         return ItemStack.EMPTY;
     }
 
     @Override
-    @Override
     protected float getInertia() {
         return 1.0F;
     }
 
     @Override
-    @Override
     protected float getLiquidInertia() {
         return this.getInertia();
     }
 
     @Nullable
     @Override
-    @Override
     protected ParticleOptions getTrailParticle() {
         return null;
     }
 
     @Override
-    @Override
     protected ClipContext.Block getClipType() {
         return ClipContext.Block.OUTLINE;
     }
 
-    public static final class WindChargeExplosionDamageCalculator extends ExplosionDamageCalculator {
+    public static final class a extends ExplosionDamageCalculator {
 
-        public WindChargeExplosionDamageCalculator() {}
+        public a() {}
 
         @Override
-        @Override
         public boolean shouldDamageEntity(Explosion explosion, Entity entity) {
             return false;
         }
