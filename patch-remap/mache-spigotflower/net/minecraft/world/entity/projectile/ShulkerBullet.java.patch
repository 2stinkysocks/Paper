--- a/net/minecraft/world/entity/projectile/ShulkerBullet.java
+++ b/net/minecraft/world/entity/projectile/ShulkerBullet.java
@@ -43,69 +43,78 @@
     @Nullable
     private UUID targetId;
 
-    public ShulkerBullet(EntityType<? extends ShulkerBullet> entitytype, Level level) {
-        super(entitytype, level);
+    public ShulkerBullet(EntityType<? extends ShulkerBullet> entityType, Level level) {
+        super(entityType, level);
         this.noPhysics = true;
     }
 
-    public ShulkerBullet(Level level, LivingEntity livingentity, Entity entity, Direction.Axis direction_axis) {
+    public ShulkerBullet(Level level, LivingEntity shooter, Entity finalTarget, Direction.Axis axis) {
         this(EntityType.SHULKER_BULLET, level);
-        this.setOwner(livingentity);
-        BlockPos blockpos = livingentity.blockPosition();
-        double d0 = (double) blockpos.getX() + 0.5D;
-        double d1 = (double) blockpos.getY() + 0.5D;
-        double d2 = (double) blockpos.getZ() + 0.5D;
+        this.setOwner(shooter);
+        BlockPos blockposition = shooter.blockPosition();
+        double d0 = (double) blockposition.getX() + 0.5D;
+        double d1 = (double) blockposition.getY() + 0.5D;
+        double d2 = (double) blockposition.getZ() + 0.5D;
 
         this.moveTo(d0, d1, d2, this.getYRot(), this.getXRot());
-        this.finalTarget = entity;
+        this.finalTarget = finalTarget;
         this.currentMoveDirection = Direction.UP;
-        this.selectNextMoveDirection(direction_axis);
+        this.selectNextMoveDirection(axis);
+        projectileSource = (org.bukkit.entity.LivingEntity) shooter.getBukkitEntity(); // CraftBukkit
     }
 
+    // CraftBukkit start
+    public Entity getTarget() {
+        return this.finalTarget;
+    }
+
+    public void setTarget(Entity e) {
+        this.finalTarget = e;
+        this.currentMoveDirection = Direction.UP;
+        this.selectNextMoveDirection(Direction.Axis.X);
+    }
+    // CraftBukkit end
+
     @Override
-    @Override
     public SoundSource getSoundSource() {
         return SoundSource.HOSTILE;
     }
 
     @Override
-    @Override
-    protected void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
+    protected void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
         if (this.finalTarget != null) {
-            compoundtag.putUUID("Target", this.finalTarget.getUUID());
+            compound.putUUID("Target", this.finalTarget.getUUID());
         }
 
         if (this.currentMoveDirection != null) {
-            compoundtag.putInt("Dir", this.currentMoveDirection.get3DDataValue());
+            compound.putInt("Dir", this.currentMoveDirection.get3DDataValue());
         }
 
-        compoundtag.putInt("Steps", this.flightSteps);
-        compoundtag.putDouble("TXD", this.targetDeltaX);
-        compoundtag.putDouble("TYD", this.targetDeltaY);
-        compoundtag.putDouble("TZD", this.targetDeltaZ);
+        compound.putInt("Steps", this.flightSteps);
+        compound.putDouble("TXD", this.targetDeltaX);
+        compound.putDouble("TYD", this.targetDeltaY);
+        compound.putDouble("TZD", this.targetDeltaZ);
     }
 
     @Override
-    @Override
-    protected void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.flightSteps = compoundtag.getInt("Steps");
-        this.targetDeltaX = compoundtag.getDouble("TXD");
-        this.targetDeltaY = compoundtag.getDouble("TYD");
-        this.targetDeltaZ = compoundtag.getDouble("TZD");
-        if (compoundtag.contains("Dir", 99)) {
-            this.currentMoveDirection = Direction.from3DDataValue(compoundtag.getInt("Dir"));
+    protected void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.flightSteps = compound.getInt("Steps");
+        this.targetDeltaX = compound.getDouble("TXD");
+        this.targetDeltaY = compound.getDouble("TYD");
+        this.targetDeltaZ = compound.getDouble("TZD");
+        if (compound.contains("Dir", 99)) {
+            this.currentMoveDirection = Direction.from3DDataValue(compound.getInt("Dir"));
         }
 
-        if (compoundtag.hasUUID("Target")) {
-            this.targetId = compoundtag.getUUID("Target");
+        if (compound.hasUUID("Target")) {
+            this.targetId = compound.getUUID("Target");
         }
 
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {}
 
     @Nullable
@@ -117,65 +126,65 @@
         this.currentMoveDirection = direction;
     }
 
-    private void selectNextMoveDirection(@Nullable Direction.Axis direction_axis) {
+    private void selectNextMoveDirection(@Nullable Direction.Axis axis) {
         double d0 = 0.5D;
-        BlockPos blockpos;
+        BlockPos blockposition;
 
         if (this.finalTarget == null) {
-            blockpos = this.blockPosition().below();
+            blockposition = this.blockPosition().below();
         } else {
             d0 = (double) this.finalTarget.getBbHeight() * 0.5D;
-            blockpos = BlockPos.containing(this.finalTarget.getX(), this.finalTarget.getY() + d0, this.finalTarget.getZ());
+            blockposition = BlockPos.containing(this.finalTarget.getX(), this.finalTarget.getY() + d0, this.finalTarget.getZ());
         }
 
-        double d1 = (double) blockpos.getX() + 0.5D;
-        double d2 = (double) blockpos.getY() + d0;
-        double d3 = (double) blockpos.getZ() + 0.5D;
-        Direction direction = null;
+        double d1 = (double) blockposition.getX() + 0.5D;
+        double d2 = (double) blockposition.getY() + d0;
+        double d3 = (double) blockposition.getZ() + 0.5D;
+        Direction enumdirection = null;
 
-        if (!blockpos.closerToCenterThan(this.position(), 2.0D)) {
-            BlockPos blockpos1 = this.blockPosition();
+        if (!blockposition.closerToCenterThan(this.position(), 2.0D)) {
+            BlockPos blockposition1 = this.blockPosition();
             List<Direction> list = Lists.newArrayList();
 
-            if (direction_axis != Direction.Axis.X) {
-                if (blockpos1.getX() < blockpos.getX() && this.level().isEmptyBlock(blockpos1.east())) {
+            if (axis != Direction.Axis.X) {
+                if (blockposition1.getX() < blockposition.getX() && this.level().isEmptyBlock(blockposition1.east())) {
                     list.add(Direction.EAST);
-                } else if (blockpos1.getX() > blockpos.getX() && this.level().isEmptyBlock(blockpos1.west())) {
+                } else if (blockposition1.getX() > blockposition.getX() && this.level().isEmptyBlock(blockposition1.west())) {
                     list.add(Direction.WEST);
                 }
             }
 
-            if (direction_axis != Direction.Axis.Y) {
-                if (blockpos1.getY() < blockpos.getY() && this.level().isEmptyBlock(blockpos1.above())) {
+            if (axis != Direction.Axis.Y) {
+                if (blockposition1.getY() < blockposition.getY() && this.level().isEmptyBlock(blockposition1.above())) {
                     list.add(Direction.UP);
-                } else if (blockpos1.getY() > blockpos.getY() && this.level().isEmptyBlock(blockpos1.below())) {
+                } else if (blockposition1.getY() > blockposition.getY() && this.level().isEmptyBlock(blockposition1.below())) {
                     list.add(Direction.DOWN);
                 }
             }
 
-            if (direction_axis != Direction.Axis.Z) {
-                if (blockpos1.getZ() < blockpos.getZ() && this.level().isEmptyBlock(blockpos1.south())) {
+            if (axis != Direction.Axis.Z) {
+                if (blockposition1.getZ() < blockposition.getZ() && this.level().isEmptyBlock(blockposition1.south())) {
                     list.add(Direction.SOUTH);
-                } else if (blockpos1.getZ() > blockpos.getZ() && this.level().isEmptyBlock(blockpos1.north())) {
+                } else if (blockposition1.getZ() > blockposition.getZ() && this.level().isEmptyBlock(blockposition1.north())) {
                     list.add(Direction.NORTH);
                 }
             }
 
-            direction = Direction.getRandom(this.random);
+            enumdirection = Direction.getRandom(this.random);
             if (list.isEmpty()) {
-                for (int i = 5; !this.level().isEmptyBlock(blockpos1.relative(direction)) && i > 0; --i) {
-                    direction = Direction.getRandom(this.random);
+                for (int i = 5; !this.level().isEmptyBlock(blockposition1.relative(enumdirection)) && i > 0; --i) {
+                    enumdirection = Direction.getRandom(this.random);
                 }
             } else {
-                direction = (Direction) list.get(this.random.nextInt(list.size()));
+                enumdirection = (Direction) list.get(this.random.nextInt(list.size()));
             }
 
-            d1 = this.getX() + (double) direction.getStepX();
-            d2 = this.getY() + (double) direction.getStepY();
-            d3 = this.getZ() + (double) direction.getStepZ();
+            d1 = this.getX() + (double) enumdirection.getStepX();
+            d2 = this.getY() + (double) enumdirection.getStepY();
+            d3 = this.getZ() + (double) enumdirection.getStepZ();
         }
 
-        this.setMoveDirection(direction);
+        this.setMoveDirection(enumdirection);
         double d4 = d1 - this.getX();
         double d5 = d2 - this.getY();
         double d6 = d3 - this.getZ();
@@ -196,7 +205,6 @@
     }
 
     @Override
-    @Override
     public void checkDespawn() {
         if (this.level().getDifficulty() == Difficulty.PEACEFUL) {
             this.discard();
@@ -205,10 +213,9 @@
     }
 
     @Override
-    @Override
     public void tick() {
         super.tick();
-        Vec3 vec3;
+        Vec3 vec3d;
 
         if (!this.level().isClientSide) {
             if (this.finalTarget == null && this.targetId != null) {
@@ -222,25 +229,25 @@
                 this.targetDeltaX = Mth.clamp(this.targetDeltaX * 1.025D, -1.0D, 1.0D);
                 this.targetDeltaY = Mth.clamp(this.targetDeltaY * 1.025D, -1.0D, 1.0D);
                 this.targetDeltaZ = Mth.clamp(this.targetDeltaZ * 1.025D, -1.0D, 1.0D);
-                vec3 = this.getDeltaMovement();
-                this.setDeltaMovement(vec3.add((this.targetDeltaX - vec3.x) * 0.2D, (this.targetDeltaY - vec3.y) * 0.2D, (this.targetDeltaZ - vec3.z) * 0.2D));
+                vec3d = this.getDeltaMovement();
+                this.setDeltaMovement(vec3d.add((this.targetDeltaX - vec3d.x) * 0.2D, (this.targetDeltaY - vec3d.y) * 0.2D, (this.targetDeltaZ - vec3d.z) * 0.2D));
             } else if (!this.isNoGravity()) {
                 this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.04D, 0.0D));
             }
 
-            HitResult hitresult = ProjectileUtil.getHitResultOnMoveVector(this, this::canHitEntity);
+            HitResult movingobjectposition = ProjectileUtil.getHitResultOnMoveVector(this, this::canHitEntity);
 
-            if (hitresult.getType() != HitResult.Type.MISS) {
-                this.onHit(hitresult);
+            if (movingobjectposition.getType() != HitResult.EnumMovingObjectType.MISS) {
+                this.preOnHit(movingobjectposition); // CraftBukkit - projectile hit event
             }
         }
 
         this.checkInsideBlocks();
-        vec3 = this.getDeltaMovement();
-        this.setPos(this.getX() + vec3.x, this.getY() + vec3.y, this.getZ() + vec3.z);
+        vec3d = this.getDeltaMovement();
+        this.setPos(this.getX() + vec3d.x, this.getY() + vec3d.y, this.getZ() + vec3d.z);
         ProjectileUtil.rotateTowardsMovement(this, 0.5F);
         if (this.level().isClientSide) {
-            this.level().addParticle(ParticleTypes.END_ROD, this.getX() - vec3.x, this.getY() - vec3.y + 0.15D, this.getZ() - vec3.z, 0.0D, 0.0D, 0.0D);
+            this.level().addParticle(ParticleTypes.END_ROD, this.getX() - vec3d.x, this.getY() - vec3d.y + 0.15D, this.getZ() - vec3d.z, 0.0D, 0.0D, 0.0D);
         } else if (this.finalTarget != null && !this.finalTarget.isRemoved()) {
             if (this.flightSteps > 0) {
                 --this.flightSteps;
@@ -250,16 +257,16 @@
             }
 
             if (this.currentMoveDirection != null) {
-                BlockPos blockpos = this.blockPosition();
-                Direction.Axis direction_axis = this.currentMoveDirection.getAxis();
+                BlockPos blockposition = this.blockPosition();
+                Direction.Axis enumdirection_enumaxis = this.currentMoveDirection.getAxis();
 
-                if (this.level().loadedAndEntityCanStandOn(blockpos.relative(this.currentMoveDirection), this)) {
-                    this.selectNextMoveDirection(direction_axis);
+                if (this.level().loadedAndEntityCanStandOn(blockposition.relative(this.currentMoveDirection), this)) {
+                    this.selectNextMoveDirection(enumdirection_enumaxis);
                 } else {
-                    BlockPos blockpos1 = this.finalTarget.blockPosition();
+                    BlockPos blockposition1 = this.finalTarget.blockPosition();
 
-                    if (direction_axis == Direction.Axis.X && blockpos.getX() == blockpos1.getX() || direction_axis == Direction.Axis.Z && blockpos.getZ() == blockpos1.getZ() || direction_axis == Direction.Axis.Y && blockpos.getY() == blockpos1.getY()) {
-                        this.selectNextMoveDirection(direction_axis);
+                    if (enumdirection_enumaxis == Direction.Axis.X && blockposition.getX() == blockposition1.getX() || enumdirection_enumaxis == Direction.Axis.Z && blockposition.getZ() == blockposition1.getZ() || enumdirection_enumaxis == Direction.Axis.Y && blockposition.getY() == blockposition1.getY()) {
+                        this.selectNextMoveDirection(enumdirection_enumaxis);
                     }
                 }
             }
@@ -268,53 +275,47 @@
     }
 
     @Override
-    @Override
-    protected boolean canHitEntity(Entity entity) {
-        return super.canHitEntity(entity) && !entity.noPhysics;
+    protected boolean canHitEntity(Entity target) {
+        return super.canHitEntity(target) && !target.noPhysics;
     }
 
     @Override
-    @Override
     public boolean isOnFire() {
         return false;
     }
 
     @Override
-    @Override
-    public boolean shouldRenderAtSqrDistance(double d0) {
-        return d0 < 16384.0D;
+    public boolean shouldRenderAtSqrDistance(double distance) {
+        return distance < 16384.0D;
     }
 
     @Override
-    @Override
     public float getLightLevelDependentMagicValue() {
         return 1.0F;
     }
 
     @Override
-    @Override
-    protected void onHitEntity(EntityHitResult entityhitresult) {
-        super.onHitEntity(entityhitresult);
-        Entity entity = entityhitresult.getEntity();
+    protected void onHitEntity(EntityHitResult result) {
+        super.onHitEntity(result);
+        Entity entity = result.getEntity();
         Entity entity1 = this.getOwner();
-        LivingEntity livingentity = entity1 instanceof LivingEntity ? (LivingEntity) entity1 : null;
-        boolean flag = entity.hurt(this.damageSources().mobProjectile(this, livingentity), 4.0F);
+        LivingEntity entityliving = entity1 instanceof LivingEntity ? (LivingEntity) entity1 : null;
+        boolean flag = entity.hurt(this.damageSources().mobProjectile(this, entityliving), 4.0F);
 
         if (flag) {
-            this.doEnchantDamageEffects(livingentity, entity);
+            this.doEnchantDamageEffects(entityliving, entity);
             if (entity instanceof LivingEntity) {
-                LivingEntity livingentity1 = (LivingEntity) entity;
+                LivingEntity entityliving1 = (LivingEntity) entity;
 
-                livingentity1.addEffect(new MobEffectInstance(MobEffects.LEVITATION, 200), (Entity) MoreObjects.firstNonNull(entity1, this));
+                entityliving1.addEffect(new MobEffectInstance(MobEffects.LEVITATION, 200), (Entity) MoreObjects.firstNonNull(entity1, this), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
             }
         }
 
     }
 
     @Override
-    @Override
-    protected void onHitBlock(BlockHitResult blockhitresult) {
-        super.onHitBlock(blockhitresult);
+    protected void onHitBlock(BlockHitResult result) {
+        super.onHitBlock(result);
         ((ServerLevel) this.level()).sendParticles(ParticleTypes.EXPLOSION, this.getX(), this.getY(), this.getZ(), 2, 0.2D, 0.2D, 0.2D, 0.0D);
         this.playSound(SoundEvents.SHULKER_BULLET_HIT, 1.0F, 1.0F);
     }
@@ -325,21 +326,23 @@
     }
 
     @Override
-    @Override
-    protected void onHit(HitResult hitresult) {
-        super.onHit(hitresult);
+    protected void onHit(HitResult result) {
+        super.onHit(result);
         this.destroy();
     }
 
     @Override
-    @Override
     public boolean isPickable() {
         return true;
     }
 
     @Override
-    @Override
-    public boolean hurt(DamageSource damagesource, float f) {
+    public boolean hurt(DamageSource source, float amount) {
+        // CraftBukkit start
+        if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount, false)) {
+            return false;
+        }
+        // CraftBukkit end
         if (!this.level().isClientSide) {
             this.playSound(SoundEvents.SHULKER_BULLET_HURT, 1.0F, 1.0F);
             ((ServerLevel) this.level()).sendParticles(ParticleTypes.CRIT, this.getX(), this.getY(), this.getZ(), 15, 0.2D, 0.2D, 0.2D, 0.0D);
@@ -350,12 +353,11 @@
     }
 
     @Override
-    @Override
-    public void recreateFromPacket(ClientboundAddEntityPacket clientboundaddentitypacket) {
-        super.recreateFromPacket(clientboundaddentitypacket);
-        double d0 = clientboundaddentitypacket.getXa();
-        double d1 = clientboundaddentitypacket.getYa();
-        double d2 = clientboundaddentitypacket.getZa();
+    public void recreateFromPacket(ClientboundAddEntityPacket packet) {
+        super.recreateFromPacket(packet);
+        double d0 = packet.getXa();
+        double d1 = packet.getYa();
+        double d2 = packet.getZa();
 
         this.setDeltaMovement(d0, d1, d2);
     }
