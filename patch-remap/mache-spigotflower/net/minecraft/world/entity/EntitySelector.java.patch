--- a/net/minecraft/world/entity/EntitySelector.java
+++ b/net/minecraft/world/entity/EntitySelector.java
@@ -31,33 +31,33 @@
 
     private EntitySelector() {}
 
-    public static Predicate<Entity> withinDistance(double d0, double d1, double d2, double d3) {
+    public static Predicate<Entity> withinDistance(double x, double d1, double y, double d3) {
         double d4 = d3 * d3;
 
         return (entity) -> {
-            return entity != null && entity.distanceToSqr(d0, d1, d2) <= d4;
+            return entity != null && entity.distanceToSqr(x, d1, y) <= d4;
         };
     }
 
     public static Predicate<Entity> pushableBy(Entity entity) {
-        PlayerTeam playerteam = entity.getTeam();
-        Team.CollisionRule team_collisionrule = playerteam == null ? Team.CollisionRule.ALWAYS : playerteam.getCollisionRule();
+        PlayerTeam scoreboardteam = entity.getTeam();
+        Team.CollisionRule scoreboardteambase_enumteampush = scoreboardteam == null ? Team.CollisionRule.ALWAYS : scoreboardteam.getCollisionRule();
 
-        return (Predicate) (team_collisionrule == Team.CollisionRule.NEVER ? Predicates.alwaysFalse() : EntitySelector.NO_SPECTATORS.and((entity1) -> {
-            if (!entity1.isPushable()) {
+        return (Predicate) (scoreboardteambase_enumteampush == Team.CollisionRule.NEVER ? Predicates.alwaysFalse() : EntitySelector.NO_SPECTATORS.and((entity1) -> {
+            if (!entity1.canCollideWithBukkit(entity) || !entity.canCollideWithBukkit(entity1)) { // CraftBukkit - collidable API
                 return false;
             } else if (entity.level().isClientSide && (!(entity1 instanceof Player) || !((Player) entity1).isLocalPlayer())) {
                 return false;
             } else {
-                PlayerTeam playerteam1 = entity1.getTeam();
-                Team.CollisionRule team_collisionrule1 = playerteam1 == null ? Team.CollisionRule.ALWAYS : playerteam1.getCollisionRule();
+                PlayerTeam scoreboardteam1 = entity1.getTeam();
+                Team.CollisionRule scoreboardteambase_enumteampush1 = scoreboardteam1 == null ? Team.CollisionRule.ALWAYS : scoreboardteam1.getCollisionRule();
 
-                if (team_collisionrule1 == Team.CollisionRule.NEVER) {
+                if (scoreboardteambase_enumteampush1 == Team.CollisionRule.NEVER) {
                     return false;
                 } else {
-                    boolean flag = playerteam != null && playerteam.isAlliedTo(playerteam1);
+                    boolean flag = scoreboardteam != null && scoreboardteam.isAlliedTo(scoreboardteam1);
 
-                    return (team_collisionrule == Team.CollisionRule.PUSH_OWN_TEAM || team_collisionrule1 == Team.CollisionRule.PUSH_OWN_TEAM) && flag ? false : team_collisionrule != Team.CollisionRule.PUSH_OTHER_TEAMS && team_collisionrule1 != Team.CollisionRule.PUSH_OTHER_TEAMS || flag;
+                    return (scoreboardteambase_enumteampush == Team.CollisionRule.PUSH_OWN_TEAM || scoreboardteambase_enumteampush1 == Team.CollisionRule.PUSH_OWN_TEAM) && flag ? false : scoreboardteambase_enumteampush != Team.CollisionRule.PUSH_OTHER_TEAMS && scoreboardteambase_enumteampush1 != Team.CollisionRule.PUSH_OTHER_TEAMS || flag;
                 }
             }
         }));
@@ -84,20 +84,19 @@
 
         private final ItemStack itemStack;
 
-        public MobCanWearArmorEntitySelector(ItemStack itemstack) {
-            this.itemStack = itemstack;
+        public MobCanWearArmorEntitySelector(ItemStack stack) {
+            this.itemStack = stack;
         }
 
-        @Override
         public boolean test(@Nullable Entity entity) {
             if (!entity.isAlive()) {
                 return false;
             } else if (!(entity instanceof LivingEntity)) {
                 return false;
             } else {
-                LivingEntity livingentity = (LivingEntity) entity;
+                LivingEntity entityliving = (LivingEntity) entity;
 
-                return livingentity.canTakeItem(this.itemStack);
+                return entityliving.canTakeItem(this.itemStack);
             }
         }
     }
