--- a/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -5,17 +5,6 @@
 import java.util.List;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.particles.ParticleTypes;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.syncher.EntityDataAccessor;
-import net.minecraft.network.syncher.EntityDataSerializers;
-import net.minecraft.network.syncher.SynchedEntityData;
-import net.minecraft.server.level.ServerBossEvent;
-import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.sounds.SoundEvent;
-import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.DamageTypeTags;
 import net.minecraft.util.Mth;
@@ -26,17 +15,17 @@
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMonsterType;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.PowerableMob;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.FlyingMoveControl;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
+import net.minecraft.world.entity.ai.goal.PathfinderGoalRandomFly;
 import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
 import net.minecraft.world.entity.ai.goal.RangedAttackGoal;
-import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomFlyingGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.ai.navigation.FlyingPathNavigation;
@@ -50,10 +39,30 @@
 import net.minecraft.world.entity.projectile.WitherSkull;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.GameRules;
-import net.minecraft.world.level.ItemLike;
+import net.minecraft.world.level.IMaterial;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.Vec3;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
+import net.minecraft.network.syncher.EntityDataAccessor;
+import net.minecraft.network.syncher.EntityDataSerializers;
+import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerBossEvent;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.world.level.block.Blocks;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
+// CraftBukkit end
 
 public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob {
 
@@ -70,14 +79,14 @@
     private final int[] nextHeadUpdate = new int[2];
     private final int[] idleHeadUpdates = new int[2];
     private int destroyBlocksTick;
-    private final ServerBossEvent bossEvent;
-    private static final Predicate<LivingEntity> LIVING_ENTITY_SELECTOR = (livingentity) -> {
-        return livingentity.getMobType() != MobType.UNDEAD && livingentity.attackable();
+    public final ServerBossEvent bossEvent;
+    private static final Predicate<LivingEntity> LIVING_ENTITY_SELECTOR = (entityliving) -> {
+        return entityliving.getMobType() != EnumMonsterType.UNDEAD && entityliving.attackable();
     };
     private static final TargetingConditions TARGETING_CONDITIONS = TargetingConditions.forCombat().range(20.0D).selector(WitherBoss.LIVING_ENTITY_SELECTOR);
 
-    public WitherBoss(EntityType<? extends WitherBoss> entitytype, Level level) {
-        super(entitytype, level);
+    public WitherBoss(EntityType<? extends WitherBoss> entityType, Level level) {
+        super(entityType, level);
         this.bossEvent = (ServerBossEvent) (new ServerBossEvent(this.getDisplayName(), BossEvent.BossBarColor.PURPLE, BossEvent.BossBarOverlay.PROGRESS)).setDarkenScreen(true);
         this.moveControl = new FlyingMoveControl(this, 10, false);
         this.setHealth(this.getMaxHealth());
@@ -85,22 +94,20 @@
     }
 
     @Override
-    @Override
     protected PathNavigation createNavigation(Level level) {
-        FlyingPathNavigation flyingpathnavigation = new FlyingPathNavigation(this, level);
+        FlyingPathNavigation navigationflying = new FlyingPathNavigation(this, level);
 
-        flyingpathnavigation.setCanOpenDoors(false);
-        flyingpathnavigation.setCanFloat(true);
-        flyingpathnavigation.setCanPassDoors(true);
-        return flyingpathnavigation;
+        navigationflying.setCanOpenDoors(false);
+        navigationflying.setCanFloat(true);
+        navigationflying.setCanPassDoors(true);
+        return navigationflying;
     }
 
     @Override
-    @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new WitherBoss.WitherDoNothingGoal());
         this.goalSelector.addGoal(2, new RangedAttackGoal(this, 1.0D, 40, 20.0F));
-        this.goalSelector.addGoal(5, new WaterAvoidingRandomFlyingGoal(this, 1.0D));
+        this.goalSelector.addGoal(5, new PathfinderGoalRandomFly(this, 1.0D));
         this.goalSelector.addGoal(6, new LookAtPlayerGoal(this, Player.class, 8.0F));
         this.goalSelector.addGoal(7, new RandomLookAroundGoal(this));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, new Class[0]));
@@ -108,7 +115,6 @@
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(WitherBoss.DATA_TARGET_A, 0);
@@ -118,17 +124,15 @@
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putInt("Invul", this.getInvulnerableTicks());
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putInt("Invul", this.getInvulnerableTicks());
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.setInvulnerableTicks(compoundtag.getInt("Invul"));
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.setInvulnerableTicks(compound.getInt("Invul"));
         if (this.hasCustomName()) {
             this.bossEvent.setName(this.getDisplayName());
         }
@@ -136,60 +140,55 @@
     }
 
     @Override
-    @Override
-    public void setCustomName(@Nullable Component component) {
-        super.setCustomName(component);
+    public void setCustomName(@Nullable Component name) {
+        super.setCustomName(name);
         this.bossEvent.setName(this.getDisplayName());
     }
 
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.WITHER_AMBIENT;
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.WITHER_HURT;
     }
 
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.WITHER_DEATH;
     }
 
     @Override
-    @Override
     public void aiStep() {
-        Vec3 vec3 = this.getDeltaMovement().multiply(1.0D, 0.6D, 1.0D);
+        Vec3 vec3d = this.getDeltaMovement().multiply(1.0D, 0.6D, 1.0D);
 
         if (!this.level().isClientSide && this.getAlternativeTarget(0) > 0) {
             Entity entity = this.level().getEntity(this.getAlternativeTarget(0));
 
             if (entity != null) {
-                double d0 = vec3.y;
+                double d0 = vec3d.y;
 
                 if (this.getY() < entity.getY() || !this.isPowered() && this.getY() < entity.getY() + 5.0D) {
                     d0 = Math.max(0.0D, d0);
                     d0 += 0.3D - d0 * 0.6000000238418579D;
                 }
 
-                vec3 = new Vec3(vec3.x, d0, vec3.z);
-                Vec3 vec31 = new Vec3(entity.getX() - this.getX(), 0.0D, entity.getZ() - this.getZ());
+                vec3d = new Vec3(vec3d.x, d0, vec3d.z);
+                Vec3 vec3d1 = new Vec3(entity.getX() - this.getX(), 0.0D, entity.getZ() - this.getZ());
 
-                if (vec31.horizontalDistanceSqr() > 9.0D) {
-                    Vec3 vec32 = vec31.normalize();
+                if (vec3d1.horizontalDistanceSqr() > 9.0D) {
+                    Vec3 vec3d2 = vec3d1.normalize();
 
-                    vec3 = vec3.add(vec32.x * 0.3D - vec3.x * 0.6D, 0.0D, vec32.z * 0.3D - vec3.z * 0.6D);
+                    vec3d = vec3d.add(vec3d2.x * 0.3D - vec3d.x * 0.6D, 0.0D, vec3d2.z * 0.3D - vec3d.z * 0.6D);
                 }
             }
         }
 
-        this.setDeltaMovement(vec3);
-        if (vec3.horizontalDistanceSqr() > 0.05D) {
-            this.setYRot((float) Mth.atan2(vec3.z, vec3.x) * 57.295776F - 90.0F);
+        this.setDeltaMovement(vec3d);
+        if (vec3d.horizontalDistanceSqr() > 0.05D) {
+            this.setYRot((float) Mth.atan2(vec3d.z, vec3d.x) * 57.295776F - 90.0F);
         }
 
         super.aiStep();
@@ -251,7 +250,6 @@
     }
 
     @Override
-    @Override
     protected void customServerAiStep() {
         int i;
 
@@ -259,15 +257,40 @@
             i = this.getInvulnerableTicks() - 1;
             this.bossEvent.setProgress(1.0F - (float) i / 220.0F);
             if (i <= 0) {
-                this.level().explode(this, this.getX(), this.getEyeY(), this.getZ(), 7.0F, false, Level.ExplosionInteraction.MOB);
+                // CraftBukkit start
+                // this.level().explode(this, this.getX(), this.getEyeY(), this.getZ(), 7.0F, false, World.a.MOB);
+                ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 7.0F, false);
+                this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled()) {
+                    this.level().explode(this, this.getX(), this.getEyeY(), this.getZ(), event.getRadius(), event.getFire(), Level.a.MOB);
+                }
+                // CraftBukkit end
+
                 if (!this.isSilent()) {
-                    this.level().globalLevelEvent(1023, this.blockPosition(), 0);
+                    // CraftBukkit start - Use relative location for far away sounds
+                    // this.level().globalLevelEvent(1023, new BlockPosition(this), 0);
+                    int viewDistance = ((ServerLevel) this.level()).getCraftServer().getViewDistance() * 16;
+                    for (ServerPlayer player : (List<ServerPlayer>) MinecraftServer.getServer().getPlayerList().players) {
+                        double deltaX = this.getX() - player.getX();
+                        double deltaZ = this.getZ() - player.getZ();
+                        double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
+                        if (distanceSquared > viewDistance * viewDistance) {
+                            double deltaLength = Math.sqrt(distanceSquared);
+                            double relativeX = player.getX() + (deltaX / deltaLength) * viewDistance;
+                            double relativeZ = player.getZ() + (deltaZ / deltaLength) * viewDistance;
+                            player.connection.send(new ClientboundLevelEventPacket(1023, new BlockPos((int) relativeX, (int) this.getY(), (int) relativeZ), 0, true));
+                        } else {
+                            player.connection.send(new ClientboundLevelEventPacket(1023, this.blockPosition(), 0, true));
+                        }
+                    }
+                    // CraftBukkit end
                 }
             }
 
             this.setInvulnerableTicks(i);
             if (this.tickCount % 10 == 0) {
-                this.heal(10.0F);
+                this.heal(10.0F, EntityRegainHealthEvent.RegainReason.WITHER_SPAWN); // CraftBukkit
             }
 
         } else {
@@ -297,10 +320,10 @@
 
                     j = this.getAlternativeTarget(i);
                     if (j > 0) {
-                        LivingEntity livingentity = (LivingEntity) this.level().getEntity(j);
+                        LivingEntity entityliving = (LivingEntity) this.level().getEntity(j);
 
-                        if (livingentity != null && this.canAttack(livingentity) && this.distanceToSqr((Entity) livingentity) <= 900.0D && this.hasLineOfSight(livingentity)) {
-                            this.performRangedAttack(i + 1, livingentity);
+                        if (entityliving != null && this.canAttack(entityliving) && this.distanceToSqr((Entity) entityliving) <= 900.0D && this.hasLineOfSight(entityliving)) {
+                            this.performRangedAttack(i + 1, entityliving);
                             this.nextHeadUpdate[i - 1] = this.tickCount + 40 + this.random.nextInt(20);
                             this.idleHeadUpdates[i - 1] = 0;
                         } else {
@@ -310,9 +333,10 @@
                         List<LivingEntity> list = this.level().getNearbyEntities(LivingEntity.class, WitherBoss.TARGETING_CONDITIONS, this, this.getBoundingBox().inflate(20.0D, 8.0D, 20.0D));
 
                         if (!list.isEmpty()) {
-                            LivingEntity livingentity1 = (LivingEntity) list.get(this.random.nextInt(list.size()));
+                            LivingEntity entityliving1 = (LivingEntity) list.get(this.random.nextInt(list.size()));
 
-                            this.setAlternativeTarget(i, livingentity1.getId());
+                            if (CraftEventFactory.callEntityTargetLivingEvent(this, entityliving1, EntityTargetEvent.TargetReason.CLOSEST_ENTITY).isCancelled()) continue; // CraftBukkit
+                            this.setAlternativeTarget(i, entityliving1.getId());
                         }
                     }
                 }
@@ -338,11 +362,16 @@
                                 int i2 = j + j1;
                                 int j2 = i + l1;
                                 int k2 = i1 + k1;
-                                BlockPos blockpos = new BlockPos(i2, j2, k2);
-                                BlockState blockstate = this.level().getBlockState(blockpos);
+                                BlockPos blockposition = new BlockPos(i2, j2, k2);
+                                IBlockData iblockdata = this.level().getBlockState(blockposition);
 
-                                if (canDestroy(blockstate)) {
-                                    flag = this.level().destroyBlock(blockpos, true, this) || flag;
+                                if (canDestroy(iblockdata)) {
+                                    // CraftBukkit start
+                                    if (!CraftEventFactory.callEntityChangeBlockEvent(this, blockposition, Blocks.AIR.defaultBlockState())) {
+                                        continue;
+                                    }
+                                    // CraftBukkit end
+                                    flag = this.level().destroyBlock(blockposition, true, this) || flag;
                                 }
                             }
                         }
@@ -355,15 +384,15 @@
             }
 
             if (this.tickCount % 20 == 0) {
-                this.heal(1.0F);
+                this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
             }
 
             this.bossEvent.setProgress(this.getHealth() / this.getMaxHealth());
         }
     }
 
-    public static boolean canDestroy(BlockState blockstate) {
-        return !blockstate.isAir() && !blockstate.is(BlockTags.WITHER_IMMUNE);
+    public static boolean canDestroy(IBlockData state) {
+        return !state.isAir() && !state.is(BlockTags.WITHER_IMMUNE);
     }
 
     public void makeInvulnerable() {
@@ -373,51 +402,48 @@
     }
 
     @Override
-    @Override
-    public void makeStuckInBlock(BlockState blockstate, Vec3 vec3) {}
+    public void makeStuckInBlock(IBlockData state, Vec3 motionMultiplier) {}
 
     @Override
-    @Override
-    public void startSeenByPlayer(ServerPlayer serverplayer) {
-        super.startSeenByPlayer(serverplayer);
-        this.bossEvent.addPlayer(serverplayer);
+    public void startSeenByPlayer(ServerPlayer player) {
+        super.startSeenByPlayer(player);
+        this.bossEvent.addPlayer(player);
     }
 
     @Override
-    @Override
-    public void stopSeenByPlayer(ServerPlayer serverplayer) {
-        super.stopSeenByPlayer(serverplayer);
-        this.bossEvent.removePlayer(serverplayer);
+    public void stopSeenByPlayer(ServerPlayer player) {
+        super.stopSeenByPlayer(player);
+        this.bossEvent.removePlayer(player);
     }
 
-    private double getHeadX(int i) {
-        if (i <= 0) {
+    private double getHeadX(int head) {
+        if (head <= 0) {
             return this.getX();
         } else {
-            float f = (this.yBodyRot + (float) (180 * (i - 1))) * 0.017453292F;
+            float f = (this.yBodyRot + (float) (180 * (head - 1))) * 0.017453292F;
             float f1 = Mth.cos(f);
 
             return this.getX() + (double) f1 * 1.3D;
         }
     }
 
-    private double getHeadY(int i) {
-        return i <= 0 ? this.getY() + 3.0D : this.getY() + 2.2D;
+    private double getHeadY(int head) {
+        return head <= 0 ? this.getY() + 3.0D : this.getY() + 2.2D;
     }
 
-    private double getHeadZ(int i) {
-        if (i <= 0) {
+    private double getHeadZ(int head) {
+        if (head <= 0) {
             return this.getZ();
         } else {
-            float f = (this.yBodyRot + (float) (180 * (i - 1))) * 0.017453292F;
+            float f = (this.yBodyRot + (float) (180 * (head - 1))) * 0.017453292F;
             float f1 = Mth.sin(f);
 
             return this.getZ() + (double) f1 * 1.3D;
         }
     }
 
-    private float rotlerp(float f, float f1, float f2) {
-        float f3 = Mth.wrapDegrees(f1 - f);
+    private float rotlerp(float angle, float f1, float f2) {
+        float f3 = Mth.wrapDegrees(f1 - angle);
 
         if (f3 > f2) {
             f3 = f2;
@@ -427,60 +453,58 @@
             f3 = -f2;
         }
 
-        return f + f3;
+        return angle + f3;
     }
 
-    private void performRangedAttack(int i, LivingEntity livingentity) {
-        this.performRangedAttack(i, livingentity.getX(), livingentity.getY() + (double) livingentity.getEyeHeight() * 0.5D, livingentity.getZ(), i == 0 && this.random.nextFloat() < 0.001F);
+    private void performRangedAttack(int head, LivingEntity target) {
+        this.performRangedAttack(head, target.getX(), target.getY() + (double) target.getEyeHeight() * 0.5D, target.getZ(), head == 0 && this.random.nextFloat() < 0.001F);
     }
 
-    private void performRangedAttack(int i, double d0, double d1, double d2, boolean flag) {
+    private void performRangedAttack(int head, double x, double d1, double y, boolean flag) {
         if (!this.isSilent()) {
             this.level().levelEvent((Player) null, 1024, this.blockPosition(), 0);
         }
 
-        double d3 = this.getHeadX(i);
-        double d4 = this.getHeadY(i);
-        double d5 = this.getHeadZ(i);
-        double d6 = d0 - d3;
+        double d3 = this.getHeadX(head);
+        double d4 = this.getHeadY(head);
+        double d5 = this.getHeadZ(head);
+        double d6 = x - d3;
         double d7 = d1 - d4;
-        double d8 = d2 - d5;
-        WitherSkull witherskull = new WitherSkull(this.level(), this, d6, d7, d8);
+        double d8 = y - d5;
+        WitherSkull entitywitherskull = new WitherSkull(this.level(), this, d6, d7, d8);
 
-        witherskull.setOwner(this);
+        entitywitherskull.setOwner(this);
         if (flag) {
-            witherskull.setDangerous(true);
+            entitywitherskull.setDangerous(true);
         }
 
-        witherskull.setPosRaw(d3, d4, d5);
-        this.level().addFreshEntity(witherskull);
+        entitywitherskull.setPosRaw(d3, d4, d5);
+        this.level().addFreshEntity(entitywitherskull);
     }
 
     @Override
-    @Override
-    public void performRangedAttack(LivingEntity livingentity, float f) {
-        this.performRangedAttack(0, livingentity);
+    public void performRangedAttack(LivingEntity target, float distanceFactor) {
+        this.performRangedAttack(0, target);
     }
 
     @Override
-    @Override
-    public boolean hurt(DamageSource damagesource, float f) {
-        if (this.isInvulnerableTo(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
-        } else if (!damagesource.is(DamageTypeTags.WITHER_IMMUNE_TO) && !(damagesource.getEntity() instanceof WitherBoss)) {
-            if (this.getInvulnerableTicks() > 0 && !damagesource.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
+        } else if (!source.is(DamageTypeTags.WITHER_IMMUNE_TO) && !(source.getEntity() instanceof WitherBoss)) {
+            if (this.getInvulnerableTicks() > 0 && !source.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
                 return false;
             } else {
                 Entity entity;
 
                 if (this.isPowered()) {
-                    entity = damagesource.getDirectEntity();
+                    entity = source.getDirectEntity();
                     if (entity instanceof AbstractArrow) {
                         return false;
                     }
                 }
 
-                entity = damagesource.getEntity();
+                entity = source.getEntity();
                 if (entity != null && !(entity instanceof Player) && entity instanceof LivingEntity && ((LivingEntity) entity).getMobType() == this.getMobType()) {
                     return false;
                 } else {
@@ -492,7 +516,7 @@
                         this.idleHeadUpdates[i] += 3;
                     }
 
-                    return super.hurt(damagesource, f);
+                    return super.hurt(source, amount);
                 }
             }
         } else {
@@ -501,19 +525,17 @@
     }
 
     @Override
-    @Override
-    protected void dropCustomDeathLoot(DamageSource damagesource, int i, boolean flag) {
-        super.dropCustomDeathLoot(damagesource, i, flag);
-        ItemEntity itementity = this.spawnAtLocation((ItemLike) Items.NETHER_STAR);
+    protected void dropCustomDeathLoot(DamageSource source, int looting, boolean recentlyHit) {
+        super.dropCustomDeathLoot(source, looting, recentlyHit);
+        ItemEntity entityitem = this.spawnAtLocation((IMaterial) Items.NETHER_STAR);
 
-        if (itementity != null) {
-            itementity.setExtendedLifetime();
+        if (entityitem != null) {
+            entityitem.setExtendedLifetime();
         }
 
     }
 
     @Override
-    @Override
     public void checkDespawn() {
         if (this.level().getDifficulty() == Difficulty.PEACEFUL && this.shouldDespawnInPeaceful()) {
             this.discard();
@@ -523,8 +545,7 @@
     }
 
     @Override
-    @Override
-    public boolean addEffect(MobEffectInstance mobeffectinstance, @Nullable Entity entity) {
+    public boolean addEffect(MobEffectInstance effectInstance, @Nullable Entity entity) {
         return false;
     }
 
@@ -532,68 +553,62 @@
         return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 300.0D).add(Attributes.MOVEMENT_SPEED, 0.6000000238418579D).add(Attributes.FLYING_SPEED, 0.6000000238418579D).add(Attributes.FOLLOW_RANGE, 40.0D).add(Attributes.ARMOR, 4.0D);
     }
 
-    public float getHeadYRot(int i) {
-        return this.yRotHeads[i];
+    public float getHeadYRot(int head) {
+        return this.yRotHeads[head];
     }
 
-    public float getHeadXRot(int i) {
-        return this.xRotHeads[i];
+    public float getHeadXRot(int head) {
+        return this.xRotHeads[head];
     }
 
     public int getInvulnerableTicks() {
         return (Integer) this.entityData.get(WitherBoss.DATA_ID_INV);
     }
 
-    public void setInvulnerableTicks(int i) {
-        this.entityData.set(WitherBoss.DATA_ID_INV, i);
+    public void setInvulnerableTicks(int invulnerableTicks) {
+        this.entityData.set(WitherBoss.DATA_ID_INV, invulnerableTicks);
     }
 
-    public int getAlternativeTarget(int i) {
-        return (Integer) this.entityData.get((EntityDataAccessor) WitherBoss.DATA_TARGETS.get(i));
+    public int getAlternativeTarget(int head) {
+        return (Integer) this.entityData.get((EntityDataAccessor) WitherBoss.DATA_TARGETS.get(head));
     }
 
-    public void setAlternativeTarget(int i, int j) {
-        this.entityData.set((EntityDataAccessor) WitherBoss.DATA_TARGETS.get(i), j);
+    public void setAlternativeTarget(int targetOffset, int newId) {
+        this.entityData.set((EntityDataAccessor) WitherBoss.DATA_TARGETS.get(targetOffset), newId);
     }
 
     @Override
-    @Override
     public boolean isPowered() {
         return this.getHealth() <= this.getMaxHealth() / 2.0F;
     }
 
     @Override
-    @Override
-    public MobType getMobType() {
-        return MobType.UNDEAD;
+    public EnumMonsterType getMobType() {
+        return EnumMonsterType.UNDEAD;
     }
 
     @Override
-    @Override
     protected boolean canRide(Entity entity) {
         return false;
     }
 
     @Override
-    @Override
     public boolean canChangeDimensions() {
         return false;
     }
 
     @Override
-    @Override
-    public boolean canBeAffected(MobEffectInstance mobeffectinstance) {
-        return mobeffectinstance.getEffect() == MobEffects.WITHER ? false : super.canBeAffected(mobeffectinstance);
+    public boolean canBeAffected(MobEffectInstance potioneffect) {
+        return potioneffect.getEffect() == MobEffects.WITHER ? false : super.canBeAffected(potioneffect);
     }
 
     private class WitherDoNothingGoal extends Goal {
 
         public WitherDoNothingGoal() {
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.JUMP, Goal.Flag.LOOK));
+            this.setFlags(EnumSet.of(Goal.Type.MOVE, Goal.Type.JUMP, Goal.Type.LOOK));
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return WitherBoss.this.getInvulnerableTicks() > 0;
         }
