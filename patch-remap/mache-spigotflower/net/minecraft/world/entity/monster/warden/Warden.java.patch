--- a/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/net/minecraft/world/entity/monster/warden/Warden.java
@@ -38,12 +38,12 @@
 import net.minecraft.world.entity.AnimationState;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.Pose;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -57,8 +57,8 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.ServerLevelAccessor;
-import net.minecraft.world.level.block.RenderShape;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.EnumRenderType;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.EntityPositionSource;
 import net.minecraft.world.level.gameevent.GameEvent;
@@ -109,12 +109,12 @@
     public AnimationState attackAnimationState = new AnimationState();
     public AnimationState sonicBoomAnimationState = new AnimationState();
     private final DynamicGameEventListener<VibrationSystem.Listener> dynamicGameEventListener = new DynamicGameEventListener<>(new VibrationSystem.Listener(this));
-    private final VibrationSystem.User vibrationUser = new Warden.VibrationUser();
+    private final VibrationSystem.User vibrationUser = new Warden.a();
     private VibrationSystem.Data vibrationData = new VibrationSystem.Data();
     AngerManagement angerManagement = new AngerManagement(this::canTargetEntity, Collections.emptyList());
 
-    public Warden(EntityType<? extends Monster> entitytype, Level level) {
-        super(entitytype, level);
+    public Warden(EntityType<? extends Monster> entityType, Level level) {
+        super(entityType, level);
         this.xpReward = 5;
         this.getNavigation().setCanFloat(true);
         this.setPathfindingMalus(BlockPathTypes.UNPASSABLE_RAIL, 0.0F);
@@ -126,57 +126,49 @@
     }
 
     @Override
-    @Override
     public Packet<ClientGamePacketListener> getAddEntityPacket() {
-        return new ClientboundAddEntityPacket(this, this.hasPose(Pose.EMERGING) ? 1 : 0);
+        return new ClientboundAddEntityPacket(this, this.hasPose(EntityPose.EMERGING) ? 1 : 0);
     }
 
     @Override
-    @Override
-    public void recreateFromPacket(ClientboundAddEntityPacket clientboundaddentitypacket) {
-        super.recreateFromPacket(clientboundaddentitypacket);
-        if (clientboundaddentitypacket.getData() == 1) {
-            this.setPose(Pose.EMERGING);
+    public void recreateFromPacket(ClientboundAddEntityPacket packet) {
+        super.recreateFromPacket(packet);
+        if (packet.getData() == 1) {
+            this.setPose(EntityPose.EMERGING);
         }
 
     }
 
     @Override
-    @Override
-    public boolean checkSpawnObstruction(LevelReader levelreader) {
-        return super.checkSpawnObstruction(levelreader) && levelreader.noCollision(this, this.getType().getDimensions().makeBoundingBox(this.position()));
+    public boolean checkSpawnObstruction(LevelReader level) {
+        return super.checkSpawnObstruction(level) && level.noCollision(this, this.getType().getDimensions().makeBoundingBox(this.position()));
     }
 
     @Override
-    @Override
-    public float getWalkTargetValue(BlockPos blockpos, LevelReader levelreader) {
+    public float getWalkTargetValue(BlockPos pos, LevelReader level) {
         return 0.0F;
     }
 
     @Override
-    @Override
-    public boolean isInvulnerableTo(DamageSource damagesource) {
-        return this.isDiggingOrEmerging() && !damagesource.is(DamageTypeTags.BYPASSES_INVULNERABILITY) ? true : super.isInvulnerableTo(damagesource);
+    public boolean isInvulnerableTo(DamageSource source) {
+        return this.isDiggingOrEmerging() && !source.is(DamageTypeTags.BYPASSES_INVULNERABILITY) ? true : super.isInvulnerableTo(source);
     }
 
     boolean isDiggingOrEmerging() {
-        return this.hasPose(Pose.DIGGING) || this.hasPose(Pose.EMERGING);
+        return this.hasPose(EntityPose.DIGGING) || this.hasPose(EntityPose.EMERGING);
     }
 
     @Override
-    @Override
-    protected boolean canRide(Entity entity) {
+    protected boolean canRide(Entity vehicle) {
         return false;
     }
 
     @Override
-    @Override
     public boolean canDisableShield() {
         return true;
     }
 
     @Override
-    @Override
     protected float nextStep() {
         return this.moveDist + 0.55F;
     }
@@ -186,53 +178,45 @@
     }
 
     @Override
-    @Override
     public boolean dampensVibrations() {
         return true;
     }
 
     @Override
-    @Override
     protected float getSoundVolume() {
         return 4.0F;
     }
 
     @Nullable
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
-        return !this.hasPose(Pose.ROARING) && !this.isDiggingOrEmerging() ? this.getAngerLevel().getAmbientSound() : null;
+        return !this.hasPose(EntityPose.ROARING) && !this.isDiggingOrEmerging() ? this.getAngerLevel().getAmbientSound() : null;
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.WARDEN_HURT;
     }
 
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.WARDEN_DEATH;
     }
 
     @Override
-    @Override
-    protected void playStepSound(BlockPos blockpos, BlockState blockstate) {
+    protected void playStepSound(BlockPos pos, IBlockData state) {
         this.playSound(SoundEvents.WARDEN_STEP, 10.0F, 1.0F);
     }
 
     @Override
-    @Override
-    public boolean doHurtTarget(Entity entity) {
+    public boolean doHurtTarget(Entity target) {
         this.level().broadcastEntityEvent(this, (byte) 4);
         this.playSound(SoundEvents.WARDEN_ATTACK_IMPACT, 10.0F, this.getVoicePitch());
         SonicBoom.setCooldown(this, 40);
-        return super.doHurtTarget(entity);
+        return super.doHurtTarget(target);
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Warden.CLIENT_ANGER_LEVEL, 0);
@@ -247,14 +231,13 @@
     }
 
     @Override
-    @Override
     public void tick() {
-        Level level = this.level();
+        Level world = this.level();
 
-        if (level instanceof ServerLevel) {
-            ServerLevel serverlevel = (ServerLevel) level;
+        if (world instanceof ServerLevel) {
+            ServerLevel worldserver = (ServerLevel) world;
 
-            VibrationSystem.Ticker.tick(serverlevel, this.vibrationData, this.vibrationUser);
+            VibrationSystem.Ticker.tick(worldserver, this.vibrationData, this.vibrationUser);
             if (this.isPersistenceRequired() || this.requiresCustomPersistence()) {
                 WardenAi.setDigCooldown(this);
             }
@@ -291,20 +274,19 @@
     }
 
     @Override
-    @Override
     protected void customServerAiStep() {
-        ServerLevel serverlevel = (ServerLevel) this.level();
+        ServerLevel worldserver = (ServerLevel) this.level();
 
-        serverlevel.getProfiler().push("wardenBrain");
-        this.getBrain().tick(serverlevel, this);
+        worldserver.getProfiler().push("wardenBrain");
+        this.getBrain().tick(worldserver, this);
         this.level().getProfiler().pop();
         super.customServerAiStep();
         if ((this.tickCount + this.getId()) % 120 == 0) {
-            applyDarknessAround(serverlevel, this.position(), this, 20);
+            applyDarknessAround(worldserver, this.position(), this, 20);
         }
 
         if (this.tickCount % 20 == 0) {
-            this.angerManagement.tick(serverlevel, this::canTargetEntity);
+            this.angerManagement.tick(worldserver, this::canTargetEntity);
             this.syncClientAngerLevel();
         }
 
@@ -312,17 +294,16 @@
     }
 
     @Override
-    @Override
-    public void handleEntityEvent(byte b0) {
-        if (b0 == 4) {
+    public void handleEntityEvent(byte id) {
+        if (id == 4) {
             this.roarAnimationState.stop();
             this.attackAnimationState.start(this.tickCount);
-        } else if (b0 == 61) {
+        } else if (id == 61) {
             this.tendrilAnimation = 10;
-        } else if (b0 == 62) {
+        } else if (id == 62) {
             this.sonicBoomAnimationState.start(this.tickCount);
         } else {
-            super.handleEntityEvent(b0);
+            super.handleEntityEvent(id);
         }
 
     }
@@ -333,26 +314,26 @@
         return 40 - Mth.floor(Mth.clamp(f, 0.0F, 1.0F) * 30.0F);
     }
 
-    public float getTendrilAnimation(float f) {
-        return Mth.lerp(f, (float) this.tendrilAnimationO, (float) this.tendrilAnimation) / 10.0F;
+    public float getTendrilAnimation(float partialTick) {
+        return Mth.lerp(partialTick, (float) this.tendrilAnimationO, (float) this.tendrilAnimation) / 10.0F;
     }
 
-    public float getHeartAnimation(float f) {
-        return Mth.lerp(f, (float) this.heartAnimationO, (float) this.heartAnimation) / 10.0F;
+    public float getHeartAnimation(float partialTick) {
+        return Mth.lerp(partialTick, (float) this.heartAnimationO, (float) this.heartAnimation) / 10.0F;
     }
 
-    private void clientDiggingParticles(AnimationState animationstate) {
-        if ((float) animationstate.getAccumulatedTime() < 4500.0F) {
+    private void clientDiggingParticles(AnimationState animationState) {
+        if ((float) animationState.getAccumulatedTime() < 4500.0F) {
             RandomSource randomsource = this.getRandom();
-            BlockState blockstate = this.getBlockStateOn();
+            IBlockData iblockdata = this.getBlockStateOn();
 
-            if (blockstate.getRenderShape() != RenderShape.INVISIBLE) {
+            if (iblockdata.getRenderShape() != EnumRenderType.INVISIBLE) {
                 for (int i = 0; i < 30; ++i) {
                     double d0 = this.getX() + (double) Mth.randomBetween(randomsource, -0.7F, 0.7F);
                     double d1 = this.getY();
                     double d2 = this.getZ() + (double) Mth.randomBetween(randomsource, -0.7F, 0.7F);
 
-                    this.level().addParticle(new BlockParticleOption(ParticleTypes.BLOCK, blockstate), d0, d1, d2, 0.0D, 0.0D, 0.0D);
+                    this.level().addParticle(new BlockParticleOption(ParticleTypes.BLOCK, iblockdata), d0, d1, d2, 0.0D, 0.0D, 0.0D);
                 }
             }
         }
@@ -360,9 +341,8 @@
     }
 
     @Override
-    @Override
-    public void onSyncedDataUpdated(EntityDataAccessor<?> entitydataaccessor) {
-        if (Warden.DATA_POSE.equals(entitydataaccessor)) {
+    public void onSyncedDataUpdated(EntityDataAccessor<?> key) {
+        if (Warden.DATA_POSE.equals(key)) {
             switch (this.getPose()) {
                 case EMERGING:
                     this.emergeAnimationState.start(this.tickCount);
@@ -378,43 +358,38 @@
             }
         }
 
-        super.onSyncedDataUpdated(entitydataaccessor);
+        super.onSyncedDataUpdated(key);
     }
 
     @Override
-    @Override
     public boolean ignoreExplosion(Explosion explosion) {
         return this.isDiggingOrEmerging();
     }
 
     @Override
-    @Override
     protected Brain<?> makeBrain(Dynamic<?> dynamic) {
         return WardenAi.makeBrain(this, dynamic);
     }
 
     @Override
-    @Override
     public Brain<Warden> getBrain() {
-        return super.getBrain();
+        return (Brain<Warden>) super.getBrain(); // CraftBukkit - decompile error
     }
 
     @Override
-    @Override
     protected void sendDebugPackets() {
         super.sendDebugPackets();
         DebugPackets.sendEntityBrain(this);
     }
 
     @Override
-    @Override
-    public void updateDynamicGameEventListener(BiConsumer<DynamicGameEventListener<?>, ServerLevel> biconsumer) {
-        Level level = this.level();
+    public void updateDynamicGameEventListener(BiConsumer<DynamicGameEventListener<?>, ServerLevel> listenerConsumer) {
+        Level world = this.level();
 
-        if (level instanceof ServerLevel) {
-            ServerLevel serverlevel = (ServerLevel) level;
+        if (world instanceof ServerLevel) {
+            ServerLevel worldserver = (ServerLevel) world;
 
-            biconsumer.accept(this.dynamicGameEventListener, serverlevel);
+            listenerConsumer.accept(this.dynamicGameEventListener, worldserver);
         }
 
     }
@@ -424,9 +399,9 @@
         boolean flag;
 
         if (entity instanceof LivingEntity) {
-            LivingEntity livingentity = (LivingEntity) entity;
+            LivingEntity entityliving = (LivingEntity) entity;
 
-            if (this.level() == entity.level() && EntitySelector.NO_CREATIVE_OR_SPECTATOR.test(entity) && !this.isAlliedTo(entity) && livingentity.getType() != EntityType.ARMOR_STAND && livingentity.getType() != EntityType.WARDEN && !livingentity.isInvulnerable() && !livingentity.isDeadOrDying() && this.level().getWorldBorder().isWithinBounds(livingentity.getBoundingBox())) {
+            if (this.level() == entity.level() && EntitySelector.NO_CREATIVE_OR_SPECTATOR.test(entity) && !this.isAlliedTo(entity) && entityliving.getType() != EntityType.ARMOR_STAND && entityliving.getType() != EntityType.WARDEN && !entityliving.isInvulnerable() && !entityliving.isDeadOrDying() && this.level().getWorldBorder().isWithinBounds(entityliving.getBoundingBox())) {
                 flag = true;
                 return flag;
             }
@@ -436,61 +411,59 @@
         return flag;
     }
 
-    public static void applyDarknessAround(ServerLevel serverlevel, Vec3 vec3, @Nullable Entity entity, int i) {
-        MobEffectInstance mobeffectinstance = new MobEffectInstance(MobEffects.DARKNESS, 260, 0, false, false);
+    public static void applyDarknessAround(ServerLevel level, Vec3 pos, @Nullable Entity source, int radius) {
+        MobEffectInstance mobeffect = new MobEffectInstance(MobEffects.DARKNESS, 260, 0, false, false);
 
-        MobEffectUtil.addEffectToPlayersAround(serverlevel, entity, vec3, (double) i, mobeffectinstance, 200);
+        MobEffectUtil.addEffectToPlayersAround(level, source, pos, radius, mobeffect, 200, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.WARDEN); // CraftBukkit - Add EntityPotionEffectEvent.Cause
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        DataResult dataresult = AngerManagement.codec(this::canTargetEntity).encodeStart(NbtOps.INSTANCE, this.angerManagement);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        DataResult<net.minecraft.nbt.Tag> dataresult = AngerManagement.codec(this::canTargetEntity).encodeStart(NbtOps.INSTANCE, this.angerManagement); // CraftBukkit - decompile error
         Logger logger = Warden.LOGGER;
 
         Objects.requireNonNull(logger);
-        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> {
-            compoundtag.put("anger", tag);
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+            compound.put("anger", nbtbase);
         });
         dataresult = VibrationSystem.Data.CODEC.encodeStart(NbtOps.INSTANCE, this.vibrationData);
         logger = Warden.LOGGER;
         Objects.requireNonNull(logger);
-        dataresult.resultOrPartial(logger::error).ifPresent((tag) -> {
-            compoundtag.put("listener", tag);
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+            compound.put("listener", nbtbase);
         });
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
         DataResult dataresult;
         Logger logger;
 
-        if (compoundtag.contains("anger")) {
-            dataresult = AngerManagement.codec(this::canTargetEntity).parse(new Dynamic(NbtOps.INSTANCE, compoundtag.get("anger")));
+        if (compound.contains("anger")) {
+            dataresult = AngerManagement.codec(this::canTargetEntity).parse(new Dynamic(NbtOps.INSTANCE, compound.get("anger")));
             logger = Warden.LOGGER;
             Objects.requireNonNull(logger);
-            dataresult.resultOrPartial(logger::error).ifPresent((angermanagement) -> {
+            ((DataResult<AngerManagement>) dataresult).resultOrPartial(logger::error).ifPresent((angermanagement) -> { // CraftBukkit - decompile error
                 this.angerManagement = angermanagement;
             });
             this.syncClientAngerLevel();
         }
 
-        if (compoundtag.contains("listener", 10)) {
-            dataresult = VibrationSystem.Data.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compoundtag.getCompound("listener")));
+        if (compound.contains("listener", 10)) {
+            dataresult = VibrationSystem.Data.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compound.getCompound("listener")));
             logger = Warden.LOGGER;
             Objects.requireNonNull(logger);
-            dataresult.resultOrPartial(logger::error).ifPresent((vibrationsystem_data) -> {
-                this.vibrationData = vibrationsystem_data;
+            ((DataResult<VibrationSystem.Data>) dataresult).resultOrPartial(logger::error).ifPresent((vibrationsystem_a) -> { // CraftBukkit - decompile error
+                this.vibrationData = vibrationsystem_a;
             });
         }
 
     }
 
     private void playListeningSound() {
-        if (!this.hasPose(Pose.ROARING)) {
+        if (!this.hasPose(EntityPose.ROARING)) {
             this.playSound(this.getAngerLevel().getListeningSound(), 10.0F, this.getVoicePitch());
         }
 
@@ -513,17 +486,17 @@
     }
 
     @VisibleForTesting
-    public void increaseAngerAt(@Nullable Entity entity, int i, boolean flag) {
+    public void increaseAngerAt(@Nullable Entity entity, int offset, boolean playListeningSound) {
         if (!this.isNoAi() && this.canTargetEntity(entity)) {
             WardenAi.setDigCooldown(this);
-            boolean flag1 = !(this.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).orElse((Object) null) instanceof Player);
-            int j = this.angerManagement.increaseAnger(entity, i);
+            boolean flag1 = !(this.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null) instanceof Player); // CraftBukkit - decompile error
+            int j = this.angerManagement.increaseAnger(entity, offset);
 
             if (entity instanceof Player && flag1 && AngerLevel.byAnger(j).isAngry()) {
                 this.getBrain().eraseMemory(MemoryModuleType.ATTACK_TARGET);
             }
 
-            if (flag) {
+            if (playListeningSound) {
                 this.playListeningSound();
             }
         }
@@ -536,45 +509,41 @@
 
     @Nullable
     @Override
-    @Override
     public LivingEntity getTarget() {
-        return (LivingEntity) this.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).orElse((Object) null);
+        return (LivingEntity) this.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null); // CraftBukkit - decompile error
     }
 
     @Override
-    @Override
-    public boolean removeWhenFarAway(double d0) {
+    public boolean removeWhenFarAway(double distanceToClosestPlayer) {
         return false;
     }
 
     @Nullable
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
         this.getBrain().setMemoryWithExpiry(MemoryModuleType.DIG_COOLDOWN, Unit.INSTANCE, 1200L);
-        if (mobspawntype == MobSpawnType.TRIGGERED) {
-            this.setPose(Pose.EMERGING);
+        if (reason == EnumMobSpawn.TRIGGERED) {
+            this.setPose(EntityPose.EMERGING);
             this.getBrain().setMemoryWithExpiry(MemoryModuleType.IS_EMERGING, Unit.INSTANCE, (long) WardenAi.EMERGE_DURATION);
             this.playSound(SoundEvents.WARDEN_AGITATED, 5.0F, 1.0F);
         }
 
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, spawngroupdata, compoundtag);
+        return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
     }
 
     @Override
-    @Override
-    public boolean hurt(DamageSource damagesource, float f) {
-        boolean flag = super.hurt(damagesource, f);
+    public boolean hurt(DamageSource source, float amount) {
+        boolean flag = super.hurt(source, amount);
 
         if (!this.level().isClientSide && !this.isNoAi() && !this.isDiggingOrEmerging()) {
-            Entity entity = damagesource.getEntity();
+            Entity entity = source.getEntity();
 
             this.increaseAngerAt(entity, AngerLevel.ANGRY.getMinimumAnger() + 20, false);
             if (this.brain.getMemory(MemoryModuleType.ATTACK_TARGET).isEmpty() && entity instanceof LivingEntity) {
-                LivingEntity livingentity = (LivingEntity) entity;
+                LivingEntity entityliving = (LivingEntity) entity;
 
-                if (!damagesource.isIndirect() || this.closerThan(livingentity, 5.0D)) {
-                    this.setAttackTarget(livingentity);
+                if (!source.isIndirect() || this.closerThan(entityliving, 5.0D)) {
+                    this.setAttackTarget(entityliving);
                 }
             }
         }
@@ -582,29 +551,26 @@
         return flag;
     }
 
-    public void setAttackTarget(LivingEntity livingentity) {
+    public void setAttackTarget(LivingEntity attackTarget) {
         this.getBrain().eraseMemory(MemoryModuleType.ROAR_TARGET);
-        this.getBrain().setMemory(MemoryModuleType.ATTACK_TARGET, (Object) livingentity);
+        this.getBrain().setMemory(MemoryModuleType.ATTACK_TARGET, attackTarget); // CraftBukkit - decompile error
         this.getBrain().eraseMemory(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
         SonicBoom.setCooldown(this, 200);
     }
 
     @Override
-    @Override
-    public EntityDimensions getDimensions(Pose pose) {
-        EntityDimensions entitydimensions = super.getDimensions(pose);
+    public EntityDimensions getDimensions(EntityPose pose) {
+        EntityDimensions entitysize = super.getDimensions(pose);
 
-        return this.isDiggingOrEmerging() ? EntityDimensions.fixed(entitydimensions.width, 1.0F) : entitydimensions;
+        return this.isDiggingOrEmerging() ? EntityDimensions.fixed(entitysize.width, 1.0F) : entitysize;
     }
 
     @Override
-    @Override
     public boolean isPushable() {
         return !this.isDiggingOrEmerging() && super.isPushable();
     }
 
     @Override
-    @Override
     protected void doPush(Entity entity) {
         if (!this.isNoAi() && !this.getBrain().hasMemoryValue(MemoryModuleType.TOUCH_COOLDOWN)) {
             this.getBrain().setMemoryWithExpiry(MemoryModuleType.TOUCH_COOLDOWN, Unit.INSTANCE, 20L);
@@ -621,19 +587,16 @@
     }
 
     @Override
-    @Override
     protected PathNavigation createNavigation(Level level) {
         return new GroundPathNavigation(this, level) {
             @Override
-            @Override
-            protected PathFinder createPathFinder(int i) {
+            protected PathFinder createPathFinder(int maxVisitedNodes) {
                 this.nodeEvaluator = new WalkNodeEvaluator();
                 this.nodeEvaluator.setCanPassDoors(true);
-                return new PathFinder(this.nodeEvaluator, i) {
+                return new PathFinder(this.nodeEvaluator, maxVisitedNodes) {
                     @Override
-                    @Override
-                    protected float distance(Node node, Node node1) {
-                        return node.distanceToXZ(node1);
+                    protected float distance(Node first, Node second) {
+                        return first.distanceToXZ(second);
                     }
                 };
             }
@@ -641,65 +604,57 @@
     }
 
     @Override
-    @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitydimensions, float f) {
-        return new Vector3f(0.0F, entitydimensions.height + 0.25F * f, 0.0F);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, entitysize.height + 0.25F * f, 0.0F);
     }
 
     @Override
-    @Override
     public VibrationSystem.Data getVibrationData() {
         return this.vibrationData;
     }
 
     @Override
-    @Override
     public VibrationSystem.User getVibrationUser() {
         return this.vibrationUser;
     }
 
-    private class VibrationUser implements VibrationSystem.User {
+    private class a implements VibrationSystem.User {
 
         private static final int GAME_EVENT_LISTENER_RANGE = 16;
         private final PositionSource positionSource = new EntityPositionSource(Warden.this, Warden.this.getEyeHeight());
 
-        VibrationUser() {}
+        a() {}
 
         @Override
-        @Override
         public int getListenerRadius() {
             return 16;
         }
 
         @Override
-        @Override
         public PositionSource getPositionSource() {
             return this.positionSource;
         }
 
         @Override
-        @Override
         public TagKey<GameEvent> getListenableEvents() {
             return GameEventTags.WARDEN_CAN_LISTEN;
         }
 
         @Override
-        @Override
         public boolean canTriggerAvoidVibration() {
             return true;
         }
 
         @Override
-        @Override
-        public boolean canReceiveVibration(ServerLevel serverlevel, BlockPos blockpos, GameEvent gameevent, GameEvent.Context gameevent_context) {
-            if (!Warden.this.isNoAi() && !Warden.this.isDeadOrDying() && !Warden.this.getBrain().hasMemoryValue(MemoryModuleType.VIBRATION_COOLDOWN) && !Warden.this.isDiggingOrEmerging() && serverlevel.getWorldBorder().isWithinBounds(blockpos)) {
-                Entity entity = gameevent_context.sourceEntity();
+        public boolean canReceiveVibration(ServerLevel level, BlockPos pos, GameEvent gameEvent, GameEvent.Context context) {
+            if (!Warden.this.isNoAi() && !Warden.this.isDeadOrDying() && !Warden.this.getBrain().hasMemoryValue(MemoryModuleType.VIBRATION_COOLDOWN) && !Warden.this.isDiggingOrEmerging() && level.getWorldBorder().isWithinBounds(pos)) {
+                Entity entity = context.sourceEntity();
                 boolean flag;
 
                 if (entity instanceof LivingEntity) {
-                    LivingEntity livingentity = (LivingEntity) entity;
+                    LivingEntity entityliving = (LivingEntity) entity;
 
-                    if (!Warden.this.canTargetEntity(livingentity)) {
+                    if (!Warden.this.canTargetEntity(entityliving)) {
                         flag = false;
                         return flag;
                     }
@@ -713,24 +668,23 @@
         }
 
         @Override
-        @Override
-        public void onReceiveVibration(ServerLevel serverlevel, BlockPos blockpos, GameEvent gameevent, @Nullable Entity entity, @Nullable Entity entity1, float f) {
+        public void onReceiveVibration(ServerLevel level, BlockPos pos, GameEvent gameEvent, @Nullable Entity entity, @Nullable Entity playerEntity, float distance) {
             if (!Warden.this.isDeadOrDying()) {
                 Warden.this.brain.setMemoryWithExpiry(MemoryModuleType.VIBRATION_COOLDOWN, Unit.INSTANCE, 40L);
-                serverlevel.broadcastEntityEvent(Warden.this, (byte) 61);
+                level.broadcastEntityEvent(Warden.this, (byte) 61);
                 Warden.this.playSound(SoundEvents.WARDEN_TENDRIL_CLICKS, 5.0F, Warden.this.getVoicePitch());
-                BlockPos blockpos1 = blockpos;
+                BlockPos blockposition1 = pos;
 
-                if (entity1 != null) {
-                    if (Warden.this.closerThan(entity1, 30.0D)) {
+                if (playerEntity != null) {
+                    if (Warden.this.closerThan(playerEntity, 30.0D)) {
                         if (Warden.this.getBrain().hasMemoryValue(MemoryModuleType.RECENT_PROJECTILE)) {
-                            if (Warden.this.canTargetEntity(entity1)) {
-                                blockpos1 = entity1.blockPosition();
+                            if (Warden.this.canTargetEntity(playerEntity)) {
+                                blockposition1 = playerEntity.blockPosition();
                             }
 
-                            Warden.this.increaseAngerAt(entity1);
+                            Warden.this.increaseAngerAt(playerEntity);
                         } else {
-                            Warden.this.increaseAngerAt(entity1, 10, true);
+                            Warden.this.increaseAngerAt(playerEntity, 10, true);
                         }
                     }
 
@@ -742,8 +696,8 @@
                 if (!Warden.this.getAngerLevel().isAngry()) {
                     Optional<LivingEntity> optional = Warden.this.angerManagement.getActiveEntity();
 
-                    if (entity1 != null || optional.isEmpty() || optional.get() == entity) {
-                        WardenAi.setDisturbanceLocation(Warden.this, blockpos1);
+                    if (playerEntity != null || optional.isEmpty() || optional.get() == entity) {
+                        WardenAi.setDisturbanceLocation(Warden.this, blockposition1);
                     }
                 }
 
