--- a/net/minecraft/world/entity/monster/Vex.java
+++ b/net/minecraft/world/entity/monster/Vex.java
@@ -15,15 +15,15 @@
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.EnumMoveType;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.PathfinderMob;
-import net.minecraft.world.entity.Pose;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.TraceableEntity;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -54,36 +54,32 @@
     Mob owner;
     @Nullable
     private BlockPos boundOrigin;
-    private boolean hasLimitedLife;
-    private int limitedLifeTicks;
+    public boolean hasLimitedLife;
+    public int limitedLifeTicks;
 
-    public Vex(EntityType<? extends Vex> entitytype, Level level) {
-        super(entitytype, level);
+    public Vex(EntityType<? extends Vex> entityType, Level level) {
+        super(entityType, level);
         this.moveControl = new Vex.VexMoveControl(this);
         this.xpReward = 3;
     }
 
     @Override
-    @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions entitydimensions) {
-        return entitydimensions.height - 0.28125F;
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions dimensions) {
+        return dimensions.height - 0.28125F;
     }
 
     @Override
-    @Override
     public boolean isFlapping() {
         return this.tickCount % Vex.TICKS_PER_FLAP == 0;
     }
 
     @Override
-    @Override
-    public void move(MoverType movertype, Vec3 vec3) {
-        super.move(movertype, vec3);
+    public void move(EnumMoveType type, Vec3 pos) {
+        super.move(type, pos);
         this.checkInsideBlocks();
     }
 
     @Override
-    @Override
     public void tick() {
         this.noPhysics = true;
         super.tick();
@@ -97,7 +93,6 @@
     }
 
     @Override
-    @Override
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new FloatGoal(this));
@@ -115,57 +110,52 @@
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Vex.DATA_FLAGS_ID, (byte) 0);
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        if (compoundtag.contains("BoundX")) {
-            this.boundOrigin = new BlockPos(compoundtag.getInt("BoundX"), compoundtag.getInt("BoundY"), compoundtag.getInt("BoundZ"));
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        if (compound.contains("BoundX")) {
+            this.boundOrigin = new BlockPos(compound.getInt("BoundX"), compound.getInt("BoundY"), compound.getInt("BoundZ"));
         }
 
-        if (compoundtag.contains("LifeTicks")) {
-            this.setLimitedLife(compoundtag.getInt("LifeTicks"));
+        if (compound.contains("LifeTicks")) {
+            this.setLimitedLife(compound.getInt("LifeTicks"));
         }
 
     }
 
     @Override
-    @Override
     public void restoreFrom(Entity entity) {
         super.restoreFrom(entity);
         if (entity instanceof Vex) {
-            Vex vex = (Vex) entity;
+            Vex entityvex = (Vex) entity;
 
-            this.owner = vex.getOwner();
+            this.owner = entityvex.getOwner();
         }
 
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
         if (this.boundOrigin != null) {
-            compoundtag.putInt("BoundX", this.boundOrigin.getX());
-            compoundtag.putInt("BoundY", this.boundOrigin.getY());
-            compoundtag.putInt("BoundZ", this.boundOrigin.getZ());
+            compound.putInt("BoundX", this.boundOrigin.getX());
+            compound.putInt("BoundY", this.boundOrigin.getY());
+            compound.putInt("BoundZ", this.boundOrigin.getZ());
         }
 
         if (this.hasLimitedLife) {
-            compoundtag.putInt("LifeTicks", this.limitedLifeTicks);
+            compound.putInt("LifeTicks", this.limitedLifeTicks);
         }
 
     }
 
     @Nullable
     @Override
-    @Override
     public Mob getOwner() {
         return this.owner;
     }
@@ -175,24 +165,24 @@
         return this.boundOrigin;
     }
 
-    public void setBoundOrigin(@Nullable BlockPos blockpos) {
-        this.boundOrigin = blockpos;
+    public void setBoundOrigin(@Nullable BlockPos boundOrigin) {
+        this.boundOrigin = boundOrigin;
     }
 
-    private boolean getVexFlag(int i) {
+    private boolean getVexFlag(int mask) {
         byte b0 = (Byte) this.entityData.get(Vex.DATA_FLAGS_ID);
 
-        return (b0 & i) != 0;
+        return (b0 & mask) != 0;
     }
 
-    private void setVexFlag(int i, boolean flag) {
+    private void setVexFlag(int mask, boolean value) {
         byte b0 = (Byte) this.entityData.get(Vex.DATA_FLAGS_ID);
         int j;
 
-        if (flag) {
-            j = b0 | i;
+        if (value) {
+            j = b0 | mask;
         } else {
-            j = b0 & ~i;
+            j = b0 & ~mask;
         }
 
         this.entityData.set(Vex.DATA_FLAGS_ID, (byte) (j & 255));
@@ -202,95 +192,86 @@
         return this.getVexFlag(1);
     }
 
-    public void setIsCharging(boolean flag) {
-        this.setVexFlag(1, flag);
+    public void setIsCharging(boolean charging) {
+        this.setVexFlag(1, charging);
     }
 
-    public void setOwner(Mob mob) {
-        this.owner = mob;
+    public void setOwner(Mob owner) {
+        this.owner = owner;
     }
 
-    public void setLimitedLife(int i) {
+    public void setLimitedLife(int limitedLifeTicks) {
         this.hasLimitedLife = true;
-        this.limitedLifeTicks = i;
+        this.limitedLifeTicks = limitedLifeTicks;
     }
 
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.VEX_AMBIENT;
     }
 
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.VEX_DEATH;
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.VEX_HURT;
     }
 
     @Override
-    @Override
     public float getLightLevelDependentMagicValue() {
         return 1.0F;
     }
 
     @Nullable
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
-        RandomSource randomsource = serverlevelaccessor.getRandom();
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
+        RandomSource randomsource = level.getRandom();
 
-        this.populateDefaultEquipmentSlots(randomsource, difficultyinstance);
-        this.populateDefaultEquipmentEnchantments(randomsource, difficultyinstance);
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, spawngroupdata, compoundtag);
+        this.populateDefaultEquipmentSlots(randomsource, difficulty);
+        this.populateDefaultEquipmentEnchantments(randomsource, difficulty);
+        return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
     }
 
     @Override
-    @Override
-    protected void populateDefaultEquipmentSlots(RandomSource randomsource, DifficultyInstance difficultyinstance) {
+    protected void populateDefaultEquipmentSlots(RandomSource random, DifficultyInstance difficulty) {
         this.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(Items.IRON_SWORD));
         this.setDropChance(EquipmentSlot.MAINHAND, 0.0F);
     }
 
     @Override
-    @Override
     protected float ridingOffset(Entity entity) {
         return 0.04F;
     }
 
     @Override
-    @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitydimensions, float f) {
-        return new Vector3f(0.0F, entitydimensions.height - 0.0625F * f, 0.0F);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, entitysize.height - 0.0625F * f, 0.0F);
     }
 
     private class VexMoveControl extends MoveControl {
 
-        public VexMoveControl(Vex vex) {
-            super(vex);
+        public VexMoveControl(Vex entityvex) {
+            super(entityvex);
         }
 
         @Override
-        @Override
         public void tick() {
             if (this.operation == MoveControl.Operation.MOVE_TO) {
-                Vec3 vec3 = new Vec3(this.wantedX - Vex.this.getX(), this.wantedY - Vex.this.getY(), this.wantedZ - Vex.this.getZ());
-                double d0 = vec3.length();
+                Vec3 vec3d = new Vec3(this.wantedX - Vex.this.getX(), this.wantedY - Vex.this.getY(), this.wantedZ - Vex.this.getZ());
+                double d0 = vec3d.length();
 
                 if (d0 < Vex.this.getBoundingBox().getSize()) {
                     this.operation = MoveControl.Operation.WAIT;
                     Vex.this.setDeltaMovement(Vex.this.getDeltaMovement().scale(0.5D));
                 } else {
-                    Vex.this.setDeltaMovement(Vex.this.getDeltaMovement().add(vec3.scale(this.speedModifier * 0.05D / d0)));
+                    Vex.this.setDeltaMovement(Vex.this.getDeltaMovement().add(vec3d.scale(this.speedModifier * 0.05D / d0)));
                     if (Vex.this.getTarget() == null) {
-                        Vec3 vec31 = Vex.this.getDeltaMovement();
+                        Vec3 vec3d1 = Vex.this.getDeltaMovement();
 
-                        Vex.this.setYRot(-((float) Mth.atan2(vec31.x, vec31.z)) * 57.295776F);
+                        Vex.this.setYRot(-((float) Mth.atan2(vec3d1.x, vec3d1.z)) * 57.295776F);
                         Vex.this.yBodyRot = Vex.this.getYRot();
                     } else {
                         double d1 = Vex.this.getTarget().getX() - Vex.this.getX();
@@ -308,32 +289,29 @@
     private class VexChargeAttackGoal extends Goal {
 
         public VexChargeAttackGoal() {
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE));
+            this.setFlags(EnumSet.of(Goal.Type.MOVE));
         }
 
         @Override
-        @Override
         public boolean canUse() {
-            LivingEntity livingentity = Vex.this.getTarget();
+            LivingEntity entityliving = Vex.this.getTarget();
 
-            return livingentity != null && livingentity.isAlive() && !Vex.this.getMoveControl().hasWanted() && Vex.this.random.nextInt(reducedTickDelay(7)) == 0 ? Vex.this.distanceToSqr((Entity) livingentity) > 4.0D : false;
+            return entityliving != null && entityliving.isAlive() && !Vex.this.getMoveControl().hasWanted() && Vex.this.random.nextInt(reducedTickDelay(7)) == 0 ? Vex.this.distanceToSqr((Entity) entityliving) > 4.0D : false;
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return Vex.this.getMoveControl().hasWanted() && Vex.this.isCharging() && Vex.this.getTarget() != null && Vex.this.getTarget().isAlive();
         }
 
         @Override
-        @Override
         public void start() {
-            LivingEntity livingentity = Vex.this.getTarget();
+            LivingEntity entityliving = Vex.this.getTarget();
 
-            if (livingentity != null) {
-                Vec3 vec3 = livingentity.getEyePosition();
+            if (entityliving != null) {
+                Vec3 vec3d = entityliving.getEyePosition();
 
-                Vex.this.moveControl.setWantedPosition(vec3.x, vec3.y, vec3.z, 1.0D);
+                Vex.this.moveControl.setWantedPosition(vec3d.x, vec3d.y, vec3d.z, 1.0D);
             }
 
             Vex.this.setIsCharging(true);
@@ -341,33 +319,30 @@
         }
 
         @Override
-        @Override
         public void stop() {
             Vex.this.setIsCharging(false);
         }
 
         @Override
-        @Override
         public boolean requiresUpdateEveryTick() {
             return true;
         }
 
         @Override
-        @Override
         public void tick() {
-            LivingEntity livingentity = Vex.this.getTarget();
+            LivingEntity entityliving = Vex.this.getTarget();
 
-            if (livingentity != null) {
-                if (Vex.this.getBoundingBox().intersects(livingentity.getBoundingBox())) {
-                    Vex.this.doHurtTarget(livingentity);
+            if (entityliving != null) {
+                if (Vex.this.getBoundingBox().intersects(entityliving.getBoundingBox())) {
+                    Vex.this.doHurtTarget(entityliving);
                     Vex.this.setIsCharging(false);
                 } else {
-                    double d0 = Vex.this.distanceToSqr((Entity) livingentity);
+                    double d0 = Vex.this.distanceToSqr((Entity) entityliving);
 
                     if (d0 < 9.0D) {
-                        Vec3 vec3 = livingentity.getEyePosition();
+                        Vec3 vec3d = entityliving.getEyePosition();
 
-                        Vex.this.moveControl.setWantedPosition(vec3.x, vec3.y, vec3.z, 1.0D);
+                        Vex.this.moveControl.setWantedPosition(vec3d.x, vec3d.y, vec3d.z, 1.0D);
                     }
                 }
 
@@ -378,37 +353,34 @@
     private class VexRandomMoveGoal extends Goal {
 
         public VexRandomMoveGoal() {
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE));
+            this.setFlags(EnumSet.of(Goal.Type.MOVE));
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return !Vex.this.getMoveControl().hasWanted() && Vex.this.random.nextInt(reducedTickDelay(7)) == 0;
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
             return false;
         }
 
         @Override
-        @Override
         public void tick() {
-            BlockPos blockpos = Vex.this.getBoundOrigin();
+            BlockPos blockposition = Vex.this.getBoundOrigin();
 
-            if (blockpos == null) {
-                blockpos = Vex.this.blockPosition();
+            if (blockposition == null) {
+                blockposition = Vex.this.blockPosition();
             }
 
             for (int i = 0; i < 3; ++i) {
-                BlockPos blockpos1 = blockpos.offset(Vex.this.random.nextInt(15) - 7, Vex.this.random.nextInt(11) - 5, Vex.this.random.nextInt(15) - 7);
+                BlockPos blockposition1 = blockposition.offset(Vex.this.random.nextInt(15) - 7, Vex.this.random.nextInt(11) - 5, Vex.this.random.nextInt(15) - 7);
 
-                if (Vex.this.level().isEmptyBlock(blockpos1)) {
-                    Vex.this.moveControl.setWantedPosition((double) blockpos1.getX() + 0.5D, (double) blockpos1.getY() + 0.5D, (double) blockpos1.getZ() + 0.5D, 0.25D);
+                if (Vex.this.level().isEmptyBlock(blockposition1)) {
+                    Vex.this.moveControl.setWantedPosition((double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.5D, (double) blockposition1.getZ() + 0.5D, 0.25D);
                     if (Vex.this.getTarget() == null) {
-                        Vex.this.getLookControl().setLookAt((double) blockpos1.getX() + 0.5D, (double) blockpos1.getY() + 0.5D, (double) blockpos1.getZ() + 0.5D, 180.0F, 20.0F);
+                        Vex.this.getLookControl().setLookAt((double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.5D, (double) blockposition1.getZ() + 0.5D, 180.0F, 20.0F);
                     }
                     break;
                 }
@@ -421,20 +393,18 @@
 
         private final TargetingConditions copyOwnerTargeting = TargetingConditions.forNonCombat().ignoreLineOfSight().ignoreInvisibilityTesting();
 
-        public VexCopyOwnerTargetGoal(PathfinderMob pathfindermob) {
-            super(pathfindermob, false);
+        public VexCopyOwnerTargetGoal(PathfinderMob entitycreature) {
+            super(entitycreature, false);
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return Vex.this.owner != null && Vex.this.owner.getTarget() != null && this.canAttack(Vex.this.owner.getTarget(), this.copyOwnerTargeting);
         }
 
         @Override
-        @Override
         public void start() {
-            Vex.this.setTarget(Vex.this.owner.getTarget());
+            Vex.this.setTarget(Vex.this.owner.getTarget(), org.bukkit.event.entity.EntityTargetEvent.TargetReason.OWNER_ATTACKED_TARGET, true); // CraftBukkit
             super.start();
         }
     }
