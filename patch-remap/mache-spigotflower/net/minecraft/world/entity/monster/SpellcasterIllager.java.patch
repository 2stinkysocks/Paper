--- a/net/minecraft/world/entity/monster/SpellcasterIllager.java
+++ b/net/minecraft/world/entity/monster/SpellcasterIllager.java
@@ -15,6 +15,9 @@
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.level.Level;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
 
 public abstract class SpellcasterIllager extends AbstractIllager {
 
@@ -22,53 +25,48 @@
     protected int spellCastingTickCount;
     private SpellcasterIllager.IllagerSpell currentSpell;
 
-    protected SpellcasterIllager(EntityType<? extends SpellcasterIllager> entitytype, Level level) {
-        super(entitytype, level);
+    protected SpellcasterIllager(EntityType<? extends SpellcasterIllager> entityType, Level level) {
+        super(entityType, level);
         this.currentSpell = SpellcasterIllager.IllagerSpell.NONE;
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(SpellcasterIllager.DATA_SPELL_CASTING_ID, (byte) 0);
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.spellCastingTickCount = compoundtag.getInt("SpellTicks");
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.spellCastingTickCount = compound.getInt("SpellTicks");
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
-        compoundtag.putInt("SpellTicks", this.spellCastingTickCount);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
+        compound.putInt("SpellTicks", this.spellCastingTickCount);
     }
 
     @Override
-    @Override
-    public AbstractIllager.IllagerArmPose getArmPose() {
-        return this.isCastingSpell() ? AbstractIllager.IllagerArmPose.SPELLCASTING : (this.isCelebrating() ? AbstractIllager.IllagerArmPose.CELEBRATING : AbstractIllager.IllagerArmPose.CROSSED);
+    public AbstractIllager.a getArmPose() {
+        return this.isCastingSpell() ? AbstractIllager.a.SPELLCASTING : (this.isCelebrating() ? AbstractIllager.a.CELEBRATING : AbstractIllager.a.CROSSED);
     }
 
     public boolean isCastingSpell() {
         return this.level().isClientSide ? (Byte) this.entityData.get(SpellcasterIllager.DATA_SPELL_CASTING_ID) > 0 : this.spellCastingTickCount > 0;
     }
 
-    public void setIsCastingSpell(SpellcasterIllager.IllagerSpell spellcasterillager_illagerspell) {
-        this.currentSpell = spellcasterillager_illagerspell;
-        this.entityData.set(SpellcasterIllager.DATA_SPELL_CASTING_ID, (byte) spellcasterillager_illagerspell.id);
+    public void setIsCastingSpell(SpellcasterIllager.IllagerSpell currentSpell) {
+        this.currentSpell = currentSpell;
+        this.entityData.set(SpellcasterIllager.DATA_SPELL_CASTING_ID, (byte) currentSpell.id);
     }
 
-    protected SpellcasterIllager.IllagerSpell getCurrentSpell() {
+    public SpellcasterIllager.IllagerSpell getCurrentSpell() {
         return !this.level().isClientSide ? this.currentSpell : SpellcasterIllager.IllagerSpell.byId((Byte) this.entityData.get(SpellcasterIllager.DATA_SPELL_CASTING_ID));
     }
 
     @Override
-    @Override
     protected void customServerAiStep() {
         super.customServerAiStep();
         if (this.spellCastingTickCount > 0) {
@@ -78,14 +76,13 @@
     }
 
     @Override
-    @Override
     public void tick() {
         super.tick();
         if (this.level().isClientSide && this.isCastingSpell()) {
-            SpellcasterIllager.IllagerSpell spellcasterillager_illagerspell = this.getCurrentSpell();
-            double d0 = spellcasterillager_illagerspell.spellColor[0];
-            double d1 = spellcasterillager_illagerspell.spellColor[1];
-            double d2 = spellcasterillager_illagerspell.spellColor[2];
+            SpellcasterIllager.IllagerSpell entityillagerwizard_spell = this.getCurrentSpell();
+            double d0 = entityillagerwizard_spell.spellColor[0];
+            double d1 = entityillagerwizard_spell.spellColor[1];
+            double d2 = entityillagerwizard_spell.spellColor[2];
             float f = this.yBodyRot * 0.017453292F + Mth.cos((float) this.tickCount * 0.6662F) * 0.25F;
             float f1 = Mth.cos(f);
             float f2 = Mth.sin(f);
@@ -102,13 +99,13 @@
 
     protected abstract SoundEvent getCastingSoundEvent();
 
-    protected static enum IllagerSpell {
+    public static enum IllagerSpell {
 
         NONE(0, 0.0D, 0.0D, 0.0D), SUMMON_VEX(1, 0.7D, 0.7D, 0.8D), FANGS(2, 0.4D, 0.3D, 0.35D), WOLOLO(3, 0.7D, 0.5D, 0.2D), DISAPPEAR(4, 0.3D, 0.3D, 0.8D), BLINDNESS(5, 0.1D, 0.1D, 0.2D);
 
-        private static final IntFunction<SpellcasterIllager.IllagerSpell> BY_ID = ByIdMap.continuous((spellcasterillager_illagerspell) -> {
-            return spellcasterillager_illagerspell.id;
-        }, values(), ByIdMap.OutOfBoundsStrategy.ZERO);
+        private static final IntFunction<SpellcasterIllager.IllagerSpell> BY_ID = ByIdMap.continuous((entityillagerwizard_spell) -> {
+            return entityillagerwizard_spell.id;
+        }, values(), ByIdMap.a.ZERO);
         final int id;
         final double[] spellColor;
 
@@ -117,8 +114,8 @@
             this.spellColor = new double[]{d0, d1, d2};
         }
 
-        public static SpellcasterIllager.IllagerSpell byId(int i) {
-            return (SpellcasterIllager.IllagerSpell) SpellcasterIllager.IllagerSpell.BY_ID.apply(i);
+        public static SpellcasterIllager.IllagerSpell byId(int id) {
+            return (SpellcasterIllager.IllagerSpell) SpellcasterIllager.IllagerSpell.BY_ID.apply(id);
         }
     }
 
@@ -130,41 +127,42 @@
         protected SpellcasterUseSpellGoal() {}
 
         @Override
-        @Override
         public boolean canUse() {
-            LivingEntity livingentity = SpellcasterIllager.this.getTarget();
+            LivingEntity entityliving = SpellcasterIllager.this.getTarget();
 
-            return livingentity != null && livingentity.isAlive() ? (SpellcasterIllager.this.isCastingSpell() ? false : SpellcasterIllager.this.tickCount >= this.nextAttackTickCount) : false;
+            return entityliving != null && entityliving.isAlive() ? (SpellcasterIllager.this.isCastingSpell() ? false : SpellcasterIllager.this.tickCount >= this.nextAttackTickCount) : false;
         }
 
         @Override
-        @Override
         public boolean canContinueToUse() {
-            LivingEntity livingentity = SpellcasterIllager.this.getTarget();
+            LivingEntity entityliving = SpellcasterIllager.this.getTarget();
 
-            return livingentity != null && livingentity.isAlive() && this.attackWarmupDelay > 0;
+            return entityliving != null && entityliving.isAlive() && this.attackWarmupDelay > 0;
         }
 
         @Override
-        @Override
         public void start() {
             this.attackWarmupDelay = this.adjustedTickDelay(this.getCastWarmupTime());
             SpellcasterIllager.this.spellCastingTickCount = this.getCastingTime();
             this.nextAttackTickCount = SpellcasterIllager.this.tickCount + this.getCastingInterval();
-            SoundEvent soundevent = this.getSpellPrepareSound();
+            SoundEvent soundeffect = this.getSpellPrepareSound();
 
-            if (soundevent != null) {
-                SpellcasterIllager.this.playSound(soundevent, 1.0F, 1.0F);
+            if (soundeffect != null) {
+                SpellcasterIllager.this.playSound(soundeffect, 1.0F, 1.0F);
             }
 
             SpellcasterIllager.this.setIsCastingSpell(this.getSpell());
         }
 
         @Override
-        @Override
         public void tick() {
             --this.attackWarmupDelay;
             if (this.attackWarmupDelay == 0) {
+                // CraftBukkit start
+                if (!CraftEventFactory.handleEntitySpellCastEvent(SpellcasterIllager.this, this.getSpell())) {
+                    return;
+                }
+                // CraftBukkit end
                 this.performSpellCasting();
                 SpellcasterIllager.this.playSound(SpellcasterIllager.this.getCastingSoundEvent(), 1.0F, 1.0F);
             }
@@ -190,31 +188,27 @@
     protected class SpellcasterCastingSpellGoal extends Goal {
 
         public SpellcasterCastingSpellGoal() {
-            this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
+            this.setFlags(EnumSet.of(Goal.Type.MOVE, Goal.Type.LOOK));
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return SpellcasterIllager.this.getSpellCastingTime() > 0;
         }
 
         @Override
-        @Override
         public void start() {
             super.start();
             SpellcasterIllager.this.navigation.stop();
         }
 
         @Override
-        @Override
         public void stop() {
             super.stop();
             SpellcasterIllager.this.setIsCastingSpell(SpellcasterIllager.IllagerSpell.NONE);
         }
 
         @Override
-        @Override
         public void tick() {
             if (SpellcasterIllager.this.getTarget() != null) {
                 SpellcasterIllager.this.getLookControl().setLookAt(SpellcasterIllager.this.getTarget(), (float) SpellcasterIllager.this.getMaxHeadYRot(), (float) SpellcasterIllager.this.getMaxHeadXRot());
