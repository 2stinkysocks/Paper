--- a/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
+++ b/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
@@ -11,9 +11,9 @@
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.navigation.GroundPathNavigation;
 import net.minecraft.world.entity.ai.util.GoalUtils;
@@ -29,10 +29,10 @@
     protected static final EntityDataAccessor<Boolean> DATA_IMMUNE_TO_ZOMBIFICATION = SynchedEntityData.defineId(AbstractPiglin.class, EntityDataSerializers.BOOLEAN);
     protected static final int CONVERSION_TIME = 300;
     protected static final float PIGLIN_EYE_HEIGHT = 1.79F;
-    protected int timeInOverworld;
+    public int timeInOverworld;
 
-    public AbstractPiglin(EntityType<? extends AbstractPiglin> entitytype, Level level) {
-        super(entitytype, level);
+    public AbstractPiglin(EntityType<? extends AbstractPiglin> entityType, Level level) {
+        super(entityType, level);
         this.setCanPickUpLoot(true);
         this.applyOpenDoorsAbility();
         this.setPathfindingMalus(BlockPathTypes.DANGER_FIRE, 16.0F);
@@ -47,61 +47,54 @@
     }
 
     @Override
-    @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions entitydimensions) {
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions dimensions) {
         return 1.79F;
     }
 
     @Override
-    @Override
     protected float ridingOffset(Entity entity) {
         return -0.7F;
     }
 
     @Override
-    @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitydimensions, float f) {
-        return new Vector3f(0.0F, entitydimensions.height + 0.0625F * f, 0.0F);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, entitysize.height + 0.0625F * f, 0.0F);
     }
 
     protected abstract boolean canHunt();
 
-    public void setImmuneToZombification(boolean flag) {
-        this.getEntityData().set(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION, flag);
+    public void setImmuneToZombification(boolean immuneToZombification) {
+        this.getEntityData().set(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION, immuneToZombification);
     }
 
-    protected boolean isImmuneToZombification() {
+    public boolean isImmuneToZombification() {
         return (Boolean) this.getEntityData().get(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION);
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION, false);
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
         if (this.isImmuneToZombification()) {
-            compoundtag.putBoolean("IsImmuneToZombification", true);
+            compound.putBoolean("IsImmuneToZombification", true);
         }
 
-        compoundtag.putInt("TimeInOverworld", this.timeInOverworld);
+        compound.putInt("TimeInOverworld", this.timeInOverworld);
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.setImmuneToZombification(compoundtag.getBoolean("IsImmuneToZombification"));
-        this.timeInOverworld = compoundtag.getInt("TimeInOverworld");
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.setImmuneToZombification(compound.getBoolean("IsImmuneToZombification"));
+        this.timeInOverworld = compound.getInt("TimeInOverworld");
     }
 
     @Override
-    @Override
     protected void customServerAiStep() {
         super.customServerAiStep();
         if (this.isConverting()) {
@@ -121,11 +114,11 @@
         return !this.level().dimensionType().piglinSafe() && !this.isImmuneToZombification() && !this.isNoAi();
     }
 
-    protected void finishConversion(ServerLevel serverlevel) {
-        ZombifiedPiglin zombifiedpiglin = (ZombifiedPiglin) this.convertTo(EntityType.ZOMBIFIED_PIGLIN, true);
+    protected void finishConversion(ServerLevel serverLevel) {
+        ZombifiedPiglin entitypigzombie = (ZombifiedPiglin) this.convertTo(EntityType.ZOMBIFIED_PIGLIN, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.PIGLIN_ZOMBIFIED, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.PIGLIN_ZOMBIFIED); // CraftBukkit - add spawn and transform reasons
 
-        if (zombifiedpiglin != null) {
-            zombifiedpiglin.addEffect(new MobEffectInstance(MobEffects.CONFUSION, 200, 0));
+        if (entitypigzombie != null) {
+            entitypigzombie.addEffect(new MobEffectInstance(MobEffects.CONFUSION, 200, 0));
         }
 
     }
@@ -134,13 +127,12 @@
         return !this.isBaby();
     }
 
-    public abstract PiglinArmPose getArmPose();
+    public abstract EntityPiglinArmPose getArmPose();
 
     @Nullable
     @Override
-    @Override
     public LivingEntity getTarget() {
-        return (LivingEntity) this.brain.getMemory(MemoryModuleType.ATTACK_TARGET).orElse((Object) null);
+        return (LivingEntity) this.brain.getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null); // CraftBukkit - decompile error
     }
 
     protected boolean isHoldingMeleeWeapon() {
@@ -148,7 +140,6 @@
     }
 
     @Override
-    @Override
     public void playAmbientSound() {
         if (PiglinAi.isIdle(this)) {
             super.playAmbientSound();
@@ -157,7 +148,6 @@
     }
 
     @Override
-    @Override
     protected void sendDebugPackets() {
         super.sendDebugPackets();
         DebugPackets.sendEntityBrain(this);
