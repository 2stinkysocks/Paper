--- a/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -5,30 +5,22 @@
 import java.util.List;
 import java.util.UUID;
 import javax.annotation.Nullable;
-import net.minecraft.core.BlockPos;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.network.syncher.EntityDataAccessor;
-import net.minecraft.network.syncher.EntityDataSerializers;
-import net.minecraft.network.syncher.SynchedEntityData;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.sounds.SoundEvent;
-import net.minecraft.sounds.SoundEvents;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.VisibleForDebug;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.Pose;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeInstance;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
@@ -53,8 +45,28 @@
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
+// CraftBukkit start
+import java.util.stream.Collectors;
+import java.util.HashSet;
+import java.util.Set;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.network.syncher.EntityDataAccessor;
+import net.minecraft.network.syncher.EntityDataSerializers;
+import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.world.item.Item;
+// CraftBukkit end
+
 public class Piglin extends AbstractPiglin implements CrossbowAttackMob, InventoryCarrier {
 
     private static final EntityDataAccessor<Boolean> DATA_BABY_ID = SynchedEntityData.defineId(Piglin.class, EntityDataSerializers.BOOLEAN);
@@ -71,60 +83,72 @@
     private static final float PROBABILITY_OF_SPAWNING_AS_BABY = 0.2F;
     private static final float BABY_EYE_HEIGHT_ADJUSTMENT = 0.82F;
     private static final double PROBABILITY_OF_SPAWNING_WITH_CROSSBOW_INSTEAD_OF_SWORD = 0.5D;
-    private final SimpleContainer inventory = new SimpleContainer(8);
-    private boolean cannotHunt;
+    public final SimpleContainer inventory = new SimpleContainer(8);
+    public boolean cannotHunt;
     protected static final ImmutableList<SensorType<? extends Sensor<? super Piglin>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.HURT_BY, SensorType.PIGLIN_SPECIFIC_SENSOR);
     protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, new MemoryModuleType[]{MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.PATH, MemoryModuleType.ANGRY_AT, MemoryModuleType.UNIVERSAL_ANGER, MemoryModuleType.AVOID_TARGET, MemoryModuleType.ADMIRING_ITEM, MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, MemoryModuleType.ADMIRING_DISABLED, MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM, MemoryModuleType.CELEBRATE_LOCATION, MemoryModuleType.DANCING, MemoryModuleType.HUNTED_RECENTLY, MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, MemoryModuleType.RIDE_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.NEAREST_REPELLENT});
+    // CraftBukkit start - Custom bartering and interest list
+    public Set<Item> allowedBarterItems = new HashSet<>();
+    public Set<Item> interestItems = new HashSet<>();
+    // CraftBukkit end
 
-    public Piglin(EntityType<? extends AbstractPiglin> entitytype, Level level) {
-        super(entitytype, level);
+    public Piglin(EntityType<? extends AbstractPiglin> entityType, Level level) {
+        super(entityType, level);
         this.xpReward = 5;
     }
 
     @Override
-    @Override
-    public void addAdditionalSaveData(CompoundTag compoundtag) {
-        super.addAdditionalSaveData(compoundtag);
+    public void addAdditionalSaveData(CompoundTag compound) {
+        super.addAdditionalSaveData(compound);
         if (this.isBaby()) {
-            compoundtag.putBoolean("IsBaby", true);
+            compound.putBoolean("IsBaby", true);
         }
 
         if (this.cannotHunt) {
-            compoundtag.putBoolean("CannotHunt", true);
+            compound.putBoolean("CannotHunt", true);
         }
 
-        this.writeInventoryToTag(compoundtag);
+        this.writeInventoryToTag(compound);
+        // CraftBukkit start
+        ListTag barterList = new ListTag();
+        allowedBarterItems.stream().map(BuiltInRegistries.ITEM::getKey).map(ResourceLocation::toString).map(StringTag::valueOf).forEach(barterList::add);
+        compound.put("Bukkit.BarterList", barterList);
+        ListTag interestList = new ListTag();
+        interestItems.stream().map(BuiltInRegistries.ITEM::getKey).map(ResourceLocation::toString).map(StringTag::valueOf).forEach(interestList::add);
+        compound.put("Bukkit.InterestList", interestList);
+        // CraftBukkit end
     }
 
     @Override
-    @Override
-    public void readAdditionalSaveData(CompoundTag compoundtag) {
-        super.readAdditionalSaveData(compoundtag);
-        this.setBaby(compoundtag.getBoolean("IsBaby"));
-        this.setCannotHunt(compoundtag.getBoolean("CannotHunt"));
-        this.readInventoryFromTag(compoundtag);
+    public void readAdditionalSaveData(CompoundTag compound) {
+        super.readAdditionalSaveData(compound);
+        this.setBaby(compound.getBoolean("IsBaby"));
+        this.setCannotHunt(compound.getBoolean("CannotHunt"));
+        this.readInventoryFromTag(compound);
+        // CraftBukkit start
+        this.allowedBarterItems = compound.getList("Bukkit.BarterList", 8).stream().map(Tag::getAsString).map(ResourceLocation::tryParse).map(BuiltInRegistries.ITEM::get).collect(Collectors.toCollection(HashSet::new));
+        this.interestItems = compound.getList("Bukkit.InterestList", 8).stream().map(Tag::getAsString).map(ResourceLocation::tryParse).map(BuiltInRegistries.ITEM::get).collect(Collectors.toCollection(HashSet::new));
+        // CraftBukkit end
     }
 
     @VisibleForDebug
     @Override
-    @Override
     public SimpleContainer getInventory() {
         return this.inventory;
     }
 
     @Override
-    @Override
-    protected void dropCustomDeathLoot(DamageSource damagesource, int i, boolean flag) {
-        super.dropCustomDeathLoot(damagesource, i, flag);
-        Entity entity = damagesource.getEntity();
+    protected void dropCustomDeathLoot(DamageSource source, int looting, boolean recentlyHit) {
+        super.dropCustomDeathLoot(source, looting, recentlyHit);
+        Entity entity = source.getEntity();
 
         if (entity instanceof Creeper) {
-            Creeper creeper = (Creeper) entity;
+            Creeper entitycreeper = (Creeper) entity;
 
-            if (creeper.canDropMobsSkull()) {
+            if (entitycreeper.canDropMobsSkull()) {
                 ItemStack itemstack = new ItemStack(Items.PIGLIN_HEAD);
 
-                creeper.increaseDroppedSkulls();
+                entitycreeper.increaseDroppedSkulls();
                 this.spawnAtLocation(itemstack);
             }
         }
@@ -132,16 +156,15 @@
         this.inventory.removeAllItems().forEach(this::spawnAtLocation);
     }
 
-    protected ItemStack addToInventory(ItemStack itemstack) {
-        return this.inventory.addItem(itemstack);
+    protected ItemStack addToInventory(ItemStack stack) {
+        return this.inventory.addItem(stack);
     }
 
-    protected boolean canAddToInventory(ItemStack itemstack) {
-        return this.inventory.canAddItem(itemstack);
+    protected boolean canAddToInventory(ItemStack stack) {
+        return this.inventory.canAddItem(stack);
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Piglin.DATA_BABY_ID, false);
@@ -150,10 +173,9 @@
     }
 
     @Override
-    @Override
-    public void onSyncedDataUpdated(EntityDataAccessor<?> entitydataaccessor) {
-        super.onSyncedDataUpdated(entitydataaccessor);
-        if (Piglin.DATA_BABY_ID.equals(entitydataaccessor)) {
+    public void onSyncedDataUpdated(EntityDataAccessor<?> key) {
+        super.onSyncedDataUpdated(key);
+        if (Piglin.DATA_BABY_ID.equals(key)) {
             this.refreshDimensions();
         }
 
@@ -163,17 +185,16 @@
         return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 16.0D).add(Attributes.MOVEMENT_SPEED, 0.3499999940395355D).add(Attributes.ATTACK_DAMAGE, 5.0D);
     }
 
-    public static boolean checkPiglinSpawnRules(EntityType<Piglin> entitytype, LevelAccessor levelaccessor, MobSpawnType mobspawntype, BlockPos blockpos, RandomSource randomsource) {
-        return !levelaccessor.getBlockState(blockpos.below()).is(Blocks.NETHER_WART_BLOCK);
+    public static boolean checkPiglinSpawnRules(EntityType<Piglin> piglin, LevelAccessor level, EnumMobSpawn spawnType, BlockPos pos, RandomSource random) {
+        return !level.getBlockState(pos.below()).is(Blocks.NETHER_WART_BLOCK);
     }
 
     @Nullable
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
-        RandomSource randomsource = serverlevelaccessor.getRandom();
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
+        RandomSource randomsource = level.getRandom();
 
-        if (mobspawntype != MobSpawnType.STRUCTURE) {
+        if (reason != EnumMobSpawn.STRUCTURE) {
             if (randomsource.nextFloat() < 0.2F) {
                 this.setBaby(true);
             } else if (this.isAdult()) {
@@ -181,118 +202,106 @@
             }
         }
 
-        PiglinAi.initMemories(this, serverlevelaccessor.getRandom());
-        this.populateDefaultEquipmentSlots(randomsource, difficultyinstance);
-        this.populateDefaultEquipmentEnchantments(randomsource, difficultyinstance);
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, spawngroupdata, compoundtag);
+        PiglinAi.initMemories(this, level.getRandom());
+        this.populateDefaultEquipmentSlots(randomsource, difficulty);
+        this.populateDefaultEquipmentEnchantments(randomsource, difficulty);
+        return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
     }
 
     @Override
-    @Override
     protected boolean shouldDespawnInPeaceful() {
         return false;
     }
 
     @Override
-    @Override
-    public boolean removeWhenFarAway(double d0) {
+    public boolean removeWhenFarAway(double distanceToClosestPlayer) {
         return !this.isPersistenceRequired();
     }
 
     @Override
-    @Override
-    protected void populateDefaultEquipmentSlots(RandomSource randomsource, DifficultyInstance difficultyinstance) {
+    protected void populateDefaultEquipmentSlots(RandomSource random, DifficultyInstance difficulty) {
         if (this.isAdult()) {
-            this.maybeWearArmor(EquipmentSlot.HEAD, new ItemStack(Items.GOLDEN_HELMET), randomsource);
-            this.maybeWearArmor(EquipmentSlot.CHEST, new ItemStack(Items.GOLDEN_CHESTPLATE), randomsource);
-            this.maybeWearArmor(EquipmentSlot.LEGS, new ItemStack(Items.GOLDEN_LEGGINGS), randomsource);
-            this.maybeWearArmor(EquipmentSlot.FEET, new ItemStack(Items.GOLDEN_BOOTS), randomsource);
+            this.maybeWearArmor(EquipmentSlot.HEAD, new ItemStack(Items.GOLDEN_HELMET), random);
+            this.maybeWearArmor(EquipmentSlot.CHEST, new ItemStack(Items.GOLDEN_CHESTPLATE), random);
+            this.maybeWearArmor(EquipmentSlot.LEGS, new ItemStack(Items.GOLDEN_LEGGINGS), random);
+            this.maybeWearArmor(EquipmentSlot.FEET, new ItemStack(Items.GOLDEN_BOOTS), random);
         }
 
     }
 
-    private void maybeWearArmor(EquipmentSlot equipmentslot, ItemStack itemstack, RandomSource randomsource) {
-        if (randomsource.nextFloat() < 0.1F) {
-            this.setItemSlot(equipmentslot, itemstack);
+    private void maybeWearArmor(EquipmentSlot slot, ItemStack stack, RandomSource random) {
+        if (random.nextFloat() < 0.1F) {
+            this.setItemSlot(slot, stack);
         }
 
     }
 
     @Override
-    @Override
     protected Brain.Provider<Piglin> brainProvider() {
         return Brain.provider(Piglin.MEMORY_TYPES, Piglin.SENSOR_TYPES);
     }
 
     @Override
-    @Override
     protected Brain<?> makeBrain(Dynamic<?> dynamic) {
         return PiglinAi.makeBrain(this, this.brainProvider().makeBrain(dynamic));
     }
 
     @Override
-    @Override
     public Brain<Piglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Piglin>) super.getBrain(); // CraftBukkit - Decompile error
     }
 
     @Override
-    @Override
-    public InteractionResult mobInteract(Player player, InteractionHand interactionhand) {
-        InteractionResult interactionresult = super.mobInteract(player, interactionhand);
+    public InteractionResult mobInteract(Player player, EnumHand hand) {
+        InteractionResult enuminteractionresult = super.mobInteract(player, hand);
 
-        if (interactionresult.consumesAction()) {
-            return interactionresult;
+        if (enuminteractionresult.consumesAction()) {
+            return enuminteractionresult;
         } else if (!this.level().isClientSide) {
-            return PiglinAi.mobInteract(this, player, interactionhand);
+            return PiglinAi.mobInteract(this, player, hand);
         } else {
-            boolean flag = PiglinAi.canAdmire(this, player.getItemInHand(interactionhand)) && this.getArmPose() != PiglinArmPose.ADMIRING_ITEM;
+            boolean flag = PiglinAi.canAdmire(this, player.getItemInHand(hand)) && this.getArmPose() != EntityPiglinArmPose.ADMIRING_ITEM;
 
             return flag ? InteractionResult.SUCCESS : InteractionResult.PASS;
         }
     }
 
     @Override
-    @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions entitydimensions) {
-        float f = super.getStandingEyeHeight(pose, entitydimensions);
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions size) {
+        float f = super.getStandingEyeHeight(pose, size);
 
         return this.isBaby() ? f - 0.82F : f;
     }
 
     @Override
-    @Override
-    public void setBaby(boolean flag) {
-        this.getEntityData().set(Piglin.DATA_BABY_ID, flag);
+    public void setBaby(boolean childZombie) {
+        this.getEntityData().set(Piglin.DATA_BABY_ID, childZombie);
         if (!this.level().isClientSide) {
-            AttributeInstance attributeinstance = this.getAttribute(Attributes.MOVEMENT_SPEED);
+            AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
 
-            attributeinstance.removeModifier(Piglin.SPEED_MODIFIER_BABY.getId());
-            if (flag) {
-                attributeinstance.addTransientModifier(Piglin.SPEED_MODIFIER_BABY);
+            attributemodifiable.removeModifier(Piglin.SPEED_MODIFIER_BABY.getId());
+            if (childZombie) {
+                attributemodifiable.addTransientModifier(Piglin.SPEED_MODIFIER_BABY);
             }
         }
 
     }
 
     @Override
-    @Override
     public boolean isBaby() {
         return (Boolean) this.getEntityData().get(Piglin.DATA_BABY_ID);
     }
 
-    private void setCannotHunt(boolean flag) {
-        this.cannotHunt = flag;
+    private void setCannotHunt(boolean cannotHunt) {
+        this.cannotHunt = cannotHunt;
     }
 
     @Override
-    @Override
     protected boolean canHunt() {
         return !this.cannotHunt;
     }
 
     @Override
-    @Override
     protected void customServerAiStep() {
         this.level().getProfiler().push("piglinBrain");
         this.getBrain().tick((ServerLevel) this.level(), this);
@@ -302,17 +311,15 @@
     }
 
     @Override
-    @Override
     public int getExperienceReward() {
         return this.xpReward;
     }
 
     @Override
-    @Override
-    protected void finishConversion(ServerLevel serverlevel) {
+    protected void finishConversion(ServerLevel serverLevel) {
         PiglinAi.cancelAdmiring(this);
         this.inventory.removeAllItems().forEach(this::spawnAtLocation);
-        super.finishConversion(serverlevel);
+        super.finishConversion(serverLevel);
     }
 
     private ItemStack createSpawnWeapon() {
@@ -324,41 +331,37 @@
     }
 
     @Override
-    @Override
-    public void setChargingCrossbow(boolean flag) {
-        this.entityData.set(Piglin.DATA_IS_CHARGING_CROSSBOW, flag);
+    public void setChargingCrossbow(boolean isCharging) {
+        this.entityData.set(Piglin.DATA_IS_CHARGING_CROSSBOW, isCharging);
     }
 
     @Override
-    @Override
     public void onCrossbowAttackPerformed() {
         this.noActionTime = 0;
     }
 
     @Override
-    @Override
-    public PiglinArmPose getArmPose() {
-        return this.isDancing() ? PiglinArmPose.DANCING : (PiglinAi.isLovedItem(this.getOffhandItem()) ? PiglinArmPose.ADMIRING_ITEM : (this.isAggressive() && this.isHoldingMeleeWeapon() ? PiglinArmPose.ATTACKING_WITH_MELEE_WEAPON : (this.isChargingCrossbow() ? PiglinArmPose.CROSSBOW_CHARGE : (this.isAggressive() && this.isHolding(Items.CROSSBOW) ? PiglinArmPose.CROSSBOW_HOLD : PiglinArmPose.DEFAULT))));
+    public EntityPiglinArmPose getArmPose() {
+        return this.isDancing() ? EntityPiglinArmPose.DANCING : (PiglinAi.isLovedItem(this.getOffhandItem()) ? EntityPiglinArmPose.ADMIRING_ITEM : (this.isAggressive() && this.isHoldingMeleeWeapon() ? EntityPiglinArmPose.ATTACKING_WITH_MELEE_WEAPON : (this.isChargingCrossbow() ? EntityPiglinArmPose.CROSSBOW_CHARGE : (this.isAggressive() && this.isHolding(Items.CROSSBOW) ? EntityPiglinArmPose.CROSSBOW_HOLD : EntityPiglinArmPose.DEFAULT))));
     }
 
     public boolean isDancing() {
         return (Boolean) this.entityData.get(Piglin.DATA_IS_DANCING);
     }
 
-    public void setDancing(boolean flag) {
-        this.entityData.set(Piglin.DATA_IS_DANCING, flag);
+    public void setDancing(boolean dancing) {
+        this.entityData.set(Piglin.DATA_IS_DANCING, dancing);
     }
 
     @Override
-    @Override
-    public boolean hurt(DamageSource damagesource, float f) {
-        boolean flag = super.hurt(damagesource, f);
+    public boolean hurt(DamageSource source, float amount) {
+        boolean flag = super.hurt(source, amount);
 
         if (this.level().isClientSide) {
             return false;
         } else {
-            if (flag && damagesource.getEntity() instanceof LivingEntity) {
-                PiglinAi.wasHurtBy(this, (LivingEntity) damagesource.getEntity());
+            if (flag && source.getEntity() instanceof LivingEntity) {
+                PiglinAi.wasHurtBy(this, (LivingEntity) source.getEntity());
             }
 
             return flag;
@@ -366,116 +369,104 @@
     }
 
     @Override
-    @Override
-    public void performRangedAttack(LivingEntity livingentity, float f) {
+    public void performRangedAttack(LivingEntity target, float distanceFactor) {
         this.performCrossbowAttack(this, 1.6F);
     }
 
     @Override
-    @Override
-    public void shootCrossbowProjectile(LivingEntity livingentity, ItemStack itemstack, Projectile projectile, float f) {
-        this.shootCrossbowProjectile(this, livingentity, projectile, f, 1.6F);
+    public void shootCrossbowProjectile(LivingEntity target, ItemStack crossbowStack, Projectile projectile, float projectileAngle) {
+        this.shootCrossbowProjectile(this, target, projectile, projectileAngle, 1.6F);
     }
 
     @Override
-    @Override
-    public boolean canFireProjectileWeapon(ProjectileWeaponItem projectileweaponitem) {
-        return projectileweaponitem == Items.CROSSBOW;
+    public boolean canFireProjectileWeapon(ProjectileWeaponItem projectileWeapon) {
+        return projectileWeapon == Items.CROSSBOW;
     }
 
-    protected void holdInMainHand(ItemStack itemstack) {
-        this.setItemSlotAndDropWhenKilled(EquipmentSlot.MAINHAND, itemstack);
+    protected void holdInMainHand(ItemStack stack) {
+        this.setItemSlotAndDropWhenKilled(EquipmentSlot.MAINHAND, stack);
     }
 
-    protected void holdInOffHand(ItemStack itemstack) {
-        if (itemstack.is(PiglinAi.BARTERING_ITEM)) {
-            this.setItemSlot(EquipmentSlot.OFFHAND, itemstack);
+    protected void holdInOffHand(ItemStack stack) {
+        if (stack.is(PiglinAi.BARTERING_ITEM) || allowedBarterItems.contains(stack.getItem())) { // CraftBukkit - Changes to accept custom payment items
+            this.setItemSlot(EquipmentSlot.OFFHAND, stack);
             this.setGuaranteedDrop(EquipmentSlot.OFFHAND);
         } else {
-            this.setItemSlotAndDropWhenKilled(EquipmentSlot.OFFHAND, itemstack);
+            this.setItemSlotAndDropWhenKilled(EquipmentSlot.OFFHAND, stack);
         }
 
     }
 
     @Override
-    @Override
-    public boolean wantsToPickUp(ItemStack itemstack) {
-        return this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && this.canPickUpLoot() && PiglinAi.wantsToPickup(this, itemstack);
+    public boolean wantsToPickUp(ItemStack stack) {
+        return this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && this.canPickUpLoot() && PiglinAi.wantsToPickup(this, stack);
     }
 
-    protected boolean canReplaceCurrentItem(ItemStack itemstack) {
-        EquipmentSlot equipmentslot = Mob.getEquipmentSlotForItem(itemstack);
-        ItemStack itemstack1 = this.getItemBySlot(equipmentslot);
+    protected boolean canReplaceCurrentItem(ItemStack candidate) {
+        EquipmentSlot enumitemslot = Mob.getEquipmentSlotForItem(candidate);
+        ItemStack itemstack1 = this.getItemBySlot(enumitemslot);
 
-        return this.canReplaceCurrentItem(itemstack, itemstack1);
+        return this.canReplaceCurrentItem(candidate, itemstack1);
     }
 
     @Override
-    @Override
-    protected boolean canReplaceCurrentItem(ItemStack itemstack, ItemStack itemstack1) {
-        if (EnchantmentHelper.hasBindingCurse(itemstack1)) {
+    protected boolean canReplaceCurrentItem(ItemStack candidate, ItemStack existing) {
+        if (EnchantmentHelper.hasBindingCurse(existing)) {
             return false;
         } else {
-            boolean flag = PiglinAi.isLovedItem(itemstack) || itemstack.is(Items.CROSSBOW);
-            boolean flag1 = PiglinAi.isLovedItem(itemstack1) || itemstack1.is(Items.CROSSBOW);
+            boolean flag = PiglinAi.isLovedItem(candidate, this) || candidate.is(Items.CROSSBOW); // CraftBukkit
+            boolean flag1 = PiglinAi.isLovedItem(existing, this) || existing.is(Items.CROSSBOW); // CraftBukkit
 
-            return flag && !flag1 ? true : (!flag && flag1 ? false : (this.isAdult() && !itemstack.is(Items.CROSSBOW) && itemstack1.is(Items.CROSSBOW) ? false : super.canReplaceCurrentItem(itemstack, itemstack1)));
+            return flag && !flag1 ? true : (!flag && flag1 ? false : (this.isAdult() && !candidate.is(Items.CROSSBOW) && existing.is(Items.CROSSBOW) ? false : super.canReplaceCurrentItem(candidate, existing)));
         }
     }
 
     @Override
-    @Override
-    protected void pickUpItem(ItemEntity itementity) {
-        this.onItemPickup(itementity);
-        PiglinAi.pickUpItem(this, itementity);
+    protected void pickUpItem(ItemEntity itemEntity) {
+        this.onItemPickup(itemEntity);
+        PiglinAi.pickUpItem(this, itemEntity);
     }
 
     @Override
-    @Override
-    public boolean startRiding(Entity entity, boolean flag) {
+    public boolean startRiding(Entity entity, boolean force) {
         if (this.isBaby() && entity.getType() == EntityType.HOGLIN) {
             entity = this.getTopPassenger(entity, 3);
         }
 
-        return super.startRiding(entity, flag);
+        return super.startRiding(entity, force);
     }
 
-    private Entity getTopPassenger(Entity entity, int i) {
-        List<Entity> list = entity.getPassengers();
+    private Entity getTopPassenger(Entity vehicle, int maxPosition) {
+        List<Entity> list = vehicle.getPassengers();
 
-        return i != 1 && !list.isEmpty() ? this.getTopPassenger((Entity) list.get(0), i - 1) : entity;
+        return maxPosition != 1 && !list.isEmpty() ? this.getTopPassenger((Entity) list.get(0), maxPosition - 1) : vehicle;
     }
 
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
-        return this.level().isClientSide ? null : (SoundEvent) PiglinAi.getSoundForCurrentActivity(this).orElse((Object) null);
+        return this.level().isClientSide ? null : (SoundEvent) PiglinAi.getSoundForCurrentActivity(this).orElse(null); // CraftBukkit - Decompile error
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.PIGLIN_HURT;
     }
 
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.PIGLIN_DEATH;
     }
 
     @Override
-    @Override
-    protected void playStepSound(BlockPos blockpos, BlockState blockstate) {
+    protected void playStepSound(BlockPos pos, IBlockData block) {
         this.playSound(SoundEvents.PIGLIN_STEP, 0.15F, 1.0F);
     }
 
-    protected void playSoundEvent(SoundEvent soundevent) {
-        this.playSound(soundevent, this.getSoundVolume(), this.getVoicePitch());
+    protected void playSoundEvent(SoundEvent soundEvent) {
+        this.playSound(soundEvent, this.getSoundVolume(), this.getVoicePitch());
     }
 
     @Override
-    @Override
     protected void playConvertedSound() {
         this.playSoundEvent(SoundEvents.PIGLIN_CONVERTED_TO_ZOMBIFIED);
     }
