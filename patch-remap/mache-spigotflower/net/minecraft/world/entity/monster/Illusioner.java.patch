--- a/net/minecraft/world/entity/monster/Illusioner.java
+++ b/net/minecraft/world/entity/monster/Illusioner.java
@@ -12,12 +12,12 @@
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.EnumMonsterType;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.MobType;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.goal.FloatGoal;
@@ -47,8 +47,8 @@
     private int clientSideIllusionTicks;
     private final Vec3[][] clientSideIllusionOffsets;
 
-    public Illusioner(EntityType<? extends Illusioner> entitytype, Level level) {
-        super(entitytype, level);
+    public Illusioner(EntityType<? extends Illusioner> entityType, Level level) {
+        super(entityType, level);
         this.xpReward = 5;
         this.clientSideIllusionOffsets = new Vec3[2][4];
 
@@ -60,7 +60,6 @@
     }
 
     @Override
-    @Override
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new FloatGoal(this));
@@ -82,26 +81,22 @@
     }
 
     @Override
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor serverlevelaccessor, DifficultyInstance difficultyinstance, MobSpawnType mobspawntype, @Nullable SpawnGroupData spawngroupdata, @Nullable CompoundTag compoundtag) {
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
         this.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(Items.BOW));
-        return super.finalizeSpawn(serverlevelaccessor, difficultyinstance, mobspawntype, spawngroupdata, compoundtag);
+        return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
     }
 
     @Override
-    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
     }
 
     @Override
-    @Override
     public AABB getBoundingBoxForCulling() {
         return this.getBoundingBox().inflate(3.0D, 0.0D, 3.0D);
     }
 
     @Override
-    @Override
     public void aiStep() {
         super.aiStep();
         if (this.level().isClientSide && this.isInvisible()) {
@@ -142,81 +137,72 @@
     }
 
     @Override
-    @Override
     public SoundEvent getCelebrateSound() {
         return SoundEvents.ILLUSIONER_AMBIENT;
     }
 
-    public Vec3[] getIllusionOffsets(float f) {
+    public Vec3[] getIllusionOffsets(float partialTick) {
         if (this.clientSideIllusionTicks <= 0) {
             return this.clientSideIllusionOffsets[1];
         } else {
-            double d0 = (double) (((float) this.clientSideIllusionTicks - f) / 3.0F);
+            double d0 = (double) (((float) this.clientSideIllusionTicks - partialTick) / 3.0F);
 
             d0 = Math.pow(d0, 0.25D);
-            Vec3[] avec3 = new Vec3[4];
+            Vec3[] avec3d = new Vec3[4];
 
             for (int i = 0; i < 4; ++i) {
-                avec3[i] = this.clientSideIllusionOffsets[1][i].scale(1.0D - d0).add(this.clientSideIllusionOffsets[0][i].scale(d0));
+                avec3d[i] = this.clientSideIllusionOffsets[1][i].scale(1.0D - d0).add(this.clientSideIllusionOffsets[0][i].scale(d0));
             }
 
-            return avec3;
+            return avec3d;
         }
     }
 
     @Override
-    @Override
     public boolean isAlliedTo(Entity entity) {
-        return super.isAlliedTo(entity) ? true : (entity instanceof LivingEntity && ((LivingEntity) entity).getMobType() == MobType.ILLAGER ? this.getTeam() == null && entity.getTeam() == null : false);
+        return super.isAlliedTo(entity) ? true : (entity instanceof LivingEntity && ((LivingEntity) entity).getMobType() == EnumMonsterType.ILLAGER ? this.getTeam() == null && entity.getTeam() == null : false);
     }
 
     @Override
-    @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.ILLUSIONER_AMBIENT;
     }
 
     @Override
-    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.ILLUSIONER_DEATH;
     }
 
     @Override
-    @Override
-    protected SoundEvent getHurtSound(DamageSource damagesource) {
+    protected SoundEvent getHurtSound(DamageSource damageSource) {
         return SoundEvents.ILLUSIONER_HURT;
     }
 
     @Override
-    @Override
     protected SoundEvent getCastingSoundEvent() {
         return SoundEvents.ILLUSIONER_CAST_SPELL;
     }
 
     @Override
-    @Override
-    public void applyRaidBuffs(int i, boolean flag) {}
+    public void applyRaidBuffs(int wave, boolean unusedFalse) {}
 
     @Override
-    @Override
-    public void performRangedAttack(LivingEntity livingentity, float f) {
+    public void performRangedAttack(LivingEntity target, float distanceFactor) {
         ItemStack itemstack = this.getProjectile(this.getItemInHand(ProjectileUtil.getWeaponHoldingHand(this, Items.BOW)));
-        AbstractArrow abstractarrow = ProjectileUtil.getMobArrow(this, itemstack, f);
-        double d0 = livingentity.getX() - this.getX();
-        double d1 = livingentity.getY(0.3333333333333333D) - abstractarrow.getY();
-        double d2 = livingentity.getZ() - this.getZ();
+        AbstractArrow entityarrow = ProjectileUtil.getMobArrow(this, itemstack, distanceFactor);
+        double d0 = target.getX() - this.getX();
+        double d1 = target.getY(0.3333333333333333D) - entityarrow.getY();
+        double d2 = target.getZ() - this.getZ();
         double d3 = Math.sqrt(d0 * d0 + d2 * d2);
 
-        abstractarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.level().getDifficulty().getId() * 4));
+        entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.level().getDifficulty().getId() * 4));
         this.playSound(SoundEvents.SKELETON_SHOOT, 1.0F, 1.0F / (this.getRandom().nextFloat() * 0.4F + 0.8F));
-        this.level().addFreshEntity(abstractarrow);
+        this.level().addFreshEntity(entityarrow);
     }
 
     @Override
-    @Override
-    public AbstractIllager.IllagerArmPose getArmPose() {
-        return this.isCastingSpell() ? AbstractIllager.IllagerArmPose.SPELLCASTING : (this.isAggressive() ? AbstractIllager.IllagerArmPose.BOW_AND_ARROW : AbstractIllager.IllagerArmPose.CROSSED);
+    public AbstractIllager.a getArmPose() {
+        return this.isCastingSpell() ? AbstractIllager.a.SPELLCASTING : (this.isAggressive() ? AbstractIllager.a.BOW_AND_ARROW : AbstractIllager.a.CROSSED);
     }
 
     private class IllusionerMirrorSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
@@ -226,38 +212,32 @@
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return !super.canUse() ? false : !Illusioner.this.hasEffect(MobEffects.INVISIBILITY);
         }
 
         @Override
-        @Override
         protected int getCastingTime() {
             return 20;
         }
 
         @Override
-        @Override
         protected int getCastingInterval() {
             return 340;
         }
 
         @Override
-        @Override
         protected void performSpellCasting() {
-            Illusioner.this.addEffect(new MobEffectInstance(MobEffects.INVISIBILITY, 1200));
+            Illusioner.this.addEffect(new MobEffectInstance(MobEffects.INVISIBILITY, 1200), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ILLUSION); // CraftBukkit
         }
 
         @Nullable
         @Override
-        @Override
         protected SoundEvent getSpellPrepareSound() {
             return SoundEvents.ILLUSIONER_PREPARE_MIRROR;
         }
 
         @Override
-        @Override
         protected SpellcasterIllager.IllagerSpell getSpell() {
             return SpellcasterIllager.IllagerSpell.DISAPPEAR;
         }
@@ -272,49 +252,42 @@
         }
 
         @Override
-        @Override
         public boolean canUse() {
             return !super.canUse() ? false : (Illusioner.this.getTarget() == null ? false : (Illusioner.this.getTarget().getId() == this.lastTargetId ? false : Illusioner.this.level().getCurrentDifficultyAt(Illusioner.this.blockPosition()).isHarderThan((float) Difficulty.NORMAL.ordinal())));
         }
 
         @Override
-        @Override
         public void start() {
             super.start();
-            LivingEntity livingentity = Illusioner.this.getTarget();
+            LivingEntity entityliving = Illusioner.this.getTarget();
 
-            if (livingentity != null) {
-                this.lastTargetId = livingentity.getId();
+            if (entityliving != null) {
+                this.lastTargetId = entityliving.getId();
             }
 
         }
 
         @Override
-        @Override
         protected int getCastingTime() {
             return 20;
         }
 
         @Override
-        @Override
         protected int getCastingInterval() {
             return 180;
         }
 
         @Override
-        @Override
         protected void performSpellCasting() {
-            Illusioner.this.getTarget().addEffect(new MobEffectInstance(MobEffects.BLINDNESS, 400), Illusioner.this);
+            Illusioner.this.getTarget().addEffect(new MobEffectInstance(MobEffects.BLINDNESS, 400), Illusioner.this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
         }
 
         @Override
-        @Override
         protected SoundEvent getSpellPrepareSound() {
             return SoundEvents.ILLUSIONER_PREPARE_BLINDNESS;
         }
 
         @Override
-        @Override
         protected SpellcasterIllager.IllagerSpell getSpell() {
             return SpellcasterIllager.IllagerSpell.BLINDNESS;
         }
