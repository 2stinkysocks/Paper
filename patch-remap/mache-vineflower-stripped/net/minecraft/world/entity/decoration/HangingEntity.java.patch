--- a/net/minecraft/world/entity/decoration/HangingEntity.java
+++ b/net/minecraft/world/entity/decoration/HangingEntity.java
@@ -25,6 +20,17 @@
 import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.Validate;
 import org.slf4j.Logger;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.server.level.ServerLevel;
+// CraftBukkit start
+import net.minecraft.tags.DamageTypeTags;
+import net.minecraft.util.Mth;
+import org.bukkit.entity.Hanging;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
+import org.bukkit.event.hanging.HangingBreakEvent;
+// CraftBukkit end
 
 public abstract class HangingEntity extends Entity {
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -57,24 +66,38 @@
 
     protected void recalculateBoundingBox() {
         if (this.direction != null) {
-            double d = (double)this.pos.getX() + 0.5;
-            double d1 = (double)this.pos.getY() + 0.5;
-            double d2 = (double)this.pos.getZ() + 0.5;
-            double d3 = 0.46875;
-            double d4 = this.offs(this.getWidth());
-            double d5 = this.offs(this.getHeight());
-            d -= (double)this.direction.getStepX() * 0.46875;
-            d2 -= (double)this.direction.getStepZ() * 0.46875;
-            double var22 = d1 + d5;
-            Direction counterClockWise = this.direction.getCounterClockWise();
-            double var21 = d + d4 * (double)counterClockWise.getStepX();
-            double var24 = d2 + d4 * (double)counterClockWise.getStepZ();
-            this.setPosRaw(var21, var22, var24);
-            double d6 = (double)this.getWidth();
-            double d7 = (double)this.getHeight();
-            double d8 = (double)this.getWidth();
-            if (this.direction.getAxis() == Direction.Axis.Z) {
-                d8 = 1.0;
+            // CraftBukkit start code moved in to calculateBoundingBox
+            this.setBoundingBox(calculateBoundingBox(this, this.pos, this.direction, this.getWidth(), this.getHeight()));
+            // CraftBukkit end
+        }
+    }
+
+    // CraftBukkit start - break out BB calc into own method
+    public static AABB calculateBoundingBox(@Nullable Entity entity, BlockPos blockPosition, Direction direction, int width, int height) {
+        {
+            double d0 = (double) blockPosition.getX() + 0.5D;
+            double d1 = (double) blockPosition.getY() + 0.5D;
+            double d2 = (double) blockPosition.getZ() + 0.5D;
+            double d3 = 0.46875D;
+            double d4 = offs(width);
+            double d5 = offs(height);
+
+            d0 -= (double) direction.getStepX() * 0.46875D;
+            d2 -= (double) direction.getStepZ() * 0.46875D;
+            d1 += d5;
+            Direction enumdirection = direction.getCounterClockWise();
+
+            d0 += d4 * (double) enumdirection.getStepX();
+            d2 += d4 * (double) enumdirection.getStepZ();
+            if (entity != null) {
+                entity.setPosRaw(d0, d1, d2);
+            }
+            double d6 = (double) width;
+            double d7 = (double) height;
+            double d8 = (double) width;
+
+            if (direction.getAxis() == Direction.Axis.Z) {
+                d8 = 1.0D;
             } else {
                 d6 = 1.0;
             }
@@ -85,9 +108,10 @@
             this.setBoundingBox(new AABB(var21 - d6, var22 - d7, var24 - d8, var21 + d6, var22 + d7, var24 + d8));
         }
     }
+    // CraftBukkit end
 
-    private double offs(int offset) {
-        return offset % 32 == 0 ? 0.5 : 0.0;
+    private static double offs(int i) { // CraftBukkit - static
+        return i % 32 == 0 ? 0.5D : 0.0D;
     }
 
     @Override
@@ -97,6 +121,24 @@
             if (this.checkInterval++ == 100) {
                 this.checkInterval = 0;
                 if (!this.isRemoved() && !this.survives()) {
+                    // CraftBukkit start - fire break events
+                    IBlockData material = this.level().getBlockState(this.blockPosition());
+                    HangingBreakEvent.RemoveCause cause;
+
+                    if (!material.isAir()) {
+                        // TODO: This feels insufficient to catch 100% of suffocation cases
+                        cause = HangingBreakEvent.RemoveCause.OBSTRUCTION;
+                    } else {
+                        cause = HangingBreakEvent.RemoveCause.PHYSICS;
+                    }
+
+                    HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), cause);
+                    this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                    if (this.isRemoved() || event.isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
                     this.discard();
                     this.dropItem(null);
                 }
@@ -151,6 +202,22 @@
             return false;
         } else {
             if (!this.isRemoved() && !this.level().isClientSide) {
+                // CraftBukkit start - fire break events
+                Entity damager = (source.isIndirect()) ? source.getEntity() : source.getDirectEntity();
+                HangingBreakEvent event;
+                if (damager != null) {
+                    event = new HangingBreakByEntityEvent((Hanging) this.getBukkitEntity(), damager.getBukkitEntity(), source.is(DamageTypeTags.IS_EXPLOSION) ? HangingBreakEvent.RemoveCause.EXPLOSION : HangingBreakEvent.RemoveCause.ENTITY);
+                } else {
+                    event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), source.is(DamageTypeTags.IS_EXPLOSION) ? HangingBreakEvent.RemoveCause.EXPLOSION : HangingBreakEvent.RemoveCause.DEFAULT);
+                }
+
+                this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                if (this.isRemoved() || event.isCancelled()) {
+                    return true;
+                }
+                // CraftBukkit end
+
                 this.kill();
                 this.markHurt();
                 this.dropItem(source.getEntity());
@@ -161,22 +228,43 @@
     }
 
     @Override
-    public void move(MoverType type, Vec3 pos) {
-        if (!this.level().isClientSide && !this.isRemoved() && pos.lengthSqr() > 0.0) {
+    public void move(EnumMoveType type, Vec3 pos) {
+        if (!this.level().isClientSide && !this.isRemoved() && pos.lengthSqr() > 0.0D) {
+            if (this.isRemoved()) return; // CraftBukkit
+
+            // CraftBukkit start - fire break events
+            // TODO - Does this need its own cause? Seems to only be triggered by pistons
+            HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.PHYSICS);
+            this.level().getCraftServer().getPluginManager().callEvent(event);
+
+            if (this.isRemoved() || event.isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
+
             this.kill();
             this.dropItem(null);
         }
     }
 
     @Override
-    public void push(double x, double y, double z) {
-        if (!this.level().isClientSide && !this.isRemoved() && x * x + y * y + z * z > 0.0) {
+    public void push(double x, double d1, double y) {
+        if (false && !this.level().isClientSide && !this.isRemoved() && x * x + d1 * d1 + y * y > 0.0D) { // CraftBukkit - not needed
             this.kill();
             this.dropItem(null);
         }
     }
 
+    // CraftBukkit start - selectively save tile position
     @Override
+    public void addAdditionalSaveData(CompoundTag nbttagcompound, boolean includeAll) {
+        if (includeAll) {
+            addAdditionalSaveData(nbttagcompound);
+        }
+    }
+    // CraftBukkit end
+
+    @Override
     public void addAdditionalSaveData(CompoundTag compound) {
         BlockPos pos = this.getPos();
         compound.putInt("TileX", pos.getX());
