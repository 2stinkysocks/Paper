--- a/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -52,7 +51,22 @@
 import org.joml.Vector3f;
 import org.slf4j.Logger;
 
-public class EnderDragon extends Mob implements Enemy {
+// CraftBukkit start
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Explosion;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.storage.loot.LootParams;
+import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.event.entity.EntityExplodeEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+// CraftBukkit end
+
+public class EnderDragon extends Mob implements IMonster {
+
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final EntityDataAccessor<Integer> DATA_PHASE = SynchedEntityData.defineId(EnderDragon.class, EntityDataSerializers.INT);
     private static final TargetingConditions CRYSTAL_DESTROY_TARGETING = TargetingConditions.forCombat().range(64.0);
@@ -85,9 +99,10 @@
     private final EnderDragonPhaseManager phaseManager;
     private int growlTime = 100;
     private float sittingDamageReceived;
-    private final Node[] nodes = new Node[24];
-    private final int[] nodeAdjacency = new int[24];
-    private final BinaryHeap openSet = new BinaryHeap();
+    private final Node[] nodes;
+    private final int[] nodeAdjacency;
+    private final BinaryHeap openSet;
+    private final Explosion explosionSource; // CraftBukkit - reusable source for CraftTNTPrimed.getSource()
 
     public EnderDragon(EntityType<? extends EnderDragon> entityType, Level level) {
         super(EntityType.ENDER_DRAGON, level);
@@ -104,6 +124,7 @@
         this.noPhysics = true;
         this.noCulling = true;
         this.phaseManager = new EnderDragonPhaseManager(this);
+        this.explosionSource = new Explosion(level, this, null, null, Double.NaN, Double.NaN, Double.NaN, Float.NaN, true, Explosion.Effect.DESTROY, ParticleTypes.EXPLOSION, ParticleTypes.EXPLOSION_EMITTER, SoundEvents.GENERIC_EXPLODE); // CraftBukkit
     }
 
     public void setDragonFight(EndDragonFight dragonFight) {
@@ -250,16 +270,18 @@
                         currentPhase.doServerTick();
                     }
 
-                    Vec3 flyTargetLocation = currentPhase.getFlyTargetLocation();
-                    if (flyTargetLocation != null) {
-                        double d = flyTargetLocation.x - this.getX();
-                        double d1 = flyTargetLocation.y - this.getY();
-                        double d2 = flyTargetLocation.z - this.getZ();
-                        double d3 = d * d + d1 * d1 + d2 * d2;
-                        float flySpeed = currentPhase.getFlySpeed();
-                        double squareRoot = Math.sqrt(d * d + d2 * d2);
-                        if (squareRoot > 0.0) {
-                            d1 = Mth.clamp(d1 / squareRoot, (double)(-flySpeed), (double)flySpeed);
+                    Vec3 vec3d1 = idragoncontroller.getFlyTargetLocation();
+
+                    if (vec3d1 != null && idragoncontroller.getPhase() != EnderDragonPhase.HOVERING) { // CraftBukkit - Don't move when hovering
+                        double d0 = vec3d1.x - this.getX();
+                        double d1 = vec3d1.y - this.getY();
+                        double d2 = vec3d1.z - this.getZ();
+                        double d3 = d0 * d0 + d1 * d1 + d2 * d2;
+                        float f6 = idragoncontroller.getFlySpeed();
+                        double d4 = Math.sqrt(d0 * d0 + d2 * d2);
+
+                        if (d4 > 0.0D) {
+                            d1 = Mth.clamp(d1 / d4, (double) (-f6), (double) f6);
                         }
 
                         this.setDeltaMovement(this.getDeltaMovement().add(0.0, d1 * 0.01, 0.0));
@@ -398,7 +413,14 @@
             if (this.nearestCrystal.isRemoved()) {
                 this.nearestCrystal = null;
             } else if (this.tickCount % 10 == 0 && this.getHealth() < this.getMaxHealth()) {
-                this.setHealth(this.getHealth() + 1.0F);
+                // CraftBukkit start
+                EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), 1.0F, EntityRegainHealthEvent.RegainReason.ENDER_CRYSTAL);
+                this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled()) {
+                    this.setHealth((float) (this.getHealth() + event.getAmount()));
+                }
+                // CraftBukkit end
             }
         }
 
@@ -459,15 +495,23 @@
         int floor5 = Mth.floor(area.maxZ);
         boolean flag = false;
         boolean flag1 = false;
+        // CraftBukkit start - Create a list to hold all the destroyed blocks
+        List<org.bukkit.block.Block> destroyedBlocks = new java.util.ArrayList<org.bukkit.block.Block>();
+        // CraftBukkit end
 
-        for (int i = floor; i <= floor3; i++) {
-            for (int i1 = floor1; i1 <= floor4; i1++) {
-                for (int i2 = floor2; i2 <= floor5; i2++) {
-                    BlockPos blockPos = new BlockPos(i, i1, i2);
-                    BlockState blockState = this.level().getBlockState(blockPos);
-                    if (!blockState.isAir() && !blockState.is(BlockTags.DRAGON_TRANSPARENT)) {
-                        if (this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && !blockState.is(BlockTags.DRAGON_IMMUNE)) {
-                            flag1 = this.level().removeBlock(blockPos, false) || flag1;
+        for (int k1 = i; k1 <= l; ++k1) {
+            for (int l1 = j; l1 <= i1; ++l1) {
+                for (int i2 = k; i2 <= j1; ++i2) {
+                    BlockPos blockposition = new BlockPos(k1, l1, i2);
+                    IBlockData iblockdata = this.level().getBlockState(blockposition);
+
+                    if (!iblockdata.isAir() && !iblockdata.is(BlockTags.DRAGON_TRANSPARENT)) {
+                        if (this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && !iblockdata.is(BlockTags.DRAGON_IMMUNE)) {
+                            // CraftBukkit start - Add blocks to list rather than destroying them
+                            // flag1 = this.level().removeBlock(blockposition, false) || flag1;
+                            flag1 = true;
+                            destroyedBlocks.add(CraftBlock.at(this.level(), blockposition));
+                            // CraftBukkit end
                         } else {
                             flag = true;
                         }
@@ -476,6 +520,51 @@
             }
         }
 
+        // CraftBukkit start - Set off an EntityExplodeEvent for the dragon exploding all these blocks
+        // SPIGOT-4882: don't fire event if nothing hit
+        if (!flag1) {
+            return flag;
+        }
+
+        org.bukkit.entity.Entity bukkitEntity = this.getBukkitEntity();
+        EntityExplodeEvent event = new EntityExplodeEvent(bukkitEntity, bukkitEntity.getLocation(), destroyedBlocks, 0F);
+        bukkitEntity.getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            // This flag literally means 'Dragon hit something hard' (Obsidian, White Stone or Bedrock) and will cause the dragon to slow down.
+            // We should consider adding an event extension for it, or perhaps returning true if the event is cancelled.
+            return flag;
+        } else if (event.getYield() == 0F) {
+            // Yield zero ==> no drops
+            for (org.bukkit.block.Block block : event.blockList()) {
+                this.level().removeBlock(new BlockPos(block.getX(), block.getY(), block.getZ()), false);
+            }
+        } else {
+            for (org.bukkit.block.Block block : event.blockList()) {
+                org.bukkit.Material blockId = block.getType();
+                if (blockId.isAir()) {
+                    continue;
+                }
+
+                CraftBlock craftBlock = ((CraftBlock) block);
+                BlockPos blockposition = craftBlock.getPosition();
+
+                Block nmsBlock = craftBlock.getNMS().getBlock();
+                if (nmsBlock.dropFromExplosion(explosionSource)) {
+                    BlockEntity tileentity = craftBlock.getNMS().hasBlockEntity() ? this.level().getBlockEntity(blockposition) : null;
+                    LootParams.Builder loottableinfo_builder = (new LootParams.Builder((ServerLevel) this.level())).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockposition)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withParameter(LootContextParams.EXPLOSION_RADIUS, 1.0F / event.getYield()).withOptionalParameter(LootContextParams.BLOCK_ENTITY, tileentity);
+
+                    craftBlock.getNMS().getDrops(loottableinfo_builder).forEach((itemstack) -> {
+                        Block.popResource(this.level(), blockposition, itemstack);
+                    });
+                    craftBlock.getNMS().spawnAfterBreak((ServerLevel) this.level(), blockposition, ItemStack.EMPTY, false);
+                }
+                nmsBlock.wasExploded(this.level(), blockposition, explosionSource);
+
+                this.level().removeBlock(blockposition, false);
+            }
+        }
+        // CraftBukkit end
+
         if (flag1) {
             BlockPos blockPos1 = new BlockPos(
                 floor + this.random.nextInt(floor3 - floor + 1),
@@ -541,7 +629,22 @@
         }
     }
 
+    // CraftBukkit start - SPIGOT-2420: Special case, the ender dragon drops 12000 xp for the first kill and 500 xp for every other kill and this over time.
     @Override
+    public int getExpReward() {
+        // CraftBukkit - Moved from #tickDeath method
+        boolean flag = this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT);
+        short short0 = 500;
+
+        if (this.dragonFight != null && !this.dragonFight.hasPreviouslyKilledDragon()) {
+            short0 = 12000;
+        }
+
+        return flag ? short0 : 0;
+    }
+    // CraftBukkit end
+
+    @Override
     protected void tickDeath() {
         if (this.dragonFight != null) {
             this.dragonFight.updateDragon(this);
@@ -556,15 +659,21 @@
                 .addParticle(ParticleTypes.EXPLOSION_EMITTER, this.getX() + (double)f, this.getY() + 2.0 + (double)f1, this.getZ() + (double)f2, 0.0, 0.0, 0.0);
         }
 
-        boolean _boolean = this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT);
-        int i = 500;
+        // CraftBukkit start - SPIGOT-2420: Moved up to #getExpReward method
+        /*
+        boolean flag = this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT);
+        short short0 = 500;
+
         if (this.dragonFight != null && !this.dragonFight.hasPreviouslyKilledDragon()) {
             i = 12000;
         }
+        */
+        int short0 = expToDrop;
+        // CraftBukkit end
 
         if (this.level() instanceof ServerLevel) {
-            if (this.dragonDeathTime > 150 && this.dragonDeathTime % 5 == 0 && _boolean) {
-                ExperienceOrb.award((ServerLevel)this.level(), this.position(), Mth.floor((float)i * 0.08F));
+            if (this.dragonDeathTime > 150 && this.dragonDeathTime % 5 == 0 && true) {  // CraftBukkit - SPIGOT-2420: Already checked for the game rule when calculating the xp
+                ExperienceOrb.award((ServerLevel) this.level(), this.position(), Mth.floor((float) short0 * 0.08F));
             }
 
             if (this.dragonDeathTime == 1 && !this.isSilent()) {
@@ -574,8 +683,8 @@
 
         this.move(MoverType.SELF, new Vec3(0.0, 0.1F, 0.0));
         if (this.dragonDeathTime == 200 && this.level() instanceof ServerLevel) {
-            if (_boolean) {
-                ExperienceOrb.award((ServerLevel)this.level(), this.position(), Mth.floor((float)i * 0.2F));
+            if (true) { // CraftBukkit - SPIGOT-2420: Already checked for the game rule when calculating the xp
+                ExperienceOrb.award((ServerLevel) this.level(), this.position(), Mth.floor((float) short0 * 0.2F));
             }
 
             if (this.dragonFight != null) {
@@ -767,6 +904,7 @@
         super.addAdditionalSaveData(compound);
         compound.putInt("DragonPhase", this.phaseManager.getCurrentPhase().getPhase().getId());
         compound.putInt("DragonDeathTime", this.dragonDeathTime);
+        compound.putInt("Bukkit.expToDrop", expToDrop); // CraftBukkit - SPIGOT-2420: The ender dragon drops xp over time which can also happen between server starts
     }
 
     @Override
@@ -779,6 +917,12 @@
         if (compound.contains("DragonDeathTime")) {
             this.dragonDeathTime = compound.getInt("DragonDeathTime");
         }
+
+        // CraftBukkit start - SPIGOT-2420: The ender dragon drops xp over time which can also happen between server starts
+        if (compound.contains("Bukkit.expToDrop")) {
+            this.expToDrop = compound.getInt("Bukkit.expToDrop");
+        }
+        // CraftBukkit end
     }
 
     @Override
