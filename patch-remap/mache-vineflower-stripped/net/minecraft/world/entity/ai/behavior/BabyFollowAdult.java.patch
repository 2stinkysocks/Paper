--- a/net/minecraft/world/entity/ai/behavior/BabyFollowAdult.java
+++ b/net/minecraft/world/entity/ai/behavior/BabyFollowAdult.java
@@ -9,6 +7,12 @@
 import net.minecraft.world.entity.ai.behavior.declarative.MemoryAccessor;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.WalkTarget;
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+// CraftBukkit end
 
 public class BabyFollowAdult {
     public static OneShot<AgeableMob> create(UniformInt followRange, float speedModifier) {
@@ -16,33 +25,37 @@
     }
 
     public static OneShot<AgeableMob> create(UniformInt followRange, Function<LivingEntity, Float> speedModifier) {
-        return BehaviorBuilder.create(
-            instance -> instance.group(
-                        instance.present(MemoryModuleType.NEAREST_VISIBLE_ADULT),
-                        instance.registered(MemoryModuleType.LOOK_TARGET),
-                        instance.absent(MemoryModuleType.WALK_TARGET)
-                    )
-                    .apply(
-                        instance,
-                        (nearestVisibleAdult, lookTarget, walkTarget) -> (level, mob, gameTime) -> {
-                                if (!mob.isBaby()) {
-                                    return false;
-                                } else {
-                                    AgeableMob ageableMob = instance.get(nearestVisibleAdult);
-                                    if (mob.closerThan(ageableMob, (double)(followRange.getMaxValue() + 1))
-                                        && !mob.closerThan(ageableMob, (double)followRange.getMinValue())) {
-                                        WalkTarget walkTarget1 = new WalkTarget(
-                                            new EntityTracker(ageableMob, false), speedModifier.apply(mob), followRange.getMinValue() - 1
-                                        );
-                                        lookTarget.set(new EntityTracker(ageableMob, true));
-                                        walkTarget.set(walkTarget1);
-                                        return true;
-                                    } else {
-                                        return false;
-                                    }
-                                }
+        return BehaviorBuilder.create((behaviorbuilder_b) -> {
+            return behaviorbuilder_b.group(behaviorbuilder_b.present(MemoryModuleType.NEAREST_VISIBLE_ADULT), behaviorbuilder_b.registered(MemoryModuleType.LOOK_TARGET), behaviorbuilder_b.absent(MemoryModuleType.WALK_TARGET)).apply(behaviorbuilder_b, (memoryaccessor, memoryaccessor1, memoryaccessor2) -> {
+                return (worldserver, entityageable, i) -> {
+                    if (!entityageable.isBaby()) {
+                        return false;
+                    } else {
+                        LivingEntity entityageable1 = (AgeableMob) behaviorbuilder_b.get(memoryaccessor); // CraftBukkit - type
+
+                        if (entityageable.closerThan(entityageable1, (double) (followRange.getMaxValue() + 1)) && !entityageable.closerThan(entityageable1, (double) followRange.getMinValue())) {
+                            // CraftBukkit start
+                            EntityTargetLivingEntityEvent event = CraftEventFactory.callEntityTargetLivingEvent(entityageable, entityageable1, EntityTargetEvent.TargetReason.FOLLOW_LEADER);
+                            if (event.isCancelled()) {
+                                return false;
                             }
-                    )
-        );
+                            if (event.getTarget() == null) {
+                                memoryaccessor.erase();
+                                return true;
+                            }
+                            entityageable1 = ((CraftLivingEntity) event.getTarget()).getHandle();
+                            // CraftBukkit end
+                            WalkTarget memorytarget = new WalkTarget(new EntityTracker(entityageable1, false), (Float) speedModifier.apply(entityageable), followRange.getMinValue() - 1);
+
+                            memoryaccessor1.set(new EntityTracker(entityageable1, true));
+                            memoryaccessor2.set(memorytarget);
+                            return true;
+                        } else {
+                            return false;
+                        }
+                    }
+                };
+            });
+        });
     }
 }
