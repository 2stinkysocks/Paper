--- a/net/minecraft/world/entity/ai/behavior/StopAttackingIfTargetInvalid.java
+++ b/net/minecraft/world/entity/ai/behavior/StopAttackingIfTargetInvalid.java
@@ -10,6 +8,12 @@
 import net.minecraft.world.entity.ai.behavior.declarative.MemoryAccessor;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+// CraftBukkit end
+
 public class StopAttackingIfTargetInvalid {
     private static final int TIMEOUT_TO_GET_WITHIN_ATTACK_RANGE = 200;
 
@@ -27,29 +38,34 @@
         }, true);
     }
 
-    public static <E extends Mob> BehaviorControl<E> create(
-        Predicate<LivingEntity> canStopAttacking, BiConsumer<E, LivingEntity> onStopAttacking, boolean canGrowTiredOfTryingToReachTarget
-    ) {
-        return BehaviorBuilder.create(
-            instance -> instance.group(instance.present(MemoryModuleType.ATTACK_TARGET), instance.registered(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE))
-                    .apply(
-                        instance,
-                        (attackTarget, cantReachWalkTargetSince) -> (level, mob, gameTime) -> {
-                                LivingEntity livingEntity = instance.get(attackTarget);
-                                if (mob.canAttack(livingEntity)
-                                    && (!canGrowTiredOfTryingToReachTarget || !isTiredOfTryingToReachTarget(mob, instance.tryGet(cantReachWalkTargetSince)))
-                                    && livingEntity.isAlive()
-                                    && livingEntity.level() == mob.level()
-                                    && !canStopAttacking.test(livingEntity)) {
-                                    return true;
-                                } else {
-                                    onStopAttacking.accept(mob, livingEntity);
-                                    attackTarget.erase();
-                                    return true;
-                                }
-                            }
-                    )
-        );
+    public static <E extends Mob> BehaviorControl<E> create(Predicate<LivingEntity> canStopAttacking, BiConsumer<E, LivingEntity> onStopAttacking, boolean canGrowTiredOfTryingToReachTarget) {
+        return BehaviorBuilder.create((behaviorbuilder_b) -> {
+            return behaviorbuilder_b.group(behaviorbuilder_b.present(MemoryModuleType.ATTACK_TARGET), behaviorbuilder_b.registered(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE)).apply(behaviorbuilder_b, (memoryaccessor, memoryaccessor1) -> {
+                return (worldserver, entityinsentient, i) -> {
+                    LivingEntity entityliving = (LivingEntity) behaviorbuilder_b.get(memoryaccessor);
+
+                    if (entityinsentient.canAttack(entityliving) && (!canGrowTiredOfTryingToReachTarget || !isTiredOfTryingToReachTarget(entityinsentient, behaviorbuilder_b.tryGet(memoryaccessor1))) && entityliving.isAlive() && entityliving.level() == entityinsentient.level() && !canStopAttacking.test(entityliving)) {
+                        return true;
+                    } else {
+                        // CraftBukkit start
+                        LivingEntity old = entityinsentient.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null);
+                        EntityTargetEvent event = CraftEventFactory.callEntityTargetLivingEvent(entityinsentient, null, (old != null && !old.isAlive()) ? EntityTargetEvent.TargetReason.TARGET_DIED : EntityTargetEvent.TargetReason.FORGOT_TARGET);
+                        if (event.isCancelled()) {
+                            return false;
+                        }
+                        if (event.getTarget() == null) {
+                            memoryaccessor.erase();
+                            return true;
+                        }
+                        entityliving = ((CraftLivingEntity) event.getTarget()).getHandle();
+                        // CraftBukkit end
+                        onStopAttacking.accept(entityinsentient, entityliving);
+                        memoryaccessor.erase();
+                        return true;
+                    }
+                };
+            });
+        });
     }
 
     private static boolean isTiredOfTryingToReachTarget(LivingEntity entity, Optional<Long> timeSinceInvalidTarget) {
