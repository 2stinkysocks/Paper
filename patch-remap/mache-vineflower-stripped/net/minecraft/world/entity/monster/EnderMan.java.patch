--- a/net/minecraft/world/entity/monster/EnderMan.java
+++ b/net/minecraft/world/entity/monster/EnderMan.java
@@ -70,6 +71,11 @@
 import net.minecraft.world.phys.Vec3;
 import org.joml.Vector3f;
 
+// CraftBukkit start;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+// CraftBukkit end
+
 public class EnderMan extends Monster implements NeutralMob {
     private static final UUID SPEED_MODIFIER_ATTACKING_UUID = UUID.fromString("020E0DFB-87AE-4653-9556-831010E291A0");
     private static final AttributeModifier SPEED_MODIFIER_ATTACKING = new AttributeModifier(
@@ -121,9 +120,20 @@
 
     @Override
     public void setTarget(@Nullable LivingEntity livingEntity) {
-        super.setTarget(livingEntity);
-        AttributeInstance attribute = this.getAttribute(Attributes.MOVEMENT_SPEED);
-        if (livingEntity == null) {
+        // CraftBukkit start - fire event
+        setTarget(livingEntity, EntityTargetEvent.TargetReason.UNKNOWN, true);
+    }
+
+    @Override
+    public boolean setTarget(LivingEntity entityliving, EntityTargetEvent.TargetReason reason, boolean fireEvent) {
+        if (!super.setTarget(entityliving, reason, fireEvent)) {
+            return false;
+        }
+        entityliving = getTarget();
+        // CraftBukkit end
+        AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
+
+        if (entityliving == null) {
             this.targetChangeTime = 0;
             this.entityData.set(DATA_CREEPY, false);
             this.entityData.set(DATA_STARED_AT, false);
@@ -474,22 +495,25 @@
 
         @Override
         public void tick() {
-            RandomSource random = this.enderman.getRandom();
-            Level level = this.enderman.level();
-            int floor = Mth.floor(this.enderman.getX() - 1.0 + random.nextDouble() * 2.0);
-            int floor1 = Mth.floor(this.enderman.getY() + random.nextDouble() * 2.0);
-            int floor2 = Mth.floor(this.enderman.getZ() - 1.0 + random.nextDouble() * 2.0);
-            BlockPos blockPos = new BlockPos(floor, floor1, floor2);
-            BlockState blockState = level.getBlockState(blockPos);
-            BlockPos blockPos1 = blockPos.below();
-            BlockState blockState1 = level.getBlockState(blockPos1);
-            BlockState carriedBlock = this.enderman.getCarriedBlock();
-            if (carriedBlock != null) {
-                BlockState var11 = Block.updateFromNeighbourShapes(carriedBlock, this.enderman.level(), blockPos);
-                if (this.canPlaceBlock(level, blockPos, var11, blockState, blockState1, blockPos1)) {
-                    level.setBlock(blockPos, var11, 3);
-                    level.gameEvent(GameEvent.BLOCK_PLACE, blockPos, GameEvent.Context.of(this.enderman, var11));
-                    this.enderman.setCarriedBlock(null);
+            RandomSource randomsource = this.enderman.getRandom();
+            Level world = this.enderman.level();
+            int i = Mth.floor(this.enderman.getX() - 1.0D + randomsource.nextDouble() * 2.0D);
+            int j = Mth.floor(this.enderman.getY() + randomsource.nextDouble() * 2.0D);
+            int k = Mth.floor(this.enderman.getZ() - 1.0D + randomsource.nextDouble() * 2.0D);
+            BlockPos blockposition = new BlockPos(i, j, k);
+            IBlockData iblockdata = world.getBlockState(blockposition);
+            BlockPos blockposition1 = blockposition.below();
+            IBlockData iblockdata1 = world.getBlockState(blockposition1);
+            IBlockData iblockdata2 = this.enderman.getCarriedBlock();
+
+            if (iblockdata2 != null) {
+                iblockdata2 = Block.updateFromNeighbourShapes(iblockdata2, this.enderman.level(), blockposition);
+                if (this.canPlaceBlock(world, blockposition, iblockdata2, iblockdata, iblockdata1, blockposition1)) {
+                    if (CraftEventFactory.callEntityChangeBlockEvent(this.enderman, blockposition, iblockdata2)) { // CraftBukkit - Place event
+                    world.setBlock(blockposition, iblockdata2, 3);
+                    world.gameEvent(GameEvent.BLOCK_PLACE, blockposition, GameEvent.Context.of(this.enderman, iblockdata2));
+                    this.enderman.setCarriedBlock((IBlockData) null);
+                    } // CraftBukkit
                 }
             }
         }
@@ -513,6 +527,44 @@
 
     static class EndermanLookForPlayerGoal extends NearestAttackableTargetGoal<Player> {
         private final EnderMan enderman;
+
+        public EndermanTakeBlockGoal(EnderMan enderman) {
+            this.enderman = enderman;
+        }
+
+        @Override
+        public boolean canUse() {
+            return this.enderman.getCarriedBlock() != null ? false : (!this.enderman.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) ? false : this.enderman.getRandom().nextInt(reducedTickDelay(20)) == 0);
+        }
+
+        @Override
+        public void tick() {
+            RandomSource randomsource = this.enderman.getRandom();
+            Level world = this.enderman.level();
+            int i = Mth.floor(this.enderman.getX() - 2.0D + randomsource.nextDouble() * 4.0D);
+            int j = Mth.floor(this.enderman.getY() + randomsource.nextDouble() * 3.0D);
+            int k = Mth.floor(this.enderman.getZ() - 2.0D + randomsource.nextDouble() * 4.0D);
+            BlockPos blockposition = new BlockPos(i, j, k);
+            IBlockData iblockdata = world.getBlockState(blockposition);
+            Vec3 vec3d = new Vec3((double) this.enderman.getBlockX() + 0.5D, (double) j + 0.5D, (double) this.enderman.getBlockZ() + 0.5D);
+            Vec3 vec3d1 = new Vec3((double) i + 0.5D, (double) j + 0.5D, (double) k + 0.5D);
+            BlockHitResult movingobjectpositionblock = world.clip(new ClipContext(vec3d, vec3d1, ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, this.enderman));
+            boolean flag = movingobjectpositionblock.getBlockPos().equals(blockposition);
+
+            if (iblockdata.is(BlockTags.ENDERMAN_HOLDABLE) && flag) {
+                if (CraftEventFactory.callEntityChangeBlockEvent(this.enderman, blockposition, Blocks.AIR.defaultBlockState())) { // CraftBukkit - Place event
+                world.removeBlock(blockposition, false);
+                world.gameEvent(GameEvent.BLOCK_DESTROY, blockposition, GameEvent.Context.of(this.enderman, iblockdata));
+                this.enderman.setCarriedBlock(iblockdata.getBlock().defaultBlockState());
+                } // CraftBukkit
+            }
+
+        }
+    }
+
+    private static class EndermanLookForPlayerGoal extends NearestAttackableTargetGoal<Player> {
+
+        private final EnderMan enderman;
         @Nullable
         private Player pendingTarget;
         private int aggroTime;
