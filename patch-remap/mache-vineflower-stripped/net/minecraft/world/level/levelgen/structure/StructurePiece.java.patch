--- a/net/minecraft/world/level/levelgen/structure/StructurePiece.java
+++ b/net/minecraft/world/level/levelgen/structure/StructurePiece.java
@@ -68,16 +57,14 @@
     }
 
     public StructurePiece(StructurePieceType type, CompoundTag tag) {
-        this(
-            type,
-            tag.getInt("GD"),
-            BoundingBox.CODEC
-                .parse(NbtOps.INSTANCE, tag.get("BB"))
-                .resultOrPartial(LOGGER::error)
-                .orElseThrow(() -> new IllegalArgumentException("Invalid boundingbox"))
-        );
-        int _int = tag.getInt("O");
-        this.setOrientation(_int == -1 ? null : Direction.from2DDataValue(_int));
+        // CraftBukkit start - decompile error
+        this(type, tag.getInt("GD"), (BoundingBox) BoundingBox.CODEC.parse(NbtOps.INSTANCE, tag.get("BB")).resultOrPartial(Objects.requireNonNull(StructurePiece.LOGGER)::error).orElseThrow(() -> {
+            return new IllegalArgumentException("Invalid boundingbox");
+        }));
+        // CraftBukkit end
+        int j = tag.getInt("O");
+
+        this.setOrientation(j == -1 ? null : Direction.from2DDataValue(j));
     }
 
     protected static BoundingBox makeBoundingBox(int x, int y, int z, Direction direction, int offsetX, int offsetY, int offsetZ) {
@@ -91,14 +76,20 @@
     }
 
     public final CompoundTag createTag(StructurePieceSerializationContext context) {
-        CompoundTag compoundTag = new CompoundTag();
-        compoundTag.putString("id", BuiltInRegistries.STRUCTURE_PIECE.getKey(this.getType()).toString());
-        BoundingBox.CODEC.encodeStart(NbtOps.INSTANCE, this.boundingBox).resultOrPartial(LOGGER::error).ifPresent(tag -> compoundTag.put("BB", tag));
-        Direction orientation = this.getOrientation();
-        compoundTag.putInt("O", orientation == null ? -1 : orientation.get2DDataValue());
-        compoundTag.putInt("GD", this.genDepth);
-        this.addAdditionalSaveData(context, compoundTag);
-        return compoundTag;
+        CompoundTag nbttagcompound = new CompoundTag();
+
+        nbttagcompound.putString("id", BuiltInRegistries.STRUCTURE_PIECE.getKey(this.getType()).toString());
+        // CraftBukkit start - decompile error
+        BoundingBox.CODEC.encodeStart(NbtOps.INSTANCE, this.boundingBox).resultOrPartial(Objects.requireNonNull(StructurePiece.LOGGER)::error).ifPresent((nbtbase) -> {
+             nbttagcompound.put("BB", nbtbase);
+        });
+        // CraftBukkit end
+        Direction enumdirection = this.getOrientation();
+
+        nbttagcompound.putInt("O", enumdirection == null ? -1 : enumdirection.get2DDataValue());
+        nbttagcompound.putInt("GD", this.genDepth);
+        this.addAdditionalSaveData(context, nbttagcompound);
+        return nbttagcompound;
     }
 
     protected abstract void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag);
@@ -190,11 +182,13 @@
                     blockstate = blockstate.rotate(this.rotation);
                 }
 
-                level.setBlock(worldPos, blockstate, 2);
-                FluidState fluidState = level.getFluidState(worldPos);
-                if (!fluidState.isEmpty()) {
-                    level.scheduleTick(worldPos, fluidState.getType(), 0);
+                level.setBlock(blockposition_mutableblockposition, blockstate, 2);
+                // CraftBukkit start - fluid handling is already done if we have a transformer generator access
+                if (level instanceof org.bukkit.craftbukkit.util.TransformerGeneratorAccess) {
+                    return;
                 }
+                // CraftBukkit end
+                FluidState fluid = level.getFluidState(blockposition_mutableblockposition);
 
                 if (SHAPE_CHECK_BLOCKS.contains(blockstate.getBlock())) {
                     level.getChunk(worldPos).markPosForPostprocessing(worldPos);
@@ -203,6 +202,38 @@
         }
     }
 
+    // CraftBukkit start
+    protected boolean placeCraftBlockEntity(ServerLevelAccessor worldAccess, BlockPos position, org.bukkit.craftbukkit.block.CraftBlockEntityState<?> craftBlockEntityState, int i) {
+        if (worldAccess instanceof org.bukkit.craftbukkit.util.TransformerGeneratorAccess transformerAccess) {
+            return transformerAccess.setCraftBlock(position, craftBlockEntityState, i);
+        }
+        boolean result = worldAccess.setBlock(position, craftBlockEntityState.getHandle(), i);
+        BlockEntity tileEntity = worldAccess.getBlockEntity(position);
+        if (tileEntity != null) {
+            tileEntity.load(craftBlockEntityState.getSnapshotNBT());
+        }
+        return result;
+    }
+
+    protected void placeCraftSpawner(ServerLevelAccessor worldAccess, BlockPos position, org.bukkit.entity.EntityType entityType, int i) {
+        // This method is used in structures that are generated by code and place spawners as they set the entity after the block was placed making it impossible for plugins to access that information
+        org.bukkit.craftbukkit.block.CraftCreatureSpawner spawner = (org.bukkit.craftbukkit.block.CraftCreatureSpawner) org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(position, Blocks.SPAWNER.defaultBlockState(), null);
+        spawner.setSpawnedType(entityType);
+        placeCraftBlockEntity(worldAccess, position, spawner, i);
+    }
+
+    protected void setCraftLootTable(ServerLevelAccessor worldAccess, BlockPos position, RandomSource randomSource, net.minecraft.resources.ResourceLocation loottableKey) {
+        // This method is used in structures that use data markers to a loot table to loot containers as otherwise plugins won't have access to that information.
+        net.minecraft.world.level.block.entity.BlockEntity tileEntity = worldAccess.getBlockEntity(position);
+        if (tileEntity instanceof net.minecraft.world.level.block.entity.RandomizableContainerBlockEntity tileEntityLootable) {
+            tileEntityLootable.setLootTable(loottableKey, randomSource.nextLong());
+            if (worldAccess instanceof org.bukkit.craftbukkit.util.TransformerGeneratorAccess transformerAccess) {
+                transformerAccess.setCraftBlock(position, (org.bukkit.craftbukkit.block.CraftBlockState) org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(position, tileEntity.getBlockState(), tileEntityLootable.saveWithFullMetadata()), 3);
+            }
+        }
+    }
+    // CraftBukkit end
+
     protected boolean canBeReplaced(LevelReader level, int x, int y, int z, BoundingBox box) {
         return true;
     }
@@ -431,11 +427,20 @@
                 state = reorient(level, pos, Blocks.CHEST.defaultBlockState());
             }
 
-            level.setBlock(pos, state, 2);
-            BlockEntity blockEntity = level.getBlockEntity(pos);
-            if (blockEntity instanceof ChestBlockEntity) {
-                ((ChestBlockEntity)blockEntity).setLootTable(lootTable, random.nextLong());
+            // CraftBukkit start
+            /*
+            worldaccess.setBlock(blockposition, iblockdata, 2);
+            TileEntity tileentity = worldaccess.getBlockEntity(blockposition);
+
+            if (tileentity instanceof TileEntityChest) {
+                ((TileEntityChest) tileentity).setLootTable(minecraftkey, randomsource.nextLong());
             }
+            */
+            org.bukkit.craftbukkit.block.CraftChest chestState = (org.bukkit.craftbukkit.block.CraftChest) org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(pos, state, null);
+            chestState.setLootTable(org.bukkit.Bukkit.getLootTable(org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(lootTable)));
+            chestState.setSeed(random.nextLong());
+            placeCraftBlockEntity(level, pos, chestState, 2);
+            // CraftBukkit end
 
             return true;
         } else {
@@ -443,17 +448,25 @@
         }
     }
 
-    protected boolean createDispenser(
-        WorldGenLevel level, BoundingBox box, RandomSource random, int x, int y, int z, Direction facing, ResourceLocation lootTable
-    ) {
-        BlockPos worldPos = this.getWorldPos(x, y, z);
-        if (box.isInside(worldPos) && !level.getBlockState(worldPos).is(Blocks.DISPENSER)) {
-            this.placeBlock(level, Blocks.DISPENSER.defaultBlockState().setValue(DispenserBlock.FACING, facing), x, y, z, box);
-            BlockEntity blockEntity = level.getBlockEntity(worldPos);
-            if (blockEntity instanceof DispenserBlockEntity) {
-                ((DispenserBlockEntity)blockEntity).setLootTable(lootTable, random.nextLong());
+    protected boolean createDispenser(WorldGenLevel level, BoundingBox box, RandomSource random, int x, int y, int z, Direction facing, ResourceLocation lootTable) {
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(x, y, z);
+
+        if (box.isInside(blockposition_mutableblockposition) && !level.getBlockState(blockposition_mutableblockposition).is(Blocks.DISPENSER)) {
+            // CraftBukkit start
+            /*
+            this.placeBlock(generatoraccessseed, (IBlockData) Blocks.DISPENSER.defaultBlockState().setValue(BlockDispenser.FACING, enumdirection), i, j, k, structureboundingbox);
+            TileEntity tileentity = generatoraccessseed.getBlockEntity(blockposition_mutableblockposition);
+
+            if (tileentity instanceof TileEntityDispenser) {
+                ((TileEntityDispenser) tileentity).setLootTable(minecraftkey, randomsource.nextLong());
             }
 
+            org.bukkit.craftbukkit.block.CraftDispenser dispenserState = (org.bukkit.craftbukkit.block.CraftDispenser) org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(blockposition_mutableblockposition, iblockdata, null);
+            dispenserState.setLootTable(org.bukkit.Bukkit.getLootTable(org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(lootTable)));
+            dispenserState.setSeed(random.nextLong());
+            placeCraftBlockEntity(level, blockposition_mutableblockposition, dispenserState, 2);
+            // CraftBukkit end
+
             return true;
         } else {
             return false;
