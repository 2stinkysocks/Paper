--- a/net/minecraft/world/level/levelgen/structure/structures/StrongholdPieces.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/StrongholdPieces.java
@@ -40,29 +40,17 @@
     private static final int LOWEST_Y_POSITION = 10;
     private static final boolean CHECK_AIR = true;
     public static final int MAGIC_START_Y = 64;
-    private static final StrongholdPieces.PieceWeight[] STRONGHOLD_PIECE_WEIGHTS = new StrongholdPieces.PieceWeight[]{
-        new StrongholdPieces.PieceWeight(StrongholdPieces.Straight.class, 40, 0),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.PrisonHall.class, 5, 5),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.LeftTurn.class, 20, 0),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.RightTurn.class, 20, 0),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.RoomCrossing.class, 10, 6),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.StraightStairsDown.class, 5, 5),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.StairsDown.class, 5, 5),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.FiveCrossing.class, 5, 4),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.ChestCorridor.class, 5, 4),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.Library.class, 10, 2) {
-            @Override
-            public boolean doPlace(int genDepth) {
-                return super.doPlace(genDepth) && genDepth > 4;
-            }
-        },
-        new StrongholdPieces.PieceWeight(StrongholdPieces.PortalRoom.class, 20, 1) {
-            @Override
-            public boolean doPlace(int genDepth) {
-                return super.doPlace(genDepth) && genDepth > 5;
-            }
-        }
-    };
+    private static final StrongholdPieces.PieceWeight[] STRONGHOLD_PIECE_WEIGHTS = new StrongholdPieces.PieceWeight[]{new StrongholdPieces.PieceWeight(StrongholdPieces.Straight.class, 40, 0), new StrongholdPieces.PieceWeight(StrongholdPieces.PrisonHall.class, 5, 5), new StrongholdPieces.PieceWeight(StrongholdPieces.LeftTurn.class, 20, 0), new StrongholdPieces.PieceWeight(StrongholdPieces.RightTurn.class, 20, 0), new StrongholdPieces.PieceWeight(StrongholdPieces.RoomCrossing.class, 10, 6), new StrongholdPieces.PieceWeight(StrongholdPieces.StraightStairsDown.class, 5, 5), new StrongholdPieces.PieceWeight(StrongholdPieces.StairsDown.class, 5, 5), new StrongholdPieces.PieceWeight(StrongholdPieces.FiveCrossing.class, 5, 4), new StrongholdPieces.PieceWeight(StrongholdPieces.ChestCorridor.class, 5, 4), new StrongholdPieces.PieceWeight(StrongholdPieces.Library.class, 10, 2) {
+                @Override
+                public boolean doPlace(int genDepth) {
+                    return super.doPlace(genDepth) && genDepth > 4;
+                }
+            }, new StrongholdPieces.PieceWeight(StrongholdPieces.PortalRoom.class, 20, 1) {
+                @Override
+                public boolean doPlace(int genDepth) {
+                    return super.doPlace(genDepth) && genDepth > 5;
+                }
+            } }; // CraftBukkit - fix decompile styling
     private static List<StrongholdPieces.PieceWeight> currentPieces;
     static Class<? extends StrongholdPieces.StrongholdPiece> imposedPiece;
     private static int totalWeight;
@@ -1460,14 +1054,98 @@
             this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING, 1, 1, 7);
             BlockState blockState = Blocks.COBBLESTONE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.SOUTH);
 
-            for (int i = 0; i < 6; i++) {
-                this.placeBlock(level, blockState, 1, 6 - i, 1 + i, box);
-                this.placeBlock(level, blockState, 2, 6 - i, 1 + i, box);
-                this.placeBlock(level, blockState, 3, 6 - i, 1 + i, box);
-                if (i < 5) {
-                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 5 - i, 1 + i, box);
-                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 5 - i, 1 + i, box);
-                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 5 - i, 1 + i, box);
+            this.generateBox(level, box, 1, 6, 1, 1, 6, 14, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 9, 6, 1, 9, 6, 14, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 2, 6, 1, 8, 6, 2, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 2, 6, 14, 8, 6, 14, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 1, 1, 1, 2, 1, 4, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 8, 1, 1, 9, 1, 4, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 1, 1, 1, 1, 1, 3, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
+            this.generateBox(level, box, 9, 1, 1, 9, 1, 3, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
+            this.generateBox(level, box, 3, 1, 8, 7, 1, 12, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 1, 9, 6, 1, 11, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true);
+
+            int i;
+
+            for (i = 3; i < 14; i += 2) {
+                this.generateBox(level, box, 0, 3, i, 0, 4, i, iblockdata, iblockdata, false);
+                this.generateBox(level, box, 10, 3, i, 10, 4, i, iblockdata, iblockdata, false);
+            }
+
+            for (i = 2; i < 9; i += 2) {
+                this.generateBox(level, box, i, 3, 15, i, 4, 15, iblockdata1, iblockdata1, false);
+            }
+
+            IBlockData iblockdata2 = (IBlockData) Blocks.STONE_BRICK_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.NORTH);
+
+            this.generateBox(level, box, 4, 1, 5, 6, 1, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 2, 6, 6, 2, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 3, 7, 6, 3, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+
+            for (int j = 4; j <= 6; ++j) {
+                this.placeBlock(level, iblockdata2, j, 1, 4, box);
+                this.placeBlock(level, iblockdata2, j, 2, 5, box);
+                this.placeBlock(level, iblockdata2, j, 3, 6, box);
+            }
+
+            IBlockData iblockdata3 = (IBlockData) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.NORTH);
+            IBlockData iblockdata4 = (IBlockData) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.SOUTH);
+            IBlockData iblockdata5 = (IBlockData) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.EAST);
+            IBlockData iblockdata6 = (IBlockData) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.WEST);
+            boolean flag1 = true;
+            boolean[] aboolean = new boolean[12];
+
+            for (int k = 0; k < aboolean.length; ++k) {
+                aboolean[k] = random.nextFloat() > 0.9F;
+                flag1 &= aboolean[k];
+            }
+
+            this.placeBlock(level, (IBlockData) iblockdata3.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[0]), 4, 3, 8, box);
+            this.placeBlock(level, (IBlockData) iblockdata3.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[1]), 5, 3, 8, box);
+            this.placeBlock(level, (IBlockData) iblockdata3.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[2]), 6, 3, 8, box);
+            this.placeBlock(level, (IBlockData) iblockdata4.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[3]), 4, 3, 12, box);
+            this.placeBlock(level, (IBlockData) iblockdata4.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[4]), 5, 3, 12, box);
+            this.placeBlock(level, (IBlockData) iblockdata4.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[5]), 6, 3, 12, box);
+            this.placeBlock(level, (IBlockData) iblockdata5.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[6]), 3, 3, 9, box);
+            this.placeBlock(level, (IBlockData) iblockdata5.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[7]), 3, 3, 10, box);
+            this.placeBlock(level, (IBlockData) iblockdata5.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[8]), 3, 3, 11, box);
+            this.placeBlock(level, (IBlockData) iblockdata6.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[9]), 7, 3, 9, box);
+            this.placeBlock(level, (IBlockData) iblockdata6.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[10]), 7, 3, 10, box);
+            this.placeBlock(level, (IBlockData) iblockdata6.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[11]), 7, 3, 11, box);
+            if (flag1) {
+                IBlockData iblockdata7 = Blocks.END_PORTAL.defaultBlockState();
+
+                this.placeBlock(level, iblockdata7, 4, 3, 9, box);
+                this.placeBlock(level, iblockdata7, 5, 3, 9, box);
+                this.placeBlock(level, iblockdata7, 6, 3, 9, box);
+                this.placeBlock(level, iblockdata7, 4, 3, 10, box);
+                this.placeBlock(level, iblockdata7, 5, 3, 10, box);
+                this.placeBlock(level, iblockdata7, 6, 3, 10, box);
+                this.placeBlock(level, iblockdata7, 4, 3, 11, box);
+                this.placeBlock(level, iblockdata7, 5, 3, 11, box);
+                this.placeBlock(level, iblockdata7, 6, 3, 11, box);
+            }
+
+            if (!this.hasPlacedSpawner) {
+                BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(5, 3, 6);
+
+                if (box.isInside(blockposition_mutableblockposition)) {
+                    this.hasPlacedSpawner = true;
+                    // CraftBukkit start
+                    /*
+                    generatoraccessseed.setBlock(blockposition_mutableblockposition, Blocks.SPAWNER.defaultBlockState(), 2);
+                    TileEntity tileentity = generatoraccessseed.getBlockEntity(blockposition_mutableblockposition);
+
+                    if (tileentity instanceof TileEntityMobSpawner) {
+                        TileEntityMobSpawner tileentitymobspawner = (TileEntityMobSpawner) tileentity;
+
+                        tileentitymobspawner.setEntityId(EntityTypes.SILVERFISH, randomsource);
+                    }
+                    */
+                    placeCraftSpawner(level, blockposition_mutableblockposition, org.bukkit.entity.EntityType.SILVERFISH, 2);
+                    // CraftBukkit end
                 }
             }
         }
