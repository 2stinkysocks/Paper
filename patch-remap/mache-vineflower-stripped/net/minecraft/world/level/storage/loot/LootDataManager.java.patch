--- a/net/minecraft/world/level/storage/loot/LootDataManager.java
+++ b/net/minecraft/world/level/storage/loot/LootDataManager.java
@@ -88,10 +94,22 @@
                 return (T)map.get(id);
             }
         });
-        map.forEach((id, element) -> castAndValidate(validationContext, id, element));
-        collector.get().forEach((errorOwner, errorMessage) -> LOGGER.warn("Found loot table element validation problem in {}: {}", errorOwner, errorMessage));
-        this.elements = map;
-        this.typeKeys = builder1.build();
+
+        map1.forEach((lootdataid, object1) -> {
+            castAndValidate(lootcollector, lootdataid, object1);
+        });
+        problemreporter_a.get().forEach((s, s1) -> {
+            LootDataManager.LOGGER.warn("Found loot table element validation problem in {}: {}", s, s1);
+        });
+        // CraftBukkit start
+        map1.forEach((key, lootTable) -> {
+            if (object instanceof LootTable table) {
+                table.craftLootTable = new CraftLootTable(CraftNamespacedKey.fromMinecraft(key.location()), table);
+            }
+        });
+        // CraftBukkit end
+        this.elements = map1;
+        this.typeKeys = com_google_common_collect_immutablemultimap_builder.build();
     }
 
     private static <T> void castAndValidate(ValidationContext context, LootDataId<T> id, Object element) {
