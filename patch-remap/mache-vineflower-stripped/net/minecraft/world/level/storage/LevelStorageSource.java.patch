--- a/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -151,14 +164,18 @@
     ) {
         Dynamic<?> dynamic1 = wrapWithRegistryOps(dynamic, frozen);
         Dynamic<?> dynamic2 = dynamic1.get("WorldGenSettings").orElseEmptyMap();
-        WorldGenSettings worldGenSettings = WorldGenSettings.CODEC.parse(dynamic2).getOrThrow(false, Util.prefix("WorldGenSettings: ", LOGGER::error));
-        LevelSettings levelSettings = LevelSettings.parse(dynamic1, worldDataConfiguration);
-        WorldDimensions.Complete complete = worldGenSettings.dimensions().bake(registry);
-        Lifecycle lifecycle = complete.lifecycle().add(frozen.allRegistriesLifecycle());
-        PrimaryLevelData primaryLevelData = PrimaryLevelData.parse(
-            dynamic1, levelSettings, complete.specialWorldProperty(), worldGenSettings.options(), lifecycle
-        );
-        return new LevelDataAndDimensions(primaryLevelData, complete);
+        DataResult dataresult = WorldGenSettings.CODEC.parse(dynamic2);
+        Logger logger = LevelStorageSource.LOGGER;
+
+        Objects.requireNonNull(logger);
+        WorldGenSettings generatorsettings = (WorldGenSettings) dataresult.getOrThrow(false, Util.prefix("WorldGenSettings: ", logger::error));
+        LevelSettings worldsettings = LevelSettings.parse(dynamic1, worlddataconfiguration);
+        WorldDimensions.b worlddimensions_b = generatorsettings.dimensions().bake(iregistry);
+        Lifecycle lifecycle = worlddimensions_b.lifecycle().add(iregistrycustom_dimension.allRegistriesLifecycle());
+        PrimaryLevelData worlddataserver = PrimaryLevelData.parse(dynamic1, worldsettings, worlddimensions_b.specialWorldProperty(), generatorsettings.options(), lifecycle);
+        worlddataserver.pdc = ((Dynamic<Tag>) dynamic1).getElement("BukkitValues", null); // CraftBukkit - Add PDC to world
+
+        return new LevelDataAndDimensions(worlddataserver, worlddimensions_b);
     }
 
     private static <T> Dynamic<T> wrapWithRegistryOps(Dynamic<T> dynamic, RegistryAccess.Frozen frozen) {
@@ -364,26 +423,43 @@
         return this.backupDir;
     }
 
-    public LevelStorageSource.LevelStorageAccess validateAndCreateAccess(String saveName) throws IOException, ContentValidationException {
-        Path levelPath = this.getLevelPath(saveName);
-        List<ForbiddenSymlinkInfo> list = this.worldDirValidator.validateDirectory(levelPath, true);
+    public LevelStorageSource.LevelStorageAccess validateAndCreateAccess(String s, ResourceKey<LevelStem> dimensionType) throws IOException, ContentValidationException { // CraftBukkit
+        Path path = this.getLevelPath(s);
+        List<ForbiddenSymlinkInfo> list = this.worldDirValidator.validateDirectory(path, true);
+
         if (!list.isEmpty()) {
             throw new ContentValidationException(levelPath, list);
         } else {
-            return new LevelStorageSource.LevelStorageAccess(saveName, levelPath);
+            return new LevelStorageSource.LevelStorageAccess(s, path, dimensionType); // CraftBukkit
         }
     }
 
-    public LevelStorageSource.LevelStorageAccess createAccess(String saveName) throws IOException {
-        Path levelPath = this.getLevelPath(saveName);
-        return new LevelStorageSource.LevelStorageAccess(saveName, levelPath);
+    public LevelStorageSource.LevelStorageAccess createAccess(String s, ResourceKey<LevelStem> dimensionType) throws IOException { // CraftBukkit
+        Path path = this.getLevelPath(s);
+
+        return new LevelStorageSource.LevelStorageAccess(s, path, dimensionType); // CraftBukkit
     }
 
     public DirectoryValidator getWorldDirValidator() {
         return this.worldDirValidator;
     }
 
-    public static record LevelCandidates(List<LevelStorageSource.LevelDirectory> levels) implements Iterable<LevelStorageSource.LevelDirectory> {
+    // CraftBukkit start
+    public static Path getStorageFolder(Path path, ResourceKey<LevelStem> dimensionType) {
+        if (dimensionType == LevelStem.OVERWORLD) {
+            return path;
+        } else if (dimensionType == LevelStem.NETHER) {
+            return path.resolve("DIM-1");
+        } else if (dimensionType == LevelStem.END) {
+            return path.resolve("DIM1");
+        } else {
+            return path.resolve("dimensions").resolve(dimensionType.location().getNamespace()).resolve(dimensionType.location().getPath());
+        }
+    }
+    // CraftBukkit end
+
+    public static record a(List<LevelStorageSource.LevelDirectory> levels) implements Iterable<LevelStorageSource.LevelDirectory> {
+
         public boolean isEmpty() {
             return this.levels.isEmpty();
         }
@@ -433,11 +516,15 @@
         final LevelStorageSource.LevelDirectory levelDirectory;
         private final String levelId;
         private final Map<LevelResource, Path> resources = Maps.newHashMap();
+        // CraftBukkit start
+        public final ResourceKey<LevelStem> dimensionType;
 
-        LevelStorageAccess(String levelId, Path levelDir) throws IOException {
-            this.levelId = levelId;
-            this.levelDirectory = new LevelStorageSource.LevelDirectory(levelDir);
-            this.lock = DirectoryLock.create(levelDir);
+        LevelStorageAccess(String s, Path path, ResourceKey<LevelStem> dimensionType) throws IOException {
+            this.dimensionType = dimensionType;
+            // CraftBukkit end
+            this.levelId = s;
+            this.levelDirectory = new LevelStorageSource.LevelDirectory(path);
+            this.lock = DirectoryLock.create(path);
         }
 
         public void safeClose() {
@@ -465,7 +557,7 @@
         }
 
         public Path getDimensionPath(ResourceKey<Level> dimensionPath) {
-            return DimensionType.getStorageFolder(dimensionPath, this.levelDirectory.path());
+            return getStorageFolder(this.levelDirectory.path(), this.dimensionType); // CraftBukkit
         }
 
         private void checkLock() {
