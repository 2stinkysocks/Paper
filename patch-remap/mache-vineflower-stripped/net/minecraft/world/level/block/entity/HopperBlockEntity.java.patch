--- a/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -29,6 +31,17 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.HopperInventorySearchEvent;
+import org.bukkit.event.inventory.InventoryMoveItemEvent;
+import org.bukkit.event.inventory.InventoryPickupItemEvent;
+import org.bukkit.inventory.Inventory;
+// CraftBukkit end
 
 public class HopperBlockEntity extends RandomizableContainerBlockEntity implements Hopper {
     public static final int MOVE_ITEM_SPEED = 8;
@@ -37,7 +51,37 @@
     private int cooldownTime = -1;
     private long tickedGameTime;
 
-    public HopperBlockEntity(BlockPos pos, BlockState blockState) {
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+    public HopperBlockEntity(BlockPos pos, IBlockData blockState) {
         super(BlockEntityType.HOPPER, pos, blockState);
     }
 
@@ -103,7 +154,7 @@
             if (!blockEntity.isOnCooldown() && state.getValue(HopperBlock.ENABLED)) {
                 boolean flag = false;
                 if (!blockEntity.isEmpty()) {
-                    flag = ejectItems(level, pos, state, blockEntity);
+                    flag = ejectItems(level, pos, state, (Container) blockEntity, blockEntity); // CraftBukkit
                 }
 
                 if (!blockEntity.inventoryFull()) {
@@ -131,21 +188,46 @@
         return true;
     }
 
-    private static boolean ejectItems(Level level, BlockPos pos, BlockState state, Container sourceContainer) {
-        Container attachedContainer = getAttachedContainer(level, pos, state);
-        if (attachedContainer == null) {
+    private static boolean ejectItems(Level world, BlockPos blockposition, IBlockData iblockdata, Container iinventory, HopperBlockEntity hopper) { // CraftBukkit
+        Container iinventory1 = getAttachedContainer(world, blockposition, iblockdata);
+
+        if (iinventory1 == null) {
             return false;
         } else {
             Direction opposite = state.getValue(HopperBlock.FACING).getOpposite();
             if (isFullContainer(attachedContainer, opposite)) {
                 return false;
             } else {
-                for (int i = 0; i < sourceContainer.getContainerSize(); i++) {
-                    if (!sourceContainer.getItem(i).isEmpty()) {
-                        ItemStack itemStack = sourceContainer.getItem(i).copy();
-                        ItemStack itemStack1 = addItem(sourceContainer, attachedContainer, sourceContainer.removeItem(i, 1), opposite);
-                        if (itemStack1.isEmpty()) {
-                            attachedContainer.setChanged();
+                for (int i = 0; i < iinventory.getContainerSize(); ++i) {
+                    if (!iinventory.getItem(i).isEmpty()) {
+                        ItemStack itemstack = iinventory.getItem(i).copy();
+                        // ItemStack itemstack1 = addItem(iinventory, iinventory1, iinventory.removeItem(i, 1), enumdirection);
+
+                        // CraftBukkit start - Call event when pushing items into other inventories
+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.removeItem(i, 1));
+
+                        Inventory destinationInventory;
+                        // Have to special case large chests as they work oddly
+                        if (iinventory1 instanceof CompoundContainer) {
+                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) iinventory1);
+                        } else if (iinventory1.getOwner() != null) {
+                            destinationInventory = iinventory1.getOwner().getInventory();
+                        } else {
+                            destinationInventory = new CraftInventory(iinventory);
+                        }
+
+                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(iinventory.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
+                        world.getCraftServer().getPluginManager().callEvent(event);
+                        if (event.isCancelled()) {
+                            hopper.setItem(i, itemstack);
+                            hopper.setCooldown(8); // Delay hopper checks
+                            return false;
+                        }
+                        ItemStack itemstack1 = addItem(iinventory, iinventory1, CraftItemStack.asNMSCopy(event.getItem()), enumdirection);
+                        // CraftBukkit end
+
+                        if (itemstack1.isEmpty()) {
+                            iinventory1.setChanged();
                             return true;
                         }
 
@@ -193,11 +286,40 @@
     }
 
     private static boolean tryTakeInItemFromSlot(Hopper hopper, Container container, int slot, Direction direction) {
-        ItemStack item = container.getItem(slot);
-        if (!item.isEmpty() && canTakeItemFromContainer(hopper, container, item, slot, direction)) {
-            ItemStack itemStack = item.copy();
-            ItemStack itemStack1 = addItem(container, hopper, container.removeItem(slot, 1), null);
-            if (itemStack1.isEmpty()) {
+        ItemStack itemstack = container.getItem(slot);
+
+        if (!itemstack.isEmpty() && canTakeItemFromContainer(hopper, container, itemstack, slot, direction)) {
+            ItemStack itemstack1 = itemstack.copy();
+            // ItemStack itemstack2 = addItem(iinventory, ihopper, iinventory.removeItem(i, 1), (EnumDirection) null);
+            // CraftBukkit start - Call event on collection of items from inventories into the hopper
+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(container.removeItem(slot, 1));
+
+            Inventory sourceInventory;
+            // Have to special case large chests as they work oddly
+            if (container instanceof CompoundContainer) {
+                sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) container);
+            } else if (container.getOwner() != null) {
+                sourceInventory = container.getOwner().getInventory();
+            } else {
+                sourceInventory = new CraftInventory(container);
+            }
+
+            InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, oitemstack.clone(), hopper.getOwner().getInventory(), false);
+
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                container.setItem(slot, itemstack1);
+
+                if (hopper instanceof HopperBlockEntity) {
+                    ((HopperBlockEntity) hopper).setCooldown(8); // Delay hopper checks
+                }
+
+                return false;
+            }
+            ItemStack itemstack2 = addItem(container, hopper, CraftItemStack.asNMSCopy(event.getItem()), null);
+            // CraftBukkit end
+
+            if (itemstack2.isEmpty()) {
                 container.setChanged();
                 return true;
             }
@@ -210,9 +332,17 @@
 
     public static boolean addItem(Container container, ItemEntity item) {
         boolean flag = false;
-        ItemStack itemStack = item.getItem().copy();
-        ItemStack itemStack1 = addItem(null, container, itemStack, null);
-        if (itemStack1.isEmpty()) {
+        // CraftBukkit start
+        InventoryPickupItemEvent event = new InventoryPickupItemEvent(container.getOwner().getInventory(), (org.bukkit.entity.Item) item.getBukkitEntity());
+        item.level().getCraftServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return false;
+        }
+        // CraftBukkit end
+        ItemStack itemstack = item.getItem().copy();
+        ItemStack itemstack1 = addItem((Container) null, container, itemstack, (Direction) null);
+
+        if (itemstack1.isEmpty()) {
             flag = true;
             item.setItem(ItemStack.EMPTY);
             item.discard();
@@ -301,15 +465,38 @@
         return stack;
     }
 
+    // CraftBukkit start
     @Nullable
     private static Container getAttachedContainer(Level level, BlockPos pos, BlockState state) {
         Direction direction = state.getValue(HopperBlock.FACING);
         return getContainerAt(level, pos.relative(direction));
     }
+    // CraftBukkit end
 
     @Nullable
+    private static Container getAttachedContainer(Level level, BlockPos pos, IBlockData state) {
+        Direction enumdirection = (Direction) state.getValue(HopperBlock.FACING);
+
+        // CraftBukkit start
+        BlockPos searchPosition = pos.relative(enumdirection);
+        Container inventory = getContainerAt(level, pos.relative(enumdirection));
+
+        CraftBlock hopper = CraftBlock.at(level, pos);
+        CraftBlock searchBlock = CraftBlock.at(level, searchPosition);
+        return runHopperInventorySearchEvent(inventory, hopper, searchBlock, HopperInventorySearchEvent.ContainerType.DESTINATION);
+        // CraftBukkit end
+    }
+
+    @Nullable
     private static Container getSourceContainer(Level level, Hopper hopper) {
-        return getContainerAt(level, hopper.getLevelX(), hopper.getLevelY() + 1.0, hopper.getLevelZ());
+        // CraftBukkit start
+        Container inventory = getContainerAt(level, hopper.getLevelX(), hopper.getLevelY() + 1.0D, hopper.getLevelZ());
+
+        BlockPos blockPosition = BlockPos.containing(hopper.getLevelX(), hopper.getLevelY(), hopper.getLevelZ());
+        CraftBlock hopper1 = CraftBlock.at(level, blockPosition);
+        CraftBlock container = CraftBlock.at(level, blockPosition.above());
+        return runHopperInventorySearchEvent(inventory, hopper1, container, HopperInventorySearchEvent.ContainerType.SOURCE);
+        // CraftBukkit end
     }
 
     public static List<ItemEntity> getItemsAtAndAbove(Level level, Hopper hopper) {
