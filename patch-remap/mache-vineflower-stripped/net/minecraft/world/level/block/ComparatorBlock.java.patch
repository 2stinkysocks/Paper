--- a/net/minecraft/world/level/block/ComparatorBlock.java
+++ b/net/minecraft/world/level/block/ComparatorBlock.java
@@ -27,6 +27,7 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.ticks.TickPriority;
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
 
 public class ComparatorBlock extends DiodeBlock implements EntityBlock {
     public static final MapCodec<ComparatorBlock> CODEC = simpleCodec(ComparatorBlock::new);
@@ -157,13 +162,24 @@
             comparatorBlockEntity.setOutputSignal(i);
         }
 
-        if (i1 != i || state.getValue(MODE) == ComparatorMode.COMPARE) {
-            boolean shouldTurnOn = this.shouldTurnOn(level, pos, state);
-            boolean flag = state.getValue(POWERED);
-            if (flag && !shouldTurnOn) {
-                level.setBlock(pos, state.setValue(POWERED, Boolean.valueOf(false)), 2);
-            } else if (!flag && shouldTurnOn) {
-                level.setBlock(pos, state.setValue(POWERED, Boolean.valueOf(true)), 2);
+        if (j != i || state.getValue(ComparatorBlock.MODE) == ComparatorMode.COMPARE) {
+            boolean flag = this.shouldTurnOn(level, pos, state);
+            boolean flag1 = (Boolean) state.getValue(ComparatorBlock.POWERED);
+
+            if (flag1 && !flag) {
+                // CraftBukkit start
+                if (CraftEventFactory.callRedstoneChange(level, pos, 15, 0).getNewCurrent() != 0) {
+                    return;
+                }
+                // CraftBukkit end
+                level.setBlock(pos, (IBlockData) state.setValue(ComparatorBlock.POWERED, false), 2);
+            } else if (!flag1 && flag) {
+                // CraftBukkit start
+                if (CraftEventFactory.callRedstoneChange(level, pos, 0, 15).getNewCurrent() != 15) {
+                    return;
+                }
+                // CraftBukkit end
+                level.setBlock(pos, (IBlockData) state.setValue(ComparatorBlock.POWERED, true), 2);
             }
 
             this.updateNeighborsInFront(level, pos, state);
