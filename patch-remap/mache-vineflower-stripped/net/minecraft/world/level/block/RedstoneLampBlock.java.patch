--- a/net/minecraft/world/level/block/RedstoneLampBlock.java
+++ b/net/minecraft/world/level/block/RedstoneLampBlock.java
@@ -11,6 +11,7 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
 
 public class RedstoneLampBlock extends Block {
     public static final MapCodec<RedstoneLampBlock> CODEC = simpleCodec(RedstoneLampBlock::new);
@@ -40,16 +43,26 @@
                 if (flag) {
                     level.scheduleTick(pos, this, 4);
                 } else {
-                    level.setBlock(pos, state.cycle(LIT), 2);
+                    // CraftBukkit start
+                    if (CraftEventFactory.callRedstoneChange(level, pos, 0, 15).getNewCurrent() != 15) {
+                        return;
+                    }
+                    // CraftBukkit end
+                    level.setBlock(pos, (IBlockData) state.cycle(RedstoneLampBlock.LIT), 2);
                 }
             }
         }
     }
 
     @Override
-    public void tick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
-        if (state.getValue(LIT) && !level.hasNeighborSignal(pos)) {
-            level.setBlock(pos, state.cycle(LIT), 2);
+    public void tick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
+        if ((Boolean) state.getValue(RedstoneLampBlock.LIT) && !level.hasNeighborSignal(pos)) {
+            // CraftBukkit start
+            if (CraftEventFactory.callRedstoneChange(level, pos, 15, 0).getNewCurrent() != 0) {
+                return;
+            }
+            // CraftBukkit end
+            level.setBlock(pos, (IBlockData) state.cycle(RedstoneLampBlock.LIT), 2);
         }
     }
 
