--- a/net/minecraft/world/level/portal/PortalForcer.java
+++ b/net/minecraft/world/level/portal/PortalForcer.java
@@ -41,42 +42,56 @@
     }
 
     public Optional<BlockUtil.FoundRectangle> findPortalAround(BlockPos pos, boolean isNether, WorldBorder worldBorder) {
-        PoiManager poiManager = this.level.getPoiManager();
-        int i = isNether ? 16 : 128;
-        poiManager.ensureLoadedAndValid(this.level, pos, i);
-        Optional<PoiRecord> optional = poiManager.getInSquare(poiType -> poiType.is(PoiTypes.NETHER_PORTAL), pos, i, PoiManager.Occupancy.ANY)
-            .filter(poiRecord -> worldBorder.isWithinBounds(poiRecord.getPos()))
-            .sorted(
-                Comparator.<PoiRecord>comparingDouble(poiRecord -> poiRecord.getPos().distSqr(pos)).thenComparingInt(poiRecord -> poiRecord.getPos().getY())
-            )
-            .filter(poiRecord -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS))
-            .findFirst();
-        return optional.map(
-            poiRecord -> {
-                BlockPos pos1 = poiRecord.getPos();
-                this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(pos1), 3, pos1);
-                BlockState blockState = this.level.getBlockState(pos1);
-                return BlockUtil.getLargestRectangleAround(
-                    pos1,
-                    blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS),
-                    21,
-                    Direction.Axis.Y,
-                    21,
-                    possibleBlockPos -> this.level.getBlockState(possibleBlockPos) == blockState
-                );
-            }
-        );
+        // CraftBukkit start
+        return findPortalAround(pos, worldBorder, isNether ? 16 : 128); // Search Radius
     }
 
+    public Optional<BlockUtil.FoundRectangle> findPortalAround(BlockPos blockposition, WorldBorder worldborder, int i) {
+        PoiManager villageplace = this.level.getPoiManager();
+        // int i = flag ? 16 : 128;
+        // CraftBukkit end
+
+        villageplace.ensureLoadedAndValid(this.level, blockposition, i);
+        Optional<PoiRecord> optional = villageplace.getInSquare((holder) -> {
+            return holder.is(PoiTypes.NETHER_PORTAL);
+        }, blockposition, i, PoiManager.Occupancy.ANY).filter((villageplacerecord) -> {
+            return worldborder.isWithinBounds(villageplacerecord.getPos());
+        }).sorted(Comparator.comparingDouble((PoiRecord villageplacerecord) -> { // CraftBukkit - decompile error
+            return villageplacerecord.getPos().distSqr(blockposition);
+        }).thenComparingInt((villageplacerecord) -> {
+            return villageplacerecord.getPos().getY();
+        })).filter((villageplacerecord) -> {
+            return this.level.getBlockState(villageplacerecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS);
+        }).findFirst();
+
+        return optional.map((villageplacerecord) -> {
+            BlockPos blockposition1 = villageplacerecord.getPos();
+
+            this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockposition1), 3, blockposition1);
+            IBlockData iblockdata = this.level.getBlockState(blockposition1);
+
+            return BlockUtil.getLargestRectangleAround(blockposition1, (Direction.Axis) iblockdata.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockposition2) -> {
+                return this.level.getBlockState(blockposition2) == iblockdata;
+            });
+        });
+    }
+
     public Optional<BlockUtil.FoundRectangle> createPortal(BlockPos pos, Direction.Axis axis) {
-        Direction direction = Direction.get(Direction.AxisDirection.POSITIVE, axis);
-        double d = -1.0;
-        BlockPos blockPos = null;
-        double d1 = -1.0;
-        BlockPos blockPos1 = null;
-        WorldBorder worldBorder = this.level.getWorldBorder();
+        // CraftBukkit start
+        return this.createPortal(pos, axis, null, 16);
+    }
+
+    public Optional<BlockUtil.FoundRectangle> createPortal(BlockPos blockposition, Direction.Axis enumdirection_enumaxis, net.minecraft.world.entity.Entity entity, int createRadius) {
+        // CraftBukkit end
+        Direction enumdirection = Direction.get(Direction.AxisDirection.POSITIVE, enumdirection_enumaxis);
+        double d0 = -1.0D;
+        BlockPos blockposition1 = null;
+        double d1 = -1.0D;
+        BlockPos blockposition2 = null;
+        WorldBorder worldborder = this.level.getWorldBorder();
         int i = Math.min(this.level.getMaxBuildHeight(), this.level.getMinBuildHeight() + this.level.getLogicalHeight()) - 1;
-        BlockPos.MutableBlockPos mutableBlockPos = pos.mutable();
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = blockposition.mutable();
+        Iterator iterator = BlockPos.spiralAround(blockposition, createRadius, Direction.EAST, Direction.SOUTH).iterator(); // CraftBukkit
 
         for (BlockPos.MutableBlockPos mutableBlockPos1 : BlockPos.spiralAround(pos, 16, Direction.EAST, Direction.SOUTH)) {
             int min = Math.min(i, this.level.getHeight(Heightmap.Types.MOTION_BLOCKING, mutableBlockPos1.getX(), mutableBlockPos1.getZ()));
@@ -123,10 +143,14 @@
             d = d1;
         }
 
-        if (d == -1.0) {
-            int max = Math.max(this.level.getMinBuildHeight() - -1, 70);
-            int i5 = i - 9;
-            if (i5 < max) {
+        int j1;
+        int k1;
+
+        org.bukkit.craftbukkit.util.BlockStateListPopulator blockList = new org.bukkit.craftbukkit.util.BlockStateListPopulator(this.level); // CraftBukkit - Use BlockStateListPopulator
+        if (d0 == -1.0D) {
+            j1 = Math.max(this.level.getMinBuildHeight() - -1, 70);
+            k1 = i - 9;
+            if (k1 < j1) {
                 return Optional.empty();
             }
 
@@ -136,38 +161,47 @@
                 return Optional.empty();
             }
 
-            for (int i1 = -1; i1 < 2; i1++) {
-                for (int i2x = 0; i2x < 2; i2x++) {
-                    for (int i3 = -1; i3 < 3; i3++) {
-                        BlockState blockState = i3 < 0 ? Blocks.OBSIDIAN.defaultBlockState() : Blocks.AIR.defaultBlockState();
-                        mutableBlockPos.setWithOffset(
-                            blockPos, i2x * direction.getStepX() + i1 * clockWise.getStepX(), i3, i2x * direction.getStepZ() + i1 * clockWise.getStepZ()
-                        );
-                        this.level.setBlockAndUpdate(mutableBlockPos, blockState);
+            for (int l1 = -1; l1 < 2; ++l1) {
+                for (k = 0; k < 2; ++k) {
+                    for (l = -1; l < 3; ++l) {
+                        IBlockData iblockdata = l < 0 ? Blocks.OBSIDIAN.defaultBlockState() : Blocks.AIR.defaultBlockState();
+
+                        blockposition_mutableblockposition.setWithOffset(blockposition1, k * enumdirection.getStepX() + l1 * enumdirection1.getStepX(), l, k * enumdirection.getStepZ() + l1 * enumdirection1.getStepZ());
+                        blockList.setBlock(blockposition_mutableblockposition, iblockdata, 3); // CraftBukkit
                     }
                 }
             }
         }
 
-        for (int maxx = -1; maxx < 3; maxx++) {
-            for (int i5x = -1; i5x < 4; i5x++) {
-                if (maxx == -1 || maxx == 2 || i5x == -1 || i5x == 3) {
-                    mutableBlockPos.setWithOffset(blockPos, maxx * direction.getStepX(), i5x, maxx * direction.getStepZ());
-                    this.level.setBlock(mutableBlockPos, Blocks.OBSIDIAN.defaultBlockState(), 3);
+        for (j1 = -1; j1 < 3; ++j1) {
+            for (k1 = -1; k1 < 4; ++k1) {
+                if (j1 == -1 || j1 == 2 || k1 == -1 || k1 == 3) {
+                    blockposition_mutableblockposition.setWithOffset(blockposition1, j1 * enumdirection.getStepX(), k1, j1 * enumdirection.getStepZ());
+                    blockList.setBlock(blockposition_mutableblockposition, Blocks.OBSIDIAN.defaultBlockState(), 3); // CraftBukkit
                 }
             }
         }
 
         BlockState blockState1 = Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, axis);
 
-        for (int i5xx = 0; i5xx < 2; i5xx++) {
-            for (int min = 0; min < 3; min++) {
-                mutableBlockPos.setWithOffset(blockPos, i5xx * direction.getStepX(), min, i5xx * direction.getStepZ());
-                this.level.setBlock(mutableBlockPos, blockState1, 18);
+        for (k1 = 0; k1 < 2; ++k1) {
+            for (j = 0; j < 3; ++j) {
+                blockposition_mutableblockposition.setWithOffset(blockposition1, k1 * enumdirection.getStepX(), j, k1 * enumdirection.getStepZ());
+                blockList.setBlock(blockposition_mutableblockposition, iblockdata1, 18); // CraftBukkit
             }
         }
 
-        return Optional.of(new BlockUtil.FoundRectangle(blockPos.immutable(), 2, 3));
+        // CraftBukkit start
+        org.bukkit.World bworld = this.level.getWorld();
+        org.bukkit.event.world.PortalCreateEvent event = new org.bukkit.event.world.PortalCreateEvent((java.util.List<org.bukkit.block.BlockState>) (java.util.List) blockList.getList(), bworld, (entity == null) ? null : entity.getBukkitEntity(), org.bukkit.event.world.PortalCreateEvent.CreateReason.NETHER_PAIR);
+
+        this.level.getCraftServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return Optional.empty();
+        }
+        blockList.updateList();
+        // CraftBukkit end
+        return Optional.of(new BlockUtil.FoundRectangle(blockposition1.immutable(), 2, 3));
     }
 
     private boolean canPortalReplaceBlock(BlockPos.MutableBlockPos pos) {
