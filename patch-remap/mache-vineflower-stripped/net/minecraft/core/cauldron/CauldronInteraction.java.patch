--- a/net/minecraft/core/cauldron/CauldronInteraction.java
+++ b/net/minecraft/core/cauldron/CauldronInteraction.java
@@ -30,6 +33,10 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.gameevent.GameEvent;
 
+// CraftBukkit start
+import org.bukkit.event.block.CauldronLevelChangeEvent;
+// CraftBukkit end
+
 public interface CauldronInteraction {
     Map<String, CauldronInteraction.InteractionMap> INTERACTIONS = new Object2ObjectArrayMap<>();
     Codec<CauldronInteraction.InteractionMap> CODEC = ExtraCodecs.stringResolverCodec(CauldronInteraction.InteractionMap::name, INTERACTIONS::get);
@@ -69,10 +39,22 @@
                     itemStack.setTag(stack.getTag().copy());
                 }
 
-                player.setItemInHand(hand, itemStack);
-                player.awardStat(Stats.CLEAN_SHULKER_BOX);
-                LayeredCauldronBlock.lowerFillLevel(blockState, level, blockPos);
-            }
+    Map<String, CauldronInteraction.a> INTERACTIONS = new Object2ObjectArrayMap();
+    // CraftBukkit start - decompile error
+    /*
+    Codec<CauldronInteraction.a> CODEC;
+    CauldronInteraction.a EMPTY;
+    CauldronInteraction.a WATER;
+    CauldronInteraction.a LAVA;
+    CauldronInteraction.a POWDER_SNOW;
+    CauldronInteraction FILL_WATER;
+    CauldronInteraction FILL_LAVA;
+    CauldronInteraction FILL_POWDER_SNOW;
+    CauldronInteraction SHULKER_BOX;
+    CauldronInteraction BANNER;
+    CauldronInteraction DYED_ITEM;
+     */
+    // CraftBukkit end
 
             return InteractionResult.sidedSuccess(level.isClientSide);
         }
@@ -136,14 +78,20 @@
             if (PotionUtils.getPotion(stack) != Potions.WATER) {
                 return InteractionResult.PASS;
             } else {
-                if (!level.isClientSide) {
-                    Item item = stack.getItem();
-                    player.setItemInHand(hand, ItemUtils.createFilledResult(stack, player, new ItemStack(Items.GLASS_BOTTLE)));
-                    player.awardStat(Stats.USE_CAULDRON);
-                    player.awardStat(Stats.ITEM_USED.get(item));
-                    level.setBlockAndUpdate(blockPos, Blocks.WATER_CAULDRON.defaultBlockState());
-                    level.playSound(null, blockPos, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-                    level.gameEvent(null, GameEvent.FLUID_PLACE, blockPos);
+                if (!world.isClientSide) {
+                    // CraftBukkit start
+                    if (!LayeredCauldronBlock.changeLevel(iblockdata, world, blockposition, Blocks.WATER_CAULDRON.defaultBlockState(), entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_EMPTY)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                    // CraftBukkit end
+                    Item item = itemstack.getItem();
+
+                    entityhuman.setItemInHand(enumhand, ItemUtils.createFilledResult(itemstack, entityhuman, new ItemStack(Items.GLASS_BOTTLE)));
+                    entityhuman.awardStat(Stats.USE_CAULDRON);
+                    entityhuman.awardStat(Stats.ITEM_USED.get(item));
+                    // world.setBlockAndUpdate(blockposition, Blocks.WATER_CAULDRON.defaultBlockState()); // CraftBukkit
+                    world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+                    world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockposition);
                 }
 
                 return InteractionResult.sidedSuccess(level.isClientSide);
@@ -151,42 +100,44 @@
         });
         Map<Item, CauldronInteraction> map1 = WATER.map();
         addDefaultInteractions(map1);
-        map1.put(
-            Items.BUCKET,
-            (blockState, level, blockPos, player, hand, stack) -> fillBucket(
-                    blockState,
-                    level,
-                    blockPos,
-                    player,
-                    hand,
-                    stack,
-                    new ItemStack(Items.WATER_BUCKET),
-                    blockState1 -> blockState1.getValue(LayeredCauldronBlock.LEVEL) == 3,
-                    SoundEvents.BUCKET_FILL
-                )
-        );
-        map1.put(Items.GLASS_BOTTLE, (blockState, level, blockPos, player, hand, stack) -> {
-            if (!level.isClientSide) {
-                Item item = stack.getItem();
-                player.setItemInHand(hand, ItemUtils.createFilledResult(stack, player, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.WATER)));
-                player.awardStat(Stats.USE_CAULDRON);
-                player.awardStat(Stats.ITEM_USED.get(item));
-                LayeredCauldronBlock.lowerFillLevel(blockState, level, blockPos);
-                level.playSound(null, blockPos, SoundEvents.BOTTLE_FILL, SoundSource.BLOCKS, 1.0F, 1.0F);
-                level.gameEvent(null, GameEvent.FLUID_PICKUP, blockPos);
+        map1.put(Items.BUCKET, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return fillBucket(iblockdata, world, blockposition, entityhuman, enumhand, itemstack, new ItemStack(Items.WATER_BUCKET), (iblockdata1) -> {
+                return (Integer) iblockdata1.getValue(LayeredCauldronBlock.LEVEL) == 3;
+            }, SoundEvents.BUCKET_FILL);
+        });
+        map1.put(Items.GLASS_BOTTLE, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            if (!world.isClientSide) {
+                // CraftBukkit start
+                if (!LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition, entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_FILL)) {
+                    return InteractionResult.SUCCESS;
+                }
+                // CraftBukkit end
+                Item item = itemstack.getItem();
+
+                entityhuman.setItemInHand(enumhand, ItemUtils.createFilledResult(itemstack, entityhuman, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.WATER)));
+                entityhuman.awardStat(Stats.USE_CAULDRON);
+                entityhuman.awardStat(Stats.ITEM_USED.get(item));
+                // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
+                world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_FILL, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.gameEvent((Entity) null, GameEvent.FLUID_PICKUP, blockposition);
             }
 
             return InteractionResult.sidedSuccess(level.isClientSide);
         });
-        map1.put(Items.POTION, (blockState, level, blockPos, player, hand, stack) -> {
-            if (blockState.getValue(LayeredCauldronBlock.LEVEL) != 3 && PotionUtils.getPotion(stack) == Potions.WATER) {
-                if (!level.isClientSide) {
-                    player.setItemInHand(hand, ItemUtils.createFilledResult(stack, player, new ItemStack(Items.GLASS_BOTTLE)));
-                    player.awardStat(Stats.USE_CAULDRON);
-                    player.awardStat(Stats.ITEM_USED.get(stack.getItem()));
-                    level.setBlockAndUpdate(blockPos, blockState.cycle(LayeredCauldronBlock.LEVEL));
-                    level.playSound(null, blockPos, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-                    level.gameEvent(null, GameEvent.FLUID_PLACE, blockPos);
+        map1.put(Items.POTION, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            if ((Integer) iblockdata.getValue(LayeredCauldronBlock.LEVEL) != 3 && PotionUtils.getPotion(itemstack) == Potions.WATER) {
+                if (!world.isClientSide) {
+                    // CraftBukkit start
+                    if (!LayeredCauldronBlock.changeLevel(iblockdata, world, blockposition, iblockdata.cycle(LayeredCauldronBlock.LEVEL), entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_EMPTY)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                    // CraftBukkit end
+                    entityhuman.setItemInHand(enumhand, ItemUtils.createFilledResult(itemstack, entityhuman, new ItemStack(Items.GLASS_BOTTLE)));
+                    entityhuman.awardStat(Stats.USE_CAULDRON);
+                    entityhuman.awardStat(Stats.ITEM_USED.get(itemstack.getItem()));
+                    // world.setBlockAndUpdate(blockposition, (IBlockData) iblockdata.cycle(LayeredCauldronBlock.LEVEL)); // CraftBukkit
+                    world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+                    world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockposition);
                 }
 
                 return InteractionResult.sidedSuccess(level.isClientSide);
@@ -278,13 +211,18 @@
             return InteractionResult.PASS;
         } else {
             if (!level.isClientSide) {
+                // CraftBukkit start
+                if (!LayeredCauldronBlock.changeLevel(blockState, level, pos, Blocks.CAULDRON.defaultBlockState(), player, CauldronLevelChangeEvent.ChangeReason.BUCKET_FILL)) {
+                    return InteractionResult.SUCCESS;
+                }
+                // CraftBukkit end
                 Item item = emptyStack.getItem();
                 player.setItemInHand(hand, ItemUtils.createFilledResult(emptyStack, player, filledStack));
                 player.awardStat(Stats.USE_CAULDRON);
                 player.awardStat(Stats.ITEM_USED.get(item));
-                level.setBlockAndUpdate(pos, Blocks.CAULDRON.defaultBlockState());
-                level.playSound(null, pos, fillSound, SoundSource.BLOCKS, 1.0F, 1.0F);
-                level.gameEvent(null, GameEvent.FLUID_PICKUP, pos);
+                // world.setBlockAndUpdate(blockposition, Blocks.CAULDRON.defaultBlockState()); // CraftBukkit
+                level.playSound((Player) null, pos, fillSound, SoundSource.BLOCKS, 1.0F, 1.0F);
+                level.gameEvent((Entity) null, GameEvent.FLUID_PICKUP, pos);
             }
 
             return InteractionResult.sidedSuccess(level.isClientSide);
@@ -295,18 +232,127 @@
         Level level, BlockPos pos, Player player, InteractionHand hand, ItemStack filledStack, BlockState state, SoundEvent emptySound
     ) {
         if (!level.isClientSide) {
+            // CraftBukkit start
+            if (!LayeredCauldronBlock.changeLevel(state, level, pos, state, player, CauldronLevelChangeEvent.ChangeReason.BUCKET_EMPTY)) {
+                return InteractionResult.SUCCESS;
+            }
+            // CraftBukkit end
             Item item = filledStack.getItem();
             player.setItemInHand(hand, ItemUtils.createFilledResult(filledStack, player, new ItemStack(Items.BUCKET)));
             player.awardStat(Stats.FILL_CAULDRON);
             player.awardStat(Stats.ITEM_USED.get(item));
-            level.setBlockAndUpdate(pos, state);
-            level.playSound(null, pos, emptySound, SoundSource.BLOCKS, 1.0F, 1.0F);
-            level.gameEvent(null, GameEvent.FLUID_PLACE, pos);
+            // world.setBlockAndUpdate(blockposition, iblockdata); // CraftBukkit
+            level.playSound((Player) null, pos, emptySound, SoundSource.BLOCKS, 1.0F, 1.0F);
+            level.gameEvent((Entity) null, GameEvent.FLUID_PLACE, pos);
         }
 
         return InteractionResult.sidedSuccess(level.isClientSide);
     }
 
-    public static record InteractionMap(String name, Map<Item, CauldronInteraction> map) {
+    // CraftBukkit start - decompile errors
+    // static {
+        Codec<CauldronInteraction.a> CODEC = ExtraCodecs.stringResolverCodec(CauldronInteraction.a::name, CauldronInteraction.INTERACTIONS::get);
+        CauldronInteraction.a EMPTY = newInteractionMap("empty");
+        CauldronInteraction.a WATER = newInteractionMap("water");
+        CauldronInteraction.a LAVA = newInteractionMap("lava");
+        CauldronInteraction.a POWDER_SNOW = newInteractionMap("powder_snow");
+        CauldronInteraction FILL_WATER = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, (IBlockData) Blocks.WATER_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY);
+        };
+        CauldronInteraction FILL_LAVA = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, Blocks.LAVA_CAULDRON.defaultBlockState(), SoundEvents.BUCKET_EMPTY_LAVA);
+        };
+        CauldronInteraction FILL_POWDER_SNOW = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, (IBlockData) Blocks.POWDER_SNOW_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY_POWDER_SNOW);
+        };
+        CauldronInteraction SHULKER_BOX = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            // CraftBukkit end
+            Block block = Block.byItem(itemstack.getItem());
+
+            if (!(block instanceof ShulkerBoxBlock)) {
+                return InteractionResult.PASS;
+            } else {
+                if (!world.isClientSide) {
+                    // CraftBukkit start
+                    if (!LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition, entityhuman, CauldronLevelChangeEvent.ChangeReason.SHULKER_WASH)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                    // CraftBukkit end
+                    ItemStack itemstack1 = new ItemStack(Blocks.SHULKER_BOX);
+
+                    if (itemstack.hasTag()) {
+                        itemstack1.setTag(itemstack.getTag().copy());
+                    }
+
+                    entityhuman.setItemInHand(enumhand, itemstack1);
+                    entityhuman.awardStat(Stats.CLEAN_SHULKER_BOX);
+                    // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
+                }
+
+                return InteractionResult.sidedSuccess(world.isClientSide);
+            }
+        };
+        CauldronInteraction BANNER = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> { // CraftBukkit - decompile error
+            if (BannerBlockEntity.getPatternCount(itemstack) <= 0) {
+                return InteractionResult.PASS;
+            } else {
+                if (!world.isClientSide) {
+                    // CraftBukkit start
+                    if (!LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition, entityhuman, CauldronLevelChangeEvent.ChangeReason.BANNER_WASH)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                    // CraftBukkit end
+                    ItemStack itemstack1 = itemstack.copyWithCount(1);
+
+                    BannerBlockEntity.removeLastPattern(itemstack1);
+                    if (!entityhuman.getAbilities().instabuild) {
+                        itemstack.shrink(1);
+                    }
+
+                    if (itemstack.isEmpty()) {
+                        entityhuman.setItemInHand(enumhand, itemstack1);
+                    } else if (entityhuman.getInventory().add(itemstack1)) {
+                        entityhuman.inventoryMenu.sendAllDataToRemote();
+                    } else {
+                        entityhuman.drop(itemstack1, false);
+                    }
+
+                    entityhuman.awardStat(Stats.CLEAN_BANNER);
+                    // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
+                }
+
+                return InteractionResult.sidedSuccess(world.isClientSide);
+            }
+        };
+        CauldronInteraction DYED_ITEM = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> { // CraftBukkit - decompile error
+            Item item = itemstack.getItem();
+
+            if (!(item instanceof DyeableLeatherItem)) {
+                return InteractionResult.PASS;
+            } else {
+                DyeableLeatherItem idyeable = (DyeableLeatherItem) item;
+
+                if (!idyeable.hasCustomColor(itemstack)) {
+                    return InteractionResult.PASS;
+                } else {
+                    if (!world.isClientSide) {
+                        // CraftBukkit start
+                        if (!LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition, entityhuman, CauldronLevelChangeEvent.ChangeReason.ARMOR_WASH)) {
+                            return InteractionResult.SUCCESS;
+                        }
+                        // CraftBukkit end
+                        idyeable.clearColor(itemstack);
+                        entityhuman.awardStat(Stats.CLEAN_ARMOR);
+                        // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
+                    }
+
+                    return InteractionResult.sidedSuccess(world.isClientSide);
+                }
+            }
+        };
+    // } // CraftBukkit - decompile error
+
+    public static record a(String name, Map<Item, CauldronInteraction> map) {
+
     }
 }
