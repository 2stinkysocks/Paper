--- a/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
@@ -22,14 +22,26 @@
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.ticks.ContainerSingleItem;
 
+// CraftBukkit start
+import java.util.Collections;
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class JukeboxBlockEntity extends BlockEntity implements Clearable, ContainerSingleItem {
 
     private static final int SONG_END_PADDING = 20;
     private ItemStack item;
     private int ticksSinceLastEvent;
-    private long tickCount;
-    private long recordStartedTick;
-    private boolean isPlaying;
+    public long tickCount;
+    public long recordStartedTick;
+    public boolean isPlaying;
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+    public boolean opened;
 
     public JukeboxBlockEntity(BlockPos blockpos, BlockState blockstate) {
         super(BlockEntityType.JUKEBOX, blockpos, blockstate);
@@ -51,8 +69,32 @@
 
     @Override
     @Override
-    protected void saveAdditional(CompoundTag compoundtag) {
-        super.saveAdditional(compoundtag);
+    public Location getLocation() {
+        if (level == null) return null;
+        return new org.bukkit.Location(level.getWorld(), worldPosition.getX(), worldPosition.getY(), worldPosition.getZ());
+    }
+    // CraftBukkit end
+
+    public JukeboxBlockEntity(BlockPos pos, IBlockData blockState) {
+        super(BlockEntityType.JUKEBOX, pos, blockState);
+        this.item = ItemStack.EMPTY;
+    }
+
+    @Override
+    public void load(CompoundTag tag) {
+        super.load(tag);
+        if (tag.contains("RecordItem", 10)) {
+            this.item = ItemStack.of(tag.getCompound("RecordItem"));
+        }
+
+        this.isPlaying = tag.getBoolean("IsPlaying");
+        this.recordStartedTick = tag.getLong("RecordStartTick");
+        this.tickCount = tag.getLong("TickCount");
+    }
+
+    @Override
+    protected void saveAdditional(CompoundTag tag) {
+        super.saveAdditional(tag);
         if (!this.getTheItem().isEmpty()) {
             compoundtag.put("RecordItem", this.getTheItem().save(new CompoundTag()));
         }
@@ -156,7 +194,7 @@
     @Override
     @Override
     public int getMaxStackSize() {
-        return 1;
+        return maxStack; // CraftBukkit
     }
 
     @Override
@@ -210,9 +245,13 @@
     }
 
     @VisibleForTesting
-    public void setRecordWithoutPlaying(ItemStack itemstack) {
-        this.item = itemstack;
-        this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
+    public void setRecordWithoutPlaying(ItemStack stack) {
+        this.item = stack;
+        // CraftBukkit start - add null check for level
+        if (level != null) {
+            this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
+        }
+        // CraftBukkit end
         this.setChanged();
     }
 }
