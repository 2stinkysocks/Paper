--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -46,6 +45,19 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockExpEvent;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceExtractEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+import org.bukkit.event.inventory.FurnaceStartSmeltEvent;
+import org.bukkit.inventory.CookingRecipe;
+// CraftBukkit end
 
 public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeCraftingHolder, StackedContentsCompatible {
 
@@ -186,6 +195,40 @@
         return map;
     }
 
+    // CraftBukkit start - add fields and methods
+    private int maxStack = MAX_STACK;
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    public Object2IntOpenHashMap<ResourceLocation> getRecipesUsed() {
+        return this.recipesUsed; // PAIL private -> public
+    }
+    // CraftBukkit end
+
     private static boolean isNeverAFurnaceFuel(Item item) {
         return item.builtInRegistryHolder().is(ItemTags.NON_FLAMMABLE_WOOD);
     }
@@ -283,10 +324,21 @@
 
             int i = abstractfurnaceblockentity.getMaxStackSize();
 
-            if (!abstractfurnaceblockentity.isLit() && canBurn(level.registryAccess(), recipeholder, abstractfurnaceblockentity.items, i)) {
-                abstractfurnaceblockentity.litTime = abstractfurnaceblockentity.getBurnDuration(itemstack);
-                abstractfurnaceblockentity.litDuration = abstractfurnaceblockentity.litTime;
-                if (abstractfurnaceblockentity.isLit()) {
+            if (!blockEntity.isLit() && canBurn(level.registryAccess(), recipeholder, blockEntity.items, i)) {
+                // CraftBukkit start
+                CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
+
+                FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(CraftBlock.at(level, pos), fuel, blockEntity.getBurnDuration(itemstack));
+                level.getCraftServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+                if (furnaceBurnEvent.isCancelled()) {
+                    return;
+                }
+
+                blockEntity.litTime = furnaceBurnEvent.getBurnTime();
+                blockEntity.litDuration = blockEntity.litTime;
+                if (blockEntity.isLit() && furnaceBurnEvent.isBurning()) {
+                    // CraftBukkit end
                     flag1 = true;
                     if (flag3) {
                         Item item = itemstack.getItem();
@@ -301,13 +353,25 @@
                 }
             }
 
-            if (abstractfurnaceblockentity.isLit() && canBurn(level.registryAccess(), recipeholder, abstractfurnaceblockentity.items, i)) {
-                ++abstractfurnaceblockentity.cookingProgress;
-                if (abstractfurnaceblockentity.cookingProgress == abstractfurnaceblockentity.cookingTotalTime) {
-                    abstractfurnaceblockentity.cookingProgress = 0;
-                    abstractfurnaceblockentity.cookingTotalTime = getTotalCookTime(level, abstractfurnaceblockentity);
-                    if (burn(level.registryAccess(), recipeholder, abstractfurnaceblockentity.items, i)) {
-                        abstractfurnaceblockentity.setRecipeUsed(recipeholder);
+            if (blockEntity.isLit() && canBurn(level.registryAccess(), recipeholder, blockEntity.items, i)) {
+                // CraftBukkit start
+                if (recipeholder != null && blockEntity.cookingProgress == 0) {
+                    CraftItemStack source = CraftItemStack.asCraftMirror(blockEntity.items.get(0));
+                    CookingRecipe<?> recipe = (CookingRecipe<?>) recipeholder.toBukkitRecipe();
+
+                    FurnaceStartSmeltEvent event = new FurnaceStartSmeltEvent(CraftBlock.at(level, pos), source, recipe);
+                    level.getCraftServer().getPluginManager().callEvent(event);
+
+                    blockEntity.cookingTotalTime = event.getTotalCookTime();
+                }
+                // CraftBukkit end
+
+                ++blockEntity.cookingProgress;
+                if (blockEntity.cookingProgress == blockEntity.cookingTotalTime) {
+                    blockEntity.cookingProgress = 0;
+                    blockEntity.cookingTotalTime = getTotalCookTime(level, blockEntity);
+                    if (burn(blockEntity.level, blockEntity.worldPosition, level.registryAccess(), recipeholder, blockEntity.items, i)) { // CraftBukkit
+                        blockEntity.setRecipeUsed(recipeholder);
                     }
 
                     flag1 = true;
@@ -345,17 +409,44 @@
         }
     }
 
-    private static boolean burn(RegistryAccess registryaccess, @Nullable RecipeHolder<?> recipeholder, NonNullList<ItemStack> nonnulllist, int i) {
-        if (recipeholder != null && canBurn(registryaccess, recipeholder, nonnulllist, i)) {
+    private static boolean burn(Level world, BlockPos blockposition, RegistryAccess iregistrycustom, @Nullable RecipeHolder<?> recipeholder, NonNullList<ItemStack> nonnulllist, int i) { // CraftBukkit
+        if (recipeholder != null && canBurn(iregistrycustom, recipeholder, nonnulllist, i)) {
             ItemStack itemstack = (ItemStack) nonnulllist.get(0);
             ItemStack itemstack1 = recipeholder.value().getResultItem(registryaccess);
             ItemStack itemstack2 = (ItemStack) nonnulllist.get(2);
 
+            // CraftBukkit start - fire FurnaceSmeltEvent
+            CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+            org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(CraftBlock.at(world, blockposition), source, result);
+            world.getCraftServer().getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+                return false;
+            }
+
+            result = furnaceSmeltEvent.getResult();
+            itemstack1 = CraftItemStack.asNMSCopy(result);
+
+            if (!itemstack1.isEmpty()) {
+                if (itemstack2.isEmpty()) {
+                    nonnulllist.set(2, itemstack1.copy());
+                } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+                    itemstack2.grow(itemstack1.getCount());
+                } else {
+                    return false;
+                }
+            }
+
+            /*
             if (itemstack2.isEmpty()) {
                 nonnulllist.set(2, itemstack1.copy());
             } else if (itemstack2.is(itemstack1.getItem())) {
                 itemstack2.grow(1);
             }
+            */
+            // CraftBukkit end
 
             if (itemstack.is(Blocks.WET_SPONGE.asItem()) && !((ItemStack) nonnulllist.get(1)).isEmpty() && ((ItemStack) nonnulllist.get(1)).is(Items.BUCKET)) {
                 nonnulllist.set(1, new ItemStack(Items.WATER_BUCKET));
@@ -378,8 +469,9 @@
         }
     }
 
-    private static int getTotalCookTime(Level level, AbstractFurnaceBlockEntity abstractfurnaceblockentity) {
-        return (Integer) abstractfurnaceblockentity.quickCheck.getRecipeFor(abstractfurnaceblockentity, level).map((recipeholder) -> {
+    private static int getTotalCookTime(Level level, AbstractFurnaceBlockEntity blockEntity) {
+        if (level == null) return 200; // CraftBukkit - SPIGOT-4302
+        return (Integer) blockEntity.quickCheck.getRecipeFor(blockEntity, level).map((recipeholder) -> {
             return ((AbstractCookingRecipe) recipeholder.value()).getCookingTime();
         }).orElse(200);
     }
@@ -515,8 +592,8 @@
     @Override
     public void awardUsedRecipes(Player player, List<ItemStack> list) {}
 
-    public void awardUsedRecipesAndPopExperience(ServerPlayer serverplayer) {
-        List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(serverplayer.serverLevel(), serverplayer.position());
+    public void awardUsedRecipesAndPopExperience(ServerPlayer entityplayer, ItemStack itemstack, int amount) { // CraftBukkit
+        List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(entityplayer.serverLevel(), entityplayer.position(), this.worldPosition, entityplayer, itemstack, amount); // CraftBukkit
 
         serverplayer.awardRecipes(list);
         Iterator iterator = list.iterator();
@@ -532,7 +609,13 @@
         this.recipesUsed.clear();
     }
 
-    public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel serverlevel, Vec3 vec3) {
+    public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel level, Vec3 popVec) {
+        // CraftBukkit start
+        return this.getRecipesToAwardAndPopExperience(level, popVec, this.worldPosition, null, null, 0);
+    }
+
+    public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel worldserver, Vec3 vec3d, BlockPos blockposition, ServerPlayer entityplayer, ItemStack itemstack, int amount) {
+        // CraftBukkit end
         List<RecipeHolder<?>> list = Lists.newArrayList();
         ObjectIterator objectiterator = this.recipesUsed.object2IntEntrySet().iterator();
 
@@ -541,14 +624,14 @@
 
             serverlevel.getRecipeManager().byKey((ResourceLocation) entry.getKey()).ifPresent((recipeholder) -> {
                 list.add(recipeholder);
-                createExperience(serverlevel, vec3, entry.getIntValue(), ((AbstractCookingRecipe) recipeholder.value()).getExperience());
+                createExperience(worldserver, vec3d, entry.getIntValue(), ((AbstractCookingRecipe) recipeholder.value()).getExperience(), blockposition, entityplayer, itemstack, amount); // CraftBukkit
             });
         }
 
         return list;
     }
 
-    private static void createExperience(ServerLevel serverlevel, Vec3 vec3, int i, float f) {
+    private static void createExperience(ServerLevel worldserver, Vec3 vec3d, int i, float f, BlockPos blockposition, net.minecraft.world.entity.player.Player entityhuman, ItemStack itemstack, int amount) { // CraftBukkit
         int j = Mth.floor((float) i * f);
         float f1 = Mth.frac((float) i * f);
 
@@ -556,7 +639,18 @@
             ++j;
         }
 
-        ExperienceOrb.award(serverlevel, vec3, j);
+        // CraftBukkit start - fire FurnaceExtractEvent / BlockExpEvent
+        BlockExpEvent event;
+        if (amount != 0) {
+            event = new FurnaceExtractEvent((Player) entityhuman.getBukkitEntity(), CraftBlock.at(worldserver, blockposition), org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(itemstack.getItem()), amount, j);
+        } else {
+            event = new BlockExpEvent(CraftBlock.at(worldserver, blockposition), j);
+        }
+        worldserver.getCraftServer().getPluginManager().callEvent(event);
+        j = event.getExpToDrop();
+        // CraftBukkit end
+
+        ExperienceOrb.award(worldserver, vec3d, j);
     }
 
     @Override
