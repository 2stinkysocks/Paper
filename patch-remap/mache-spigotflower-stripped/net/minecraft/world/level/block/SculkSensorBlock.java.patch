--- a/net/minecraft/world/level/block/SculkSensorBlock.java
+++ b/net/minecraft/world/level/block/SculkSensorBlock.java
@@ -41,6 +41,10 @@
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.event.block.BlockRedstoneEvent;
+// CraftBukkit end
 
 public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterloggedBlock {
 
@@ -104,10 +104,21 @@
     }
 
     @Override
-    @Override
-    public void stepOn(Level level, BlockPos blockpos, BlockState blockstate, Entity entity) {
-        if (!level.isClientSide() && canActivate(blockstate) && entity.getType() != EntityType.WARDEN) {
-            BlockEntity blockentity = level.getBlockEntity(blockpos);
+    public void stepOn(Level level, BlockPos pos, IBlockData state, Entity entity) {
+        if (!level.isClientSide() && canActivate(state) && entity.getType() != EntityType.WARDEN) {
+            // CraftBukkit start
+            org.bukkit.event.Cancellable cancellable;
+            if (entity instanceof Player) {
+                cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((Player) entity, org.bukkit.event.block.Action.PHYSICAL, pos, null, null, null);
+            } else {
+                cancellable = new org.bukkit.event.entity.EntityInteractEvent(entity.getBukkitEntity(), level.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
+                level.getCraftServer().getPluginManager().callEvent((org.bukkit.event.entity.EntityInteractEvent) cancellable);
+            }
+            if (cancellable.isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
+            BlockEntity tileentity = level.getBlockEntity(pos);
 
             if (blockentity instanceof SculkSensorBlockEntity) {
                 SculkSensorBlockEntity sculksensorblockentity = (SculkSensorBlockEntity) blockentity;
@@ -219,10 +220,19 @@
         return getPhase(blockstate) == SculkSensorPhase.INACTIVE;
     }
 
-    public static void deactivate(Level level, BlockPos blockpos, BlockState blockstate) {
-        level.setBlock(blockpos, (BlockState) ((BlockState) blockstate.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.COOLDOWN)).setValue(SculkSensorBlock.POWER, 0), 3);
-        level.scheduleTick(blockpos, blockstate.getBlock(), 10);
-        updateNeighbours(level, blockpos, blockstate);
+    public static void deactivate(Level level, BlockPos pos, IBlockData state) {
+        // CraftBukkit start
+        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(CraftBlock.at(level, pos), state.getValue(SculkSensorBlock.POWER), 0);
+        level.getCraftServer().getPluginManager().callEvent(eventRedstone);
+
+        if (eventRedstone.getNewCurrent() > 0) {
+            level.setBlock(pos, state.setValue(SculkSensorBlock.POWER, eventRedstone.getNewCurrent()), 3);
+            return;
+        }
+        // CraftBukkit end
+        level.setBlock(pos, (IBlockData) ((IBlockData) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.COOLDOWN)).setValue(SculkSensorBlock.POWER, 0), 3);
+        level.scheduleTick(pos, state.getBlock(), 10);
+        updateNeighbours(level, pos, state);
     }
 
     @VisibleForTesting
@@ -230,15 +240,24 @@
         return 30;
     }
 
-    public void activate(@Nullable Entity entity, Level level, BlockPos blockpos, BlockState blockstate, int i, int j) {
-        level.setBlock(blockpos, (BlockState) ((BlockState) blockstate.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.ACTIVE)).setValue(SculkSensorBlock.POWER, i), 3);
-        level.scheduleTick(blockpos, blockstate.getBlock(), this.getActiveTicks());
-        updateNeighbours(level, blockpos, blockstate);
-        tryResonateVibration(entity, level, blockpos, j);
-        level.gameEvent(entity, GameEvent.SCULK_SENSOR_TENDRILS_CLICKING, blockpos);
-        if (!(Boolean) blockstate.getValue(SculkSensorBlock.WATERLOGGED)) {
-            level.playSound((Player) null, (double) blockpos.getX() + 0.5D, (double) blockpos.getY() + 0.5D, (double) blockpos.getZ() + 0.5D, SoundEvents.SCULK_CLICKING, SoundSource.BLOCKS, 1.0F, level.random.nextFloat() * 0.2F + 0.8F);
+    public void activate(@Nullable Entity entity, Level level, BlockPos pos, IBlockData state, int power, int frequency) {
+        // CraftBukkit start
+        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(CraftBlock.at(level, pos), state.getValue(SculkSensorBlock.POWER), power);
+        level.getCraftServer().getPluginManager().callEvent(eventRedstone);
+
+        if (eventRedstone.getNewCurrent() <= 0) {
+            return;
         }
+        power = eventRedstone.getNewCurrent();
+        // CraftBukkit end
+        level.setBlock(pos, (IBlockData) ((IBlockData) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.ACTIVE)).setValue(SculkSensorBlock.POWER, power), 3);
+        level.scheduleTick(pos, state.getBlock(), this.getActiveTicks());
+        updateNeighbours(level, pos, state);
+        tryResonateVibration(entity, level, pos, frequency);
+        level.gameEvent(entity, GameEvent.SCULK_SENSOR_TENDRILS_CLICKING, pos);
+        if (!(Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)) {
+            level.playSound((Player) null, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, SoundEvents.SCULK_CLICKING, SoundSource.BLOCKS, 1.0F, level.random.nextFloat() * 0.2F + 0.8F);
+        }
 
     }
 
@@ -317,6 +330,11 @@
     }
 
     @Override
+    public void spawnAfterBreak(IBlockData state, ServerLevel level, BlockPos pos, ItemStack stack, boolean dropExperience) {
+        super.spawnAfterBreak(state, level, pos, stack, dropExperience);
+        // CraftBukkit start - Delegate to getExpDrop
+    }
+
     @Override
     public void spawnAfterBreak(BlockState blockstate, ServerLevel serverlevel, BlockPos blockpos, ItemStack itemstack, boolean flag) {
         super.spawnAfterBreak(blockstate, serverlevel, blockpos, itemstack, flag);
@@ -324,5 +341,7 @@
             this.tryDropExperience(serverlevel, blockpos, itemstack, ConstantInt.of(5));
         }
 
+        return 0;
+        // CraftBukkit end
     }
 }
