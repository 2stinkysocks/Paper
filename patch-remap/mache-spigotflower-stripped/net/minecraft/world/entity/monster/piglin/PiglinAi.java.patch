--- a/net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ b/net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -73,6 +73,12 @@
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import java.util.stream.Collectors;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.entity.PiglinBarterEvent;
+// CraftBukkit end
 
 public class PiglinAi {
 
@@ -233,23 +240,28 @@
         stopWalking(piglin);
         ItemStack itemstack;
 
-        if (itementity.getItem().is(Items.GOLD_NUGGET)) {
-            piglin.take(itementity, itementity.getItem().getCount());
-            itemstack = itementity.getItem();
-            itementity.discard();
+        // CraftBukkit start
+        if (itemEntity.getItem().is(Items.GOLD_NUGGET) && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityPickupItemEvent(piglin, itemEntity, 0, false).isCancelled()) {
+            piglin.take(itemEntity, itemEntity.getItem().getCount());
+            itemstack = itemEntity.getItem();
+            itemEntity.discard();
+        } else if (!org.bukkit.craftbukkit.event.CraftEventFactory.callEntityPickupItemEvent(piglin, itemEntity, itemEntity.getItem().getCount() - 1, false).isCancelled()) {
+            piglin.take(itemEntity, 1);
+            itemstack = removeOneItemFromItemEntity(itemEntity);
         } else {
             piglin.take(itementity, 1);
             itemstack = removeOneItemFromItemEntity(itementity);
         }
+        // CraftBukkit end
 
-        if (isLovedItem(itemstack)) {
+        if (isLovedItem(itemstack, piglin)) { // CraftBukkit - Changes to allow for custom payment in bartering
             piglin.getBrain().eraseMemory(MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM);
             holdInOffhand(piglin, itemstack);
             admireGoldItem(piglin);
         } else if (isFood(itemstack) && !hasEatenRecently(piglin)) {
             eat(piglin);
         } else {
-            boolean flag = !piglin.equipItemIfPossible(itemstack).equals(ItemStack.EMPTY);
+            boolean flag = !piglin.equipItemIfPossible(itemstack, itemEntity).equals(ItemStack.EMPTY); // CraftBukkit
 
             if (!flag) {
                 putInInventory(piglin, itemstack);
@@ -285,9 +296,14 @@
         boolean flag1;
 
         if (piglin.isAdult()) {
-            flag1 = isBarterCurrency(itemstack);
-            if (flag && flag1) {
-                throwItems(piglin, getBarterResponseItems(piglin));
+            flag1 = isBarterCurrency(itemstack, piglin); // CraftBukkit - Changes to allow custom payment for bartering
+            if (shouldBarter && flag1) {
+                // CraftBukkit start
+                PiglinBarterEvent event = CraftEventFactory.callPiglinBarterEvent(piglin, getBarterResponseItems(piglin), itemstack);
+                if (!event.isCancelled()) {
+                    throwItems(piglin, event.getOutcome().stream().map(CraftItemStack::asNMSCopy).collect(Collectors.toList()));
+                }
+                // CraftBukkit end
             } else if (!flag1) {
                 boolean flag2 = !piglin.equipItemIfPossible(itemstack).isEmpty();
 
@@ -300,7 +316,7 @@
             if (!flag1) {
                 ItemStack itemstack1 = piglin.getMainHandItem();
 
-                if (isLovedItem(itemstack1)) {
+                if (isLovedItem(itemstack1, piglin)) { // CraftBukkit - Changes to allow for custom payment in bartering
                     putInInventory(piglin, itemstack1);
                 } else {
                     throwItems(piglin, Collections.singletonList(itemstack1));
@@ -377,7 +393,7 @@
             return false;
         } else if (isAdmiringDisabled(piglin) && piglin.getBrain().hasMemoryValue(MemoryModuleType.ATTACK_TARGET)) {
             return false;
-        } else if (isBarterCurrency(itemstack)) {
+        } else if (isBarterCurrency(stack, piglin)) { // CraftBukkit
             return isNotHoldingLovedItemInOffHand(piglin);
         } else {
             boolean flag = piglin.canAddToInventory(itemstack);
@@ -386,9 +402,11 @@
         }
     }
 
-    protected static boolean isLovedItem(ItemStack itemstack) {
-        return itemstack.is(ItemTags.PIGLIN_LOVED);
+    // CraftBukkit start - Added method to allow checking for custom payment items
+    protected static boolean isLovedItem(ItemStack itemstack, Piglin piglin) {
+        return isLovedItem(itemstack) || (piglin.interestItems.contains(itemstack.getItem()) || piglin.allowedBarterItems.contains(itemstack.getItem()));
     }
+    // CraftBukkit end
 
     private static boolean wantsToStopRiding(Piglin piglin, Entity entity) {
         if (!(entity instanceof Mob)) {
@@ -480,8 +502,8 @@
         }
     }
 
-    protected static boolean canAdmire(Piglin piglin, ItemStack itemstack) {
-        return !isAdmiringDisabled(piglin) && !isAdmiringItem(piglin) && piglin.isAdult() && isBarterCurrency(itemstack);
+    protected static boolean canAdmire(Piglin piglin, ItemStack stack) {
+        return !isAdmiringDisabled(piglin) && !isAdmiringItem(piglin) && piglin.isAdult() && isBarterCurrency(stack, piglin); // CraftBukkit
     }
 
     protected static void wasHurtBy(Piglin piglin, LivingEntity livingentity) {
@@ -738,9 +760,11 @@
         return piglin.getBrain().hasMemoryValue(MemoryModuleType.ADMIRING_ITEM);
     }
 
-    private static boolean isBarterCurrency(ItemStack itemstack) {
-        return itemstack.is(PiglinAi.BARTERING_ITEM);
+    // CraftBukkit start - Changes to allow custom payment for bartering
+    private static boolean isBarterCurrency(ItemStack itemstack, Piglin piglin) {
+        return isBarterCurrency(itemstack) || piglin.allowedBarterItems.contains(itemstack.getItem());
     }
+    // CraftBukkit end
 
     private static boolean isFood(ItemStack itemstack) {
         return itemstack.is(ItemTags.PIGLIN_FOOD);
@@ -775,7 +803,7 @@
     }
 
     private static boolean isNotHoldingLovedItemInOffHand(Piglin piglin) {
-        return piglin.getOffhandItem().isEmpty() || !isLovedItem(piglin.getOffhandItem());
+        return piglin.getOffhandItem().isEmpty() || !isLovedItem(piglin.getOffhandItem(), piglin); // CraftBukkit - Changes to allow custom payment for bartering
     }
 
     public static boolean isZombified(EntityType<?> entitytype) {
