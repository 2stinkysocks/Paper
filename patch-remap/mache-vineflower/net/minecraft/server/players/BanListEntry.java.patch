--- a/net/minecraft/server/players/BanListEntry.java
+++ b/net/minecraft/server/players/BanListEntry.java
@@ -9,6 +9,7 @@
 import net.minecraft.network.chat.Component;
 
 public abstract class BanListEntry<T> extends StoredUserEntry<T> {
+
     public static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z", Locale.ROOT);
     public static final String EXPIRES_NEVER = "forever";
     protected final Date created;
@@ -26,12 +27,13 @@
     }
 
     protected BanListEntry(@Nullable T user, JsonObject entryData) {
-        super(user);
+        super(checkExpiry(user, entryData)); // CraftBukkit
 
         Date date;
+
         try {
-            date = entryData.has("created") ? DATE_FORMAT.parse(entryData.get("created").getAsString()) : new Date();
-        } catch (ParseException var7) {
+            date = entryData.has("created") ? BanListEntry.DATE_FORMAT.parse(entryData.get("created").getAsString()) : new Date();
+        } catch (ParseException parseexception) {
             date = new Date();
         }
 
@@ -39,9 +41,10 @@
         this.source = entryData.has("source") ? entryData.get("source").getAsString() : "(Unknown)";
 
         Date date1;
+
         try {
-            date1 = entryData.has("expires") ? DATE_FORMAT.parse(entryData.get("expires").getAsString()) : null;
-        } catch (ParseException var6) {
+            date1 = entryData.has("expires") ? BanListEntry.DATE_FORMAT.parse(entryData.get("expires").getAsString()) : null;
+        } catch (ParseException parseexception1) {
             date1 = null;
         }
 
@@ -70,14 +73,32 @@
 
     @Override
     boolean hasExpired() {
-        return this.expires != null && this.expires.before(new Date());
+        return this.expires == null ? false : this.expires.before(new Date());
     }
 
     @Override
     protected void serialize(JsonObject data) {
-        data.addProperty("created", DATE_FORMAT.format(this.created));
+        data.addProperty("created", BanListEntry.DATE_FORMAT.format(this.created));
         data.addProperty("source", this.source);
-        data.addProperty("expires", this.expires == null ? "forever" : DATE_FORMAT.format(this.expires));
+        data.addProperty("expires", this.expires == null ? "forever" : BanListEntry.DATE_FORMAT.format(this.expires));
         data.addProperty("reason", this.reason);
     }
+
+    // CraftBukkit start
+    private static <T> T checkExpiry(T object, JsonObject jsonobject) {
+        Date expires = null;
+
+        try {
+            expires = jsonobject.has("expires") ? DATE_FORMAT.parse(jsonobject.get("expires").getAsString()) : null;
+        } catch (ParseException ex) {
+            // Guess we don't have a date
+        }
+
+        if (expires == null || expires.after(new Date())) {
+            return object;
+        } else {
+            return null;
+        }
+    }
+    // CraftBukkit end
 }
