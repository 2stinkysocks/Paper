--- a/net/minecraft/server/players/StoredUserList.java
+++ b/net/minecraft/server/players/StoredUserList.java
@@ -1,3 +1,4 @@
+// mc-dev import
 package net.minecraft.server.players;
 
 import com.google.common.collect.Lists;
@@ -15,16 +16,20 @@
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.util.Collection;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.util.GsonHelper;
 import org.slf4j.Logger;
 
 public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
+
     private static final Logger LOGGER = LogUtils.getLogger();
-    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
+    private static final Gson GSON = (new GsonBuilder()).setPrettyPrinting().create();
     private final File file;
     private final Map<String, V> map = Maps.newHashMap();
 
@@ -41,15 +46,16 @@
 
         try {
             this.save();
-        } catch (IOException var3) {
-            LOGGER.warn("Could not save the list after adding a user.", (Throwable)var3);
+        } catch (IOException ioexception) {
+            StoredUserList.LOGGER.warn("Could not save the list after adding a user.", ioexception);
         }
+
     }
 
     @Nullable
     public V get(K obj) {
         this.removeExpired();
-        return this.map.get(this.getKeyForUser(obj));
+        return (V) this.map.get(this.getKeyForUser(obj)); // CraftBukkit - fix decompile error
     }
 
     public void remove(K user) {
@@ -57,9 +63,10 @@
 
         try {
             this.save();
-        } catch (IOException var3) {
-            LOGGER.warn("Could not save the list after removing a user.", (Throwable)var3);
+        } catch (IOException ioexception) {
+            StoredUserList.LOGGER.warn("Could not save the list after removing a user.", ioexception);
         }
+
     }
 
     public void remove(StoredUserEntry<K> entry) {
@@ -67,7 +74,7 @@
     }
 
     public String[] getUserList() {
-        return this.map.keySet().toArray(new String[0]);
+        return (String[]) this.map.keySet().toArray(new String[0]);
     }
 
     public boolean isEmpty() {
@@ -84,16 +91,24 @@
 
     private void removeExpired() {
         List<K> list = Lists.newArrayList();
+        Iterator iterator = this.map.values().iterator();
 
-        for (V storedUserEntry : this.map.values()) {
-            if (storedUserEntry.hasExpired()) {
-                list.add(storedUserEntry.getUser());
+        while (iterator.hasNext()) {
+            V v0 = (V) iterator.next(); // CraftBukkit - decompile error
+
+            if (v0.hasExpired()) {
+                list.add(v0.getUser());
             }
         }
 
-        for (K object : list) {
-            this.map.remove(this.getKeyForUser(object));
+        iterator = list.iterator();
+
+        while (iterator.hasNext()) {
+            K k0 = (K) iterator.next(); // CraftBukkit - decompile error
+
+            this.map.remove(this.getKeyForUser(k0));
         }
+
     }
 
     protected abstract StoredUserEntry<K> createEntry(JsonObject entryData);
@@ -103,31 +118,86 @@
     }
 
     public void save() throws IOException {
-        JsonArray jsonArray = new JsonArray();
-        this.map.values().stream().map(storedUserEntry -> Util.make(new JsonObject(), storedUserEntry::serialize)).forEach(jsonArray::add);
+        JsonArray jsonarray = new JsonArray();
+        Stream<JsonObject> stream = this.map.values().stream().map((jsonlistentry) -> { // CraftBukkit - decompile error
+            JsonObject jsonobject = new JsonObject();
 
-        try (BufferedWriter writer = Files.newWriter(this.file, StandardCharsets.UTF_8)) {
-            GSON.toJson((JsonElement)jsonArray, writer);
+            Objects.requireNonNull(jsonlistentry);
+            return (JsonObject) Util.make(jsonobject, jsonlistentry::serialize);
+        });
+
+        Objects.requireNonNull(jsonarray);
+        stream.forEach(jsonarray::add);
+        BufferedWriter bufferedwriter = Files.newWriter(this.file, StandardCharsets.UTF_8);
+
+        try {
+            StoredUserList.GSON.toJson(jsonarray, bufferedwriter);
+        } catch (Throwable throwable) {
+            if (bufferedwriter != null) {
+                try {
+                    bufferedwriter.close();
+                } catch (Throwable throwable1) {
+                    throwable.addSuppressed(throwable1);
+                }
+            }
+
+            throw throwable;
         }
+
+        if (bufferedwriter != null) {
+            bufferedwriter.close();
+        }
+
     }
 
     public void load() throws IOException {
         if (this.file.exists()) {
-            try (BufferedReader reader = Files.newReader(this.file, StandardCharsets.UTF_8)) {
-                this.map.clear();
-                JsonArray jsonArray = GSON.fromJson(reader, JsonArray.class);
-                if (jsonArray == null) {
-                    return;
-                }
+            BufferedReader bufferedreader = Files.newReader(this.file, StandardCharsets.UTF_8);
 
-                for (JsonElement jsonElement : jsonArray) {
-                    JsonObject jsonObject = GsonHelper.convertToJsonObject(jsonElement, "entry");
-                    StoredUserEntry<K> storedUserEntry = this.createEntry(jsonObject);
-                    if (storedUserEntry.getUser() != null) {
-                        this.map.put(this.getKeyForUser(storedUserEntry.getUser()), (V)storedUserEntry);
+            label54:
+            {
+                try {
+                    this.map.clear();
+                    JsonArray jsonarray = (JsonArray) StoredUserList.GSON.fromJson(bufferedreader, JsonArray.class);
+
+                    if (jsonarray == null) {
+                        break label54;
                     }
+
+                    Iterator iterator = jsonarray.iterator();
+
+                    while (iterator.hasNext()) {
+                        JsonElement jsonelement = (JsonElement) iterator.next();
+                        JsonObject jsonobject = GsonHelper.convertToJsonObject(jsonelement, "entry");
+                        StoredUserEntry<K> jsonlistentry = this.createEntry(jsonobject);
+
+                        if (jsonlistentry.getUser() != null) {
+                            this.map.put(this.getKeyForUser(jsonlistentry.getUser()), (V) jsonlistentry); // CraftBukkit - decompile error
+                        }
+                    }
+                } catch (Throwable throwable) {
+                    if (bufferedreader != null) {
+                        try {
+                            bufferedreader.close();
+                        } catch (Throwable throwable1) {
+                            throwable.addSuppressed(throwable1);
+                        }
+                    }
+
+                    throw throwable;
                 }
+
+                if (bufferedreader != null) {
+                    bufferedreader.close();
+                }
+
+                return;
             }
+
+            if (bufferedreader != null) {
+                bufferedreader.close();
+            }
+
         }
     }
 }
