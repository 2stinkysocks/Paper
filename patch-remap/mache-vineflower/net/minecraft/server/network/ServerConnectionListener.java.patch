--- a/net/minecraft/server/network/ServerConnectionListener.java
+++ b/net/minecraft/server/network/ServerConnectionListener.java
@@ -37,23 +37,26 @@
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
+import net.minecraft.network.BandwidthDebugMonitor;
 import net.minecraft.network.Connection;
 import net.minecraft.network.PacketSendListener;
 import net.minecraft.network.RateKickingConnection;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.common.ClientboundDisconnectPacket;
 import net.minecraft.server.MinecraftServer;
 import org.slf4j.Logger;
 
 public class ServerConnectionListener {
+
     private static final Logger LOGGER = LogUtils.getLogger();
-    public static final Supplier<NioEventLoopGroup> SERVER_EVENT_GROUP = Suppliers.memoize(
-        () -> new NioEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Server IO #%d").setDaemon(true).build())
-    );
-    public static final Supplier<EpollEventLoopGroup> SERVER_EPOLL_EVENT_GROUP = Suppliers.memoize(
-        () -> new EpollEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build())
-    );
+    public static final Supplier<NioEventLoopGroup> SERVER_EVENT_GROUP = Suppliers.memoize(() -> {
+        return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
+    });
+    public static final Supplier<EpollEventLoopGroup> SERVER_EPOLL_EVENT_GROUP = Suppliers.memoize(() -> {
+        return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
+    });
     final MinecraftServer server;
     public volatile boolean running;
     private final List<ChannelFuture> channels = Collections.synchronizedList(Lists.newArrayList());
@@ -65,127 +68,129 @@
     }
 
     public void startTcpServerListener(@Nullable InetAddress address, int port) throws IOException {
+        List list = this.channels;
+
         synchronized (this.channels) {
-            Class<? extends ServerSocketChannel> clazz;
-            EventLoopGroup eventLoopGroup;
+            Class oclass;
+            EventLoopGroup eventloopgroup;
+
             if (Epoll.isAvailable() && this.server.isEpollEnabled()) {
-                clazz = EpollServerSocketChannel.class;
-                eventLoopGroup = SERVER_EPOLL_EVENT_GROUP.get();
-                LOGGER.info("Using epoll channel type");
+                oclass = EpollServerSocketChannel.class;
+                eventloopgroup = (EventLoopGroup) ServerConnectionListener.SERVER_EPOLL_EVENT_GROUP.get();
+                ServerConnectionListener.LOGGER.info("Using epoll channel type");
             } else {
-                clazz = NioServerSocketChannel.class;
-                eventLoopGroup = SERVER_EVENT_GROUP.get();
-                LOGGER.info("Using default channel type");
+                oclass = NioServerSocketChannel.class;
+                eventloopgroup = (EventLoopGroup) ServerConnectionListener.SERVER_EVENT_GROUP.get();
+                ServerConnectionListener.LOGGER.info("Using default channel type");
             }
 
-            this.channels
-                .add(
-                    new ServerBootstrap()
-                        .channel(clazz)
-                        .childHandler(
-                            new ChannelInitializer<Channel>() {
-                                @Override
-                                protected void initChannel(Channel channel) {
-                                    Connection.setInitialProtocolAttributes(channel);
-                
-                                    try {
-                                        channel.config().setOption(ChannelOption.TCP_NODELAY, true);
-                                    } catch (ChannelException var5) {
-                                    }
-                
-                                    ChannelPipeline channelPipeline = channel.pipeline()
-                                        .addLast("timeout", new ReadTimeoutHandler(30))
-                                        .addLast("legacy_query", new LegacyQueryHandler(ServerConnectionListener.this.getServer()));
-                                    Connection.configureSerialization(channelPipeline, PacketFlow.SERVERBOUND, null);
-                                    int rateLimitPacketsPerSecond = ServerConnectionListener.this.server.getRateLimitPacketsPerSecond();
-                                    Connection connection = (Connection)(rateLimitPacketsPerSecond > 0
-                                        ? new RateKickingConnection(rateLimitPacketsPerSecond)
-                                        : new Connection(PacketFlow.SERVERBOUND));
-                                    ServerConnectionListener.this.connections.add(connection);
-                                    connection.configurePacketHandler(channelPipeline);
-                                    connection.setListenerForServerboundHandshake(
-                                        new ServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, connection)
-                                    );
-                                }
-                            }
-                        )
-                        .group(eventLoopGroup)
-                        .localAddress(address, port)
-                        .bind()
-                        .syncUninterruptibly()
-                );
+            this.channels.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer<Channel>() {
+                protected void initChannel(Channel channel) {
+                    Connection.setInitialProtocolAttributes(channel);
+
+                    try {
+                        channel.config().setOption(ChannelOption.TCP_NODELAY, true);
+                    } catch (ChannelException channelexception) {
+                        ;
+                    }
+
+                    ChannelPipeline channelpipeline = channel.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyQueryHandler(ServerConnectionListener.this.getServer()));
+
+                    Connection.configureSerialization(channelpipeline, PacketFlow.SERVERBOUND, (BandwidthDebugMonitor) null);
+                    int j = ServerConnectionListener.this.server.getRateLimitPacketsPerSecond();
+                    Connection object = j > 0 ? new RateKickingConnection(j) : new Connection(PacketFlow.SERVERBOUND); // CraftBukkit - decompile error
+
+                    ServerConnectionListener.this.connections.add(object);
+                    ((Connection) object).configurePacketHandler(channelpipeline);
+                    ((Connection) object).setListenerForServerboundHandshake(new ServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, (Connection) object));
+                }
+            }).group(eventloopgroup).localAddress(address, port)).option(ChannelOption.AUTO_READ, false).bind().syncUninterruptibly()); // CraftBukkit
         }
     }
 
+    // CraftBukkit start
+    public void acceptConnections() {
+        synchronized (this.channels) {
+            for (ChannelFuture future : this.channels) {
+                future.channel().config().setAutoRead(true);
+            }
+        }
+    }
+    // CraftBukkit end
+
     public SocketAddress startMemoryChannel() {
-        ChannelFuture channelFuture;
+        List list = this.channels;
+        ChannelFuture channelfuture;
+
         synchronized (this.channels) {
-            channelFuture = new ServerBootstrap()
-                .channel(LocalServerChannel.class)
-                .childHandler(
-                    new ChannelInitializer<Channel>() {
-                        @Override
-                        protected void initChannel(Channel channel) {
-                            Connection.setInitialProtocolAttributes(channel);
-                            Connection connection = new Connection(PacketFlow.SERVERBOUND);
-                            connection.setListenerForServerboundHandshake(
-                                new MemoryServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, connection)
-                            );
-                            ServerConnectionListener.this.connections.add(connection);
-                            ChannelPipeline channelPipeline = channel.pipeline();
-                            Connection.configureInMemoryPipeline(channelPipeline, PacketFlow.SERVERBOUND);
-                            connection.configurePacketHandler(channelPipeline);
-                        }
-                    }
-                )
-                .group(SERVER_EVENT_GROUP.get())
-                .localAddress(LocalAddress.ANY)
-                .bind()
-                .syncUninterruptibly();
-            this.channels.add(channelFuture);
+            channelfuture = ((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(LocalServerChannel.class)).childHandler(new ChannelInitializer<Channel>() {
+                protected void initChannel(Channel channel) {
+                    Connection.setInitialProtocolAttributes(channel);
+                    Connection networkmanager = new Connection(PacketFlow.SERVERBOUND);
+
+                    networkmanager.setListenerForServerboundHandshake(new MemoryServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, networkmanager));
+                    ServerConnectionListener.this.connections.add(networkmanager);
+                    ChannelPipeline channelpipeline = channel.pipeline();
+
+                    Connection.configureInMemoryPipeline(channelpipeline, PacketFlow.SERVERBOUND);
+                    networkmanager.configurePacketHandler(channelpipeline);
+                }
+            }).group((EventLoopGroup) ServerConnectionListener.SERVER_EVENT_GROUP.get()).localAddress(LocalAddress.ANY)).bind().syncUninterruptibly();
+            this.channels.add(channelfuture);
         }
 
-        return channelFuture.channel().localAddress();
+        return channelfuture.channel().localAddress();
     }
 
     public void stop() {
         this.running = false;
+        Iterator iterator = this.channels.iterator();
 
-        for (ChannelFuture channelFuture : this.channels) {
+        while (iterator.hasNext()) {
+            ChannelFuture channelfuture = (ChannelFuture) iterator.next();
+
             try {
-                channelFuture.channel().close().sync();
-            } catch (InterruptedException var4) {
-                LOGGER.error("Interrupted whilst closing channel");
+                channelfuture.channel().close().sync();
+            } catch (InterruptedException interruptedexception) {
+                ServerConnectionListener.LOGGER.error("Interrupted whilst closing channel");
             }
         }
+
     }
 
     public void tick() {
+        List list = this.connections;
+
         synchronized (this.connections) {
-            Iterator<Connection> iterator = this.connections.iterator();
+            Iterator iterator = this.connections.iterator();
 
             while (iterator.hasNext()) {
-                Connection connection = iterator.next();
-                if (!connection.isConnecting()) {
-                    if (connection.isConnected()) {
+                Connection networkmanager = (Connection) iterator.next();
+
+                if (!networkmanager.isConnecting()) {
+                    if (networkmanager.isConnected()) {
                         try {
-                            connection.tick();
-                        } catch (Exception var7) {
-                            if (connection.isMemoryConnection()) {
-                                throw new ReportedException(CrashReport.forThrowable(var7, "Ticking memory connection"));
+                            networkmanager.tick();
+                        } catch (Exception exception) {
+                            if (networkmanager.isMemoryConnection()) {
+                                throw new ReportedException(CrashReport.forThrowable(exception, "Ticking memory connection"));
                             }
 
-                            LOGGER.warn("Failed to handle packet for {}", connection.getLoggableAddress(this.server.logIPs()), var7);
-                            Component component = Component.literal("Internal server error");
-                            connection.send(new ClientboundDisconnectPacket(component), PacketSendListener.thenRun(() -> connection.disconnect(component)));
-                            connection.setReadOnly();
+                            ServerConnectionListener.LOGGER.warn("Failed to handle packet for {}", networkmanager.getLoggableAddress(this.server.logIPs()), exception);
+                            MutableComponent ichatmutablecomponent = Component.literal("Internal server error");
+
+                            networkmanager.send(new ClientboundDisconnectPacket(ichatmutablecomponent), PacketSendListener.thenRun(() -> {
+                                networkmanager.disconnect(ichatmutablecomponent);
+                            }));
+                            networkmanager.setReadOnly();
                         }
                     } else {
                         iterator.remove();
-                        connection.handleDisconnection();
+                        networkmanager.handleDisconnection();
                     }
                 }
             }
+
         }
     }
 
@@ -197,7 +202,8 @@
         return this.connections;
     }
 
-    static class LatencySimulator extends ChannelInboundHandlerAdapter {
+    private static class LatencySimulator extends ChannelInboundHandlerAdapter {
+
         private static final Timer TIMER = new HashedWheelTimer();
         private final int delay;
         private final int jitter;
@@ -208,29 +214,31 @@
             this.jitter = jitter;
         }
 
-        @Override
-        public void channelRead(ChannelHandlerContext ctx, Object msg) {
-            this.delayDownstream(ctx, msg);
+        public void channelRead(ChannelHandlerContext channelhandlercontext, Object object) {
+            this.delayDownstream(channelhandlercontext, object);
         }
 
         private void delayDownstream(ChannelHandlerContext ctx, Object msg) {
-            int i = this.delay + (int)(Math.random() * (double)this.jitter);
+            int i = this.delay + (int) (Math.random() * (double) this.jitter);
+
             this.queuedMessages.add(new ServerConnectionListener.LatencySimulator.DelayedMessage(ctx, msg));
-            TIMER.newTimeout(this::onTimeout, (long)i, TimeUnit.MILLISECONDS);
+            ServerConnectionListener.LatencySimulator.TIMER.newTimeout(this::onTimeout, (long) i, TimeUnit.MILLISECONDS);
         }
 
         private void onTimeout(Timeout timeout) {
-            ServerConnectionListener.LatencySimulator.DelayedMessage delayedMessage = this.queuedMessages.remove(0);
-            delayedMessage.ctx.fireChannelRead(delayedMessage.msg);
+            ServerConnectionListener.LatencySimulator.DelayedMessage serverconnection_latencysimulator_delayedmessage = (ServerConnectionListener.LatencySimulator.DelayedMessage) this.queuedMessages.remove(0);
+
+            serverconnection_latencysimulator_delayedmessage.ctx.fireChannelRead(serverconnection_latencysimulator_delayedmessage.msg);
         }
 
-        static class DelayedMessage {
+        private static class DelayedMessage {
+
             public final ChannelHandlerContext ctx;
             public final Object msg;
 
-            public DelayedMessage(ChannelHandlerContext ctx, Object msg) {
-                this.ctx = ctx;
-                this.msg = msg;
+            public DelayedMessage(ChannelHandlerContext channelhandlercontext, Object object) {
+                this.ctx = channelhandlercontext;
+                this.msg = object;
             }
         }
     }
