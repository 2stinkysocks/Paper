--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -1,15 +1,14 @@
 package net.minecraft.server.level;
 
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableList.Builder;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Queues;
 import com.google.common.collect.Sets;
-import com.google.common.collect.ImmutableList.Builder;
 import com.google.gson.JsonElement;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Either;
-import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.JsonOps;
@@ -20,16 +19,18 @@
 import it.unimi.dsi.fastutil.longs.Long2LongMap;
 import it.unimi.dsi.fastutil.longs.Long2LongOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
-import it.unimi.dsi.fastutil.longs.Long2ObjectMap.Entry;
+import it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -40,6 +41,7 @@
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
+import java.util.concurrent.CompletionStage;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BooleanSupplier;
@@ -52,6 +54,7 @@
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.Util;
+import net.minecraft.core.HolderGetter;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.registries.Registries;
@@ -85,9 +88,11 @@
 import net.minecraft.world.level.chunk.storage.ChunkSerializer;
 import net.minecraft.world.level.chunk.storage.ChunkStorage;
 import net.minecraft.world.level.entity.ChunkStatusUpdateListener;
+import net.minecraft.world.level.entity.EntityAccess;
 import net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator;
 import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
 import net.minecraft.world.level.levelgen.RandomState;
+import net.minecraft.world.level.levelgen.blending.BlendingData;
 import net.minecraft.world.level.levelgen.structure.StructureStart;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import net.minecraft.world.level.storage.DimensionDataStorage;
@@ -95,8 +100,12 @@
 import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.slf4j.Logger;
+import org.bukkit.craftbukkit.generator.CustomChunkGenerator;
+import org.bukkit.entity.Player;
+// CraftBukkit end
 
 public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider {
+
     private static final byte CHUNK_TYPE_REPLACEABLE = -1;
     private static final byte CHUNK_TYPE_UNKNOWN = 0;
     private static final byte CHUNK_TYPE_FULL = 1;
@@ -107,83 +116,109 @@
     public static final int MIN_VIEW_DISTANCE = 2;
     public static final int MAX_VIEW_DISTANCE = 32;
     public static final int FORCED_TICKET_LEVEL = ChunkLevel.byStatus(FullChunkStatus.ENTITY_TICKING);
-    private final Long2ObjectLinkedOpenHashMap<ChunkHolder> updatingChunkMap = new Long2ObjectLinkedOpenHashMap<>();
-    private volatile Long2ObjectLinkedOpenHashMap<ChunkHolder> visibleChunkMap = this.updatingChunkMap.clone();
-    private final Long2ObjectLinkedOpenHashMap<ChunkHolder> pendingUnloads = new Long2ObjectLinkedOpenHashMap<>();
-    private final LongSet entitiesInLevel = new LongOpenHashSet();
-    final ServerLevel level;
+    public final Long2ObjectLinkedOpenHashMap<ChunkHolder> updatingChunkMap = new Long2ObjectLinkedOpenHashMap();
+    public volatile Long2ObjectLinkedOpenHashMap<ChunkHolder> visibleChunkMap;
+    private final Long2ObjectLinkedOpenHashMap<ChunkHolder> pendingUnloads;
+    private final LongSet entitiesInLevel;
+    public final ServerLevel level;
     private final ThreadedLevelLightEngine lightEngine;
     private final BlockableEventLoop<Runnable> mainThreadExecutor;
-    private ChunkGenerator generator;
+    public ChunkGenerator generator;
     private final RandomState randomState;
     private final ChunkGeneratorStructureState chunkGeneratorState;
     private final Supplier<DimensionDataStorage> overworldDataStorage;
     private final PoiManager poiManager;
-    final LongSet toDrop = new LongOpenHashSet();
+    public final LongSet toDrop;
     private boolean modified;
     private final ChunkTaskPriorityQueueSorter queueSorter;
     private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> worldgenMailbox;
     private final ProcessorHandle<ChunkTaskPriorityQueueSorter.Message<Runnable>> mainThreadMailbox;
-    private final ChunkProgressListener progressListener;
+    public final ChunkProgressListener progressListener;
     private final ChunkStatusUpdateListener chunkStatusListener;
-    private final ChunkMap.DistanceManager distanceManager;
-    private final AtomicInteger tickingGenerated = new AtomicInteger();
+    public final ChunkMap.DistanceManager distanceManager;
+    private final AtomicInteger tickingGenerated;
     private final StructureTemplateManager structureTemplateManager;
     private final String storageName;
-    private final PlayerMap playerMap = new PlayerMap();
-    private final Int2ObjectMap<ChunkMap.TrackedEntity> entityMap = new Int2ObjectOpenHashMap<>();
-    private final Long2ByteMap chunkTypeCache = new Long2ByteOpenHashMap();
-    private final Long2LongMap chunkSaveCooldowns = new Long2LongOpenHashMap();
-    private final Queue<Runnable> unloadQueue = Queues.newConcurrentLinkedQueue();
+    private final PlayerMap playerMap;
+    public final Int2ObjectMap<ChunkMap.TrackedEntity> entityMap;
+    private final Long2ByteMap chunkTypeCache;
+    private final Long2LongMap chunkSaveCooldowns;
+    private final Queue<Runnable> unloadQueue;
     private int serverViewDistance;
 
-    public ChunkMap(
-        ServerLevel level,
-        LevelStorageSource.LevelStorageAccess levelStorageAccess,
-        DataFixer fixerUpper,
-        StructureTemplateManager structureManager,
-        Executor dispatcher,
-        BlockableEventLoop<Runnable> mainThreadExecutor,
-        LightChunkGetter lightChunk,
-        ChunkGenerator generator,
-        ChunkProgressListener progressListener,
-        ChunkStatusUpdateListener chunkStatusListener,
-        Supplier<DimensionDataStorage> overworldDataStorage,
-        int viewDistance,
-        boolean sync
-    ) {
+    // CraftBukkit start - recursion-safe executor for Chunk loadCallback() and unloadCallback()
+    public final CallbackExecutor callbackExecutor = new CallbackExecutor();
+    public static final class CallbackExecutor implements java.util.concurrent.Executor, Runnable {
+
+        private final java.util.Queue<Runnable> queue = new java.util.ArrayDeque<>();
+
+        @Override
+        public void execute(Runnable runnable) {
+            queue.add(runnable);
+        }
+
+        @Override
+        public void run() {
+            Runnable task;
+            while ((task = queue.poll()) != null) {
+                task.run();
+            }
+        }
+    };
+    // CraftBukkit end
+
+    public ChunkMap(ServerLevel level, LevelStorageSource.LevelStorageAccess levelStorageAccess, DataFixer fixerUpper, StructureTemplateManager structureManager, Executor dispatcher, BlockableEventLoop<Runnable> mainThreadExecutor, LightChunkGetter lightChunk, ChunkGenerator generator, ChunkProgressListener progressListener, ChunkStatusUpdateListener chunkStatusListener, Supplier<DimensionDataStorage> overworldDataStorage, int viewDistance, boolean sync) {
         super(levelStorageAccess.getDimensionPath(level.dimension()).resolve("region"), fixerUpper, sync);
+        this.visibleChunkMap = this.updatingChunkMap.clone();
+        this.pendingUnloads = new Long2ObjectLinkedOpenHashMap();
+        this.entitiesInLevel = new LongOpenHashSet();
+        this.toDrop = new LongOpenHashSet();
+        this.tickingGenerated = new AtomicInteger();
+        this.playerMap = new PlayerMap();
+        this.entityMap = new Int2ObjectOpenHashMap();
+        this.chunkTypeCache = new Long2ByteOpenHashMap();
+        this.chunkSaveCooldowns = new Long2LongOpenHashMap();
+        this.unloadQueue = Queues.newConcurrentLinkedQueue();
         this.structureTemplateManager = structureManager;
-        Path dimensionPath = levelStorageAccess.getDimensionPath(level.dimension());
-        this.storageName = dimensionPath.getFileName().toString();
+        Path path = levelStorageAccess.getDimensionPath(level.dimension());
+
+        this.storageName = path.getFileName().toString();
         this.level = level;
         this.generator = generator;
-        RegistryAccess registryAccess = level.registryAccess();
-        long seed = level.getSeed();
-        if (generator instanceof NoiseBasedChunkGenerator noiseBasedChunkGenerator) {
-            this.randomState = RandomState.create(noiseBasedChunkGenerator.generatorSettings().value(), registryAccess.lookupOrThrow(Registries.NOISE), seed);
+        // CraftBukkit start - SPIGOT-7051: It's a rigged game! Use delegate for random state creation, otherwise it is not so random.
+        if (generator instanceof CustomChunkGenerator) {
+            generator = ((CustomChunkGenerator) generator).getDelegate();
+        }
+        // CraftBukkit end
+        RegistryAccess iregistrycustom = level.registryAccess();
+        long j = level.getSeed();
+
+        if (generator instanceof NoiseBasedChunkGenerator) {
+            NoiseBasedChunkGenerator chunkgeneratorabstract = (NoiseBasedChunkGenerator) generator;
+
+            this.randomState = RandomState.create((NoiseGeneratorSettings) chunkgeneratorabstract.generatorSettings().value(), (HolderGetter) iregistrycustom.lookupOrThrow(Registries.NOISE), j);
         } else {
-            this.randomState = RandomState.create(NoiseGeneratorSettings.dummy(), registryAccess.lookupOrThrow(Registries.NOISE), seed);
+            this.randomState = RandomState.create(NoiseGeneratorSettings.dummy(), (HolderGetter) iregistrycustom.lookupOrThrow(Registries.NOISE), j);
         }
 
-        this.chunkGeneratorState = generator.createState(registryAccess.lookupOrThrow(Registries.STRUCTURE_SET), this.randomState, seed);
+        this.chunkGeneratorState = generator.createState(iregistrycustom.lookupOrThrow(Registries.STRUCTURE_SET), this.randomState, j);
         this.mainThreadExecutor = mainThreadExecutor;
-        ProcessorMailbox<Runnable> processorMailbox = ProcessorMailbox.create(dispatcher, "worldgen");
-        ProcessorHandle<Runnable> processorHandle = ProcessorHandle.of("main", mainThreadExecutor::tell);
+        ProcessorMailbox<Runnable> threadedmailbox = ProcessorMailbox.create(dispatcher, "worldgen");
+
+        Objects.requireNonNull(mainThreadExecutor);
+        ProcessorHandle<Runnable> mailbox = ProcessorHandle.of("main", mainThreadExecutor::tell);
+
         this.progressListener = progressListener;
         this.chunkStatusListener = chunkStatusListener;
-        ProcessorMailbox<Runnable> processorMailbox1 = ProcessorMailbox.create(dispatcher, "light");
-        this.queueSorter = new ChunkTaskPriorityQueueSorter(
-            ImmutableList.of(processorMailbox, processorHandle, processorMailbox1), dispatcher, Integer.MAX_VALUE
-        );
-        this.worldgenMailbox = this.queueSorter.getProcessor(processorMailbox, false);
-        this.mainThreadMailbox = this.queueSorter.getProcessor(processorHandle, false);
-        this.lightEngine = new ThreadedLevelLightEngine(
-            lightChunk, this, this.level.dimensionType().hasSkyLight(), processorMailbox1, this.queueSorter.getProcessor(processorMailbox1, false)
-        );
+        ProcessorMailbox<Runnable> threadedmailbox1 = ProcessorMailbox.create(dispatcher, "light");
+
+        this.queueSorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(threadedmailbox, mailbox, threadedmailbox1), dispatcher, Integer.MAX_VALUE);
+        this.worldgenMailbox = this.queueSorter.getProcessor(threadedmailbox, false);
+        this.mainThreadMailbox = this.queueSorter.getProcessor(mailbox, false);
+        this.lightEngine = new ThreadedLevelLightEngine(lightChunk, this, this.level.dimensionType().hasSkyLight(), threadedmailbox1, this.queueSorter.getProcessor(threadedmailbox1, false));
         this.distanceManager = new ChunkMap.DistanceManager(dispatcher, mainThreadExecutor);
         this.overworldDataStorage = overworldDataStorage;
-        this.poiManager = new PoiManager(dimensionPath.resolve("poi"), fixerUpper, sync, registryAccess, level);
+        this.poiManager = new PoiManager(path.resolve("poi"), fixerUpper, sync, iregistrycustom, level);
         this.setServerViewDistance(viewDistance);
     }
 
@@ -200,30 +235,36 @@
     }
 
     public void debugReloadGenerator() {
-        DataResult<JsonElement> dataResult = ChunkGenerator.CODEC.encodeStart(JsonOps.INSTANCE, this.generator);
-        DataResult<ChunkGenerator> dataResult1 = dataResult.flatMap(jsonElement -> ChunkGenerator.CODEC.parse(JsonOps.INSTANCE, jsonElement));
-        dataResult1.result().ifPresent(generator -> this.generator = generator);
+        DataResult<JsonElement> dataresult = ChunkGenerator.CODEC.encodeStart(JsonOps.INSTANCE, this.generator);
+        DataResult<ChunkGenerator> dataresult1 = dataresult.flatMap((jsonelement) -> {
+            return ChunkGenerator.CODEC.parse(JsonOps.INSTANCE, jsonelement);
+        });
+
+        dataresult1.result().ifPresent((chunkgenerator) -> {
+            this.generator = chunkgenerator;
+        });
     }
 
     private static double euclideanDistanceSquared(ChunkPos chunkPos, Entity entity) {
-        double d = (double)SectionPos.sectionToBlockCoord(chunkPos.x, 8);
-        double d1 = (double)SectionPos.sectionToBlockCoord(chunkPos.z, 8);
-        double d2 = d - entity.getX();
+        double d0 = (double) SectionPos.sectionToBlockCoord(chunkPos.x, 8);
+        double d1 = (double) SectionPos.sectionToBlockCoord(chunkPos.z, 8);
+        double d2 = d0 - entity.getX();
         double d3 = d1 - entity.getZ();
+
         return d2 * d2 + d3 * d3;
     }
 
-    boolean isChunkTracked(ServerPlayer serverPlayer, int i, int i1) {
-        return serverPlayer.getChunkTrackingView().contains(i, i1) && !serverPlayer.connection.chunkSender.isPending(ChunkPos.asLong(i, i1));
+    boolean isChunkTracked(ServerPlayer entityplayer, int i, int j) {
+        return entityplayer.getChunkTrackingView().contains(i, j) && !entityplayer.connection.chunkSender.isPending(ChunkPos.asLong(i, j));
     }
 
-    private boolean isChunkOnTrackedBorder(ServerPlayer serverPlayer, int i, int i1) {
-        if (!this.isChunkTracked(serverPlayer, i, i1)) {
+    private boolean isChunkOnTrackedBorder(ServerPlayer entityplayer, int i, int j) {
+        if (!this.isChunkTracked(entityplayer, i, j)) {
             return false;
         } else {
-            for (int i2 = -1; i2 <= 1; i2++) {
-                for (int i3 = -1; i3 <= 1; i3++) {
-                    if ((i2 != 0 || i3 != 0) && !this.isChunkTracked(serverPlayer, i + i2, i1 + i3)) {
+            for (int k = -1; k <= 1; ++k) {
+                for (int l = -1; l <= 1; ++l) {
+                    if ((k != 0 || l != 0) && !this.isChunkTracked(entityplayer, i + k, j + l)) {
                         return true;
                     }
                 }
@@ -239,181 +280,194 @@
 
     @Nullable
     protected ChunkHolder getUpdatingChunkIfPresent(long chunkPos) {
-        return this.updatingChunkMap.get(chunkPos);
+        return (ChunkHolder) this.updatingChunkMap.get(chunkPos);
     }
 
     @Nullable
     protected ChunkHolder getVisibleChunkIfPresent(long chunkPos) {
-        return this.visibleChunkMap.get(chunkPos);
+        return (ChunkHolder) this.visibleChunkMap.get(chunkPos);
     }
 
     protected IntSupplier getChunkQueueLevel(long chunkPos) {
         return () -> {
-            ChunkHolder visibleChunkIfPresent = this.getVisibleChunkIfPresent(chunkPos);
-            return visibleChunkIfPresent == null
-                ? ChunkTaskPriorityQueue.PRIORITY_LEVEL_COUNT - 1
-                : Math.min(visibleChunkIfPresent.getQueueLevel(), ChunkTaskPriorityQueue.PRIORITY_LEVEL_COUNT - 1);
+            ChunkHolder playerchunk = this.getVisibleChunkIfPresent(chunkPos);
+
+            return playerchunk == null ? ChunkTaskPriorityQueue.PRIORITY_LEVEL_COUNT - 1 : Math.min(playerchunk.getQueueLevel(), ChunkTaskPriorityQueue.PRIORITY_LEVEL_COUNT - 1);
         };
     }
 
     public String getChunkDebugData(ChunkPos pos) {
-        ChunkHolder visibleChunkIfPresent = this.getVisibleChunkIfPresent(pos.toLong());
-        if (visibleChunkIfPresent == null) {
+        ChunkHolder playerchunk = this.getVisibleChunkIfPresent(pos.toLong());
+
+        if (playerchunk == null) {
             return "null";
         } else {
-            String string = visibleChunkIfPresent.getTicketLevel() + "\n";
-            ChunkStatus lastAvailableStatus = visibleChunkIfPresent.getLastAvailableStatus();
-            ChunkAccess lastAvailable = visibleChunkIfPresent.getLastAvailable();
-            if (lastAvailableStatus != null) {
-                string = string + "St: §" + lastAvailableStatus.getIndex() + lastAvailableStatus + "§r\n";
+            String s = playerchunk.getTicketLevel() + "\n";
+            ChunkStatus chunkstatus = playerchunk.getLastAvailableStatus();
+            ChunkAccess ichunkaccess = playerchunk.getLastAvailable();
+
+            if (chunkstatus != null) {
+                s = s + "St: \u00a7" + chunkstatus.getIndex() + chunkstatus + "\u00a7r\n";
             }
 
-            if (lastAvailable != null) {
-                string = string + "Ch: §" + lastAvailable.getStatus().getIndex() + lastAvailable.getStatus() + "§r\n";
+            if (ichunkaccess != null) {
+                s = s + "Ch: \u00a7" + ichunkaccess.getStatus().getIndex() + ichunkaccess.getStatus() + "\u00a7r\n";
             }
 
-            FullChunkStatus fullStatus = visibleChunkIfPresent.getFullStatus();
-            string = string + '§' + fullStatus.ordinal() + fullStatus;
-            return string + "§r";
+            FullChunkStatus fullchunkstatus = playerchunk.getFullStatus();
+
+            s = s + String.valueOf('\u00a7') + fullchunkstatus.ordinal() + fullchunkstatus;
+            return s + "\u00a7r";
         }
     }
 
-    private CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> getChunkRangeFuture(
-        ChunkHolder chunkHolder, int range, IntFunction<ChunkStatus> statusGetter
-    ) {
+    private CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.Failure>> getChunkRangeFuture(ChunkHolder chunkHolder, int range, IntFunction<ChunkStatus> statusGetter) {
         if (range == 0) {
-            ChunkStatus chunkStatus = statusGetter.apply(0);
-            return chunkHolder.getOrScheduleFuture(chunkStatus, this).thenApply(either -> either.mapLeft(List::of));
+            ChunkStatus chunkstatus = (ChunkStatus) statusGetter.apply(0);
+
+            return chunkHolder.getOrScheduleFuture(chunkstatus, this).thenApply((either) -> {
+                return either.mapLeft(List::of);
+            });
         } else {
-            List<CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> list = new ArrayList<>();
-            List<ChunkHolder> list1 = new ArrayList<>();
-            ChunkPos pos = chunkHolder.getPos();
-            int i = pos.x;
-            int i1 = pos.z;
+            List<CompletableFuture<Either<ChunkAccess, ChunkHolder.Failure>>> list = new ArrayList();
+            List<ChunkHolder> list1 = new ArrayList();
+            ChunkPos chunkcoordintpair = chunkHolder.getPos();
+            int j = chunkcoordintpair.x;
+            int k = chunkcoordintpair.z;
 
-            for (int i2 = -range; i2 <= range; i2++) {
-                for (int i3 = -range; i3 <= range; i3++) {
-                    int max = Math.max(Math.abs(i3), Math.abs(i2));
-                    final ChunkPos chunkPos = new ChunkPos(i + i3, i1 + i2);
-                    long l = chunkPos.toLong();
-                    ChunkHolder updatingChunkIfPresent = this.getUpdatingChunkIfPresent(l);
-                    if (updatingChunkIfPresent == null) {
-                        return CompletableFuture.completedFuture(Either.right(new ChunkHolder.ChunkLoadingFailure() {
-                            @Override
+            for (int l = -range; l <= range; ++l) {
+                for (int i1 = -range; i1 <= range; ++i1) {
+                    int j1 = Math.max(Math.abs(i1), Math.abs(l));
+                    final ChunkPos chunkcoordintpair1 = new ChunkPos(j + i1, k + l);
+                    long k1 = chunkcoordintpair1.toLong();
+                    ChunkHolder playerchunk1 = this.getUpdatingChunkIfPresent(k1);
+
+                    if (playerchunk1 == null) {
+                        return CompletableFuture.completedFuture(Either.right(new ChunkHolder.Failure() {
                             public String toString() {
-                                return "Unloaded " + chunkPos;
+                                return "Unloaded " + chunkcoordintpair1;
                             }
                         }));
                     }
 
-                    ChunkStatus chunkStatus1 = statusGetter.apply(max);
-                    CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> orScheduleFuture = updatingChunkIfPresent.getOrScheduleFuture(
-                        chunkStatus1, this
-                    );
-                    list1.add(updatingChunkIfPresent);
-                    list.add(orScheduleFuture);
+                    ChunkStatus chunkstatus1 = (ChunkStatus) statusGetter.apply(j1);
+                    CompletableFuture<Either<ChunkAccess, ChunkHolder.Failure>> completablefuture = playerchunk1.getOrScheduleFuture(chunkstatus1, this);
+
+                    list1.add(playerchunk1);
+                    list.add(completablefuture);
                 }
             }
 
-            CompletableFuture<List<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> completableFuture = Util.sequence(list);
-            CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> completableFuture1 = completableFuture.thenApply(list2 -> {
+            CompletableFuture<List<Either<ChunkAccess, ChunkHolder.Failure>>> completablefuture1 = Util.sequence(list);
+            CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.Failure>> completablefuture2 = completablefuture1.thenApply((list2) -> {
                 List<ChunkAccess> list3 = Lists.newArrayList();
-                int i4 = 0;
+                // CraftBukkit start - decompile error
+                int cnt = 0;
 
-                for (final Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either : list2) {
+                for (Iterator iterator = list2.iterator(); iterator.hasNext(); ++cnt) {
+                    final int l1 = cnt;
+                    // CraftBukkit end
+                    final Either<ChunkAccess, ChunkHolder.Failure> either = (Either) iterator.next();
+
                     if (either == null) {
                         throw this.debugFuturesAndCreateReportedException(new IllegalStateException("At least one of the chunk futures were null"), "n/a");
                     }
 
                     Optional<ChunkAccess> optional = either.left();
+
                     if (optional.isEmpty()) {
-                        final int i5 = i4;
-                        return Either.right(new ChunkHolder.ChunkLoadingFailure() {
-                            @Override
+                        return Either.right(new ChunkHolder.Failure() {
                             public String toString() {
-                                return "Unloaded " + new ChunkPos(i + i5 % (range * 2 + 1), i1 + i5 / (range * 2 + 1)) + " " + either.right().get();
+                                ChunkPos chunkcoordintpair2 = new ChunkPos(j + l1 % (range * 2 + 1), k + l1 / (range * 2 + 1));
+
+                                return "Unloaded " + chunkcoordintpair2 + " " + either.right().get();
                             }
                         });
                     }
 
-                    list3.add(optional.get());
-                    i4++;
+                    list3.add((ChunkAccess) optional.get());
                 }
 
                 return Either.left(list3);
             });
+            Iterator iterator = list1.iterator();
 
-            for (ChunkHolder chunkHolder1 : list1) {
-                chunkHolder1.addSaveDependency("getChunkRangeFuture " + pos + " " + range, completableFuture1);
+            while (iterator.hasNext()) {
+                ChunkHolder playerchunk2 = (ChunkHolder) iterator.next();
+
+                playerchunk2.addSaveDependency("getChunkRangeFuture " + chunkcoordintpair + " " + range, completablefuture2);
             }
 
-            return completableFuture1;
+            return completablefuture2;
         }
     }
 
     public ReportedException debugFuturesAndCreateReportedException(IllegalStateException exception, String details) {
-        StringBuilder stringBuilder = new StringBuilder();
-        Consumer<ChunkHolder> consumer = chunkHolder -> chunkHolder.getAllFutures()
-                .forEach(
-                    pair -> {
-                        ChunkStatus chunkStatus = pair.getFirst();
-                        CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture = pair.getSecond();
-                        if (completableFuture != null && completableFuture.isDone() && completableFuture.join() == null) {
-                            stringBuilder.append(chunkHolder.getPos())
-                                .append(" - status: ")
-                                .append(chunkStatus)
-                                .append(" future: ")
-                                .append(completableFuture)
-                                .append(System.lineSeparator());
-                        }
-                    }
-                );
-        stringBuilder.append("Updating:").append(System.lineSeparator());
+        StringBuilder stringbuilder = new StringBuilder();
+        Consumer<ChunkHolder> consumer = (playerchunk) -> {
+            playerchunk.getAllFutures().forEach((pair) -> {
+                ChunkStatus chunkstatus = (ChunkStatus) pair.getFirst();
+                CompletableFuture<Either<ChunkAccess, ChunkHolder.Failure>> completablefuture = (CompletableFuture) pair.getSecond();
+
+                if (completablefuture != null && completablefuture.isDone() && completablefuture.join() == null) {
+                    stringbuilder.append(playerchunk.getPos()).append(" - status: ").append(chunkstatus).append(" future: ").append(completablefuture).append(System.lineSeparator());
+                }
+
+            });
+        };
+
+        stringbuilder.append("Updating:").append(System.lineSeparator());
         this.updatingChunkMap.values().forEach(consumer);
-        stringBuilder.append("Visible:").append(System.lineSeparator());
+        stringbuilder.append("Visible:").append(System.lineSeparator());
         this.visibleChunkMap.values().forEach(consumer);
-        CrashReport crashReport = CrashReport.forThrowable(exception, "Chunk loading");
-        CrashReportCategory crashReportCategory = crashReport.addCategory("Chunk loading");
-        crashReportCategory.setDetail("Details", details);
-        crashReportCategory.setDetail("Futures", stringBuilder);
-        return new ReportedException(crashReport);
+        CrashReport crashreport = CrashReport.forThrowable(exception, "Chunk loading");
+        CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Chunk loading");
+
+        crashreportsystemdetails.setDetail("Details", (Object) details);
+        crashreportsystemdetails.setDetail("Futures", (Object) stringbuilder);
+        return new ReportedException(crashreport);
     }
 
-    public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> prepareEntityTickingChunk(ChunkHolder chunk) {
-        return this.getChunkRangeFuture(chunk, 2, i -> ChunkStatus.FULL)
-            .thenApplyAsync(either -> either.mapLeft(list -> (LevelChunk)list.get(list.size() / 2)), this.mainThreadExecutor);
+    public CompletableFuture<Either<LevelChunk, ChunkHolder.Failure>> prepareEntityTickingChunk(ChunkHolder chunk) {
+        return this.getChunkRangeFuture(chunk, 2, (i) -> {
+            return ChunkStatus.FULL;
+        }).thenApplyAsync((either) -> {
+            return either.mapLeft((list) -> {
+                return (LevelChunk) list.get(list.size() / 2);
+            });
+        }, this.mainThreadExecutor);
     }
 
     @Nullable
-    ChunkHolder updateChunkScheduling(long chunkPos, int newLevel, @Nullable ChunkHolder holder, int oldLevel) {
-        if (!ChunkLevel.isLoaded(oldLevel) && !ChunkLevel.isLoaded(newLevel)) {
-            return holder;
+    ChunkHolder updateChunkScheduling(long chunkPos, int j, @Nullable ChunkHolder newLevel, int holder) {
+        if (!ChunkLevel.isLoaded(holder) && !ChunkLevel.isLoaded(j)) {
+            return newLevel;
         } else {
-            if (holder != null) {
-                holder.setTicketLevel(newLevel);
+            if (newLevel != null) {
+                newLevel.setTicketLevel(j);
             }
 
-            if (holder != null) {
-                if (!ChunkLevel.isLoaded(newLevel)) {
+            if (newLevel != null) {
+                if (!ChunkLevel.isLoaded(j)) {
                     this.toDrop.add(chunkPos);
                 } else {
                     this.toDrop.remove(chunkPos);
                 }
             }
 
-            if (ChunkLevel.isLoaded(newLevel) && holder == null) {
-                holder = this.pendingUnloads.remove(chunkPos);
-                if (holder != null) {
-                    holder.setTicketLevel(newLevel);
+            if (ChunkLevel.isLoaded(j) && newLevel == null) {
+                newLevel = (ChunkHolder) this.pendingUnloads.remove(chunkPos);
+                if (newLevel != null) {
+                    newLevel.setTicketLevel(j);
                 } else {
-                    holder = new ChunkHolder(new ChunkPos(chunkPos), newLevel, this.level, this.lightEngine, this.queueSorter, this);
+                    newLevel = new ChunkHolder(new ChunkPos(chunkPos), j, this.level, this.lightEngine, this.queueSorter, this);
                 }
 
-                this.updatingChunkMap.put(chunkPos, holder);
+                this.updatingChunkMap.put(chunkPos, newLevel);
                 this.modified = true;
             }
 
-            return holder;
+            return newLevel;
         }
     }
 
@@ -425,124 +479,133 @@
         } finally {
             super.close();
         }
+
     }
 
     protected void saveAllChunks(boolean flush) {
         if (flush) {
-            List<ChunkHolder> list = this.visibleChunkMap
-                .values()
-                .stream()
-                .filter(ChunkHolder::wasAccessibleSinceLastSave)
-                .peek(ChunkHolder::refreshAccessibility)
-                .toList();
-            MutableBoolean mutableBoolean = new MutableBoolean();
+            List<ChunkHolder> list = this.visibleChunkMap.values().stream().filter(ChunkHolder::wasAccessibleSinceLastSave).peek(ChunkHolder::refreshAccessibility).toList();
+            MutableBoolean mutableboolean = new MutableBoolean();
 
             do {
-                mutableBoolean.setFalse();
-                list.stream()
-                    .map(chunkHolder -> {
-                        CompletableFuture<ChunkAccess> chunkToSave;
-                        do {
-                            chunkToSave = chunkHolder.getChunkToSave();
-                            this.mainThreadExecutor.managedBlock(chunkToSave::isDone);
-                        } while (chunkToSave != chunkHolder.getChunkToSave());
-    
-                        return chunkToSave.join();
-                    })
-                    .filter(chunkAccess -> chunkAccess instanceof ImposterProtoChunk || chunkAccess instanceof LevelChunk)
-                    .filter(this::save)
-                    .forEach(chunkAccess -> mutableBoolean.setTrue());
-            } while (mutableBoolean.isTrue());
+                mutableboolean.setFalse();
+                list.stream().map((playerchunk) -> {
+                    CompletableFuture completablefuture;
 
-            this.processUnloads(() -> true);
+                    do {
+                        completablefuture = playerchunk.getChunkToSave();
+                        BlockableEventLoop iasynctaskhandler = this.mainThreadExecutor;
+
+                        Objects.requireNonNull(completablefuture);
+                        iasynctaskhandler.managedBlock(completablefuture::isDone);
+                    } while (completablefuture != playerchunk.getChunkToSave());
+
+                    return (ChunkAccess) completablefuture.join();
+                }).filter((ichunkaccess) -> {
+                    return ichunkaccess instanceof ImposterProtoChunk || ichunkaccess instanceof LevelChunk;
+                }).filter(this::save).forEach((ichunkaccess) -> {
+                    mutableboolean.setTrue();
+                });
+            } while (mutableboolean.isTrue());
+
+            this.processUnloads(() -> {
+                return true;
+            });
             this.flushWorker();
         } else {
             this.visibleChunkMap.values().forEach(this::saveChunkIfNeeded);
         }
+
     }
 
     protected void tick(BooleanSupplier hasMoreTime) {
-        ProfilerFiller profiler = this.level.getProfiler();
-        profiler.push("poi");
+        ProfilerFiller gameprofilerfiller = this.level.getProfiler();
+
+        gameprofilerfiller.push("poi");
         this.poiManager.tick(hasMoreTime);
-        profiler.popPush("chunk_unload");
+        gameprofilerfiller.popPush("chunk_unload");
         if (!this.level.noSave()) {
             this.processUnloads(hasMoreTime);
         }
 
-        profiler.pop();
+        gameprofilerfiller.pop();
     }
 
     public boolean hasWork() {
-        return this.lightEngine.hasLightWork()
-            || !this.pendingUnloads.isEmpty()
-            || !this.updatingChunkMap.isEmpty()
-            || this.poiManager.hasWork()
-            || !this.toDrop.isEmpty()
-            || !this.unloadQueue.isEmpty()
-            || this.queueSorter.hasWork()
-            || this.distanceManager.hasTickets();
+        return this.lightEngine.hasLightWork() || !this.pendingUnloads.isEmpty() || !this.updatingChunkMap.isEmpty() || this.poiManager.hasWork() || !this.toDrop.isEmpty() || !this.unloadQueue.isEmpty() || this.queueSorter.hasWork() || this.distanceManager.hasTickets();
     }
 
     private void processUnloads(BooleanSupplier hasMoreTime) {
-        LongIterator longIterator = this.toDrop.iterator();
+        LongIterator longiterator = this.toDrop.iterator();
 
-        for (int i = 0; longIterator.hasNext() && (hasMoreTime.getAsBoolean() || i < 200 || this.toDrop.size() > 2000); longIterator.remove()) {
-            long l = longIterator.nextLong();
-            ChunkHolder chunkHolder = this.updatingChunkMap.remove(l);
-            if (chunkHolder != null) {
-                this.pendingUnloads.put(l, chunkHolder);
+        for (int i = 0; longiterator.hasNext() && (hasMoreTime.getAsBoolean() || i < 200 || this.toDrop.size() > 2000); longiterator.remove()) {
+            long j = longiterator.nextLong();
+            ChunkHolder playerchunk = (ChunkHolder) this.updatingChunkMap.remove(j);
+
+            if (playerchunk != null) {
+                this.pendingUnloads.put(j, playerchunk);
                 this.modified = true;
-                i++;
-                this.scheduleUnload(l, chunkHolder);
+                ++i;
+                this.scheduleUnload(j, playerchunk);
             }
         }
 
-        int max = Math.max(0, this.unloadQueue.size() - 2000);
+        int k = Math.max(0, this.unloadQueue.size() - 2000);
 
         Runnable runnable;
-        while ((hasMoreTime.getAsBoolean() || max > 0) && (runnable = this.unloadQueue.poll()) != null) {
-            max--;
+
+        while ((hasMoreTime.getAsBoolean() || k > 0) && (runnable = (Runnable) this.unloadQueue.poll()) != null) {
+            --k;
             runnable.run();
         }
 
-        int i1 = 0;
-        ObjectIterator<ChunkHolder> objectIterator = this.visibleChunkMap.values().iterator();
+        int l = 0;
+        ObjectIterator objectiterator = this.visibleChunkMap.values().iterator();
 
-        while (i1 < 20 && hasMoreTime.getAsBoolean() && objectIterator.hasNext()) {
-            if (this.saveChunkIfNeeded(objectIterator.next())) {
-                i1++;
+        while (l < 20 && hasMoreTime.getAsBoolean() && objectiterator.hasNext()) {
+            if (this.saveChunkIfNeeded((ChunkHolder) objectiterator.next())) {
+                ++l;
             }
         }
+
     }
 
-    private void scheduleUnload(long chunkPos, ChunkHolder chunkHolder) {
-        CompletableFuture<ChunkAccess> chunkToSave = chunkHolder.getChunkToSave();
-        chunkToSave.thenAcceptAsync(chunkAccess -> {
-            CompletableFuture<ChunkAccess> chunkToSave1 = chunkHolder.getChunkToSave();
-            if (chunkToSave1 != chunkToSave) {
-                this.scheduleUnload(chunkPos, chunkHolder);
+    private void scheduleUnload(long chunkPos, ChunkHolder playerchunk) {
+        CompletableFuture<ChunkAccess> completablefuture = playerchunk.getChunkToSave();
+        Consumer<ChunkAccess> consumer = (ichunkaccess) -> { // CraftBukkit - decompile error
+            CompletableFuture<ChunkAccess> completablefuture1 = playerchunk.getChunkToSave();
+
+            if (completablefuture1 != completablefuture) {
+                this.scheduleUnload(chunkPos, playerchunk);
             } else {
-                if (this.pendingUnloads.remove(chunkPos, chunkHolder) && chunkAccess != null) {
-                    if (chunkAccess instanceof LevelChunk) {
-                        ((LevelChunk)chunkAccess).setLoaded(false);
+                if (this.pendingUnloads.remove(chunkPos, playerchunk) && ichunkaccess != null) {
+                    if (ichunkaccess instanceof LevelChunk) {
+                        ((LevelChunk) ichunkaccess).setLoaded(false);
                     }
 
-                    this.save(chunkAccess);
-                    if (this.entitiesInLevel.remove(chunkPos) && chunkAccess instanceof LevelChunk levelChunk) {
-                        this.level.unload(levelChunk);
+                    this.save(ichunkaccess);
+                    if (this.entitiesInLevel.remove(chunkPos) && ichunkaccess instanceof LevelChunk) {
+                        LevelChunk chunk = (LevelChunk) ichunkaccess;
+
+                        this.level.unload(chunk);
                     }
 
-                    this.lightEngine.updateChunkStatus(chunkAccess.getPos());
+                    this.lightEngine.updateChunkStatus(ichunkaccess.getPos());
                     this.lightEngine.tryScheduleUpdate();
-                    this.progressListener.onStatusChange(chunkAccess.getPos(), null);
-                    this.chunkSaveCooldowns.remove(chunkAccess.getPos().toLong());
+                    this.progressListener.onStatusChange(ichunkaccess.getPos(), (ChunkStatus) null);
+                    this.chunkSaveCooldowns.remove(ichunkaccess.getPos().toLong());
                 }
+
             }
-        }, this.unloadQueue::add).whenComplete((_void, throwable) -> {
+        };
+        Queue queue = this.unloadQueue;
+
+        Objects.requireNonNull(this.unloadQueue);
+        completablefuture.thenAcceptAsync(consumer, queue::add).whenComplete((ovoid, throwable) -> {
             if (throwable != null) {
-                LOGGER.error("Failed to save chunk {}", chunkHolder.getPos(), throwable);
+                ChunkMap.LOGGER.error("Failed to save chunk {}", playerchunk.getPos(), throwable);
             }
+
         });
     }
 
@@ -556,23 +619,26 @@
         }
     }
 
-    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> schedule(ChunkHolder holder, ChunkStatus status) {
-        ChunkPos pos = holder.getPos();
+    public CompletableFuture<Either<ChunkAccess, ChunkHolder.Failure>> schedule(ChunkHolder holder, ChunkStatus status) {
+        ChunkPos chunkcoordintpair = holder.getPos();
+
         if (status == ChunkStatus.EMPTY) {
-            return this.scheduleChunkLoad(pos);
+            return this.scheduleChunkLoad(chunkcoordintpair);
         } else {
             if (status == ChunkStatus.LIGHT) {
-                this.distanceManager.addTicket(TicketType.LIGHT, pos, ChunkLevel.byStatus(ChunkStatus.LIGHT), pos);
+                this.distanceManager.addTicket(TicketType.LIGHT, chunkcoordintpair, ChunkLevel.byStatus(ChunkStatus.LIGHT), chunkcoordintpair);
             }
 
             if (!status.hasLoadDependencies()) {
-                Optional<ChunkAccess> optional = holder.getOrScheduleFuture(status.getParent(), this).getNow(ChunkHolder.UNLOADED_CHUNK).left();
-                if (optional.isPresent() && optional.get().getStatus().isOrAfter(status)) {
-                    CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture = status.load(
-                        this.level, this.structureTemplateManager, this.lightEngine, chunkAccess -> this.protoChunkToFullChunk(holder), optional.get()
-                    );
-                    this.progressListener.onStatusChange(pos, status);
-                    return completableFuture;
+                Optional<ChunkAccess> optional = ((Either) holder.getOrScheduleFuture(status.getParent(), this).getNow(ChunkHolder.UNLOADED_CHUNK)).left();
+
+                if (optional.isPresent() && ((ChunkAccess) optional.get()).getStatus().isOrAfter(status)) {
+                    CompletableFuture<Either<ChunkAccess, ChunkHolder.Failure>> completablefuture = status.load(this.level, this.structureTemplateManager, this.lightEngine, (ichunkaccess) -> {
+                        return this.protoChunkToFullChunk(holder);
+                    }, (ChunkAccess) optional.get());
+
+                    this.progressListener.onStatusChange(chunkcoordintpair, status);
+                    return completablefuture;
                 }
             }
 
@@ -580,41 +646,49 @@
         }
     }
 
-    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> scheduleChunkLoad(ChunkPos chunkPos) {
-        return this.readChunk(chunkPos).thenApply(optional -> optional.filter(compoundTag -> {
-                boolean isChunkDataValid = isChunkDataValid(compoundTag);
-                if (!isChunkDataValid) {
-                    LOGGER.error("Chunk file at {} is missing level data, skipping", chunkPos);
+    private CompletableFuture<Either<ChunkAccess, ChunkHolder.Failure>> scheduleChunkLoad(ChunkPos chunkPos) {
+        return this.readChunk(chunkPos).thenApply((optional) -> {
+            return optional.filter((nbttagcompound) -> {
+                boolean flag = isChunkDataValid(nbttagcompound);
+
+                if (!flag) {
+                    ChunkMap.LOGGER.error("Chunk file at {} is missing level data, skipping", chunkPos);
                 }
 
-                return isChunkDataValid;
-            })).<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>thenApplyAsync(optional -> {
+                return flag;
+            });
+        }).thenApplyAsync((optional) -> {
             this.level.getProfiler().incrementCounter("chunkLoad");
             if (optional.isPresent()) {
-                ChunkAccess chunkAccess = ChunkSerializer.read(this.level, this.poiManager, chunkPos, optional.get());
-                this.markPosition(chunkPos, chunkAccess.getStatus().getChunkType());
-                return Either.left(chunkAccess);
+                ProtoChunk protochunk = ChunkSerializer.read(this.level, this.poiManager, chunkPos, (CompoundTag) optional.get());
+
+                this.markPosition(chunkPos, protochunk.getStatus().getChunkType());
+                return Either.<ChunkAccess, ChunkHolder.Failure>left(protochunk); // CraftBukkit - decompile error
             } else {
-                return Either.left(this.createEmptyChunk(chunkPos));
+                return Either.<ChunkAccess, ChunkHolder.Failure>left(this.createEmptyChunk(chunkPos)); // CraftBukkit - decompile error
             }
-        }, this.mainThreadExecutor).exceptionallyAsync(throwable -> this.handleChunkLoadFailure(throwable, chunkPos), this.mainThreadExecutor);
+        }, this.mainThreadExecutor).exceptionallyAsync((throwable) -> {
+            return this.handleChunkLoadFailure(throwable, chunkPos);
+        }, this.mainThreadExecutor);
     }
 
     private static boolean isChunkDataValid(CompoundTag tag) {
         return tag.contains("Status", 8);
     }
 
-    private Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> handleChunkLoadFailure(Throwable exception, ChunkPos chunkPos) {
-        if (exception instanceof ReportedException reportedException) {
-            Throwable cause = reportedException.getCause();
-            if (!(cause instanceof IOException)) {
+    private Either<ChunkAccess, ChunkHolder.Failure> handleChunkLoadFailure(Throwable exception, ChunkPos chunkPos) {
+        if (exception instanceof ReportedException) {
+            ReportedException reportedexception = (ReportedException) exception;
+            Throwable throwable1 = reportedexception.getCause();
+
+            if (!(throwable1 instanceof IOException)) {
                 this.markPositionReplaceable(chunkPos);
-                throw reportedException;
+                throw reportedexception;
             }
 
-            LOGGER.error("Couldn't load chunk {}", chunkPos, cause);
+            ChunkMap.LOGGER.error("Couldn't load chunk {}", chunkPos, throwable1);
         } else if (exception instanceof IOException) {
-            LOGGER.error("Couldn't load chunk {}", chunkPos, exception);
+            ChunkMap.LOGGER.error("Couldn't load chunk {}", chunkPos, exception);
         }
 
         return Either.left(this.createEmptyChunk(chunkPos));
@@ -622,172 +696,206 @@
 
     private ChunkAccess createEmptyChunk(ChunkPos chunkPos) {
         this.markPositionReplaceable(chunkPos);
-        return new ProtoChunk(chunkPos, UpgradeData.EMPTY, this.level, this.level.registryAccess().registryOrThrow(Registries.BIOME), null);
+        return new ProtoChunk(chunkPos, UpgradeData.EMPTY, this.level, this.level.registryAccess().registryOrThrow(Registries.BIOME), (BlendingData) null);
     }
 
     private void markPositionReplaceable(ChunkPos chunkPos) {
-        this.chunkTypeCache.put(chunkPos.toLong(), (byte)-1);
+        this.chunkTypeCache.put(chunkPos.toLong(), (byte) -1);
     }
 
-    private byte markPosition(ChunkPos chunkPos, ChunkStatus.ChunkType chunkType) {
-        return this.chunkTypeCache.put(chunkPos.toLong(), (byte)(chunkType == ChunkStatus.ChunkType.PROTOCHUNK ? -1 : 1));
+    private byte markPosition(ChunkPos chunkPos, ChunkStatus.Type chunkType) {
+        return this.chunkTypeCache.put(chunkPos.toLong(), (byte) (chunkType == ChunkStatus.Type.PROTOCHUNK ? -1 : 1));
     }
 
-    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> scheduleChunkGeneration(ChunkHolder chunkHolder, ChunkStatus chunkStatus) {
-        ChunkPos pos = chunkHolder.getPos();
-        CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> chunkRangeFuture = this.getChunkRangeFuture(
-            chunkHolder, chunkStatus.getRange(), i -> this.getDependencyStatus(chunkStatus, i)
-        );
-        this.level.getProfiler().incrementCounter(() -> "chunkGenerate " + chunkStatus);
-        Executor executor = runnable -> this.worldgenMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkHolder, runnable));
-        return chunkRangeFuture.thenComposeAsync(
-            either -> either.map(
-                    list -> {
-                        try {
-                            ChunkAccess chunkAccess = list.get(list.size() / 2);
-                            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture;
-                            if (chunkAccess.getStatus().isOrAfter(chunkStatus)) {
-                                completableFuture = chunkStatus.load(
-                                    this.level,
-                                    this.structureTemplateManager,
-                                    this.lightEngine,
-                                    chunkAccess1 -> this.protoChunkToFullChunk(chunkHolder),
-                                    chunkAccess
-                                );
-                            } else {
-                                completableFuture = chunkStatus.generate(
-                                    executor,
-                                    this.level,
-                                    this.generator,
-                                    this.structureTemplateManager,
-                                    this.lightEngine,
-                                    chunkAccess1 -> this.protoChunkToFullChunk(chunkHolder),
-                                    (List<ChunkAccess>)list
-                                );
-                            }
-        
-                            this.progressListener.onStatusChange(pos, chunkStatus);
-                            return completableFuture;
-                        } catch (Exception var9) {
-                            var9.getStackTrace();
-                            CrashReport crashReport = CrashReport.forThrowable(var9, "Exception generating new chunk");
-                            CrashReportCategory crashReportCategory = crashReport.addCategory("Chunk to be generated");
-                            crashReportCategory.setDetail("Location", String.format(Locale.ROOT, "%d,%d", pos.x, pos.z));
-                            crashReportCategory.setDetail("Position hash", ChunkPos.asLong(pos.x, pos.z));
-                            crashReportCategory.setDetail("Generator", this.generator);
-                            this.mainThreadExecutor.execute(() -> {
-                                throw new ReportedException(crashReport);
-                            });
-                            throw new ReportedException(crashReport);
-                        }
-                    },
-                    chunkLoadingFailure -> {
-                        this.releaseLightTicket(pos);
-                        return CompletableFuture.completedFuture(Either.right(chunkLoadingFailure));
+    private CompletableFuture<Either<ChunkAccess, ChunkHolder.Failure>> scheduleChunkGeneration(ChunkHolder chunkHolder, ChunkStatus chunkStatus) {
+        ChunkPos chunkcoordintpair = chunkHolder.getPos();
+        CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.Failure>> completablefuture = this.getChunkRangeFuture(chunkHolder, chunkStatus.getRange(), (i) -> {
+            return this.getDependencyStatus(chunkStatus, i);
+        });
+
+        this.level.getProfiler().incrementCounter(() -> {
+            return "chunkGenerate " + chunkStatus;
+        });
+        Executor executor = (runnable) -> {
+            this.worldgenMailbox.tell(ChunkTaskPriorityQueueSorter.message(chunkHolder, runnable));
+        };
+
+        return completablefuture.thenComposeAsync((either) -> {
+            return (CompletionStage) either.map((list) -> {
+                try {
+                    ChunkAccess ichunkaccess = (ChunkAccess) list.get(list.size() / 2);
+                    CompletableFuture completablefuture1;
+
+                    if (ichunkaccess.getStatus().isOrAfter(chunkStatus)) {
+                        completablefuture1 = chunkStatus.load(this.level, this.structureTemplateManager, this.lightEngine, (ichunkaccess1) -> {
+                            return this.protoChunkToFullChunk(chunkHolder);
+                        }, ichunkaccess);
+                    } else {
+                        completablefuture1 = chunkStatus.generate(executor, this.level, this.generator, this.structureTemplateManager, this.lightEngine, (ichunkaccess1) -> {
+                            return this.protoChunkToFullChunk(chunkHolder);
+                        }, list);
                     }
-                ),
-            executor
-        );
+
+                    this.progressListener.onStatusChange(chunkcoordintpair, chunkStatus);
+                    return completablefuture1;
+                } catch (Exception exception) {
+                    exception.getStackTrace();
+                    CrashReport crashreport = CrashReport.forThrowable(exception, "Exception generating new chunk");
+                    CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Chunk to be generated");
+
+                    crashreportsystemdetails.setDetail("Location", (Object) String.format(Locale.ROOT, "%d,%d", chunkcoordintpair.x, chunkcoordintpair.z));
+                    crashreportsystemdetails.setDetail("Position hash", (Object) ChunkPos.asLong(chunkcoordintpair.x, chunkcoordintpair.z));
+                    crashreportsystemdetails.setDetail("Generator", (Object) this.generator);
+                    this.mainThreadExecutor.execute(() -> {
+                        throw new ReportedException(crashreport);
+                    });
+                    throw new ReportedException(crashreport);
+                }
+            }, (playerchunk_failure) -> {
+                this.releaseLightTicket(chunkcoordintpair);
+                return CompletableFuture.completedFuture(Either.right(playerchunk_failure));
+            });
+        }, executor);
     }
 
     protected void releaseLightTicket(ChunkPos chunkPos) {
-        this.mainThreadExecutor
-            .tell(
-                Util.name(
-                    () -> this.distanceManager.removeTicket(TicketType.LIGHT, chunkPos, ChunkLevel.byStatus(ChunkStatus.LIGHT), chunkPos),
-                    () -> "release light ticket " + chunkPos
-                )
-            );
+        this.mainThreadExecutor.tell(Util.name(() -> {
+            this.distanceManager.removeTicket(TicketType.LIGHT, chunkPos, ChunkLevel.byStatus(ChunkStatus.LIGHT), chunkPos);
+        }, () -> {
+            return "release light ticket " + chunkPos;
+        }));
     }
 
     private ChunkStatus getDependencyStatus(ChunkStatus chunkStatus, int i) {
-        ChunkStatus parent;
+        ChunkStatus chunkstatus1;
+
         if (i == 0) {
-            parent = chunkStatus.getParent();
+            chunkstatus1 = chunkStatus.getParent();
         } else {
-            parent = ChunkStatus.getStatusAroundFullChunk(ChunkStatus.getDistance(chunkStatus) + i);
+            chunkstatus1 = ChunkStatus.getStatusAroundFullChunk(ChunkStatus.getDistance(chunkStatus) + i);
         }
 
-        return parent;
+        return chunkstatus1;
     }
 
     private static void postLoadProtoChunk(ServerLevel level, List<CompoundTag> tags) {
         if (!tags.isEmpty()) {
-            level.addWorldGenChunkEntities(EntityType.loadEntitiesRecursive(tags, level));
+            // CraftBukkit start - these are spawned serialized (DefinedStructure) and we don't call an add event below at the moment due to ordering complexities
+            level.addWorldGenChunkEntities(EntityType.loadEntitiesRecursive(tags, level).filter((entity) -> {
+                boolean needsRemoval = false;
+                net.minecraft.server.dedicated.DedicatedServer server = level.getCraftServer().getServer();
+                if (!server.areNpcsEnabled() && entity instanceof net.minecraft.world.entity.npc.NPC) {
+                    entity.discard();
+                    needsRemoval = true;
+                }
+                if (!server.isSpawningAnimals() && (entity instanceof net.minecraft.world.entity.animal.Animal || entity instanceof net.minecraft.world.entity.animal.WaterAnimal)) {
+                    entity.discard();
+                    needsRemoval = true;
+                }
+                return !needsRemoval;
+            }));
+            // CraftBukkit end
         }
+
     }
 
-    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> protoChunkToFullChunk(ChunkHolder holder) {
-        CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> futureIfPresentUnchecked = holder.getFutureIfPresentUnchecked(
-            ChunkStatus.FULL.getParent()
-        );
-        return futureIfPresentUnchecked.thenApplyAsync(either -> {
-            ChunkStatus chunkStatus = ChunkLevel.generationStatus(holder.getTicketLevel());
-            return !chunkStatus.isOrAfter(ChunkStatus.FULL) ? ChunkHolder.UNLOADED_CHUNK : either.mapLeft(chunkAccess -> {
-                ChunkPos pos = holder.getPos();
-                ProtoChunk protoChunk = (ProtoChunk)chunkAccess;
-                LevelChunk wrapped;
-                if (protoChunk instanceof ImposterProtoChunk) {
-                    wrapped = ((ImposterProtoChunk)protoChunk).getWrapped();
+    private CompletableFuture<Either<ChunkAccess, ChunkHolder.Failure>> protoChunkToFullChunk(ChunkHolder holder) {
+        CompletableFuture<Either<ChunkAccess, ChunkHolder.Failure>> completablefuture = holder.getFutureIfPresentUnchecked(ChunkStatus.FULL.getParent());
+
+        return completablefuture.thenApplyAsync((either) -> {
+            ChunkStatus chunkstatus = ChunkLevel.generationStatus(holder.getTicketLevel());
+
+            return !chunkstatus.isOrAfter(ChunkStatus.FULL) ? ChunkHolder.UNLOADED_CHUNK : either.mapLeft((ichunkaccess) -> {
+                ChunkPos chunkcoordintpair = holder.getPos();
+                ProtoChunk protochunk = (ProtoChunk) ichunkaccess;
+                LevelChunk chunk;
+
+                if (protochunk instanceof ImposterProtoChunk) {
+                    chunk = ((ImposterProtoChunk) protochunk).getWrapped();
                 } else {
-                    wrapped = new LevelChunk(this.level, protoChunk, chunk -> postLoadProtoChunk(this.level, protoChunk.getEntities()));
-                    holder.replaceProtoChunk(new ImposterProtoChunk(wrapped, false));
+                    chunk = new LevelChunk(this.level, protochunk, (chunk1) -> {
+                        postLoadProtoChunk(this.level, protochunk.getEntities());
+                    });
+                    holder.replaceProtoChunk(new ImposterProtoChunk(chunk, false));
                 }
 
-                wrapped.setFullStatus(() -> ChunkLevel.fullStatus(holder.getTicketLevel()));
-                wrapped.runPostLoad();
-                if (this.entitiesInLevel.add(pos.toLong())) {
-                    wrapped.setLoaded(true);
-                    wrapped.registerAllBlockEntitiesAfterLevelLoad();
-                    wrapped.registerTickContainerInLevel(this.level);
+                chunk.setFullStatus(() -> {
+                    return ChunkLevel.fullStatus(holder.getTicketLevel());
+                });
+                chunk.runPostLoad();
+                if (this.entitiesInLevel.add(chunkcoordintpair.toLong())) {
+                    chunk.setLoaded(true);
+                    chunk.registerAllBlockEntitiesAfterLevelLoad();
+                    chunk.registerTickContainerInLevel(this.level);
                 }
 
-                return wrapped;
+                return chunk;
             });
-        }, runnable -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(runnable, holder.getPos().toLong(), holder::getTicketLevel)));
+        }, (runnable) -> {
+            ProcessorHandle mailbox = this.mainThreadMailbox;
+            long i = holder.getPos().toLong();
+
+            Objects.requireNonNull(holder);
+            mailbox.tell(ChunkTaskPriorityQueueSorter.message(runnable, i, holder::getTicketLevel));
+        });
     }
 
-    public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> prepareTickingChunk(ChunkHolder holder) {
-        CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.ChunkLoadingFailure>> chunkRangeFuture = this.getChunkRangeFuture(
-            holder, 1, i -> ChunkStatus.FULL
-        );
-        CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> completableFuture = chunkRangeFuture.<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>>thenApplyAsync(
-                either -> either.mapLeft(list -> (LevelChunk)list.get(list.size() / 2)),
-                runnable -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(holder, runnable))
-            )
-            .thenApplyAsync(either -> either.ifLeft(levelChunk -> {
-                    levelChunk.postProcessGeneration();
-                    this.level.startTickingChunk(levelChunk);
-                    CompletableFuture<?> chunkSendSyncFuture = holder.getChunkSendSyncFuture();
-                    if (chunkSendSyncFuture.isDone()) {
-                        this.onChunkReadyToSend(levelChunk);
-                    } else {
-                        chunkSendSyncFuture.thenAcceptAsync(object -> this.onChunkReadyToSend(levelChunk), this.mainThreadExecutor);
-                    }
-                }), this.mainThreadExecutor);
-        completableFuture.handle((either, throwable) -> {
+    public CompletableFuture<Either<LevelChunk, ChunkHolder.Failure>> prepareTickingChunk(ChunkHolder holder) {
+        CompletableFuture<Either<List<ChunkAccess>, ChunkHolder.Failure>> completablefuture = this.getChunkRangeFuture(holder, 1, (i) -> {
+            return ChunkStatus.FULL;
+        });
+        CompletableFuture<Either<LevelChunk, ChunkHolder.Failure>> completablefuture1 = completablefuture.thenApplyAsync((either) -> {
+            return either.mapLeft((list) -> {
+                return (LevelChunk) list.get(list.size() / 2);
+            });
+        }, (runnable) -> {
+            this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(holder, runnable));
+        }).thenApplyAsync((either) -> {
+            return either.ifLeft((chunk) -> {
+                chunk.postProcessGeneration();
+                this.level.startTickingChunk(chunk);
+                CompletableFuture<?> completablefuture2 = holder.getChunkSendSyncFuture();
+
+                if (completablefuture2.isDone()) {
+                    this.onChunkReadyToSend(chunk);
+                } else {
+                    completablefuture2.thenAcceptAsync((object) -> {
+                        this.onChunkReadyToSend(chunk);
+                    }, this.mainThreadExecutor);
+                }
+
+            });
+        }, this.mainThreadExecutor);
+
+        completablefuture1.handle((either, throwable) -> {
             this.tickingGenerated.getAndIncrement();
             return null;
         });
-        return completableFuture;
+        return completablefuture1;
     }
 
-    private void onChunkReadyToSend(LevelChunk levelChunk) {
-        ChunkPos pos = levelChunk.getPos();
+    private void onChunkReadyToSend(LevelChunk chunk) {
+        ChunkPos chunkcoordintpair = chunk.getPos();
+        Iterator iterator = this.playerMap.getAllPlayers().iterator();
 
-        for (ServerPlayer serverPlayer : this.playerMap.getAllPlayers()) {
-            if (serverPlayer.getChunkTrackingView().contains(pos)) {
-                markChunkPendingToSend(serverPlayer, levelChunk);
+        while (iterator.hasNext()) {
+            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
+
+            if (entityplayer.getChunkTrackingView().contains(chunkcoordintpair)) {
+                markChunkPendingToSend(entityplayer, chunk);
             }
         }
+
     }
 
-    public CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> prepareAccessibleChunk(ChunkHolder holder) {
-        return this.getChunkRangeFuture(holder, 1, ChunkStatus::getStatusAroundFullChunk)
-            .thenApplyAsync(
-                either -> either.mapLeft(list -> (LevelChunk)list.get(list.size() / 2)),
-                runnable -> this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(holder, runnable))
-            );
+    public CompletableFuture<Either<LevelChunk, ChunkHolder.Failure>> prepareAccessibleChunk(ChunkHolder holder) {
+        return this.getChunkRangeFuture(holder, 1, ChunkStatus::getStatusAroundFullChunk).thenApplyAsync((either) -> {
+            return either.mapLeft((list) -> {
+                return (LevelChunk) list.get(list.size() / 2);
+            });
+        }, (runnable) -> {
+            this.mainThreadMailbox.tell(ChunkTaskPriorityQueueSorter.message(holder, runnable));
+        });
     }
 
     public int getTickingGenerated() {
@@ -798,20 +906,23 @@
         if (!holder.wasAccessibleSinceLastSave()) {
             return false;
         } else {
-            ChunkAccess chunkAccess = holder.getChunkToSave().getNow(null);
-            if (!(chunkAccess instanceof ImposterProtoChunk) && !(chunkAccess instanceof LevelChunk)) {
+            ChunkAccess ichunkaccess = (ChunkAccess) holder.getChunkToSave().getNow(null); // CraftBukkit - decompile error
+
+            if (!(ichunkaccess instanceof ImposterProtoChunk) && !(ichunkaccess instanceof LevelChunk)) {
                 return false;
             } else {
-                long l = chunkAccess.getPos().toLong();
-                long orDefault = this.chunkSaveCooldowns.getOrDefault(l, -1L);
-                long l1 = System.currentTimeMillis();
-                if (l1 < orDefault) {
+                long i = ichunkaccess.getPos().toLong();
+                long j = this.chunkSaveCooldowns.getOrDefault(i, -1L);
+                long k = System.currentTimeMillis();
+
+                if (k < j) {
                     return false;
                 } else {
-                    boolean flag = this.save(chunkAccess);
+                    boolean flag = this.save(ichunkaccess);
+
                     holder.refreshAccessibility();
                     if (flag) {
-                        this.chunkSaveCooldowns.put(l, l1 + 10000L);
+                        this.chunkSaveCooldowns.put(i, k + 10000L);
                     }
 
                     return flag;
@@ -820,103 +931,116 @@
         }
     }
 
-    private boolean save(ChunkAccess chunk) {
+    public boolean save(ChunkAccess chunk) {
         this.poiManager.flush(chunk.getPos());
         if (!chunk.isUnsaved()) {
             return false;
         } else {
             chunk.setUnsaved(false);
-            ChunkPos pos = chunk.getPos();
+            ChunkPos chunkcoordintpair = chunk.getPos();
 
             try {
-                ChunkStatus status = chunk.getStatus();
-                if (status.getChunkType() != ChunkStatus.ChunkType.LEVELCHUNK) {
-                    if (this.isExistingChunkFull(pos)) {
+                ChunkStatus chunkstatus = chunk.getStatus();
+
+                if (chunkstatus.getChunkType() != ChunkStatus.Type.LEVELCHUNK) {
+                    if (this.isExistingChunkFull(chunkcoordintpair)) {
                         return false;
                     }
 
-                    if (status == ChunkStatus.EMPTY && chunk.getAllStarts().values().stream().noneMatch(StructureStart::isValid)) {
+                    if (chunkstatus == ChunkStatus.EMPTY && chunk.getAllStarts().values().stream().noneMatch(StructureStart::isValid)) {
                         return false;
                     }
                 }
 
                 this.level.getProfiler().incrementCounter("chunkSave");
-                CompoundTag compoundTag = ChunkSerializer.write(this.level, chunk);
-                this.write(pos, compoundTag);
-                this.markPosition(pos, status.getChunkType());
+                CompoundTag nbttagcompound = ChunkSerializer.write(this.level, chunk);
+
+                this.write(chunkcoordintpair, nbttagcompound);
+                this.markPosition(chunkcoordintpair, chunkstatus.getChunkType());
                 return true;
-            } catch (Exception var5) {
-                LOGGER.error("Failed to save chunk {},{}", pos.x, pos.z, var5);
+            } catch (Exception exception) {
+                ChunkMap.LOGGER.error("Failed to save chunk {},{}", new Object[]{chunkcoordintpair.x, chunkcoordintpair.z, exception});
                 return false;
             }
         }
     }
 
     private boolean isExistingChunkFull(ChunkPos chunkPos) {
-        byte b = this.chunkTypeCache.get(chunkPos.toLong());
-        if (b != 0) {
-            return b == 1;
+        byte b0 = this.chunkTypeCache.get(chunkPos.toLong());
+
+        if (b0 != 0) {
+            return b0 == 1;
         } else {
-            CompoundTag compoundTag;
+            CompoundTag nbttagcompound;
+
             try {
-                compoundTag = this.readChunk(chunkPos).join().orElse(null);
-                if (compoundTag == null) {
+                nbttagcompound = (CompoundTag) ((Optional) this.readChunk(chunkPos).join()).orElse((Object) null);
+                if (nbttagcompound == null) {
                     this.markPositionReplaceable(chunkPos);
                     return false;
                 }
-            } catch (Exception var5) {
-                LOGGER.error("Failed to read chunk {}", chunkPos, var5);
+            } catch (Exception exception) {
+                ChunkMap.LOGGER.error("Failed to read chunk {}", chunkPos, exception);
                 this.markPositionReplaceable(chunkPos);
                 return false;
             }
 
-            ChunkStatus.ChunkType chunkTypeFromTag = ChunkSerializer.getChunkTypeFromTag(compoundTag);
-            return this.markPosition(chunkPos, chunkTypeFromTag) == 1;
+            ChunkStatus.Type chunkstatus_type = ChunkSerializer.getChunkTypeFromTag(nbttagcompound);
+
+            return this.markPosition(chunkPos, chunkstatus_type) == 1;
         }
     }
 
     protected void setServerViewDistance(int i) {
-        int i1 = Mth.clamp(i, 2, 32);
-        if (i1 != this.serverViewDistance) {
-            this.serverViewDistance = i1;
+        int j = Mth.clamp(i, 2, 32);
+
+        if (j != this.serverViewDistance) {
+            this.serverViewDistance = j;
             this.distanceManager.updatePlayerTickets(this.serverViewDistance);
+            Iterator iterator = this.playerMap.getAllPlayers().iterator();
 
-            for (ServerPlayer serverPlayer : this.playerMap.getAllPlayers()) {
-                this.updateChunkTracking(serverPlayer);
+            while (iterator.hasNext()) {
+                ServerPlayer entityplayer = (ServerPlayer) iterator.next();
+
+                this.updateChunkTracking(entityplayer);
             }
         }
+
     }
 
-    int getPlayerViewDistance(ServerPlayer serverPlayer) {
-        return Mth.clamp(serverPlayer.requestedViewDistance(), 2, this.serverViewDistance);
+    int getPlayerViewDistance(ServerPlayer entityplayer) {
+        return Mth.clamp(entityplayer.requestedViewDistance(), 2, this.serverViewDistance);
     }
 
-    private void markChunkPendingToSend(ServerPlayer serverPlayer, ChunkPos chunkPos) {
-        LevelChunk chunkToSend = this.getChunkToSend(chunkPos.toLong());
-        if (chunkToSend != null) {
-            markChunkPendingToSend(serverPlayer, chunkToSend);
+    private void markChunkPendingToSend(ServerPlayer entityplayer, ChunkPos chunkcoordintpair) {
+        LevelChunk chunk = this.getChunkToSend(chunkcoordintpair.toLong());
+
+        if (chunk != null) {
+            markChunkPendingToSend(entityplayer, chunk);
         }
+
     }
 
-    private static void markChunkPendingToSend(ServerPlayer serverPlayer, LevelChunk levelChunk) {
-        serverPlayer.connection.chunkSender.markChunkPendingToSend(levelChunk);
+    private static void markChunkPendingToSend(ServerPlayer entityplayer, LevelChunk chunk) {
+        entityplayer.connection.chunkSender.markChunkPendingToSend(chunk);
     }
 
-    private static void dropChunk(ServerPlayer serverPlayer, ChunkPos chunkPos) {
-        serverPlayer.connection.chunkSender.dropChunk(serverPlayer, chunkPos);
+    private static void dropChunk(ServerPlayer entityplayer, ChunkPos chunkcoordintpair) {
+        entityplayer.connection.chunkSender.dropChunk(entityplayer, chunkcoordintpair);
     }
 
     @Nullable
-    public LevelChunk getChunkToSend(long l) {
-        ChunkHolder visibleChunkIfPresent = this.getVisibleChunkIfPresent(l);
-        return visibleChunkIfPresent == null ? null : visibleChunkIfPresent.getChunkToSend();
+    public LevelChunk getChunkToSend(long i) {
+        ChunkHolder playerchunk = this.getVisibleChunkIfPresent(i);
+
+        return playerchunk == null ? null : playerchunk.getChunkToSend();
     }
 
     public int size() {
         return this.visibleChunkMap.size();
     }
 
-    public net.minecraft.server.level.DistanceManager getDistanceManager() {
+    public DistanceManager getDistanceManager() {
         return this.distanceManager;
     }
 
@@ -925,98 +1049,94 @@
     }
 
     void dumpChunks(Writer writer) throws IOException {
-        CsvOutput csvOutput = CsvOutput.builder()
-            .addColumn("x")
-            .addColumn("z")
-            .addColumn("level")
-            .addColumn("in_memory")
-            .addColumn("status")
-            .addColumn("full_status")
-            .addColumn("accessible_ready")
-            .addColumn("ticking_ready")
-            .addColumn("entity_ticking_ready")
-            .addColumn("ticket")
-            .addColumn("spawning")
-            .addColumn("block_entity_count")
-            .addColumn("ticking_ticket")
-            .addColumn("ticking_level")
-            .addColumn("block_ticks")
-            .addColumn("fluid_ticks")
-            .build(writer);
-        TickingTracker tickingTracker = this.distanceManager.tickingTracker();
+        CsvOutput csvwriter = CsvOutput.builder().addColumn("x").addColumn("z").addColumn("level").addColumn("in_memory").addColumn("status").addColumn("full_status").addColumn("accessible_ready").addColumn("ticking_ready").addColumn("entity_ticking_ready").addColumn("ticket").addColumn("spawning").addColumn("block_entity_count").addColumn("ticking_ticket").addColumn("ticking_level").addColumn("block_ticks").addColumn("fluid_ticks").build(writer);
+        TickingTracker tickingtracker = this.distanceManager.tickingTracker();
+        ObjectBidirectionalIterator objectbidirectionaliterator = this.visibleChunkMap.long2ObjectEntrySet().iterator();
 
-        for (Entry<ChunkHolder> entry : this.visibleChunkMap.long2ObjectEntrySet()) {
-            long longKey = entry.getLongKey();
-            ChunkPos chunkPos = new ChunkPos(longKey);
-            ChunkHolder chunkHolder = entry.getValue();
-            Optional<ChunkAccess> optional = Optional.ofNullable(chunkHolder.getLastAvailable());
-            Optional<LevelChunk> optional1 = optional.flatMap(
-                chunkAccess -> chunkAccess instanceof LevelChunk ? Optional.of((LevelChunk)chunkAccess) : Optional.empty()
-            );
-            csvOutput.writeRow(
-                chunkPos.x,
-                chunkPos.z,
-                chunkHolder.getTicketLevel(),
-                optional.isPresent(),
-                optional.map(ChunkAccess::getStatus).orElse(null),
-                optional1.map(LevelChunk::getFullStatus).orElse(null),
-                printFuture(chunkHolder.getFullChunkFuture()),
-                printFuture(chunkHolder.getTickingChunkFuture()),
-                printFuture(chunkHolder.getEntityTickingChunkFuture()),
-                this.distanceManager.getTicketDebugString(longKey),
-                this.anyPlayerCloseEnoughForSpawning(chunkPos),
-                optional1.<Integer>map(levelChunk -> levelChunk.getBlockEntities().size()).orElse(0),
-                tickingTracker.getTicketDebugString(longKey),
-                tickingTracker.getLevel(longKey),
-                optional1.<Integer>map(levelChunk -> levelChunk.getBlockTicks().count()).orElse(0),
-                optional1.<Integer>map(levelChunk -> levelChunk.getFluidTicks().count()).orElse(0)
-            );
+        while (objectbidirectionaliterator.hasNext()) {
+            Entry<ChunkHolder> entry = (Entry) objectbidirectionaliterator.next();
+            long i = entry.getLongKey();
+            ChunkPos chunkcoordintpair = new ChunkPos(i);
+            ChunkHolder playerchunk = (ChunkHolder) entry.getValue();
+            Optional<ChunkAccess> optional = Optional.ofNullable(playerchunk.getLastAvailable());
+            Optional<LevelChunk> optional1 = optional.flatMap((ichunkaccess) -> {
+                return ichunkaccess instanceof LevelChunk ? Optional.of((LevelChunk) ichunkaccess) : Optional.empty();
+            });
+
+            // CraftBukkit - decompile error
+            csvwriter.writeRow(chunkcoordintpair.x, chunkcoordintpair.z, playerchunk.getTicketLevel(), optional.isPresent(), optional.map(ChunkAccess::getStatus).orElse(null), optional1.map(LevelChunk::getFullStatus).orElse(null), printFuture(playerchunk.getFullChunkFuture()), printFuture(playerchunk.getTickingChunkFuture()), printFuture(playerchunk.getEntityTickingChunkFuture()), this.distanceManager.getTicketDebugString(i), this.anyPlayerCloseEnoughForSpawning(chunkcoordintpair), optional1.map((chunk) -> {
+                return chunk.getBlockEntities().size();
+            }).orElse(0), tickingtracker.getTicketDebugString(i), tickingtracker.getLevel(i), optional1.map((chunk) -> {
+                return chunk.getBlockTicks().count();
+            }).orElse(0), optional1.map((chunk) -> {
+                return chunk.getFluidTicks().count();
+            }).orElse(0));
         }
+
     }
 
-    private static String printFuture(CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> future) {
+    private static String printFuture(CompletableFuture<Either<LevelChunk, ChunkHolder.Failure>> future) {
         try {
-            Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = future.getNow(null);
-            return either != null ? either.map(levelChunk -> "done", chunkLoadingFailure -> "unloaded") : "not completed";
-        } catch (CompletionException var2) {
-            return "failed " + var2.getCause().getMessage();
-        } catch (CancellationException var3) {
+            Either<LevelChunk, ChunkHolder.Failure> either = (Either) future.getNow(null); // CraftBukkit - decompile error
+
+            return either != null ? (String) either.map((chunk) -> {
+                return "done";
+            }, (playerchunk_failure) -> {
+                return "unloaded";
+            }) : "not completed";
+        } catch (CompletionException completionexception) {
+            return "failed " + completionexception.getCause().getMessage();
+        } catch (CancellationException cancellationexception) {
             return "cancelled";
         }
     }
 
     private CompletableFuture<Optional<CompoundTag>> readChunk(ChunkPos pos) {
-        return this.read(pos).thenApplyAsync(optional -> optional.map(this::upgradeChunkTag), Util.backgroundExecutor());
+        return this.read(pos).thenApplyAsync((optional) -> {
+            return optional.map((nbttagcompound) -> upgradeChunkTag(nbttagcompound, pos)); // CraftBukkit
+        }, Util.backgroundExecutor());
     }
 
-    private CompoundTag upgradeChunkTag(CompoundTag tag) {
-        return this.upgradeChunkTag(this.level.dimension(), this.overworldDataStorage, tag, this.generator.getTypeNameForDataFixer());
+    // CraftBukkit start
+    private CompoundTag upgradeChunkTag(CompoundTag nbttagcompound, ChunkPos chunkcoordintpair) {
+        return this.upgradeChunkTag(this.level.getTypeKey(), this.overworldDataStorage, nbttagcompound, this.generator.getTypeNameForDataFixer(), chunkcoordintpair, level);
+        // CraftBukkit end
     }
 
     boolean anyPlayerCloseEnoughForSpawning(ChunkPos chunkPos) {
         if (!this.distanceManager.hasPlayersNearby(chunkPos.toLong())) {
             return false;
         } else {
-            for (ServerPlayer serverPlayer : this.playerMap.getAllPlayers()) {
-                if (this.playerIsCloseEnoughForSpawning(serverPlayer, chunkPos)) {
-                    return true;
+            Iterator iterator = this.playerMap.getAllPlayers().iterator();
+
+            ServerPlayer entityplayer;
+
+            do {
+                if (!iterator.hasNext()) {
+                    return false;
                 }
-            }
 
-            return false;
+                entityplayer = (ServerPlayer) iterator.next();
+            } while (!this.playerIsCloseEnoughForSpawning(entityplayer, chunkPos));
+
+            return true;
         }
     }
 
     public List<ServerPlayer> getPlayersCloseForSpawning(ChunkPos chunkPos) {
-        long l = chunkPos.toLong();
-        if (!this.distanceManager.hasPlayersNearby(l)) {
+        long i = chunkPos.toLong();
+
+        if (!this.distanceManager.hasPlayersNearby(i)) {
             return List.of();
         } else {
             Builder<ServerPlayer> builder = ImmutableList.builder();
+            Iterator iterator = this.playerMap.getAllPlayers().iterator();
 
-            for (ServerPlayer serverPlayer : this.playerMap.getAllPlayers()) {
-                if (this.playerIsCloseEnoughForSpawning(serverPlayer, chunkPos)) {
-                    builder.add(serverPlayer);
+            while (iterator.hasNext()) {
+                ServerPlayer entityplayer = (ServerPlayer) iterator.next();
+
+                if (this.playerIsCloseEnoughForSpawning(entityplayer, chunkPos)) {
+                    builder.add(entityplayer);
                 }
             }
 
@@ -1028,8 +1148,9 @@
         if (player.isSpectator()) {
             return false;
         } else {
-            double d = euclideanDistanceSquared(chunkPos, player);
-            return d < 16384.0;
+            double d0 = euclideanDistanceSquared(chunkPos, player);
+
+            return d0 < 16384.0D;
         }
     }
 
@@ -1038,55 +1159,64 @@
     }
 
     void updatePlayerStatus(ServerPlayer player, boolean track) {
-        boolean flag = this.skipPlayer(player);
-        boolean flag1 = this.playerMap.ignoredOrUnknown(player);
+        boolean flag1 = this.skipPlayer(player);
+        boolean flag2 = this.playerMap.ignoredOrUnknown(player);
+
         if (track) {
-            this.playerMap.addPlayer(player, flag);
+            this.playerMap.addPlayer(player, flag1);
             this.updatePlayerPos(player);
-            if (!flag) {
-                this.distanceManager.addPlayer(SectionPos.of(player), player);
+            if (!flag1) {
+                this.distanceManager.addPlayer(SectionPos.of((EntityAccess) player), player);
             }
 
             player.setChunkTrackingView(ChunkTrackingView.EMPTY);
             this.updateChunkTracking(player);
         } else {
-            SectionPos lastSectionPos = player.getLastSectionPos();
+            SectionPos sectionposition = player.getLastSectionPos();
+
             this.playerMap.removePlayer(player);
-            if (!flag1) {
-                this.distanceManager.removePlayer(lastSectionPos, player);
+            if (!flag2) {
+                this.distanceManager.removePlayer(sectionposition, player);
             }
 
             this.applyChunkTrackingView(player, ChunkTrackingView.EMPTY);
         }
+
     }
 
-    private void updatePlayerPos(ServerPlayer serverPlayer) {
-        SectionPos sectionPos = SectionPos.of(serverPlayer);
-        serverPlayer.setLastSectionPos(sectionPos);
+    private void updatePlayerPos(ServerPlayer entityplayer) {
+        SectionPos sectionposition = SectionPos.of((EntityAccess) entityplayer);
+
+        entityplayer.setLastSectionPos(sectionposition);
     }
 
     public void move(ServerPlayer player) {
-        for (ChunkMap.TrackedEntity trackedEntity : this.entityMap.values()) {
-            if (trackedEntity.entity == player) {
-                trackedEntity.updatePlayers(this.level.players());
+        ObjectIterator objectiterator = this.entityMap.values().iterator();
+
+        while (objectiterator.hasNext()) {
+            ChunkMap.TrackedEntity playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) objectiterator.next();
+
+            if (playerchunkmap_entitytracker.entity == player) {
+                playerchunkmap_entitytracker.updatePlayers(this.level.players());
             } else {
-                trackedEntity.updatePlayer(player);
+                playerchunkmap_entitytracker.updatePlayer(player);
             }
         }
 
-        SectionPos lastSectionPos = player.getLastSectionPos();
-        SectionPos sectionPos = SectionPos.of(player);
+        SectionPos sectionposition = player.getLastSectionPos();
+        SectionPos sectionposition1 = SectionPos.of((EntityAccess) player);
         boolean flag = this.playerMap.ignored(player);
         boolean flag1 = this.skipPlayer(player);
-        boolean flag2 = lastSectionPos.asLong() != sectionPos.asLong();
+        boolean flag2 = sectionposition.asLong() != sectionposition1.asLong();
+
         if (flag2 || flag != flag1) {
             this.updatePlayerPos(player);
             if (!flag) {
-                this.distanceManager.removePlayer(lastSectionPos, player);
+                this.distanceManager.removePlayer(sectionposition, player);
             }
 
             if (!flag1) {
-                this.distanceManager.addPlayer(sectionPos, player);
+                this.distanceManager.addPlayer(sectionposition1, player);
             }
 
             if (!flag && flag1) {
@@ -1099,46 +1229,66 @@
 
             this.updateChunkTracking(player);
         }
+
     }
 
-    private void updateChunkTracking(ServerPlayer serverPlayer) {
-        ChunkPos chunkPos = serverPlayer.chunkPosition();
-        int playerViewDistance = this.getPlayerViewDistance(serverPlayer);
-        if (serverPlayer.getChunkTrackingView() instanceof ChunkTrackingView.Positioned positioned
-            && positioned.center().equals(chunkPos)
-            && positioned.viewDistance() == playerViewDistance) {
-            return;
+    private void updateChunkTracking(ServerPlayer entityplayer) {
+        ChunkPos chunkcoordintpair = entityplayer.chunkPosition();
+        int i = this.getPlayerViewDistance(entityplayer);
+        ChunkTrackingView chunktrackingview = entityplayer.getChunkTrackingView();
+
+        if (chunktrackingview instanceof ChunkTrackingView.a) {
+            ChunkTrackingView.a chunktrackingview_a = (ChunkTrackingView.a) chunktrackingview;
+
+            if (chunktrackingview_a.center().equals(chunkcoordintpair) && chunktrackingview_a.viewDistance() == i) {
+                return;
+            }
         }
 
-        this.applyChunkTrackingView(serverPlayer, ChunkTrackingView.of(chunkPos, playerViewDistance));
+        this.applyChunkTrackingView(entityplayer, ChunkTrackingView.of(chunkcoordintpair, i));
     }
 
-    private void applyChunkTrackingView(ServerPlayer serverPlayer, ChunkTrackingView chunkTrackingView) {
-        if (serverPlayer.level() == this.level) {
-            ChunkTrackingView chunkTrackingView1 = serverPlayer.getChunkTrackingView();
-            if (chunkTrackingView instanceof ChunkTrackingView.Positioned positioned
-                && (!(chunkTrackingView1 instanceof ChunkTrackingView.Positioned positioned1) || !positioned1.center().equals(positioned.center()))) {
-                serverPlayer.connection.send(new ClientboundSetChunkCacheCenterPacket(positioned.center().x, positioned.center().z));
+    private void applyChunkTrackingView(ServerPlayer entityplayer, ChunkTrackingView chunktrackingview) {
+        if (entityplayer.level() == this.level) {
+            ChunkTrackingView chunktrackingview1 = entityplayer.getChunkTrackingView();
+
+            if (chunktrackingview instanceof ChunkTrackingView.a) {
+                label15:
+                {
+                    ChunkTrackingView.a chunktrackingview_a = (ChunkTrackingView.a) chunktrackingview;
+
+                    if (chunktrackingview1 instanceof ChunkTrackingView.a) {
+                        ChunkTrackingView.a chunktrackingview_a1 = (ChunkTrackingView.a) chunktrackingview1;
+
+                        if (chunktrackingview_a1.center().equals(chunktrackingview_a.center())) {
+                            break label15;
+                        }
+                    }
+
+                    entityplayer.connection.send(new ClientboundSetChunkCacheCenterPacket(chunktrackingview_a.center().x, chunktrackingview_a.center().z));
+                }
             }
 
-            ChunkTrackingView.difference(
-                chunkTrackingView1,
-                chunkTrackingView,
-                chunkPos -> this.markChunkPendingToSend(serverPlayer, chunkPos),
-                chunkPos -> dropChunk(serverPlayer, chunkPos)
-            );
-            serverPlayer.setChunkTrackingView(chunkTrackingView);
+            ChunkTrackingView.difference(chunktrackingview1, chunktrackingview, (chunkcoordintpair) -> {
+                this.markChunkPendingToSend(entityplayer, chunkcoordintpair);
+            }, (chunkcoordintpair) -> {
+                dropChunk(entityplayer, chunkcoordintpair);
+            });
+            entityplayer.setChunkTrackingView(chunktrackingview);
         }
     }
 
     @Override
     public List<ServerPlayer> getPlayers(ChunkPos pos, boolean boundaryOnly) {
-        Set<ServerPlayer> allPlayers = this.playerMap.getAllPlayers();
+        Set<ServerPlayer> set = this.playerMap.getAllPlayers();
         Builder<ServerPlayer> builder = ImmutableList.builder();
+        Iterator iterator = set.iterator();
 
-        for (ServerPlayer serverPlayer : allPlayers) {
-            if (boundaryOnly && this.isChunkOnTrackedBorder(serverPlayer, pos.x, pos.z) || !boundaryOnly && this.isChunkTracked(serverPlayer, pos.x, pos.z)) {
-                builder.add(serverPlayer);
+        while (iterator.hasNext()) {
+            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
+
+            if (boundaryOnly && this.isChunkOnTrackedBorder(entityplayer, pos.x, pos.z) || !boundaryOnly && this.isChunkTracked(entityplayer, pos.x, pos.z)) {
+                builder.add(entityplayer);
             }
         }
 
@@ -1147,111 +1297,158 @@
 
     protected void addEntity(Entity entity) {
         if (!(entity instanceof EnderDragonPart)) {
-            EntityType<?> type = entity.getType();
-            int i = type.clientTrackingRange() * 16;
+            EntityType<?> entitytypes = entity.getType();
+            int i = entitytypes.clientTrackingRange() * 16;
+
             if (i != 0) {
-                int i1 = type.updateInterval();
+                int j = entitytypes.updateInterval();
+
                 if (this.entityMap.containsKey(entity.getId())) {
-                    throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("Entity is already tracked!"));
+                    throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Entity is already tracked!"));
                 } else {
-                    ChunkMap.TrackedEntity trackedEntity = new ChunkMap.TrackedEntity(entity, i, i1, type.trackDeltas());
-                    this.entityMap.put(entity.getId(), trackedEntity);
-                    trackedEntity.updatePlayers(this.level.players());
-                    if (entity instanceof ServerPlayer serverPlayer) {
-                        this.updatePlayerStatus(serverPlayer, true);
+                    ChunkMap.TrackedEntity playerchunkmap_entitytracker = new ChunkMap.TrackedEntity(entity, i, j, entitytypes.trackDeltas());
 
-                        for (ChunkMap.TrackedEntity trackedEntity1 : this.entityMap.values()) {
-                            if (trackedEntity1.entity != serverPlayer) {
-                                trackedEntity1.updatePlayer(serverPlayer);
+                    this.entityMap.put(entity.getId(), playerchunkmap_entitytracker);
+                    playerchunkmap_entitytracker.updatePlayers(this.level.players());
+                    if (entity instanceof ServerPlayer) {
+                        ServerPlayer entityplayer = (ServerPlayer) entity;
+
+                        this.updatePlayerStatus(entityplayer, true);
+                        ObjectIterator objectiterator = this.entityMap.values().iterator();
+
+                        while (objectiterator.hasNext()) {
+                            ChunkMap.TrackedEntity playerchunkmap_entitytracker1 = (ChunkMap.TrackedEntity) objectiterator.next();
+
+                            if (playerchunkmap_entitytracker1.entity != entityplayer) {
+                                playerchunkmap_entitytracker1.updatePlayer(entityplayer);
                             }
                         }
                     }
+
                 }
             }
         }
     }
 
     protected void removeEntity(Entity entity) {
-        if (entity instanceof ServerPlayer serverPlayer) {
-            this.updatePlayerStatus(serverPlayer, false);
+        if (entity instanceof ServerPlayer) {
+            ServerPlayer entityplayer = (ServerPlayer) entity;
 
-            for (ChunkMap.TrackedEntity trackedEntity : this.entityMap.values()) {
-                trackedEntity.removePlayer(serverPlayer);
+            this.updatePlayerStatus(entityplayer, false);
+            ObjectIterator objectiterator = this.entityMap.values().iterator();
+
+            while (objectiterator.hasNext()) {
+                ChunkMap.TrackedEntity playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) objectiterator.next();
+
+                playerchunkmap_entitytracker.removePlayer(entityplayer);
             }
         }
 
-        ChunkMap.TrackedEntity trackedEntity1 = this.entityMap.remove(entity.getId());
-        if (trackedEntity1 != null) {
-            trackedEntity1.broadcastRemoved();
+        ChunkMap.TrackedEntity playerchunkmap_entitytracker1 = (ChunkMap.TrackedEntity) this.entityMap.remove(entity.getId());
+
+        if (playerchunkmap_entitytracker1 != null) {
+            playerchunkmap_entitytracker1.broadcastRemoved();
         }
+
     }
 
     protected void tick() {
-        for (ServerPlayer serverPlayer : this.playerMap.getAllPlayers()) {
-            this.updateChunkTracking(serverPlayer);
+        Iterator iterator = this.playerMap.getAllPlayers().iterator();
+
+        while (iterator.hasNext()) {
+            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
+
+            this.updateChunkTracking(entityplayer);
         }
 
         List<ServerPlayer> list = Lists.newArrayList();
         List<ServerPlayer> list1 = this.level.players();
+        ObjectIterator objectiterator = this.entityMap.values().iterator();
 
-        for (ChunkMap.TrackedEntity trackedEntity : this.entityMap.values()) {
-            SectionPos sectionPos = trackedEntity.lastSectionPos;
-            SectionPos sectionPos1 = SectionPos.of(trackedEntity.entity);
-            boolean flag = !Objects.equals(sectionPos, sectionPos1);
+        ChunkMap.TrackedEntity playerchunkmap_entitytracker;
+
+        while (objectiterator.hasNext()) {
+            playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) objectiterator.next();
+            SectionPos sectionposition = playerchunkmap_entitytracker.lastSectionPos;
+            SectionPos sectionposition1 = SectionPos.of((EntityAccess) playerchunkmap_entitytracker.entity);
+            boolean flag = !Objects.equals(sectionposition, sectionposition1);
+
             if (flag) {
-                trackedEntity.updatePlayers(list1);
-                Entity entity = trackedEntity.entity;
+                playerchunkmap_entitytracker.updatePlayers(list1);
+                Entity entity = playerchunkmap_entitytracker.entity;
+
                 if (entity instanceof ServerPlayer) {
-                    list.add((ServerPlayer)entity);
+                    list.add((ServerPlayer) entity);
                 }
 
-                trackedEntity.lastSectionPos = sectionPos1;
+                playerchunkmap_entitytracker.lastSectionPos = sectionposition1;
             }
 
-            if (flag || this.distanceManager.inEntityTickingRange(sectionPos1.chunk().toLong())) {
-                trackedEntity.serverEntity.sendChanges();
+            if (flag || this.distanceManager.inEntityTickingRange(sectionposition1.chunk().toLong())) {
+                playerchunkmap_entitytracker.serverEntity.sendChanges();
             }
         }
 
         if (!list.isEmpty()) {
-            for (ChunkMap.TrackedEntity trackedEntity : this.entityMap.values()) {
-                trackedEntity.updatePlayers(list);
+            objectiterator = this.entityMap.values().iterator();
+
+            while (objectiterator.hasNext()) {
+                playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) objectiterator.next();
+                playerchunkmap_entitytracker.updatePlayers(list);
             }
         }
+
     }
 
     public void broadcast(Entity entity, Packet<?> packet) {
-        ChunkMap.TrackedEntity trackedEntity = this.entityMap.get(entity.getId());
-        if (trackedEntity != null) {
-            trackedEntity.broadcast(packet);
+        ChunkMap.TrackedEntity playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) this.entityMap.get(entity.getId());
+
+        if (playerchunkmap_entitytracker != null) {
+            playerchunkmap_entitytracker.broadcast(packet);
         }
+
     }
 
     protected void broadcastAndSend(Entity entity, Packet<?> packet) {
-        ChunkMap.TrackedEntity trackedEntity = this.entityMap.get(entity.getId());
-        if (trackedEntity != null) {
-            trackedEntity.broadcastAndSend(packet);
+        ChunkMap.TrackedEntity playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) this.entityMap.get(entity.getId());
+
+        if (playerchunkmap_entitytracker != null) {
+            playerchunkmap_entitytracker.broadcastAndSend(packet);
         }
+
     }
 
     public void resendBiomesForChunks(List<ChunkAccess> chunks) {
-        Map<ServerPlayer, List<LevelChunk>> map = new HashMap<>();
+        Map<ServerPlayer, List<LevelChunk>> map = new HashMap();
+        Iterator iterator = chunks.iterator();
 
-        for (ChunkAccess chunkAccess : chunks) {
-            ChunkPos pos = chunkAccess.getPos();
-            LevelChunk levelChunk1;
-            if (chunkAccess instanceof LevelChunk levelChunk) {
-                levelChunk1 = levelChunk;
+        while (iterator.hasNext()) {
+            ChunkAccess ichunkaccess = (ChunkAccess) iterator.next();
+            ChunkPos chunkcoordintpair = ichunkaccess.getPos();
+            LevelChunk chunk;
+
+            if (ichunkaccess instanceof LevelChunk) {
+                LevelChunk chunk1 = (LevelChunk) ichunkaccess;
+
+                chunk = chunk1;
             } else {
-                levelChunk1 = this.level.getChunk(pos.x, pos.z);
+                chunk = this.level.getChunk(chunkcoordintpair.x, chunkcoordintpair.z);
             }
 
-            for (ServerPlayer serverPlayer : this.getPlayers(pos, false)) {
-                map.computeIfAbsent(serverPlayer, serverPlayer1 -> new ArrayList<>()).add(levelChunk1);
+            Iterator iterator1 = this.getPlayers(chunkcoordintpair, false).iterator();
+
+            while (iterator1.hasNext()) {
+                ServerPlayer entityplayer = (ServerPlayer) iterator1.next();
+
+                ((List) map.computeIfAbsent(entityplayer, (entityplayer1) -> {
+                    return new ArrayList();
+                })).add(chunk);
             }
         }
 
-        map.forEach((serverPlayer1, list) -> serverPlayer1.connection.send(ClientboundChunksBiomesPacket.forChunks((List<LevelChunk>)list)));
+        map.forEach((entityplayer1, list1) -> {
+            entityplayer1.connection.send(ClientboundChunksBiomesPacket.forChunks(list1));
+        });
     }
 
     protected PoiManager getPoiManager() {
@@ -1266,17 +1463,21 @@
         this.chunkStatusListener.onChunkStatusChange(chunkPos, fullChunkStatus);
     }
 
-    public void waitForLightBeforeSending(ChunkPos chunkPos, int i) {
-        int i1 = i + 1;
-        ChunkPos.rangeClosed(chunkPos, i1).forEach(chunkPos1 -> {
-            ChunkHolder visibleChunkIfPresent = this.getVisibleChunkIfPresent(chunkPos1.toLong());
-            if (visibleChunkIfPresent != null) {
-                visibleChunkIfPresent.addSendDependency(this.lightEngine.waitForPendingTasks(chunkPos1.x, chunkPos1.z));
+    public void waitForLightBeforeSending(ChunkPos chunkcoordintpair, int i) {
+        int j = i + 1;
+
+        ChunkPos.rangeClosed(chunkcoordintpair, j).forEach((chunkcoordintpair1) -> {
+            ChunkHolder playerchunk = this.getVisibleChunkIfPresent(chunkcoordintpair1.toLong());
+
+            if (playerchunk != null) {
+                playerchunk.addSendDependency(this.lightEngine.waitForPendingTasks(chunkcoordintpair1.x, chunkcoordintpair1.z));
             }
+
         });
     }
 
-    class DistanceManager extends net.minecraft.server.level.DistanceManager {
+    private class DistanceManager extends DistanceManager {
+
         protected DistanceManager(Executor dispatcher, Executor mainThreadExecutor) {
             super(dispatcher, mainThreadExecutor);
         }
@@ -1294,70 +1495,85 @@
 
         @Nullable
         @Override
-        protected ChunkHolder updateChunkScheduling(long chunkPos, int newLevel, @Nullable ChunkHolder holder, int oldLevel) {
-            return ChunkMap.this.updateChunkScheduling(chunkPos, newLevel, holder, oldLevel);
+        protected ChunkHolder updateChunkScheduling(long chunkPos, int j, @Nullable ChunkHolder newLevel, int holder) {
+            return ChunkMap.this.updateChunkScheduling(chunkPos, j, newLevel, holder);
         }
     }
 
-    class TrackedEntity {
+    public class TrackedEntity {
+
         final ServerEntity serverEntity;
         final Entity entity;
         private final int range;
         SectionPos lastSectionPos;
-        private final Set<ServerPlayerConnection> seenBy = Sets.newIdentityHashSet();
+        public final Set<ServerPlayerConnection> seenBy = Sets.newIdentityHashSet();
 
-        public TrackedEntity(Entity entity, int range, int updateInterval, boolean trackDelta) {
-            this.serverEntity = new ServerEntity(ChunkMap.this.level, entity, updateInterval, trackDelta, this::broadcast);
+        public TrackedEntity(Entity entity, int i, int j, boolean flag) {
+            this.serverEntity = new ServerEntity(ChunkMap.this.level, entity, j, flag, this::broadcast, seenBy); // CraftBukkit
             this.entity = entity;
-            this.range = range;
-            this.lastSectionPos = SectionPos.of(entity);
+            this.range = i;
+            this.lastSectionPos = SectionPos.of((EntityAccess) entity);
         }
 
-        @Override
-        public boolean equals(Object other) {
-            return other instanceof ChunkMap.TrackedEntity && ((ChunkMap.TrackedEntity)other).entity.getId() == this.entity.getId();
+        public boolean equals(Object object) {
+            return object instanceof ChunkMap.TrackedEntity ? ((ChunkMap.TrackedEntity) object).entity.getId() == this.entity.getId() : false;
         }
 
-        @Override
         public int hashCode() {
             return this.entity.getId();
         }
 
         public void broadcast(Packet<?> packet) {
-            for (ServerPlayerConnection serverPlayerConnection : this.seenBy) {
-                serverPlayerConnection.send(packet);
+            Iterator iterator = this.seenBy.iterator();
+
+            while (iterator.hasNext()) {
+                ServerPlayerConnection serverplayerconnection = (ServerPlayerConnection) iterator.next();
+
+                serverplayerconnection.send(packet);
             }
+
         }
 
         public void broadcastAndSend(Packet<?> packet) {
             this.broadcast(packet);
             if (this.entity instanceof ServerPlayer) {
-                ((ServerPlayer)this.entity).connection.send(packet);
+                ((ServerPlayer) this.entity).connection.send(packet);
             }
+
         }
 
         public void broadcastRemoved() {
-            for (ServerPlayerConnection serverPlayerConnection : this.seenBy) {
-                this.serverEntity.removePairing(serverPlayerConnection.getPlayer());
+            Iterator iterator = this.seenBy.iterator();
+
+            while (iterator.hasNext()) {
+                ServerPlayerConnection serverplayerconnection = (ServerPlayerConnection) iterator.next();
+
+                this.serverEntity.removePairing(serverplayerconnection.getPlayer());
             }
+
         }
 
         public void removePlayer(ServerPlayer player) {
             if (this.seenBy.remove(player.connection)) {
                 this.serverEntity.removePairing(player);
             }
+
         }
 
         public void updatePlayer(ServerPlayer player) {
             if (player != this.entity) {
-                Vec3 vec3 = player.position().subtract(this.entity.position());
-                int playerViewDistance = ChunkMap.this.getPlayerViewDistance(player);
-                double d = (double)Math.min(this.getEffectiveRange(), playerViewDistance * 16);
-                double d1 = vec3.x * vec3.x + vec3.z * vec3.z;
-                double d2 = d * d;
-                boolean flag = d1 <= d2
-                    && this.entity.broadcastToPlayer(player)
-                    && ChunkMap.this.isChunkTracked(player, this.entity.chunkPosition().x, this.entity.chunkPosition().z);
+                Vec3 vec3d = player.position().subtract(this.entity.position());
+                int i = ChunkMap.this.getPlayerViewDistance(player);
+                double d0 = (double) Math.min(this.getEffectiveRange(), i * 16);
+                double d1 = vec3d.x * vec3d.x + vec3d.z * vec3d.z;
+                double d2 = d0 * d0;
+                boolean flag = d1 <= d2 && this.entity.broadcastToPlayer(player) && ChunkMap.this.isChunkTracked(player, this.entity.chunkPosition().x, this.entity.chunkPosition().z);
+
+                // CraftBukkit start - respect vanish API
+                if (!player.getBukkitEntity().canSee(this.entity.getBukkitEntity())) {
+                    flag = false;
+                }
+                // CraftBukkit end
                 if (flag) {
                     if (this.seenBy.add(player.connection)) {
                         this.serverEntity.addPairing(player);
@@ -1365,6 +1581,7 @@
                 } else if (this.seenBy.remove(player.connection)) {
                     this.serverEntity.removePairing(player);
                 }
+
             }
         }
 
@@ -1374,11 +1591,14 @@
 
         private int getEffectiveRange() {
             int i = this.range;
+            Iterator iterator = this.entity.getIndirectPassengers().iterator();
 
-            for (Entity entity : this.entity.getIndirectPassengers()) {
-                int i1 = entity.getType().clientTrackingRange() * 16;
-                if (i1 > i) {
-                    i = i1;
+            while (iterator.hasNext()) {
+                Entity entity = (Entity) iterator.next();
+                int j = entity.getType().clientTrackingRange() * 16;
+
+                if (j > i) {
+                    i = j;
                 }
             }
 
@@ -1386,9 +1606,14 @@
         }
 
         public void updatePlayers(List<ServerPlayer> playersList) {
-            for (ServerPlayer serverPlayer : playersList) {
-                this.updatePlayer(serverPlayer);
+            Iterator iterator = playersList.iterator();
+
+            while (iterator.hasNext()) {
+                ServerPlayer entityplayer = (ServerPlayer) iterator.next();
+
+                this.updatePlayer(entityplayer);
             }
+
         }
     }
 }
