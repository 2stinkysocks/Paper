--- a/net/minecraft/world/item/StandingAndWallBlockItem.java
+++ b/net/minecraft/world/item/StandingAndWallBlockItem.java
@@ -4,14 +4,21 @@
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.shapes.CollisionContext;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.event.block.BlockCanBuildEvent;
+// CraftBukkit end
 
 public class StandingAndWallBlockItem extends BlockItem {
-    protected final Block wallBlock;
+
+    public final Block wallBlock;
     private final Direction attachmentDirection;
 
     public StandingAndWallBlockItem(Block block, Block wallBlock, Item.Properties properties, Direction attachmentDirection) {
@@ -20,29 +27,46 @@
         this.attachmentDirection = attachmentDirection;
     }
 
-    protected boolean canPlace(LevelReader level, BlockState state, BlockPos pos) {
+    protected boolean canPlace(LevelReader level, IBlockData state, BlockPos pos) {
         return state.canSurvive(level, pos);
     }
 
     @Nullable
     @Override
-    protected BlockState getPlacementState(BlockPlaceContext context) {
-        BlockState stateForPlacement = this.wallBlock.getStateForPlacement(context);
-        BlockState blockState = null;
-        LevelReader level = context.getLevel();
-        BlockPos clickedPos = context.getClickedPos();
+    protected IBlockData getPlacementState(BlockPlaceContext context) {
+        IBlockData iblockdata = this.wallBlock.getStateForPlacement(context);
+        IBlockData iblockdata1 = null;
+        Level world = context.getLevel();
+        BlockPos blockposition = context.getClickedPos();
+        Direction[] aenumdirection = context.getNearestLookingDirections();
+        int i = aenumdirection.length;
 
-        for (Direction direction : context.getNearestLookingDirections()) {
-            if (direction != this.attachmentDirection.getOpposite()) {
-                BlockState blockState1 = direction == this.attachmentDirection ? this.getBlock().getStateForPlacement(context) : stateForPlacement;
-                if (blockState1 != null && this.canPlace(level, blockState1, clickedPos)) {
-                    blockState = blockState1;
+        for (int j = 0; j < i; ++j) {
+            Direction enumdirection = aenumdirection[j];
+
+            if (enumdirection != this.attachmentDirection.getOpposite()) {
+                IBlockData iblockdata2 = enumdirection == this.attachmentDirection ? this.getBlock().getStateForPlacement(context) : iblockdata;
+
+                if (iblockdata2 != null && this.canPlace(world, iblockdata2, blockposition)) {
+                    iblockdata1 = iblockdata2;
                     break;
                 }
             }
         }
 
-        return blockState != null && level.isUnobstructed(blockState, clickedPos, CollisionContext.empty()) ? blockState : null;
+        // CraftBukkit start
+        if (iblockdata1 != null) {
+            boolean defaultReturn = world.isUnobstructed(iblockdata1, blockposition, CollisionContext.empty());
+            org.bukkit.entity.Player player = (context.getPlayer() instanceof ServerPlayer) ? (org.bukkit.entity.Player) context.getPlayer().getBukkitEntity() : null;
+
+            BlockCanBuildEvent event = new BlockCanBuildEvent(CraftBlock.at(world, blockposition), player, CraftBlockData.fromData(iblockdata1), defaultReturn);
+            context.getLevel().getCraftServer().getPluginManager().callEvent(event);
+
+            return (event.isBuildable()) ? iblockdata1 : null;
+        } else {
+            return null;
+        }
+        // CraftBukkit end
     }
 
     @Override
