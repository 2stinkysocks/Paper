--- a/net/minecraft/world/item/BucketItem.java
+++ b/net/minecraft/world/item/BucketItem.java
@@ -5,14 +5,17 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.FluidTags;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResultHolder;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.Level;
@@ -20,70 +23,100 @@
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.BucketPickup;
 import net.minecraft.world.level.block.LiquidBlockContainer;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.FlowingFluid;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.DummyGeneratorAccess;
+import org.bukkit.event.player.PlayerBucketEmptyEvent;
+import org.bukkit.event.player.PlayerBucketFillEvent;
+// CraftBukkit end
 
 public class BucketItem extends Item implements DispensibleContainerItem {
-    private final Fluid content;
 
+    public final Fluid content;
+
     public BucketItem(Fluid content, Item.Properties properties) {
         super(properties);
         this.content = content;
     }
 
     @Override
-    public InteractionResultHolder<ItemStack> use(Level level, Player player, InteractionHand hand) {
-        ItemStack itemInHand = player.getItemInHand(hand);
-        BlockHitResult playerPOVHitResult = getPlayerPOVHitResult(
-            level, player, this.content == Fluids.EMPTY ? ClipContext.Fluid.SOURCE_ONLY : ClipContext.Fluid.NONE
-        );
-        if (playerPOVHitResult.getType() == HitResult.Type.MISS) {
-            return InteractionResultHolder.pass(itemInHand);
-        } else if (playerPOVHitResult.getType() != HitResult.Type.BLOCK) {
-            return InteractionResultHolder.pass(itemInHand);
+    public InteractionResultHolder<ItemStack> use(Level level, Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
+        BlockHitResult movingobjectpositionblock = getPlayerPOVHitResult(level, player, this.content == Fluids.EMPTY ? ClipContext.Fluid.SOURCE_ONLY : ClipContext.Fluid.NONE);
+
+        if (movingobjectpositionblock.getType() == HitResult.EnumMovingObjectType.MISS) {
+            return InteractionResultHolder.pass(itemstack);
+        } else if (movingobjectpositionblock.getType() != HitResult.EnumMovingObjectType.BLOCK) {
+            return InteractionResultHolder.pass(itemstack);
         } else {
-            BlockPos blockPos = playerPOVHitResult.getBlockPos();
-            Direction direction = playerPOVHitResult.getDirection();
-            BlockPos blockPos1 = blockPos.relative(direction);
-            if (!level.mayInteract(player, blockPos) || !player.mayUseItemAt(blockPos1, direction, itemInHand)) {
-                return InteractionResultHolder.fail(itemInHand);
-            } else if (this.content == Fluids.EMPTY) {
-                BlockState blockState = level.getBlockState(blockPos);
-                if (blockState.getBlock() instanceof BucketPickup bucketPickup) {
-                    ItemStack itemStack = bucketPickup.pickupBlock(player, level, blockPos, blockState);
-                    if (!itemStack.isEmpty()) {
-                        player.awardStat(Stats.ITEM_USED.get(this));
-                        bucketPickup.getPickupSound().ifPresent(soundEvent -> player.playSound(soundEvent, 1.0F, 1.0F));
-                        level.gameEvent(player, GameEvent.FLUID_PICKUP, blockPos);
-                        ItemStack itemStack1 = ItemUtils.createFilledResult(itemInHand, player, itemStack);
-                        if (!level.isClientSide) {
-                            CriteriaTriggers.FILLED_BUCKET.trigger((ServerPlayer)player, itemStack);
+            BlockPos blockposition = movingobjectpositionblock.getBlockPos();
+            Direction enumdirection = movingobjectpositionblock.getDirection();
+            BlockPos blockposition1 = blockposition.relative(enumdirection);
+
+            if (level.mayInteract(player, blockposition) && player.mayUseItemAt(blockposition1, enumdirection, itemstack)) {
+                IBlockData iblockdata;
+
+                if (this.content == Fluids.EMPTY) {
+                    iblockdata = level.getBlockState(blockposition);
+                    Block block = iblockdata.getBlock();
+
+                    if (block instanceof BucketPickup) {
+                        BucketPickup ifluidsource = (BucketPickup) block;
+                        // CraftBukkit start
+                        ItemStack dummyFluid = ifluidsource.pickupBlock(player, DummyGeneratorAccess.INSTANCE, blockposition, iblockdata);
+                        if (dummyFluid.isEmpty()) return InteractionResultHolder.fail(itemstack); // Don't fire event if the bucket won't be filled.
+                        PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent((ServerLevel) level, player, blockposition, blockposition, movingobjectpositionblock.getDirection(), itemstack, dummyFluid.getItem(), hand);
+
+                        if (event.isCancelled()) {
+                            ((ServerPlayer) player).connection.send(new ClientboundBlockUpdatePacket(level, blockposition)); // SPIGOT-5163 (see PlayerInteractManager)
+                            ((ServerPlayer) player).getBukkitEntity().updateInventory(); // SPIGOT-4541
+                            return InteractionResultHolder.fail(itemstack);
                         }
+                        // CraftBukkit end
+                        ItemStack itemstack1 = ifluidsource.pickupBlock(player, level, blockposition, iblockdata);
 
-                        return InteractionResultHolder.sidedSuccess(itemStack1, level.isClientSide());
-                    }
-                }
+                        if (!itemstack1.isEmpty()) {
+                            player.awardStat(Stats.ITEM_USED.get(this));
+                            ifluidsource.getPickupSound().ifPresent((soundeffect) -> {
+                                player.playSound(soundeffect, 1.0F, 1.0F);
+                            });
+                            level.gameEvent((Entity) player, GameEvent.FLUID_PICKUP, blockposition);
+                            ItemStack itemstack2 = ItemUtils.createFilledResult(itemstack, player, CraftItemStack.asNMSCopy(event.getItemStack())); // CraftBukkit
 
-                return InteractionResultHolder.fail(itemInHand);
-            } else {
-                BlockState blockState = level.getBlockState(blockPos);
-                BlockPos blockPos2 = blockState.getBlock() instanceof LiquidBlockContainer && this.content == Fluids.WATER ? blockPos : blockPos1;
-                if (this.emptyContents(player, level, blockPos2, playerPOVHitResult)) {
-                    this.checkExtraContent(player, level, itemInHand, blockPos2);
-                    if (player instanceof ServerPlayer) {
-                        CriteriaTriggers.PLACED_BLOCK.trigger((ServerPlayer)player, blockPos2, itemInHand);
+                            if (!level.isClientSide) {
+                                CriteriaTriggers.FILLED_BUCKET.trigger((ServerPlayer) player, itemstack1);
+                            }
+
+                            return InteractionResultHolder.sidedSuccess(itemstack2, level.isClientSide());
+                        }
                     }
 
-                    player.awardStat(Stats.ITEM_USED.get(this));
-                    return InteractionResultHolder.sidedSuccess(getEmptySuccessItem(itemInHand, player), level.isClientSide());
+                    return InteractionResultHolder.fail(itemstack);
                 } else {
-                    return InteractionResultHolder.fail(itemInHand);
+                    iblockdata = level.getBlockState(blockposition);
+                    BlockPos blockposition2 = iblockdata.getBlock() instanceof LiquidBlockContainer && this.content == Fluids.WATER ? blockposition : blockposition1;
+
+                    if (this.emptyContents(player, level, blockposition2, movingobjectpositionblock, movingobjectpositionblock.getDirection(), blockposition, itemstack, hand)) { // CraftBukkit
+                        this.checkExtraContent(player, level, itemstack, blockposition2);
+                        if (player instanceof ServerPlayer) {
+                            CriteriaTriggers.PLACED_BLOCK.trigger((ServerPlayer) player, blockposition2, itemstack);
+                        }
+
+                        player.awardStat(Stats.ITEM_USED.get(this));
+                        return InteractionResultHolder.sidedSuccess(getEmptySuccessItem(itemstack, player), level.isClientSide());
+                    } else {
+                        return InteractionResultHolder.fail(itemstack);
+                    }
                 }
+            } else {
+                return InteractionResultHolder.fail(itemstack);
             }
         }
     }
@@ -93,67 +126,95 @@
     }
 
     @Override
-    public void checkExtraContent(@Nullable Player player, Level level, ItemStack containerStack, BlockPos pos) {
-    }
+    public void checkExtraContent(@Nullable Player player, Level level, ItemStack containerStack, BlockPos pos) {}
 
     @Override
     public boolean emptyContents(@Nullable Player player, Level level, BlockPos pos, @Nullable BlockHitResult result) {
-        if (!(this.content instanceof FlowingFluid flowingFluid)) {
+        // CraftBukkit start
+        return emptyContents(player, level, pos, result, null, null, null, EnumHand.MAIN_HAND);
+    }
+
+    public boolean emptyContents(Player entityhuman, Level world, BlockPos blockposition, @Nullable BlockHitResult movingobjectpositionblock, Direction enumdirection, BlockPos clicked, ItemStack itemstack, EnumHand enumhand) {
+        // CraftBukkit end
+        Fluid fluidtype = this.content;
+
+        if (!(fluidtype instanceof FlowingFluid)) {
             return false;
         } else {
+            FlowingFluid fluidtypeflowing;
+            IBlockData iblockdata;
             Block block;
-            boolean canBeReplaced;
-            BlockState blockState;
-            boolean var10000;
-            label82: {
-                blockState = level.getBlockState(pos);
-                block = blockState.getBlock();
-                canBeReplaced = blockState.canBeReplaced(this.content);
-                label70:
-                if (!blockState.isAir() && !canBeReplaced) {
-                    if (block instanceof LiquidBlockContainer liquidBlockContainer
-                        && liquidBlockContainer.canPlaceLiquid(player, level, pos, blockState, this.content)) {
+            boolean flag;
+            LiquidBlockContainer ifluidcontainer;
+            boolean flag1;
+            label70:
+            {
+                fluidtypeflowing = (FlowingFluid) fluidtype;
+                iblockdata = world.getBlockState(blockposition);
+                block = iblockdata.getBlock();
+                flag = iblockdata.canBeReplaced(this.content);
+                if (!iblockdata.isAir() && !flag) {
+                    label67:
+                    {
+                        if (block instanceof LiquidBlockContainer) {
+                            ifluidcontainer = (LiquidBlockContainer) block;
+                            if (ifluidcontainer.canPlaceLiquid(entityhuman, world, blockposition, iblockdata, this.content)) {
+                                break label67;
+                            }
+                        }
+
+                        flag1 = false;
                         break label70;
                     }
-
-                    var10000 = false;
-                    break label82;
                 }
 
-                var10000 = true;
+                flag1 = true;
             }
 
-            boolean flag = var10000;
-            if (!flag) {
-                return result != null && this.emptyContents(player, level, result.getBlockPos().relative(result.getDirection()), null);
-            } else if (level.dimensionType().ultraWarm() && this.content.is(FluidTags.WATER)) {
-                int x = pos.getX();
-                int y = pos.getY();
-                int z = pos.getZ();
-                level.playSound(
-                    player, pos, SoundEvents.FIRE_EXTINGUISH, SoundSource.BLOCKS, 0.5F, 2.6F + (level.random.nextFloat() - level.random.nextFloat()) * 0.8F
-                );
+            boolean flag2 = flag1;
 
-                for (int i = 0; i < 8; i++) {
-                    level.addParticle(ParticleTypes.LARGE_SMOKE, (double)x + Math.random(), (double)y + Math.random(), (double)z + Math.random(), 0.0, 0.0, 0.0);
+            // CraftBukkit start
+            if (flag2 && entityhuman != null) {
+                PlayerBucketEmptyEvent event = CraftEventFactory.callPlayerBucketEmptyEvent((ServerLevel) world, entityhuman, blockposition, clicked, enumdirection, itemstack, enumhand);
+                if (event.isCancelled()) {
+                    ((ServerPlayer) entityhuman).connection.send(new ClientboundBlockUpdatePacket(world, blockposition)); // SPIGOT-4238: needed when looking through entity
+                    ((ServerPlayer) entityhuman).getBukkitEntity().updateInventory(); // SPIGOT-4541
+                    return false;
                 }
+            }
+            // CraftBukkit end
+            if (!flag2) {
+                return movingobjectpositionblock != null && this.emptyContents(entityhuman, world, movingobjectpositionblock.getBlockPos().relative(movingobjectpositionblock.getDirection()), (BlockHitResult) null, enumdirection, clicked, itemstack, enumhand); // CraftBukkit
+            } else if (world.dimensionType().ultraWarm() && this.content.is(FluidTags.WATER)) {
+                int i = blockposition.getX();
+                int j = blockposition.getY();
+                int k = blockposition.getZ();
 
+                world.playSound(entityhuman, blockposition, SoundEvents.FIRE_EXTINGUISH, SoundSource.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
+
+                for (int l = 0; l < 8; ++l) {
+                    world.addParticle(ParticleTypes.LARGE_SMOKE, (double) i + Math.random(), (double) j + Math.random(), (double) k + Math.random(), 0.0D, 0.0D, 0.0D);
+                }
+
                 return true;
             } else {
-                if (block instanceof LiquidBlockContainer liquidBlockContainer && this.content == Fluids.WATER) {
-                    liquidBlockContainer.placeLiquid(level, pos, blockState, flowingFluid.getSource(false));
-                    this.playEmptySound(player, level, pos);
-                    return true;
+                if (block instanceof LiquidBlockContainer) {
+                    ifluidcontainer = (LiquidBlockContainer) block;
+                    if (this.content == Fluids.WATER) {
+                        ifluidcontainer.placeLiquid(world, blockposition, iblockdata, fluidtypeflowing.getSource(false));
+                        this.playEmptySound(entityhuman, world, blockposition);
+                        return true;
+                    }
                 }
 
-                if (!level.isClientSide && canBeReplaced && !blockState.liquid()) {
-                    level.destroyBlock(pos, true);
+                if (!world.isClientSide && flag && !iblockdata.liquid()) {
+                    world.destroyBlock(blockposition, true);
                 }
 
-                if (!level.setBlock(pos, this.content.defaultFluidState().createLegacyBlock(), 11) && !blockState.getFluidState().isSource()) {
+                if (!world.setBlock(blockposition, this.content.defaultFluidState().createLegacyBlock(), 11) && !iblockdata.getFluidState().isSource()) {
                     return false;
                 } else {
-                    this.playEmptySound(player, level, pos);
+                    this.playEmptySound(entityhuman, world, blockposition);
                     return true;
                 }
             }
@@ -161,8 +222,9 @@
     }
 
     protected void playEmptySound(@Nullable Player player, LevelAccessor level, BlockPos pos) {
-        SoundEvent soundEvent = this.content.is(FluidTags.LAVA) ? SoundEvents.BUCKET_EMPTY_LAVA : SoundEvents.BUCKET_EMPTY;
-        level.playSound(player, pos, soundEvent, SoundSource.BLOCKS, 1.0F, 1.0F);
-        level.gameEvent(player, GameEvent.FLUID_PLACE, pos);
+        SoundEvent soundeffect = this.content.is(FluidTags.LAVA) ? SoundEvents.BUCKET_EMPTY_LAVA : SoundEvents.BUCKET_EMPTY;
+
+        level.playSound(player, pos, soundeffect, SoundSource.BLOCKS, 1.0F, 1.0F);
+        level.gameEvent((Entity) player, GameEvent.FLUID_PLACE, pos);
     }
 }
