--- a/net/minecraft/world/item/trading/MerchantOffer.java
+++ b/net/minecraft/world/item/trading/MerchantOffer.java
@@ -5,19 +5,40 @@
 import net.minecraft.util.Mth;
 import net.minecraft.world.item.ItemStack;
 
+import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe; // CraftBukkit
+
 public class MerchantOffer {
-    private final ItemStack baseCostA;
-    private final ItemStack costB;
-    private final ItemStack result;
-    private int uses;
-    private final int maxUses;
-    private boolean rewardExp = true;
-    private int specialPriceDiff;
-    private int demand;
-    private float priceMultiplier;
-    private int xp = 1;
 
+    public ItemStack baseCostA;
+    public ItemStack costB;
+    public final ItemStack result;
+    public int uses;
+    public int maxUses;
+    public boolean rewardExp;
+    public int specialPriceDiff;
+    public int demand;
+    public float priceMultiplier;
+    public int xp;
+    // CraftBukkit start
+    private CraftMerchantRecipe bukkitHandle;
+
+    public CraftMerchantRecipe asBukkit() {
+        return (bukkitHandle == null) ? bukkitHandle = new CraftMerchantRecipe(this) : bukkitHandle;
+    }
+
+    public MerchantOffer(ItemStack itemstack, ItemStack itemstack1, ItemStack itemstack2, int uses, int maxUses, int experience, float priceMultiplier, CraftMerchantRecipe bukkit) {
+        this(itemstack, itemstack1, itemstack2, uses, maxUses, experience, priceMultiplier, 0, bukkit);
+    }
+
+    public MerchantOffer(ItemStack itemstack, ItemStack itemstack1, ItemStack itemstack2, int uses, int maxUses, int experience, float priceMultiplier, int demand, CraftMerchantRecipe bukkit) {
+        this(itemstack, itemstack1, itemstack2, uses, maxUses, experience, priceMultiplier, demand);
+        this.bukkitHandle = bukkit;
+    }
+    // CraftBukkit end
+
     public MerchantOffer(CompoundTag compoundTag) {
+        this.rewardExp = true;
+        this.xp = 1;
         this.baseCostA = ItemStack.of(compoundTag.getCompound("buy"));
         this.costB = ItemStack.of(compoundTag.getCompound("buyB"));
         this.result = ItemStack.of(compoundTag.getCompound("sell"));
@@ -52,32 +73,36 @@
         this(baseCostA, costB, result, 0, maxUses, xp, priceMultiplier);
     }
 
-    public MerchantOffer(ItemStack baseCostA, ItemStack costB, ItemStack result, int _uses, int maxUses, int xp, float priceMultiplier) {
-        this(baseCostA, costB, result, _uses, maxUses, xp, priceMultiplier, 0);
+    public MerchantOffer(ItemStack baseCostA, ItemStack costB, ItemStack result, int uses, int maxUses, int xp, float priceMultiplier) {
+        this(baseCostA, costB, result, uses, maxUses, xp, priceMultiplier, 0);
     }
 
-    public MerchantOffer(ItemStack baseCostA, ItemStack costB, ItemStack result, int _uses, int maxUses, int xp, float priceMultiplier, int demand) {
+    public MerchantOffer(ItemStack baseCostA, ItemStack costB, ItemStack result, int uses, int maxUses, int xp, float priceMultiplier, int demand) {
+        this.rewardExp = true;
+        this.xp = 1;
         this.baseCostA = baseCostA;
         this.costB = costB;
         this.result = result;
-        this.uses = _uses;
+        this.uses = uses;
         this.maxUses = maxUses;
         this.xp = xp;
         this.priceMultiplier = priceMultiplier;
         this.demand = demand;
     }
 
-    private MerchantOffer(MerchantOffer merchantOffer) {
-        this.baseCostA = merchantOffer.baseCostA.copy();
-        this.costB = merchantOffer.costB.copy();
-        this.result = merchantOffer.result.copy();
-        this.uses = merchantOffer.uses;
-        this.maxUses = merchantOffer.maxUses;
-        this.rewardExp = merchantOffer.rewardExp;
-        this.specialPriceDiff = merchantOffer.specialPriceDiff;
-        this.demand = merchantOffer.demand;
-        this.priceMultiplier = merchantOffer.priceMultiplier;
-        this.xp = merchantOffer.xp;
+    private MerchantOffer(MerchantOffer merchantrecipe) {
+        this.rewardExp = true;
+        this.xp = 1;
+        this.baseCostA = merchantrecipe.baseCostA.copy();
+        this.costB = merchantrecipe.costB.copy();
+        this.result = merchantrecipe.result.copy();
+        this.uses = merchantrecipe.uses;
+        this.maxUses = merchantrecipe.maxUses;
+        this.rewardExp = merchantrecipe.rewardExp;
+        this.specialPriceDiff = merchantrecipe.specialPriceDiff;
+        this.demand = merchantrecipe.demand;
+        this.priceMultiplier = merchantrecipe.priceMultiplier;
+        this.xp = merchantrecipe.xp;
     }
 
     public ItemStack getBaseCostA() {
@@ -88,9 +113,11 @@
         if (this.baseCostA.isEmpty()) {
             return ItemStack.EMPTY;
         } else {
-            int count = this.baseCostA.getCount();
-            int max = Math.max(0, Mth.floor((float)(count * this.demand) * this.priceMultiplier));
-            return this.baseCostA.copyWithCount(Mth.clamp(count + max + this.specialPriceDiff, 1, this.baseCostA.getItem().getMaxStackSize()));
+            int i = this.baseCostA.getCount();
+            if (i <= 0) return ItemStack.EMPTY; // CraftBukkit - SPIGOT-5476
+            int j = Math.max(0, Mth.floor((float) (i * this.demand) * this.priceMultiplier));
+
+            return this.baseCostA.copyWithCount(Mth.clamp(i + j + this.specialPriceDiff, 1, this.baseCostA.getItem().getMaxStackSize()));
         }
     }
 
@@ -123,7 +150,7 @@
     }
 
     public void increaseUses() {
-        this.uses++;
+        ++this.uses;
     }
 
     public int getDemand() {
@@ -171,38 +198,36 @@
     }
 
     public CompoundTag createTag() {
-        CompoundTag compoundTag = new CompoundTag();
-        compoundTag.put("buy", this.baseCostA.save(new CompoundTag()));
-        compoundTag.put("sell", this.result.save(new CompoundTag()));
-        compoundTag.put("buyB", this.costB.save(new CompoundTag()));
-        compoundTag.putInt("uses", this.uses);
-        compoundTag.putInt("maxUses", this.maxUses);
-        compoundTag.putBoolean("rewardExp", this.rewardExp);
-        compoundTag.putInt("xp", this.xp);
-        compoundTag.putFloat("priceMultiplier", this.priceMultiplier);
-        compoundTag.putInt("specialPrice", this.specialPriceDiff);
-        compoundTag.putInt("demand", this.demand);
-        return compoundTag;
+        CompoundTag nbttagcompound = new CompoundTag();
+
+        nbttagcompound.put("buy", this.baseCostA.save(new CompoundTag()));
+        nbttagcompound.put("sell", this.result.save(new CompoundTag()));
+        nbttagcompound.put("buyB", this.costB.save(new CompoundTag()));
+        nbttagcompound.putInt("uses", this.uses);
+        nbttagcompound.putInt("maxUses", this.maxUses);
+        nbttagcompound.putBoolean("rewardExp", this.rewardExp);
+        nbttagcompound.putInt("xp", this.xp);
+        nbttagcompound.putFloat("priceMultiplier", this.priceMultiplier);
+        nbttagcompound.putInt("specialPrice", this.specialPriceDiff);
+        nbttagcompound.putInt("demand", this.demand);
+        return nbttagcompound;
     }
 
     public boolean satisfiedBy(ItemStack playerOfferA, ItemStack playerOfferB) {
-        return this.isRequiredItem(playerOfferA, this.getCostA())
-            && playerOfferA.getCount() >= this.getCostA().getCount()
-            && this.isRequiredItem(playerOfferB, this.costB)
-            && playerOfferB.getCount() >= this.costB.getCount();
+        return this.isRequiredItem(playerOfferA, this.getCostA()) && playerOfferA.getCount() >= this.getCostA().getCount() && this.isRequiredItem(playerOfferB, this.costB) && playerOfferB.getCount() >= this.costB.getCount();
     }
 
     private boolean isRequiredItem(ItemStack offer, ItemStack cost) {
         if (cost.isEmpty() && offer.isEmpty()) {
             return true;
         } else {
-            ItemStack itemStack = offer.copy();
-            if (itemStack.getItem().canBeDepleted()) {
-                itemStack.setDamageValue(itemStack.getDamageValue());
+            ItemStack itemstack2 = offer.copy();
+
+            if (itemstack2.getItem().canBeDepleted()) {
+                itemstack2.setDamageValue(itemstack2.getDamageValue());
             }
 
-            return ItemStack.isSameItem(itemStack, cost)
-                && (!cost.hasTag() || itemStack.hasTag() && NbtUtils.compareNbt(cost.getTag(), itemStack.getTag(), false));
+            return ItemStack.isSameItem(itemstack2, cost) && (!cost.hasTag() || itemstack2.hasTag() && NbtUtils.compareNbt(cost.getTag(), itemstack2.getTag(), false));
         }
     }
 
@@ -210,7 +235,11 @@
         if (!this.satisfiedBy(playerOfferA, playerOfferB)) {
             return false;
         } else {
-            playerOfferA.shrink(this.getCostA().getCount());
+            // CraftBukkit start
+            if (!this.getCostA().isEmpty()) {
+                playerOfferA.shrink(this.getCostA().getCount());
+            }
+            // CraftBukkit end
             if (!this.getCostB().isEmpty()) {
                 playerOfferB.shrink(this.getCostB().getCount());
             }
