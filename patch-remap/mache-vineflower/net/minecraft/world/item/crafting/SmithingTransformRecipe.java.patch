--- a/net/minecraft/world/item/crafting/SmithingTransformRecipe.java
+++ b/net/minecraft/world/item/crafting/SmithingTransformRecipe.java
@@ -2,7 +2,6 @@
 
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
-import com.mojang.serialization.codecs.RecordCodecBuilder.Instance;
 import java.util.stream.Stream;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.nbt.CompoundTag;
@@ -10,18 +9,26 @@
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
+// CraftBukkit start
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftRecipe;
+import org.bukkit.craftbukkit.inventory.CraftSmithingTransformRecipe;
+import org.bukkit.inventory.Recipe;
+// CraftBukkit end
 
 public class SmithingTransformRecipe implements SmithingRecipe {
+
     final Ingredient template;
     final Ingredient base;
     final Ingredient addition;
     final ItemStack result;
 
-    public SmithingTransformRecipe(Ingredient ingredient, Ingredient ingredient1, Ingredient ingredient2, ItemStack itemStack) {
-        this.template = ingredient;
-        this.base = ingredient1;
-        this.addition = ingredient2;
-        this.result = itemStack;
+    public SmithingTransformRecipe(Ingredient recipeitemstack, Ingredient recipeitemstack1, Ingredient recipeitemstack2, ItemStack itemstack) {
+        this.template = recipeitemstack;
+        this.base = recipeitemstack1;
+        this.addition = recipeitemstack2;
+        this.result = itemstack;
     }
 
     @Override
@@ -31,13 +38,14 @@
 
     @Override
     public ItemStack assemble(Container container, RegistryAccess registryAccess) {
-        ItemStack itemStack = this.result.copy();
-        CompoundTag tag = container.getItem(1).getTag();
-        if (tag != null) {
-            itemStack.setTag(tag.copy());
+        ItemStack itemstack = this.result.copy();
+        CompoundTag nbttagcompound = container.getItem(1).getTag();
+
+        if (nbttagcompound != null) {
+            itemstack.setTag(nbttagcompound.copy());
         }
 
-        return itemStack;
+        return itemstack;
     }
 
     @Override
@@ -70,37 +78,53 @@
         return Stream.of(this.template, this.base, this.addition).anyMatch(Ingredient::isEmpty);
     }
 
-    public static class Serializer implements RecipeSerializer<SmithingTransformRecipe> {
-        private static final Codec<SmithingTransformRecipe> CODEC = RecordCodecBuilder.create(
-            instance -> instance.group(
-                        Ingredient.CODEC.fieldOf("template").forGetter(smithingTransformRecipe -> smithingTransformRecipe.template),
-                        Ingredient.CODEC.fieldOf("base").forGetter(smithingTransformRecipe -> smithingTransformRecipe.base),
-                        Ingredient.CODEC.fieldOf("addition").forGetter(smithingTransformRecipe -> smithingTransformRecipe.addition),
-                        ItemStack.ITEM_WITH_COUNT_CODEC.fieldOf("result").forGetter(smithingTransformRecipe -> smithingTransformRecipe.result)
-                    )
-                    .apply(instance, SmithingTransformRecipe::new)
-        );
+    // CraftBukkit start
+    @Override
+    public Recipe toBukkitRecipe(NamespacedKey id) {
+        CraftItemStack result = CraftItemStack.asCraftMirror(this.result);
 
+        CraftSmithingTransformRecipe recipe = new CraftSmithingTransformRecipe(id, result, CraftRecipe.toBukkit(this.template), CraftRecipe.toBukkit(this.base), CraftRecipe.toBukkit(this.addition));
+
+        return recipe;
+    }
+    // CraftBukkit end
+
+    public static class a implements RecipeSerializer<SmithingTransformRecipe> {
+
+        private static final Codec<SmithingTransformRecipe> CODEC = RecordCodecBuilder.create((instance) -> {
+            return instance.group(Ingredient.CODEC.fieldOf("template").forGetter((smithingtransformrecipe) -> {
+                return smithingtransformrecipe.template;
+            }), Ingredient.CODEC.fieldOf("base").forGetter((smithingtransformrecipe) -> {
+                return smithingtransformrecipe.base;
+            }), Ingredient.CODEC.fieldOf("addition").forGetter((smithingtransformrecipe) -> {
+                return smithingtransformrecipe.addition;
+            }), ItemStack.ITEM_WITH_COUNT_CODEC.fieldOf("result").forGetter((smithingtransformrecipe) -> {
+                return smithingtransformrecipe.result;
+            })).apply(instance, SmithingTransformRecipe::new);
+        });
+
+        public a() {}
+
         @Override
         public Codec<SmithingTransformRecipe> codec() {
-            return CODEC;
+            return SmithingTransformRecipe.a.CODEC;
         }
 
         @Override
-        public SmithingTransformRecipe fromNetwork(FriendlyByteBuf friendlyByteBuf) {
-            Ingredient ingredient = Ingredient.fromNetwork(friendlyByteBuf);
-            Ingredient ingredient1 = Ingredient.fromNetwork(friendlyByteBuf);
-            Ingredient ingredient2 = Ingredient.fromNetwork(friendlyByteBuf);
-            ItemStack item = friendlyByteBuf.readItem();
-            return new SmithingTransformRecipe(ingredient, ingredient1, ingredient2, item);
+        public SmithingTransformRecipe fromNetwork(FriendlyByteBuf packetdataserializer) {
+            Ingredient recipeitemstack = Ingredient.fromNetwork(packetdataserializer);
+            Ingredient recipeitemstack1 = Ingredient.fromNetwork(packetdataserializer);
+            Ingredient recipeitemstack2 = Ingredient.fromNetwork(packetdataserializer);
+            ItemStack itemstack = packetdataserializer.readItem();
+
+            return new SmithingTransformRecipe(recipeitemstack, recipeitemstack1, recipeitemstack2, itemstack);
         }
 
-        @Override
-        public void toNetwork(FriendlyByteBuf buffer, SmithingTransformRecipe recipe) {
-            recipe.template.toNetwork(buffer);
-            recipe.base.toNetwork(buffer);
-            recipe.addition.toNetwork(buffer);
-            buffer.writeItem(recipe.result);
+        public void toNetwork(FriendlyByteBuf packetdataserializer, SmithingTransformRecipe smithingtransformrecipe) {
+            smithingtransformrecipe.template.toNetwork(packetdataserializer);
+            smithingtransformrecipe.base.toNetwork(packetdataserializer);
+            smithingtransformrecipe.addition.toNetwork(packetdataserializer);
+            packetdataserializer.writeItem(smithingtransformrecipe.result);
         }
     }
 }
