--- a/net/minecraft/world/item/DebugStickItem.java
+++ b/net/minecraft/world/item/DebugStickItem.java
@@ -1,3 +1,4 @@
+// mc-dev import
 package net.minecraft.world.item;
 
 import java.util.Collection;
@@ -8,18 +9,19 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.Property;
 
 public class DebugStickItem extends Item {
+
     public DebugStickItem(Item.Properties properties) {
         super(properties);
     }
@@ -30,9 +32,9 @@
     }
 
     @Override
-    public boolean canAttackBlock(BlockState state, Level level, BlockPos pos, Player player) {
+    public boolean canAttackBlock(IBlockData state, Level level, BlockPos pos, Player player) {
         if (!level.isClientSide) {
-            this.handleInteraction(player, state, level, pos, false, player.getItemInHand(InteractionHand.MAIN_HAND));
+            this.handleInteraction(player, state, level, pos, false, player.getItemInHand(EnumHand.MAIN_HAND));
         }
 
         return false;
@@ -40,48 +42,52 @@
 
     @Override
     public InteractionResult useOn(UseOnContext context) {
-        Player player = context.getPlayer();
-        Level level = context.getLevel();
-        if (!level.isClientSide && player != null) {
-            BlockPos clickedPos = context.getClickedPos();
-            if (!this.handleInteraction(player, level.getBlockState(clickedPos), level, clickedPos, true, context.getItemInHand())) {
+        Player entityhuman = context.getPlayer();
+        Level world = context.getLevel();
+
+        if (!world.isClientSide && entityhuman != null) {
+            BlockPos blockposition = context.getClickedPos();
+
+            if (!this.handleInteraction(entityhuman, world.getBlockState(blockposition), world, blockposition, true, context.getItemInHand())) {
                 return InteractionResult.FAIL;
             }
         }
 
-        return InteractionResult.sidedSuccess(level.isClientSide);
+        return InteractionResult.sidedSuccess(world.isClientSide);
     }
 
-    private boolean handleInteraction(
-        Player player, BlockState stateClicked, LevelAccessor accessor, BlockPos pos, boolean shouldCycleState, ItemStack debugStack
-    ) {
+    public boolean handleInteraction(Player player, IBlockData stateClicked, LevelAccessor accessor, BlockPos pos, boolean shouldCycleState, ItemStack debugStack) {
         if (!player.canUseGameMasterBlocks()) {
             return false;
         } else {
             Block block = stateClicked.getBlock();
-            StateDefinition<Block, BlockState> stateDefinition = block.getStateDefinition();
-            Collection<Property<?>> properties = stateDefinition.getProperties();
-            String string = BuiltInRegistries.BLOCK.getKey(block).toString();
-            if (properties.isEmpty()) {
-                message(player, Component.translatable(this.getDescriptionId() + ".empty", string));
+            StateDefinition<Block, IBlockData> blockstatelist = block.getStateDefinition();
+            Collection<Property<?>> collection = blockstatelist.getProperties();
+            String s = BuiltInRegistries.BLOCK.getKey(block).toString();
+
+            if (collection.isEmpty()) {
+                message(player, Component.translatable(this.getDescriptionId() + ".empty", s));
                 return false;
             } else {
-                CompoundTag tagElement = debugStack.getOrCreateTagElement("DebugProperty");
-                String string1 = tagElement.getString(string);
-                Property<?> property = stateDefinition.getProperty(string1);
+                CompoundTag nbttagcompound = debugStack.getOrCreateTagElement("DebugProperty");
+                String s1 = nbttagcompound.getString(s);
+                Property<?> iblockstate = blockstatelist.getProperty(s1);
+
                 if (shouldCycleState) {
-                    if (property == null) {
-                        property = properties.iterator().next();
+                    if (iblockstate == null) {
+                        iblockstate = (Property) collection.iterator().next();
                     }
 
-                    BlockState blockState = cycleState(stateClicked, property, player.isSecondaryUseActive());
-                    accessor.setBlock(pos, blockState, 18);
-                    message(player, Component.translatable(this.getDescriptionId() + ".update", property.getName(), getNameHelper(blockState, property)));
+                    IBlockData iblockdata1 = cycleState(stateClicked, iblockstate, player.isSecondaryUseActive());
+
+                    accessor.setBlock(pos, iblockdata1, 18);
+                    message(player, Component.translatable(this.getDescriptionId() + ".update", iblockstate.getName(), getNameHelper(iblockdata1, iblockstate)));
                 } else {
-                    property = getRelative(properties, property, player.isSecondaryUseActive());
-                    String name = property.getName();
-                    tagElement.putString(string, name);
-                    message(player, Component.translatable(this.getDescriptionId() + ".select", name, getNameHelper(stateClicked, property)));
+                    iblockstate = (Property) getRelative(collection, iblockstate, player.isSecondaryUseActive());
+                    String s2 = iblockstate.getName();
+
+                    nbttagcompound.putString(s, s2);
+                    message(player, Component.translatable(this.getDescriptionId() + ".select", s2, getNameHelper(stateClicked, iblockstate)));
                 }
 
                 return true;
@@ -89,8 +95,8 @@
         }
     }
 
-    private static <T extends Comparable<T>> BlockState cycleState(BlockState state, Property<T> property, boolean backwards) {
-        return state.setValue(property, getRelative(property.getPossibleValues(), state.getValue(property), backwards));
+    private static <T extends Comparable<T>> IBlockData cycleState(IBlockData state, Property<T> property, boolean backwards) {
+        return (IBlockData) state.setValue(property, getRelative(property.getPossibleValues(), state.getValue(property), backwards)); // CraftBukkit - decompile error
     }
 
     private static <T> T getRelative(Iterable<T> allowedValues, @Nullable T currentValue, boolean backwards) {
@@ -98,10 +104,10 @@
     }
 
     private static void message(Player player, Component messageComponent) {
-        ((ServerPlayer)player).sendSystemMessage(messageComponent, true);
+        ((ServerPlayer) player).sendSystemMessage(messageComponent, true);
     }
 
-    private static <T extends Comparable<T>> String getNameHelper(BlockState state, Property<T> property) {
+    private static <T extends Comparable<T>> String getNameHelper(IBlockData state, Property<T> property) {
         return property.getName(state.getValue(property));
     }
 }
