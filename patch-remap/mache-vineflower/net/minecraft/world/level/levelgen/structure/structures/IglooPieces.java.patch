--- a/net/minecraft/world/level/levelgen/structure/structures/IglooPieces.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/IglooPieces.java
@@ -3,6 +3,7 @@
 import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Vec3i;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.RandomSource;
@@ -13,9 +14,7 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
-import net.minecraft.world.level.block.entity.BlockEntity;
-import net.minecraft.world.level.block.entity.ChestBlockEntity;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
@@ -30,64 +29,48 @@
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 
 public class IglooPieces {
+
     public static final int GENERATION_HEIGHT = 90;
     static final ResourceLocation STRUCTURE_LOCATION_IGLOO = new ResourceLocation("igloo/top");
     private static final ResourceLocation STRUCTURE_LOCATION_LADDER = new ResourceLocation("igloo/middle");
     private static final ResourceLocation STRUCTURE_LOCATION_LABORATORY = new ResourceLocation("igloo/bottom");
-    static final Map<ResourceLocation, BlockPos> PIVOTS = ImmutableMap.of(
-        STRUCTURE_LOCATION_IGLOO, new BlockPos(3, 5, 5), STRUCTURE_LOCATION_LADDER, new BlockPos(1, 3, 1), STRUCTURE_LOCATION_LABORATORY, new BlockPos(3, 6, 7)
-    );
-    static final Map<ResourceLocation, BlockPos> OFFSETS = ImmutableMap.of(
-        STRUCTURE_LOCATION_IGLOO, BlockPos.ZERO, STRUCTURE_LOCATION_LADDER, new BlockPos(2, -3, 4), STRUCTURE_LOCATION_LABORATORY, new BlockPos(0, -3, -2)
-    );
+    static final Map<ResourceLocation, BlockPos> PIVOTS = ImmutableMap.of(IglooPieces.STRUCTURE_LOCATION_IGLOO, new BlockPos(3, 5, 5), IglooPieces.STRUCTURE_LOCATION_LADDER, new BlockPos(1, 3, 1), IglooPieces.STRUCTURE_LOCATION_LABORATORY, new BlockPos(3, 6, 7));
+    static final Map<ResourceLocation, BlockPos> OFFSETS = ImmutableMap.of(IglooPieces.STRUCTURE_LOCATION_IGLOO, BlockPos.ZERO, IglooPieces.STRUCTURE_LOCATION_LADDER, new BlockPos(2, -3, 4), IglooPieces.STRUCTURE_LOCATION_LABORATORY, new BlockPos(0, -3, -2));
 
-    public static void addPieces(
-        StructureTemplateManager structureTemplateManager, BlockPos startPos, Rotation rotation, StructurePieceAccessor pieces, RandomSource random
-    ) {
-        if (random.nextDouble() < 0.5) {
+    public IglooPieces() {}
+
+    public static void addPieces(StructureTemplateManager structureTemplateManager, BlockPos startPos, Rotation rotation, StructurePieceAccessor pieces, RandomSource random) {
+        if (random.nextDouble() < 0.5D) {
             int i = random.nextInt(8) + 4;
-            pieces.addPiece(new IglooPieces.IglooPiece(structureTemplateManager, STRUCTURE_LOCATION_LABORATORY, startPos, rotation, i * 3));
 
-            for (int i1 = 0; i1 < i - 1; i1++) {
-                pieces.addPiece(new IglooPieces.IglooPiece(structureTemplateManager, STRUCTURE_LOCATION_LADDER, startPos, rotation, i1 * 3));
+            pieces.addPiece(new IglooPieces.IglooPiece(structureTemplateManager, IglooPieces.STRUCTURE_LOCATION_LABORATORY, startPos, rotation, i * 3));
+
+            for (int j = 0; j < i - 1; ++j) {
+                pieces.addPiece(new IglooPieces.IglooPiece(structureTemplateManager, IglooPieces.STRUCTURE_LOCATION_LADDER, startPos, rotation, j * 3));
             }
         }
 
-        pieces.addPiece(new IglooPieces.IglooPiece(structureTemplateManager, STRUCTURE_LOCATION_IGLOO, startPos, rotation, 0));
+        pieces.addPiece(new IglooPieces.IglooPiece(structureTemplateManager, IglooPieces.STRUCTURE_LOCATION_IGLOO, startPos, rotation, 0));
     }
 
     public static class IglooPiece extends TemplateStructurePiece {
+
         public IglooPiece(StructureTemplateManager structureTemplateManager, ResourceLocation location, BlockPos startPos, Rotation rotation, int down) {
-            super(
-                StructurePieceType.IGLOO,
-                0,
-                structureTemplateManager,
-                location,
-                location.toString(),
-                makeSettings(rotation, location),
-                makePosition(location, startPos, down)
-            );
+            super(StructurePieceType.IGLOO, 0, structureTemplateManager, location, location.toString(), makeSettings(rotation, location), makePosition(location, startPos, down));
         }
 
         public IglooPiece(StructureTemplateManager structureTemplateManager, CompoundTag tag) {
-            super(
-                StructurePieceType.IGLOO,
-                tag,
-                structureTemplateManager,
-                resourceLocation -> makeSettings(Rotation.valueOf(tag.getString("Rot")), resourceLocation)
-            );
+            super(StructurePieceType.IGLOO, tag, structureTemplateManager, (minecraftkey) -> {
+                return makeSettings(Rotation.valueOf(tag.getString("Rot")), minecraftkey);
+            });
         }
 
         private static StructurePlaceSettings makeSettings(Rotation rotation, ResourceLocation location) {
-            return new StructurePlaceSettings()
-                .setRotation(rotation)
-                .setMirror(Mirror.NONE)
-                .setRotationPivot(IglooPieces.PIVOTS.get(location))
-                .addProcessor(BlockIgnoreProcessor.STRUCTURE_BLOCK);
+            return (new StructurePlaceSettings()).setRotation(rotation).setMirror(Mirror.NONE).setRotationPivot((BlockPos) IglooPieces.PIVOTS.get(location)).addProcessor(BlockIgnoreProcessor.STRUCTURE_BLOCK);
         }
 
         private static BlockPos makePosition(ResourceLocation location, BlockPos pos, int down) {
-            return pos.offset(IglooPieces.OFFSETS.get(location)).below(down);
+            return pos.offset((Vec3i) IglooPieces.OFFSETS.get(location)).below(down);
         }
 
         @Override
@@ -100,41 +83,41 @@
         protected void handleDataMarker(String name, BlockPos pos, ServerLevelAccessor level, RandomSource random, BoundingBox box) {
             if ("chest".equals(name)) {
                 level.setBlock(pos, Blocks.AIR.defaultBlockState(), 3);
-                BlockEntity blockEntity = level.getBlockEntity(pos.below());
-                if (blockEntity instanceof ChestBlockEntity) {
-                    ((ChestBlockEntity)blockEntity).setLootTable(BuiltInLootTables.IGLOO_CHEST, random.nextLong());
+                // CraftBukkit start - ensure block transformation
+                /*
+                TileEntity tileentity = worldaccess.getBlockEntity(blockposition.below());
+
+                if (tileentity instanceof TileEntityChest) {
+                    ((TileEntityChest) tileentity).setLootTable(LootTables.IGLOO_CHEST, randomsource.nextLong());
                 }
+                */
+                setCraftLootTable(level, pos.below(), random, BuiltInLootTables.IGLOO_CHEST);
+                // CraftBukkit end
+
             }
         }
 
         @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
-            ResourceLocation resourceLocation = new ResourceLocation(this.templateName);
-            StructurePlaceSettings structurePlaceSettings = makeSettings(this.placeSettings.getRotation(), resourceLocation);
-            BlockPos blockPos = IglooPieces.OFFSETS.get(resourceLocation);
-            BlockPos blockPos1 = this.templatePosition
-                .offset(StructureTemplate.calculateRelativePosition(structurePlaceSettings, new BlockPos(3 - blockPos.getX(), 0, -blockPos.getZ())));
-            int height = level.getHeight(Heightmap.Types.WORLD_SURFACE_WG, blockPos1.getX(), blockPos1.getZ());
-            BlockPos blockPos2 = this.templatePosition;
-            this.templatePosition = this.templatePosition.offset(0, height - 90 - 1, 0);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            ResourceLocation minecraftkey = new ResourceLocation(this.templateName);
+            StructurePlaceSettings definedstructureinfo = makeSettings(this.placeSettings.getRotation(), minecraftkey);
+            BlockPos blockposition1 = (BlockPos) IglooPieces.OFFSETS.get(minecraftkey);
+            BlockPos blockposition2 = this.templatePosition.offset(StructureTemplate.calculateRelativePosition(definedstructureinfo, new BlockPos(3 - blockposition1.getX(), 0, -blockposition1.getZ())));
+            int i = level.getHeight(Heightmap.Types.WORLD_SURFACE_WG, blockposition2.getX(), blockposition2.getZ());
+            BlockPos blockposition3 = this.templatePosition;
+
+            this.templatePosition = this.templatePosition.offset(0, i - 90 - 1, 0);
             super.postProcess(level, structureManager, generator, random, box, chunkPos, pos);
-            if (resourceLocation.equals(IglooPieces.STRUCTURE_LOCATION_IGLOO)) {
-                BlockPos blockPos3 = this.templatePosition.offset(StructureTemplate.calculateRelativePosition(structurePlaceSettings, new BlockPos(3, 0, 5)));
-                BlockState blockState = level.getBlockState(blockPos3.below());
-                if (!blockState.isAir() && !blockState.is(Blocks.LADDER)) {
-                    level.setBlock(blockPos3, Blocks.SNOW_BLOCK.defaultBlockState(), 3);
+            if (minecraftkey.equals(IglooPieces.STRUCTURE_LOCATION_IGLOO)) {
+                BlockPos blockposition4 = this.templatePosition.offset(StructureTemplate.calculateRelativePosition(definedstructureinfo, new BlockPos(3, 0, 5)));
+                IBlockData iblockdata = level.getBlockState(blockposition4.below());
+
+                if (!iblockdata.isAir() && !iblockdata.is(Blocks.LADDER)) {
+                    level.setBlock(blockposition4, Blocks.SNOW_BLOCK.defaultBlockState(), 3);
                 }
             }
 
-            this.templatePosition = blockPos2;
+            this.templatePosition = blockposition3;
         }
     }
 }
