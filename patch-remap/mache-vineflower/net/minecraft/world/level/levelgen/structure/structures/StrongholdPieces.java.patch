--- a/net/minecraft/world/level/levelgen/structure/structures/StrongholdPieces.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/StrongholdPieces.java
@@ -1,13 +1,13 @@
 package net.minecraft.world.level.levelgen.structure.structures;
 
 import com.google.common.collect.Lists;
+import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.util.RandomSource;
-import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.StructureManager;
 import net.minecraft.world.level.WorldGenLevel;
@@ -21,9 +21,8 @@
 import net.minecraft.world.level.block.SlabBlock;
 import net.minecraft.world.level.block.StairBlock;
 import net.minecraft.world.level.block.WallTorchBlock;
-import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
-import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
+import net.minecraft.world.level.block.state.IBlockData;
+import net.minecraft.world.level.block.state.properties.BlockPropertyDoubleBlockHalf;
 import net.minecraft.world.level.block.state.properties.SlabType;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
@@ -34,997 +33,362 @@
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 
 public class StrongholdPieces {
+
     private static final int SMALL_DOOR_WIDTH = 3;
     private static final int SMALL_DOOR_HEIGHT = 3;
     private static final int MAX_DEPTH = 50;
     private static final int LOWEST_Y_POSITION = 10;
     private static final boolean CHECK_AIR = true;
     public static final int MAGIC_START_Y = 64;
-    private static final StrongholdPieces.PieceWeight[] STRONGHOLD_PIECE_WEIGHTS = new StrongholdPieces.PieceWeight[]{
-        new StrongholdPieces.PieceWeight(StrongholdPieces.Straight.class, 40, 0),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.PrisonHall.class, 5, 5),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.LeftTurn.class, 20, 0),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.RightTurn.class, 20, 0),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.RoomCrossing.class, 10, 6),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.StraightStairsDown.class, 5, 5),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.StairsDown.class, 5, 5),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.FiveCrossing.class, 5, 4),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.ChestCorridor.class, 5, 4),
-        new StrongholdPieces.PieceWeight(StrongholdPieces.Library.class, 10, 2) {
-            @Override
-            public boolean doPlace(int genDepth) {
-                return super.doPlace(genDepth) && genDepth > 4;
-            }
-        },
-        new StrongholdPieces.PieceWeight(StrongholdPieces.PortalRoom.class, 20, 1) {
-            @Override
-            public boolean doPlace(int genDepth) {
-                return super.doPlace(genDepth) && genDepth > 5;
-            }
-        }
-    };
+    private static final StrongholdPieces.PieceWeight[] STRONGHOLD_PIECE_WEIGHTS = new StrongholdPieces.PieceWeight[]{new StrongholdPieces.PieceWeight(StrongholdPieces.Straight.class, 40, 0), new StrongholdPieces.PieceWeight(StrongholdPieces.PrisonHall.class, 5, 5), new StrongholdPieces.PieceWeight(StrongholdPieces.LeftTurn.class, 20, 0), new StrongholdPieces.PieceWeight(StrongholdPieces.RightTurn.class, 20, 0), new StrongholdPieces.PieceWeight(StrongholdPieces.RoomCrossing.class, 10, 6), new StrongholdPieces.PieceWeight(StrongholdPieces.StraightStairsDown.class, 5, 5), new StrongholdPieces.PieceWeight(StrongholdPieces.StairsDown.class, 5, 5), new StrongholdPieces.PieceWeight(StrongholdPieces.FiveCrossing.class, 5, 4), new StrongholdPieces.PieceWeight(StrongholdPieces.ChestCorridor.class, 5, 4), new StrongholdPieces.PieceWeight(StrongholdPieces.Library.class, 10, 2) {
+                @Override
+                public boolean doPlace(int genDepth) {
+                    return super.doPlace(genDepth) && genDepth > 4;
+                }
+            }, new StrongholdPieces.PieceWeight(StrongholdPieces.PortalRoom.class, 20, 1) {
+                @Override
+                public boolean doPlace(int genDepth) {
+                    return super.doPlace(genDepth) && genDepth > 5;
+                }
+            } }; // CraftBukkit - fix decompile styling
     private static List<StrongholdPieces.PieceWeight> currentPieces;
     static Class<? extends StrongholdPieces.StrongholdPiece> imposedPiece;
     private static int totalWeight;
-    static final StrongholdPieces.SmoothStoneSelector SMOOTH_STONE_SELECTOR = new StrongholdPieces.SmoothStoneSelector();
+    static final StrongholdPieces.k SMOOTH_STONE_SELECTOR = new StrongholdPieces.k();
 
+    public StrongholdPieces() {}
+
     public static void resetPieces() {
-        currentPieces = Lists.newArrayList();
+        StrongholdPieces.currentPieces = Lists.newArrayList();
+        StrongholdPieces.PieceWeight[] astrongholdpieces_f = StrongholdPieces.STRONGHOLD_PIECE_WEIGHTS;
+        int i = astrongholdpieces_f.length;
 
-        for (StrongholdPieces.PieceWeight pieceWeight : STRONGHOLD_PIECE_WEIGHTS) {
-            pieceWeight.placeCount = 0;
-            currentPieces.add(pieceWeight);
+        for (int j = 0; j < i; ++j) {
+            StrongholdPieces.PieceWeight strongholdpieces_f = astrongholdpieces_f[j];
+
+            strongholdpieces_f.placeCount = 0;
+            StrongholdPieces.currentPieces.add(strongholdpieces_f);
         }
 
-        imposedPiece = null;
+        StrongholdPieces.imposedPiece = null;
     }
 
     private static boolean updatePieceWeight() {
         boolean flag = false;
-        totalWeight = 0;
 
-        for (StrongholdPieces.PieceWeight pieceWeight : currentPieces) {
-            if (pieceWeight.maxPlaceCount > 0 && pieceWeight.placeCount < pieceWeight.maxPlaceCount) {
+        StrongholdPieces.totalWeight = 0;
+
+        StrongholdPieces.PieceWeight strongholdpieces_f;
+
+        for (Iterator iterator = StrongholdPieces.currentPieces.iterator(); iterator.hasNext(); StrongholdPieces.totalWeight += strongholdpieces_f.weight) {
+            strongholdpieces_f = (StrongholdPieces.PieceWeight) iterator.next();
+            if (strongholdpieces_f.maxPlaceCount > 0 && strongholdpieces_f.placeCount < strongholdpieces_f.maxPlaceCount) {
                 flag = true;
             }
-
-            totalWeight = totalWeight + pieceWeight.weight;
         }
 
         return flag;
     }
 
-    private static StrongholdPieces.StrongholdPiece findAndCreatePieceFactory(
-        Class<? extends StrongholdPieces.StrongholdPiece> pieceClass,
-        StructurePieceAccessor pieces,
-        RandomSource random,
-        int x,
-        int y,
-        int z,
-        @Nullable Direction direction,
-        int genDepth
-    ) {
-        StrongholdPieces.StrongholdPiece strongholdPiece = null;
+    private static StrongholdPieces.StrongholdPiece findAndCreatePieceFactory(Class<? extends StrongholdPieces.StrongholdPiece> pieceClass, StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, @Nullable Direction direction, int genDepth) {
+        Object object = null;
+
         if (pieceClass == StrongholdPieces.Straight.class) {
-            strongholdPiece = StrongholdPieces.Straight.createPiece(pieces, random, x, y, z, direction, genDepth);
+            object = StrongholdPieces.Straight.createPiece(pieces, random, x, y, z, direction, genDepth);
         } else if (pieceClass == StrongholdPieces.PrisonHall.class) {
-            strongholdPiece = StrongholdPieces.PrisonHall.createPiece(pieces, random, x, y, z, direction, genDepth);
+            object = StrongholdPieces.PrisonHall.createPiece(pieces, random, x, y, z, direction, genDepth);
         } else if (pieceClass == StrongholdPieces.LeftTurn.class) {
-            strongholdPiece = StrongholdPieces.LeftTurn.createPiece(pieces, random, x, y, z, direction, genDepth);
+            object = StrongholdPieces.LeftTurn.createPiece(pieces, random, x, y, z, direction, genDepth);
         } else if (pieceClass == StrongholdPieces.RightTurn.class) {
-            strongholdPiece = StrongholdPieces.RightTurn.createPiece(pieces, random, x, y, z, direction, genDepth);
+            object = StrongholdPieces.RightTurn.createPiece(pieces, random, x, y, z, direction, genDepth);
         } else if (pieceClass == StrongholdPieces.RoomCrossing.class) {
-            strongholdPiece = StrongholdPieces.RoomCrossing.createPiece(pieces, random, x, y, z, direction, genDepth);
+            object = StrongholdPieces.RoomCrossing.createPiece(pieces, random, x, y, z, direction, genDepth);
         } else if (pieceClass == StrongholdPieces.StraightStairsDown.class) {
-            strongholdPiece = StrongholdPieces.StraightStairsDown.createPiece(pieces, random, x, y, z, direction, genDepth);
+            object = StrongholdPieces.StraightStairsDown.createPiece(pieces, random, x, y, z, direction, genDepth);
         } else if (pieceClass == StrongholdPieces.StairsDown.class) {
-            strongholdPiece = StrongholdPieces.StairsDown.createPiece(pieces, random, x, y, z, direction, genDepth);
+            object = StrongholdPieces.StairsDown.createPiece(pieces, random, x, y, z, direction, genDepth);
         } else if (pieceClass == StrongholdPieces.FiveCrossing.class) {
-            strongholdPiece = StrongholdPieces.FiveCrossing.createPiece(pieces, random, x, y, z, direction, genDepth);
+            object = StrongholdPieces.FiveCrossing.createPiece(pieces, random, x, y, z, direction, genDepth);
         } else if (pieceClass == StrongholdPieces.ChestCorridor.class) {
-            strongholdPiece = StrongholdPieces.ChestCorridor.createPiece(pieces, random, x, y, z, direction, genDepth);
+            object = StrongholdPieces.ChestCorridor.createPiece(pieces, random, x, y, z, direction, genDepth);
         } else if (pieceClass == StrongholdPieces.Library.class) {
-            strongholdPiece = StrongholdPieces.Library.createPiece(pieces, random, x, y, z, direction, genDepth);
+            object = StrongholdPieces.Library.createPiece(pieces, random, x, y, z, direction, genDepth);
         } else if (pieceClass == StrongholdPieces.PortalRoom.class) {
-            strongholdPiece = StrongholdPieces.PortalRoom.createPiece(pieces, x, y, z, direction, genDepth);
+            object = StrongholdPieces.PortalRoom.createPiece(pieces, x, y, z, direction, genDepth);
         }
 
-        return strongholdPiece;
+        return (StrongholdPieces.StrongholdPiece) object;
     }
 
-    private static StrongholdPieces.StrongholdPiece generatePieceFromSmallDoor(
-        StrongholdPieces.StartPiece piece, StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction direction, int genDepth
-    ) {
+    private static StrongholdPieces.StrongholdPiece generatePieceFromSmallDoor(StrongholdPieces.StartPiece piece, StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction direction, int genDepth) {
         if (!updatePieceWeight()) {
             return null;
         } else {
-            if (imposedPiece != null) {
-                StrongholdPieces.StrongholdPiece strongholdPiece = findAndCreatePieceFactory(imposedPiece, pieces, random, x, y, z, direction, genDepth);
-                imposedPiece = null;
-                if (strongholdPiece != null) {
-                    return strongholdPiece;
+            if (StrongholdPieces.imposedPiece != null) {
+                StrongholdPieces.StrongholdPiece strongholdpieces_p = findAndCreatePieceFactory(StrongholdPieces.imposedPiece, pieces, random, x, y, z, direction, genDepth);
+
+                StrongholdPieces.imposedPiece = null;
+                if (strongholdpieces_p != null) {
+                    return strongholdpieces_p;
                 }
             }
 
-            int i = 0;
+            int i1 = 0;
 
-            while (i < 5) {
-                i++;
-                int randomInt = random.nextInt(totalWeight);
+            while (i1 < 5) {
+                ++i1;
+                int j1 = random.nextInt(StrongholdPieces.totalWeight);
+                Iterator iterator = StrongholdPieces.currentPieces.iterator();
 
-                for (StrongholdPieces.PieceWeight pieceWeight : currentPieces) {
-                    randomInt -= pieceWeight.weight;
-                    if (randomInt < 0) {
-                        if (!pieceWeight.doPlace(genDepth) || pieceWeight == piece.previousPiece) {
+                while (iterator.hasNext()) {
+                    StrongholdPieces.PieceWeight strongholdpieces_f = (StrongholdPieces.PieceWeight) iterator.next();
+
+                    j1 -= strongholdpieces_f.weight;
+                    if (j1 < 0) {
+                        if (!strongholdpieces_f.doPlace(genDepth) || strongholdpieces_f == piece.previousPiece) {
                             break;
                         }
 
-                        StrongholdPieces.StrongholdPiece strongholdPiece1 = findAndCreatePieceFactory(
-                            pieceWeight.pieceClass, pieces, random, x, y, z, direction, genDepth
-                        );
-                        if (strongholdPiece1 != null) {
-                            pieceWeight.placeCount++;
-                            piece.previousPiece = pieceWeight;
-                            if (!pieceWeight.isValid()) {
-                                currentPieces.remove(pieceWeight);
+                        StrongholdPieces.StrongholdPiece strongholdpieces_p1 = findAndCreatePieceFactory(strongholdpieces_f.pieceClass, pieces, random, x, y, z, direction, genDepth);
+
+                        if (strongholdpieces_p1 != null) {
+                            ++strongholdpieces_f.placeCount;
+                            piece.previousPiece = strongholdpieces_f;
+                            if (!strongholdpieces_f.isValid()) {
+                                StrongholdPieces.currentPieces.remove(strongholdpieces_f);
                             }
 
-                            return strongholdPiece1;
+                            return strongholdpieces_p1;
                         }
                     }
                 }
             }
 
-            BoundingBox boundingBox = StrongholdPieces.FillerCorridor.findPieceBox(pieces, random, x, y, z, direction);
-            return boundingBox != null && boundingBox.minY() > 1 ? new StrongholdPieces.FillerCorridor(genDepth, boundingBox, direction) : null;
+            BoundingBox structureboundingbox = StrongholdPieces.FillerCorridor.findPieceBox(pieces, random, x, y, z, direction);
+
+            if (structureboundingbox != null && structureboundingbox.minY() > 1) {
+                return new StrongholdPieces.FillerCorridor(genDepth, structureboundingbox, direction);
+            } else {
+                return null;
+            }
         }
     }
 
-    static StructurePiece generateAndAddPiece(
-        StrongholdPieces.StartPiece piece, StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, @Nullable Direction direction, int genDepth
-    ) {
+    static StructurePiece generateAndAddPiece(StrongholdPieces.StartPiece piece, StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, @Nullable Direction direction, int genDepth) {
         if (genDepth > 50) {
             return null;
         } else if (Math.abs(x - piece.getBoundingBox().minX()) <= 112 && Math.abs(z - piece.getBoundingBox().minZ()) <= 112) {
-            StructurePiece structurePiece = generatePieceFromSmallDoor(piece, pieces, random, x, y, z, direction, genDepth + 1);
-            if (structurePiece != null) {
-                pieces.addPiece(structurePiece);
-                piece.pendingChildren.add(structurePiece);
+            StrongholdPieces.StrongholdPiece strongholdpieces_p = generatePieceFromSmallDoor(piece, pieces, random, x, y, z, direction, genDepth + 1);
+
+            if (strongholdpieces_p != null) {
+                pieces.addPiece(strongholdpieces_p);
+                piece.pendingChildren.add(strongholdpieces_p);
             }
 
-            return structurePiece;
+            return strongholdpieces_p;
         } else {
             return null;
         }
     }
 
-    public static class ChestCorridor extends StrongholdPieces.StrongholdPiece {
-        private static final int WIDTH = 5;
-        private static final int HEIGHT = 5;
-        private static final int DEPTH = 7;
-        private boolean hasPlacedChest;
+    private static class PieceWeight {
 
-        public ChestCorridor(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
-            super(StructurePieceType.STRONGHOLD_CHEST_CORRIDOR, genDepth, box);
-            this.setOrientation(orientation);
-            this.entryDoor = this.randomSmallDoor(random);
-        }
+        public final Class<? extends StrongholdPieces.StrongholdPiece> pieceClass;
+        public final int weight;
+        public int placeCount;
+        public final int maxPlaceCount;
 
-        public ChestCorridor(CompoundTag tag) {
-            super(StructurePieceType.STRONGHOLD_CHEST_CORRIDOR, tag);
-            this.hasPlacedChest = tag.getBoolean("Chest");
+        public PieceWeight(Class<? extends StrongholdPieces.StrongholdPiece> pieceClass, int weight, int maxPlaceCount) {
+            this.pieceClass = pieceClass;
+            this.weight = weight;
+            this.maxPlaceCount = maxPlaceCount;
         }
 
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
-            super.addAdditionalSaveData(context, tag);
-            tag.putBoolean("Chest", this.hasPlacedChest);
+        public boolean doPlace(int genDepth) {
+            return this.maxPlaceCount == 0 || this.placeCount < this.maxPlaceCount;
         }
 
-        @Override
-        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece)piece, pieces, random, 1, 1);
+        public boolean isValid() {
+            return this.maxPlaceCount == 0 || this.placeCount < this.maxPlaceCount;
         }
-
-        public static StrongholdPieces.ChestCorridor createPiece(
-            StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth
-        ) {
-            BoundingBox boundingBox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 7, orientation);
-            return isOkBox(boundingBox) && pieces.findCollisionPiece(boundingBox) == null
-                ? new StrongholdPieces.ChestCorridor(genDepth, random, boundingBox, orientation)
-                : null;
-        }
-
-        @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
-            this.generateBox(level, box, 0, 0, 0, 4, 4, 6, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 1, 0);
-            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING, 1, 1, 6);
-            this.generateBox(level, box, 3, 1, 2, 3, 1, 4, Blocks.STONE_BRICKS.defaultBlockState(), Blocks.STONE_BRICKS.defaultBlockState(), false);
-            this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 1, 1, box);
-            this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 1, 5, box);
-            this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 2, 2, box);
-            this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 2, 4, box);
-
-            for (int i = 2; i <= 4; i++) {
-                this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 2, 1, i, box);
-            }
-
-            if (!this.hasPlacedChest && box.isInside(this.getWorldPos(3, 2, 3))) {
-                this.hasPlacedChest = true;
-                this.createChest(level, box, random, 3, 2, 3, BuiltInLootTables.STRONGHOLD_CORRIDOR);
-            }
-        }
     }
 
-    public static class FillerCorridor extends StrongholdPieces.StrongholdPiece {
-        private final int steps;
+    public static class Straight extends StrongholdPieces.StrongholdPiece {
 
-        public FillerCorridor(int genDepth, BoundingBox box, Direction orientation) {
-            super(StructurePieceType.STRONGHOLD_FILLER_CORRIDOR, genDepth, box);
-            this.setOrientation(orientation);
-            this.steps = orientation != Direction.NORTH && orientation != Direction.SOUTH ? box.getXSpan() : box.getZSpan();
-        }
+        private static final int WIDTH = 5;
+        private static final int HEIGHT = 5;
+        private static final int DEPTH = 7;
+        private final boolean leftChild;
+        private final boolean rightChild;
 
-        public FillerCorridor(CompoundTag tag) {
-            super(StructurePieceType.STRONGHOLD_FILLER_CORRIDOR, tag);
-            this.steps = tag.getInt("Steps");
-        }
-
-        @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
-            super.addAdditionalSaveData(context, tag);
-            tag.putInt("Steps", this.steps);
-        }
-
-        public static BoundingBox findPieceBox(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation) {
-            int i = 3;
-            BoundingBox boundingBox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 4, orientation);
-            StructurePiece structurePiece = pieces.findCollisionPiece(boundingBox);
-            if (structurePiece == null) {
-                return null;
-            } else {
-                if (structurePiece.getBoundingBox().minY() == boundingBox.minY()) {
-                    for (int i1 = 2; i1 >= 1; i1--) {
-                        boundingBox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, i1, orientation);
-                        if (!structurePiece.getBoundingBox().intersects(boundingBox)) {
-                            return BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, i1 + 1, orientation);
-                        }
-                    }
-                }
-
-                return null;
-            }
-        }
-
-        @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
-            for (int i = 0; i < this.steps; i++) {
-                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 0, 0, i, box);
-                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 0, i, box);
-                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 0, i, box);
-                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 0, i, box);
-                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 4, 0, i, box);
-
-                for (int i1 = 1; i1 <= 3; i1++) {
-                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 0, i1, i, box);
-                    this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), 1, i1, i, box);
-                    this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), 2, i1, i, box);
-                    this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), 3, i1, i, box);
-                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 4, i1, i, box);
-                }
-
-                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 0, 4, i, box);
-                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 4, i, box);
-                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 4, i, box);
-                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 4, i, box);
-                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 4, 4, i, box);
-            }
-        }
-    }
-
-    public static class FiveCrossing extends StrongholdPieces.StrongholdPiece {
-        protected static final int WIDTH = 10;
-        protected static final int HEIGHT = 9;
-        protected static final int DEPTH = 11;
-        private final boolean leftLow;
-        private final boolean leftHigh;
-        private final boolean rightLow;
-        private final boolean rightHigh;
-
-        public FiveCrossing(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
-            super(StructurePieceType.STRONGHOLD_FIVE_CROSSING, genDepth, box);
+        public Straight(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_STRAIGHT, genDepth, box);
             this.setOrientation(orientation);
             this.entryDoor = this.randomSmallDoor(random);
-            this.leftLow = random.nextBoolean();
-            this.leftHigh = random.nextBoolean();
-            this.rightLow = random.nextBoolean();
-            this.rightHigh = random.nextInt(3) > 0;
+            this.leftChild = random.nextInt(2) == 0;
+            this.rightChild = random.nextInt(2) == 0;
         }
 
-        public FiveCrossing(CompoundTag tag) {
-            super(StructurePieceType.STRONGHOLD_FIVE_CROSSING, tag);
-            this.leftLow = tag.getBoolean("leftLow");
-            this.leftHigh = tag.getBoolean("leftHigh");
-            this.rightLow = tag.getBoolean("rightLow");
-            this.rightHigh = tag.getBoolean("rightHigh");
+        public Straight(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_STRAIGHT, tag);
+            this.leftChild = tag.getBoolean("Left");
+            this.rightChild = tag.getBoolean("Right");
         }
 
         @Override
         protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
             super.addAdditionalSaveData(context, tag);
-            tag.putBoolean("leftLow", this.leftLow);
-            tag.putBoolean("leftHigh", this.leftHigh);
-            tag.putBoolean("rightLow", this.rightLow);
-            tag.putBoolean("rightHigh", this.rightHigh);
+            tag.putBoolean("Left", this.leftChild);
+            tag.putBoolean("Right", this.rightChild);
         }
 
         @Override
         public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
-            int i = 3;
-            int i1 = 5;
-            Direction orientation = this.getOrientation();
-            if (orientation == Direction.WEST || orientation == Direction.NORTH) {
-                i = 8 - i;
-                i1 = 8 - i1;
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
+            if (this.leftChild) {
+                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) piece, pieces, random, 1, 2);
             }
 
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece)piece, pieces, random, 5, 1);
-            if (this.leftLow) {
-                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece)piece, pieces, random, i, 1);
+            if (this.rightChild) {
+                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) piece, pieces, random, 1, 2);
             }
 
-            if (this.leftHigh) {
-                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece)piece, pieces, random, i1, 7);
-            }
+        }
 
-            if (this.rightLow) {
-                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece)piece, pieces, random, i, 1);
-            }
+        public static StrongholdPieces.Straight createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction direction, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 7, direction);
 
-            if (this.rightHigh) {
-                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece)piece, pieces, random, i1, 7);
-            }
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.Straight(genDepth, random, structureboundingbox, direction) : null;
         }
 
-        public static StrongholdPieces.FiveCrossing createPiece(
-            StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth
-        ) {
-            BoundingBox boundingBox = BoundingBox.orientBox(x, y, z, -4, -3, 0, 10, 9, 11, orientation);
-            return isOkBox(boundingBox) && pieces.findCollisionPiece(boundingBox) == null
-                ? new StrongholdPieces.FiveCrossing(genDepth, random, boundingBox, orientation)
-                : null;
-        }
-
         @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
-            this.generateBox(level, box, 0, 0, 0, 9, 8, 10, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(level, random, box, this.entryDoor, 4, 3, 0);
-            if (this.leftLow) {
-                this.generateBox(level, box, 0, 3, 1, 0, 5, 3, CAVE_AIR, CAVE_AIR, false);
-            }
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 4, 6, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 1, 0);
+            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.a.OPENING, 1, 1, 6);
+            IBlockData iblockdata = (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.EAST);
+            IBlockData iblockdata1 = (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.WEST);
 
-            if (this.rightLow) {
-                this.generateBox(level, box, 9, 3, 1, 9, 5, 3, CAVE_AIR, CAVE_AIR, false);
+            this.maybeGenerateBlock(level, box, random, 0.1F, 1, 2, 1, iblockdata);
+            this.maybeGenerateBlock(level, box, random, 0.1F, 3, 2, 1, iblockdata1);
+            this.maybeGenerateBlock(level, box, random, 0.1F, 1, 2, 5, iblockdata);
+            this.maybeGenerateBlock(level, box, random, 0.1F, 3, 2, 5, iblockdata1);
+            if (this.leftChild) {
+                this.generateBox(level, box, 0, 1, 2, 0, 3, 4, StrongholdPieces.Straight.CAVE_AIR, StrongholdPieces.Straight.CAVE_AIR, false);
             }
 
-            if (this.leftHigh) {
-                this.generateBox(level, box, 0, 5, 7, 0, 7, 9, CAVE_AIR, CAVE_AIR, false);
+            if (this.rightChild) {
+                this.generateBox(level, box, 4, 1, 2, 4, 3, 4, StrongholdPieces.Straight.CAVE_AIR, StrongholdPieces.Straight.CAVE_AIR, false);
             }
 
-            if (this.rightHigh) {
-                this.generateBox(level, box, 9, 5, 7, 9, 7, 9, CAVE_AIR, CAVE_AIR, false);
-            }
-
-            this.generateBox(level, box, 5, 1, 10, 7, 3, 10, CAVE_AIR, CAVE_AIR, false);
-            this.generateBox(level, box, 1, 2, 1, 8, 2, 6, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 4, 1, 5, 4, 4, 9, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 8, 1, 5, 8, 4, 9, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 1, 4, 7, 3, 4, 9, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 1, 3, 5, 3, 3, 6, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 1, 3, 4, 3, 3, 4, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(level, box, 1, 4, 6, 3, 4, 6, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(level, box, 5, 1, 7, 7, 1, 8, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 5, 1, 9, 7, 1, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(level, box, 5, 2, 7, 7, 2, 7, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(level, box, 4, 5, 7, 4, 5, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(level, box, 8, 5, 7, 8, 5, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
-            this.generateBox(
-                level,
-                box,
-                5,
-                5,
-                7,
-                7,
-                5,
-                9,
-                Blocks.SMOOTH_STONE_SLAB.defaultBlockState().setValue(SlabBlock.TYPE, SlabType.DOUBLE),
-                Blocks.SMOOTH_STONE_SLAB.defaultBlockState().setValue(SlabBlock.TYPE, SlabType.DOUBLE),
-                false
-            );
-            this.placeBlock(level, Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.SOUTH), 6, 5, 6, box);
         }
     }
 
-    public static class LeftTurn extends StrongholdPieces.Turn {
-        public LeftTurn(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
-            super(StructurePieceType.STRONGHOLD_LEFT_TURN, genDepth, box);
-            this.setOrientation(orientation);
-            this.entryDoor = this.randomSmallDoor(random);
-        }
+    public static class PrisonHall extends StrongholdPieces.StrongholdPiece {
 
-        public LeftTurn(CompoundTag tag) {
-            super(StructurePieceType.STRONGHOLD_LEFT_TURN, tag);
-        }
+        protected static final int WIDTH = 9;
+        protected static final int HEIGHT = 5;
+        protected static final int DEPTH = 11;
 
-        @Override
-        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
-            Direction orientation = this.getOrientation();
-            if (orientation != Direction.NORTH && orientation != Direction.EAST) {
-                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece)piece, pieces, random, 1, 1);
-            } else {
-                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece)piece, pieces, random, 1, 1);
-            }
-        }
-
-        public static StrongholdPieces.LeftTurn createPiece(
-            StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth
-        ) {
-            BoundingBox boundingBox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 5, orientation);
-            return isOkBox(boundingBox) && pieces.findCollisionPiece(boundingBox) == null
-                ? new StrongholdPieces.LeftTurn(genDepth, random, boundingBox, orientation)
-                : null;
-        }
-
-        @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
-            this.generateBox(level, box, 0, 0, 0, 4, 4, 4, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 1, 0);
-            Direction orientation = this.getOrientation();
-            if (orientation != Direction.NORTH && orientation != Direction.EAST) {
-                this.generateBox(level, box, 4, 1, 1, 4, 3, 3, CAVE_AIR, CAVE_AIR, false);
-            } else {
-                this.generateBox(level, box, 0, 1, 1, 0, 3, 3, CAVE_AIR, CAVE_AIR, false);
-            }
-        }
-    }
-
-    public static class Library extends StrongholdPieces.StrongholdPiece {
-        protected static final int WIDTH = 14;
-        protected static final int HEIGHT = 6;
-        protected static final int TALL_HEIGHT = 11;
-        protected static final int DEPTH = 15;
-        private final boolean isTall;
-
-        public Library(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
-            super(StructurePieceType.STRONGHOLD_LIBRARY, genDepth, box);
+        public PrisonHall(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_PRISON_HALL, genDepth, box);
             this.setOrientation(orientation);
             this.entryDoor = this.randomSmallDoor(random);
-            this.isTall = box.getYSpan() > 6;
         }
 
-        public Library(CompoundTag tag) {
-            super(StructurePieceType.STRONGHOLD_LIBRARY, tag);
-            this.isTall = tag.getBoolean("Tall");
+        public PrisonHall(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_PRISON_HALL, tag);
         }
 
         @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
-            super.addAdditionalSaveData(context, tag);
-            tag.putBoolean("Tall", this.isTall);
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
         }
 
-        public static StrongholdPieces.Library createPiece(
-            StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth
-        ) {
-            BoundingBox boundingBox = BoundingBox.orientBox(x, y, z, -4, -1, 0, 14, 11, 15, orientation);
-            if (!isOkBox(boundingBox) || pieces.findCollisionPiece(boundingBox) != null) {
-                boundingBox = BoundingBox.orientBox(x, y, z, -4, -1, 0, 14, 6, 15, orientation);
-                if (!isOkBox(boundingBox) || pieces.findCollisionPiece(boundingBox) != null) {
-                    return null;
-                }
-            }
+        public static StrongholdPieces.PrisonHall createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 9, 5, 11, orientation);
 
-            return new StrongholdPieces.Library(genDepth, random, boundingBox, orientation);
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.PrisonHall(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
-            int i = 11;
-            if (!this.isTall) {
-                i = 6;
-            }
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 8, 4, 10, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 1, 0);
+            this.generateBox(level, box, 1, 1, 10, 3, 3, 10, StrongholdPieces.PrisonHall.CAVE_AIR, StrongholdPieces.PrisonHall.CAVE_AIR, false);
+            this.generateBox(level, box, 4, 1, 1, 4, 3, 1, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 1, 3, 4, 3, 3, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 1, 7, 4, 3, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 1, 9, 4, 3, 9, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
 
-            this.generateBox(level, box, 0, 0, 0, 13, i - 1, 14, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(level, random, box, this.entryDoor, 4, 1, 0);
-            this.generateMaybeBox(
-                level, box, random, 0.07F, 2, 1, 1, 11, 4, 13, Blocks.COBWEB.defaultBlockState(), Blocks.COBWEB.defaultBlockState(), false, false
-            );
-            int i1 = 1;
-            int i2 = 12;
-
-            for (int i3 = 1; i3 <= 13; i3++) {
-                if ((i3 - 1) % 4 == 0) {
-                    this.generateBox(level, box, 1, 1, i3, 1, 4, i3, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                    this.generateBox(level, box, 12, 1, i3, 12, 4, i3, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                    this.placeBlock(level, Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.EAST), 2, 3, i3, box);
-                    this.placeBlock(level, Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.WEST), 11, 3, i3, box);
-                    if (this.isTall) {
-                        this.generateBox(level, box, 1, 6, i3, 1, 9, i3, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                        this.generateBox(level, box, 12, 6, i3, 12, 9, i3, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                    }
-                } else {
-                    this.generateBox(level, box, 1, 1, i3, 1, 4, i3, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
-                    this.generateBox(level, box, 12, 1, i3, 12, 4, i3, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
-                    if (this.isTall) {
-                        this.generateBox(level, box, 1, 6, i3, 1, 9, i3, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
-                        this.generateBox(level, box, 12, 6, i3, 12, 9, i3, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
-                    }
-                }
+            for (int i = 1; i <= 3; ++i) {
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, i, 4, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true)).setValue(IronBarsBlock.EAST, true), 4, i, 5, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, i, 6, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 5, i, 5, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 6, i, 5, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true), 7, i, 5, box);
             }
 
-            for (int i3x = 3; i3x < 12; i3x += 2) {
-                this.generateBox(level, box, 3, 1, i3x, 4, 3, i3x, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
-                this.generateBox(level, box, 6, 1, i3x, 7, 3, i3x, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
-                this.generateBox(level, box, 9, 1, i3x, 10, 3, i3x, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
-            }
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, 3, 2, box);
+            this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true), 4, 3, 8, box);
+            IBlockData iblockdata = (IBlockData) Blocks.IRON_DOOR.defaultBlockState().setValue(DoorBlock.FACING, Direction.WEST);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.IRON_DOOR.defaultBlockState().setValue(DoorBlock.FACING, Direction.WEST)).setValue(DoorBlock.HALF, BlockPropertyDoubleBlockHalf.UPPER);
 
-            if (this.isTall) {
-                this.generateBox(level, box, 1, 5, 1, 3, 5, 13, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                this.generateBox(level, box, 10, 5, 1, 12, 5, 13, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                this.generateBox(level, box, 4, 5, 1, 9, 5, 2, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                this.generateBox(level, box, 4, 5, 12, 9, 5, 13, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
-                this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 9, 5, 11, box);
-                this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 8, 5, 11, box);
-                this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 9, 5, 10, box);
-                BlockState blockState = Blocks.OAK_FENCE
-                    .defaultBlockState()
-                    .setValue(FenceBlock.WEST, Boolean.valueOf(true))
-                    .setValue(FenceBlock.EAST, Boolean.valueOf(true));
-                BlockState blockState1 = Blocks.OAK_FENCE
-                    .defaultBlockState()
-                    .setValue(FenceBlock.NORTH, Boolean.valueOf(true))
-                    .setValue(FenceBlock.SOUTH, Boolean.valueOf(true));
-                this.generateBox(level, box, 3, 6, 3, 3, 6, 11, blockState1, blockState1, false);
-                this.generateBox(level, box, 10, 6, 3, 10, 6, 9, blockState1, blockState1, false);
-                this.generateBox(level, box, 4, 6, 2, 9, 6, 2, blockState, blockState, false);
-                this.generateBox(level, box, 4, 6, 12, 7, 6, 12, blockState, blockState, false);
-                this.placeBlock(
-                    level,
-                    Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, Boolean.valueOf(true)).setValue(FenceBlock.EAST, Boolean.valueOf(true)),
-                    3,
-                    6,
-                    2,
-                    box
-                );
-                this.placeBlock(
-                    level,
-                    Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, Boolean.valueOf(true)).setValue(FenceBlock.EAST, Boolean.valueOf(true)),
-                    3,
-                    6,
-                    12,
-                    box
-                );
-                this.placeBlock(
-                    level,
-                    Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, Boolean.valueOf(true)).setValue(FenceBlock.WEST, Boolean.valueOf(true)),
-                    10,
-                    6,
-                    2,
-                    box
-                );
-
-                for (int i4 = 0; i4 <= 2; i4++) {
-                    this.placeBlock(
-                        level,
-                        Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, Boolean.valueOf(true)).setValue(FenceBlock.WEST, Boolean.valueOf(true)),
-                        8 + i4,
-                        6,
-                        12 - i4,
-                        box
-                    );
-                    if (i4 != 2) {
-                        this.placeBlock(
-                            level,
-                            Blocks.OAK_FENCE
-                                .defaultBlockState()
-                                .setValue(FenceBlock.NORTH, Boolean.valueOf(true))
-                                .setValue(FenceBlock.EAST, Boolean.valueOf(true)),
-                            8 + i4,
-                            6,
-                            11 - i4,
-                            box
-                        );
-                    }
-                }
-
-                BlockState blockState2 = Blocks.LADDER.defaultBlockState().setValue(LadderBlock.FACING, Direction.SOUTH);
-                this.placeBlock(level, blockState2, 10, 1, 13, box);
-                this.placeBlock(level, blockState2, 10, 2, 13, box);
-                this.placeBlock(level, blockState2, 10, 3, 13, box);
-                this.placeBlock(level, blockState2, 10, 4, 13, box);
-                this.placeBlock(level, blockState2, 10, 5, 13, box);
-                this.placeBlock(level, blockState2, 10, 6, 13, box);
-                this.placeBlock(level, blockState2, 10, 7, 13, box);
-                int i5 = 7;
-                int i6 = 7;
-                BlockState blockState3 = Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, Boolean.valueOf(true));
-                this.placeBlock(level, blockState3, 6, 9, 7, box);
-                BlockState blockState4 = Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, Boolean.valueOf(true));
-                this.placeBlock(level, blockState4, 7, 9, 7, box);
-                this.placeBlock(level, blockState3, 6, 8, 7, box);
-                this.placeBlock(level, blockState4, 7, 8, 7, box);
-                BlockState blockState5 = blockState1.setValue(FenceBlock.WEST, Boolean.valueOf(true)).setValue(FenceBlock.EAST, Boolean.valueOf(true));
-                this.placeBlock(level, blockState5, 6, 7, 7, box);
-                this.placeBlock(level, blockState5, 7, 7, 7, box);
-                this.placeBlock(level, blockState3, 5, 7, 7, box);
-                this.placeBlock(level, blockState4, 8, 7, 7, box);
-                this.placeBlock(level, blockState3.setValue(FenceBlock.NORTH, Boolean.valueOf(true)), 6, 7, 6, box);
-                this.placeBlock(level, blockState3.setValue(FenceBlock.SOUTH, Boolean.valueOf(true)), 6, 7, 8, box);
-                this.placeBlock(level, blockState4.setValue(FenceBlock.NORTH, Boolean.valueOf(true)), 7, 7, 6, box);
-                this.placeBlock(level, blockState4.setValue(FenceBlock.SOUTH, Boolean.valueOf(true)), 7, 7, 8, box);
-                BlockState blockState6 = Blocks.TORCH.defaultBlockState();
-                this.placeBlock(level, blockState6, 5, 8, 7, box);
-                this.placeBlock(level, blockState6, 8, 8, 7, box);
-                this.placeBlock(level, blockState6, 6, 8, 6, box);
-                this.placeBlock(level, blockState6, 6, 8, 8, box);
-                this.placeBlock(level, blockState6, 7, 8, 6, box);
-                this.placeBlock(level, blockState6, 7, 8, 8, box);
-            }
-
-            this.createChest(level, box, random, 3, 3, 5, BuiltInLootTables.STRONGHOLD_LIBRARY);
-            if (this.isTall) {
-                this.placeBlock(level, CAVE_AIR, 12, 9, 1, box);
-                this.createChest(level, box, random, 12, 8, 1, BuiltInLootTables.STRONGHOLD_LIBRARY);
-            }
+            this.placeBlock(level, iblockdata, 4, 1, 2, box);
+            this.placeBlock(level, iblockdata1, 4, 2, 2, box);
+            this.placeBlock(level, iblockdata, 4, 1, 8, box);
+            this.placeBlock(level, iblockdata1, 4, 2, 8, box);
         }
     }
 
-    static class PieceWeight {
-        public final Class<? extends StrongholdPieces.StrongholdPiece> pieceClass;
-        public final int weight;
-        public int placeCount;
-        public final int maxPlaceCount;
+    public static class LeftTurn extends StrongholdPieces.q {
 
-        public PieceWeight(Class<? extends StrongholdPieces.StrongholdPiece> pieceClass, int weight, int maxPlaceCount) {
-            this.pieceClass = pieceClass;
-            this.weight = weight;
-            this.maxPlaceCount = maxPlaceCount;
-        }
-
-        public boolean doPlace(int genDepth) {
-            return this.maxPlaceCount == 0 || this.placeCount < this.maxPlaceCount;
-        }
-
-        public boolean isValid() {
-            return this.maxPlaceCount == 0 || this.placeCount < this.maxPlaceCount;
-        }
-    }
-
-    public static class PortalRoom extends StrongholdPieces.StrongholdPiece {
-        protected static final int WIDTH = 11;
-        protected static final int HEIGHT = 8;
-        protected static final int DEPTH = 16;
-        private boolean hasPlacedSpawner;
-
-        public PortalRoom(int genDepth, BoundingBox box, Direction orientation) {
-            super(StructurePieceType.STRONGHOLD_PORTAL_ROOM, genDepth, box);
+        public LeftTurn(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_LEFT_TURN, genDepth, box);
             this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
         }
 
-        public PortalRoom(CompoundTag tag) {
-            super(StructurePieceType.STRONGHOLD_PORTAL_ROOM, tag);
-            this.hasPlacedSpawner = tag.getBoolean("Mob");
+        public LeftTurn(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_LEFT_TURN, tag);
         }
 
         @Override
-        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
-            super.addAdditionalSaveData(context, tag);
-            tag.putBoolean("Mob", this.hasPlacedSpawner);
-        }
-
-        @Override
         public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
-            if (piece != null) {
-                ((StrongholdPieces.StartPiece)piece).portalRoomPiece = this;
-            }
-        }
+            Direction enumdirection = this.getOrientation();
 
-        public static StrongholdPieces.PortalRoom createPiece(StructurePieceAccessor pieces, int x, int y, int z, Direction orientation, int genDepth) {
-            BoundingBox boundingBox = BoundingBox.orientBox(x, y, z, -4, -1, 0, 11, 8, 16, orientation);
-            return isOkBox(boundingBox) && pieces.findCollisionPiece(boundingBox) == null
-                ? new StrongholdPieces.PortalRoom(genDepth, boundingBox, orientation)
-                : null;
-        }
-
-        @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
-            this.generateBox(level, box, 0, 0, 0, 10, 7, 15, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.SmallDoorType.GRATES, 4, 1, 0);
-            int i = 6;
-            this.generateBox(level, box, 1, 6, 1, 1, 6, 14, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 9, 6, 1, 9, 6, 14, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 2, 6, 1, 8, 6, 2, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 2, 6, 14, 8, 6, 14, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 1, 1, 1, 2, 1, 4, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 8, 1, 1, 9, 1, 4, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 1, 1, 1, 1, 1, 3, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
-            this.generateBox(level, box, 9, 1, 1, 9, 1, 3, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
-            this.generateBox(level, box, 3, 1, 8, 7, 1, 12, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 4, 1, 9, 6, 1, 11, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
-            BlockState blockState = Blocks.IRON_BARS
-                .defaultBlockState()
-                .setValue(IronBarsBlock.NORTH, Boolean.valueOf(true))
-                .setValue(IronBarsBlock.SOUTH, Boolean.valueOf(true));
-            BlockState blockState1 = Blocks.IRON_BARS
-                .defaultBlockState()
-                .setValue(IronBarsBlock.WEST, Boolean.valueOf(true))
-                .setValue(IronBarsBlock.EAST, Boolean.valueOf(true));
-
-            for (int i1 = 3; i1 < 14; i1 += 2) {
-                this.generateBox(level, box, 0, 3, i1, 0, 4, i1, blockState, blockState, false);
-                this.generateBox(level, box, 10, 3, i1, 10, 4, i1, blockState, blockState, false);
+            if (enumdirection != Direction.NORTH && enumdirection != Direction.EAST) {
+                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
+            } else {
+                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
             }
 
-            for (int i1 = 2; i1 < 9; i1 += 2) {
-                this.generateBox(level, box, i1, 3, 15, i1, 4, 15, blockState1, blockState1, false);
-            }
-
-            BlockState blockState2 = Blocks.STONE_BRICK_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.NORTH);
-            this.generateBox(level, box, 4, 1, 5, 6, 1, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 4, 2, 6, 6, 2, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 4, 3, 7, 6, 3, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-
-            for (int i2 = 4; i2 <= 6; i2++) {
-                this.placeBlock(level, blockState2, i2, 1, 4, box);
-                this.placeBlock(level, blockState2, i2, 2, 5, box);
-                this.placeBlock(level, blockState2, i2, 3, 6, box);
-            }
-
-            BlockState blockState3 = Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.NORTH);
-            BlockState blockState4 = Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.SOUTH);
-            BlockState blockState5 = Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.EAST);
-            BlockState blockState6 = Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.WEST);
-            boolean flag = true;
-            boolean[] flags = new boolean[12];
-
-            for (int i3 = 0; i3 < flags.length; i3++) {
-                flags[i3] = random.nextFloat() > 0.9F;
-                flag &= flags[i3];
-            }
-
-            this.placeBlock(level, blockState3.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.valueOf(flags[0])), 4, 3, 8, box);
-            this.placeBlock(level, blockState3.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.valueOf(flags[1])), 5, 3, 8, box);
-            this.placeBlock(level, blockState3.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.valueOf(flags[2])), 6, 3, 8, box);
-            this.placeBlock(level, blockState4.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.valueOf(flags[3])), 4, 3, 12, box);
-            this.placeBlock(level, blockState4.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.valueOf(flags[4])), 5, 3, 12, box);
-            this.placeBlock(level, blockState4.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.valueOf(flags[5])), 6, 3, 12, box);
-            this.placeBlock(level, blockState5.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.valueOf(flags[6])), 3, 3, 9, box);
-            this.placeBlock(level, blockState5.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.valueOf(flags[7])), 3, 3, 10, box);
-            this.placeBlock(level, blockState5.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.valueOf(flags[8])), 3, 3, 11, box);
-            this.placeBlock(level, blockState6.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.valueOf(flags[9])), 7, 3, 9, box);
-            this.placeBlock(level, blockState6.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.valueOf(flags[10])), 7, 3, 10, box);
-            this.placeBlock(level, blockState6.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.valueOf(flags[11])), 7, 3, 11, box);
-            if (flag) {
-                BlockState blockState7 = Blocks.END_PORTAL.defaultBlockState();
-                this.placeBlock(level, blockState7, 4, 3, 9, box);
-                this.placeBlock(level, blockState7, 5, 3, 9, box);
-                this.placeBlock(level, blockState7, 6, 3, 9, box);
-                this.placeBlock(level, blockState7, 4, 3, 10, box);
-                this.placeBlock(level, blockState7, 5, 3, 10, box);
-                this.placeBlock(level, blockState7, 6, 3, 10, box);
-                this.placeBlock(level, blockState7, 4, 3, 11, box);
-                this.placeBlock(level, blockState7, 5, 3, 11, box);
-                this.placeBlock(level, blockState7, 6, 3, 11, box);
-            }
-
-            if (!this.hasPlacedSpawner) {
-                BlockPos worldPos = this.getWorldPos(5, 3, 6);
-                if (box.isInside(worldPos)) {
-                    this.hasPlacedSpawner = true;
-                    level.setBlock(worldPos, Blocks.SPAWNER.defaultBlockState(), 2);
-                    if (level.getBlockEntity(worldPos) instanceof SpawnerBlockEntity spawnerBlockEntity) {
-                        spawnerBlockEntity.setEntityId(EntityType.SILVERFISH, random);
-                    }
-                }
-            }
         }
-    }
 
-    public static class PrisonHall extends StrongholdPieces.StrongholdPiece {
-        protected static final int WIDTH = 9;
-        protected static final int HEIGHT = 5;
-        protected static final int DEPTH = 11;
+        public static StrongholdPieces.LeftTurn createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 5, orientation);
 
-        public PrisonHall(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
-            super(StructurePieceType.STRONGHOLD_PRISON_HALL, genDepth, box);
-            this.setOrientation(orientation);
-            this.entryDoor = this.randomSmallDoor(random);
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.LeftTurn(genDepth, random, structureboundingbox, orientation) : null;
         }
 
-        public PrisonHall(CompoundTag tag) {
-            super(StructurePieceType.STRONGHOLD_PRISON_HALL, tag);
-        }
-
         @Override
-        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece)piece, pieces, random, 1, 1);
-        }
-
-        public static StrongholdPieces.PrisonHall createPiece(
-            StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth
-        ) {
-            BoundingBox boundingBox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 9, 5, 11, orientation);
-            return isOkBox(boundingBox) && pieces.findCollisionPiece(boundingBox) == null
-                ? new StrongholdPieces.PrisonHall(genDepth, random, boundingBox, orientation)
-                : null;
-        }
-
-        @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
-            this.generateBox(level, box, 0, 0, 0, 8, 4, 10, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 4, 4, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateSmallDoor(level, random, box, this.entryDoor, 1, 1, 0);
-            this.generateBox(level, box, 1, 1, 10, 3, 3, 10, CAVE_AIR, CAVE_AIR, false);
-            this.generateBox(level, box, 4, 1, 1, 4, 3, 1, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 4, 1, 3, 4, 3, 3, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 4, 1, 7, 4, 3, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateBox(level, box, 4, 1, 9, 4, 3, 9, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            Direction enumdirection = this.getOrientation();
 
-            for (int i = 1; i <= 3; i++) {
-                this.placeBlock(
-                    level,
-                    Blocks.IRON_BARS
-                        .defaultBlockState()
-                        .setValue(IronBarsBlock.NORTH, Boolean.valueOf(true))
-                        .setValue(IronBarsBlock.SOUTH, Boolean.valueOf(true)),
-                    4,
-                    i,
-                    4,
-                    box
-                );
-                this.placeBlock(
-                    level,
-                    Blocks.IRON_BARS
-                        .defaultBlockState()
-                        .setValue(IronBarsBlock.NORTH, Boolean.valueOf(true))
-                        .setValue(IronBarsBlock.SOUTH, Boolean.valueOf(true))
-                        .setValue(IronBarsBlock.EAST, Boolean.valueOf(true)),
-                    4,
-                    i,
-                    5,
-                    box
-                );
-                this.placeBlock(
-                    level,
-                    Blocks.IRON_BARS
-                        .defaultBlockState()
-                        .setValue(IronBarsBlock.NORTH, Boolean.valueOf(true))
-                        .setValue(IronBarsBlock.SOUTH, Boolean.valueOf(true)),
-                    4,
-                    i,
-                    6,
-                    box
-                );
-                this.placeBlock(
-                    level,
-                    Blocks.IRON_BARS
-                        .defaultBlockState()
-                        .setValue(IronBarsBlock.WEST, Boolean.valueOf(true))
-                        .setValue(IronBarsBlock.EAST, Boolean.valueOf(true)),
-                    5,
-                    i,
-                    5,
-                    box
-                );
-                this.placeBlock(
-                    level,
-                    Blocks.IRON_BARS
-                        .defaultBlockState()
-                        .setValue(IronBarsBlock.WEST, Boolean.valueOf(true))
-                        .setValue(IronBarsBlock.EAST, Boolean.valueOf(true)),
-                    6,
-                    i,
-                    5,
-                    box
-                );
-                this.placeBlock(
-                    level,
-                    Blocks.IRON_BARS
-                        .defaultBlockState()
-                        .setValue(IronBarsBlock.WEST, Boolean.valueOf(true))
-                        .setValue(IronBarsBlock.EAST, Boolean.valueOf(true)),
-                    7,
-                    i,
-                    5,
-                    box
-                );
+            if (enumdirection != Direction.NORTH && enumdirection != Direction.EAST) {
+                this.generateBox(level, box, 4, 1, 1, 4, 3, 3, StrongholdPieces.LeftTurn.CAVE_AIR, StrongholdPieces.LeftTurn.CAVE_AIR, false);
+            } else {
+                this.generateBox(level, box, 0, 1, 1, 0, 3, 3, StrongholdPieces.LeftTurn.CAVE_AIR, StrongholdPieces.LeftTurn.CAVE_AIR, false);
             }
 
-            this.placeBlock(
-                level,
-                Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, Boolean.valueOf(true)).setValue(IronBarsBlock.SOUTH, Boolean.valueOf(true)),
-                4,
-                3,
-                2,
-                box
-            );
-            this.placeBlock(
-                level,
-                Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, Boolean.valueOf(true)).setValue(IronBarsBlock.SOUTH, Boolean.valueOf(true)),
-                4,
-                3,
-                8,
-                box
-            );
-            BlockState blockState = Blocks.IRON_DOOR.defaultBlockState().setValue(DoorBlock.FACING, Direction.WEST);
-            BlockState blockState1 = Blocks.IRON_DOOR
-                .defaultBlockState()
-                .setValue(DoorBlock.FACING, Direction.WEST)
-                .setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER);
-            this.placeBlock(level, blockState, 4, 1, 2, box);
-            this.placeBlock(level, blockState1, 4, 2, 2, box);
-            this.placeBlock(level, blockState, 4, 1, 8, box);
-            this.placeBlock(level, blockState1, 4, 2, 8, box);
         }
     }
 
-    public static class RightTurn extends StrongholdPieces.Turn {
+    public static class RightTurn extends StrongholdPieces.q {
+
         public RightTurn(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
             super(StructurePieceType.STRONGHOLD_RIGHT_TURN, genDepth, box);
             this.setOrientation(orientation);
@@ -1037,45 +401,39 @@
 
         @Override
         public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
-            Direction orientation = this.getOrientation();
-            if (orientation != Direction.NORTH && orientation != Direction.EAST) {
-                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece)piece, pieces, random, 1, 1);
+            Direction enumdirection = this.getOrientation();
+
+            if (enumdirection != Direction.NORTH && enumdirection != Direction.EAST) {
+                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
             } else {
-                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece)piece, pieces, random, 1, 1);
+                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
             }
+
         }
 
-        public static StrongholdPieces.RightTurn createPiece(
-            StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth
-        ) {
-            BoundingBox boundingBox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 5, orientation);
-            return isOkBox(boundingBox) && pieces.findCollisionPiece(boundingBox) == null
-                ? new StrongholdPieces.RightTurn(genDepth, random, boundingBox, orientation)
-                : null;
+        public static StrongholdPieces.RightTurn createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 5, orientation);
+
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.RightTurn(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
             this.generateBox(level, box, 0, 0, 0, 4, 4, 4, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateSmallDoor(level, random, box, this.entryDoor, 1, 1, 0);
-            Direction orientation = this.getOrientation();
-            if (orientation != Direction.NORTH && orientation != Direction.EAST) {
-                this.generateBox(level, box, 0, 1, 1, 0, 3, 3, CAVE_AIR, CAVE_AIR, false);
+            Direction enumdirection = this.getOrientation();
+
+            if (enumdirection != Direction.NORTH && enumdirection != Direction.EAST) {
+                this.generateBox(level, box, 0, 1, 1, 0, 3, 3, StrongholdPieces.RightTurn.CAVE_AIR, StrongholdPieces.RightTurn.CAVE_AIR, false);
             } else {
-                this.generateBox(level, box, 4, 1, 1, 4, 3, 3, CAVE_AIR, CAVE_AIR, false);
+                this.generateBox(level, box, 4, 1, 1, 4, 3, 3, StrongholdPieces.RightTurn.CAVE_AIR, StrongholdPieces.RightTurn.CAVE_AIR, false);
             }
+
         }
     }
 
     public static class RoomCrossing extends StrongholdPieces.StrongholdPiece {
+
         protected static final int WIDTH = 11;
         protected static final int HEIGHT = 7;
         protected static final int DEPTH = 11;
@@ -1101,44 +459,35 @@
 
         @Override
         public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece)piece, pieces, random, 4, 1);
-            this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece)piece, pieces, random, 1, 4);
-            this.generateSmallDoorChildRight((StrongholdPieces.StartPiece)piece, pieces, random, 1, 4);
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 4, 1);
+            this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) piece, pieces, random, 1, 4);
+            this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) piece, pieces, random, 1, 4);
         }
 
-        public static StrongholdPieces.RoomCrossing createPiece(
-            StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth
-        ) {
-            BoundingBox boundingBox = BoundingBox.orientBox(x, y, z, -4, -1, 0, 11, 7, 11, orientation);
-            return isOkBox(boundingBox) && pieces.findCollisionPiece(boundingBox) == null
-                ? new StrongholdPieces.RoomCrossing(genDepth, random, boundingBox, orientation)
-                : null;
+        public static StrongholdPieces.RoomCrossing createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -4, -1, 0, 11, 7, 11, orientation);
+
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.RoomCrossing(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
             this.generateBox(level, box, 0, 0, 0, 10, 6, 10, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateSmallDoor(level, random, box, this.entryDoor, 4, 1, 0);
-            this.generateBox(level, box, 4, 1, 10, 6, 3, 10, CAVE_AIR, CAVE_AIR, false);
-            this.generateBox(level, box, 0, 1, 4, 0, 3, 6, CAVE_AIR, CAVE_AIR, false);
-            this.generateBox(level, box, 10, 1, 4, 10, 3, 6, CAVE_AIR, CAVE_AIR, false);
+            this.generateBox(level, box, 4, 1, 10, 6, 3, 10, StrongholdPieces.RoomCrossing.CAVE_AIR, StrongholdPieces.RoomCrossing.CAVE_AIR, false);
+            this.generateBox(level, box, 0, 1, 4, 0, 3, 6, StrongholdPieces.RoomCrossing.CAVE_AIR, StrongholdPieces.RoomCrossing.CAVE_AIR, false);
+            this.generateBox(level, box, 10, 1, 4, 10, 3, 6, StrongholdPieces.RoomCrossing.CAVE_AIR, StrongholdPieces.RoomCrossing.CAVE_AIR, false);
+            int i;
+
             switch (this.type) {
                 case 0:
                     this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 5, 1, 5, box);
                     this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 5, 2, 5, box);
                     this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 5, 3, 5, box);
-                    this.placeBlock(level, Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.WEST), 4, 3, 5, box);
-                    this.placeBlock(level, Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.EAST), 6, 3, 5, box);
-                    this.placeBlock(level, Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.SOUTH), 5, 3, 4, box);
-                    this.placeBlock(level, Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.NORTH), 5, 3, 6, box);
+                    this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.WEST), 4, 3, 5, box);
+                    this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.EAST), 6, 3, 5, box);
+                    this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.SOUTH), 5, 3, 4, box);
+                    this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.NORTH), 5, 3, 6, box);
                     this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 4, box);
                     this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 5, box);
                     this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 4, 1, 6, box);
@@ -1149,7 +498,7 @@
                     this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 5, 1, 6, box);
                     break;
                 case 1:
-                    for (int i = 0; i < 5; i++) {
+                    for (i = 0; i < 5; ++i) {
                         this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 1, 3 + i, box);
                         this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 7, 1, 3 + i, box);
                         this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3 + i, 1, 3, box);
@@ -1162,12 +511,12 @@
                     this.placeBlock(level, Blocks.WATER.defaultBlockState(), 5, 4, 5, box);
                     break;
                 case 2:
-                    for (int i = 1; i <= 9; i++) {
+                    for (i = 1; i <= 9; ++i) {
                         this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 1, 3, i, box);
                         this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 9, 3, i, box);
                     }
 
-                    for (int i = 1; i <= 9; i++) {
+                    for (i = 1; i <= 9; ++i) {
                         this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), i, 3, 1, box);
                         this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), i, 3, 9, box);
                     }
@@ -1181,7 +530,7 @@
                     this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 4, 3, 5, box);
                     this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 6, 3, 5, box);
 
-                    for (int i = 1; i <= 3; i++) {
+                    for (i = 1; i <= 3; ++i) {
                         this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 4, i, 4, box);
                         this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 6, i, 4, box);
                         this.placeBlock(level, Blocks.COBBLESTONE.defaultBlockState(), 4, i, 6, box);
@@ -1190,7 +539,7 @@
 
                     this.placeBlock(level, Blocks.WALL_TORCH.defaultBlockState(), 5, 3, 5, box);
 
-                    for (int i = 2; i <= 8; i++) {
+                    for (i = 2; i <= 8; ++i) {
                         this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 2, 3, i, box);
                         this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 3, 3, i, box);
                         if (i <= 3 || i >= 7) {
@@ -1203,36 +552,67 @@
                         this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 8, 3, i, box);
                     }
 
-                    BlockState blockState = Blocks.LADDER.defaultBlockState().setValue(LadderBlock.FACING, Direction.WEST);
-                    this.placeBlock(level, blockState, 9, 1, 3, box);
-                    this.placeBlock(level, blockState, 9, 2, 3, box);
-                    this.placeBlock(level, blockState, 9, 3, 3, box);
+                    IBlockData iblockdata = (IBlockData) Blocks.LADDER.defaultBlockState().setValue(LadderBlock.FACING, Direction.WEST);
+
+                    this.placeBlock(level, iblockdata, 9, 1, 3, box);
+                    this.placeBlock(level, iblockdata, 9, 2, 3, box);
+                    this.placeBlock(level, iblockdata, 9, 3, 3, box);
                     this.createChest(level, box, random, 3, 4, 8, BuiltInLootTables.STRONGHOLD_CROSSING);
             }
+
         }
     }
 
-    static class SmoothStoneSelector extends StructurePiece.BlockSelector {
+    public static class StraightStairsDown extends StrongholdPieces.StrongholdPiece {
+
+        private static final int WIDTH = 5;
+        private static final int HEIGHT = 11;
+        private static final int DEPTH = 8;
+
+        public StraightStairsDown(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_STRAIGHT_STAIRS_DOWN, genDepth, box);
+            this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
+        }
+
+        public StraightStairsDown(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_STRAIGHT_STAIRS_DOWN, tag);
+        }
+
         @Override
-        public void next(RandomSource random, int x, int y, int z, boolean wall) {
-            if (wall) {
-                float randomFloat = random.nextFloat();
-                if (randomFloat < 0.2F) {
-                    this.next = Blocks.CRACKED_STONE_BRICKS.defaultBlockState();
-                } else if (randomFloat < 0.5F) {
-                    this.next = Blocks.MOSSY_STONE_BRICKS.defaultBlockState();
-                } else if (randomFloat < 0.55F) {
-                    this.next = Blocks.INFESTED_STONE_BRICKS.defaultBlockState();
-                } else {
-                    this.next = Blocks.STONE_BRICKS.defaultBlockState();
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
+        }
+
+        public static StrongholdPieces.StraightStairsDown createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -7, 0, 5, 11, 8, orientation);
+
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.StraightStairsDown(genDepth, random, structureboundingbox, orientation) : null;
+        }
+
+        @Override
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 4, 10, 7, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 7, 0);
+            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.a.OPENING, 1, 1, 7);
+            IBlockData iblockdata = (IBlockData) Blocks.COBBLESTONE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.SOUTH);
+
+            for (int i = 0; i < 6; ++i) {
+                this.placeBlock(level, iblockdata, 1, 6 - i, 1 + i, box);
+                this.placeBlock(level, iblockdata, 2, 6 - i, 1 + i, box);
+                this.placeBlock(level, iblockdata, 3, 6 - i, 1 + i, box);
+                if (i < 5) {
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 5 - i, 1 + i, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 5 - i, 1 + i, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 5 - i, 1 + i, box);
                 }
-            } else {
-                this.next = Blocks.CAVE_AIR.defaultBlockState();
             }
+
         }
     }
 
     public static class StairsDown extends StrongholdPieces.StrongholdPiece {
+
         private static final int WIDTH = 5;
         private static final int HEIGHT = 11;
         private static final int DEPTH = 5;
@@ -1242,7 +622,7 @@
             super(type, genDepth, makeBoundingBox(x, 64, z, orientation, 5, 11, 5));
             this.isSource = true;
             this.setOrientation(orientation);
-            this.entryDoor = StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING;
+            this.entryDoor = StrongholdPieces.StrongholdPiece.a.OPENING;
         }
 
         public StairsDown(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
@@ -1273,31 +653,20 @@
                 StrongholdPieces.imposedPiece = StrongholdPieces.FiveCrossing.class;
             }
 
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece)piece, pieces, random, 1, 1);
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
         }
 
-        public static StrongholdPieces.StairsDown createPiece(
-            StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth
-        ) {
-            BoundingBox boundingBox = BoundingBox.orientBox(x, y, z, -1, -7, 0, 5, 11, 5, orientation);
-            return isOkBox(boundingBox) && pieces.findCollisionPiece(boundingBox) == null
-                ? new StrongholdPieces.StairsDown(genDepth, random, boundingBox, orientation)
-                : null;
+        public static StrongholdPieces.StairsDown createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -7, 0, 5, 11, 5, orientation);
+
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.StairsDown(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
             this.generateBox(level, box, 0, 0, 0, 4, 10, 4, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateSmallDoor(level, random, box, this.entryDoor, 1, 7, 0);
-            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING, 1, 1, 4);
+            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.a.OPENING, 1, 1, 4);
             this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 6, 1, box);
             this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 5, 1, box);
             this.placeBlock(level, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), 1, 6, 1, box);
@@ -1318,171 +687,484 @@
         }
     }
 
-    public static class StartPiece extends StrongholdPieces.StairsDown {
-        public StrongholdPieces.PieceWeight previousPiece;
-        @Nullable
-        public StrongholdPieces.PortalRoom portalRoomPiece;
-        public final List<StructurePiece> pendingChildren = Lists.newArrayList();
+    public static class FiveCrossing extends StrongholdPieces.StrongholdPiece {
 
-        public StartPiece(RandomSource random, int x, int z) {
-            super(StructurePieceType.STRONGHOLD_START, 0, x, z, getRandomHorizontalDirection(random));
+        protected static final int WIDTH = 10;
+        protected static final int HEIGHT = 9;
+        protected static final int DEPTH = 11;
+        private final boolean leftLow;
+        private final boolean leftHigh;
+        private final boolean rightLow;
+        private final boolean rightHigh;
+
+        public FiveCrossing(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_FIVE_CROSSING, genDepth, box);
+            this.setOrientation(orientation);
+            this.entryDoor = this.randomSmallDoor(random);
+            this.leftLow = random.nextBoolean();
+            this.leftHigh = random.nextBoolean();
+            this.rightLow = random.nextBoolean();
+            this.rightHigh = random.nextInt(3) > 0;
         }
 
-        public StartPiece(CompoundTag tag) {
-            super(StructurePieceType.STRONGHOLD_START, tag);
+        public FiveCrossing(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_FIVE_CROSSING, tag);
+            this.leftLow = tag.getBoolean("leftLow");
+            this.leftHigh = tag.getBoolean("leftHigh");
+            this.rightLow = tag.getBoolean("rightLow");
+            this.rightHigh = tag.getBoolean("rightHigh");
         }
 
         @Override
-        public BlockPos getLocatorPosition() {
-            return this.portalRoomPiece != null ? this.portalRoomPiece.getLocatorPosition() : super.getLocatorPosition();
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("leftLow", this.leftLow);
+            tag.putBoolean("leftHigh", this.leftHigh);
+            tag.putBoolean("rightLow", this.rightLow);
+            tag.putBoolean("rightHigh", this.rightHigh);
         }
+
+        @Override
+        public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
+            int i = 3;
+            int j = 5;
+            Direction enumdirection = this.getOrientation();
+
+            if (enumdirection == Direction.WEST || enumdirection == Direction.NORTH) {
+                i = 8 - i;
+                j = 8 - j;
+            }
+
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 5, 1);
+            if (this.leftLow) {
+                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) piece, pieces, random, i, 1);
+            }
+
+            if (this.leftHigh) {
+                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece) piece, pieces, random, j, 7);
+            }
+
+            if (this.rightLow) {
+                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) piece, pieces, random, i, 1);
+            }
+
+            if (this.rightHigh) {
+                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece) piece, pieces, random, j, 7);
+            }
+
+        }
+
+        public static StrongholdPieces.FiveCrossing createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -4, -3, 0, 10, 9, 11, orientation);
+
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.FiveCrossing(genDepth, random, structureboundingbox, orientation) : null;
+        }
+
+        @Override
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 9, 8, 10, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 4, 3, 0);
+            if (this.leftLow) {
+                this.generateBox(level, box, 0, 3, 1, 0, 5, 3, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
+            }
+
+            if (this.rightLow) {
+                this.generateBox(level, box, 9, 3, 1, 9, 5, 3, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
+            }
+
+            if (this.leftHigh) {
+                this.generateBox(level, box, 0, 5, 7, 0, 7, 9, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
+            }
+
+            if (this.rightHigh) {
+                this.generateBox(level, box, 9, 5, 7, 9, 7, 9, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
+            }
+
+            this.generateBox(level, box, 5, 1, 10, 7, 3, 10, StrongholdPieces.FiveCrossing.CAVE_AIR, StrongholdPieces.FiveCrossing.CAVE_AIR, false);
+            this.generateBox(level, box, 1, 2, 1, 8, 2, 6, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 1, 5, 4, 4, 9, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 8, 1, 5, 8, 4, 9, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 1, 4, 7, 3, 4, 9, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 1, 3, 5, 3, 3, 6, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 1, 3, 4, 3, 3, 4, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
+            this.generateBox(level, box, 1, 4, 6, 3, 4, 6, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 1, 7, 7, 1, 8, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 5, 1, 9, 7, 1, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 2, 7, 7, 2, 7, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
+            this.generateBox(level, box, 4, 5, 7, 4, 5, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
+            this.generateBox(level, box, 8, 5, 7, 8, 5, 9, Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), Blocks.SMOOTH_STONE_SLAB.defaultBlockState(), false);
+            this.generateBox(level, box, 5, 5, 7, 7, 5, 9, (IBlockData) Blocks.SMOOTH_STONE_SLAB.defaultBlockState().setValue(SlabBlock.TYPE, SlabType.DOUBLE), (IBlockData) Blocks.SMOOTH_STONE_SLAB.defaultBlockState().setValue(SlabBlock.TYPE, SlabType.DOUBLE), false);
+            this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.SOUTH), 6, 5, 6, box);
+        }
     }
 
-    public static class Straight extends StrongholdPieces.StrongholdPiece {
+    public static class ChestCorridor extends StrongholdPieces.StrongholdPiece {
+
         private static final int WIDTH = 5;
         private static final int HEIGHT = 5;
         private static final int DEPTH = 7;
-        private final boolean leftChild;
-        private final boolean rightChild;
+        private boolean hasPlacedChest;
 
-        public Straight(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
-            super(StructurePieceType.STRONGHOLD_STRAIGHT, genDepth, box);
+        public ChestCorridor(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_CHEST_CORRIDOR, genDepth, box);
             this.setOrientation(orientation);
             this.entryDoor = this.randomSmallDoor(random);
-            this.leftChild = random.nextInt(2) == 0;
-            this.rightChild = random.nextInt(2) == 0;
         }
 
-        public Straight(CompoundTag tag) {
-            super(StructurePieceType.STRONGHOLD_STRAIGHT, tag);
-            this.leftChild = tag.getBoolean("Left");
-            this.rightChild = tag.getBoolean("Right");
+        public ChestCorridor(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_CHEST_CORRIDOR, tag);
+            this.hasPlacedChest = tag.getBoolean("Chest");
         }
 
         @Override
         protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
             super.addAdditionalSaveData(context, tag);
-            tag.putBoolean("Left", this.leftChild);
-            tag.putBoolean("Right", this.rightChild);
+            tag.putBoolean("Chest", this.hasPlacedChest);
         }
 
         @Override
         public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece)piece, pieces, random, 1, 1);
-            if (this.leftChild) {
-                this.generateSmallDoorChildLeft((StrongholdPieces.StartPiece)piece, pieces, random, 1, 2);
-            }
-
-            if (this.rightChild) {
-                this.generateSmallDoorChildRight((StrongholdPieces.StartPiece)piece, pieces, random, 1, 2);
-            }
+            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece) piece, pieces, random, 1, 1);
         }
 
-        public static StrongholdPieces.Straight createPiece(
-            StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction direction, int genDepth
-        ) {
-            BoundingBox boundingBox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 7, direction);
-            return isOkBox(boundingBox) && pieces.findCollisionPiece(boundingBox) == null
-                ? new StrongholdPieces.Straight(genDepth, random, boundingBox, direction)
-                : null;
+        public static StrongholdPieces.ChestCorridor createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 7, orientation);
+
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.ChestCorridor(genDepth, random, structureboundingbox, orientation) : null;
         }
 
         @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
             this.generateBox(level, box, 0, 0, 0, 4, 4, 6, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
             this.generateSmallDoor(level, random, box, this.entryDoor, 1, 1, 0);
-            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING, 1, 1, 6);
-            BlockState blockState = Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.EAST);
-            BlockState blockState1 = Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.WEST);
-            this.maybeGenerateBlock(level, box, random, 0.1F, 1, 2, 1, blockState);
-            this.maybeGenerateBlock(level, box, random, 0.1F, 3, 2, 1, blockState1);
-            this.maybeGenerateBlock(level, box, random, 0.1F, 1, 2, 5, blockState);
-            this.maybeGenerateBlock(level, box, random, 0.1F, 3, 2, 5, blockState1);
-            if (this.leftChild) {
-                this.generateBox(level, box, 0, 1, 2, 0, 3, 4, CAVE_AIR, CAVE_AIR, false);
+            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.a.OPENING, 1, 1, 6);
+            this.generateBox(level, box, 3, 1, 2, 3, 1, 4, Blocks.STONE_BRICKS.defaultBlockState(), Blocks.STONE_BRICKS.defaultBlockState(), false);
+            this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 1, 1, box);
+            this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 1, 5, box);
+            this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 2, 2, box);
+            this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 3, 2, 4, box);
+
+            for (int i = 2; i <= 4; ++i) {
+                this.placeBlock(level, Blocks.STONE_BRICK_SLAB.defaultBlockState(), 2, 1, i, box);
             }
 
-            if (this.rightChild) {
-                this.generateBox(level, box, 4, 1, 2, 4, 3, 4, CAVE_AIR, CAVE_AIR, false);
+            if (!this.hasPlacedChest && box.isInside(this.getWorldPos(3, 2, 3))) {
+                this.hasPlacedChest = true;
+                this.createChest(level, box, random, 3, 2, 3, BuiltInLootTables.STRONGHOLD_CORRIDOR);
             }
+
         }
     }
 
-    public static class StraightStairsDown extends StrongholdPieces.StrongholdPiece {
-        private static final int WIDTH = 5;
-        private static final int HEIGHT = 11;
-        private static final int DEPTH = 8;
+    public static class Library extends StrongholdPieces.StrongholdPiece {
 
-        public StraightStairsDown(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
-            super(StructurePieceType.STRONGHOLD_STRAIGHT_STAIRS_DOWN, genDepth, box);
+        protected static final int WIDTH = 14;
+        protected static final int HEIGHT = 6;
+        protected static final int TALL_HEIGHT = 11;
+        protected static final int DEPTH = 15;
+        private final boolean isTall;
+
+        public Library(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_LIBRARY, genDepth, box);
             this.setOrientation(orientation);
             this.entryDoor = this.randomSmallDoor(random);
+            this.isTall = box.getYSpan() > 6;
         }
 
-        public StraightStairsDown(CompoundTag tag) {
-            super(StructurePieceType.STRONGHOLD_STRAIGHT_STAIRS_DOWN, tag);
+        public Library(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_LIBRARY, tag);
+            this.isTall = tag.getBoolean("Tall");
         }
 
         @Override
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("Tall", this.isTall);
+        }
+
+        public static StrongholdPieces.Library createPiece(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -4, -1, 0, 14, 11, 15, orientation);
+
+            if (!isOkBox(structureboundingbox) || pieces.findCollisionPiece(structureboundingbox) != null) {
+                structureboundingbox = BoundingBox.orientBox(x, y, z, -4, -1, 0, 14, 6, 15, orientation);
+                if (!isOkBox(structureboundingbox) || pieces.findCollisionPiece(structureboundingbox) != null) {
+                    return null;
+                }
+            }
+
+            return new StrongholdPieces.Library(genDepth, random, structureboundingbox, orientation);
+        }
+
+        @Override
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            byte b0 = 11;
+
+            if (!this.isTall) {
+                b0 = 6;
+            }
+
+            this.generateBox(level, box, 0, 0, 0, 13, b0 - 1, 14, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, this.entryDoor, 4, 1, 0);
+            this.generateMaybeBox(level, box, random, 0.07F, 2, 1, 1, 11, 4, 13, Blocks.COBWEB.defaultBlockState(), Blocks.COBWEB.defaultBlockState(), false, false);
+            boolean flag = true;
+            boolean flag1 = true;
+
+            int i;
+
+            for (i = 1; i <= 13; ++i) {
+                if ((i - 1) % 4 == 0) {
+                    this.generateBox(level, box, 1, 1, i, 1, 4, i, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                    this.generateBox(level, box, 12, 1, i, 12, 4, i, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                    this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.EAST), 2, 3, i, box);
+                    this.placeBlock(level, (IBlockData) Blocks.WALL_TORCH.defaultBlockState().setValue(WallTorchBlock.FACING, Direction.WEST), 11, 3, i, box);
+                    if (this.isTall) {
+                        this.generateBox(level, box, 1, 6, i, 1, 9, i, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                        this.generateBox(level, box, 12, 6, i, 12, 9, i, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                    }
+                } else {
+                    this.generateBox(level, box, 1, 1, i, 1, 4, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                    this.generateBox(level, box, 12, 1, i, 12, 4, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                    if (this.isTall) {
+                        this.generateBox(level, box, 1, 6, i, 1, 9, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                        this.generateBox(level, box, 12, 6, i, 12, 9, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                    }
+                }
+            }
+
+            for (i = 3; i < 12; i += 2) {
+                this.generateBox(level, box, 3, 1, i, 4, 3, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                this.generateBox(level, box, 6, 1, i, 7, 3, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+                this.generateBox(level, box, 9, 1, i, 10, 3, i, Blocks.BOOKSHELF.defaultBlockState(), Blocks.BOOKSHELF.defaultBlockState(), false);
+            }
+
+            if (this.isTall) {
+                this.generateBox(level, box, 1, 5, 1, 3, 5, 13, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                this.generateBox(level, box, 10, 5, 1, 12, 5, 13, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                this.generateBox(level, box, 4, 5, 1, 9, 5, 2, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                this.generateBox(level, box, 4, 5, 12, 9, 5, 13, Blocks.OAK_PLANKS.defaultBlockState(), Blocks.OAK_PLANKS.defaultBlockState(), false);
+                this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 9, 5, 11, box);
+                this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 8, 5, 11, box);
+                this.placeBlock(level, Blocks.OAK_PLANKS.defaultBlockState(), 9, 5, 10, box);
+                IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
+                IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.SOUTH, true);
+
+                this.generateBox(level, box, 3, 6, 3, 3, 6, 11, iblockdata1, iblockdata1, false);
+                this.generateBox(level, box, 10, 6, 3, 10, 6, 9, iblockdata1, iblockdata1, false);
+                this.generateBox(level, box, 4, 6, 2, 9, 6, 2, iblockdata, iblockdata, false);
+                this.generateBox(level, box, 4, 6, 12, 7, 6, 12, iblockdata, iblockdata, false);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 3, 6, 2, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.EAST, true), 3, 6, 12, box);
+                this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.WEST, true), 10, 6, 2, box);
+
+                for (int j = 0; j <= 2; ++j) {
+                    this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.SOUTH, true)).setValue(FenceBlock.WEST, true), 8 + j, 6, 12 - j, box);
+                    if (j != 2) {
+                        this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.NORTH, true)).setValue(FenceBlock.EAST, true), 8 + j, 6, 11 - j, box);
+                    }
+                }
+
+                IBlockData iblockdata2 = (IBlockData) Blocks.LADDER.defaultBlockState().setValue(LadderBlock.FACING, Direction.SOUTH);
+
+                this.placeBlock(level, iblockdata2, 10, 1, 13, box);
+                this.placeBlock(level, iblockdata2, 10, 2, 13, box);
+                this.placeBlock(level, iblockdata2, 10, 3, 13, box);
+                this.placeBlock(level, iblockdata2, 10, 4, 13, box);
+                this.placeBlock(level, iblockdata2, 10, 5, 13, box);
+                this.placeBlock(level, iblockdata2, 10, 6, 13, box);
+                this.placeBlock(level, iblockdata2, 10, 7, 13, box);
+                boolean flag2 = true;
+                boolean flag3 = true;
+                IBlockData iblockdata3 = (IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.EAST, true);
+
+                this.placeBlock(level, iblockdata3, 6, 9, 7, box);
+                IBlockData iblockdata4 = (IBlockData) Blocks.OAK_FENCE.defaultBlockState().setValue(FenceBlock.WEST, true);
+
+                this.placeBlock(level, iblockdata4, 7, 9, 7, box);
+                this.placeBlock(level, iblockdata3, 6, 8, 7, box);
+                this.placeBlock(level, iblockdata4, 7, 8, 7, box);
+                IBlockData iblockdata5 = (IBlockData) ((IBlockData) iblockdata1.setValue(FenceBlock.WEST, true)).setValue(FenceBlock.EAST, true);
+
+                this.placeBlock(level, iblockdata5, 6, 7, 7, box);
+                this.placeBlock(level, iblockdata5, 7, 7, 7, box);
+                this.placeBlock(level, iblockdata3, 5, 7, 7, box);
+                this.placeBlock(level, iblockdata4, 8, 7, 7, box);
+                this.placeBlock(level, (IBlockData) iblockdata3.setValue(FenceBlock.NORTH, true), 6, 7, 6, box);
+                this.placeBlock(level, (IBlockData) iblockdata3.setValue(FenceBlock.SOUTH, true), 6, 7, 8, box);
+                this.placeBlock(level, (IBlockData) iblockdata4.setValue(FenceBlock.NORTH, true), 7, 7, 6, box);
+                this.placeBlock(level, (IBlockData) iblockdata4.setValue(FenceBlock.SOUTH, true), 7, 7, 8, box);
+                IBlockData iblockdata6 = Blocks.TORCH.defaultBlockState();
+
+                this.placeBlock(level, iblockdata6, 5, 8, 7, box);
+                this.placeBlock(level, iblockdata6, 8, 8, 7, box);
+                this.placeBlock(level, iblockdata6, 6, 8, 6, box);
+                this.placeBlock(level, iblockdata6, 6, 8, 8, box);
+                this.placeBlock(level, iblockdata6, 7, 8, 6, box);
+                this.placeBlock(level, iblockdata6, 7, 8, 8, box);
+            }
+
+            this.createChest(level, box, random, 3, 3, 5, BuiltInLootTables.STRONGHOLD_LIBRARY);
+            if (this.isTall) {
+                this.placeBlock(level, StrongholdPieces.Library.CAVE_AIR, 12, 9, 1, box);
+                this.createChest(level, box, random, 12, 8, 1, BuiltInLootTables.STRONGHOLD_LIBRARY);
+            }
+
+        }
+    }
+
+    public static class PortalRoom extends StrongholdPieces.StrongholdPiece {
+
+        protected static final int WIDTH = 11;
+        protected static final int HEIGHT = 8;
+        protected static final int DEPTH = 16;
+        private boolean hasPlacedSpawner;
+
+        public PortalRoom(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_PORTAL_ROOM, genDepth, box);
+            this.setOrientation(orientation);
+        }
+
+        public PortalRoom(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_PORTAL_ROOM, tag);
+            this.hasPlacedSpawner = tag.getBoolean("Mob");
+        }
+
+        @Override
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putBoolean("Mob", this.hasPlacedSpawner);
+        }
+
+        @Override
         public void addChildren(StructurePiece piece, StructurePieceAccessor pieces, RandomSource random) {
-            this.generateSmallDoorChildForward((StrongholdPieces.StartPiece)piece, pieces, random, 1, 1);
+            if (piece != null) {
+                ((StrongholdPieces.StartPiece) piece).portalRoomPiece = this;
+            }
+
         }
 
-        public static StrongholdPieces.StraightStairsDown createPiece(
-            StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation, int genDepth
-        ) {
-            BoundingBox boundingBox = BoundingBox.orientBox(x, y, z, -1, -7, 0, 5, 11, 8, orientation);
-            return isOkBox(boundingBox) && pieces.findCollisionPiece(boundingBox) == null
-                ? new StrongholdPieces.StraightStairsDown(genDepth, random, boundingBox, orientation)
-                : null;
+        public static StrongholdPieces.PortalRoom createPiece(StructurePieceAccessor pieces, int x, int y, int z, Direction orientation, int genDepth) {
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -4, -1, 0, 11, 8, 16, orientation);
+
+            return isOkBox(structureboundingbox) && pieces.findCollisionPiece(structureboundingbox) == null ? new StrongholdPieces.PortalRoom(genDepth, structureboundingbox, orientation) : null;
         }
 
         @Override
-        public void postProcess(
-            WorldGenLevel level,
-            StructureManager structureManager,
-            ChunkGenerator generator,
-            RandomSource random,
-            BoundingBox box,
-            ChunkPos chunkPos,
-            BlockPos pos
-        ) {
-            this.generateBox(level, box, 0, 0, 0, 4, 10, 7, true, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
-            this.generateSmallDoor(level, random, box, this.entryDoor, 1, 7, 0);
-            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING, 1, 1, 7);
-            BlockState blockState = Blocks.COBBLESTONE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.SOUTH);
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            this.generateBox(level, box, 0, 0, 0, 10, 7, 15, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateSmallDoor(level, random, box, StrongholdPieces.StrongholdPiece.a.GRATES, 4, 1, 0);
+            boolean flag = true;
 
-            for (int i = 0; i < 6; i++) {
-                this.placeBlock(level, blockState, 1, 6 - i, 1 + i, box);
-                this.placeBlock(level, blockState, 2, 6 - i, 1 + i, box);
-                this.placeBlock(level, blockState, 3, 6 - i, 1 + i, box);
-                if (i < 5) {
-                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 5 - i, 1 + i, box);
-                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 5 - i, 1 + i, box);
-                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 5 - i, 1 + i, box);
+            this.generateBox(level, box, 1, 6, 1, 1, 6, 14, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 9, 6, 1, 9, 6, 14, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 2, 6, 1, 8, 6, 2, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 2, 6, 14, 8, 6, 14, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 1, 1, 1, 2, 1, 4, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 8, 1, 1, 9, 1, 4, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 1, 1, 1, 1, 1, 3, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
+            this.generateBox(level, box, 9, 1, 1, 9, 1, 3, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
+            this.generateBox(level, box, 3, 1, 8, 7, 1, 12, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 1, 9, 6, 1, 11, Blocks.LAVA.defaultBlockState(), Blocks.LAVA.defaultBlockState(), false);
+            IBlockData iblockdata = (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.NORTH, true)).setValue(IronBarsBlock.SOUTH, true);
+            IBlockData iblockdata1 = (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true)).setValue(IronBarsBlock.EAST, true);
+
+            int i;
+
+            for (i = 3; i < 14; i += 2) {
+                this.generateBox(level, box, 0, 3, i, 0, 4, i, iblockdata, iblockdata, false);
+                this.generateBox(level, box, 10, 3, i, 10, 4, i, iblockdata, iblockdata, false);
+            }
+
+            for (i = 2; i < 9; i += 2) {
+                this.generateBox(level, box, i, 3, 15, i, 4, 15, iblockdata1, iblockdata1, false);
+            }
+
+            IBlockData iblockdata2 = (IBlockData) Blocks.STONE_BRICK_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.NORTH);
+
+            this.generateBox(level, box, 4, 1, 5, 6, 1, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 2, 6, 6, 2, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+            this.generateBox(level, box, 4, 3, 7, 6, 3, 7, false, random, StrongholdPieces.SMOOTH_STONE_SELECTOR);
+
+            for (int j = 4; j <= 6; ++j) {
+                this.placeBlock(level, iblockdata2, j, 1, 4, box);
+                this.placeBlock(level, iblockdata2, j, 2, 5, box);
+                this.placeBlock(level, iblockdata2, j, 3, 6, box);
+            }
+
+            IBlockData iblockdata3 = (IBlockData) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.NORTH);
+            IBlockData iblockdata4 = (IBlockData) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.SOUTH);
+            IBlockData iblockdata5 = (IBlockData) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.EAST);
+            IBlockData iblockdata6 = (IBlockData) Blocks.END_PORTAL_FRAME.defaultBlockState().setValue(EndPortalFrameBlock.FACING, Direction.WEST);
+            boolean flag1 = true;
+            boolean[] aboolean = new boolean[12];
+
+            for (int k = 0; k < aboolean.length; ++k) {
+                aboolean[k] = random.nextFloat() > 0.9F;
+                flag1 &= aboolean[k];
+            }
+
+            this.placeBlock(level, (IBlockData) iblockdata3.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[0]), 4, 3, 8, box);
+            this.placeBlock(level, (IBlockData) iblockdata3.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[1]), 5, 3, 8, box);
+            this.placeBlock(level, (IBlockData) iblockdata3.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[2]), 6, 3, 8, box);
+            this.placeBlock(level, (IBlockData) iblockdata4.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[3]), 4, 3, 12, box);
+            this.placeBlock(level, (IBlockData) iblockdata4.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[4]), 5, 3, 12, box);
+            this.placeBlock(level, (IBlockData) iblockdata4.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[5]), 6, 3, 12, box);
+            this.placeBlock(level, (IBlockData) iblockdata5.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[6]), 3, 3, 9, box);
+            this.placeBlock(level, (IBlockData) iblockdata5.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[7]), 3, 3, 10, box);
+            this.placeBlock(level, (IBlockData) iblockdata5.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[8]), 3, 3, 11, box);
+            this.placeBlock(level, (IBlockData) iblockdata6.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[9]), 7, 3, 9, box);
+            this.placeBlock(level, (IBlockData) iblockdata6.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[10]), 7, 3, 10, box);
+            this.placeBlock(level, (IBlockData) iblockdata6.setValue(EndPortalFrameBlock.HAS_EYE, aboolean[11]), 7, 3, 11, box);
+            if (flag1) {
+                IBlockData iblockdata7 = Blocks.END_PORTAL.defaultBlockState();
+
+                this.placeBlock(level, iblockdata7, 4, 3, 9, box);
+                this.placeBlock(level, iblockdata7, 5, 3, 9, box);
+                this.placeBlock(level, iblockdata7, 6, 3, 9, box);
+                this.placeBlock(level, iblockdata7, 4, 3, 10, box);
+                this.placeBlock(level, iblockdata7, 5, 3, 10, box);
+                this.placeBlock(level, iblockdata7, 6, 3, 10, box);
+                this.placeBlock(level, iblockdata7, 4, 3, 11, box);
+                this.placeBlock(level, iblockdata7, 5, 3, 11, box);
+                this.placeBlock(level, iblockdata7, 6, 3, 11, box);
+            }
+
+            if (!this.hasPlacedSpawner) {
+                BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(5, 3, 6);
+
+                if (box.isInside(blockposition_mutableblockposition)) {
+                    this.hasPlacedSpawner = true;
+                    // CraftBukkit start
+                    /*
+                    generatoraccessseed.setBlock(blockposition_mutableblockposition, Blocks.SPAWNER.defaultBlockState(), 2);
+                    TileEntity tileentity = generatoraccessseed.getBlockEntity(blockposition_mutableblockposition);
+
+                    if (tileentity instanceof TileEntityMobSpawner) {
+                        TileEntityMobSpawner tileentitymobspawner = (TileEntityMobSpawner) tileentity;
+
+                        tileentitymobspawner.setEntityId(EntityTypes.SILVERFISH, randomsource);
+                    }
+                    */
+                    placeCraftSpawner(level, blockposition_mutableblockposition, org.bukkit.entity.EntityType.SILVERFISH, 2);
+                    // CraftBukkit end
                 }
             }
+
         }
     }
 
-    abstract static class StrongholdPiece extends StructurePiece {
-        protected StrongholdPieces.StrongholdPiece.SmallDoorType entryDoor = StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING;
+    private abstract static class StrongholdPiece extends StructurePiece {
 
+        protected StrongholdPieces.StrongholdPiece.a entryDoor;
+
         protected StrongholdPiece(StructurePieceType type, int genDepth, BoundingBox boundingBox) {
             super(type, genDepth, boundingBox);
+            this.entryDoor = StrongholdPieces.StrongholdPiece.a.OPENING;
         }
 
         public StrongholdPiece(StructurePieceType type, CompoundTag tag) {
             super(type, tag);
-            this.entryDoor = StrongholdPieces.StrongholdPiece.SmallDoorType.valueOf(tag.getString("EntryDoor"));
+            this.entryDoor = StrongholdPieces.StrongholdPiece.a.OPENING;
+            this.entryDoor = StrongholdPieces.StrongholdPiece.a.valueOf(tag.getString("EntryDoor"));
         }
 
         @Override
@@ -1490,12 +1172,10 @@
             tag.putString("EntryDoor", this.entryDoor.name());
         }
 
-        protected void generateSmallDoor(
-            WorldGenLevel level, RandomSource random, BoundingBox box, StrongholdPieces.StrongholdPiece.SmallDoorType type, int x, int y, int z
-        ) {
+        protected void generateSmallDoor(WorldGenLevel level, RandomSource random, BoundingBox box, StrongholdPieces.StrongholdPiece.a type, int x, int y, int z) {
             switch (type) {
                 case OPENING:
-                    this.generateBox(level, box, x, y, z, x + 3 - 1, y + 3 - 1, z, CAVE_AIR, CAVE_AIR, false);
+                    this.generateBox(level, box, x, y, z, x + 3 - 1, y + 3 - 1, z, StrongholdPieces.StrongholdPiece.CAVE_AIR, StrongholdPieces.StrongholdPiece.CAVE_AIR, false);
                     break;
                 case WOOD_DOOR:
                     this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x, y, z, box);
@@ -1506,48 +1186,18 @@
                     this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x + 2, y + 1, z, box);
                     this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x + 2, y, z, box);
                     this.placeBlock(level, Blocks.OAK_DOOR.defaultBlockState(), x + 1, y, z, box);
-                    this.placeBlock(level, Blocks.OAK_DOOR.defaultBlockState().setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), x + 1, y + 1, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.OAK_DOOR.defaultBlockState().setValue(DoorBlock.HALF, BlockPropertyDoubleBlockHalf.UPPER), x + 1, y + 1, z, box);
                     break;
                 case GRATES:
                     this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), x + 1, y, z, box);
                     this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), x + 1, y + 1, z, box);
-                    this.placeBlock(level, Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, Boolean.valueOf(true)), x, y, z, box);
-                    this.placeBlock(level, Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, Boolean.valueOf(true)), x, y + 1, z, box);
-                    this.placeBlock(
-                        level,
-                        Blocks.IRON_BARS
-                            .defaultBlockState()
-                            .setValue(IronBarsBlock.EAST, Boolean.valueOf(true))
-                            .setValue(IronBarsBlock.WEST, Boolean.valueOf(true)),
-                        x,
-                        y + 2,
-                        z,
-                        box
-                    );
-                    this.placeBlock(
-                        level,
-                        Blocks.IRON_BARS
-                            .defaultBlockState()
-                            .setValue(IronBarsBlock.EAST, Boolean.valueOf(true))
-                            .setValue(IronBarsBlock.WEST, Boolean.valueOf(true)),
-                        x + 1,
-                        y + 2,
-                        z,
-                        box
-                    );
-                    this.placeBlock(
-                        level,
-                        Blocks.IRON_BARS
-                            .defaultBlockState()
-                            .setValue(IronBarsBlock.EAST, Boolean.valueOf(true))
-                            .setValue(IronBarsBlock.WEST, Boolean.valueOf(true)),
-                        x + 2,
-                        y + 2,
-                        z,
-                        box
-                    );
-                    this.placeBlock(level, Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, Boolean.valueOf(true)), x + 2, y + 1, z, box);
-                    this.placeBlock(level, Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, Boolean.valueOf(true)), x + 2, y, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true), x, y, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.WEST, true), x, y + 1, z, box);
+                    this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), x, y + 2, z, box);
+                    this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), x + 1, y + 2, z, box);
+                    this.placeBlock(level, (IBlockData) ((IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true)).setValue(IronBarsBlock.WEST, true), x + 2, y + 2, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true), x + 2, y + 1, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.IRON_BARS.defaultBlockState().setValue(IronBarsBlock.EAST, true), x + 2, y, z, box);
                     break;
                 case IRON_DOOR:
                     this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x, y, z, box);
@@ -1558,79 +1208,44 @@
                     this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x + 2, y + 1, z, box);
                     this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), x + 2, y, z, box);
                     this.placeBlock(level, Blocks.IRON_DOOR.defaultBlockState(), x + 1, y, z, box);
-                    this.placeBlock(level, Blocks.IRON_DOOR.defaultBlockState().setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), x + 1, y + 1, z, box);
-                    this.placeBlock(level, Blocks.STONE_BUTTON.defaultBlockState().setValue(ButtonBlock.FACING, Direction.NORTH), x + 2, y + 1, z + 1, box);
-                    this.placeBlock(level, Blocks.STONE_BUTTON.defaultBlockState().setValue(ButtonBlock.FACING, Direction.SOUTH), x + 2, y + 1, z - 1, box);
+                    this.placeBlock(level, (IBlockData) Blocks.IRON_DOOR.defaultBlockState().setValue(DoorBlock.HALF, BlockPropertyDoubleBlockHalf.UPPER), x + 1, y + 1, z, box);
+                    this.placeBlock(level, (IBlockData) Blocks.STONE_BUTTON.defaultBlockState().setValue(ButtonBlock.FACING, Direction.NORTH), x + 2, y + 1, z + 1, box);
+                    this.placeBlock(level, (IBlockData) Blocks.STONE_BUTTON.defaultBlockState().setValue(ButtonBlock.FACING, Direction.SOUTH), x + 2, y + 1, z - 1, box);
             }
+
         }
 
-        protected StrongholdPieces.StrongholdPiece.SmallDoorType randomSmallDoor(RandomSource random) {
-            int randomInt = random.nextInt(5);
-            switch (randomInt) {
+        protected StrongholdPieces.StrongholdPiece.a randomSmallDoor(RandomSource random) {
+            int i = random.nextInt(5);
+
+            switch (i) {
                 case 0:
                 case 1:
                 default:
-                    return StrongholdPieces.StrongholdPiece.SmallDoorType.OPENING;
+                    return StrongholdPieces.StrongholdPiece.a.OPENING;
                 case 2:
-                    return StrongholdPieces.StrongholdPiece.SmallDoorType.WOOD_DOOR;
+                    return StrongholdPieces.StrongholdPiece.a.WOOD_DOOR;
                 case 3:
-                    return StrongholdPieces.StrongholdPiece.SmallDoorType.GRATES;
+                    return StrongholdPieces.StrongholdPiece.a.GRATES;
                 case 4:
-                    return StrongholdPieces.StrongholdPiece.SmallDoorType.IRON_DOOR;
+                    return StrongholdPieces.StrongholdPiece.a.IRON_DOOR;
             }
         }
 
         @Nullable
-        protected StructurePiece generateSmallDoorChildForward(
-            StrongholdPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int offsetX, int offsetY
-        ) {
-            Direction orientation = this.getOrientation();
-            if (orientation != null) {
-                switch (orientation) {
+        protected StructurePiece generateSmallDoorChildForward(StrongholdPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int offsetX, int offsetY) {
+            Direction enumdirection = this.getOrientation();
+
+            if (enumdirection != null) {
+                switch (enumdirection) {
                     case NORTH:
-                        return StrongholdPieces.generateAndAddPiece(
-                            startPiece,
-                            pieces,
-                            random,
-                            this.boundingBox.minX() + offsetX,
-                            this.boundingBox.minY() + offsetY,
-                            this.boundingBox.minZ() - 1,
-                            orientation,
-                            this.getGenDepth()
-                        );
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() - 1, enumdirection, this.getGenDepth());
                     case SOUTH:
-                        return StrongholdPieces.generateAndAddPiece(
-                            startPiece,
-                            pieces,
-                            random,
-                            this.boundingBox.minX() + offsetX,
-                            this.boundingBox.minY() + offsetY,
-                            this.boundingBox.maxZ() + 1,
-                            orientation,
-                            this.getGenDepth()
-                        );
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.maxZ() + 1, enumdirection, this.getGenDepth());
                     case WEST:
-                        return StrongholdPieces.generateAndAddPiece(
-                            startPiece,
-                            pieces,
-                            random,
-                            this.boundingBox.minX() - 1,
-                            this.boundingBox.minY() + offsetY,
-                            this.boundingBox.minZ() + offsetX,
-                            orientation,
-                            this.getGenDepth()
-                        );
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, enumdirection, this.getGenDepth());
                     case EAST:
-                        return StrongholdPieces.generateAndAddPiece(
-                            startPiece,
-                            pieces,
-                            random,
-                            this.boundingBox.maxX() + 1,
-                            this.boundingBox.minY() + offsetY,
-                            this.boundingBox.minZ() + offsetX,
-                            orientation,
-                            this.getGenDepth()
-                        );
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, enumdirection, this.getGenDepth());
                 }
             }
 
@@ -1638,56 +1253,19 @@
         }
 
         @Nullable
-        protected StructurePiece generateSmallDoorChildLeft(
-            StrongholdPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int offsetY, int offsetX
-        ) {
-            Direction orientation = this.getOrientation();
-            if (orientation != null) {
-                switch (orientation) {
+        protected StructurePiece generateSmallDoorChildLeft(StrongholdPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int offsetY, int offsetX) {
+            Direction enumdirection = this.getOrientation();
+
+            if (enumdirection != null) {
+                switch (enumdirection) {
                     case NORTH:
-                        return StrongholdPieces.generateAndAddPiece(
-                            startPiece,
-                            pieces,
-                            random,
-                            this.boundingBox.minX() - 1,
-                            this.boundingBox.minY() + offsetY,
-                            this.boundingBox.minZ() + offsetX,
-                            Direction.WEST,
-                            this.getGenDepth()
-                        );
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, Direction.WEST, this.getGenDepth());
                     case SOUTH:
-                        return StrongholdPieces.generateAndAddPiece(
-                            startPiece,
-                            pieces,
-                            random,
-                            this.boundingBox.minX() - 1,
-                            this.boundingBox.minY() + offsetY,
-                            this.boundingBox.minZ() + offsetX,
-                            Direction.WEST,
-                            this.getGenDepth()
-                        );
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() - 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, Direction.WEST, this.getGenDepth());
                     case WEST:
-                        return StrongholdPieces.generateAndAddPiece(
-                            startPiece,
-                            pieces,
-                            random,
-                            this.boundingBox.minX() + offsetX,
-                            this.boundingBox.minY() + offsetY,
-                            this.boundingBox.minZ() - 1,
-                            Direction.NORTH,
-                            this.getGenDepth()
-                        );
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() - 1, Direction.NORTH, this.getGenDepth());
                     case EAST:
-                        return StrongholdPieces.generateAndAddPiece(
-                            startPiece,
-                            pieces,
-                            random,
-                            this.boundingBox.minX() + offsetX,
-                            this.boundingBox.minY() + offsetY,
-                            this.boundingBox.minZ() - 1,
-                            Direction.NORTH,
-                            this.getGenDepth()
-                        );
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() - 1, Direction.NORTH, this.getGenDepth());
                 }
             }
 
@@ -1695,56 +1273,19 @@
         }
 
         @Nullable
-        protected StructurePiece generateSmallDoorChildRight(
-            StrongholdPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int offsetY, int offsetX
-        ) {
-            Direction orientation = this.getOrientation();
-            if (orientation != null) {
-                switch (orientation) {
+        protected StructurePiece generateSmallDoorChildRight(StrongholdPieces.StartPiece startPiece, StructurePieceAccessor pieces, RandomSource random, int offsetY, int offsetX) {
+            Direction enumdirection = this.getOrientation();
+
+            if (enumdirection != null) {
+                switch (enumdirection) {
                     case NORTH:
-                        return StrongholdPieces.generateAndAddPiece(
-                            startPiece,
-                            pieces,
-                            random,
-                            this.boundingBox.maxX() + 1,
-                            this.boundingBox.minY() + offsetY,
-                            this.boundingBox.minZ() + offsetX,
-                            Direction.EAST,
-                            this.getGenDepth()
-                        );
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, Direction.EAST, this.getGenDepth());
                     case SOUTH:
-                        return StrongholdPieces.generateAndAddPiece(
-                            startPiece,
-                            pieces,
-                            random,
-                            this.boundingBox.maxX() + 1,
-                            this.boundingBox.minY() + offsetY,
-                            this.boundingBox.minZ() + offsetX,
-                            Direction.EAST,
-                            this.getGenDepth()
-                        );
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.maxX() + 1, this.boundingBox.minY() + offsetY, this.boundingBox.minZ() + offsetX, Direction.EAST, this.getGenDepth());
                     case WEST:
-                        return StrongholdPieces.generateAndAddPiece(
-                            startPiece,
-                            pieces,
-                            random,
-                            this.boundingBox.minX() + offsetX,
-                            this.boundingBox.minY() + offsetY,
-                            this.boundingBox.maxZ() + 1,
-                            Direction.SOUTH,
-                            this.getGenDepth()
-                        );
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.maxZ() + 1, Direction.SOUTH, this.getGenDepth());
                     case EAST:
-                        return StrongholdPieces.generateAndAddPiece(
-                            startPiece,
-                            pieces,
-                            random,
-                            this.boundingBox.minX() + offsetX,
-                            this.boundingBox.minY() + offsetY,
-                            this.boundingBox.maxZ() + 1,
-                            Direction.SOUTH,
-                            this.getGenDepth()
-                        );
+                        return StrongholdPieces.generateAndAddPiece(startPiece, pieces, random, this.boundingBox.minX() + offsetX, this.boundingBox.minY() + offsetY, this.boundingBox.maxZ() + 1, Direction.SOUTH, this.getGenDepth());
                 }
             }
 
@@ -1755,24 +1296,140 @@
             return box != null && box.minY() > 10;
         }
 
-        protected static enum SmallDoorType {
-            OPENING,
-            WOOD_DOOR,
-            GRATES,
-            IRON_DOOR;
+        protected static enum a {
+
+            OPENING, WOOD_DOOR, GRATES, IRON_DOOR;
+
+            private a() {}
         }
     }
 
-    public abstract static class Turn extends StrongholdPieces.StrongholdPiece {
+    public static class StartPiece extends StrongholdPieces.StairsDown {
+
+        public StrongholdPieces.PieceWeight previousPiece;
+        @Nullable
+        public StrongholdPieces.PortalRoom portalRoomPiece;
+        public final List<StructurePiece> pendingChildren = Lists.newArrayList();
+
+        public StartPiece(RandomSource random, int x, int z) {
+            super(StructurePieceType.STRONGHOLD_START, 0, x, z, getRandomHorizontalDirection(random));
+        }
+
+        public StartPiece(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_START, tag);
+        }
+
+        @Override
+        public BlockPos getLocatorPosition() {
+            return this.portalRoomPiece != null ? this.portalRoomPiece.getLocatorPosition() : super.getLocatorPosition();
+        }
+    }
+
+    public static class FillerCorridor extends StrongholdPieces.StrongholdPiece {
+
+        private final int steps;
+
+        public FillerCorridor(int genDepth, BoundingBox box, Direction orientation) {
+            super(StructurePieceType.STRONGHOLD_FILLER_CORRIDOR, genDepth, box);
+            this.setOrientation(orientation);
+            this.steps = orientation != Direction.NORTH && orientation != Direction.SOUTH ? box.getXSpan() : box.getZSpan();
+        }
+
+        public FillerCorridor(CompoundTag tag) {
+            super(StructurePieceType.STRONGHOLD_FILLER_CORRIDOR, tag);
+            this.steps = tag.getInt("Steps");
+        }
+
+        @Override
+        protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
+            super.addAdditionalSaveData(context, tag);
+            tag.putInt("Steps", this.steps);
+        }
+
+        public static BoundingBox findPieceBox(StructurePieceAccessor pieces, RandomSource random, int x, int y, int z, Direction orientation) {
+            boolean flag = true;
+            BoundingBox structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, 4, orientation);
+            StructurePiece structurepiece = pieces.findCollisionPiece(structureboundingbox);
+
+            if (structurepiece == null) {
+                return null;
+            } else {
+                if (structurepiece.getBoundingBox().minY() == structureboundingbox.minY()) {
+                    for (int l = 2; l >= 1; --l) {
+                        structureboundingbox = BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, l, orientation);
+                        if (!structurepiece.getBoundingBox().intersects(structureboundingbox)) {
+                            return BoundingBox.orientBox(x, y, z, -1, -1, 0, 5, 5, l + 1, orientation);
+                        }
+                    }
+                }
+
+                return null;
+            }
+        }
+
+        @Override
+        public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
+            for (int i = 0; i < this.steps; ++i) {
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 0, 0, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 0, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 0, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 0, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 4, 0, i, box);
+
+                for (int j = 1; j <= 3; ++j) {
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 0, j, i, box);
+                    this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), 1, j, i, box);
+                    this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), 2, j, i, box);
+                    this.placeBlock(level, Blocks.CAVE_AIR.defaultBlockState(), 3, j, i, box);
+                    this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 4, j, i, box);
+                }
+
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 0, 4, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 1, 4, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 2, 4, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 3, 4, i, box);
+                this.placeBlock(level, Blocks.STONE_BRICKS.defaultBlockState(), 4, 4, i, box);
+            }
+
+        }
+    }
+
+    private static class k extends StructurePiece.BlockSelector {
+
+        k() {}
+
+        @Override
+        public void next(RandomSource random, int x, int y, int z, boolean wall) {
+            if (wall) {
+                float f = random.nextFloat();
+
+                if (f < 0.2F) {
+                    this.next = Blocks.CRACKED_STONE_BRICKS.defaultBlockState();
+                } else if (f < 0.5F) {
+                    this.next = Blocks.MOSSY_STONE_BRICKS.defaultBlockState();
+                } else if (f < 0.55F) {
+                    this.next = Blocks.INFESTED_STONE_BRICKS.defaultBlockState();
+                } else {
+                    this.next = Blocks.STONE_BRICKS.defaultBlockState();
+                }
+            } else {
+                this.next = Blocks.CAVE_AIR.defaultBlockState();
+            }
+
+        }
+    }
+
+    public abstract static class q extends StrongholdPieces.StrongholdPiece {
+
         protected static final int WIDTH = 5;
         protected static final int HEIGHT = 5;
         protected static final int DEPTH = 5;
 
-        protected Turn(StructurePieceType type, int genDepth, BoundingBox boundingBox) {
+        protected q(StructurePieceType type, int genDepth, BoundingBox boundingBox) {
             super(type, genDepth, boundingBox);
         }
 
-        public Turn(StructurePieceType type, CompoundTag tag) {
+        public q(StructurePieceType type, CompoundTag tag) {
             super(type, tag);
         }
     }
