--- a/net/minecraft/world/level/levelgen/structure/structures/DesertPyramidStructure.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/DesertPyramidStructure.java
@@ -2,6 +2,8 @@
 
 import com.mojang.serialization.Codec;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectListIterator;
+import java.util.Iterator;
 import java.util.Set;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
@@ -13,7 +15,6 @@
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.BlockEntityType;
-import net.minecraft.world.level.block.entity.BrushableBlockEntity;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.levelgen.structure.SinglePieceStructure;
@@ -24,52 +25,66 @@
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 
 public class DesertPyramidStructure extends SinglePieceStructure {
+
     public static final Codec<DesertPyramidStructure> CODEC = simpleCodec(DesertPyramidStructure::new);
 
-    public DesertPyramidStructure(Structure.StructureSettings settings) {
+    public DesertPyramidStructure(Structure.c settings) {
         super(DesertPyramidPiece::new, 21, 21, settings);
     }
 
     @Override
-    public void afterPlace(
-        WorldGenLevel level,
-        StructureManager structureManager,
-        ChunkGenerator chunkGenerator,
-        RandomSource random,
-        BoundingBox boundingBox,
-        ChunkPos chunkPos,
-        PiecesContainer pieces
-    ) {
+    public void afterPlace(WorldGenLevel level, StructureManager structureManager, ChunkGenerator chunkGenerator, RandomSource random, BoundingBox boundingBox, ChunkPos chunkPos, PiecesContainer pieces) {
         Set<BlockPos> set = SortedArraySet.create(Vec3i::compareTo);
+        Iterator iterator = pieces.pieces().iterator();
 
-        for (StructurePiece structurePiece : pieces.pieces()) {
-            if (structurePiece instanceof DesertPyramidPiece desertPyramidPiece) {
-                set.addAll(desertPyramidPiece.getPotentialSuspiciousSandWorldPositions());
-                placeSuspiciousSand(boundingBox, level, desertPyramidPiece.getRandomCollapsedRoofPos());
+        while (iterator.hasNext()) {
+            StructurePiece structurepiece = (StructurePiece) iterator.next();
+
+            if (structurepiece instanceof DesertPyramidPiece) {
+                DesertPyramidPiece desertpyramidpiece = (DesertPyramidPiece) structurepiece;
+
+                set.addAll(desertpyramidpiece.getPotentialSuspiciousSandWorldPositions());
+                placeSuspiciousSand(boundingBox, level, desertpyramidpiece.getRandomCollapsedRoofPos());
             }
         }
 
-        ObjectArrayList<BlockPos> list = new ObjectArrayList<>(set.stream().toList());
-        RandomSource randomSource = RandomSource.create(level.getSeed()).forkPositional().at(pieces.calculateBoundingBox().getCenter());
-        Util.shuffle(list, randomSource);
-        int min = Math.min(set.size(), randomSource.nextInt(5, 8));
+        ObjectArrayList<BlockPos> objectarraylist = new ObjectArrayList(set.stream().toList());
+        RandomSource randomsource1 = RandomSource.create(level.getSeed()).forkPositional().at(pieces.calculateBoundingBox().getCenter());
 
-        for (BlockPos blockPos : list) {
-            if (min > 0) {
-                min--;
-                placeSuspiciousSand(boundingBox, level, blockPos);
-            } else if (boundingBox.isInside(blockPos)) {
-                level.setBlock(blockPos, Blocks.SAND.defaultBlockState(), 2);
+        Util.shuffle(objectarraylist, randomsource1);
+        int i = Math.min(set.size(), randomsource1.nextInt(5, 8));
+        ObjectListIterator objectlistiterator = objectarraylist.iterator();
+
+        while (objectlistiterator.hasNext()) {
+            BlockPos blockposition = (BlockPos) objectlistiterator.next();
+
+            if (i > 0) {
+                --i;
+                placeSuspiciousSand(boundingBox, level, blockposition);
+            } else if (boundingBox.isInside(blockposition)) {
+                level.setBlock(blockposition, Blocks.SAND.defaultBlockState(), 2);
             }
         }
+
     }
 
     private static void placeSuspiciousSand(BoundingBox boundingBox, WorldGenLevel worldGenLevel, BlockPos pos) {
         if (boundingBox.isInside(pos)) {
+            // CraftBukkit start
+            if (worldGenLevel instanceof org.bukkit.craftbukkit.util.TransformerGeneratorAccess transformerAccess) {
+                org.bukkit.craftbukkit.block.CraftBrushableBlock brushableState = (org.bukkit.craftbukkit.block.CraftBrushableBlock) org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(pos, Blocks.SUSPICIOUS_SAND.defaultBlockState(), null);
+                brushableState.setLootTable(org.bukkit.Bukkit.getLootTable(org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(BuiltInLootTables.DESERT_PYRAMID_ARCHAEOLOGY)));
+                brushableState.setSeed(pos.asLong());
+                transformerAccess.setCraftBlock(pos, brushableState, 2);
+                return;
+            }
+            // CraftBukkit end
             worldGenLevel.setBlock(pos, Blocks.SUSPICIOUS_SAND.defaultBlockState(), 2);
-            worldGenLevel.getBlockEntity(pos, BlockEntityType.BRUSHABLE_BLOCK)
-                .ifPresent(brushableBlockEntity -> brushableBlockEntity.setLootTable(BuiltInLootTables.DESERT_PYRAMID_ARCHAEOLOGY, pos.asLong()));
+            worldGenLevel.getBlockEntity(pos, BlockEntityType.BRUSHABLE_BLOCK).ifPresent((brushableblockentity) -> {
+                brushableblockentity.setLootTable(BuiltInLootTables.DESERT_PYRAMID_ARCHAEOLOGY, pos.asLong());
+            });
         }
+
     }
 
     @Override
