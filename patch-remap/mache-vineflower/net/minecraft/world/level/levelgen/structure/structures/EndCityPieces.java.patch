--- a/net/minecraft/world/level/levelgen/structure/structures/EndCityPieces.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/EndCityPieces.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.levelgen.structure.structures;
 
 import com.google.common.collect.Lists;
+import java.util.Iterator;
 import java.util.List;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -28,126 +29,79 @@
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
 
 public class EndCityPieces {
+
     private static final int MAX_GEN_DEPTH = 8;
     static final EndCityPieces.SectionGenerator HOUSE_TOWER_GENERATOR = new EndCityPieces.SectionGenerator() {
         @Override
-        public void init() {
-        }
+        public void init() {}
 
         @Override
-        public boolean generate(
-            StructureTemplateManager structureTemplateManager,
-            int counter,
-            EndCityPieces.EndCityPiece piece,
-            BlockPos startPos,
-            List<StructurePiece> pieces,
-            RandomSource random
-        ) {
+        public boolean generate(StructureTemplateManager structureTemplateManager, int counter, EndCityPieces.EndCityPiece piece, BlockPos startPos, List<StructurePiece> pieces, RandomSource random) {
             if (counter > 8) {
                 return false;
             } else {
-                Rotation rotation = piece.placeSettings().getRotation();
-                EndCityPieces.EndCityPiece endCityPiece = EndCityPieces.addHelper(
-                    pieces, EndCityPieces.addPiece(structureTemplateManager, piece, startPos, "base_floor", rotation, true)
-                );
-                int randomInt = random.nextInt(3);
-                if (randomInt == 0) {
-                    endCityPiece = EndCityPieces.addHelper(
-                        pieces, EndCityPieces.addPiece(structureTemplateManager, endCityPiece, new BlockPos(-1, 4, -1), "base_roof", rotation, true)
-                    );
-                } else if (randomInt == 1) {
-                    endCityPiece = EndCityPieces.addHelper(
-                        pieces, EndCityPieces.addPiece(structureTemplateManager, endCityPiece, new BlockPos(-1, 0, -1), "second_floor_2", rotation, false)
-                    );
-                    endCityPiece = EndCityPieces.addHelper(
-                        pieces, EndCityPieces.addPiece(structureTemplateManager, endCityPiece, new BlockPos(-1, 8, -1), "second_roof", rotation, false)
-                    );
-                    EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.TOWER_GENERATOR, counter + 1, endCityPiece, null, pieces, random);
-                } else if (randomInt == 2) {
-                    endCityPiece = EndCityPieces.addHelper(
-                        pieces, EndCityPieces.addPiece(structureTemplateManager, endCityPiece, new BlockPos(-1, 0, -1), "second_floor_2", rotation, false)
-                    );
-                    endCityPiece = EndCityPieces.addHelper(
-                        pieces, EndCityPieces.addPiece(structureTemplateManager, endCityPiece, new BlockPos(-1, 4, -1), "third_floor_2", rotation, false)
-                    );
-                    endCityPiece = EndCityPieces.addHelper(
-                        pieces, EndCityPieces.addPiece(structureTemplateManager, endCityPiece, new BlockPos(-1, 8, -1), "third_roof", rotation, true)
-                    );
-                    EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.TOWER_GENERATOR, counter + 1, endCityPiece, null, pieces, random);
+                Rotation enumblockrotation = piece.placeSettings().getRotation();
+                EndCityPieces.EndCityPiece endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, piece, startPos, "base_floor", enumblockrotation, true));
+                int j = random.nextInt(3);
+
+                if (j == 0) {
+                    EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 4, -1), "base_roof", enumblockrotation, true));
+                } else if (j == 1) {
+                    endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 0, -1), "second_floor_2", enumblockrotation, false));
+                    endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 8, -1), "second_roof", enumblockrotation, false));
+                    EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.TOWER_GENERATOR, counter + 1, endcitypieces_a1, (BlockPos) null, pieces, random);
+                } else if (j == 2) {
+                    endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 0, -1), "second_floor_2", enumblockrotation, false));
+                    endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 4, -1), "third_floor_2", enumblockrotation, false));
+                    endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 8, -1), "third_roof", enumblockrotation, true));
+                    EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.TOWER_GENERATOR, counter + 1, endcitypieces_a1, (BlockPos) null, pieces, random);
                 }
 
                 return true;
             }
         }
     };
-    static final List<Tuple<Rotation, BlockPos>> TOWER_BRIDGES = Lists.newArrayList(
-        new Tuple<>(Rotation.NONE, new BlockPos(1, -1, 0)),
-        new Tuple<>(Rotation.CLOCKWISE_90, new BlockPos(6, -1, 1)),
-        new Tuple<>(Rotation.COUNTERCLOCKWISE_90, new BlockPos(0, -1, 5)),
-        new Tuple<>(Rotation.CLOCKWISE_180, new BlockPos(5, -1, 6))
-    );
+    static final List<Tuple<Rotation, BlockPos>> TOWER_BRIDGES = Lists.newArrayList(new Tuple[]{new Tuple<>(Rotation.NONE, new BlockPos(1, -1, 0)), new Tuple<>(Rotation.CLOCKWISE_90, new BlockPos(6, -1, 1)), new Tuple<>(Rotation.COUNTERCLOCKWISE_90, new BlockPos(0, -1, 5)), new Tuple<>(Rotation.CLOCKWISE_180, new BlockPos(5, -1, 6))});
     static final EndCityPieces.SectionGenerator TOWER_GENERATOR = new EndCityPieces.SectionGenerator() {
         @Override
-        public void init() {
-        }
+        public void init() {}
 
         @Override
-        public boolean generate(
-            StructureTemplateManager structureTemplateManager,
-            int counter,
-            EndCityPieces.EndCityPiece piece,
-            BlockPos startPos,
-            List<StructurePiece> pieces,
-            RandomSource random
-        ) {
-            Rotation rotation = piece.placeSettings().getRotation();
-            EndCityPieces.EndCityPiece endCityPiece = EndCityPieces.addHelper(
-                pieces,
-                EndCityPieces.addPiece(
-                    structureTemplateManager, piece, new BlockPos(3 + random.nextInt(2), -3, 3 + random.nextInt(2)), "tower_base", rotation, true
-                )
-            );
-            EndCityPieces.EndCityPiece var14 = EndCityPieces.addHelper(
-                pieces, EndCityPieces.addPiece(structureTemplateManager, endCityPiece, new BlockPos(0, 7, 0), "tower_piece", rotation, true)
-            );
-            EndCityPieces.EndCityPiece endCityPiece1 = random.nextInt(3) == 0 ? var14 : null;
-            int i = 1 + random.nextInt(3);
+        public boolean generate(StructureTemplateManager structureTemplateManager, int counter, EndCityPieces.EndCityPiece piece, BlockPos startPos, List<StructurePiece> pieces, RandomSource random) {
+            Rotation enumblockrotation = piece.placeSettings().getRotation();
+            EndCityPieces.EndCityPiece endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, piece, new BlockPos(3 + random.nextInt(2), -3, 3 + random.nextInt(2)), "tower_base", enumblockrotation, true));
 
-            for (int i1 = 0; i1 < i; i1++) {
-                var14 = EndCityPieces.addHelper(
-                    pieces, EndCityPieces.addPiece(structureTemplateManager, var14, new BlockPos(0, 4, 0), "tower_piece", rotation, true)
-                );
-                if (i1 < i - 1 && random.nextBoolean()) {
-                    endCityPiece1 = var14;
+            endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, 7, 0), "tower_piece", enumblockrotation, true));
+            EndCityPieces.EndCityPiece endcitypieces_a2 = random.nextInt(3) == 0 ? endcitypieces_a1 : null;
+            int j = 1 + random.nextInt(3);
+
+            for (int k = 0; k < j; ++k) {
+                endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, 4, 0), "tower_piece", enumblockrotation, true));
+                if (k < j - 1 && random.nextBoolean()) {
+                    endcitypieces_a2 = endcitypieces_a1;
                 }
             }
 
-            if (endCityPiece1 != null) {
-                for (Tuple<Rotation, BlockPos> tuple : EndCityPieces.TOWER_BRIDGES) {
+            if (endcitypieces_a2 != null) {
+                Iterator iterator = EndCityPieces.TOWER_BRIDGES.iterator();
+
+                while (iterator.hasNext()) {
+                    Tuple<Rotation, BlockPos> tuple = (Tuple) iterator.next();
+
                     if (random.nextBoolean()) {
-                        EndCityPieces.EndCityPiece endCityPiece2 = EndCityPieces.addHelper(
-                            pieces,
-                            EndCityPieces.addPiece(structureTemplateManager, endCityPiece1, tuple.getB(), "bridge_end", rotation.getRotated(tuple.getA()), true)
-                        );
-                        EndCityPieces.recursiveChildren(
-                            structureTemplateManager, EndCityPieces.TOWER_BRIDGE_GENERATOR, counter + 1, endCityPiece2, null, pieces, random
-                        );
+                        EndCityPieces.EndCityPiece endcitypieces_a3 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a2, (BlockPos) tuple.getB(), "bridge_end", enumblockrotation.getRotated((Rotation) tuple.getA()), true));
+
+                        EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.TOWER_BRIDGE_GENERATOR, counter + 1, endcitypieces_a3, (BlockPos) null, pieces, random);
                     }
                 }
 
-                endCityPiece = EndCityPieces.addHelper(
-                    pieces, EndCityPieces.addPiece(structureTemplateManager, var14, new BlockPos(-1, 4, -1), "tower_top", rotation, true)
-                );
+                EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 4, -1), "tower_top", enumblockrotation, true));
             } else {
                 if (counter != 7) {
-                    return EndCityPieces.recursiveChildren(
-                        structureTemplateManager, EndCityPieces.FAT_TOWER_GENERATOR, counter + 1, var14, null, pieces, random
-                    );
+                    return EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.FAT_TOWER_GENERATOR, counter + 1, endcitypieces_a1, (BlockPos) null, pieces, random);
                 }
 
-                endCityPiece = EndCityPieces.addHelper(
-                    pieces, EndCityPieces.addPiece(structureTemplateManager, var14, new BlockPos(-1, 4, -1), "tower_top", rotation, true)
-                );
+                EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-1, 4, -1), "tower_top", enumblockrotation, true));
             }
 
             return true;
@@ -162,150 +116,94 @@
         }
 
         @Override
-        public boolean generate(
-            StructureTemplateManager structureTemplateManager,
-            int counter,
-            EndCityPieces.EndCityPiece piece,
-            BlockPos startPos,
-            List<StructurePiece> pieces,
-            RandomSource random
-        ) {
-            Rotation rotation = piece.placeSettings().getRotation();
-            int i = random.nextInt(4) + 1;
-            EndCityPieces.EndCityPiece endCityPiece = EndCityPieces.addHelper(
-                pieces, EndCityPieces.addPiece(structureTemplateManager, piece, new BlockPos(0, 0, -4), "bridge_piece", rotation, true)
-            );
-            endCityPiece.setGenDepth(-1);
-            int i1 = 0;
+        public boolean generate(StructureTemplateManager structureTemplateManager, int counter, EndCityPieces.EndCityPiece piece, BlockPos startPos, List<StructurePiece> pieces, RandomSource random) {
+            Rotation enumblockrotation = piece.placeSettings().getRotation();
+            int j = random.nextInt(4) + 1;
+            EndCityPieces.EndCityPiece endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, piece, new BlockPos(0, 0, -4), "bridge_piece", enumblockrotation, true));
 
-            for (int i2 = 0; i2 < i; i2++) {
+            endcitypieces_a1.setGenDepth(-1);
+            byte b0 = 0;
+
+            for (int k = 0; k < j; ++k) {
                 if (random.nextBoolean()) {
-                    endCityPiece = EndCityPieces.addHelper(
-                        pieces, EndCityPieces.addPiece(structureTemplateManager, endCityPiece, new BlockPos(0, i1, -4), "bridge_piece", rotation, true)
-                    );
-                    i1 = 0;
+                    endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, b0, -4), "bridge_piece", enumblockrotation, true));
+                    b0 = 0;
                 } else {
                     if (random.nextBoolean()) {
-                        endCityPiece = EndCityPieces.addHelper(
-                            pieces,
-                            EndCityPieces.addPiece(structureTemplateManager, endCityPiece, new BlockPos(0, i1, -4), "bridge_steep_stairs", rotation, true)
-                        );
+                        endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, b0, -4), "bridge_steep_stairs", enumblockrotation, true));
                     } else {
-                        endCityPiece = EndCityPieces.addHelper(
-                            pieces,
-                            EndCityPieces.addPiece(structureTemplateManager, endCityPiece, new BlockPos(0, i1, -8), "bridge_gentle_stairs", rotation, true)
-                        );
+                        endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, b0, -8), "bridge_gentle_stairs", enumblockrotation, true));
                     }
 
-                    i1 = 4;
+                    b0 = 4;
                 }
             }
 
             if (!this.shipCreated && random.nextInt(10 - counter) == 0) {
-                EndCityPieces.addHelper(
-                    pieces,
-                    EndCityPieces.addPiece(
-                        structureTemplateManager, endCityPiece, new BlockPos(-8 + random.nextInt(8), i1, -70 + random.nextInt(10)), "ship", rotation, true
-                    )
-                );
+                EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-8 + random.nextInt(8), b0, -70 + random.nextInt(10)), "ship", enumblockrotation, true));
                 this.shipCreated = true;
-            } else if (!EndCityPieces.recursiveChildren(
-                structureTemplateManager, EndCityPieces.HOUSE_TOWER_GENERATOR, counter + 1, endCityPiece, new BlockPos(-3, i1 + 1, -11), pieces, random
-            )) {
+            } else if (!EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.HOUSE_TOWER_GENERATOR, counter + 1, endcitypieces_a1, new BlockPos(-3, b0 + 1, -11), pieces, random)) {
                 return false;
             }
 
-            endCityPiece = EndCityPieces.addHelper(
-                pieces,
-                EndCityPieces.addPiece(
-                    structureTemplateManager, endCityPiece, new BlockPos(4, i1, 0), "bridge_end", rotation.getRotated(Rotation.CLOCKWISE_180), true
-                )
-            );
-            endCityPiece.setGenDepth(-1);
+            endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(4, b0, 0), "bridge_end", enumblockrotation.getRotated(Rotation.CLOCKWISE_180), true));
+            endcitypieces_a1.setGenDepth(-1);
             return true;
         }
     };
-    static final List<Tuple<Rotation, BlockPos>> FAT_TOWER_BRIDGES = Lists.newArrayList(
-        new Tuple<>(Rotation.NONE, new BlockPos(4, -1, 0)),
-        new Tuple<>(Rotation.CLOCKWISE_90, new BlockPos(12, -1, 4)),
-        new Tuple<>(Rotation.COUNTERCLOCKWISE_90, new BlockPos(0, -1, 8)),
-        new Tuple<>(Rotation.CLOCKWISE_180, new BlockPos(8, -1, 12))
-    );
+    static final List<Tuple<Rotation, BlockPos>> FAT_TOWER_BRIDGES = Lists.newArrayList(new Tuple[]{new Tuple<>(Rotation.NONE, new BlockPos(4, -1, 0)), new Tuple<>(Rotation.CLOCKWISE_90, new BlockPos(12, -1, 4)), new Tuple<>(Rotation.COUNTERCLOCKWISE_90, new BlockPos(0, -1, 8)), new Tuple<>(Rotation.CLOCKWISE_180, new BlockPos(8, -1, 12))});
     static final EndCityPieces.SectionGenerator FAT_TOWER_GENERATOR = new EndCityPieces.SectionGenerator() {
         @Override
-        public void init() {
-        }
+        public void init() {}
 
         @Override
-        public boolean generate(
-            StructureTemplateManager structureTemplateManager,
-            int counter,
-            EndCityPieces.EndCityPiece piece,
-            BlockPos startPos,
-            List<StructurePiece> pieces,
-            RandomSource random
-        ) {
-            Rotation rotation = piece.placeSettings().getRotation();
-            EndCityPieces.EndCityPiece endCityPiece = EndCityPieces.addHelper(
-                pieces, EndCityPieces.addPiece(structureTemplateManager, piece, new BlockPos(-3, 4, -3), "fat_tower_base", rotation, true)
-            );
-            EndCityPieces.EndCityPiece var13 = EndCityPieces.addHelper(
-                pieces, EndCityPieces.addPiece(structureTemplateManager, endCityPiece, new BlockPos(0, 4, 0), "fat_tower_middle", rotation, true)
-            );
+        public boolean generate(StructureTemplateManager structureTemplateManager, int counter, EndCityPieces.EndCityPiece piece, BlockPos startPos, List<StructurePiece> pieces, RandomSource random) {
+            Rotation enumblockrotation = piece.placeSettings().getRotation();
+            EndCityPieces.EndCityPiece endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, piece, new BlockPos(-3, 4, -3), "fat_tower_base", enumblockrotation, true));
 
-            for (int i = 0; i < 2 && random.nextInt(3) != 0; i++) {
-                var13 = EndCityPieces.addHelper(
-                    pieces, EndCityPieces.addPiece(structureTemplateManager, var13, new BlockPos(0, 8, 0), "fat_tower_middle", rotation, true)
-                );
+            endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, 4, 0), "fat_tower_middle", enumblockrotation, true));
 
-                for (Tuple<Rotation, BlockPos> tuple : EndCityPieces.FAT_TOWER_BRIDGES) {
+            for (int j = 0; j < 2 && random.nextInt(3) != 0; ++j) {
+                endcitypieces_a1 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(0, 8, 0), "fat_tower_middle", enumblockrotation, true));
+                Iterator iterator = EndCityPieces.FAT_TOWER_BRIDGES.iterator();
+
+                while (iterator.hasNext()) {
+                    Tuple<Rotation, BlockPos> tuple = (Tuple) iterator.next();
+
                     if (random.nextBoolean()) {
-                        EndCityPieces.EndCityPiece endCityPiece1 = EndCityPieces.addHelper(
-                            pieces,
-                            EndCityPieces.addPiece(structureTemplateManager, var13, tuple.getB(), "bridge_end", rotation.getRotated(tuple.getA()), true)
-                        );
-                        EndCityPieces.recursiveChildren(
-                            structureTemplateManager, EndCityPieces.TOWER_BRIDGE_GENERATOR, counter + 1, endCityPiece1, null, pieces, random
-                        );
+                        EndCityPieces.EndCityPiece endcitypieces_a2 = EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, (BlockPos) tuple.getB(), "bridge_end", enumblockrotation.getRotated((Rotation) tuple.getA()), true));
+
+                        EndCityPieces.recursiveChildren(structureTemplateManager, EndCityPieces.TOWER_BRIDGE_GENERATOR, counter + 1, endcitypieces_a2, (BlockPos) null, pieces, random);
                     }
                 }
             }
 
-            endCityPiece = EndCityPieces.addHelper(
-                pieces, EndCityPieces.addPiece(structureTemplateManager, var13, new BlockPos(-2, 8, -2), "fat_tower_top", rotation, true)
-            );
+            EndCityPieces.addHelper(pieces, EndCityPieces.addPiece(structureTemplateManager, endcitypieces_a1, new BlockPos(-2, 8, -2), "fat_tower_top", enumblockrotation, true));
             return true;
         }
     };
 
-    static EndCityPieces.EndCityPiece addPiece(
-        StructureTemplateManager structureTemplateManager,
-        EndCityPieces.EndCityPiece piece,
-        BlockPos startPos,
-        String name,
-        Rotation rotation,
-        boolean overwrite
-    ) {
-        EndCityPieces.EndCityPiece endCityPiece = new EndCityPieces.EndCityPiece(structureTemplateManager, name, piece.templatePosition(), rotation, overwrite);
-        BlockPos blockPos = piece.template().calculateConnectedPosition(piece.placeSettings(), startPos, endCityPiece.placeSettings(), BlockPos.ZERO);
-        endCityPiece.move(blockPos.getX(), blockPos.getY(), blockPos.getZ());
-        return endCityPiece;
+    public EndCityPieces() {}
+
+    static EndCityPieces.EndCityPiece addPiece(StructureTemplateManager structureTemplateManager, EndCityPieces.EndCityPiece piece, BlockPos startPos, String name, Rotation rotation, boolean overwrite) {
+        EndCityPieces.EndCityPiece endcitypieces_a1 = new EndCityPieces.EndCityPiece(structureTemplateManager, name, piece.templatePosition(), rotation, overwrite);
+        BlockPos blockposition1 = piece.template().calculateConnectedPosition(piece.placeSettings(), startPos, endcitypieces_a1.placeSettings(), BlockPos.ZERO);
+
+        endcitypieces_a1.move(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
+        return endcitypieces_a1;
     }
 
-    public static void startHouseTower(
-        StructureTemplateManager structureTemplateManager, BlockPos startPos, Rotation rotation, List<StructurePiece> pieces, RandomSource random
-    ) {
-        FAT_TOWER_GENERATOR.init();
-        HOUSE_TOWER_GENERATOR.init();
-        TOWER_BRIDGE_GENERATOR.init();
-        TOWER_GENERATOR.init();
-        EndCityPieces.EndCityPiece endCityPiece = addHelper(
-            pieces, new EndCityPieces.EndCityPiece(structureTemplateManager, "base_floor", startPos, rotation, true)
-        );
-        endCityPiece = addHelper(pieces, addPiece(structureTemplateManager, endCityPiece, new BlockPos(-1, 0, -1), "second_floor_1", rotation, false));
-        endCityPiece = addHelper(pieces, addPiece(structureTemplateManager, endCityPiece, new BlockPos(-1, 4, -1), "third_floor_1", rotation, false));
-        endCityPiece = addHelper(pieces, addPiece(structureTemplateManager, endCityPiece, new BlockPos(-1, 8, -1), "third_roof", rotation, true));
-        recursiveChildren(structureTemplateManager, TOWER_GENERATOR, 1, endCityPiece, null, pieces, random);
+    public static void startHouseTower(StructureTemplateManager structureTemplateManager, BlockPos startPos, Rotation rotation, List<StructurePiece> pieces, RandomSource random) {
+        EndCityPieces.FAT_TOWER_GENERATOR.init();
+        EndCityPieces.HOUSE_TOWER_GENERATOR.init();
+        EndCityPieces.TOWER_BRIDGE_GENERATOR.init();
+        EndCityPieces.TOWER_GENERATOR.init();
+        EndCityPieces.EndCityPiece endcitypieces_a = addHelper(pieces, new EndCityPieces.EndCityPiece(structureTemplateManager, "base_floor", startPos, rotation, true));
+
+        endcitypieces_a = addHelper(pieces, addPiece(structureTemplateManager, endcitypieces_a, new BlockPos(-1, 0, -1), "second_floor_1", rotation, false));
+        endcitypieces_a = addHelper(pieces, addPiece(structureTemplateManager, endcitypieces_a, new BlockPos(-1, 4, -1), "third_floor_1", rotation, false));
+        endcitypieces_a = addHelper(pieces, addPiece(structureTemplateManager, endcitypieces_a, new BlockPos(-1, 8, -1), "third_roof", rotation, true));
+        recursiveChildren(structureTemplateManager, EndCityPieces.TOWER_GENERATOR, 1, endcitypieces_a, (BlockPos) null, pieces, random);
     }
 
     static EndCityPieces.EndCityPiece addHelper(List<StructurePiece> pieces, EndCityPieces.EndCityPiece piece) {
@@ -313,34 +211,31 @@
         return piece;
     }
 
-    static boolean recursiveChildren(
-        StructureTemplateManager structureTemplateManager,
-        EndCityPieces.SectionGenerator sectionGenerator,
-        int counter,
-        EndCityPieces.EndCityPiece piece,
-        BlockPos startPos,
-        List<StructurePiece> pieces,
-        RandomSource random
-    ) {
+    static boolean recursiveChildren(StructureTemplateManager structureTemplateManager, EndCityPieces.SectionGenerator sectionGenerator, int counter, EndCityPieces.EndCityPiece piece, BlockPos startPos, List<StructurePiece> pieces, RandomSource random) {
         if (counter > 8) {
             return false;
         } else {
-            List<StructurePiece> list = Lists.newArrayList();
-            if (sectionGenerator.generate(structureTemplateManager, counter, piece, startPos, list, random)) {
+            List<StructurePiece> list1 = Lists.newArrayList();
+
+            if (sectionGenerator.generate(structureTemplateManager, counter, piece, startPos, list1, random)) {
                 boolean flag = false;
-                int randomInt = random.nextInt();
+                int j = random.nextInt();
+                Iterator iterator = list1.iterator();
 
-                for (StructurePiece structurePiece : list) {
-                    structurePiece.setGenDepth(randomInt);
-                    StructurePiece structurePiece1 = StructurePiece.findCollisionPiece(pieces, structurePiece.getBoundingBox());
-                    if (structurePiece1 != null && structurePiece1.getGenDepth() != piece.getGenDepth()) {
+                while (iterator.hasNext()) {
+                    StructurePiece structurepiece = (StructurePiece) iterator.next();
+
+                    structurepiece.setGenDepth(j);
+                    StructurePiece structurepiece1 = StructurePiece.findCollisionPiece(pieces, structurepiece.getBoundingBox());
+
+                    if (structurepiece1 != null && structurepiece1.getGenDepth() != piece.getGenDepth()) {
                         flag = true;
                         break;
                     }
                 }
 
                 if (!flag) {
-                    pieces.addAll(list);
+                    pieces.addAll(list1);
                     return true;
                 }
             }
@@ -350,22 +245,21 @@
     }
 
     public static class EndCityPiece extends TemplateStructurePiece {
+
         public EndCityPiece(StructureTemplateManager structureTemplateManager, String name, BlockPos startPos, Rotation rotation, boolean overwrite) {
             super(StructurePieceType.END_CITY_PIECE, 0, structureTemplateManager, makeResourceLocation(name), name, makeSettings(overwrite, rotation), startPos);
         }
 
         public EndCityPiece(StructureTemplateManager structureTemplateManager, CompoundTag tag) {
-            super(
-                StructurePieceType.END_CITY_PIECE,
-                tag,
-                structureTemplateManager,
-                resourceLocation -> makeSettings(tag.getBoolean("OW"), Rotation.valueOf(tag.getString("Rot")))
-            );
+            super(StructurePieceType.END_CITY_PIECE, tag, structureTemplateManager, (minecraftkey) -> {
+                return makeSettings(tag.getBoolean("OW"), Rotation.valueOf(tag.getString("Rot")));
+            });
         }
 
         private static StructurePlaceSettings makeSettings(boolean overwrite, Rotation rotation) {
-            BlockIgnoreProcessor blockIgnoreProcessor = overwrite ? BlockIgnoreProcessor.STRUCTURE_BLOCK : BlockIgnoreProcessor.STRUCTURE_AND_AIR;
-            return new StructurePlaceSettings().setIgnoreEntities(true).addProcessor(blockIgnoreProcessor).setRotation(rotation);
+            BlockIgnoreProcessor definedstructureprocessorblockignore = overwrite ? BlockIgnoreProcessor.STRUCTURE_BLOCK : BlockIgnoreProcessor.STRUCTURE_AND_AIR;
+
+            return (new StructurePlaceSettings()).setIgnoreEntities(true).addProcessor(definedstructureprocessorblockignore).setRotation(rotation);
         }
 
         @Override
@@ -387,36 +281,39 @@
         @Override
         protected void handleDataMarker(String name, BlockPos pos, ServerLevelAccessor level, RandomSource random, BoundingBox box) {
             if (name.startsWith("Chest")) {
-                BlockPos blockPos = pos.below();
-                if (box.isInside(blockPos)) {
-                    RandomizableContainer.setBlockEntityLootTable(level, random, blockPos, BuiltInLootTables.END_CITY_TREASURE);
+                BlockPos blockposition1 = pos.below();
+
+                if (box.isInside(blockposition1)) {
+                    // CraftBukkit start - ensure block transformation
+                    /*
+                    RandomizableContainer.setBlockEntityLootTable(worldaccess, randomsource, blockposition1, LootTables.END_CITY_TREASURE);
+                    */
+                    setCraftLootTable(level, blockposition1, random, BuiltInLootTables.END_CITY_TREASURE);
+                    // CraftBukkit end
                 }
             } else if (box.isInside(pos) && Level.isInSpawnableBounds(pos)) {
                 if (name.startsWith("Sentry")) {
-                    Shulker shulker = EntityType.SHULKER.create(level.getLevel());
-                    if (shulker != null) {
-                        shulker.setPos((double)pos.getX() + 0.5, (double)pos.getY(), (double)pos.getZ() + 0.5);
-                        level.addFreshEntity(shulker);
+                    Shulker entityshulker = (Shulker) EntityType.SHULKER.create(level.getLevel());
+
+                    if (entityshulker != null) {
+                        entityshulker.setPos((double) pos.getX() + 0.5D, (double) pos.getY(), (double) pos.getZ() + 0.5D);
+                        level.addFreshEntity(entityshulker);
                     }
                 } else if (name.startsWith("Elytra")) {
-                    ItemFrame itemFrame = new ItemFrame(level.getLevel(), pos, this.placeSettings.getRotation().rotate(Direction.SOUTH));
-                    itemFrame.setItem(new ItemStack(Items.ELYTRA), false);
-                    level.addFreshEntity(itemFrame);
+                    ItemFrame entityitemframe = new ItemFrame(level.getLevel(), pos, this.placeSettings.getRotation().rotate(Direction.SOUTH));
+
+                    entityitemframe.setItem(new ItemStack(Items.ELYTRA), false);
+                    level.addFreshEntity(entityitemframe);
                 }
             }
+
         }
     }
 
-    interface SectionGenerator {
+    private interface SectionGenerator {
+
         void init();
 
-        boolean generate(
-            StructureTemplateManager structureTemplateManager,
-            int counter,
-            EndCityPieces.EndCityPiece piece,
-            BlockPos startPos,
-            List<StructurePiece> pieces,
-            RandomSource random
-        );
+        boolean generate(StructureTemplateManager structureTemplateManager, int counter, EndCityPieces.EndCityPiece piece, BlockPos startPos, List<StructurePiece> pieces, RandomSource random);
     }
 }
