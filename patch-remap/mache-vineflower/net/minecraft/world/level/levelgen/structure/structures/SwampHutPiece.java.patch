--- a/net/minecraft/world/level/levelgen/structure/structures/SwampHutPiece.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/SwampHutPiece.java
@@ -5,7 +5,8 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.MobSpawnType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.animal.Cat;
 import net.minecraft.world.entity.monster.Witch;
 import net.minecraft.world.level.ChunkPos;
@@ -14,7 +15,7 @@
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.StairBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.properties.StairsShape;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
@@ -23,6 +24,7 @@
 import net.minecraft.world.level.levelgen.structure.pieces.StructurePieceType;
 
 public class SwampHutPiece extends ScatteredFeaturePiece {
+
     private boolean spawnedWitch;
     private boolean spawnedCat;
 
@@ -44,9 +46,7 @@
     }
 
     @Override
-    public void postProcess(
-        WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos
-    ) {
+    public void postProcess(WorldGenLevel level, StructureManager structureManager, ChunkGenerator generator, RandomSource random, BoundingBox box, ChunkPos chunkPos, BlockPos pos) {
         if (this.updateAverageGroundHeight(level, box, 0)) {
             this.generateBox(level, box, 1, 1, 1, 5, 1, 7, Blocks.SPRUCE_PLANKS.defaultBlockState(), Blocks.SPRUCE_PLANKS.defaultBlockState(), false);
             this.generateBox(level, box, 1, 4, 2, 5, 4, 7, Blocks.SPRUCE_PLANKS.defaultBlockState(), Blocks.SPRUCE_PLANKS.defaultBlockState(), false);
@@ -69,35 +69,38 @@
             this.placeBlock(level, Blocks.CAULDRON.defaultBlockState(), 4, 2, 6, box);
             this.placeBlock(level, Blocks.OAK_FENCE.defaultBlockState(), 1, 2, 1, box);
             this.placeBlock(level, Blocks.OAK_FENCE.defaultBlockState(), 5, 2, 1, box);
-            BlockState blockState = Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.NORTH);
-            BlockState blockState1 = Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.EAST);
-            BlockState blockState2 = Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.WEST);
-            BlockState blockState3 = Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.SOUTH);
-            this.generateBox(level, box, 0, 4, 1, 6, 4, 1, blockState, blockState, false);
-            this.generateBox(level, box, 0, 4, 2, 0, 4, 7, blockState1, blockState1, false);
-            this.generateBox(level, box, 6, 4, 2, 6, 4, 7, blockState2, blockState2, false);
-            this.generateBox(level, box, 0, 4, 8, 6, 4, 8, blockState3, blockState3, false);
-            this.placeBlock(level, blockState.setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT), 0, 4, 1, box);
-            this.placeBlock(level, blockState.setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT), 6, 4, 1, box);
-            this.placeBlock(level, blockState3.setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT), 0, 4, 8, box);
-            this.placeBlock(level, blockState3.setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT), 6, 4, 8, box);
+            IBlockData iblockdata = (IBlockData) Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.NORTH);
+            IBlockData iblockdata1 = (IBlockData) Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.EAST);
+            IBlockData iblockdata2 = (IBlockData) Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.WEST);
+            IBlockData iblockdata3 = (IBlockData) Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.SOUTH);
 
+            this.generateBox(level, box, 0, 4, 1, 6, 4, 1, iblockdata, iblockdata, false);
+            this.generateBox(level, box, 0, 4, 2, 0, 4, 7, iblockdata1, iblockdata1, false);
+            this.generateBox(level, box, 6, 4, 2, 6, 4, 7, iblockdata2, iblockdata2, false);
+            this.generateBox(level, box, 0, 4, 8, 6, 4, 8, iblockdata3, iblockdata3, false);
+            this.placeBlock(level, (IBlockData) iblockdata.setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT), 0, 4, 1, box);
+            this.placeBlock(level, (IBlockData) iblockdata.setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT), 6, 4, 1, box);
+            this.placeBlock(level, (IBlockData) iblockdata3.setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT), 0, 4, 8, box);
+            this.placeBlock(level, (IBlockData) iblockdata3.setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT), 6, 4, 8, box);
+
             for (int i = 2; i <= 7; i += 5) {
-                for (int i1 = 1; i1 <= 5; i1 += 4) {
-                    this.fillColumnDown(level, Blocks.OAK_LOG.defaultBlockState(), i1, -1, i, box);
+                for (int j = 1; j <= 5; j += 4) {
+                    this.fillColumnDown(level, Blocks.OAK_LOG.defaultBlockState(), j, -1, i, box);
                 }
             }
 
             if (!this.spawnedWitch) {
-                BlockPos worldPos = this.getWorldPos(2, 2, 5);
-                if (box.isInside(worldPos)) {
+                BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(2, 2, 5);
+
+                if (box.isInside(blockposition_mutableblockposition)) {
                     this.spawnedWitch = true;
-                    Witch witch = EntityType.WITCH.create(level.getLevel());
-                    if (witch != null) {
-                        witch.setPersistenceRequired();
-                        witch.moveTo((double)worldPos.getX() + 0.5, (double)worldPos.getY(), (double)worldPos.getZ() + 0.5, 0.0F, 0.0F);
-                        witch.finalizeSpawn(level, level.getCurrentDifficultyAt(worldPos), MobSpawnType.STRUCTURE, null, null);
-                        level.addFreshEntityWithPassengers(witch);
+                    Witch entitywitch = (Witch) EntityType.WITCH.create(level.getLevel());
+
+                    if (entitywitch != null) {
+                        entitywitch.setPersistenceRequired();
+                        entitywitch.moveTo((double) blockposition_mutableblockposition.getX() + 0.5D, (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + 0.5D, 0.0F, 0.0F);
+                        entitywitch.finalizeSpawn(level, level.getCurrentDifficultyAt(blockposition_mutableblockposition), EnumMobSpawn.STRUCTURE, (GroupDataEntity) null, (CompoundTag) null);
+                        level.addFreshEntityWithPassengers(entitywitch, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
                     }
                 }
             }
@@ -108,17 +111,20 @@
 
     private void spawnCat(ServerLevelAccessor level, BoundingBox box) {
         if (!this.spawnedCat) {
-            BlockPos worldPos = this.getWorldPos(2, 2, 5);
-            if (box.isInside(worldPos)) {
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = this.getWorldPos(2, 2, 5);
+
+            if (box.isInside(blockposition_mutableblockposition)) {
                 this.spawnedCat = true;
-                Cat cat = EntityType.CAT.create(level.getLevel());
-                if (cat != null) {
-                    cat.setPersistenceRequired();
-                    cat.moveTo((double)worldPos.getX() + 0.5, (double)worldPos.getY(), (double)worldPos.getZ() + 0.5, 0.0F, 0.0F);
-                    cat.finalizeSpawn(level, level.getCurrentDifficultyAt(worldPos), MobSpawnType.STRUCTURE, null, null);
-                    level.addFreshEntityWithPassengers(cat);
+                Cat entitycat = (Cat) EntityType.CAT.create(level.getLevel());
+
+                if (entitycat != null) {
+                    entitycat.setPersistenceRequired();
+                    entitycat.moveTo((double) blockposition_mutableblockposition.getX() + 0.5D, (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + 0.5D, 0.0F, 0.0F);
+                    entitycat.finalizeSpawn(level, level.getCurrentDifficultyAt(blockposition_mutableblockposition), EnumMobSpawn.STRUCTURE, (GroupDataEntity) null, (CompoundTag) null);
+                    level.addFreshEntityWithPassengers(entitycat, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
                 }
             }
         }
+
     }
 }
