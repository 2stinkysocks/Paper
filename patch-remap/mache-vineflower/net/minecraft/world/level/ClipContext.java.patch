--- a/net/minecraft/world/level/ClipContext.java
+++ b/net/minecraft/world/level/ClipContext.java
@@ -6,7 +6,7 @@
 import net.minecraft.tags.FluidTags;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.CollisionContext;
@@ -14,6 +14,7 @@
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class ClipContext {
+
     private final Vec3 from;
     private final Vec3 to;
     private final ClipContext.Block block;
@@ -21,15 +22,15 @@
     private final CollisionContext collisionContext;
 
     public ClipContext(Vec3 from, Vec3 to, ClipContext.Block block, ClipContext.Fluid fluid, Entity entity) {
-        this(from, to, block, fluid, CollisionContext.of(entity));
+        this(from, to, block, fluid, (entity == null) ? CollisionContext.empty() : CollisionContext.of(entity)); // CraftBukkit
     }
 
-    public ClipContext(Vec3 vec3, Vec3 vec31, ClipContext.Block block, ClipContext.Fluid fluid, CollisionContext collisionContext) {
-        this.from = vec3;
-        this.to = vec31;
-        this.block = block;
-        this.fluid = fluid;
-        this.collisionContext = collisionContext;
+    public ClipContext(Vec3 vec3d, Vec3 vec3d1, ClipContext.Block raytrace_blockcollisionoption, ClipContext.Fluid raytrace_fluidcollisionoption, CollisionContext voxelshapecollision) {
+        this.from = vec3d;
+        this.to = vec3d1;
+        this.block = raytrace_blockcollisionoption;
+        this.fluid = raytrace_fluidcollisionoption;
+        this.collisionContext = voxelshapecollision;
     }
 
     public Vec3 getTo() {
@@ -40,7 +41,7 @@
         return this.from;
     }
 
-    public VoxelShape getBlockShape(BlockState blockState, BlockGetter level, BlockPos pos) {
+    public VoxelShape getBlockShape(IBlockData blockState, BlockGetter level, BlockPos pos) {
         return this.block.get(blockState, level, pos, this.collisionContext);
     }
 
@@ -49,33 +50,37 @@
     }
 
     public static enum Block implements ClipContext.ShapeGetter {
-        COLLIDER(BlockBehaviour.BlockStateBase::getCollisionShape),
-        OUTLINE(BlockBehaviour.BlockStateBase::getShape),
-        VISUAL(BlockBehaviour.BlockStateBase::getVisualShape),
-        FALLDAMAGE_RESETTING((state, block, pos, collisionContext) -> state.is(BlockTags.FALL_DAMAGE_RESETTING) ? Shapes.block() : Shapes.empty());
 
+        COLLIDER(BlockBehaviour.BlockStateBase::getCollisionShape), OUTLINE(BlockBehaviour.BlockStateBase::getShape), VISUAL(BlockBehaviour.BlockStateBase::getVisualShape), FALLDAMAGE_RESETTING((iblockdata, iblockaccess, blockposition, voxelshapecollision) -> {
+            return iblockdata.is(BlockTags.FALL_DAMAGE_RESETTING) ? Shapes.block() : Shapes.empty();
+        });
+
         private final ClipContext.ShapeGetter shapeGetter;
 
-        private Block(ClipContext.ShapeGetter shapeGetter) {
-            this.shapeGetter = shapeGetter;
+        private Block(ClipContext.ShapeGetter raytrace_c) {
+            this.shapeGetter = raytrace_c;
         }
 
         @Override
-        public VoxelShape get(BlockState state, BlockGetter block, BlockPos pos, CollisionContext collisionContext) {
+        public VoxelShape get(IBlockData state, BlockGetter block, BlockPos pos, CollisionContext collisionContext) {
             return this.shapeGetter.get(state, block, pos, collisionContext);
         }
     }
 
     public static enum Fluid {
-        NONE(fluid -> false),
-        SOURCE_ONLY(FluidState::isSource),
-        ANY(fluid -> !fluid.isEmpty()),
-        WATER(fluid -> fluid.is(FluidTags.WATER));
 
+        NONE((fluid) -> {
+            return false;
+        }), SOURCE_ONLY(FluidState::isSource), ANY((fluid) -> {
+            return !fluid.isEmpty();
+        }), WATER((fluid) -> {
+            return fluid.is(FluidTags.WATER);
+        });
+
         private final Predicate<FluidState> canPick;
 
-        private Fluid(Predicate<FluidState> canPick) {
-            this.canPick = canPick;
+        private Fluid(Predicate<FluidState> predicate) { // CraftBukkit - decompile error
+            this.canPick = predicate;
         }
 
         public boolean canPick(FluidState state) {
@@ -84,6 +89,7 @@
     }
 
     public interface ShapeGetter {
-        VoxelShape get(BlockState state, BlockGetter block, BlockPos pos, CollisionContext collisionContext);
+
+        VoxelShape get(IBlockData state, BlockGetter block, BlockPos pos, CollisionContext collisionContext);
     }
 }
