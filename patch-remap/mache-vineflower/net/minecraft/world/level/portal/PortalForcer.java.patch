--- a/net/minecraft/world/level/portal/PortalForcer.java
+++ b/net/minecraft/world/level/portal/PortalForcer.java
@@ -1,11 +1,11 @@
 package net.minecraft.world.level.portal;
 
 import java.util.Comparator;
+import java.util.Iterator;
 import java.util.Optional;
 import net.minecraft.BlockUtil;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.Holder;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.TicketType;
 import net.minecraft.util.Mth;
@@ -15,12 +15,13 @@
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.NetherPortalBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.levelgen.Heightmap;
 
 public class PortalForcer {
+
     private static final int TICKET_RADIUS = 3;
     private static final int SEARCH_RADIUS = 128;
     private static final int CREATE_RADIUS = 16;
@@ -41,74 +42,93 @@
     }
 
     public Optional<BlockUtil.FoundRectangle> findPortalAround(BlockPos pos, boolean isNether, WorldBorder worldBorder) {
-        PoiManager poiManager = this.level.getPoiManager();
-        int i = isNether ? 16 : 128;
-        poiManager.ensureLoadedAndValid(this.level, pos, i);
-        Optional<PoiRecord> optional = poiManager.getInSquare(poiType -> poiType.is(PoiTypes.NETHER_PORTAL), pos, i, PoiManager.Occupancy.ANY)
-            .filter(poiRecord -> worldBorder.isWithinBounds(poiRecord.getPos()))
-            .sorted(
-                Comparator.<PoiRecord>comparingDouble(poiRecord -> poiRecord.getPos().distSqr(pos)).thenComparingInt(poiRecord -> poiRecord.getPos().getY())
-            )
-            .filter(poiRecord -> this.level.getBlockState(poiRecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS))
-            .findFirst();
-        return optional.map(
-            poiRecord -> {
-                BlockPos pos1 = poiRecord.getPos();
-                this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(pos1), 3, pos1);
-                BlockState blockState = this.level.getBlockState(pos1);
-                return BlockUtil.getLargestRectangleAround(
-                    pos1,
-                    blockState.getValue(BlockStateProperties.HORIZONTAL_AXIS),
-                    21,
-                    Direction.Axis.Y,
-                    21,
-                    possibleBlockPos -> this.level.getBlockState(possibleBlockPos) == blockState
-                );
-            }
-        );
+        // CraftBukkit start
+        return findPortalAround(pos, worldBorder, isNether ? 16 : 128); // Search Radius
     }
 
+    public Optional<BlockUtil.FoundRectangle> findPortalAround(BlockPos blockposition, WorldBorder worldborder, int i) {
+        PoiManager villageplace = this.level.getPoiManager();
+        // int i = flag ? 16 : 128;
+        // CraftBukkit end
+
+        villageplace.ensureLoadedAndValid(this.level, blockposition, i);
+        Optional<PoiRecord> optional = villageplace.getInSquare((holder) -> {
+            return holder.is(PoiTypes.NETHER_PORTAL);
+        }, blockposition, i, PoiManager.Occupancy.ANY).filter((villageplacerecord) -> {
+            return worldborder.isWithinBounds(villageplacerecord.getPos());
+        }).sorted(Comparator.comparingDouble((PoiRecord villageplacerecord) -> { // CraftBukkit - decompile error
+            return villageplacerecord.getPos().distSqr(blockposition);
+        }).thenComparingInt((villageplacerecord) -> {
+            return villageplacerecord.getPos().getY();
+        })).filter((villageplacerecord) -> {
+            return this.level.getBlockState(villageplacerecord.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS);
+        }).findFirst();
+
+        return optional.map((villageplacerecord) -> {
+            BlockPos blockposition1 = villageplacerecord.getPos();
+
+            this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockposition1), 3, blockposition1);
+            IBlockData iblockdata = this.level.getBlockState(blockposition1);
+
+            return BlockUtil.getLargestRectangleAround(blockposition1, (Direction.Axis) iblockdata.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockposition2) -> {
+                return this.level.getBlockState(blockposition2) == iblockdata;
+            });
+        });
+    }
+
     public Optional<BlockUtil.FoundRectangle> createPortal(BlockPos pos, Direction.Axis axis) {
-        Direction direction = Direction.get(Direction.AxisDirection.POSITIVE, axis);
-        double d = -1.0;
-        BlockPos blockPos = null;
-        double d1 = -1.0;
-        BlockPos blockPos1 = null;
-        WorldBorder worldBorder = this.level.getWorldBorder();
+        // CraftBukkit start
+        return this.createPortal(pos, axis, null, 16);
+    }
+
+    public Optional<BlockUtil.FoundRectangle> createPortal(BlockPos blockposition, Direction.Axis enumdirection_enumaxis, net.minecraft.world.entity.Entity entity, int createRadius) {
+        // CraftBukkit end
+        Direction enumdirection = Direction.get(Direction.AxisDirection.POSITIVE, enumdirection_enumaxis);
+        double d0 = -1.0D;
+        BlockPos blockposition1 = null;
+        double d1 = -1.0D;
+        BlockPos blockposition2 = null;
+        WorldBorder worldborder = this.level.getWorldBorder();
         int i = Math.min(this.level.getMaxBuildHeight(), this.level.getMinBuildHeight() + this.level.getLogicalHeight()) - 1;
-        BlockPos.MutableBlockPos mutableBlockPos = pos.mutable();
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = blockposition.mutable();
+        Iterator iterator = BlockPos.spiralAround(blockposition, createRadius, Direction.EAST, Direction.SOUTH).iterator(); // CraftBukkit
 
-        for (BlockPos.MutableBlockPos mutableBlockPos1 : BlockPos.spiralAround(pos, 16, Direction.EAST, Direction.SOUTH)) {
-            int min = Math.min(i, this.level.getHeight(Heightmap.Types.MOTION_BLOCKING, mutableBlockPos1.getX(), mutableBlockPos1.getZ()));
-            int i1 = 1;
-            if (worldBorder.isWithinBounds(mutableBlockPos1) && worldBorder.isWithinBounds(mutableBlockPos1.move(direction, 1))) {
-                mutableBlockPos1.move(direction.getOpposite(), 1);
+        int j;
+        int k;
+        int l;
 
-                for (int i2 = min; i2 >= this.level.getMinBuildHeight(); i2--) {
-                    mutableBlockPos1.setY(i2);
-                    if (this.canPortalReplaceBlock(mutableBlockPos1)) {
-                        int i3 = i2;
+        while (iterator.hasNext()) {
+            BlockPos.MutableBlockPos blockposition_mutableblockposition1 = (BlockPos.MutableBlockPos) iterator.next();
 
-                        while (i2 > this.level.getMinBuildHeight() && this.canPortalReplaceBlock(mutableBlockPos1.move(Direction.DOWN))) {
-                            i2--;
+            j = Math.min(i, this.level.getHeight(Heightmap.Types.MOTION_BLOCKING, blockposition_mutableblockposition1.getX(), blockposition_mutableblockposition1.getZ()));
+            boolean flag = true;
+
+            if (worldborder.isWithinBounds((BlockPos) blockposition_mutableblockposition1) && worldborder.isWithinBounds((BlockPos) blockposition_mutableblockposition1.move(enumdirection, 1))) {
+                blockposition_mutableblockposition1.move(enumdirection.getOpposite(), 1);
+
+                for (k = j; k >= this.level.getMinBuildHeight(); --k) {
+                    blockposition_mutableblockposition1.setY(k);
+                    if (this.canPortalReplaceBlock(blockposition_mutableblockposition1)) {
+                        for (l = k; k > this.level.getMinBuildHeight() && this.canPortalReplaceBlock(blockposition_mutableblockposition1.move(Direction.DOWN)); --k) {
+                            ;
                         }
 
-                        if (i2 + 4 <= i) {
-                            int i4 = i3 - i2;
-                            if (i4 <= 0 || i4 >= 3) {
-                                mutableBlockPos1.setY(i2);
-                                if (this.canHostFrame(mutableBlockPos1, mutableBlockPos, direction, 0)) {
-                                    double d2 = pos.distSqr(mutableBlockPos1);
-                                    if (this.canHostFrame(mutableBlockPos1, mutableBlockPos, direction, -1)
-                                        && this.canHostFrame(mutableBlockPos1, mutableBlockPos, direction, 1)
-                                        && (d == -1.0 || d > d2)) {
-                                        d = d2;
-                                        blockPos = mutableBlockPos1.immutable();
+                        if (k + 4 <= i) {
+                            int i1 = l - k;
+
+                            if (i1 <= 0 || i1 >= 3) {
+                                blockposition_mutableblockposition1.setY(k);
+                                if (this.canHostFrame(blockposition_mutableblockposition1, blockposition_mutableblockposition, enumdirection, 0)) {
+                                    double d2 = blockposition.distSqr(blockposition_mutableblockposition1);
+
+                                    if (this.canHostFrame(blockposition_mutableblockposition1, blockposition_mutableblockposition, enumdirection, -1) && this.canHostFrame(blockposition_mutableblockposition1, blockposition_mutableblockposition, enumdirection, 1) && (d0 == -1.0D || d0 > d2)) {
+                                        d0 = d2;
+                                        blockposition1 = blockposition_mutableblockposition1.immutable();
                                     }
 
-                                    if (d == -1.0 && (d1 == -1.0 || d1 > d2)) {
+                                    if (d0 == -1.0D && (d1 == -1.0D || d1 > d2)) {
                                         d1 = d2;
-                                        blockPos1 = mutableBlockPos1.immutable();
+                                        blockposition2 = blockposition_mutableblockposition1.immutable();
                                     }
                                 }
                             }
@@ -118,79 +138,89 @@
             }
         }
 
-        if (d == -1.0 && d1 != -1.0) {
-            blockPos = blockPos1;
-            d = d1;
+        if (d0 == -1.0D && d1 != -1.0D) {
+            blockposition1 = blockposition2;
+            d0 = d1;
         }
 
-        if (d == -1.0) {
-            int max = Math.max(this.level.getMinBuildHeight() - -1, 70);
-            int i5 = i - 9;
-            if (i5 < max) {
+        int j1;
+        int k1;
+
+        org.bukkit.craftbukkit.util.BlockStateListPopulator blockList = new org.bukkit.craftbukkit.util.BlockStateListPopulator(this.level); // CraftBukkit - Use BlockStateListPopulator
+        if (d0 == -1.0D) {
+            j1 = Math.max(this.level.getMinBuildHeight() - -1, 70);
+            k1 = i - 9;
+            if (k1 < j1) {
                 return Optional.empty();
             }
 
-            blockPos = new BlockPos(pos.getX(), Mth.clamp(pos.getY(), max, i5), pos.getZ()).immutable();
-            Direction clockWise = direction.getClockWise();
-            if (!worldBorder.isWithinBounds(blockPos)) {
+            blockposition1 = (new BlockPos(blockposition.getX(), Mth.clamp(blockposition.getY(), j1, k1), blockposition.getZ())).immutable();
+            Direction enumdirection1 = enumdirection.getClockWise();
+
+            if (!worldborder.isWithinBounds(blockposition1)) {
                 return Optional.empty();
             }
 
-            for (int i1 = -1; i1 < 2; i1++) {
-                for (int i2x = 0; i2x < 2; i2x++) {
-                    for (int i3 = -1; i3 < 3; i3++) {
-                        BlockState blockState = i3 < 0 ? Blocks.OBSIDIAN.defaultBlockState() : Blocks.AIR.defaultBlockState();
-                        mutableBlockPos.setWithOffset(
-                            blockPos, i2x * direction.getStepX() + i1 * clockWise.getStepX(), i3, i2x * direction.getStepZ() + i1 * clockWise.getStepZ()
-                        );
-                        this.level.setBlockAndUpdate(mutableBlockPos, blockState);
+            for (int l1 = -1; l1 < 2; ++l1) {
+                for (k = 0; k < 2; ++k) {
+                    for (l = -1; l < 3; ++l) {
+                        IBlockData iblockdata = l < 0 ? Blocks.OBSIDIAN.defaultBlockState() : Blocks.AIR.defaultBlockState();
+
+                        blockposition_mutableblockposition.setWithOffset(blockposition1, k * enumdirection.getStepX() + l1 * enumdirection1.getStepX(), l, k * enumdirection.getStepZ() + l1 * enumdirection1.getStepZ());
+                        blockList.setBlock(blockposition_mutableblockposition, iblockdata, 3); // CraftBukkit
                     }
                 }
             }
         }
 
-        for (int maxx = -1; maxx < 3; maxx++) {
-            for (int i5x = -1; i5x < 4; i5x++) {
-                if (maxx == -1 || maxx == 2 || i5x == -1 || i5x == 3) {
-                    mutableBlockPos.setWithOffset(blockPos, maxx * direction.getStepX(), i5x, maxx * direction.getStepZ());
-                    this.level.setBlock(mutableBlockPos, Blocks.OBSIDIAN.defaultBlockState(), 3);
+        for (j1 = -1; j1 < 3; ++j1) {
+            for (k1 = -1; k1 < 4; ++k1) {
+                if (j1 == -1 || j1 == 2 || k1 == -1 || k1 == 3) {
+                    blockposition_mutableblockposition.setWithOffset(blockposition1, j1 * enumdirection.getStepX(), k1, j1 * enumdirection.getStepZ());
+                    blockList.setBlock(blockposition_mutableblockposition, Blocks.OBSIDIAN.defaultBlockState(), 3); // CraftBukkit
                 }
             }
         }
 
-        BlockState blockState1 = Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, axis);
+        IBlockData iblockdata1 = (IBlockData) Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, enumdirection_enumaxis);
 
-        for (int i5xx = 0; i5xx < 2; i5xx++) {
-            for (int min = 0; min < 3; min++) {
-                mutableBlockPos.setWithOffset(blockPos, i5xx * direction.getStepX(), min, i5xx * direction.getStepZ());
-                this.level.setBlock(mutableBlockPos, blockState1, 18);
+        for (k1 = 0; k1 < 2; ++k1) {
+            for (j = 0; j < 3; ++j) {
+                blockposition_mutableblockposition.setWithOffset(blockposition1, k1 * enumdirection.getStepX(), j, k1 * enumdirection.getStepZ());
+                blockList.setBlock(blockposition_mutableblockposition, iblockdata1, 18); // CraftBukkit
             }
         }
 
-        return Optional.of(new BlockUtil.FoundRectangle(blockPos.immutable(), 2, 3));
+        // CraftBukkit start
+        org.bukkit.World bworld = this.level.getWorld();
+        org.bukkit.event.world.PortalCreateEvent event = new org.bukkit.event.world.PortalCreateEvent((java.util.List<org.bukkit.block.BlockState>) (java.util.List) blockList.getList(), bworld, (entity == null) ? null : entity.getBukkitEntity(), org.bukkit.event.world.PortalCreateEvent.CreateReason.NETHER_PAIR);
+
+        this.level.getCraftServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return Optional.empty();
+        }
+        blockList.updateList();
+        // CraftBukkit end
+        return Optional.of(new BlockUtil.FoundRectangle(blockposition1.immutable(), 2, 3));
     }
 
     private boolean canPortalReplaceBlock(BlockPos.MutableBlockPos pos) {
-        BlockState blockState = this.level.getBlockState(pos);
-        return blockState.canBeReplaced() && blockState.getFluidState().isEmpty();
+        IBlockData iblockdata = this.level.getBlockState(pos);
+
+        return iblockdata.canBeReplaced() && iblockdata.getFluidState().isEmpty();
     }
 
     private boolean canHostFrame(BlockPos originalPos, BlockPos.MutableBlockPos offsetPos, Direction direction, int offsetScale) {
-        Direction clockWise = direction.getClockWise();
+        Direction enumdirection1 = direction.getClockWise();
 
-        for (int i = -1; i < 3; i++) {
-            for (int i1 = -1; i1 < 4; i1++) {
-                offsetPos.setWithOffset(
-                    originalPos,
-                    direction.getStepX() * i + clockWise.getStepX() * offsetScale,
-                    i1,
-                    direction.getStepZ() * i + clockWise.getStepZ() * offsetScale
-                );
-                if (i1 < 0 && !this.level.getBlockState(offsetPos).isSolid()) {
+        for (int j = -1; j < 3; ++j) {
+            for (int k = -1; k < 4; ++k) {
+                offsetPos.setWithOffset(originalPos, direction.getStepX() * j + enumdirection1.getStepX() * offsetScale, k, direction.getStepZ() * j + enumdirection1.getStepZ() * offsetScale);
+                if (k < 0 && !this.level.getBlockState(offsetPos).isSolid()) {
                     return false;
                 }
 
-                if (i1 >= 0 && !this.canPortalReplaceBlock(offsetPos)) {
+                if (k >= 0 && !this.canPortalReplaceBlock(offsetPos)) {
                     return false;
                 }
             }
