--- a/net/minecraft/world/level/portal/PortalShape.java
+++ b/net/minecraft/world/level/portal/PortalShape.java
@@ -11,26 +11,32 @@
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
-import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.NetherPortalBlock;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftPortalEvent;
+import org.bukkit.event.world.PortalCreateEvent;
+// CraftBukkit end
 
 public class PortalShape {
+
     private static final int MIN_WIDTH = 2;
     public static final int MAX_WIDTH = 21;
     private static final int MIN_HEIGHT = 3;
     public static final int MAX_HEIGHT = 21;
-    private static final BlockBehaviour.StatePredicate FRAME = (state, level, pos) -> state.is(Blocks.OBSIDIAN);
+    private static final BlockBehaviour.StatePredicate FRAME = (iblockdata, iblockaccess, blockposition) -> {
+        return iblockdata.is(Blocks.OBSIDIAN);
+    };
     private static final float SAFE_TRAVEL_MAX_ENTITY_XY = 4.0F;
-    private static final double SAFE_TRAVEL_MAX_VERTICAL_DELTA = 1.0;
+    private static final double SAFE_TRAVEL_MAX_VERTICAL_DELTA = 1.0D;
     private final LevelAccessor level;
     private final Direction.Axis axis;
     private final Direction rightDir;
@@ -39,22 +45,28 @@
     private BlockPos bottomLeft;
     private int height;
     private final int width;
+    org.bukkit.craftbukkit.util.BlockStateListPopulator blocks; // CraftBukkit - add field
 
     public static Optional<PortalShape> findEmptyPortalShape(LevelAccessor level, BlockPos bottomLeft, Direction.Axis axis) {
-        return findPortalShape(level, bottomLeft, shape -> shape.isValid() && shape.numPortalBlocks == 0, axis);
+        return findPortalShape(level, bottomLeft, (blockportalshape) -> {
+            return blockportalshape.isValid() && blockportalshape.numPortalBlocks == 0;
+        }, axis);
     }
 
     public static Optional<PortalShape> findPortalShape(LevelAccessor level, BlockPos bottomLeft, Predicate<PortalShape> predicate, Direction.Axis axis) {
         Optional<PortalShape> optional = Optional.of(new PortalShape(level, bottomLeft, axis)).filter(predicate);
+
         if (optional.isPresent()) {
             return optional;
         } else {
-            Direction.Axis axis1 = axis == Direction.Axis.X ? Direction.Axis.Z : Direction.Axis.X;
-            return Optional.of(new PortalShape(level, bottomLeft, axis1)).filter(predicate);
+            Direction.Axis enumdirection_enumaxis1 = axis == Direction.Axis.X ? Direction.Axis.Z : Direction.Axis.X;
+
+            return Optional.of(new PortalShape(level, bottomLeft, enumdirection_enumaxis1)).filter(predicate);
         }
     }
 
     public PortalShape(LevelAccessor level, BlockPos bottomLeft, Direction.Axis axis) {
+        blocks = new org.bukkit.craftbukkit.util.BlockStateListPopulator(level.getMinecraftWorld()); // CraftBukkit
         this.level = level;
         this.axis = axis;
         this.rightDir = axis == Direction.Axis.X ? Direction.WEST : Direction.SOUTH;
@@ -69,94 +81,107 @@
                 this.height = this.calculateHeight();
             }
         }
+
     }
 
     @Nullable
     private BlockPos calculateBottomLeft(BlockPos pos) {
-        int max = Math.max(this.level.getMinBuildHeight(), pos.getY() - 21);
-
-        while (pos.getY() > max && isEmpty(this.level.getBlockState(pos.below()))) {
-            pos = pos.below();
+        for (int i = Math.max(this.level.getMinBuildHeight(), pos.getY() - 21); pos.getY() > i && isEmpty(this.level.getBlockState(pos.below())); pos = pos.below()) {
+            ;
         }
 
-        Direction opposite = this.rightDir.getOpposite();
-        int i = this.getDistanceUntilEdgeAboveFrame(pos, opposite) - 1;
-        return i < 0 ? null : pos.relative(opposite, i);
+        Direction enumdirection = this.rightDir.getOpposite();
+        int j = this.getDistanceUntilEdgeAboveFrame(pos, enumdirection) - 1;
+
+        return j < 0 ? null : pos.relative(enumdirection, j);
     }
 
     private int calculateWidth() {
-        int distanceUntilEdgeAboveFrame = this.getDistanceUntilEdgeAboveFrame(this.bottomLeft, this.rightDir);
-        return distanceUntilEdgeAboveFrame >= 2 && distanceUntilEdgeAboveFrame <= 21 ? distanceUntilEdgeAboveFrame : 0;
+        int i = this.getDistanceUntilEdgeAboveFrame(this.bottomLeft, this.rightDir);
+
+        return i >= 2 && i <= 21 ? i : 0;
     }
 
     private int getDistanceUntilEdgeAboveFrame(BlockPos pos, Direction direction) {
-        BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
 
-        for (int i = 0; i <= 21; i++) {
-            mutableBlockPos.set(pos).move(direction, i);
-            BlockState blockState = this.level.getBlockState(mutableBlockPos);
-            if (!isEmpty(blockState)) {
-                if (FRAME.test(blockState, this.level, mutableBlockPos)) {
+        for (int i = 0; i <= 21; ++i) {
+            blockposition_mutableblockposition.set(pos).move(direction, i);
+            IBlockData iblockdata = this.level.getBlockState(blockposition_mutableblockposition);
+
+            if (!isEmpty(iblockdata)) {
+                if (PortalShape.FRAME.test(iblockdata, this.level, blockposition_mutableblockposition)) {
+                    blocks.setBlock(blockposition_mutableblockposition, iblockdata, 18); // CraftBukkit - lower left / right
                     return i;
                 }
                 break;
             }
 
-            BlockState blockState1 = this.level.getBlockState(mutableBlockPos.move(Direction.DOWN));
-            if (!FRAME.test(blockState1, this.level, mutableBlockPos)) {
+            IBlockData iblockdata1 = this.level.getBlockState(blockposition_mutableblockposition.move(Direction.DOWN));
+
+            if (!PortalShape.FRAME.test(iblockdata1, this.level, blockposition_mutableblockposition)) {
                 break;
             }
+            blocks.setBlock(blockposition_mutableblockposition, iblockdata1, 18); // CraftBukkit - bottom row
         }
 
         return 0;
     }
 
     private int calculateHeight() {
-        BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
-        int distanceUntilTop = this.getDistanceUntilTop(mutableBlockPos);
-        return distanceUntilTop >= 3 && distanceUntilTop <= 21 && this.hasTopFrame(mutableBlockPos, distanceUntilTop) ? distanceUntilTop : 0;
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
+        int i = this.getDistanceUntilTop(blockposition_mutableblockposition);
+
+        return i >= 3 && i <= 21 && this.hasTopFrame(blockposition_mutableblockposition, i) ? i : 0;
     }
 
     private boolean hasTopFrame(BlockPos.MutableBlockPos pos, int distanceToTop) {
-        for (int i = 0; i < this.width; i++) {
-            BlockPos.MutableBlockPos mutableBlockPos = pos.set(this.bottomLeft).move(Direction.UP, distanceToTop).move(this.rightDir, i);
-            if (!FRAME.test(this.level.getBlockState(mutableBlockPos), this.level, mutableBlockPos)) {
+        for (int j = 0; j < this.width; ++j) {
+            BlockPos.MutableBlockPos blockposition_mutableblockposition1 = pos.set(this.bottomLeft).move(Direction.UP, distanceToTop).move(this.rightDir, j);
+
+            if (!PortalShape.FRAME.test(this.level.getBlockState(blockposition_mutableblockposition1), this.level, blockposition_mutableblockposition1)) {
                 return false;
             }
+            blocks.setBlock(blockposition_mutableblockposition1, this.level.getBlockState(blockposition_mutableblockposition1), 18); // CraftBukkit - upper row
         }
 
         return true;
     }
 
     private int getDistanceUntilTop(BlockPos.MutableBlockPos pos) {
-        for (int i = 0; i < 21; i++) {
+        for (int i = 0; i < 21; ++i) {
             pos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, -1);
-            if (!FRAME.test(this.level.getBlockState(pos), this.level, pos)) {
+            if (!PortalShape.FRAME.test(this.level.getBlockState(pos), this.level, pos)) {
                 return i;
             }
 
             pos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, this.width);
-            if (!FRAME.test(this.level.getBlockState(pos), this.level, pos)) {
+            if (!PortalShape.FRAME.test(this.level.getBlockState(pos), this.level, pos)) {
                 return i;
             }
 
-            for (int i1 = 0; i1 < this.width; i1++) {
-                pos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, i1);
-                BlockState blockState = this.level.getBlockState(pos);
-                if (!isEmpty(blockState)) {
+            for (int j = 0; j < this.width; ++j) {
+                pos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, j);
+                IBlockData iblockdata = this.level.getBlockState(pos);
+
+                if (!isEmpty(iblockdata)) {
                     return i;
                 }
 
-                if (blockState.is(Blocks.NETHER_PORTAL)) {
-                    this.numPortalBlocks++;
+                if (iblockdata.is(Blocks.NETHER_PORTAL)) {
+                    ++this.numPortalBlocks;
                 }
             }
+            // CraftBukkit start - left and right
+            blocks.setBlock(pos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, -1), this.level.getBlockState(pos), 18);
+            blocks.setBlock(pos.set(this.bottomLeft).move(Direction.UP, i).move(this.rightDir, this.width), this.level.getBlockState(pos), 18);
+            // CraftBukkit end
         }
 
         return 21;
     }
 
-    private static boolean isEmpty(BlockState state) {
+    private static boolean isEmpty(IBlockData state) {
         return state.isAir() || state.is(BlockTags.FIRE) || state.is(Blocks.NETHER_PORTAL);
     }
 
@@ -164,10 +189,28 @@
         return this.bottomLeft != null && this.width >= 2 && this.width <= 21 && this.height >= 3 && this.height <= 21;
     }
 
-    public void createPortalBlocks() {
-        BlockState blockState = Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, this.axis);
-        BlockPos.betweenClosed(this.bottomLeft, this.bottomLeft.relative(Direction.UP, this.height - 1).relative(this.rightDir, this.width - 1))
-            .forEach(pos -> this.level.setBlock(pos, blockState, 18));
+    // CraftBukkit start - return boolean
+    public boolean createPortalBlocks() {
+        org.bukkit.World bworld = this.level.getMinecraftWorld().getWorld();
+
+        // Copy below for loop
+        IBlockData iblockdata = (IBlockData) Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, this.axis);
+
+        BlockPos.betweenClosed(this.bottomLeft, this.bottomLeft.relative(Direction.UP, this.height - 1).relative(this.rightDir, this.width - 1)).forEach((blockposition) -> {
+            blocks.setBlock(blockposition, iblockdata, 18);
+        });
+
+        PortalCreateEvent event = new PortalCreateEvent((java.util.List<org.bukkit.block.BlockState>) (java.util.List) blocks.getList(), bworld, null, PortalCreateEvent.CreateReason.FIRE);
+        this.level.getMinecraftWorld().getServer().server.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) {
+            return false;
+        }
+        // CraftBukkit end
+        BlockPos.betweenClosed(this.bottomLeft, this.bottomLeft.relative(Direction.UP, this.height - 1).relative(this.rightDir, this.width - 1)).forEach((blockposition) -> {
+            this.level.setBlock(blockposition, iblockdata, 18);
+        });
+        return true; // CraftBukkit
     }
 
     public boolean isComplete() {
@@ -175,62 +218,64 @@
     }
 
     public static Vec3 getRelativePosition(BlockUtil.FoundRectangle foundRectangle, Direction.Axis axis, Vec3 pos, EntityDimensions entityDimensions) {
-        double d = (double)foundRectangle.axis1Size - (double)entityDimensions.width;
-        double d1 = (double)foundRectangle.axis2Size - (double)entityDimensions.height;
-        BlockPos blockPos = foundRectangle.minCorner;
+        double d0 = (double) foundRectangle.axis1Size - (double) entityDimensions.width;
+        double d1 = (double) foundRectangle.axis2Size - (double) entityDimensions.height;
+        BlockPos blockposition = foundRectangle.minCorner;
+        double d2;
         double d3;
-        if (d > 0.0) {
-            double d2 = (double)blockPos.get(axis) + (double)entityDimensions.width / 2.0;
-            d3 = Mth.clamp(Mth.inverseLerp(pos.get(axis) - d2, 0.0, d), 0.0, 1.0);
+
+        if (d0 > 0.0D) {
+            d2 = (double) blockposition.get(axis) + (double) entityDimensions.width / 2.0D;
+            d3 = Mth.clamp(Mth.inverseLerp(pos.get(axis) - d2, 0.0D, d0), 0.0D, 1.0D);
         } else {
-            d3 = 0.5;
+            d3 = 0.5D;
         }
 
-        double d2;
-        if (d1 > 0.0) {
-            Direction.Axis axis1 = Direction.Axis.Y;
-            d2 = Mth.clamp(Mth.inverseLerp(pos.get(axis1) - (double)blockPos.get(axis1), 0.0, d1), 0.0, 1.0);
+        Direction.Axis enumdirection_enumaxis1;
+
+        if (d1 > 0.0D) {
+            enumdirection_enumaxis1 = Direction.Axis.Y;
+            d2 = Mth.clamp(Mth.inverseLerp(pos.get(enumdirection_enumaxis1) - (double) blockposition.get(enumdirection_enumaxis1), 0.0D, d1), 0.0D, 1.0D);
         } else {
-            d2 = 0.0;
+            d2 = 0.0D;
         }
 
-        Direction.Axis axis1 = axis == Direction.Axis.X ? Direction.Axis.Z : Direction.Axis.X;
-        double d4 = pos.get(axis1) - ((double)blockPos.get(axis1) + 0.5);
+        enumdirection_enumaxis1 = axis == Direction.Axis.X ? Direction.Axis.Z : Direction.Axis.X;
+        double d4 = pos.get(enumdirection_enumaxis1) - ((double) blockposition.get(enumdirection_enumaxis1) + 0.5D);
+
         return new Vec3(d3, d2, d4);
     }
 
-    public static PortalInfo createPortalInfo(
-        ServerLevel level, BlockUtil.FoundRectangle portalPos, Direction.Axis axis, Vec3 relativePos, Entity entity, Vec3 velocity, float yRot, float xRot
-    ) {
-        BlockPos blockPos = portalPos.minCorner;
-        BlockState blockState = level.getBlockState(blockPos);
-        Direction.Axis axis1 = blockState.getOptionalValue(BlockStateProperties.HORIZONTAL_AXIS).orElse(Direction.Axis.X);
-        double d = (double)portalPos.axis1Size;
-        double d1 = (double)portalPos.axis2Size;
-        EntityDimensions dimensions = entity.getDimensions(entity.getPose());
-        int i = axis == axis1 ? 0 : 90;
-        Vec3 vec3 = axis == axis1 ? velocity : new Vec3(velocity.z, velocity.y, -velocity.x);
-        double d2 = (double)dimensions.width / 2.0 + (d - (double)dimensions.width) * relativePos.x();
-        double d3 = (d1 - (double)dimensions.height) * relativePos.y();
-        double d4 = 0.5 + relativePos.z();
-        boolean flag = axis1 == Direction.Axis.X;
-        Vec3 vec31 = new Vec3((double)blockPos.getX() + (flag ? d2 : d4), (double)blockPos.getY() + d3, (double)blockPos.getZ() + (flag ? d4 : d2));
-        Vec3 vec32 = findCollisionFreePosition(vec31, level, entity, dimensions);
-        return new PortalInfo(vec32, vec3, yRot + (float)i, xRot);
+    public static PortalInfo createPortalInfo(ServerLevel worldserver, BlockUtil.FoundRectangle blockutil_rectangle, Direction.Axis enumdirection_enumaxis, Vec3 vec3d, Entity entity, Vec3 vec3d1, float f, float f1, CraftPortalEvent portalEventInfo) { // CraftBukkit
+        BlockPos blockposition = blockutil_rectangle.minCorner;
+        IBlockData iblockdata = worldserver.getBlockState(blockposition);
+        Direction.Axis enumdirection_enumaxis1 = (Direction.Axis) iblockdata.getOptionalValue(BlockStateProperties.HORIZONTAL_AXIS).orElse(Direction.Axis.X);
+        double d0 = (double) blockutil_rectangle.axis1Size;
+        double d1 = (double) blockutil_rectangle.axis2Size;
+        EntityDimensions entitysize = entity.getDimensions(entity.getPose());
+        int i = enumdirection_enumaxis == enumdirection_enumaxis1 ? 0 : 90;
+        Vec3 vec3d2 = enumdirection_enumaxis == enumdirection_enumaxis1 ? vec3d1 : new Vec3(vec3d1.z, vec3d1.y, -vec3d1.x);
+        double d2 = (double) entitysize.width / 2.0D + (d0 - (double) entitysize.width) * vec3d.x();
+        double d3 = (d1 - (double) entitysize.height) * vec3d.y();
+        double d4 = 0.5D + vec3d.z();
+        boolean flag = enumdirection_enumaxis1 == Direction.Axis.X;
+        Vec3 vec3d3 = new Vec3((double) blockposition.getX() + (flag ? d2 : d4), (double) blockposition.getY() + d3, (double) blockposition.getZ() + (flag ? d4 : d2));
+        Vec3 vec3d4 = findCollisionFreePosition(vec3d3, worldserver, entity, entitysize);
+
+        return new PortalInfo(vec3d4, vec3d2, f + (float) i, f1, worldserver, portalEventInfo); // CraftBukkit
     }
 
     private static Vec3 findCollisionFreePosition(Vec3 pos, ServerLevel level, Entity entity, EntityDimensions dimensions) {
-        if (!(dimensions.width > 4.0F) && !(dimensions.height > 4.0F)) {
-            double d = (double)dimensions.height / 2.0;
-            Vec3 vec3 = pos.add(0.0, d, 0.0);
-            VoxelShape voxelShape = Shapes.create(
-                AABB.ofSize(vec3, (double)dimensions.width, 0.0, (double)dimensions.width).expandTowards(0.0, 1.0, 0.0).inflate(1.0E-6)
-            );
-            Optional<Vec3> optional = level.findFreePosition(
-                entity, voxelShape, vec3, (double)dimensions.width, (double)dimensions.height, (double)dimensions.width
-            );
-            Optional<Vec3> optional1 = optional.map(freePos -> freePos.subtract(0.0, d, 0.0));
-            return optional1.orElse(pos);
+        if (dimensions.width <= 4.0F && dimensions.height <= 4.0F) {
+            double d0 = (double) dimensions.height / 2.0D;
+            Vec3 vec3d1 = pos.add(0.0D, d0, 0.0D);
+            VoxelShape voxelshape = Shapes.create(AABB.ofSize(vec3d1, (double) dimensions.width, 0.0D, (double) dimensions.width).expandTowards(0.0D, 1.0D, 0.0D).inflate(1.0E-6D));
+            Optional<Vec3> optional = level.findFreePosition(entity, voxelshape, vec3d1, (double) dimensions.width, (double) dimensions.height, (double) dimensions.width);
+            Optional<Vec3> optional1 = optional.map((vec3d2) -> {
+                return vec3d2.subtract(0.0D, d0, 0.0D);
+            });
+
+            return (Vec3) optional1.orElse(pos);
         } else {
             return pos;
         }
