--- a/net/minecraft/world/level/border/WorldBorder.java
+++ b/net/minecraft/world/level/border/WorldBorder.java
@@ -2,6 +2,7 @@
 
 import com.google.common.collect.Lists;
 import com.mojang.serialization.DynamicLike;
+import java.util.Iterator;
 import java.util.List;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
@@ -15,47 +16,45 @@
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class WorldBorder {
-    public static final double MAX_SIZE = 5.999997E7F;
-    public static final double MAX_CENTER_COORDINATE = 2.9999984E7;
+
+    public static final double MAX_SIZE = 5.9999968E7D;
+    public static final double MAX_CENTER_COORDINATE = 2.9999984E7D;
     private final List<BorderChangeListener> listeners = Lists.newArrayList();
-    private double damagePerBlock = 0.2;
-    private double damageSafeZone = 5.0;
+    private double damagePerBlock = 0.2D;
+    private double damageSafeZone = 5.0D;
     private int warningTime = 15;
     private int warningBlocks = 5;
     private double centerX;
     private double centerZ;
     int absoluteMaxSize = 29999984;
-    private WorldBorder.BorderExtent extent = new WorldBorder.StaticBorderExtent(5.999997E7F);
-    public static final WorldBorder.Settings DEFAULT_SETTINGS = new WorldBorder.Settings(0.0, 0.0, 0.2, 5.0, 5, 15, 5.999997E7F, 0L, 0.0);
+    private WorldBorder.a extent = new WorldBorder.StaticBorderExtent(5.9999968E7D);
+    public static final WorldBorder.Settings DEFAULT_SETTINGS = new WorldBorder.Settings(0.0D, 0.0D, 0.2D, 5.0D, 5, 15, 5.9999968E7D, 0L, 0.0D);
+    public net.minecraft.server.level.ServerLevel world; // CraftBukkit
 
+    public WorldBorder() {}
+
     public boolean isWithinBounds(BlockPos pos) {
-        return (double)(pos.getX() + 1) > this.getMinX()
-            && (double)pos.getX() < this.getMaxX()
-            && (double)(pos.getZ() + 1) > this.getMinZ()
-            && (double)pos.getZ() < this.getMaxZ();
+        return (double) (pos.getX() + 1) > this.getMinX() && (double) pos.getX() < this.getMaxX() && (double) (pos.getZ() + 1) > this.getMinZ() && (double) pos.getZ() < this.getMaxZ();
     }
 
     public boolean isWithinBounds(ChunkPos chunkPos) {
-        return (double)chunkPos.getMaxBlockX() > this.getMinX()
-            && (double)chunkPos.getMinBlockX() < this.getMaxX()
-            && (double)chunkPos.getMaxBlockZ() > this.getMinZ()
-            && (double)chunkPos.getMinBlockZ() < this.getMaxZ();
+        return (double) chunkPos.getMaxBlockX() > this.getMinX() && (double) chunkPos.getMinBlockX() < this.getMaxX() && (double) chunkPos.getMaxBlockZ() > this.getMinZ() && (double) chunkPos.getMinBlockZ() < this.getMaxZ();
     }
 
-    public boolean isWithinBounds(double x, double z) {
-        return x > this.getMinX() && x < this.getMaxX() && z > this.getMinZ() && z < this.getMaxZ();
+    public boolean isWithinBounds(double x, double d1) {
+        return x > this.getMinX() && x < this.getMaxX() && d1 > this.getMinZ() && d1 < this.getMaxZ();
     }
 
-    public boolean isWithinBounds(double x, double z, double offset) {
-        return x > this.getMinX() - offset && x < this.getMaxX() + offset && z > this.getMinZ() - offset && z < this.getMaxZ() + offset;
+    public boolean isWithinBounds(double x, double d1, double z) {
+        return x > this.getMinX() - z && x < this.getMaxX() + z && d1 > this.getMinZ() - z && d1 < this.getMaxZ() + z;
     }
 
     public boolean isWithinBounds(AABB box) {
         return box.maxX > this.getMinX() && box.minX < this.getMaxX() && box.maxZ > this.getMinZ() && box.minZ < this.getMaxZ();
     }
 
-    public BlockPos clampToBounds(double x, double y, double z) {
-        return BlockPos.containing(Mth.clamp(x, this.getMinX(), this.getMaxX()), y, Mth.clamp(z, this.getMinZ(), this.getMaxZ()));
+    public BlockPos clampToBounds(double x, double d1, double y) {
+        return BlockPos.containing(Mth.clamp(x, this.getMinX(), this.getMaxX()), d1, Mth.clamp(y, this.getMinZ(), this.getMaxZ()));
     }
 
     public double getDistanceToBorder(Entity entity) {
@@ -66,19 +65,21 @@
         return this.extent.getCollisionShape();
     }
 
-    public double getDistanceToBorder(double x, double z) {
-        double d = z - this.getMinZ();
-        double d1 = this.getMaxZ() - z;
-        double d2 = x - this.getMinX();
-        double d3 = this.getMaxX() - x;
-        double min = Math.min(d2, d3);
-        min = Math.min(min, d);
-        return Math.min(min, d1);
+    public double getDistanceToBorder(double x, double d1) {
+        double d2 = d1 - this.getMinZ();
+        double d3 = this.getMaxZ() - d1;
+        double d4 = x - this.getMinX();
+        double d5 = this.getMaxX() - x;
+        double d6 = Math.min(d4, d5);
+
+        d6 = Math.min(d6, d2);
+        return Math.min(d6, d3);
     }
 
     public boolean isInsideCloseToBorder(Entity entity, AABB bounds) {
-        double max = Math.max(Mth.absMax(bounds.getXsize(), bounds.getZsize()), 1.0);
-        return this.getDistanceToBorder(entity) < max * 2.0 && this.isWithinBounds(entity.getX(), entity.getZ(), max);
+        double d0 = Math.max(Mth.absMax(bounds.getXsize(), bounds.getZsize()), 1.0D);
+
+        return this.getDistanceToBorder(entity) < d0 * 2.0D && this.isWithinBounds(entity.getX(), entity.getZ(), d0);
     }
 
     public BorderStatus getStatus() {
@@ -109,14 +110,18 @@
         return this.centerZ;
     }
 
-    public void setCenter(double x, double z) {
+    public void setCenter(double x, double d1) {
         this.centerX = x;
-        this.centerZ = z;
+        this.centerZ = d1;
         this.extent.onCenterChange();
+        Iterator iterator = this.getListeners().iterator();
 
-        for (BorderChangeListener borderChangeListener : this.getListeners()) {
-            borderChangeListener.onBorderCenterSet(this, x, z);
+        while (iterator.hasNext()) {
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
+
+            iworldborderlistener.onBorderCenterSet(this, x, d1);
         }
+
     }
 
     public double getSize() {
@@ -133,20 +138,26 @@
 
     public void setSize(double size) {
         this.extent = new WorldBorder.StaticBorderExtent(size);
+        Iterator iterator = this.getListeners().iterator();
 
-        for (BorderChangeListener borderChangeListener : this.getListeners()) {
-            borderChangeListener.onBorderSizeSet(this, size);
+        while (iterator.hasNext()) {
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
+
+            iworldborderlistener.onBorderSizeSet(this, size);
         }
+
     }
 
-    public void lerpSizeBetween(double oldSize, double newSize, long time) {
-        this.extent = (WorldBorder.BorderExtent)(oldSize == newSize
-            ? new WorldBorder.StaticBorderExtent(newSize)
-            : new WorldBorder.MovingBorderExtent(oldSize, newSize, time));
+    public void lerpSizeBetween(double oldSize, double d1, long newSize) {
+        this.extent = (WorldBorder.a) (oldSize == d1 ? new WorldBorder.StaticBorderExtent(d1) : new WorldBorder.MovingBorderExtent(oldSize, d1, newSize));
+        Iterator iterator = this.getListeners().iterator();
 
-        for (BorderChangeListener borderChangeListener : this.getListeners()) {
-            borderChangeListener.onBorderSizeLerping(this, oldSize, newSize, time);
+        while (iterator.hasNext()) {
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
+
+            iworldborderlistener.onBorderSizeLerping(this, oldSize, d1, newSize);
         }
+
     }
 
     protected List<BorderChangeListener> getListeners() {
@@ -154,6 +165,7 @@
     }
 
     public void addListener(BorderChangeListener listener) {
+        if (listeners.contains(listener)) return; // CraftBukkit
         this.listeners.add(listener);
     }
 
@@ -176,10 +188,14 @@
 
     public void setDamageSafeZone(double damageSafeZone) {
         this.damageSafeZone = damageSafeZone;
+        Iterator iterator = this.getListeners().iterator();
 
-        for (BorderChangeListener borderChangeListener : this.getListeners()) {
-            borderChangeListener.onBorderSetDamageSafeZOne(this, damageSafeZone);
+        while (iterator.hasNext()) {
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
+
+            iworldborderlistener.onBorderSetDamageSafeZOne(this, damageSafeZone);
         }
+
     }
 
     public double getDamagePerBlock() {
@@ -188,10 +204,14 @@
 
     public void setDamagePerBlock(double damagePerBlock) {
         this.damagePerBlock = damagePerBlock;
+        Iterator iterator = this.getListeners().iterator();
 
-        for (BorderChangeListener borderChangeListener : this.getListeners()) {
-            borderChangeListener.onBorderSetDamagePerBlock(this, damagePerBlock);
+        while (iterator.hasNext()) {
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
+
+            iworldborderlistener.onBorderSetDamagePerBlock(this, damagePerBlock);
         }
+
     }
 
     public double getLerpSpeed() {
@@ -204,10 +224,14 @@
 
     public void setWarningTime(int warningTime) {
         this.warningTime = warningTime;
+        Iterator iterator = this.getListeners().iterator();
 
-        for (BorderChangeListener borderChangeListener : this.getListeners()) {
-            borderChangeListener.onBorderSetWarningTime(this, warningTime);
+        while (iterator.hasNext()) {
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
+
+            iworldborderlistener.onBorderSetWarningTime(this, warningTime);
         }
+
     }
 
     public int getWarningBlocks() {
@@ -216,10 +240,14 @@
 
     public void setWarningBlocks(int warningDistance) {
         this.warningBlocks = warningDistance;
+        Iterator iterator = this.getListeners().iterator();
 
-        for (BorderChangeListener borderChangeListener : this.getListeners()) {
-            borderChangeListener.onBorderSetWarningBlocks(this, warningDistance);
+        while (iterator.hasNext()) {
+            BorderChangeListener iworldborderlistener = (BorderChangeListener) iterator.next();
+
+            iworldborderlistener.onBorderSetWarningBlocks(this, warningDistance);
         }
+
     }
 
     public void tick() {
@@ -241,9 +269,99 @@
         } else {
             this.setSize(serializer.getSize());
         }
+
     }
 
-    interface BorderExtent {
+    private class StaticBorderExtent implements WorldBorder.a {
+
+        private final double size;
+        private double minX;
+        private double minZ;
+        private double maxX;
+        private double maxZ;
+        private VoxelShape shape;
+
+        public StaticBorderExtent(double d0) {
+            this.size = d0;
+            this.updateBox();
+        }
+
+        @Override
+        public double getMinX() {
+            return this.minX;
+        }
+
+        @Override
+        public double getMaxX() {
+            return this.maxX;
+        }
+
+        @Override
+        public double getMinZ() {
+            return this.minZ;
+        }
+
+        @Override
+        public double getMaxZ() {
+            return this.maxZ;
+        }
+
+        @Override
+        public double getSize() {
+            return this.size;
+        }
+
+        @Override
+        public BorderStatus getStatus() {
+            return BorderStatus.STATIONARY;
+        }
+
+        @Override
+        public double getLerpSpeed() {
+            return 0.0D;
+        }
+
+        @Override
+        public long getLerpRemainingTime() {
+            return 0L;
+        }
+
+        @Override
+        public double getLerpTarget() {
+            return this.size;
+        }
+
+        private void updateBox() {
+            this.minX = Mth.clamp(WorldBorder.this.getCenterX() - this.size / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
+            this.minZ = Mth.clamp(WorldBorder.this.getCenterZ() - this.size / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
+            this.maxX = Mth.clamp(WorldBorder.this.getCenterX() + this.size / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
+            this.maxZ = Mth.clamp(WorldBorder.this.getCenterZ() + this.size / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
+            this.shape = Shapes.join(Shapes.INFINITY, Shapes.box(Math.floor(this.getMinX()), Double.NEGATIVE_INFINITY, Math.floor(this.getMinZ()), Math.ceil(this.getMaxX()), Double.POSITIVE_INFINITY, Math.ceil(this.getMaxZ())), BooleanOp.ONLY_FIRST);
+        }
+
+        @Override
+        public void onAbsoluteMaxSizeChange() {
+            this.updateBox();
+        }
+
+        @Override
+        public void onCenterChange() {
+            this.updateBox();
+        }
+
+        @Override
+        public WorldBorder.a update() {
+            return this;
+        }
+
+        @Override
+        public VoxelShape getCollisionShape() {
+            return this.shape;
+        }
+    }
+
+    private interface a {
+
         double getMinX();
 
         double getMaxX();
@@ -266,63 +384,57 @@
 
         void onCenterChange();
 
-        WorldBorder.BorderExtent update();
+        WorldBorder.a update();
 
         VoxelShape getCollisionShape();
     }
 
-    class MovingBorderExtent implements WorldBorder.BorderExtent {
+    private class MovingBorderExtent implements WorldBorder.a {
+
         private final double from;
         private final double to;
         private final long lerpEnd;
         private final long lerpBegin;
         private final double lerpDuration;
 
-        MovingBorderExtent(double from, double to, long lerpDuration) {
-            this.from = from;
-            this.to = to;
-            this.lerpDuration = (double)lerpDuration;
+        MovingBorderExtent(double d0, double d1, long i) {
+            this.from = d0;
+            this.to = d1;
+            this.lerpDuration = (double) i;
             this.lerpBegin = Util.getMillis();
-            this.lerpEnd = this.lerpBegin + lerpDuration;
+            this.lerpEnd = this.lerpBegin + i;
         }
 
         @Override
         public double getMinX() {
-            return Mth.clamp(
-                WorldBorder.this.getCenterX() - this.getSize() / 2.0, (double)(-WorldBorder.this.absoluteMaxSize), (double)WorldBorder.this.absoluteMaxSize
-            );
+            return Mth.clamp(WorldBorder.this.getCenterX() - this.getSize() / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
         }
 
         @Override
         public double getMinZ() {
-            return Mth.clamp(
-                WorldBorder.this.getCenterZ() - this.getSize() / 2.0, (double)(-WorldBorder.this.absoluteMaxSize), (double)WorldBorder.this.absoluteMaxSize
-            );
+            return Mth.clamp(WorldBorder.this.getCenterZ() - this.getSize() / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
         }
 
         @Override
         public double getMaxX() {
-            return Mth.clamp(
-                WorldBorder.this.getCenterX() + this.getSize() / 2.0, (double)(-WorldBorder.this.absoluteMaxSize), (double)WorldBorder.this.absoluteMaxSize
-            );
+            return Mth.clamp(WorldBorder.this.getCenterX() + this.getSize() / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
         }
 
         @Override
         public double getMaxZ() {
-            return Mth.clamp(
-                WorldBorder.this.getCenterZ() + this.getSize() / 2.0, (double)(-WorldBorder.this.absoluteMaxSize), (double)WorldBorder.this.absoluteMaxSize
-            );
+            return Mth.clamp(WorldBorder.this.getCenterZ() + this.getSize() / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
         }
 
         @Override
         public double getSize() {
-            double d = (double)(Util.getMillis() - this.lerpBegin) / this.lerpDuration;
-            return d < 1.0 ? Mth.lerp(d, this.from, this.to) : this.to;
+            double d0 = (double) (Util.getMillis() - this.lerpBegin) / this.lerpDuration;
+
+            return d0 < 1.0D ? Mth.lerp(d0, this.from, this.to) : this.to;
         }
 
         @Override
         public double getLerpSpeed() {
-            return Math.abs(this.from - this.to) / (double)(this.lerpEnd - this.lerpBegin);
+            return Math.abs(this.from - this.to) / (double) (this.lerpEnd - this.lerpBegin);
         }
 
         @Override
@@ -341,36 +453,24 @@
         }
 
         @Override
-        public void onCenterChange() {
-        }
+        public void onCenterChange() {}
 
         @Override
-        public void onAbsoluteMaxSizeChange() {
-        }
+        public void onAbsoluteMaxSizeChange() {}
 
         @Override
-        public WorldBorder.BorderExtent update() {
-            return (WorldBorder.BorderExtent)(this.getLerpRemainingTime() <= 0L ? WorldBorder.this.new StaticBorderExtent(this.to) : this);
+        public WorldBorder.a update() {
+            return (WorldBorder.a) (this.getLerpRemainingTime() <= 0L ? WorldBorder.this.new StaticBorderExtent(this.to) : this);
         }
 
         @Override
         public VoxelShape getCollisionShape() {
-            return Shapes.join(
-                Shapes.INFINITY,
-                Shapes.box(
-                    Math.floor(this.getMinX()),
-                    Double.NEGATIVE_INFINITY,
-                    Math.floor(this.getMinZ()),
-                    Math.ceil(this.getMaxX()),
-                    Double.POSITIVE_INFINITY,
-                    Math.ceil(this.getMaxZ())
-                ),
-                BooleanOp.ONLY_FIRST
-            );
+            return Shapes.join(Shapes.INFINITY, Shapes.box(Math.floor(this.getMinX()), Double.NEGATIVE_INFINITY, Math.floor(this.getMinZ()), Math.ceil(this.getMaxX()), Double.POSITIVE_INFINITY, Math.ceil(this.getMaxZ())), BooleanOp.ONLY_FIRST);
         }
     }
 
     public static class Settings {
+
         private final double centerX;
         private final double centerZ;
         private final double damagePerBlock;
@@ -381,26 +481,16 @@
         private final long sizeLerpTime;
         private final double sizeLerpTarget;
 
-        Settings(
-            double centerX,
-            double centerZ,
-            double damagePerBlock,
-            double safeZone,
-            int warningBlocks,
-            int warningTime,
-            double size,
-            long sizeLerpTime,
-            double sizeLerpTarget
-        ) {
+        Settings(double centerX, double d1, double centerZ, double d3, int damagePerBlock, int j, double safeZone, long k, double warningBlocks) {
             this.centerX = centerX;
-            this.centerZ = centerZ;
-            this.damagePerBlock = damagePerBlock;
-            this.safeZone = safeZone;
-            this.warningBlocks = warningBlocks;
-            this.warningTime = warningTime;
-            this.size = size;
-            this.sizeLerpTime = sizeLerpTime;
-            this.sizeLerpTarget = sizeLerpTarget;
+            this.centerZ = d1;
+            this.damagePerBlock = centerZ;
+            this.safeZone = d3;
+            this.warningBlocks = damagePerBlock;
+            this.warningTime = j;
+            this.size = safeZone;
+            this.sizeLerpTime = k;
+            this.sizeLerpTarget = warningBlocks;
         }
 
         Settings(WorldBorder border) {
@@ -452,16 +542,17 @@
         }
 
         public static WorldBorder.Settings read(DynamicLike<?> dynamic, WorldBorder.Settings defaultValue) {
-            double d = Mth.clamp(dynamic.get("BorderCenterX").asDouble(defaultValue.centerX), -2.9999984E7, 2.9999984E7);
-            double d1 = Mth.clamp(dynamic.get("BorderCenterZ").asDouble(defaultValue.centerZ), -2.9999984E7, 2.9999984E7);
-            double _double = dynamic.get("BorderSize").asDouble(defaultValue.size);
-            long _long = dynamic.get("BorderSizeLerpTime").asLong(defaultValue.sizeLerpTime);
-            double _double1 = dynamic.get("BorderSizeLerpTarget").asDouble(defaultValue.sizeLerpTarget);
-            double _double2 = dynamic.get("BorderSafeZone").asDouble(defaultValue.safeZone);
-            double _double3 = dynamic.get("BorderDamagePerBlock").asDouble(defaultValue.damagePerBlock);
-            int _int = dynamic.get("BorderWarningBlocks").asInt(defaultValue.warningBlocks);
-            int _int1 = dynamic.get("BorderWarningTime").asInt(defaultValue.warningTime);
-            return new WorldBorder.Settings(d, d1, _double3, _double2, _int, _int1, _double, _long, _double1);
+            double d0 = Mth.clamp(dynamic.get("BorderCenterX").asDouble(defaultValue.centerX), -2.9999984E7D, 2.9999984E7D);
+            double d1 = Mth.clamp(dynamic.get("BorderCenterZ").asDouble(defaultValue.centerZ), -2.9999984E7D, 2.9999984E7D);
+            double d2 = dynamic.get("BorderSize").asDouble(defaultValue.size);
+            long i = dynamic.get("BorderSizeLerpTime").asLong(defaultValue.sizeLerpTime);
+            double d3 = dynamic.get("BorderSizeLerpTarget").asDouble(defaultValue.sizeLerpTarget);
+            double d4 = dynamic.get("BorderSafeZone").asDouble(defaultValue.safeZone);
+            double d5 = dynamic.get("BorderDamagePerBlock").asDouble(defaultValue.damagePerBlock);
+            int j = dynamic.get("BorderWarningBlocks").asInt(defaultValue.warningBlocks);
+            int k = dynamic.get("BorderWarningTime").asInt(defaultValue.warningTime);
+
+            return new WorldBorder.Settings(d0, d1, d5, d4, j, k, d2, i, d3);
         }
 
         public void write(CompoundTag nbt) {
@@ -472,114 +563,8 @@
             nbt.putDouble("BorderSafeZone", this.safeZone);
             nbt.putDouble("BorderDamagePerBlock", this.damagePerBlock);
             nbt.putDouble("BorderSizeLerpTarget", this.sizeLerpTarget);
-            nbt.putDouble("BorderWarningBlocks", (double)this.warningBlocks);
-            nbt.putDouble("BorderWarningTime", (double)this.warningTime);
+            nbt.putDouble("BorderWarningBlocks", (double) this.warningBlocks);
+            nbt.putDouble("BorderWarningTime", (double) this.warningTime);
         }
     }
-
-    class StaticBorderExtent implements WorldBorder.BorderExtent {
-        private final double size;
-        private double minX;
-        private double minZ;
-        private double maxX;
-        private double maxZ;
-        private VoxelShape shape;
-
-        public StaticBorderExtent(double size) {
-            this.size = size;
-            this.updateBox();
-        }
-
-        @Override
-        public double getMinX() {
-            return this.minX;
-        }
-
-        @Override
-        public double getMaxX() {
-            return this.maxX;
-        }
-
-        @Override
-        public double getMinZ() {
-            return this.minZ;
-        }
-
-        @Override
-        public double getMaxZ() {
-            return this.maxZ;
-        }
-
-        @Override
-        public double getSize() {
-            return this.size;
-        }
-
-        @Override
-        public BorderStatus getStatus() {
-            return BorderStatus.STATIONARY;
-        }
-
-        @Override
-        public double getLerpSpeed() {
-            return 0.0;
-        }
-
-        @Override
-        public long getLerpRemainingTime() {
-            return 0L;
-        }
-
-        @Override
-        public double getLerpTarget() {
-            return this.size;
-        }
-
-        private void updateBox() {
-            this.minX = Mth.clamp(
-                WorldBorder.this.getCenterX() - this.size / 2.0, (double)(-WorldBorder.this.absoluteMaxSize), (double)WorldBorder.this.absoluteMaxSize
-            );
-            this.minZ = Mth.clamp(
-                WorldBorder.this.getCenterZ() - this.size / 2.0, (double)(-WorldBorder.this.absoluteMaxSize), (double)WorldBorder.this.absoluteMaxSize
-            );
-            this.maxX = Mth.clamp(
-                WorldBorder.this.getCenterX() + this.size / 2.0, (double)(-WorldBorder.this.absoluteMaxSize), (double)WorldBorder.this.absoluteMaxSize
-            );
-            this.maxZ = Mth.clamp(
-                WorldBorder.this.getCenterZ() + this.size / 2.0, (double)(-WorldBorder.this.absoluteMaxSize), (double)WorldBorder.this.absoluteMaxSize
-            );
-            this.shape = Shapes.join(
-                Shapes.INFINITY,
-                Shapes.box(
-                    Math.floor(this.getMinX()),
-                    Double.NEGATIVE_INFINITY,
-                    Math.floor(this.getMinZ()),
-                    Math.ceil(this.getMaxX()),
-                    Double.POSITIVE_INFINITY,
-                    Math.ceil(this.getMaxZ())
-                ),
-                BooleanOp.ONLY_FIRST
-            );
-        }
-
-        @Override
-        public void onAbsoluteMaxSizeChange() {
-            this.updateBox();
-        }
-
-        @Override
-        public void onCenterChange() {
-            this.updateBox();
-        }
-
-        @Override
-        public WorldBorder.BorderExtent update() {
-            return this;
-        }
-
-        @Override
-        public VoxelShape getCollisionShape() {
-            return this.shape;
-        }
-    }
 }
