--- a/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -7,26 +7,25 @@
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.Lifecycle;
-import com.mojang.serialization.DataResult.PartialResult;
 import java.util.HashSet;
+import java.util.Objects;
 import java.util.Set;
 import java.util.UUID;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.HolderLookup;
+import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.UUIDUtil;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.ListTag;
-import net.minecraft.nbt.NbtOps;
-import net.minecraft.nbt.NbtUtils;
-import net.minecraft.nbt.StringTag;
-import net.minecraft.nbt.Tag;
 import net.minecraft.resources.RegistryOps;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
@@ -34,21 +33,36 @@
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.WorldDataConfiguration;
 import net.minecraft.world.level.border.WorldBorder;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
-import net.minecraft.world.level.levelgen.WorldGenSettings;
 import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.timers.TimerCallbacks;
 import net.minecraft.world.level.timers.TimerQueue;
 import org.slf4j.Logger;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.NbtUtils;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket;
+import net.minecraft.world.level.levelgen.WorldDimensions;
+import net.minecraft.world.level.levelgen.WorldGenSettings;
+import org.bukkit.Bukkit;
+import org.bukkit.event.weather.ThunderChangeEvent;
+import org.bukkit.event.weather.WeatherChangeEvent;
+// CraftBukkit end
 
 public class PrimaryLevelData implements ServerLevelData, WorldData {
+
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final String LEVEL_NAME = "LevelName";
     protected static final String PLAYER = "Player";
     protected static final String WORLD_GEN_SETTINGS = "WorldGenSettings";
-    private LevelSettings settings;
+    public LevelSettings settings;
     private final WorldOptions worldOptions;
-    private final PrimaryLevelData.SpecialWorldProperty specialWorldProperty;
+    private final PrimaryLevelData.a specialWorldProperty;
     private final Lifecycle worldGenSettingsLifecycle;
     private int xSpawn;
     private int ySpawn;
@@ -78,150 +92,91 @@
     private boolean wasModded;
     private final Set<String> removedFeatureFlags;
     private final TimerQueue<MinecraftServer> scheduledEvents;
+    // CraftBukkit start - Add world and pdc
+    public Registry<LevelStem> customDimensions;
+    private ServerLevel world;
+    protected Tag pdc;
 
-    private PrimaryLevelData(
-        @Nullable CompoundTag compoundTag,
-        boolean flag,
-        int i,
-        int i1,
-        int i2,
-        float f,
-        long l,
-        long l1,
-        int i3,
-        int i4,
-        int i5,
-        boolean flag1,
-        int i6,
-        boolean flag2,
-        boolean flag3,
-        boolean flag4,
-        WorldBorder.Settings settings,
-        int i7,
-        int i8,
-        @Nullable UUID uUID,
-        Set<String> set,
-        Set<String> set1,
-        TimerQueue<MinecraftServer> timerQueue,
-        @Nullable CompoundTag compoundTag1,
-        EndDragonFight.Data data,
-        LevelSettings levelSettings,
-        WorldOptions worldOptions,
-        PrimaryLevelData.SpecialWorldProperty specialWorldProperty,
-        Lifecycle lifecycle
-    ) {
+    public void setWorld(ServerLevel world) {
+        if (this.world != null) {
+            return;
+        }
+        this.world = world;
+        world.getWorld().readBukkitValues(pdc);
+        pdc = null;
+    }
+    // CraftBukkit end
+
+    private PrimaryLevelData(@Nullable CompoundTag nbttagcompound, boolean flag, int i, int j, int k, float f, long l, long i1, int j1, int k1, int l1, boolean flag1, int i2, boolean flag2, boolean flag3, boolean flag4, WorldBorder.Settings worldborder_c, int j2, int k2, @Nullable UUID uuid, Set<String> set, Set<String> set1, TimerQueue<MinecraftServer> customfunctioncallbacktimerqueue, @Nullable CompoundTag nbttagcompound1, EndDragonFight.Data enderdragonbattle_a, LevelSettings worldsettings, WorldOptions worldoptions, PrimaryLevelData.a worlddataserver_a, Lifecycle lifecycle) {
         this.wasModded = flag;
         this.xSpawn = i;
-        this.ySpawn = i1;
-        this.zSpawn = i2;
+        this.ySpawn = j;
+        this.zSpawn = k;
         this.spawnAngle = f;
         this.gameTime = l;
-        this.dayTime = l1;
-        this.version = i3;
-        this.clearWeatherTime = i4;
-        this.rainTime = i5;
+        this.dayTime = i1;
+        this.version = j1;
+        this.clearWeatherTime = k1;
+        this.rainTime = l1;
         this.raining = flag1;
-        this.thunderTime = i6;
+        this.thunderTime = i2;
         this.thundering = flag2;
         this.initialized = flag3;
         this.difficultyLocked = flag4;
-        this.worldBorder = settings;
-        this.wanderingTraderSpawnDelay = i7;
-        this.wanderingTraderSpawnChance = i8;
-        this.wanderingTraderId = uUID;
+        this.worldBorder = worldborder_c;
+        this.wanderingTraderSpawnDelay = j2;
+        this.wanderingTraderSpawnChance = k2;
+        this.wanderingTraderId = uuid;
         this.knownServerBrands = set;
         this.removedFeatureFlags = set1;
-        this.loadedPlayerTag = compoundTag;
-        this.scheduledEvents = timerQueue;
-        this.customBossEvents = compoundTag1;
-        this.endDragonFightData = data;
-        this.settings = levelSettings;
-        this.worldOptions = worldOptions;
-        this.specialWorldProperty = specialWorldProperty;
+        this.loadedPlayerTag = nbttagcompound;
+        this.scheduledEvents = customfunctioncallbacktimerqueue;
+        this.customBossEvents = nbttagcompound1;
+        this.endDragonFightData = enderdragonbattle_a;
+        this.settings = worldsettings;
+        this.worldOptions = worldoptions;
+        this.specialWorldProperty = worlddataserver_a;
         this.worldGenSettingsLifecycle = lifecycle;
     }
 
-    public PrimaryLevelData(
-        LevelSettings settings, WorldOptions worldOptions, PrimaryLevelData.SpecialWorldProperty specialWorldProperty, Lifecycle worldGenSettingsLifecycle
-    ) {
-        this(
-            null,
-            false,
-            0,
-            0,
-            0,
-            0.0F,
-            0L,
-            0L,
-            19133,
-            0,
-            0,
-            false,
-            0,
-            false,
-            false,
-            false,
-            WorldBorder.DEFAULT_SETTINGS,
-            0,
-            0,
-            null,
-            Sets.newLinkedHashSet(),
-            new HashSet<>(),
-            new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS),
-            null,
-            EndDragonFight.Data.DEFAULT,
-            settings.copy(),
-            worldOptions,
-            specialWorldProperty,
-            worldGenSettingsLifecycle
-        );
+    public PrimaryLevelData(LevelSettings settings, WorldOptions worldOptions, PrimaryLevelData.a specialWorldProperty, Lifecycle worldGenSettingsLifecycle) {
+        this((CompoundTag) null, false, 0, 0, 0, 0.0F, 0L, 0L, 19133, 0, 0, false, 0, false, false, false, WorldBorder.DEFAULT_SETTINGS, 0, 0, (UUID) null, Sets.newLinkedHashSet(), new HashSet(), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS), (CompoundTag) null, EndDragonFight.Data.DEFAULT, settings.copy(), worldOptions, specialWorldProperty, worldGenSettingsLifecycle);
     }
 
-    public static <T> PrimaryLevelData parse(
-        Dynamic<T> dynamic,
-        LevelSettings levelSettings,
-        PrimaryLevelData.SpecialWorldProperty specialWorldProperty,
-        WorldOptions worldOptions,
-        Lifecycle lifecycle
-    ) {
-        long _long = dynamic.get("Time").asLong(0L);
-        return new PrimaryLevelData(
-            CompoundTag.CODEC.parse(dynamic.get("Player").orElseEmptyMap()).result().orElse(null),
-            dynamic.get("WasModded").asBoolean(false),
-            dynamic.get("SpawnX").asInt(0),
-            dynamic.get("SpawnY").asInt(0),
-            dynamic.get("SpawnZ").asInt(0),
-            dynamic.get("SpawnAngle").asFloat(0.0F),
-            _long,
-            dynamic.get("DayTime").asLong(_long),
-            LevelVersion.parse(dynamic).levelDataVersion(),
-            dynamic.get("clearWeatherTime").asInt(0),
-            dynamic.get("rainTime").asInt(0),
-            dynamic.get("raining").asBoolean(false),
-            dynamic.get("thunderTime").asInt(0),
-            dynamic.get("thundering").asBoolean(false),
-            dynamic.get("initialized").asBoolean(true),
-            dynamic.get("DifficultyLocked").asBoolean(false),
-            WorldBorder.Settings.read(dynamic, WorldBorder.DEFAULT_SETTINGS),
-            dynamic.get("WanderingTraderSpawnDelay").asInt(0),
-            dynamic.get("WanderingTraderSpawnChance").asInt(0),
-            dynamic.get("WanderingTraderId").read(UUIDUtil.CODEC).result().orElse(null),
-            dynamic.get("ServerBrands")
-                .asStream()
-                .flatMap(brandsDynamic -> brandsDynamic.asString().result().stream())
-                .collect(Collectors.toCollection(Sets::newLinkedHashSet)),
-            dynamic.get("removed_features")
-                .asStream()
-                .flatMap(removedFeaturesDynamic -> removedFeaturesDynamic.asString().result().stream())
-                .collect(Collectors.toSet()),
-            new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS, dynamic.get("ScheduledEvents").asStream()),
-            (CompoundTag)dynamic.get("CustomBossEvents").orElseEmptyMap().getValue(),
-            dynamic.get("DragonFight").read(EndDragonFight.Data.CODEC).resultOrPartial(LOGGER::error).orElse(EndDragonFight.Data.DEFAULT),
-            levelSettings,
-            worldOptions,
-            specialWorldProperty,
-            lifecycle
-        );
+    public static <T> PrimaryLevelData parse(Dynamic<T> dynamic, LevelSettings worldsettings, PrimaryLevelData.a worlddataserver_a, WorldOptions worldoptions, Lifecycle lifecycle) {
+        long i = dynamic.get("Time").asLong(0L);
+        CompoundTag nbttagcompound = (CompoundTag) CompoundTag.CODEC.parse(dynamic.get("Player").orElseEmptyMap()).result().orElse(null); // CraftBukkit - decompile error
+        boolean flag = dynamic.get("WasModded").asBoolean(false);
+        int j = dynamic.get("SpawnX").asInt(0);
+        int k = dynamic.get("SpawnY").asInt(0);
+        int l = dynamic.get("SpawnZ").asInt(0);
+        float f = dynamic.get("SpawnAngle").asFloat(0.0F);
+        long i1 = dynamic.get("DayTime").asLong(i);
+        int j1 = LevelVersion.parse(dynamic).levelDataVersion();
+        int k1 = dynamic.get("clearWeatherTime").asInt(0);
+        int l1 = dynamic.get("rainTime").asInt(0);
+        boolean flag1 = dynamic.get("raining").asBoolean(false);
+        int i2 = dynamic.get("thunderTime").asInt(0);
+        boolean flag2 = dynamic.get("thundering").asBoolean(false);
+        boolean flag3 = dynamic.get("initialized").asBoolean(true);
+        boolean flag4 = dynamic.get("DifficultyLocked").asBoolean(false);
+        WorldBorder.Settings worldborder_c = WorldBorder.Settings.read(dynamic, WorldBorder.DEFAULT_SETTINGS);
+        int j2 = dynamic.get("WanderingTraderSpawnDelay").asInt(0);
+        int k2 = dynamic.get("WanderingTraderSpawnChance").asInt(0);
+        UUID uuid = (UUID) dynamic.get("WanderingTraderId").read(UUIDUtil.CODEC).result().orElse(null); // CraftBukkit - decompile error
+        Set set = (Set) dynamic.get("ServerBrands").asStream().flatMap((dynamic1) -> {
+            return dynamic1.asString().result().stream();
+        }).collect(Collectors.toCollection(Sets::newLinkedHashSet));
+        Set set1 = (Set) dynamic.get("removed_features").asStream().flatMap((dynamic1) -> {
+            return dynamic1.asString().result().stream();
+        }).collect(Collectors.toSet());
+        TimerQueue customfunctioncallbacktimerqueue = new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS, dynamic.get("ScheduledEvents").asStream());
+        CompoundTag nbttagcompound1 = (CompoundTag) dynamic.get("CustomBossEvents").orElseEmptyMap().getValue();
+        DataResult<EndDragonFight.Data> dataresult = dynamic.get("DragonFight").read(EndDragonFight.Data.CODEC); // CraftBukkit - decompile error
+        Logger logger = PrimaryLevelData.LOGGER;
+
+        Objects.requireNonNull(logger);
+        return new PrimaryLevelData(nbttagcompound, flag, j, k, l, f, i, i1, j1, k1, l1, flag1, i2, flag2, flag3, flag4, worldborder_c, j2, k2, uuid, set, set1, customfunctioncallbacktimerqueue, nbttagcompound1, (EndDragonFight.Data) dataresult.resultOrPartial(logger::error).orElse(EndDragonFight.Data.DEFAULT), worldsettings, worldoptions, worlddataserver_a, lifecycle);
     }
 
     @Override
@@ -230,9 +185,10 @@
             hostPlayerNBT = this.loadedPlayerTag;
         }
 
-        CompoundTag compoundTag = new CompoundTag();
-        this.setTagData(registries, compoundTag, hostPlayerNBT);
-        return compoundTag;
+        CompoundTag nbttagcompound1 = new CompoundTag();
+
+        this.setTagData(registries, nbttagcompound1, hostPlayerNBT);
+        return nbttagcompound1;
     }
 
     private void setTagData(RegistryAccess registry, CompoundTag nbt, @Nullable CompoundTag playerNBT) {
@@ -242,17 +198,22 @@
             nbt.put("removed_features", stringCollectionToTag(this.removedFeatureFlags));
         }
 
-        CompoundTag compoundTag = new CompoundTag();
-        compoundTag.putString("Name", SharedConstants.getCurrentVersion().getName());
-        compoundTag.putInt("Id", SharedConstants.getCurrentVersion().getDataVersion().getVersion());
-        compoundTag.putBoolean("Snapshot", !SharedConstants.getCurrentVersion().isStable());
-        compoundTag.putString("Series", SharedConstants.getCurrentVersion().getDataVersion().getSeries());
-        nbt.put("Version", compoundTag);
+        CompoundTag nbttagcompound2 = new CompoundTag();
+
+        nbttagcompound2.putString("Name", SharedConstants.getCurrentVersion().getName());
+        nbttagcompound2.putInt("Id", SharedConstants.getCurrentVersion().getDataVersion().getVersion());
+        nbttagcompound2.putBoolean("Snapshot", !SharedConstants.getCurrentVersion().isStable());
+        nbttagcompound2.putString("Series", SharedConstants.getCurrentVersion().getDataVersion().getSeries());
+        nbt.put("Version", nbttagcompound2);
         NbtUtils.addCurrentDataVersion(nbt);
-        DynamicOps<Tag> dynamicOps = RegistryOps.create(NbtOps.INSTANCE, registry);
-        WorldGenSettings.encode(dynamicOps, this.worldOptions, registry)
-            .resultOrPartial(Util.prefix("WorldGenSettings: ", LOGGER::error))
-            .ifPresent(worldOptionsTag -> nbt.put("WorldGenSettings", worldOptionsTag));
+        DynamicOps<Tag> dynamicops = RegistryOps.create(NbtOps.INSTANCE, (HolderLookup.Provider) registry);
+        DataResult<Tag> dataresult = WorldGenSettings.encode(dynamicops, this.worldOptions, new WorldDimensions(this.customDimensions != null ? this.customDimensions : registry.registryOrThrow(Registries.LEVEL_STEM))); // CraftBukkit
+        Logger logger = PrimaryLevelData.LOGGER;
+
+        Objects.requireNonNull(logger);
+        dataresult.resultOrPartial(Util.prefix("WorldGenSettings: ", logger::error)).ifPresent((nbtbase) -> {
+            nbt.put("WorldGenSettings", nbtbase);
+        });
         nbt.putInt("GameType", this.settings.gameType().getId());
         nbt.putInt("SpawnX", this.xSpawn);
         nbt.putInt("SpawnY", this.ySpawn);
@@ -272,18 +233,21 @@
         nbt.putBoolean("allowCommands", this.settings.allowCommands());
         nbt.putBoolean("initialized", this.initialized);
         this.worldBorder.write(nbt);
-        nbt.putByte("Difficulty", (byte)this.settings.difficulty().getId());
+        nbt.putByte("Difficulty", (byte) this.settings.difficulty().getId());
         nbt.putBoolean("DifficultyLocked", this.difficultyLocked);
         nbt.put("GameRules", this.settings.gameRules().createTag());
-        nbt.put("DragonFight", Util.getOrThrow(EndDragonFight.Data.CODEC.encodeStart(NbtOps.INSTANCE, this.endDragonFightData), IllegalStateException::new));
+        nbt.put("DragonFight", (Tag) Util.getOrThrow(EndDragonFight.Data.CODEC.encodeStart(NbtOps.INSTANCE, this.endDragonFightData), IllegalStateException::new));
         if (playerNBT != null) {
             nbt.put("Player", playerNBT);
         }
 
-        DataResult<Tag> dataResult = WorldDataConfiguration.CODEC.encodeStart(NbtOps.INSTANCE, this.settings.getDataConfiguration());
-        dataResult.get()
-            .ifLeft(dataConfigurationTag -> nbt.merge((CompoundTag)dataConfigurationTag))
-            .ifRight(partialResult -> LOGGER.warn("Failed to encode configuration {}", partialResult.message()));
+        DataResult<Tag> dataresult1 = WorldDataConfiguration.CODEC.encodeStart(NbtOps.INSTANCE, this.settings.getDataConfiguration());
+
+        dataresult1.get().ifLeft((nbtbase) -> {
+            nbt.merge((CompoundTag) nbtbase);
+        }).ifRight((partialresult) -> {
+            PrimaryLevelData.LOGGER.warn("Failed to encode configuration {}", partialresult.message());
+        });
         if (this.customBossEvents != null) {
             nbt.put("CustomBossEvents", this.customBossEvents);
         }
@@ -294,12 +258,18 @@
         if (this.wanderingTraderId != null) {
             nbt.putUUID("WanderingTraderId", this.wanderingTraderId);
         }
+
+        nbt.putString("Bukkit.Version", Bukkit.getName() + "/" + Bukkit.getVersion() + "/" + Bukkit.getBukkitVersion()); // CraftBukkit
+        world.getWorld().storeBukkitValues(nbt); // CraftBukkit - add pdc
     }
 
     private static ListTag stringCollectionToTag(Set<String> stringCollection) {
-        ListTag list = new ListTag();
-        stringCollection.stream().map(StringTag::valueOf).forEach(list::add);
-        return list;
+        ListTag nbttaglist = new ListTag();
+        Stream<StringTag> stream = stringCollection.stream().map(StringTag::valueOf); // CraftBukkit - decompile error
+
+        Objects.requireNonNull(nbttaglist);
+        stream.forEach(nbttaglist::add);
+        return nbttaglist;
     }
 
     @Override
@@ -403,6 +373,20 @@
 
     @Override
     public void setThundering(boolean thundering) {
+        // CraftBukkit start
+        if (this.thundering == thundering) {
+            return;
+        }
+
+        org.bukkit.World world = Bukkit.getWorld(getLevelName());
+        if (world != null) {
+            ThunderChangeEvent thunder = new ThunderChangeEvent(world, thundering);
+            Bukkit.getServer().getPluginManager().callEvent(thunder);
+            if (thunder.isCancelled()) {
+                return;
+            }
+        }
+        // CraftBukkit end
         this.thundering = thundering;
     }
 
@@ -423,6 +407,20 @@
 
     @Override
     public void setRaining(boolean isRaining) {
+        // CraftBukkit start
+        if (this.raining == isRaining) {
+            return;
+        }
+
+        org.bukkit.World world = Bukkit.getWorld(getLevelName());
+        if (world != null) {
+            WeatherChangeEvent weather = new WeatherChangeEvent(world, isRaining);
+            Bukkit.getServer().getPluginManager().callEvent(weather);
+            if (weather.isCancelled()) {
+                return;
+            }
+        }
+        // CraftBukkit end
         this.raining = isRaining;
     }
 
@@ -489,6 +487,12 @@
     @Override
     public void setDifficulty(Difficulty difficulty) {
         this.settings = this.settings.withDifficulty(difficulty);
+        // CraftBukkit start
+        ClientboundChangeDifficultyPacket packet = new ClientboundChangeDifficultyPacket(this.getDifficulty(), this.isDifficultyLocked());
+        for (ServerPlayer player : (java.util.List<ServerPlayer>) (java.util.List) world.players()) {
+            player.connection.send(packet);
+        }
+        // CraftBukkit end
     }
 
     @Override
@@ -519,12 +523,12 @@
 
     @Override
     public boolean isFlatWorld() {
-        return this.specialWorldProperty == PrimaryLevelData.SpecialWorldProperty.FLAT;
+        return this.specialWorldProperty == PrimaryLevelData.a.FLAT;
     }
 
     @Override
     public boolean isDebugWorld() {
-        return this.specialWorldProperty == PrimaryLevelData.SpecialWorldProperty.DEBUG;
+        return this.specialWorldProperty == PrimaryLevelData.a.DEBUG;
     }
 
     @Override
@@ -625,10 +629,20 @@
         return this.settings.copy();
     }
 
+    // CraftBukkit start - Check if the name stored in NBT is the correct one
+    public void checkName(String name) {
+        if (!this.settings.levelName.equals(name)) {
+            this.settings.levelName = name;
+        }
+    }
+    // CraftBukkit end
+
+    /** @deprecated */
     @Deprecated
-    public static enum SpecialWorldProperty {
-        NONE,
-        FLAT,
-        DEBUG;
+    public static enum a {
+
+        NONE, FLAT, DEBUG;
+
+        private a() {}
     }
 }
