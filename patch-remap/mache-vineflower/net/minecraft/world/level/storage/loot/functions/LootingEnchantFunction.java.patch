--- a/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
+++ b/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
@@ -4,7 +4,6 @@
 import com.google.common.collect.Sets;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
-import com.mojang.serialization.codecs.RecordCodecBuilder.Instance;
 import java.util.List;
 import java.util.Set;
 import net.minecraft.util.ExtraCodecs;
@@ -20,23 +19,21 @@
 import net.minecraft.world.level.storage.loot.providers.number.NumberProviders;
 
 public class LootingEnchantFunction extends LootItemConditionalFunction {
+
     public static final int NO_LIMIT = 0;
-    public static final Codec<LootingEnchantFunction> CODEC = RecordCodecBuilder.create(
-        instance -> commonFields(instance)
-                .and(
-                    instance.group(
-                        NumberProviders.CODEC.fieldOf("count").forGetter(lootingEnchantFunction -> lootingEnchantFunction.value),
-                        ExtraCodecs.strictOptionalField(Codec.INT, "limit", 0).forGetter(lootingEnchantFunction -> lootingEnchantFunction.limit)
-                    )
-                )
-                .apply(instance, LootingEnchantFunction::new)
-    );
+    public static final Codec<LootingEnchantFunction> CODEC = RecordCodecBuilder.create((instance) -> {
+        return commonFields(instance).and(instance.group(NumberProviders.CODEC.fieldOf("count").forGetter((lootenchantfunction) -> {
+            return lootenchantfunction.value;
+        }), ExtraCodecs.strictOptionalField(Codec.INT, "limit", 0).forGetter((lootenchantfunction) -> {
+            return lootenchantfunction.limit;
+        }))).apply(instance, LootingEnchantFunction::new);
+    });
     private final NumberProvider value;
     private final int limit;
 
-    LootingEnchantFunction(List<LootItemCondition> list, NumberProvider numberProvider, int i) {
+    LootingEnchantFunction(List<LootItemCondition> list, NumberProvider numberprovider, int i) {
         super(list);
-        this.value = numberProvider;
+        this.value = numberprovider;
         this.limit = i;
     }
 
@@ -56,14 +53,22 @@
 
     @Override
     public ItemStack run(ItemStack stack, LootContext context) {
-        Entity entity = context.getParamOrNull(LootContextParams.KILLER_ENTITY);
+        Entity entity = (Entity) context.getParamOrNull(LootContextParams.KILLER_ENTITY);
+
         if (entity instanceof LivingEntity) {
-            int mobLooting = EnchantmentHelper.getMobLooting((LivingEntity)entity);
-            if (mobLooting == 0) {
+            int i = EnchantmentHelper.getMobLooting((LivingEntity) entity);
+            // CraftBukkit start - use lootingModifier if set by plugin
+            if (context.hasParam(LootContextParams.LOOTING_MOD)) {
+                i = context.getParamOrNull(LootContextParams.LOOTING_MOD);
+            }
+            // CraftBukkit end
+
+            if (i <= 0) { // CraftBukkit - account for possible negative looting values from Bukkit
                 return stack;
             }
 
-            float f = (float)mobLooting * this.value.getFloat(context);
+            float f = (float) i * this.value.getFloat(context);
+
             stack.grow(Math.round(f));
             if (this.hasLimit() && stack.getCount() > this.limit) {
                 stack.setCount(this.limit);
@@ -77,7 +82,8 @@
         return new LootingEnchantFunction.Builder(lootingMultiplier);
     }
 
-    public static class Builder extends LootItemConditionalFunction.Builder<LootingEnchantFunction.Builder> {
+    public static class Builder extends LootItemConditionalFunction.a<LootingEnchantFunction.Builder> {
+
         private final NumberProvider count;
         private int limit = 0;
 
