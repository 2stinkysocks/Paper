--- a/net/minecraft/world/level/block/TrapDoorBlock.java
+++ b/net/minecraft/world/level/block/TrapDoorBlock.java
@@ -2,14 +2,14 @@
 
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
-import com.mojang.serialization.codecs.RecordCodecBuilder.Instance;
 import java.util.function.BiConsumer;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.sounds.SoundSource;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.context.BlockPlaceContext;
@@ -18,7 +18,7 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockSetType;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
@@ -26,85 +26,81 @@
 import net.minecraft.world.level.block.state.properties.EnumProperty;
 import net.minecraft.world.level.block.state.properties.Half;
 import net.minecraft.world.level.gameevent.GameEvent;
+import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
-import net.minecraft.world.level.pathfinder.PathComputationType;
+import net.minecraft.world.level.pathfinder.PathMode;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
 
 public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleWaterloggedBlock {
-    public static final MapCodec<TrapDoorBlock> CODEC = RecordCodecBuilder.mapCodec(
-        instance -> instance.group(BlockSetType.CODEC.fieldOf("block_set_type").forGetter(trapDoorBlock -> trapDoorBlock.type), propertiesCodec())
-                .apply(instance, TrapDoorBlock::new)
-    );
+
+    public static final MapCodec<TrapDoorBlock> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
+        return instance.group(BlockSetType.CODEC.fieldOf("block_set_type").forGetter((blocktrapdoor) -> {
+            return blocktrapdoor.type;
+        }), propertiesCodec()).apply(instance, TrapDoorBlock::new);
+    });
     public static final BooleanProperty OPEN = BlockStateProperties.OPEN;
     public static final EnumProperty<Half> HALF = BlockStateProperties.HALF;
     public static final BooleanProperty POWERED = BlockStateProperties.POWERED;
     public static final BooleanProperty WATERLOGGED = BlockStateProperties.WATERLOGGED;
     protected static final int AABB_THICKNESS = 3;
-    protected static final VoxelShape EAST_OPEN_AABB = Block.box(0.0, 0.0, 0.0, 3.0, 16.0, 16.0);
-    protected static final VoxelShape WEST_OPEN_AABB = Block.box(13.0, 0.0, 0.0, 16.0, 16.0, 16.0);
-    protected static final VoxelShape SOUTH_OPEN_AABB = Block.box(0.0, 0.0, 0.0, 16.0, 16.0, 3.0);
-    protected static final VoxelShape NORTH_OPEN_AABB = Block.box(0.0, 0.0, 13.0, 16.0, 16.0, 16.0);
-    protected static final VoxelShape BOTTOM_AABB = Block.box(0.0, 0.0, 0.0, 16.0, 3.0, 16.0);
-    protected static final VoxelShape TOP_AABB = Block.box(0.0, 13.0, 0.0, 16.0, 16.0, 16.0);
+    protected static final VoxelShape EAST_OPEN_AABB = Block.box(0.0D, 0.0D, 0.0D, 3.0D, 16.0D, 16.0D);
+    protected static final VoxelShape WEST_OPEN_AABB = Block.box(13.0D, 0.0D, 0.0D, 16.0D, 16.0D, 16.0D);
+    protected static final VoxelShape SOUTH_OPEN_AABB = Block.box(0.0D, 0.0D, 0.0D, 16.0D, 16.0D, 3.0D);
+    protected static final VoxelShape NORTH_OPEN_AABB = Block.box(0.0D, 0.0D, 13.0D, 16.0D, 16.0D, 16.0D);
+    protected static final VoxelShape BOTTOM_AABB = Block.box(0.0D, 0.0D, 0.0D, 16.0D, 3.0D, 16.0D);
+    protected static final VoxelShape TOP_AABB = Block.box(0.0D, 13.0D, 0.0D, 16.0D, 16.0D, 16.0D);
     private final BlockSetType type;
 
     @Override
     public MapCodec<? extends TrapDoorBlock> codec() {
-        return CODEC;
+        return TrapDoorBlock.CODEC;
     }
 
-    protected TrapDoorBlock(BlockSetType blockSetType, BlockBehaviour.Properties properties) {
-        super(properties.sound(blockSetType.soundType()));
-        this.type = blockSetType;
-        this.registerDefaultState(
-            this.stateDefinition
-                .any()
-                .setValue(FACING, Direction.NORTH)
-                .setValue(OPEN, Boolean.valueOf(false))
-                .setValue(HALF, Half.BOTTOM)
-                .setValue(POWERED, Boolean.valueOf(false))
-                .setValue(WATERLOGGED, Boolean.valueOf(false))
-        );
+    protected TrapDoorBlock(BlockSetType blocksettype, BlockBehaviour.Properties blockbase_info) {
+        super(blockbase_info.sound(blocksettype.soundType()));
+        this.type = blocksettype;
+        this.registerDefaultState((IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(TrapDoorBlock.FACING, Direction.NORTH)).setValue(TrapDoorBlock.OPEN, false)).setValue(TrapDoorBlock.HALF, Half.BOTTOM)).setValue(TrapDoorBlock.POWERED, false)).setValue(TrapDoorBlock.WATERLOGGED, false));
     }
 
     @Override
-    public VoxelShape getShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext context) {
-        if (!state.getValue(OPEN)) {
-            return state.getValue(HALF) == Half.TOP ? TOP_AABB : BOTTOM_AABB;
+    public VoxelShape getShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
+        if (!(Boolean) state.getValue(TrapDoorBlock.OPEN)) {
+            return state.getValue(TrapDoorBlock.HALF) == Half.TOP ? TrapDoorBlock.TOP_AABB : TrapDoorBlock.BOTTOM_AABB;
         } else {
-            switch ((Direction)state.getValue(FACING)) {
+            switch ((Direction) state.getValue(TrapDoorBlock.FACING)) {
                 case NORTH:
                 default:
-                    return NORTH_OPEN_AABB;
+                    return TrapDoorBlock.NORTH_OPEN_AABB;
                 case SOUTH:
-                    return SOUTH_OPEN_AABB;
+                    return TrapDoorBlock.SOUTH_OPEN_AABB;
                 case WEST:
-                    return WEST_OPEN_AABB;
+                    return TrapDoorBlock.WEST_OPEN_AABB;
                 case EAST:
-                    return EAST_OPEN_AABB;
+                    return TrapDoorBlock.EAST_OPEN_AABB;
             }
         }
     }
 
     @Override
-    public boolean isPathfindable(BlockState state, BlockGetter level, BlockPos pos, PathComputationType type) {
+    public boolean isPathfindable(IBlockData state, BlockGetter level, BlockPos pos, PathMode type) {
         switch (type) {
             case LAND:
-                return state.getValue(OPEN);
+                return (Boolean) state.getValue(TrapDoorBlock.OPEN);
             case WATER:
-                return state.getValue(WATERLOGGED);
+                return (Boolean) state.getValue(TrapDoorBlock.WATERLOGGED);
             case AIR:
-                return state.getValue(OPEN);
+                return (Boolean) state.getValue(TrapDoorBlock.OPEN);
             default:
                 return false;
         }
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+    public InteractionResult use(IBlockData state, Level level, BlockPos pos, Player player, EnumHand hand, BlockHitResult hit) {
         if (!this.type.canOpenByHand()) {
             return InteractionResult.PASS;
         } else {
@@ -114,86 +110,96 @@
     }
 
     @Override
-    public void onExplosionHit(BlockState blockState, Level level, BlockPos blockPos, Explosion explosion, BiConsumer<ItemStack, BlockPos> biConsumer) {
-        if (explosion.getBlockInteraction() == Explosion.BlockInteraction.TRIGGER_BLOCK
-            && !level.isClientSide()
-            && this.type.canOpenByWindCharge()
-            && !blockState.getValue(POWERED)) {
-            this.toggle(blockState, level, blockPos, null);
+    public void onExplosionHit(IBlockData iblockdata, Level world, BlockPos blockposition, Explosion explosion, BiConsumer<ItemStack, BlockPos> biconsumer) {
+        if (explosion.getBlockInteraction() == Explosion.Effect.TRIGGER_BLOCK && !world.isClientSide() && this.type.canOpenByWindCharge() && !(Boolean) iblockdata.getValue(TrapDoorBlock.POWERED)) {
+            this.toggle(iblockdata, world, blockposition, (Player) null);
         }
 
-        super.onExplosionHit(blockState, level, blockPos, explosion, biConsumer);
+        super.onExplosionHit(iblockdata, world, blockposition, explosion, biconsumer);
     }
 
-    private void toggle(BlockState blockState, Level level, BlockPos blockPos, @Nullable Player player) {
-        BlockState blockState1 = blockState.cycle(OPEN);
-        level.setBlock(blockPos, blockState1, 2);
-        if (blockState1.getValue(WATERLOGGED)) {
-            level.scheduleTick(blockPos, Fluids.WATER, Fluids.WATER.getTickDelay(level));
+    private void toggle(IBlockData iblockdata, Level world, BlockPos blockposition, @Nullable Player entityhuman) {
+        IBlockData iblockdata1 = (IBlockData) iblockdata.cycle(TrapDoorBlock.OPEN);
+
+        world.setBlock(blockposition, iblockdata1, 2);
+        if ((Boolean) iblockdata1.getValue(TrapDoorBlock.WATERLOGGED)) {
+            world.scheduleTick(blockposition, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
-        this.playSound(player, level, blockPos, blockState1.getValue(OPEN));
+        this.playSound(entityhuman, world, blockposition, (Boolean) iblockdata1.getValue(TrapDoorBlock.OPEN));
     }
 
     protected void playSound(@Nullable Player player, Level level, BlockPos pos, boolean isOpened) {
-        level.playSound(
-            player, pos, isOpened ? this.type.trapdoorOpen() : this.type.trapdoorClose(), SoundSource.BLOCKS, 1.0F, level.getRandom().nextFloat() * 0.1F + 0.9F
-        );
-        level.gameEvent(player, isOpened ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
+        level.playSound(player, pos, isOpened ? this.type.trapdoorOpen() : this.type.trapdoorClose(), SoundSource.BLOCKS, 1.0F, level.getRandom().nextFloat() * 0.1F + 0.9F);
+        level.gameEvent((Entity) player, isOpened ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
     }
 
     @Override
-    public void neighborChanged(BlockState state, Level level, BlockPos pos, Block block, BlockPos fromPos, boolean isMoving) {
+    public void neighborChanged(IBlockData state, Level level, BlockPos pos, Block block, BlockPos fromPos, boolean isMoving) {
         if (!level.isClientSide) {
-            boolean hasNeighborSignal = level.hasNeighborSignal(pos);
-            if (hasNeighborSignal != state.getValue(POWERED)) {
-                if (state.getValue(OPEN) != hasNeighborSignal) {
-                    state = state.setValue(OPEN, Boolean.valueOf(hasNeighborSignal));
-                    this.playSound(null, level, pos, hasNeighborSignal);
+            boolean flag1 = level.hasNeighborSignal(pos);
+
+            if (flag1 != (Boolean) state.getValue(TrapDoorBlock.POWERED)) {
+                // CraftBukkit start
+                org.bukkit.World bworld = level.getWorld();
+                org.bukkit.block.Block bblock = bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+
+                int power = bblock.getBlockPower();
+                int oldPower = (Boolean) state.getValue(OPEN) ? 15 : 0;
+
+                if (oldPower == 0 ^ power == 0 || block.defaultBlockState().isSignalSource()) {
+                    BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bblock, oldPower, power);
+                    level.getCraftServer().getPluginManager().callEvent(eventRedstone);
+                    flag1 = eventRedstone.getNewCurrent() > 0;
                 }
+                // CraftBukkit end
+                if ((Boolean) state.getValue(TrapDoorBlock.OPEN) != flag1) {
+                    state = (IBlockData) state.setValue(TrapDoorBlock.OPEN, flag1);
+                    this.playSound((Player) null, level, pos, flag1);
+                }
 
-                level.setBlock(pos, state.setValue(POWERED, Boolean.valueOf(hasNeighborSignal)), 2);
-                if (state.getValue(WATERLOGGED)) {
-                    level.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(level));
+                level.setBlock(pos, (IBlockData) state.setValue(TrapDoorBlock.POWERED, flag1), 2);
+                if ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)) {
+                    level.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(level));
                 }
             }
+
         }
     }
 
     @Override
-    public BlockState getStateForPlacement(BlockPlaceContext context) {
-        BlockState blockState = this.defaultBlockState();
-        FluidState fluidState = context.getLevel().getFluidState(context.getClickedPos());
-        Direction clickedFace = context.getClickedFace();
-        if (!context.replacingClickedOnBlock() && clickedFace.getAxis().isHorizontal()) {
-            blockState = blockState.setValue(FACING, clickedFace)
-                .setValue(HALF, context.getClickLocation().y - (double)context.getClickedPos().getY() > 0.5 ? Half.TOP : Half.BOTTOM);
+    public IBlockData getStateForPlacement(BlockPlaceContext context) {
+        IBlockData iblockdata = this.defaultBlockState();
+        FluidState fluid = context.getLevel().getFluidState(context.getClickedPos());
+        Direction enumdirection = context.getClickedFace();
+
+        if (!context.replacingClickedOnBlock() && enumdirection.getAxis().isHorizontal()) {
+            iblockdata = (IBlockData) ((IBlockData) iblockdata.setValue(TrapDoorBlock.FACING, enumdirection)).setValue(TrapDoorBlock.HALF, context.getClickLocation().y - (double) context.getClickedPos().getY() > 0.5D ? Half.TOP : Half.BOTTOM);
         } else {
-            blockState = blockState.setValue(FACING, context.getHorizontalDirection().getOpposite())
-                .setValue(HALF, clickedFace == Direction.UP ? Half.BOTTOM : Half.TOP);
+            iblockdata = (IBlockData) ((IBlockData) iblockdata.setValue(TrapDoorBlock.FACING, context.getHorizontalDirection().getOpposite())).setValue(TrapDoorBlock.HALF, enumdirection == Direction.UP ? Half.BOTTOM : Half.TOP);
         }
 
         if (context.getLevel().hasNeighborSignal(context.getClickedPos())) {
-            blockState = blockState.setValue(OPEN, Boolean.valueOf(true)).setValue(POWERED, Boolean.valueOf(true));
+            iblockdata = (IBlockData) ((IBlockData) iblockdata.setValue(TrapDoorBlock.OPEN, true)).setValue(TrapDoorBlock.POWERED, true);
         }
 
-        return blockState.setValue(WATERLOGGED, Boolean.valueOf(fluidState.getType() == Fluids.WATER));
+        return (IBlockData) iblockdata.setValue(TrapDoorBlock.WATERLOGGED, fluid.getType() == Fluids.WATER);
     }
 
     @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(FACING, OPEN, HALF, POWERED, WATERLOGGED);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(TrapDoorBlock.FACING, TrapDoorBlock.OPEN, TrapDoorBlock.HALF, TrapDoorBlock.POWERED, TrapDoorBlock.WATERLOGGED);
     }
 
     @Override
-    public FluidState getFluidState(BlockState state) {
-        return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+    public FluidState getFluidState(IBlockData state) {
+        return (Boolean) state.getValue(TrapDoorBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
-    public BlockState updateShape(BlockState state, Direction facing, BlockState facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
-        if (state.getValue(WATERLOGGED)) {
-            level.scheduleTick(currentPos, Fluids.WATER, Fluids.WATER.getTickDelay(level));
+    public IBlockData updateShape(IBlockData state, Direction facing, IBlockData facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
+        if ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)) {
+            level.scheduleTick(currentPos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(level));
         }
 
         return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
