--- a/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java
@@ -12,29 +12,83 @@
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.RandomizableContainer;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.ticks.ContainerSingleItem;
 
+// CraftBukkit start
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class DecoratedPotBlockEntity extends BlockEntity implements RandomizableContainer, ContainerSingleItem {
+
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new ArrayList<>();
+    private int maxStack = MAX_STACK;
+
+    @Override
+    public List<ItemStack> getContents() {
+        return Arrays.asList(this.item);
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+       return maxStack;
+    }
+
+    @Override
+    public void setMaxStackSize(int i) {
+        maxStack = i;
+    }
+
+    @Override
+    public Location getLocation() {
+        if (level == null) return null;
+        return CraftLocation.toBukkit(worldPosition, level.getWorld());
+    }
+    // CraftBukkit end
+
     public static final String TAG_SHERDS = "sherds";
     public static final String TAG_ITEM = "item";
     public static final int EVENT_POT_WOBBLES = 1;
     public long wobbleStartedAtTick;
     @Nullable
-    public DecoratedPotBlockEntity.WobbleStyle lastWobbleStyle;
-    private DecoratedPotBlockEntity.Decorations decorations;
-    private ItemStack item = ItemStack.EMPTY;
+    public DecoratedPotBlockEntity.b lastWobbleStyle;
+    public DecoratedPotBlockEntity.Decorations decorations;
+    private ItemStack item;
     @Nullable
     protected ResourceLocation lootTable;
     protected long lootTableSeed;
 
-    public DecoratedPotBlockEntity(BlockPos pos, BlockState state) {
+    public DecoratedPotBlockEntity(BlockPos pos, IBlockData state) {
         super(BlockEntityType.DECORATED_POT, pos, state);
+        this.item = ItemStack.EMPTY;
         this.decorations = DecoratedPotBlockEntity.Decorations.EMPTY;
     }
 
@@ -45,6 +99,7 @@
         if (!this.trySaveLootTable(tag) && !this.item.isEmpty()) {
             tag.put("item", this.item.save(new CompoundTag()));
         }
+
     }
 
     @Override
@@ -58,6 +113,7 @@
                 this.item = ItemStack.EMPTY;
             }
         }
+
     }
 
     @Override
@@ -71,7 +127,7 @@
     }
 
     public Direction getDirection() {
-        return this.getBlockState().getValue(BlockStateProperties.HORIZONTAL_FACING);
+        return (Direction) this.getBlockState().getValue(BlockStateProperties.HORIZONTAL_FACING);
     }
 
     public DecoratedPotBlockEntity.Decorations getDecorations() {
@@ -86,11 +142,12 @@
         return createDecoratedPotItem(this.decorations);
     }
 
-    public static ItemStack createDecoratedPotItem(DecoratedPotBlockEntity.Decorations decorations) {
-        ItemStack defaultInstance = Items.DECORATED_POT.getDefaultInstance();
-        CompoundTag compoundTag = decorations.save(new CompoundTag());
-        BlockItem.setBlockEntityData(defaultInstance, BlockEntityType.DECORATED_POT, compoundTag);
-        return defaultInstance;
+    public static ItemStack createDecoratedPotItem(DecoratedPotBlockEntity.Decorations decoratedpotblockentity_decoration) {
+        ItemStack itemstack = Items.DECORATED_POT.getDefaultInstance();
+        CompoundTag nbttagcompound = decoratedpotblockentity_decoration.save(new CompoundTag());
+
+        BlockItem.setBlockEntityData(itemstack, BlockEntityType.DECORATED_POT, nbttagcompound);
+        return itemstack;
     }
 
     @Nullable
@@ -100,8 +157,8 @@
     }
 
     @Override
-    public void setLootTable(@Nullable ResourceLocation resourceLocation) {
-        this.lootTable = resourceLocation;
+    public void setLootTable(@Nullable ResourceLocation minecraftkey) {
+        this.lootTable = minecraftkey;
     }
 
     @Override
@@ -110,31 +167,32 @@
     }
 
     @Override
-    public void setLootTableSeed(long l) {
-        this.lootTableSeed = l;
+    public void setLootTableSeed(long i) {
+        this.lootTableSeed = i;
     }
 
     @Override
     public ItemStack getTheItem() {
-        this.unpackLootTable(null);
+        this.unpackLootTable((Player) null);
         return this.item;
     }
 
     @Override
     public ItemStack splitTheItem(int i) {
-        this.unpackLootTable(null);
-        ItemStack itemStack = this.item.split(i);
+        this.unpackLootTable((Player) null);
+        ItemStack itemstack = this.item.split(i);
+
         if (this.item.isEmpty()) {
             this.item = ItemStack.EMPTY;
         }
 
-        return itemStack;
+        return itemstack;
     }
 
     @Override
-    public void setTheItem(ItemStack itemStack) {
-        this.unpackLootTable(null);
-        this.item = itemStack;
+    public void setTheItem(ItemStack itemstack) {
+        this.unpackLootTable((Player) null);
+        this.item = itemstack;
     }
 
     @Override
@@ -142,17 +200,17 @@
         return this;
     }
 
-    public void wobble(DecoratedPotBlockEntity.WobbleStyle wobbleStyle) {
+    public void wobble(DecoratedPotBlockEntity.b decoratedpotblockentity_b) {
         if (this.level != null && !this.level.isClientSide()) {
-            this.level.blockEvent(this.getBlockPos(), this.getBlockState().getBlock(), 1, wobbleStyle.ordinal());
+            this.level.blockEvent(this.getBlockPos(), this.getBlockState().getBlock(), 1, decoratedpotblockentity_b.ordinal());
         }
     }
 
     @Override
     public boolean triggerEvent(int id, int type) {
-        if (this.level != null && id == 1 && type >= 0 && type < DecoratedPotBlockEntity.WobbleStyle.values().length) {
+        if (this.level != null && id == 1 && type >= 0 && type < DecoratedPotBlockEntity.b.values().length) {
             this.wobbleStartedAtTick = this.level.getGameTime();
-            this.lastWobbleStyle = DecoratedPotBlockEntity.WobbleStyle.values()[type];
+            this.lastWobbleStyle = DecoratedPotBlockEntity.b.values()[type];
             return true;
         } else {
             return super.triggerEvent(id, type);
@@ -160,17 +218,19 @@
     }
 
     public static record Decorations(Item back, Item left, Item right, Item front) {
-        public static final DecoratedPotBlockEntity.Decorations EMPTY = new DecoratedPotBlockEntity.Decorations(
-            Items.BRICK, Items.BRICK, Items.BRICK, Items.BRICK
-        );
 
+        public static final DecoratedPotBlockEntity.Decorations EMPTY = new DecoratedPotBlockEntity.Decorations(Items.BRICK, Items.BRICK, Items.BRICK, Items.BRICK);
+
         public CompoundTag save(CompoundTag tag) {
-            if (this.equals(EMPTY)) {
+            if (this.equals(DecoratedPotBlockEntity.Decorations.EMPTY)) {
                 return tag;
             } else {
-                ListTag list = new ListTag();
-                this.sorted().forEach(item -> list.add(StringTag.valueOf(BuiltInRegistries.ITEM.getKey(item).toString())));
-                tag.put("sherds", list);
+                ListTag nbttaglist = new ListTag();
+
+                this.sorted().forEach((item) -> {
+                    nbttaglist.add(StringTag.valueOf(BuiltInRegistries.ITEM.getKey(item).toString()));
+                });
+                tag.put("sherds", nbttaglist);
                 return tag;
             }
         }
@@ -181,10 +241,11 @@
 
         public static DecoratedPotBlockEntity.Decorations load(@Nullable CompoundTag tag) {
             if (tag != null && tag.contains("sherds", 9)) {
-                ListTag list = tag.getList("sherds", 8);
-                return new DecoratedPotBlockEntity.Decorations(itemFromTag(list, 0), itemFromTag(list, 1), itemFromTag(list, 2), itemFromTag(list, 3));
+                ListTag nbttaglist = tag.getList("sherds", 8);
+
+                return new DecoratedPotBlockEntity.Decorations(itemFromTag(nbttaglist, 0), itemFromTag(nbttaglist, 1), itemFromTag(nbttaglist, 2), itemFromTag(nbttaglist, 3));
             } else {
-                return EMPTY;
+                return DecoratedPotBlockEntity.Decorations.EMPTY;
             }
         }
 
@@ -192,19 +253,20 @@
             if (index >= tag.size()) {
                 return Items.BRICK;
             } else {
-                Tag tag1 = tag.get(index);
-                return BuiltInRegistries.ITEM.get(ResourceLocation.tryParse(tag1.getAsString()));
+                Tag nbtbase = tag.get(index);
+
+                return (Item) BuiltInRegistries.ITEM.get(ResourceLocation.tryParse(nbtbase.getAsString()));
             }
         }
     }
 
-    public static enum WobbleStyle {
-        POSITIVE(7),
-        NEGATIVE(10);
+    public static enum b {
 
+        POSITIVE(7), NEGATIVE(10);
+
         public final int duration;
 
-        private WobbleStyle(int i) {
+        private b(int i) {
             this.duration = i;
         }
     }
