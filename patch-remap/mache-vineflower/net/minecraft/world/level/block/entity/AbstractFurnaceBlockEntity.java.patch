--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -2,8 +2,10 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
@@ -26,7 +28,6 @@
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.WorldlyContainer;
 import net.minecraft.world.entity.ExperienceOrb;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.player.StackedContents;
 import net.minecraft.world.inventory.ContainerData;
 import net.minecraft.world.inventory.RecipeCraftingHolder;
@@ -38,14 +39,28 @@
 import net.minecraft.world.item.crafting.RecipeHolder;
 import net.minecraft.world.item.crafting.RecipeManager;
 import net.minecraft.world.item.crafting.RecipeType;
-import net.minecraft.world.level.ItemLike;
+import net.minecraft.world.level.IMaterial;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.AbstractFurnaceBlock;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockExpEvent;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceExtractEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+import org.bukkit.event.inventory.FurnaceStartSmeltEvent;
+import org.bukkit.inventory.CookingRecipe;
+// CraftBukkit end
 
 public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeCraftingHolder, StackedContentsCompatible {
+
     protected static final int SLOT_INPUT = 0;
     protected static final int SLOT_FUEL = 1;
     protected static final int SLOT_RESULT = 2;
@@ -59,143 +74,184 @@
     public static final int NUM_DATA_VALUES = 4;
     public static final int BURN_TIME_STANDARD = 200;
     public static final int BURN_COOL_SPEED = 2;
-    protected NonNullList<ItemStack> items = NonNullList.withSize(3, ItemStack.EMPTY);
-    int litTime;
+    protected NonNullList<ItemStack> items;
+    public int litTime;
     int litDuration;
-    int cookingProgress;
-    int cookingTotalTime;
-    protected final ContainerData dataAccess = new ContainerData() {
-        @Override
-        public int get(int index) {
-            switch (index) {
-                case 0:
-                    return AbstractFurnaceBlockEntity.this.litTime;
-                case 1:
-                    return AbstractFurnaceBlockEntity.this.litDuration;
-                case 2:
-                    return AbstractFurnaceBlockEntity.this.cookingProgress;
-                case 3:
-                    return AbstractFurnaceBlockEntity.this.cookingTotalTime;
-                default:
-                    return 0;
-            }
-        }
+    public int cookingProgress;
+    public int cookingTotalTime;
+    protected final ContainerData dataAccess;
+    public final Object2IntOpenHashMap<ResourceLocation> recipesUsed;
+    private final RecipeManager.CachedCheck<Container, ? extends AbstractCookingRecipe> quickCheck;
 
-        @Override
-        public void set(int index, int value) {
-            switch (index) {
-                case 0:
-                    AbstractFurnaceBlockEntity.this.litTime = value;
-                    break;
-                case 1:
-                    AbstractFurnaceBlockEntity.this.litDuration = value;
-                    break;
-                case 2:
-                    AbstractFurnaceBlockEntity.this.cookingProgress = value;
-                    break;
-                case 3:
-                    AbstractFurnaceBlockEntity.this.cookingTotalTime = value;
+    protected AbstractFurnaceBlockEntity(BlockEntityType<?> type, BlockPos pos, IBlockData blockState, RecipeType<? extends AbstractCookingRecipe> recipeType) {
+        super(type, pos, blockState);
+        this.items = NonNullList.withSize(3, ItemStack.EMPTY);
+        this.dataAccess = new ContainerData() {
+            @Override
+            public int get(int index) {
+                switch (index) {
+                    case 0:
+                        return AbstractFurnaceBlockEntity.this.litTime;
+                    case 1:
+                        return AbstractFurnaceBlockEntity.this.litDuration;
+                    case 2:
+                        return AbstractFurnaceBlockEntity.this.cookingProgress;
+                    case 3:
+                        return AbstractFurnaceBlockEntity.this.cookingTotalTime;
+                    default:
+                        return 0;
+                }
             }
-        }
 
-        @Override
-        public int getCount() {
-            return 4;
-        }
-    };
-    private final Object2IntOpenHashMap<ResourceLocation> recipesUsed = new Object2IntOpenHashMap<>();
-    private final RecipeManager.CachedCheck<Container, ? extends AbstractCookingRecipe> quickCheck;
+            @Override
+            public void set(int index, int value) {
+                switch (index) {
+                    case 0:
+                        AbstractFurnaceBlockEntity.this.litTime = value;
+                        break;
+                    case 1:
+                        AbstractFurnaceBlockEntity.this.litDuration = value;
+                        break;
+                    case 2:
+                        AbstractFurnaceBlockEntity.this.cookingProgress = value;
+                        break;
+                    case 3:
+                        AbstractFurnaceBlockEntity.this.cookingTotalTime = value;
+                }
 
-    protected AbstractFurnaceBlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState blockState, RecipeType<? extends AbstractCookingRecipe> recipeType) {
-        super(type, pos, blockState);
-        this.quickCheck = RecipeManager.createCheck(recipeType);
+            }
+
+            @Override
+            public int getCount() {
+                return 4;
+            }
+        };
+        this.recipesUsed = new Object2IntOpenHashMap();
+        this.quickCheck = RecipeManager.createCheck((RecipeType<AbstractCookingRecipe>) recipeType); // CraftBukkit - decompile error // Eclipse fail
     }
 
     public static Map<Item, Integer> getFuel() {
         Map<Item, Integer> map = Maps.newLinkedHashMap();
-        add(map, Items.LAVA_BUCKET, 20000);
-        add(map, Blocks.COAL_BLOCK, 16000);
-        add(map, Items.BLAZE_ROD, 2400);
-        add(map, Items.COAL, 1600);
-        add(map, Items.CHARCOAL, 1600);
+
+        add(map, (IMaterial) Items.LAVA_BUCKET, 20000);
+        add(map, (IMaterial) Blocks.COAL_BLOCK, 16000);
+        add(map, (IMaterial) Items.BLAZE_ROD, 2400);
+        add(map, (IMaterial) Items.COAL, 1600);
+        add(map, (IMaterial) Items.CHARCOAL, 1600);
         add(map, ItemTags.LOGS, 300);
         add(map, ItemTags.BAMBOO_BLOCKS, 300);
         add(map, ItemTags.PLANKS, 300);
-        add(map, Blocks.BAMBOO_MOSAIC, 300);
+        add(map, (IMaterial) Blocks.BAMBOO_MOSAIC, 300);
         add(map, ItemTags.WOODEN_STAIRS, 300);
-        add(map, Blocks.BAMBOO_MOSAIC_STAIRS, 300);
+        add(map, (IMaterial) Blocks.BAMBOO_MOSAIC_STAIRS, 300);
         add(map, ItemTags.WOODEN_SLABS, 150);
-        add(map, Blocks.BAMBOO_MOSAIC_SLAB, 150);
+        add(map, (IMaterial) Blocks.BAMBOO_MOSAIC_SLAB, 150);
         add(map, ItemTags.WOODEN_TRAPDOORS, 300);
         add(map, ItemTags.WOODEN_PRESSURE_PLATES, 300);
         add(map, ItemTags.WOODEN_FENCES, 300);
         add(map, ItemTags.FENCE_GATES, 300);
-        add(map, Blocks.NOTE_BLOCK, 300);
-        add(map, Blocks.BOOKSHELF, 300);
-        add(map, Blocks.CHISELED_BOOKSHELF, 300);
-        add(map, Blocks.LECTERN, 300);
-        add(map, Blocks.JUKEBOX, 300);
-        add(map, Blocks.CHEST, 300);
-        add(map, Blocks.TRAPPED_CHEST, 300);
-        add(map, Blocks.CRAFTING_TABLE, 300);
-        add(map, Blocks.DAYLIGHT_DETECTOR, 300);
+        add(map, (IMaterial) Blocks.NOTE_BLOCK, 300);
+        add(map, (IMaterial) Blocks.BOOKSHELF, 300);
+        add(map, (IMaterial) Blocks.CHISELED_BOOKSHELF, 300);
+        add(map, (IMaterial) Blocks.LECTERN, 300);
+        add(map, (IMaterial) Blocks.JUKEBOX, 300);
+        add(map, (IMaterial) Blocks.CHEST, 300);
+        add(map, (IMaterial) Blocks.TRAPPED_CHEST, 300);
+        add(map, (IMaterial) Blocks.CRAFTING_TABLE, 300);
+        add(map, (IMaterial) Blocks.DAYLIGHT_DETECTOR, 300);
         add(map, ItemTags.BANNERS, 300);
-        add(map, Items.BOW, 300);
-        add(map, Items.FISHING_ROD, 300);
-        add(map, Blocks.LADDER, 300);
+        add(map, (IMaterial) Items.BOW, 300);
+        add(map, (IMaterial) Items.FISHING_ROD, 300);
+        add(map, (IMaterial) Blocks.LADDER, 300);
         add(map, ItemTags.SIGNS, 200);
         add(map, ItemTags.HANGING_SIGNS, 800);
-        add(map, Items.WOODEN_SHOVEL, 200);
-        add(map, Items.WOODEN_SWORD, 200);
-        add(map, Items.WOODEN_HOE, 200);
-        add(map, Items.WOODEN_AXE, 200);
-        add(map, Items.WOODEN_PICKAXE, 200);
+        add(map, (IMaterial) Items.WOODEN_SHOVEL, 200);
+        add(map, (IMaterial) Items.WOODEN_SWORD, 200);
+        add(map, (IMaterial) Items.WOODEN_HOE, 200);
+        add(map, (IMaterial) Items.WOODEN_AXE, 200);
+        add(map, (IMaterial) Items.WOODEN_PICKAXE, 200);
         add(map, ItemTags.WOODEN_DOORS, 200);
         add(map, ItemTags.BOATS, 1200);
         add(map, ItemTags.WOOL, 100);
         add(map, ItemTags.WOODEN_BUTTONS, 100);
-        add(map, Items.STICK, 100);
+        add(map, (IMaterial) Items.STICK, 100);
         add(map, ItemTags.SAPLINGS, 100);
-        add(map, Items.BOWL, 100);
+        add(map, (IMaterial) Items.BOWL, 100);
         add(map, ItemTags.WOOL_CARPETS, 67);
-        add(map, Blocks.DRIED_KELP_BLOCK, 4001);
-        add(map, Items.CROSSBOW, 300);
-        add(map, Blocks.BAMBOO, 50);
-        add(map, Blocks.DEAD_BUSH, 100);
-        add(map, Blocks.SCAFFOLDING, 50);
-        add(map, Blocks.LOOM, 300);
-        add(map, Blocks.BARREL, 300);
-        add(map, Blocks.CARTOGRAPHY_TABLE, 300);
-        add(map, Blocks.FLETCHING_TABLE, 300);
-        add(map, Blocks.SMITHING_TABLE, 300);
-        add(map, Blocks.COMPOSTER, 300);
-        add(map, Blocks.AZALEA, 100);
-        add(map, Blocks.FLOWERING_AZALEA, 100);
-        add(map, Blocks.MANGROVE_ROOTS, 300);
+        add(map, (IMaterial) Blocks.DRIED_KELP_BLOCK, 4001);
+        add(map, (IMaterial) Items.CROSSBOW, 300);
+        add(map, (IMaterial) Blocks.BAMBOO, 50);
+        add(map, (IMaterial) Blocks.DEAD_BUSH, 100);
+        add(map, (IMaterial) Blocks.SCAFFOLDING, 50);
+        add(map, (IMaterial) Blocks.LOOM, 300);
+        add(map, (IMaterial) Blocks.BARREL, 300);
+        add(map, (IMaterial) Blocks.CARTOGRAPHY_TABLE, 300);
+        add(map, (IMaterial) Blocks.FLETCHING_TABLE, 300);
+        add(map, (IMaterial) Blocks.SMITHING_TABLE, 300);
+        add(map, (IMaterial) Blocks.COMPOSTER, 300);
+        add(map, (IMaterial) Blocks.AZALEA, 100);
+        add(map, (IMaterial) Blocks.FLOWERING_AZALEA, 100);
+        add(map, (IMaterial) Blocks.MANGROVE_ROOTS, 300);
         return map;
     }
 
+    // CraftBukkit start - add fields and methods
+    private int maxStack = MAX_STACK;
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    public Object2IntOpenHashMap<ResourceLocation> getRecipesUsed() {
+        return this.recipesUsed; // PAIL private -> public
+    }
+    // CraftBukkit end
+
     private static boolean isNeverAFurnaceFuel(Item item) {
         return item.builtInRegistryHolder().is(ItemTags.NON_FLAMMABLE_WOOD);
     }
 
     private static void add(Map<Item, Integer> map, TagKey<Item> itemTag, int burnTime) {
-        for (Holder<Item> holder : BuiltInRegistries.ITEM.getTagOrEmpty(itemTag)) {
-            if (!isNeverAFurnaceFuel(holder.value())) {
-                map.put(holder.value(), burnTime);
+        Iterator iterator = BuiltInRegistries.ITEM.getTagOrEmpty(itemTag).iterator();
+
+        while (iterator.hasNext()) {
+            Holder<Item> holder = (Holder) iterator.next();
+
+            if (!isNeverAFurnaceFuel((Item) holder.value())) {
+                map.put((Item) holder.value(), burnTime);
             }
         }
+
     }
 
-    private static void add(Map<Item, Integer> map, ItemLike item, int burnTime) {
+    private static void add(Map<Item, Integer> map, IMaterial item, int burnTime) {
         Item item1 = item.asItem();
+
         if (isNeverAFurnaceFuel(item1)) {
             if (SharedConstants.IS_RUNNING_IN_IDE) {
-                throw (IllegalStateException)Util.pauseInIde(
-                    new IllegalStateException(
-                        "A developer tried to explicitly make fire resistant item " + item1.getName(null).getString() + " a furnace fuel. That will not work!"
-                    )
-                );
+                throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("A developer tried to explicitly make fire resistant item " + item1.getName((ItemStack) null).getString() + " a furnace fuel. That will not work!"));
             }
         } else {
             map.put(item1, burnTime);
@@ -214,125 +270,189 @@
         this.litTime = tag.getShort("BurnTime");
         this.cookingProgress = tag.getShort("CookTime");
         this.cookingTotalTime = tag.getShort("CookTimeTotal");
-        this.litDuration = this.getBurnDuration(this.items.get(1));
-        CompoundTag compound = tag.getCompound("RecipesUsed");
+        this.litDuration = this.getBurnDuration((ItemStack) this.items.get(1));
+        CompoundTag nbttagcompound1 = tag.getCompound("RecipesUsed");
+        Iterator iterator = nbttagcompound1.getAllKeys().iterator();
 
-        for (String string : compound.getAllKeys()) {
-            this.recipesUsed.put(new ResourceLocation(string), compound.getInt(string));
+        while (iterator.hasNext()) {
+            String s = (String) iterator.next();
+
+            this.recipesUsed.put(new ResourceLocation(s), nbttagcompound1.getInt(s));
         }
+
     }
 
     @Override
     protected void saveAdditional(CompoundTag tag) {
         super.saveAdditional(tag);
-        tag.putShort("BurnTime", (short)this.litTime);
-        tag.putShort("CookTime", (short)this.cookingProgress);
-        tag.putShort("CookTimeTotal", (short)this.cookingTotalTime);
+        tag.putShort("BurnTime", (short) this.litTime);
+        tag.putShort("CookTime", (short) this.cookingProgress);
+        tag.putShort("CookTimeTotal", (short) this.cookingTotalTime);
         ContainerHelper.saveAllItems(tag, this.items);
-        CompoundTag compoundTag = new CompoundTag();
-        this.recipesUsed.forEach((id, index) -> compoundTag.putInt(id.toString(), index));
-        tag.put("RecipesUsed", compoundTag);
+        CompoundTag nbttagcompound1 = new CompoundTag();
+
+        this.recipesUsed.forEach((minecraftkey, integer) -> {
+            nbttagcompound1.putInt(minecraftkey.toString(), integer);
+        });
+        tag.put("RecipesUsed", nbttagcompound1);
     }
 
-    public static void serverTick(Level level, BlockPos pos, BlockState state, AbstractFurnaceBlockEntity blockEntity) {
-        boolean isLit = blockEntity.isLit();
-        boolean flag = false;
+    public static void serverTick(Level level, BlockPos pos, IBlockData state, AbstractFurnaceBlockEntity blockEntity) {
+        boolean flag = blockEntity.isLit();
+        boolean flag1 = false;
+
         if (blockEntity.isLit()) {
-            blockEntity.litTime--;
+            --blockEntity.litTime;
         }
 
-        ItemStack itemStack = blockEntity.items.get(1);
-        boolean flag1 = !blockEntity.items.get(0).isEmpty();
-        boolean flag2 = !itemStack.isEmpty();
-        if (blockEntity.isLit() || flag2 && flag1) {
-            RecipeHolder<?> recipeHolder;
-            if (flag1) {
-                recipeHolder = blockEntity.quickCheck.getRecipeFor(blockEntity, level).orElse(null);
+        ItemStack itemstack = (ItemStack) blockEntity.items.get(1);
+        boolean flag2 = !((ItemStack) blockEntity.items.get(0)).isEmpty();
+        boolean flag3 = !itemstack.isEmpty();
+
+        if (!blockEntity.isLit() && (!flag3 || !flag2)) {
+            if (!blockEntity.isLit() && blockEntity.cookingProgress > 0) {
+                blockEntity.cookingProgress = Mth.clamp(blockEntity.cookingProgress - 2, 0, blockEntity.cookingTotalTime);
+            }
+        } else {
+            RecipeHolder recipeholder;
+
+            if (flag2) {
+                recipeholder = (RecipeHolder) blockEntity.quickCheck.getRecipeFor(blockEntity, level).orElse(null); // CraftBukkit - decompile error
             } else {
-                recipeHolder = null;
+                recipeholder = null;
             }
 
-            int maxStackSize = blockEntity.getMaxStackSize();
-            if (!blockEntity.isLit() && canBurn(level.registryAccess(), recipeHolder, blockEntity.items, maxStackSize)) {
-                blockEntity.litTime = blockEntity.getBurnDuration(itemStack);
+            int i = blockEntity.getMaxStackSize();
+
+            if (!blockEntity.isLit() && canBurn(level.registryAccess(), recipeholder, blockEntity.items, i)) {
+                // CraftBukkit start
+                CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
+
+                FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(CraftBlock.at(level, pos), fuel, blockEntity.getBurnDuration(itemstack));
+                level.getCraftServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+                if (furnaceBurnEvent.isCancelled()) {
+                    return;
+                }
+
+                blockEntity.litTime = furnaceBurnEvent.getBurnTime();
                 blockEntity.litDuration = blockEntity.litTime;
-                if (blockEntity.isLit()) {
-                    flag = true;
-                    if (flag2) {
-                        Item item = itemStack.getItem();
-                        itemStack.shrink(1);
-                        if (itemStack.isEmpty()) {
-                            Item craftingRemainingItem = item.getCraftingRemainingItem();
-                            blockEntity.items.set(1, craftingRemainingItem == null ? ItemStack.EMPTY : new ItemStack(craftingRemainingItem));
+                if (blockEntity.isLit() && furnaceBurnEvent.isBurning()) {
+                    // CraftBukkit end
+                    flag1 = true;
+                    if (flag3) {
+                        Item item = itemstack.getItem();
+
+                        itemstack.shrink(1);
+                        if (itemstack.isEmpty()) {
+                            Item item1 = item.getCraftingRemainingItem();
+
+                            blockEntity.items.set(1, item1 == null ? ItemStack.EMPTY : new ItemStack(item1));
                         }
                     }
                 }
             }
 
-            if (blockEntity.isLit() && canBurn(level.registryAccess(), recipeHolder, blockEntity.items, maxStackSize)) {
-                blockEntity.cookingProgress++;
+            if (blockEntity.isLit() && canBurn(level.registryAccess(), recipeholder, blockEntity.items, i)) {
+                // CraftBukkit start
+                if (recipeholder != null && blockEntity.cookingProgress == 0) {
+                    CraftItemStack source = CraftItemStack.asCraftMirror(blockEntity.items.get(0));
+                    CookingRecipe<?> recipe = (CookingRecipe<?>) recipeholder.toBukkitRecipe();
+
+                    FurnaceStartSmeltEvent event = new FurnaceStartSmeltEvent(CraftBlock.at(level, pos), source, recipe);
+                    level.getCraftServer().getPluginManager().callEvent(event);
+
+                    blockEntity.cookingTotalTime = event.getTotalCookTime();
+                }
+                // CraftBukkit end
+
+                ++blockEntity.cookingProgress;
                 if (blockEntity.cookingProgress == blockEntity.cookingTotalTime) {
                     blockEntity.cookingProgress = 0;
                     blockEntity.cookingTotalTime = getTotalCookTime(level, blockEntity);
-                    if (burn(level.registryAccess(), recipeHolder, blockEntity.items, maxStackSize)) {
-                        blockEntity.setRecipeUsed(recipeHolder);
+                    if (burn(blockEntity.level, blockEntity.worldPosition, level.registryAccess(), recipeholder, blockEntity.items, i)) { // CraftBukkit
+                        blockEntity.setRecipeUsed(recipeholder);
                     }
 
-                    flag = true;
+                    flag1 = true;
                 }
             } else {
                 blockEntity.cookingProgress = 0;
             }
-        } else if (!blockEntity.isLit() && blockEntity.cookingProgress > 0) {
-            blockEntity.cookingProgress = Mth.clamp(blockEntity.cookingProgress - 2, 0, blockEntity.cookingTotalTime);
         }
 
-        if (isLit != blockEntity.isLit()) {
-            flag = true;
-            state = state.setValue(AbstractFurnaceBlock.LIT, Boolean.valueOf(blockEntity.isLit()));
+        if (flag != blockEntity.isLit()) {
+            flag1 = true;
+            state = (IBlockData) state.setValue(AbstractFurnaceBlock.LIT, blockEntity.isLit());
             level.setBlock(pos, state, 3);
         }
 
-        if (flag) {
+        if (flag1) {
             setChanged(level, pos, state);
         }
+
     }
 
-    private static boolean canBurn(RegistryAccess registryAccess, @Nullable RecipeHolder<?> recipeHolder, NonNullList<ItemStack> list, int i) {
-        if (!list.get(0).isEmpty() && recipeHolder != null) {
-            ItemStack resultItem = recipeHolder.value().getResultItem(registryAccess);
-            if (resultItem.isEmpty()) {
+    private static boolean canBurn(RegistryAccess iregistrycustom, @Nullable RecipeHolder<?> recipeholder, NonNullList<ItemStack> nonnulllist, int i) {
+        if (!((ItemStack) nonnulllist.get(0)).isEmpty() && recipeholder != null) {
+            ItemStack itemstack = recipeholder.value().getResultItem(iregistrycustom);
+
+            if (itemstack.isEmpty()) {
                 return false;
             } else {
-                ItemStack itemStack = list.get(2);
-                return itemStack.isEmpty()
-                    || ItemStack.isSameItem(itemStack, resultItem)
-                        && (
-                            itemStack.getCount() < i && itemStack.getCount() < itemStack.getMaxStackSize()
-                                || itemStack.getCount() < resultItem.getMaxStackSize()
-                        );
+                ItemStack itemstack1 = (ItemStack) nonnulllist.get(2);
+
+                return itemstack1.isEmpty() ? true : (!ItemStack.isSameItem(itemstack1, itemstack) ? false : (itemstack1.getCount() < i && itemstack1.getCount() < itemstack1.getMaxStackSize() ? true : itemstack1.getCount() < itemstack.getMaxStackSize()));
             }
         } else {
             return false;
         }
     }
 
-    private static boolean burn(RegistryAccess registryAccess, @Nullable RecipeHolder<?> recipeHolder, NonNullList<ItemStack> list, int i) {
-        if (recipeHolder != null && canBurn(registryAccess, recipeHolder, list, i)) {
-            ItemStack itemStack = list.get(0);
-            ItemStack resultItem = recipeHolder.value().getResultItem(registryAccess);
-            ItemStack itemStack1 = list.get(2);
-            if (itemStack1.isEmpty()) {
-                list.set(2, resultItem.copy());
-            } else if (itemStack1.is(resultItem.getItem())) {
-                itemStack1.grow(1);
+    private static boolean burn(Level world, BlockPos blockposition, RegistryAccess iregistrycustom, @Nullable RecipeHolder<?> recipeholder, NonNullList<ItemStack> nonnulllist, int i) { // CraftBukkit
+        if (recipeholder != null && canBurn(iregistrycustom, recipeholder, nonnulllist, i)) {
+            ItemStack itemstack = (ItemStack) nonnulllist.get(0);
+            ItemStack itemstack1 = recipeholder.value().getResultItem(iregistrycustom);
+            ItemStack itemstack2 = (ItemStack) nonnulllist.get(2);
+
+            // CraftBukkit start - fire FurnaceSmeltEvent
+            CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+            org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(CraftBlock.at(world, blockposition), source, result);
+            world.getCraftServer().getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+                return false;
             }
 
-            if (itemStack.is(Blocks.WET_SPONGE.asItem()) && !list.get(1).isEmpty() && list.get(1).is(Items.BUCKET)) {
-                list.set(1, new ItemStack(Items.WATER_BUCKET));
+            result = furnaceSmeltEvent.getResult();
+            itemstack1 = CraftItemStack.asNMSCopy(result);
+
+            if (!itemstack1.isEmpty()) {
+                if (itemstack2.isEmpty()) {
+                    nonnulllist.set(2, itemstack1.copy());
+                } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+                    itemstack2.grow(itemstack1.getCount());
+                } else {
+                    return false;
+                }
             }
 
-            itemStack.shrink(1);
+            /*
+            if (itemstack2.isEmpty()) {
+                nonnulllist.set(2, itemstack1.copy());
+            } else if (itemstack2.is(itemstack1.getItem())) {
+                itemstack2.grow(1);
+            }
+            */
+            // CraftBukkit end
+
+            if (itemstack.is(Blocks.WET_SPONGE.asItem()) && !((ItemStack) nonnulllist.get(1)).isEmpty() && ((ItemStack) nonnulllist.get(1)).is(Items.BUCKET)) {
+                nonnulllist.set(1, new ItemStack(Items.WATER_BUCKET));
+            }
+
+            itemstack.shrink(1);
             return true;
         } else {
             return false;
@@ -344,12 +464,16 @@
             return 0;
         } else {
             Item item = fuel.getItem();
-            return getFuel().getOrDefault(item, 0);
+
+            return (Integer) getFuel().getOrDefault(item, 0);
         }
     }
 
     private static int getTotalCookTime(Level level, AbstractFurnaceBlockEntity blockEntity) {
-        return blockEntity.quickCheck.getRecipeFor(blockEntity, level).map(recipeHolder -> recipeHolder.value().getCookingTime()).orElse(200);
+        if (level == null) return 200; // CraftBukkit - SPIGOT-4302
+        return (Integer) blockEntity.quickCheck.getRecipeFor(blockEntity, level).map((recipeholder) -> {
+            return ((AbstractCookingRecipe) recipeholder.value()).getCookingTime();
+        }).orElse(200);
     }
 
     public static boolean isFuel(ItemStack stack) {
@@ -358,11 +482,7 @@
 
     @Override
     public int[] getSlotsForFace(Direction side) {
-        if (side == Direction.DOWN) {
-            return SLOTS_FOR_DOWN;
-        } else {
-            return side == Direction.UP ? SLOTS_FOR_UP : SLOTS_FOR_SIDES;
-        }
+        return side == Direction.DOWN ? AbstractFurnaceBlockEntity.SLOTS_FOR_DOWN : (side == Direction.UP ? AbstractFurnaceBlockEntity.SLOTS_FOR_UP : AbstractFurnaceBlockEntity.SLOTS_FOR_SIDES);
     }
 
     @Override
@@ -372,7 +492,7 @@
 
     @Override
     public boolean canTakeItemThroughFace(int index, ItemStack stack, Direction direction) {
-        return direction != Direction.DOWN || index != 1 || stack.is(Items.WATER_BUCKET) || stack.is(Items.BUCKET);
+        return direction == Direction.DOWN && index == 1 ? stack.is(Items.WATER_BUCKET) || stack.is(Items.BUCKET) : true;
     }
 
     @Override
@@ -382,18 +502,24 @@
 
     @Override
     public boolean isEmpty() {
-        for (ItemStack itemStack : this.items) {
-            if (!itemStack.isEmpty()) {
-                return false;
+        Iterator iterator = this.items.iterator();
+
+        ItemStack itemstack;
+
+        do {
+            if (!iterator.hasNext()) {
+                return true;
             }
-        }
 
-        return true;
+            itemstack = (ItemStack) iterator.next();
+        } while (itemstack.isEmpty());
+
+        return false;
     }
 
     @Override
     public ItemStack getItem(int index) {
-        return this.items.get(index);
+        return (ItemStack) this.items.get(index);
     }
 
     @Override
@@ -408,8 +534,9 @@
 
     @Override
     public void setItem(int index, ItemStack stack) {
-        ItemStack itemStack = this.items.get(index);
-        boolean flag = !stack.isEmpty() && ItemStack.isSameItemSameTags(itemStack, stack);
+        ItemStack itemstack1 = (ItemStack) this.items.get(index);
+        boolean flag = !stack.isEmpty() && ItemStack.isSameItemSameTags(itemstack1, stack);
+
         this.items.set(index, stack);
         if (stack.getCount() > this.getMaxStackSize()) {
             stack.setCount(this.getMaxStackSize());
@@ -420,10 +547,11 @@
             this.cookingProgress = 0;
             this.setChanged();
         }
+
     }
 
     @Override
-    public boolean stillValid(Player player) {
+    public boolean stillValid(net.minecraft.world.entity.player.Player player) {
         return Container.stillValidBlockEntity(this, player);
     }
 
@@ -434,8 +562,9 @@
         } else if (index != 1) {
             return true;
         } else {
-            ItemStack itemStack = this.items.get(1);
-            return isFuel(stack) || stack.is(Items.BUCKET) && !itemStack.is(Items.BUCKET);
+            ItemStack itemstack1 = (ItemStack) this.items.get(1);
+
+            return isFuel(stack) || stack.is(Items.BUCKET) && !itemstack1.is(Items.BUCKET);
         }
     }
 
@@ -445,11 +574,13 @@
     }
 
     @Override
-    public void setRecipeUsed(@Nullable RecipeHolder<?> recipeHolder) {
-        if (recipeHolder != null) {
-            ResourceLocation resourceLocation = recipeHolder.id();
-            this.recipesUsed.addTo(resourceLocation, 1);
+    public void setRecipeUsed(@Nullable RecipeHolder<?> recipeholder) {
+        if (recipeholder != null) {
+            ResourceLocation minecraftkey = recipeholder.id();
+
+            this.recipesUsed.addTo(minecraftkey, 1);
         }
+
     }
 
     @Nullable
@@ -459,16 +590,19 @@
     }
 
     @Override
-    public void awardUsedRecipes(Player player, List<ItemStack> items) {
-    }
+    public void awardUsedRecipes(net.minecraft.world.entity.player.Player player, List<ItemStack> items) {}
 
-    public void awardUsedRecipesAndPopExperience(ServerPlayer player) {
-        List<RecipeHolder<?>> recipesToAwardAndPopExperience = this.getRecipesToAwardAndPopExperience(player.serverLevel(), player.position());
-        player.awardRecipes(recipesToAwardAndPopExperience);
+    public void awardUsedRecipesAndPopExperience(ServerPlayer entityplayer, ItemStack itemstack, int amount) { // CraftBukkit
+        List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(entityplayer.serverLevel(), entityplayer.position(), this.worldPosition, entityplayer, itemstack, amount); // CraftBukkit
 
-        for (RecipeHolder<?> recipeHolder : recipesToAwardAndPopExperience) {
-            if (recipeHolder != null) {
-                player.triggerRecipeCrafted(recipeHolder, this.items);
+        entityplayer.awardRecipes(list);
+        Iterator iterator = list.iterator();
+
+        while (iterator.hasNext()) {
+            RecipeHolder<?> recipeholder = (RecipeHolder) iterator.next();
+
+            if (recipeholder != null) {
+                entityplayer.triggerRecipeCrafted(recipeholder, this.items);
             }
         }
 
@@ -476,32 +610,58 @@
     }
 
     public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel level, Vec3 popVec) {
+        // CraftBukkit start
+        return this.getRecipesToAwardAndPopExperience(level, popVec, this.worldPosition, null, null, 0);
+    }
+
+    public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel worldserver, Vec3 vec3d, BlockPos blockposition, ServerPlayer entityplayer, ItemStack itemstack, int amount) {
+        // CraftBukkit end
         List<RecipeHolder<?>> list = Lists.newArrayList();
+        ObjectIterator objectiterator = this.recipesUsed.object2IntEntrySet().iterator();
 
-        for (Entry<ResourceLocation> entry : this.recipesUsed.object2IntEntrySet()) {
-            level.getRecipeManager().byKey(entry.getKey()).ifPresent(recipeHolder -> {
-                list.add((RecipeHolder<?>)recipeHolder);
-                createExperience(level, popVec, entry.getIntValue(), ((AbstractCookingRecipe)recipeHolder.value()).getExperience());
+        while (objectiterator.hasNext()) {
+            Entry<ResourceLocation> entry = (Entry) objectiterator.next();
+
+            worldserver.getRecipeManager().byKey((ResourceLocation) entry.getKey()).ifPresent((recipeholder) -> {
+                list.add(recipeholder);
+                createExperience(worldserver, vec3d, entry.getIntValue(), ((AbstractCookingRecipe) recipeholder.value()).getExperience(), blockposition, entityplayer, itemstack, amount); // CraftBukkit
             });
         }
 
         return list;
     }
 
-    private static void createExperience(ServerLevel level, Vec3 popVec, int recipeIndex, float experience) {
-        int floor = Mth.floor((float)recipeIndex * experience);
-        float fraction = Mth.frac((float)recipeIndex * experience);
-        if (fraction != 0.0F && Math.random() < (double)fraction) {
-            floor++;
+    private static void createExperience(ServerLevel worldserver, Vec3 vec3d, int i, float f, BlockPos blockposition, net.minecraft.world.entity.player.Player entityhuman, ItemStack itemstack, int amount) { // CraftBukkit
+        int j = Mth.floor((float) i * f);
+        float f1 = Mth.frac((float) i * f);
+
+        if (f1 != 0.0F && Math.random() < (double) f1) {
+            ++j;
         }
 
-        ExperienceOrb.award(level, popVec, floor);
+        // CraftBukkit start - fire FurnaceExtractEvent / BlockExpEvent
+        BlockExpEvent event;
+        if (amount != 0) {
+            event = new FurnaceExtractEvent((Player) entityhuman.getBukkitEntity(), CraftBlock.at(worldserver, blockposition), org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(itemstack.getItem()), amount, j);
+        } else {
+            event = new BlockExpEvent(CraftBlock.at(worldserver, blockposition), j);
+        }
+        worldserver.getCraftServer().getPluginManager().callEvent(event);
+        j = event.getExpToDrop();
+        // CraftBukkit end
+
+        ExperienceOrb.award(worldserver, vec3d, j);
     }
 
     @Override
     public void fillStackedContents(StackedContents helper) {
-        for (ItemStack itemStack : this.items) {
-            helper.accountStack(itemStack);
+        Iterator iterator = this.items.iterator();
+
+        while (iterator.hasNext()) {
+            ItemStack itemstack = (ItemStack) iterator.next();
+
+            helper.accountStack(itemstack);
         }
+
     }
 }
