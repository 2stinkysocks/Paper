--- a/net/minecraft/world/level/block/entity/ChestBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ChestBlockEntity.java
@@ -20,46 +20,85 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.ChestBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.properties.ChestType;
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
 
 public class ChestBlockEntity extends RandomizableContainerBlockEntity implements LidBlockEntity {
+
     private static final int EVENT_SET_OPEN_COUNT = 1;
-    private NonNullList<ItemStack> items = NonNullList.withSize(27, ItemStack.EMPTY);
-    private final ContainerOpenersCounter openersCounter = new ContainerOpenersCounter() {
-        @Override
-        protected void onOpen(Level level, BlockPos pos, BlockState state) {
-            ChestBlockEntity.playSound(level, pos, state, SoundEvents.CHEST_OPEN);
-        }
+    private NonNullList<ItemStack> items;
+    public final ContainerOpenersCounter openersCounter;
+    private final ChestLidController chestLidController;
 
-        @Override
-        protected void onClose(Level level, BlockPos pos, BlockState state) {
-            ChestBlockEntity.playSound(level, pos, state, SoundEvents.CHEST_CLOSE);
-        }
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
 
-        @Override
-        protected void openerCountChanged(Level level, BlockPos pos, BlockState state, int count, int openCount) {
-            ChestBlockEntity.this.signalOpenCount(level, pos, state, count, openCount);
-        }
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
 
-        @Override
-        protected boolean isOwnContainer(Player player) {
-            if (!(player.containerMenu instanceof ChestMenu)) {
-                return false;
-            } else {
-                Container container = ((ChestMenu)player.containerMenu).getContainer();
-                return container == ChestBlockEntity.this
-                    || container instanceof CompoundContainer && ((CompoundContainer)container).contains(ChestBlockEntity.this);
-            }
-        }
-    };
-    private final ChestLidController chestLidController = new ChestLidController();
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
 
-    protected ChestBlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState blockState) {
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+    protected ChestBlockEntity(BlockEntityType<?> type, BlockPos pos, IBlockData blockState) {
         super(type, pos, blockState);
+        this.items = NonNullList.withSize(27, ItemStack.EMPTY);
+        this.openersCounter = new ContainerOpenersCounter() {
+            @Override
+            protected void onOpen(Level level, BlockPos pos, IBlockData state) {
+                ChestBlockEntity.playSound(level, pos, state, SoundEvents.CHEST_OPEN);
+            }
+
+            @Override
+            protected void onClose(Level level, BlockPos pos, IBlockData state) {
+                ChestBlockEntity.playSound(level, pos, state, SoundEvents.CHEST_CLOSE);
+            }
+
+            @Override
+            protected void openerCountChanged(Level level, BlockPos pos, IBlockData state, int count, int openCount) {
+                ChestBlockEntity.this.signalOpenCount(level, pos, state, count, openCount);
+            }
+
+            @Override
+            protected boolean isOwnContainer(Player player) {
+                if (!(player.containerMenu instanceof ChestMenu)) {
+                    return false;
+                } else {
+                    Container iinventory = ((ChestMenu) player.containerMenu).getContainer();
+
+                    return iinventory == ChestBlockEntity.this || iinventory instanceof CompoundContainer && ((CompoundContainer) iinventory).contains(ChestBlockEntity.this);
+                }
+            }
+        };
+        this.chestLidController = new ChestLidController();
     }
 
-    public ChestBlockEntity(BlockPos pos, BlockState blockState) {
+    public ChestBlockEntity(BlockPos pos, IBlockData blockState) {
         this(BlockEntityType.CHEST, pos, blockState);
     }
 
@@ -80,6 +119,7 @@
         if (!this.tryLoadLootTable(tag)) {
             ContainerHelper.loadAllItems(tag, this.items);
         }
+
     }
 
     @Override
@@ -88,25 +128,29 @@
         if (!this.trySaveLootTable(tag)) {
             ContainerHelper.saveAllItems(tag, this.items);
         }
+
     }
 
-    public static void lidAnimateTick(Level level, BlockPos pos, BlockState state, ChestBlockEntity blockEntity) {
+    public static void lidAnimateTick(Level level, BlockPos pos, IBlockData state, ChestBlockEntity blockEntity) {
         blockEntity.chestLidController.tickLid();
     }
 
-    static void playSound(Level level, BlockPos pos, BlockState state, SoundEvent sound) {
-        ChestType chestType = state.getValue(ChestBlock.TYPE);
-        if (chestType != ChestType.LEFT) {
-            double d = (double)pos.getX() + 0.5;
-            double d1 = (double)pos.getY() + 0.5;
-            double d2 = (double)pos.getZ() + 0.5;
-            if (chestType == ChestType.RIGHT) {
-                Direction connectedDirection = ChestBlock.getConnectedDirection(state);
-                d += (double)connectedDirection.getStepX() * 0.5;
-                d2 += (double)connectedDirection.getStepZ() * 0.5;
+    public static void playSound(Level level, BlockPos pos, IBlockData state, SoundEvent sound) {
+        ChestType blockpropertychesttype = (ChestType) state.getValue(ChestBlock.TYPE);
+
+        if (blockpropertychesttype != ChestType.LEFT) {
+            double d0 = (double) pos.getX() + 0.5D;
+            double d1 = (double) pos.getY() + 0.5D;
+            double d2 = (double) pos.getZ() + 0.5D;
+
+            if (blockpropertychesttype == ChestType.RIGHT) {
+                Direction enumdirection = ChestBlock.getConnectedDirection(state);
+
+                d0 += (double) enumdirection.getStepX() * 0.5D;
+                d2 += (double) enumdirection.getStepZ() * 0.5D;
             }
 
-            level.playSound(null, d, d1, d2, sound, SoundSource.BLOCKS, 0.5F, level.random.nextFloat() * 0.1F + 0.9F);
+            level.playSound((Player) null, d0, d1, d2, sound, SoundSource.BLOCKS, 0.5F, level.random.nextFloat() * 0.1F + 0.9F);
         }
     }
 
@@ -125,6 +169,7 @@
         if (!this.remove && !player.isSpectator()) {
             this.openersCounter.incrementOpeners(player, this.getLevel(), this.getBlockPos(), this.getBlockState());
         }
+
     }
 
     @Override
@@ -132,6 +177,7 @@
         if (!this.remove && !player.isSpectator()) {
             this.openersCounter.decrementOpeners(player, this.getLevel(), this.getBlockPos(), this.getBlockState());
         }
+
     }
 
     @Override
@@ -150,11 +196,13 @@
     }
 
     public static int getOpenCount(BlockGetter level, BlockPos pos) {
-        BlockState blockState = level.getBlockState(pos);
-        if (blockState.hasBlockEntity()) {
-            BlockEntity blockEntity = level.getBlockEntity(pos);
-            if (blockEntity instanceof ChestBlockEntity) {
-                return ((ChestBlockEntity)blockEntity).openersCounter.getOpenerCount();
+        IBlockData iblockdata = level.getBlockState(pos);
+
+        if (iblockdata.hasBlockEntity()) {
+            BlockEntity tileentity = level.getBlockEntity(pos);
+
+            if (tileentity instanceof ChestBlockEntity) {
+                return ((ChestBlockEntity) tileentity).openersCounter.getOpenerCount();
             }
         }
 
@@ -162,9 +210,10 @@
     }
 
     public static void swapContents(ChestBlockEntity chest, ChestBlockEntity otherChest) {
-        NonNullList<ItemStack> items = chest.getItems();
+        NonNullList<ItemStack> nonnulllist = chest.getItems();
+
         chest.setItems(otherChest.getItems());
-        otherChest.setItems(items);
+        otherChest.setItems(nonnulllist);
     }
 
     @Override
@@ -176,10 +225,19 @@
         if (!this.remove) {
             this.openersCounter.recheckOpeners(this.getLevel(), this.getBlockPos(), this.getBlockState());
         }
+
     }
 
-    protected void signalOpenCount(Level level, BlockPos pos, BlockState state, int eventId, int eventParam) {
+    protected void signalOpenCount(Level level, BlockPos pos, IBlockData state, int eventId, int eventParam) {
         Block block = state.getBlock();
+
         level.blockEvent(pos, block, 1, eventParam);
     }
+
+    // CraftBukkit start
+    @Override
+    public boolean onlyOpCanSetNbt() {
+        return true;
+    }
+    // CraftBukkit end
 }
