--- a/net/minecraft/world/level/block/entity/CrafterBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/CrafterBlockEntity.java
@@ -2,7 +2,8 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
-import it.unimi.dsi.fastutil.ints.IntList;
+import java.util.Iterator;
+import java.util.List;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.NonNullList;
 import net.minecraft.nbt.CompoundTag;
@@ -14,13 +15,20 @@
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.ContainerData;
 import net.minecraft.world.inventory.CrafterMenu;
-import net.minecraft.world.inventory.CraftingContainer;
+import net.minecraft.world.inventory.InventoryCrafting;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.CrafterBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
-public class CrafterBlockEntity extends RandomizableContainerBlockEntity implements CraftingContainer {
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
+public class CrafterBlockEntity extends RandomizableContainerBlockEntity implements InventoryCrafting {
+
     public static final int CONTAINER_WIDTH = 3;
     public static final int CONTAINER_HEIGHT = 3;
     public static final int CONTAINER_SIZE = 9;
@@ -28,34 +36,78 @@
     public static final int SLOT_ENABLED = 0;
     public static final int DATA_TRIGGERED = 9;
     public static final int NUM_DATA = 10;
-    private NonNullList<ItemStack> items = NonNullList.withSize(9, ItemStack.EMPTY);
-    private int craftingTicksRemaining = 0;
-    protected final ContainerData containerData = new ContainerData() {
-        private final int[] slotStates = new int[9];
-        private int triggered = 0;
+    private NonNullList<ItemStack> items;
+    public int craftingTicksRemaining;
+    protected final ContainerData containerData;
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
+    private int maxStack = 1;
 
-        @Override
-        public int get(int index) {
-            return index == 9 ? this.triggered : this.slotStates[index];
-        }
+    @Override
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
 
-        @Override
-        public void set(int index, int value) {
-            if (index == 9) {
-                this.triggered = value;
-            } else {
-                this.slotStates[index] = value;
+    @Override
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    @Override
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    @Override
+    public Location getLocation() {
+        if (level == null) return null;
+        return new org.bukkit.Location(level.getWorld(), worldPosition.getX(), worldPosition.getY(), worldPosition.getZ());
+    }
+    // CraftBukkit end
+
+    public CrafterBlockEntity(BlockPos blockposition, IBlockData iblockdata) {
+        super(BlockEntityType.CRAFTER, blockposition, iblockdata);
+        this.items = NonNullList.withSize(9, ItemStack.EMPTY);
+        this.craftingTicksRemaining = 0;
+        this.containerData = new ContainerData() {
+            private final int[] slotStates = new int[9];
+            private int triggered = 0;
+
+            @Override
+            public int get(int index) {
+                return index == 9 ? this.triggered : this.slotStates[index];
             }
-        }
 
-        @Override
-        public int getCount() {
-            return 10;
-        }
-    };
+            @Override
+            public void set(int index, int value) {
+                if (index == 9) {
+                    this.triggered = value;
+                } else {
+                    this.slotStates[index] = value;
+                }
 
-    public CrafterBlockEntity(BlockPos pos, BlockState blockState) {
-        super(BlockEntityType.CRAFTER, pos, blockState);
+            }
+
+            @Override
+            public int getCount() {
+                return 10;
+            }
+        };
     }
 
     @Override
@@ -76,7 +128,7 @@
     }
 
     public boolean isSlotDisabled(int i) {
-        return i >= 0 && i < 9 && this.containerData.get(i) == 1;
+        return i >= 0 && i < 9 ? this.containerData.get(i) == 1 : false;
     }
 
     @Override
@@ -84,17 +136,19 @@
         if (this.containerData.get(index) == 1) {
             return false;
         } else {
-            ItemStack itemStack = this.items.get(index);
-            int count = itemStack.getCount();
-            return count < itemStack.getMaxStackSize() && (itemStack.isEmpty() || !this.smallerStackExist(count, itemStack, index));
+            ItemStack itemstack1 = (ItemStack) this.items.get(index);
+            int j = itemstack1.getCount();
+
+            return j >= itemstack1.getMaxStackSize() ? false : (itemstack1.isEmpty() ? true : !this.smallerStackExist(j, itemstack1, index));
         }
     }
 
-    private boolean smallerStackExist(int i, ItemStack itemStack, int i1) {
-        for (int i2 = i1 + 1; i2 < 9; i2++) {
-            if (!this.isSlotDisabled(i2)) {
-                ItemStack item = this.getItem(i2);
-                if (item.isEmpty() || item.getCount() < i && ItemStack.isSameItemSameTags(item, itemStack)) {
+    private boolean smallerStackExist(int i, ItemStack itemstack, int j) {
+        for (int k = j + 1; k < 9; ++k) {
+            if (!this.isSlotDisabled(k)) {
+                ItemStack itemstack1 = this.getItem(k);
+
+                if (itemstack1.isEmpty() || itemstack1.getCount() < i && ItemStack.isSameItemSameTags(itemstack1, itemstack)) {
                     return true;
                 }
             }
@@ -112,15 +166,20 @@
             ContainerHelper.loadAllItems(tag, this.items);
         }
 
-        int[] intArray = tag.getIntArray("disabled_slots");
+        int[] aint = tag.getIntArray("disabled_slots");
 
-        for (int i = 0; i < 9; i++) {
+        for (int i = 0; i < 9; ++i) {
             this.containerData.set(i, 0);
         }
 
-        for (int i1 : intArray) {
-            if (this.slotCanBeDisabled(i1)) {
-                this.containerData.set(i1, 1);
+        int[] aint1 = aint;
+        int j = aint.length;
+
+        for (int k = 0; k < j; ++k) {
+            int l = aint1[k];
+
+            if (this.slotCanBeDisabled(l)) {
+                this.containerData.set(l, 1);
             }
         }
 
@@ -146,18 +205,24 @@
 
     @Override
     public boolean isEmpty() {
-        for (ItemStack itemStack : this.items) {
-            if (!itemStack.isEmpty()) {
-                return false;
+        Iterator iterator = this.items.iterator();
+
+        ItemStack itemstack;
+
+        do {
+            if (!iterator.hasNext()) {
+                return true;
             }
-        }
 
-        return true;
+            itemstack = (ItemStack) iterator.next();
+        } while (itemstack.isEmpty());
+
+        return false;
     }
 
     @Override
     public ItemStack getItem(int slot) {
-        return this.items.get(slot);
+        return (ItemStack) this.items.get(slot);
     }
 
     @Override
@@ -171,12 +236,7 @@
 
     @Override
     public boolean stillValid(Player player) {
-        return this.level != null
-            && this.level.getBlockEntity(this.worldPosition) == this
-            && !(
-                player.distanceToSqr((double)this.worldPosition.getX() + 0.5, (double)this.worldPosition.getY() + 0.5, (double)this.worldPosition.getZ() + 0.5)
-                    > 64.0
-            );
+        return this.level != null && this.level.getBlockEntity(this.worldPosition) == this ? player.distanceToSqr((double) this.worldPosition.getX() + 0.5D, (double) this.worldPosition.getY() + 0.5D, (double) this.worldPosition.getZ() + 0.5D) <= 64.0D : false;
     }
 
     @Override
@@ -201,25 +261,30 @@
 
     @Override
     public void fillStackedContents(StackedContents contents) {
-        for (ItemStack itemStack : this.items) {
-            contents.accountSimpleStack(itemStack);
+        Iterator iterator = this.items.iterator();
+
+        while (iterator.hasNext()) {
+            ItemStack itemstack = (ItemStack) iterator.next();
+
+            contents.accountSimpleStack(itemstack);
         }
+
     }
 
-    private void addDisabledSlots(CompoundTag compoundTag) {
-        IntList list = new IntArrayList();
+    private void addDisabledSlots(CompoundTag nbttagcompound) {
+        IntArrayList intarraylist = new IntArrayList();
 
-        for (int i = 0; i < 9; i++) {
+        for (int i = 0; i < 9; ++i) {
             if (this.isSlotDisabled(i)) {
-                list.add(i);
+                intarraylist.add(i);
             }
         }
 
-        compoundTag.putIntArray("disabled_slots", list);
+        nbttagcompound.putIntArray("disabled_slots", (List) intarraylist);
     }
 
-    private void addTriggered(CompoundTag compoundTag) {
-        compoundTag.putInt("triggered", this.containerData.get(9));
+    private void addTriggered(CompoundTag nbttagcompound) {
+        nbttagcompound.putInt("triggered", this.containerData.get(9));
     }
 
     public void setTriggered(boolean flag) {
@@ -231,13 +296,15 @@
         return this.containerData.get(9) == 1;
     }
 
-    public static void serverTick(Level level, BlockPos blockPos, BlockState blockState, CrafterBlockEntity crafterBlockEntity) {
-        int i = crafterBlockEntity.craftingTicksRemaining - 1;
+    public static void serverTick(Level world, BlockPos blockposition, IBlockData iblockdata, CrafterBlockEntity crafterblockentity) {
+        int i = crafterblockentity.craftingTicksRemaining - 1;
+
         if (i >= 0) {
-            crafterBlockEntity.craftingTicksRemaining = i;
+            crafterblockentity.craftingTicksRemaining = i;
             if (i == 0) {
-                level.setBlock(blockPos, blockState.setValue(CrafterBlock.CRAFTING, Boolean.valueOf(false)), 3);
+                world.setBlock(blockposition, (IBlockData) iblockdata.setValue(CrafterBlock.CRAFTING, false), 3);
             }
+
         }
     }
 
@@ -248,10 +315,11 @@
     public int getRedstoneSignal() {
         int i = 0;
 
-        for (int i1 = 0; i1 < this.getContainerSize(); i1++) {
-            ItemStack item = this.getItem(i1);
-            if (!item.isEmpty() || this.isSlotDisabled(i1)) {
-                i++;
+        for (int j = 0; j < this.getContainerSize(); ++j) {
+            ItemStack itemstack = this.getItem(j);
+
+            if (!itemstack.isEmpty() || this.isSlotDisabled(j)) {
+                ++i;
             }
         }
 
@@ -259,6 +327,6 @@
     }
 
     private boolean slotCanBeDisabled(int i) {
-        return i > -1 && i < 9 && this.items.get(i).isEmpty();
+        return i > -1 && i < 9 && ((ItemStack) this.items.get(i)).isEmpty();
     }
 }
