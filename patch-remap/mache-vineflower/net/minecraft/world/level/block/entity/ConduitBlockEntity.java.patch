--- a/net/minecraft/world/level/block/entity/ConduitBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ConduitBlockEntity.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block.entity;
 
 import com.google.common.collect.Lists;
+import java.util.Iterator;
 import java.util.List;
 import java.util.UUID;
 import javax.annotation.Nullable;
@@ -17,16 +18,21 @@
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.monster.Enemy;
+import net.minecraft.world.entity.monster.IMonster;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
 
 public class ConduitBlockEntity extends BlockEntity {
+
     private static final int BLOCK_REFRESH_RATE = 2;
     private static final int EFFECT_DURATION = 13;
     private static final float ROTATION_SPEED = -0.0375F;
@@ -45,7 +51,7 @@
     private UUID destroyTargetUUID;
     private long nextAmbientSoundActivation;
 
-    public ConduitBlockEntity(BlockPos pos, BlockState blockState) {
+    public ConduitBlockEntity(BlockPos pos, IBlockData blockState) {
         super(BlockEntityType.CONDUIT, pos, blockState);
     }
 
@@ -57,6 +63,7 @@
         } else {
             this.destroyTargetUUID = null;
         }
+
     }
 
     @Override
@@ -65,6 +72,7 @@
         if (this.destroyTarget != null) {
             tag.putUUID("Target", this.destroyTarget.getUUID());
         }
+
     }
 
     @Override
@@ -77,11 +85,12 @@
         return this.saveWithoutMetadata();
     }
 
-    public static void clientTick(Level level, BlockPos pos, BlockState state, ConduitBlockEntity blockEntity) {
-        blockEntity.tickCount++;
-        long gameTime = level.getGameTime();
+    public static void clientTick(Level level, BlockPos pos, IBlockData state, ConduitBlockEntity blockEntity) {
+        ++blockEntity.tickCount;
+        long i = level.getGameTime();
         List<BlockPos> list = blockEntity.effectBlocks;
-        if (gameTime % 40L == 0L) {
+
+        if (i % 40L == 0L) {
             blockEntity.isActive = updateShape(level, pos, list);
             updateHunting(blockEntity, list);
         }
@@ -89,19 +98,23 @@
         updateClientTarget(level, pos, blockEntity);
         animationTick(level, pos, list, blockEntity.destroyTarget, blockEntity.tickCount);
         if (blockEntity.isActive()) {
-            blockEntity.activeRotation++;
+            ++blockEntity.activeRotation;
         }
+
     }
 
-    public static void serverTick(Level level, BlockPos pos, BlockState state, ConduitBlockEntity blockEntity) {
-        blockEntity.tickCount++;
-        long gameTime = level.getGameTime();
+    public static void serverTick(Level level, BlockPos pos, IBlockData state, ConduitBlockEntity blockEntity) {
+        ++blockEntity.tickCount;
+        long i = level.getGameTime();
         List<BlockPos> list = blockEntity.effectBlocks;
-        if (gameTime % 40L == 0L) {
+
+        if (i % 40L == 0L) {
             boolean flag = updateShape(level, pos, list);
+
             if (flag != blockEntity.isActive) {
-                SoundEvent soundEvent = flag ? SoundEvents.CONDUIT_ACTIVATE : SoundEvents.CONDUIT_DEACTIVATE;
-                level.playSound(null, pos, soundEvent, SoundSource.BLOCKS, 1.0F, 1.0F);
+                SoundEvent soundeffect = flag ? SoundEvents.CONDUIT_ACTIVATE : SoundEvents.CONDUIT_DEACTIVATE;
+
+                level.playSound((Player) null, pos, soundeffect, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
 
             blockEntity.isActive = flag;
@@ -113,15 +126,16 @@
         }
 
         if (blockEntity.isActive()) {
-            if (gameTime % 80L == 0L) {
-                level.playSound(null, pos, SoundEvents.CONDUIT_AMBIENT, SoundSource.BLOCKS, 1.0F, 1.0F);
+            if (i % 80L == 0L) {
+                level.playSound((Player) null, pos, SoundEvents.CONDUIT_AMBIENT, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
 
-            if (gameTime > blockEntity.nextAmbientSoundActivation) {
-                blockEntity.nextAmbientSoundActivation = gameTime + 60L + (long)level.getRandom().nextInt(40);
-                level.playSound(null, pos, SoundEvents.CONDUIT_AMBIENT_SHORT, SoundSource.BLOCKS, 1.0F, 1.0F);
+            if (i > blockEntity.nextAmbientSoundActivation) {
+                blockEntity.nextAmbientSoundActivation = i + 60L + (long) level.getRandom().nextInt(40);
+                level.playSound((Player) null, pos, SoundEvents.CONDUIT_AMBIENT_SHORT, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
         }
+
     }
 
     private static void updateHunting(ConduitBlockEntity blockEntity, List<BlockPos> positions) {
@@ -131,31 +145,40 @@
     private static boolean updateShape(Level level, BlockPos pos, List<BlockPos> positions) {
         positions.clear();
 
-        for (int i = -1; i <= 1; i++) {
-            for (int i1 = -1; i1 <= 1; i1++) {
-                for (int i2 = -1; i2 <= 1; i2++) {
-                    BlockPos blockPos = pos.offset(i, i1, i2);
-                    if (!level.isWaterAt(blockPos)) {
+        int i;
+        int j;
+        int k;
+
+        for (i = -1; i <= 1; ++i) {
+            for (j = -1; j <= 1; ++j) {
+                for (k = -1; k <= 1; ++k) {
+                    BlockPos blockposition1 = pos.offset(i, j, k);
+
+                    if (!level.isWaterAt(blockposition1)) {
                         return false;
                     }
                 }
             }
         }
 
-        for (int i = -2; i <= 2; i++) {
-            for (int i1 = -2; i1 <= 2; i1++) {
-                for (int i2x = -2; i2x <= 2; i2x++) {
-                    int abs = Math.abs(i);
-                    int abs1 = Math.abs(i1);
-                    int abs2 = Math.abs(i2x);
-                    if ((abs > 1 || abs1 > 1 || abs2 > 1)
-                        && (i == 0 && (abs1 == 2 || abs2 == 2) || i1 == 0 && (abs == 2 || abs2 == 2) || i2x == 0 && (abs == 2 || abs1 == 2))) {
-                        BlockPos blockPos1 = pos.offset(i, i1, i2x);
-                        BlockState blockState = level.getBlockState(blockPos1);
+        for (i = -2; i <= 2; ++i) {
+            for (j = -2; j <= 2; ++j) {
+                for (k = -2; k <= 2; ++k) {
+                    int l = Math.abs(i);
+                    int i1 = Math.abs(j);
+                    int j1 = Math.abs(k);
 
-                        for (Block block : VALID_BLOCKS) {
-                            if (blockState.is(block)) {
-                                positions.add(blockPos1);
+                    if ((l > 1 || i1 > 1 || j1 > 1) && (i == 0 && (i1 == 2 || j1 == 2) || j == 0 && (l == 2 || j1 == 2) || k == 0 && (l == 2 || i1 == 2))) {
+                        BlockPos blockposition2 = pos.offset(i, j, k);
+                        IBlockData iblockdata = level.getBlockState(blockposition2);
+                        Block[] ablock = ConduitBlockEntity.VALID_BLOCKS;
+                        int k1 = ablock.length;
+
+                        for (int l1 = 0; l1 < k1; ++l1) {
+                            Block block = ablock[l1];
+
+                            if (iblockdata.is(block)) {
+                                positions.add(blockposition2);
                             }
                         }
                     }
@@ -167,60 +190,63 @@
     }
 
     private static void applyEffects(Level level, BlockPos pos, List<BlockPos> positions) {
-        int size = positions.size();
-        int i = size / 7 * 16;
-        int x = pos.getX();
-        int y = pos.getY();
-        int z = pos.getZ();
-        AABB aABB = new AABB((double)x, (double)y, (double)z, (double)(x + 1), (double)(y + 1), (double)(z + 1))
-            .inflate((double)i)
-            .expandTowards(0.0, (double)level.getHeight(), 0.0);
-        List<Player> entitiesOfClass = level.getEntitiesOfClass(Player.class, aABB);
-        if (!entitiesOfClass.isEmpty()) {
-            for (Player player : entitiesOfClass) {
-                if (pos.closerThan(player.blockPosition(), (double)i) && player.isInWaterOrRain()) {
-                    player.addEffect(new MobEffectInstance(MobEffects.CONDUIT_POWER, 260, 0, true, true));
+        int i = positions.size();
+        int j = i / 7 * 16;
+        int k = pos.getX();
+        int l = pos.getY();
+        int i1 = pos.getZ();
+        AABB axisalignedbb = (new AABB((double) k, (double) l, (double) i1, (double) (k + 1), (double) (l + 1), (double) (i1 + 1))).inflate((double) j).expandTowards(0.0D, (double) level.getHeight(), 0.0D);
+        List<Player> list1 = level.getEntitiesOfClass(Player.class, axisalignedbb);
+
+        if (!list1.isEmpty()) {
+            Iterator iterator = list1.iterator();
+
+            while (iterator.hasNext()) {
+                Player entityhuman = (Player) iterator.next();
+
+                if (pos.closerThan(entityhuman.blockPosition(), (double) j) && entityhuman.isInWaterOrRain()) {
+                    entityhuman.addEffect(new MobEffectInstance(MobEffects.CONDUIT_POWER, 260, 0, true, true), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.CONDUIT); // CraftBukkit
                 }
             }
+
         }
     }
 
-    private static void updateDestroyTarget(Level level, BlockPos pos, BlockState state, List<BlockPos> positions, ConduitBlockEntity blockEntity) {
-        LivingEntity livingEntity = blockEntity.destroyTarget;
-        int size = positions.size();
-        if (size < 42) {
+    private static void updateDestroyTarget(Level level, BlockPos pos, IBlockData state, List<BlockPos> positions, ConduitBlockEntity blockEntity) {
+        LivingEntity entityliving = blockEntity.destroyTarget;
+        int i = positions.size();
+
+        if (i < 42) {
             blockEntity.destroyTarget = null;
         } else if (blockEntity.destroyTarget == null && blockEntity.destroyTargetUUID != null) {
             blockEntity.destroyTarget = findDestroyTarget(level, pos, blockEntity.destroyTargetUUID);
             blockEntity.destroyTargetUUID = null;
         } else if (blockEntity.destroyTarget == null) {
-            List<LivingEntity> entitiesOfClass = level.getEntitiesOfClass(
-                LivingEntity.class, getDestroyRangeAABB(pos), collidedEntity -> collidedEntity instanceof Enemy && collidedEntity.isInWaterOrRain()
-            );
-            if (!entitiesOfClass.isEmpty()) {
-                blockEntity.destroyTarget = entitiesOfClass.get(level.random.nextInt(entitiesOfClass.size()));
+            List<LivingEntity> list1 = level.getEntitiesOfClass(LivingEntity.class, getDestroyRangeAABB(pos), (entityliving1) -> {
+                return entityliving1 instanceof IMonster && entityliving1.isInWaterOrRain();
+            });
+
+            if (!list1.isEmpty()) {
+                blockEntity.destroyTarget = (LivingEntity) list1.get(level.random.nextInt(list1.size()));
             }
-        } else if (!blockEntity.destroyTarget.isAlive() || !pos.closerThan(blockEntity.destroyTarget.blockPosition(), 8.0)) {
+        } else if (!blockEntity.destroyTarget.isAlive() || !pos.closerThan(blockEntity.destroyTarget.blockPosition(), 8.0D)) {
             blockEntity.destroyTarget = null;
         }
 
         if (blockEntity.destroyTarget != null) {
-            level.playSound(
-                null,
-                blockEntity.destroyTarget.getX(),
-                blockEntity.destroyTarget.getY(),
-                blockEntity.destroyTarget.getZ(),
-                SoundEvents.CONDUIT_ATTACK_TARGET,
-                SoundSource.BLOCKS,
-                1.0F,
-                1.0F
-            );
-            blockEntity.destroyTarget.hurt(level.damageSources().magic(), 4.0F);
+            // CraftBukkit start
+            CraftEventFactory.blockDamage = CraftBlock.at(level, pos);
+            if (blockEntity.destroyTarget.hurt(level.damageSources().magic(), 4.0F)) {
+                level.playSound((Player) null, blockEntity.destroyTarget.getX(), blockEntity.destroyTarget.getY(), blockEntity.destroyTarget.getZ(), SoundEvents.CONDUIT_ATTACK_TARGET, SoundSource.BLOCKS, 1.0F, 1.0F);
+            }
+            CraftEventFactory.blockDamage = null;
+            // CraftBukkit end
         }
 
-        if (livingEntity != blockEntity.destroyTarget) {
+        if (entityliving != blockEntity.destroyTarget) {
             level.sendBlockUpdated(pos, state, state, 2);
         }
+
     }
 
     private static void updateClientTarget(Level level, BlockPos pos, ConduitBlockEntity blockEntity) {
@@ -232,47 +258,61 @@
                 blockEntity.destroyTargetUUID = null;
             }
         }
+
     }
 
     private static AABB getDestroyRangeAABB(BlockPos pos) {
-        int x = pos.getX();
-        int y = pos.getY();
-        int z = pos.getZ();
-        return new AABB((double)x, (double)y, (double)z, (double)(x + 1), (double)(y + 1), (double)(z + 1)).inflate(8.0);
+        int i = pos.getX();
+        int j = pos.getY();
+        int k = pos.getZ();
+
+        return (new AABB((double) i, (double) j, (double) k, (double) (i + 1), (double) (j + 1), (double) (k + 1))).inflate(8.0D);
     }
 
     @Nullable
     private static LivingEntity findDestroyTarget(Level level, BlockPos pos, UUID targetId) {
-        List<LivingEntity> entitiesOfClass = level.getEntitiesOfClass(
-            LivingEntity.class, getDestroyRangeAABB(pos), collidedEntity -> collidedEntity.getUUID().equals(targetId)
-        );
-        return entitiesOfClass.size() == 1 ? entitiesOfClass.get(0) : null;
+        List<LivingEntity> list = level.getEntitiesOfClass(LivingEntity.class, getDestroyRangeAABB(pos), (entityliving) -> {
+            return entityliving.getUUID().equals(targetId);
+        });
+
+        return list.size() == 1 ? (LivingEntity) list.get(0) : null;
     }
 
     private static void animationTick(Level level, BlockPos pos, List<BlockPos> positions, @Nullable Entity entity, int tickCount) {
-        RandomSource randomSource = level.random;
-        double d = (double)(Mth.sin((float)(tickCount + 35) * 0.1F) / 2.0F + 0.5F);
-        d = (d * d + d) * 0.3F;
-        Vec3 vec3 = new Vec3((double)pos.getX() + 0.5, (double)pos.getY() + 1.5 + d, (double)pos.getZ() + 0.5);
+        RandomSource randomsource = level.random;
+        double d0 = (double) (Mth.sin((float) (tickCount + 35) * 0.1F) / 2.0F + 0.5F);
 
-        for (BlockPos blockPos : positions) {
-            if (randomSource.nextInt(50) == 0) {
-                BlockPos blockPos1 = blockPos.subtract(pos);
-                float f = -0.5F + randomSource.nextFloat() + (float)blockPos1.getX();
-                float f1 = -2.0F + randomSource.nextFloat() + (float)blockPos1.getY();
-                float f2 = -0.5F + randomSource.nextFloat() + (float)blockPos1.getZ();
-                level.addParticle(ParticleTypes.NAUTILUS, vec3.x, vec3.y, vec3.z, (double)f, (double)f1, (double)f2);
+        d0 = (d0 * d0 + d0) * 0.30000001192092896D;
+        Vec3 vec3d = new Vec3((double) pos.getX() + 0.5D, (double) pos.getY() + 1.5D + d0, (double) pos.getZ() + 0.5D);
+        Iterator iterator = positions.iterator();
+
+        float f;
+
+        while (iterator.hasNext()) {
+            BlockPos blockposition1 = (BlockPos) iterator.next();
+
+            if (randomsource.nextInt(50) == 0) {
+                BlockPos blockposition2 = blockposition1.subtract(pos);
+
+                f = -0.5F + randomsource.nextFloat() + (float) blockposition2.getX();
+                float f1 = -2.0F + randomsource.nextFloat() + (float) blockposition2.getY();
+                float f2 = -0.5F + randomsource.nextFloat() + (float) blockposition2.getZ();
+
+                level.addParticle(ParticleTypes.NAUTILUS, vec3d.x, vec3d.y, vec3d.z, (double) f, (double) f1, (double) f2);
             }
         }
 
         if (entity != null) {
-            Vec3 vec31 = new Vec3(entity.getX(), entity.getEyeY(), entity.getZ());
-            float f3 = (-0.5F + randomSource.nextFloat()) * (3.0F + entity.getBbWidth());
-            float f4 = -1.0F + randomSource.nextFloat() * entity.getBbHeight();
-            float f = (-0.5F + randomSource.nextFloat()) * (3.0F + entity.getBbWidth());
-            Vec3 vec32 = new Vec3((double)f3, (double)f4, (double)f);
-            level.addParticle(ParticleTypes.NAUTILUS, vec31.x, vec31.y, vec31.z, vec32.x, vec32.y, vec32.z);
+            Vec3 vec3d1 = new Vec3(entity.getX(), entity.getEyeY(), entity.getZ());
+            float f3 = (-0.5F + randomsource.nextFloat()) * (3.0F + entity.getBbWidth());
+            float f4 = -1.0F + randomsource.nextFloat() * entity.getBbHeight();
+
+            f = (-0.5F + randomsource.nextFloat()) * (3.0F + entity.getBbWidth());
+            Vec3 vec3d2 = new Vec3((double) f3, (double) f4, (double) f);
+
+            level.addParticle(ParticleTypes.NAUTILUS, vec3d1.x, vec3d1.y, vec3d1.z, vec3d2.x, vec3d2.y, vec3d2.z);
         }
+
     }
 
     public boolean isActive() {
