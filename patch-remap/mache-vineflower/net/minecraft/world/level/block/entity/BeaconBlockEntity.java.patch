--- a/net/minecraft/world/level/block/entity/BeaconBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BeaconBlockEntity.java
@@ -3,6 +3,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import java.util.Arrays;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.stream.Collectors;
@@ -19,9 +20,9 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.world.INamableTileEntity;
+import net.minecraft.world.ITileInventory;
 import net.minecraft.world.LockCode;
-import net.minecraft.world.MenuProvider;
-import net.minecraft.world.Nameable;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
@@ -32,22 +33,22 @@
 import net.minecraft.world.inventory.ContainerData;
 import net.minecraft.world.inventory.ContainerLevelAccess;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.BeaconBeamBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.IBeaconBeam;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.phys.AABB;
+// CraftBukkit start
+import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.potion.PotionEffect;
+// CraftBukkit end
 
-public class BeaconBlockEntity extends BlockEntity implements MenuProvider, Nameable {
+public class BeaconBlockEntity extends BlockEntity implements ITileInventory, INamableTileEntity {
+
     private static final int MAX_LEVELS = 4;
-    public static final MobEffect[][] BEACON_EFFECTS = new MobEffect[][]{
-        {MobEffects.MOVEMENT_SPEED, MobEffects.DIG_SPEED},
-        {MobEffects.DAMAGE_RESISTANCE, MobEffects.JUMP},
-        {MobEffects.DAMAGE_BOOST},
-        {MobEffects.REGENERATION}
-    };
-    private static final Set<MobEffect> VALID_EFFECTS = Arrays.stream(BEACON_EFFECTS).flatMap(Arrays::stream).collect(Collectors.toSet());
+    public static final MobEffect[][] BEACON_EFFECTS = new MobEffect[][]{{MobEffects.MOVEMENT_SPEED, MobEffects.DIG_SPEED}, {MobEffects.DAMAGE_RESISTANCE, MobEffects.JUMP}, {MobEffects.DAMAGE_BOOST}, {MobEffects.REGENERATION}};
+    private static final Set<MobEffect> VALID_EFFECTS = (Set) Arrays.stream(BeaconBlockEntity.BEACON_EFFECTS).flatMap(Arrays::stream).collect(Collectors.toSet());
     public static final int DATA_LEVELS = 0;
     public static final int DATA_PRIMARY = 1;
     public static final int DATA_SECONDARY = 2;
@@ -58,117 +59,137 @@
     private static final String TAG_SECONDARY = "secondary_effect";
     List<BeaconBlockEntity.BeaconBeamSection> beamSections = Lists.newArrayList();
     private List<BeaconBlockEntity.BeaconBeamSection> checkingBeamSections = Lists.newArrayList();
-    int levels;
+    public int levels;
     private int lastCheckY;
     @Nullable
-    MobEffect primaryPower;
+    public MobEffect primaryPower;
     @Nullable
-    MobEffect secondaryPower;
+    public MobEffect secondaryPower;
     @Nullable
-    private Component name;
-    private LockCode lockKey = LockCode.NO_LOCK;
-    private final ContainerData dataAccess = new ContainerData() {
-        @Override
-        public int get(int index) {
-            return switch (index) {
-                case 0 -> BeaconBlockEntity.this.levels;
-                case 1 -> BeaconMenu.encodeEffect(BeaconBlockEntity.this.primaryPower);
-                case 2 -> BeaconMenu.encodeEffect(BeaconBlockEntity.this.secondaryPower);
-                default -> 0;
-            };
-        }
+    public Component name;
+    public LockCode lockKey;
+    private final ContainerData dataAccess;
+    // CraftBukkit start - add fields and methods
+    public PotionEffect getPrimaryEffect() {
+        return (this.primaryPower != null) ? CraftPotionUtil.toBukkit(new MobEffectInstance(this.primaryPower, getLevel(this.levels), getAmplification(levels, primaryPower, secondaryPower), true, true)) : null;
+    }
 
-        @Override
-        public void set(int index, int value) {
-            switch (index) {
-                case 0:
-                    BeaconBlockEntity.this.levels = value;
-                    break;
-                case 1:
-                    if (!BeaconBlockEntity.this.level.isClientSide && !BeaconBlockEntity.this.beamSections.isEmpty()) {
-                        BeaconBlockEntity.playSound(BeaconBlockEntity.this.level, BeaconBlockEntity.this.worldPosition, SoundEvents.BEACON_POWER_SELECT);
-                    }
+    public PotionEffect getSecondaryEffect() {
+        return (hasSecondaryEffect(levels, primaryPower, secondaryPower)) ? CraftPotionUtil.toBukkit(new MobEffectInstance(this.secondaryPower, getLevel(this.levels), getAmplification(levels, primaryPower, secondaryPower), true, true)) : null;
+    }
+    // CraftBukkit end
 
-                    BeaconBlockEntity.this.primaryPower = BeaconBlockEntity.filterEffect(BeaconMenu.decodeEffect(value));
-                    break;
-                case 2:
-                    BeaconBlockEntity.this.secondaryPower = BeaconBlockEntity.filterEffect(BeaconMenu.decodeEffect(value));
-            }
-        }
-
-        @Override
-        public int getCount() {
-            return 3;
-        }
-    };
-
     @Nullable
-    static MobEffect filterEffect(@Nullable MobEffect mobEffect) {
-        return VALID_EFFECTS.contains(mobEffect) ? mobEffect : null;
+    static MobEffect filterEffect(@Nullable MobEffect mobeffectlist) {
+        return BeaconBlockEntity.VALID_EFFECTS.contains(mobeffectlist) ? mobeffectlist : null;
     }
 
-    public BeaconBlockEntity(BlockPos pos, BlockState blockState) {
+    public BeaconBlockEntity(BlockPos pos, IBlockData blockState) {
         super(BlockEntityType.BEACON, pos, blockState);
+        this.lockKey = LockCode.NO_LOCK;
+        this.dataAccess = new ContainerData() {
+            @Override
+            public int get(int index) {
+                int j;
+
+                switch (index) {
+                    case 0:
+                        j = BeaconBlockEntity.this.levels;
+                        break;
+                    case 1:
+                        j = BeaconMenu.encodeEffect(BeaconBlockEntity.this.primaryPower);
+                        break;
+                    case 2:
+                        j = BeaconMenu.encodeEffect(BeaconBlockEntity.this.secondaryPower);
+                        break;
+                    default:
+                        j = 0;
+                }
+
+                return j;
+            }
+
+            @Override
+            public void set(int index, int value) {
+                switch (index) {
+                    case 0:
+                        BeaconBlockEntity.this.levels = value;
+                        break;
+                    case 1:
+                        if (!BeaconBlockEntity.this.level.isClientSide && !BeaconBlockEntity.this.beamSections.isEmpty()) {
+                            BeaconBlockEntity.playSound(BeaconBlockEntity.this.level, BeaconBlockEntity.this.worldPosition, SoundEvents.BEACON_POWER_SELECT);
+                        }
+
+                        BeaconBlockEntity.this.primaryPower = BeaconBlockEntity.filterEffect(BeaconMenu.decodeEffect(value));
+                        break;
+                    case 2:
+                        BeaconBlockEntity.this.secondaryPower = BeaconBlockEntity.filterEffect(BeaconMenu.decodeEffect(value));
+                }
+
+            }
+
+            @Override
+            public int getCount() {
+                return 3;
+            }
+        };
     }
 
-    public static void tick(Level level, BlockPos pos, BlockState state, BeaconBlockEntity blockEntity) {
-        int x = pos.getX();
-        int y = pos.getY();
-        int z = pos.getZ();
-        BlockPos blockPos;
-        if (blockEntity.lastCheckY < y) {
-            blockPos = pos;
+    public static void tick(Level level, BlockPos pos, IBlockData state, BeaconBlockEntity blockEntity) {
+        int i = pos.getX();
+        int j = pos.getY();
+        int k = pos.getZ();
+        BlockPos blockposition1;
+
+        if (blockEntity.lastCheckY < j) {
+            blockposition1 = pos;
             blockEntity.checkingBeamSections = Lists.newArrayList();
             blockEntity.lastCheckY = pos.getY() - 1;
         } else {
-            blockPos = new BlockPos(x, blockEntity.lastCheckY + 1, z);
+            blockposition1 = new BlockPos(i, blockEntity.lastCheckY + 1, k);
         }
 
-        BeaconBlockEntity.BeaconBeamSection beaconBeamSection = blockEntity.checkingBeamSections.isEmpty()
-            ? null
-            : blockEntity.checkingBeamSections.get(blockEntity.checkingBeamSections.size() - 1);
-        int height = level.getHeight(Heightmap.Types.WORLD_SURFACE, x, z);
+        BeaconBlockEntity.BeaconBeamSection tileentitybeacon_beaconcolortracker = blockEntity.checkingBeamSections.isEmpty() ? null : (BeaconBlockEntity.BeaconBeamSection) blockEntity.checkingBeamSections.get(blockEntity.checkingBeamSections.size() - 1);
+        int l = level.getHeight(Heightmap.Types.WORLD_SURFACE, i, k);
 
-        for (int i = 0; i < 10 && blockPos.getY() <= height; i++) {
-            BlockState blockState = level.getBlockState(blockPos);
-            Block block = blockState.getBlock();
-            if (block instanceof BeaconBeamBlock) {
-                float[] textureDiffuseColors = ((BeaconBeamBlock)block).getColor().getTextureDiffuseColors();
+        int i1;
+
+        for (i1 = 0; i1 < 10 && blockposition1.getY() <= l; ++i1) {
+            IBlockData iblockdata1 = level.getBlockState(blockposition1);
+            Block block = iblockdata1.getBlock();
+
+            if (block instanceof IBeaconBeam) {
+                float[] afloat = ((IBeaconBeam) block).getColor().getTextureDiffuseColors();
+
                 if (blockEntity.checkingBeamSections.size() <= 1) {
-                    beaconBeamSection = new BeaconBlockEntity.BeaconBeamSection(textureDiffuseColors);
-                    blockEntity.checkingBeamSections.add(beaconBeamSection);
-                } else if (beaconBeamSection != null) {
-                    if (Arrays.equals(textureDiffuseColors, beaconBeamSection.color)) {
-                        beaconBeamSection.increaseHeight();
+                    tileentitybeacon_beaconcolortracker = new BeaconBlockEntity.BeaconBeamSection(afloat);
+                    blockEntity.checkingBeamSections.add(tileentitybeacon_beaconcolortracker);
+                } else if (tileentitybeacon_beaconcolortracker != null) {
+                    if (Arrays.equals(afloat, tileentitybeacon_beaconcolortracker.color)) {
+                        tileentitybeacon_beaconcolortracker.increaseHeight();
                     } else {
-                        beaconBeamSection = new BeaconBlockEntity.BeaconBeamSection(
-                            new float[]{
-                                (beaconBeamSection.color[0] + textureDiffuseColors[0]) / 2.0F,
-                                (beaconBeamSection.color[1] + textureDiffuseColors[1]) / 2.0F,
-                                (beaconBeamSection.color[2] + textureDiffuseColors[2]) / 2.0F
-                            }
-                        );
-                        blockEntity.checkingBeamSections.add(beaconBeamSection);
+                        tileentitybeacon_beaconcolortracker = new BeaconBlockEntity.BeaconBeamSection(new float[]{(tileentitybeacon_beaconcolortracker.color[0] + afloat[0]) / 2.0F, (tileentitybeacon_beaconcolortracker.color[1] + afloat[1]) / 2.0F, (tileentitybeacon_beaconcolortracker.color[2] + afloat[2]) / 2.0F});
+                        blockEntity.checkingBeamSections.add(tileentitybeacon_beaconcolortracker);
                     }
                 }
             } else {
-                if (beaconBeamSection == null || blockState.getLightBlock(level, blockPos) >= 15 && !blockState.is(Blocks.BEDROCK)) {
+                if (tileentitybeacon_beaconcolortracker == null || iblockdata1.getLightBlock(level, blockposition1) >= 15 && !iblockdata1.is(Blocks.BEDROCK)) {
                     blockEntity.checkingBeamSections.clear();
-                    blockEntity.lastCheckY = height;
+                    blockEntity.lastCheckY = l;
                     break;
                 }
 
-                beaconBeamSection.increaseHeight();
+                tileentitybeacon_beaconcolortracker.increaseHeight();
             }
 
-            blockPos = blockPos.above();
-            blockEntity.lastCheckY++;
+            blockposition1 = blockposition1.above();
+            ++blockEntity.lastCheckY;
         }
 
-        int i = blockEntity.levels;
+        i1 = blockEntity.levels;
         if (level.getGameTime() % 80L == 0L) {
             if (!blockEntity.beamSections.isEmpty()) {
-                blockEntity.levels = updateBase(level, x, y, z);
+                blockEntity.levels = updateBase(level, i, j, k);
             }
 
             if (blockEntity.levels > 0 && !blockEntity.beamSections.isEmpty()) {
@@ -177,41 +198,46 @@
             }
         }
 
-        if (blockEntity.lastCheckY >= height) {
+        if (blockEntity.lastCheckY >= l) {
             blockEntity.lastCheckY = level.getMinBuildHeight() - 1;
-            boolean flag = i > 0;
+            boolean flag = i1 > 0;
+
             blockEntity.beamSections = blockEntity.checkingBeamSections;
             if (!level.isClientSide) {
                 boolean flag1 = blockEntity.levels > 0;
+
                 if (!flag && flag1) {
                     playSound(level, pos, SoundEvents.BEACON_ACTIVATE);
+                    Iterator iterator = level.getEntitiesOfClass(ServerPlayer.class, (new AABB((double) i, (double) j, (double) k, (double) i, (double) (j - 4), (double) k)).inflate(10.0D, 5.0D, 10.0D)).iterator();
 
-                    for (ServerPlayer serverPlayer : level.getEntitiesOfClass(
-                        ServerPlayer.class, new AABB((double)x, (double)y, (double)z, (double)x, (double)(y - 4), (double)z).inflate(10.0, 5.0, 10.0)
-                    )) {
-                        CriteriaTriggers.CONSTRUCT_BEACON.trigger(serverPlayer, blockEntity.levels);
+                    while (iterator.hasNext()) {
+                        ServerPlayer entityplayer = (ServerPlayer) iterator.next();
+
+                        CriteriaTriggers.CONSTRUCT_BEACON.trigger(entityplayer, blockEntity.levels);
                     }
                 } else if (flag && !flag1) {
                     playSound(level, pos, SoundEvents.BEACON_DEACTIVATE);
                 }
             }
         }
+
     }
 
     private static int updateBase(Level level, int x, int y, int z) {
-        int i = 0;
+        int l = 0;
 
-        for (int i1 = 1; i1 <= 4; i = i1++) {
-            int i2 = y - i1;
-            if (i2 < level.getMinBuildHeight()) {
+        for (int i1 = 1; i1 <= 4; l = i1++) {
+            int j1 = y - i1;
+
+            if (j1 < level.getMinBuildHeight()) {
                 break;
             }
 
             boolean flag = true;
 
-            for (int i3 = x - i1; i3 <= x + i1 && flag; i3++) {
-                for (int i4 = z - i1; i4 <= z + i1; i4++) {
-                    if (!level.getBlockState(new BlockPos(i3, i2, i4)).is(BlockTags.BEACON_BASE_BLOCKS)) {
+            for (int k1 = x - i1; k1 <= x + i1 && flag; ++k1) {
+                for (int l1 = z - i1; l1 <= z + i1; ++l1) {
+                    if (!level.getBlockState(new BlockPos(k1, j1, l1)).is(BlockTags.BEACON_BASE_BLOCKS)) {
                         flag = false;
                         break;
                     }
@@ -223,7 +249,7 @@
             }
         }
 
-        return i;
+        return l;
     }
 
     @Override
@@ -232,36 +258,84 @@
         super.setRemoved();
     }
 
-    private static void applyEffects(Level level, BlockPos pos, int levels, @Nullable MobEffect primary, @Nullable MobEffect secondary) {
-        if (!level.isClientSide && primary != null) {
-            double d = (double)(levels * 10 + 10);
-            int i = 0;
-            if (levels >= 4 && primary == secondary) {
-                i = 1;
+    // CraftBukkit start - split into components
+    private static byte getAmplification(int i, @Nullable MobEffect mobeffectlist, @Nullable MobEffect mobeffectlist1) {
+        {
+            byte b0 = 0;
+
+            if (i >= 4 && mobeffectlist == mobeffectlist1) {
+                b0 = 1;
             }
 
-            int i1 = (9 + levels * 2) * 20;
-            AABB aABB = new AABB(pos).inflate(d).expandTowards(0.0, (double)level.getHeight(), 0.0);
-            List<Player> entitiesOfClass = level.getEntitiesOfClass(Player.class, aABB);
+            return b0;
+        }
+    }
 
-            for (Player player : entitiesOfClass) {
-                player.addEffect(new MobEffectInstance(primary, i1, i, true, true));
+    private static int getLevel(int i) {
+        {
+            int j = (9 + i * 2) * 20;
+            return j;
+        }
+    }
+
+    public static List getHumansInRange(Level world, BlockPos blockposition, int i) {
+        {
+            double d0 = (double) (i * 10 + 10);
+
+            AABB axisalignedbb = (new AABB(blockposition)).inflate(d0).expandTowards(0.0D, (double) world.getHeight(), 0.0D);
+            List<Player> list = world.getEntitiesOfClass(Player.class, axisalignedbb);
+
+            return list;
+        }
+    }
+
+    private static void applyEffect(List list, MobEffect mobeffectlist, int j, int b0) {
+        {
+            Iterator iterator = list.iterator();
+
+            Player entityhuman;
+
+            while (iterator.hasNext()) {
+                entityhuman = (Player) iterator.next();
+                entityhuman.addEffect(new MobEffectInstance(mobeffectlist, j, b0, true, true), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.BEACON);
             }
+        }
+    }
 
-            if (levels >= 4 && primary != secondary && secondary != null) {
-                for (Player player : entitiesOfClass) {
-                    player.addEffect(new MobEffectInstance(secondary, i1, 0, true, true));
-                }
+    private static boolean hasSecondaryEffect(int i, @Nullable MobEffect mobeffectlist, @Nullable MobEffect mobeffectlist1) {
+        {
+            if (i >= 4 && mobeffectlist != mobeffectlist1 && mobeffectlist1 != null) {
+                return true;
             }
+
+            return false;
         }
     }
 
+    private static void applyEffects(Level level, BlockPos pos, int levels, @Nullable MobEffect primary, @Nullable MobEffect secondary) {
+        if (!level.isClientSide && primary != null) {
+            double d0 = (double) (levels * 10 + 10);
+            byte b0 = getAmplification(levels, primary, secondary);
+
+            int j = getLevel(levels);
+            List list = getHumansInRange(level, pos, levels);
+
+            applyEffect(list, primary, j, b0);
+
+            if (hasSecondaryEffect(levels, primary, secondary)) {
+                applyEffect(list, secondary, j, 0);
+            }
+        }
+
+    }
+    // CraftBukkit end
+
     public static void playSound(Level level, BlockPos pos, SoundEvent sound) {
-        level.playSound(null, pos, sound, SoundSource.BLOCKS, 1.0F, 1.0F);
+        level.playSound((Player) null, pos, sound, SoundSource.BLOCKS, 1.0F, 1.0F);
     }
 
     public List<BeaconBlockEntity.BeaconBeamSection> getBeamSections() {
-        return (List<BeaconBlockEntity.BeaconBeamSection>)(this.levels == 0 ? ImmutableList.of() : this.beamSections);
+        return (List) (this.levels == 0 ? ImmutableList.of() : this.beamSections);
     }
 
     @Override
@@ -274,20 +348,23 @@
         return this.saveWithoutMetadata();
     }
 
-    private static void storeEffect(CompoundTag compoundTag, String string, @Nullable MobEffect mobEffect) {
-        if (mobEffect != null) {
-            ResourceLocation key = BuiltInRegistries.MOB_EFFECT.getKey(mobEffect);
-            if (key != null) {
-                compoundTag.putString(string, key.toString());
+    private static void storeEffect(CompoundTag nbttagcompound, String s, @Nullable MobEffect mobeffectlist) {
+        if (mobeffectlist != null) {
+            ResourceLocation minecraftkey = BuiltInRegistries.MOB_EFFECT.getKey(mobeffectlist);
+
+            if (minecraftkey != null) {
+                nbttagcompound.putString(s, minecraftkey.toString());
             }
         }
+
     }
 
     @Nullable
-    private static MobEffect loadEffect(CompoundTag compoundTag, String string) {
-        if (compoundTag.contains(string, 8)) {
-            ResourceLocation resourceLocation = ResourceLocation.tryParse(compoundTag.getString(string));
-            return filterEffect(BuiltInRegistries.MOB_EFFECT.get(resourceLocation));
+    private static MobEffect loadEffect(CompoundTag nbttagcompound, String s) {
+        if (nbttagcompound.contains(s, 8)) {
+            ResourceLocation minecraftkey = ResourceLocation.tryParse(nbttagcompound.getString(s));
+
+            return (MobEffect) BuiltInRegistries.MOB_EFFECT.get(minecraftkey); // CraftBukkit - persist manually set non-default beacon effects (SPIGOT-3598)
         } else {
             return null;
         }
@@ -298,6 +375,7 @@
         super.load(tag);
         this.primaryPower = loadEffect(tag, "primary_effect");
         this.secondaryPower = loadEffect(tag, "secondary_effect");
+        this.levels = tag.getInt("Levels"); // CraftBukkit - SPIGOT-5053, use where available
         if (tag.contains("CustomName", 8)) {
             this.name = Component.Serializer.fromJson(tag.getString("CustomName"));
         }
@@ -331,9 +409,7 @@
     @Nullable
     @Override
     public AbstractContainerMenu createMenu(int containerId, Inventory playerInventory, Player player) {
-        return BaseContainerBlockEntity.canUnlock(player, this.lockKey, this.getDisplayName())
-            ? new BeaconMenu(containerId, playerInventory, this.dataAccess, ContainerLevelAccess.create(this.level, this.getBlockPos()))
-            : null;
+        return BaseContainerBlockEntity.canUnlock(player, this.lockKey, this.getDisplayName()) ? new BeaconMenu(containerId, playerInventory, this.dataAccess, ContainerLevelAccess.create(this.level, this.getBlockPos())) : null;
     }
 
     @Override
@@ -343,7 +419,7 @@
 
     @Override
     public Component getName() {
-        return this.name != null ? this.name : DEFAULT_NAME;
+        return this.name != null ? this.name : BeaconBlockEntity.DEFAULT_NAME;
     }
 
     @Override
@@ -353,6 +429,7 @@
     }
 
     public static class BeaconBeamSection {
+
         final float[] color;
         private int height;
 
@@ -362,7 +439,7 @@
         }
 
         protected void increaseHeight() {
-            this.height++;
+            ++this.height;
         }
 
         public float[] getColor() {
