--- a/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block.entity;
 
+import java.util.Iterator;
 import java.util.List;
 import java.util.stream.IntStream;
 import javax.annotation.Nullable;
@@ -14,7 +15,7 @@
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.WorldlyContainer;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.MoverType;
+import net.minecraft.world.entity.EnumMoveType;
 import net.minecraft.world.entity.monster.Shulker;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
@@ -25,13 +26,18 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.ShulkerBoxBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
-import net.minecraft.world.level.material.PushReaction;
+import net.minecraft.world.level.material.EnumPistonReaction;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
 
 public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity implements WorldlyContainer {
+
     public static final int COLUMNS = 9;
     public static final int ROWS = 3;
     public static final int CONTAINER_SIZE = 27;
@@ -41,29 +47,64 @@
     public static final float MAX_LID_ROTATION = 270.0F;
     public static final String ITEMS_TAG = "Items";
     private static final int[] SLOTS = IntStream.range(0, 27).toArray();
-    private NonNullList<ItemStack> itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
-    private int openCount;
-    private ShulkerBoxBlockEntity.AnimationStatus animationStatus = ShulkerBoxBlockEntity.AnimationStatus.CLOSED;
+    private NonNullList<ItemStack> itemStacks;
+    public int openCount;
+    private ShulkerBoxBlockEntity.AnimationPhase animationStatus;
     private float progress;
     private float progressOld;
     @Nullable
     private final DyeColor color;
 
-    public ShulkerBoxBlockEntity(@Nullable DyeColor color, BlockPos pos, BlockState blockState) {
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+    public boolean opened;
+
+    public List<ItemStack> getContents() {
+        return this.itemStacks;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+    public ShulkerBoxBlockEntity(@Nullable DyeColor color, BlockPos pos, IBlockData blockState) {
         super(BlockEntityType.SHULKER_BOX, pos, blockState);
+        this.itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
+        this.animationStatus = ShulkerBoxBlockEntity.AnimationPhase.CLOSED;
         this.color = color;
     }
 
-    public ShulkerBoxBlockEntity(BlockPos pos, BlockState blockState) {
+    public ShulkerBoxBlockEntity(BlockPos pos, IBlockData blockState) {
         super(BlockEntityType.SHULKER_BOX, pos, blockState);
+        this.itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
+        this.animationStatus = ShulkerBoxBlockEntity.AnimationPhase.CLOSED;
         this.color = ShulkerBoxBlock.getColorFromBlock(blockState.getBlock());
     }
 
-    public static void tick(Level level, BlockPos pos, BlockState state, ShulkerBoxBlockEntity blockEntity) {
+    public static void tick(Level level, BlockPos pos, IBlockData state, ShulkerBoxBlockEntity blockEntity) {
         blockEntity.updateAnimation(level, pos, state);
     }
 
-    private void updateAnimation(Level level, BlockPos pos, BlockState state) {
+    private void updateAnimation(Level level, BlockPos pos, IBlockData state) {
         this.progressOld = this.progress;
         switch (this.animationStatus) {
             case CLOSED:
@@ -76,7 +117,7 @@
                 }
 
                 if (this.progress >= 1.0F) {
-                    this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.OPENED;
+                    this.animationStatus = ShulkerBoxBlockEntity.AnimationPhase.OPENED;
                     this.progress = 1.0F;
                     doNeighborUpdates(level, pos, state);
                 }
@@ -90,7 +131,7 @@
                 }
 
                 if (this.progress <= 0.0F) {
-                    this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.CLOSED;
+                    this.animationStatus = ShulkerBoxBlockEntity.AnimationPhase.CLOSED;
                     this.progress = 0.0F;
                     doNeighborUpdates(level, pos, state);
                 }
@@ -98,34 +139,34 @@
             case OPENED:
                 this.progress = 1.0F;
         }
+
     }
 
-    public ShulkerBoxBlockEntity.AnimationStatus getAnimationStatus() {
+    public ShulkerBoxBlockEntity.AnimationPhase getAnimationStatus() {
         return this.animationStatus;
     }
 
-    public AABB getBoundingBox(BlockState state) {
-        return Shulker.getProgressAabb(state.getValue(ShulkerBoxBlock.FACING), 0.5F * this.getProgress(1.0F));
+    public AABB getBoundingBox(IBlockData state) {
+        return Shulker.getProgressAabb((Direction) state.getValue(ShulkerBoxBlock.FACING), 0.5F * this.getProgress(1.0F));
     }
 
-    private void moveCollidedEntities(Level level, BlockPos pos, BlockState state) {
+    private void moveCollidedEntities(Level level, BlockPos pos, IBlockData state) {
         if (state.getBlock() instanceof ShulkerBoxBlock) {
-            Direction direction = state.getValue(ShulkerBoxBlock.FACING);
-            AABB aABB = Shulker.getProgressDeltaAabb(direction, this.progressOld, this.progress).move(pos);
-            List<Entity> entities = level.getEntities(null, aABB);
-            if (!entities.isEmpty()) {
-                for (Entity entity : entities) {
-                    if (entity.getPistonPushReaction() != PushReaction.IGNORE) {
-                        entity.move(
-                            MoverType.SHULKER_BOX,
-                            new Vec3(
-                                (aABB.getXsize() + 0.01) * (double)direction.getStepX(),
-                                (aABB.getYsize() + 0.01) * (double)direction.getStepY(),
-                                (aABB.getZsize() + 0.01) * (double)direction.getStepZ()
-                            )
-                        );
+            Direction enumdirection = (Direction) state.getValue(ShulkerBoxBlock.FACING);
+            AABB axisalignedbb = Shulker.getProgressDeltaAabb(enumdirection, this.progressOld, this.progress).move(pos);
+            List<Entity> list = level.getEntities((Entity) null, axisalignedbb);
+
+            if (!list.isEmpty()) {
+                Iterator iterator = list.iterator();
+
+                while (iterator.hasNext()) {
+                    Entity entity = (Entity) iterator.next();
+
+                    if (entity.getPistonPushReaction() != EnumPistonReaction.IGNORE) {
+                        entity.move(EnumMoveType.SHULKER_BOX, new Vec3((axisalignedbb.getXsize() + 0.01D) * (double) enumdirection.getStepX(), (axisalignedbb.getYsize() + 0.01D) * (double) enumdirection.getStepY(), (axisalignedbb.getZsize() + 0.01D) * (double) enumdirection.getStepZ()));
                     }
                 }
+
             }
         }
     }
@@ -140,11 +181,11 @@
         if (id == 1) {
             this.openCount = type;
             if (type == 0) {
-                this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.CLOSING;
+                this.animationStatus = ShulkerBoxBlockEntity.AnimationPhase.CLOSING;
             }
 
             if (type == 1) {
-                this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.OPENING;
+                this.animationStatus = ShulkerBoxBlockEntity.AnimationPhase.OPENING;
             }
 
             return true;
@@ -153,7 +194,7 @@
         }
     }
 
-    private static void doNeighborUpdates(Level level, BlockPos pos, BlockState state) {
+    private static void doNeighborUpdates(Level level, BlockPos pos, IBlockData state) {
         state.updateNeighbourShapes(level, pos, 3);
         level.updateNeighborsAt(pos, state.getBlock());
     }
@@ -165,27 +206,29 @@
                 this.openCount = 0;
             }
 
-            this.openCount++;
+            ++this.openCount;
+            if (opened) return; // CraftBukkit - only animate if the ShulkerBox hasn't been forced open already by an API call.
             this.level.blockEvent(this.worldPosition, this.getBlockState().getBlock(), 1, this.openCount);
             if (this.openCount == 1) {
-                this.level.gameEvent(player, GameEvent.CONTAINER_OPEN, this.worldPosition);
-                this.level
-                    .playSound(null, this.worldPosition, SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+                this.level.gameEvent((Entity) player, GameEvent.CONTAINER_OPEN, this.worldPosition);
+                this.level.playSound((Player) null, this.worldPosition, SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
             }
         }
+
     }
 
     @Override
     public void stopOpen(Player player) {
         if (!this.remove && !player.isSpectator()) {
-            this.openCount--;
+            --this.openCount;
+            if (opened) return; // CraftBukkit - only animate if the ShulkerBox hasn't been forced open already by an API call.
             this.level.blockEvent(this.worldPosition, this.getBlockState().getBlock(), 1, this.openCount);
             if (this.openCount <= 0) {
-                this.level.gameEvent(player, GameEvent.CONTAINER_CLOSE, this.worldPosition);
-                this.level
-                    .playSound(null, this.worldPosition, SoundEvents.SHULKER_BOX_CLOSE, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+                this.level.gameEvent((Entity) player, GameEvent.CONTAINER_CLOSE, this.worldPosition);
+                this.level.playSound((Player) null, this.worldPosition, SoundEvents.SHULKER_BOX_CLOSE, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
             }
         }
+
     }
 
     @Override
@@ -205,6 +248,7 @@
         if (!this.trySaveLootTable(tag)) {
             ContainerHelper.saveAllItems(tag, this.itemStacks, false);
         }
+
     }
 
     public void loadFromTag(CompoundTag tag) {
@@ -212,6 +256,7 @@
         if (!this.tryLoadLootTable(tag) && tag.contains("Items", 9)) {
             ContainerHelper.loadAllItems(tag, this.itemStacks);
         }
+
     }
 
     @Override
@@ -226,7 +271,7 @@
 
     @Override
     public int[] getSlotsForFace(Direction side) {
-        return SLOTS;
+        return ShulkerBoxBlockEntity.SLOTS;
     }
 
     @Override
@@ -254,13 +299,13 @@
     }
 
     public boolean isClosed() {
-        return this.animationStatus == ShulkerBoxBlockEntity.AnimationStatus.CLOSED;
+        return this.animationStatus == ShulkerBoxBlockEntity.AnimationPhase.CLOSED;
     }
 
-    public static enum AnimationStatus {
-        CLOSED,
-        OPENING,
-        OPENED,
-        CLOSING;
+    public static enum AnimationPhase {
+
+        CLOSED, OPENING, OPENED, CLOSING;
+
+        private AnimationPhase() {}
     }
 }
