--- a/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
@@ -11,26 +11,73 @@
 import net.minecraft.world.Container;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.RecordItem;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.JukeboxBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.ticks.ContainerSingleItem;
 
+// CraftBukkit start
+import java.util.Collections;
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class JukeboxBlockEntity extends BlockEntity implements Clearable, ContainerSingleItem {
+
     private static final int SONG_END_PADDING = 20;
-    private ItemStack item = ItemStack.EMPTY;
+    private ItemStack item;
     private int ticksSinceLastEvent;
-    private long tickCount;
-    private long recordStartedTick;
-    private boolean isPlaying;
+    public long tickCount;
+    public long recordStartedTick;
+    public boolean isPlaying;
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+    public boolean opened;
 
-    public JukeboxBlockEntity(BlockPos pos, BlockState blockState) {
+    @Override
+    public List<ItemStack> getContents() {
+        return Collections.singletonList(item);
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    @Override
+    public Location getLocation() {
+        if (level == null) return null;
+        return new org.bukkit.Location(level.getWorld(), worldPosition.getX(), worldPosition.getY(), worldPosition.getZ());
+    }
+    // CraftBukkit end
+
+    public JukeboxBlockEntity(BlockPos pos, IBlockData blockState) {
         super(BlockEntityType.JUKEBOX, pos, blockState);
+        this.item = ItemStack.EMPTY;
     }
 
     @Override
@@ -63,9 +110,10 @@
 
     private void setHasRecordBlockState(@Nullable Entity entity, boolean hasRecord) {
         if (this.level.getBlockState(this.getBlockPos()) == this.getBlockState()) {
-            this.level.setBlock(this.getBlockPos(), this.getBlockState().setValue(JukeboxBlock.HAS_RECORD, Boolean.valueOf(hasRecord)), 2);
+            this.level.setBlock(this.getBlockPos(), (IBlockData) this.getBlockState().setValue(JukeboxBlock.HAS_RECORD, hasRecord), 2);
             this.level.gameEvent(GameEvent.BLOCK_CHANGE, this.getBlockPos(), GameEvent.Context.of(entity, this.getBlockState()));
         }
+
     }
 
     @VisibleForTesting
@@ -73,7 +121,7 @@
         this.recordStartedTick = this.tickCount;
         this.isPlaying = true;
         this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
-        this.level.levelEvent(null, 1010, this.getBlockPos(), Item.getId(this.getTheItem().getItem()));
+        this.level.levelEvent((Player) null, 1010, this.getBlockPos(), Item.getId(this.getTheItem().getItem()));
         this.setChanged();
     }
 
@@ -85,23 +133,29 @@
         this.setChanged();
     }
 
-    private void tick(Level level, BlockPos pos, BlockState state) {
-        this.ticksSinceLastEvent++;
-        if (this.isRecordPlaying() && this.getTheItem().getItem() instanceof RecordItem recordItem) {
-            if (this.shouldRecordStopPlaying(recordItem)) {
-                this.stopPlaying();
-            } else if (this.shouldSendJukeboxPlayingEvent()) {
-                this.ticksSinceLastEvent = 0;
-                level.gameEvent(GameEvent.JUKEBOX_PLAY, pos, GameEvent.Context.of(state));
-                this.spawnMusicParticles(level, pos);
+    private void tick(Level level, BlockPos pos, IBlockData state) {
+        ++this.ticksSinceLastEvent;
+        if (this.isRecordPlaying()) {
+            Item item = this.getTheItem().getItem();
+
+            if (item instanceof RecordItem) {
+                RecordItem itemrecord = (RecordItem) item;
+
+                if (this.shouldRecordStopPlaying(itemrecord)) {
+                    this.stopPlaying();
+                } else if (this.shouldSendJukeboxPlayingEvent()) {
+                    this.ticksSinceLastEvent = 0;
+                    level.gameEvent(GameEvent.JUKEBOX_PLAY, pos, GameEvent.Context.of(state));
+                    this.spawnMusicParticles(level, pos);
+                }
             }
         }
 
-        this.tickCount++;
+        ++this.tickCount;
     }
 
-    private boolean shouldRecordStopPlaying(RecordItem _record) {
-        return this.tickCount >= this.recordStartedTick + (long)_record.getLengthInTicks() + 20L;
+    private boolean shouldRecordStopPlaying(RecordItem record) {
+        return this.tickCount >= this.recordStartedTick + (long) record.getLengthInTicks() + 20L;
     }
 
     private boolean shouldSendJukeboxPlayingEvent() {
@@ -115,30 +169,32 @@
 
     @Override
     public ItemStack splitTheItem(int i) {
-        ItemStack itemStack = this.item;
+        ItemStack itemstack = this.item;
+
         this.item = ItemStack.EMPTY;
-        if (!itemStack.isEmpty()) {
-            this.setHasRecordBlockState(null, false);
+        if (!itemstack.isEmpty()) {
+            this.setHasRecordBlockState((Entity) null, false);
             this.stopPlaying();
         }
 
-        return itemStack;
+        return itemstack;
     }
 
     @Override
-    public void setTheItem(ItemStack itemStack) {
-        if (itemStack.is(ItemTags.MUSIC_DISCS) && this.level != null) {
-            this.item = itemStack;
-            this.setHasRecordBlockState(null, true);
+    public void setTheItem(ItemStack itemstack) {
+        if (itemstack.is(ItemTags.MUSIC_DISCS) && this.level != null) {
+            this.item = itemstack;
+            this.setHasRecordBlockState((Entity) null, true);
             this.startPlaying();
-        } else if (itemStack.isEmpty()) {
+        } else if (itemstack.isEmpty()) {
             this.splitTheItem(1);
         }
+
     }
 
     @Override
     public int getMaxStackSize() {
-        return 1;
+        return maxStack; // CraftBukkit
     }
 
     @Override
@@ -157,36 +213,45 @@
     }
 
     private void spawnMusicParticles(Level level, BlockPos pos) {
-        if (level instanceof ServerLevel serverLevel) {
-            Vec3 vec3 = Vec3.atBottomCenterOf(pos).add(0.0, 1.2F, 0.0);
-            float f = (float)level.getRandom().nextInt(4) / 24.0F;
-            serverLevel.sendParticles(ParticleTypes.NOTE, vec3.x(), vec3.y(), vec3.z(), 0, (double)f, 0.0, 0.0, 1.0);
+        if (level instanceof ServerLevel) {
+            ServerLevel worldserver = (ServerLevel) level;
+            Vec3 vec3d = Vec3.atBottomCenterOf(pos).add(0.0D, 1.2000000476837158D, 0.0D);
+            float f = (float) level.getRandom().nextInt(4) / 24.0F;
+
+            worldserver.sendParticles(ParticleTypes.NOTE, vec3d.x(), vec3d.y(), vec3d.z(), 0, (double) f, 0.0D, 0.0D, 1.0D);
         }
+
     }
 
     public void popOutRecord() {
         if (this.level != null && !this.level.isClientSide) {
-            BlockPos blockPos = this.getBlockPos();
-            ItemStack theItem = this.getTheItem();
-            if (!theItem.isEmpty()) {
+            BlockPos blockposition = this.getBlockPos();
+            ItemStack itemstack = this.getTheItem();
+
+            if (!itemstack.isEmpty()) {
                 this.removeTheItem();
-                Vec3 vec3 = Vec3.atLowerCornerWithOffset(blockPos, 0.5, 1.01, 0.5).offsetRandom(this.level.random, 0.7F);
-                ItemStack itemStack = theItem.copy();
-                ItemEntity itemEntity = new ItemEntity(this.level, vec3.x(), vec3.y(), vec3.z(), itemStack);
-                itemEntity.setDefaultPickUpDelay();
-                this.level.addFreshEntity(itemEntity);
+                Vec3 vec3d = Vec3.atLowerCornerWithOffset(blockposition, 0.5D, 1.01D, 0.5D).offsetRandom(this.level.random, 0.7F);
+                ItemStack itemstack1 = itemstack.copy();
+                ItemEntity entityitem = new ItemEntity(this.level, vec3d.x(), vec3d.y(), vec3d.z(), itemstack1);
+
+                entityitem.setDefaultPickUpDelay();
+                this.level.addFreshEntity(entityitem);
             }
         }
     }
 
-    public static void playRecordTick(Level level, BlockPos pos, BlockState state, JukeboxBlockEntity jukebox) {
+    public static void playRecordTick(Level level, BlockPos pos, IBlockData state, JukeboxBlockEntity jukebox) {
         jukebox.tick(level, pos, state);
     }
 
     @VisibleForTesting
     public void setRecordWithoutPlaying(ItemStack stack) {
         this.item = stack;
-        this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
+        // CraftBukkit start - add null check for level
+        if (level != null) {
+            this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
+        }
+        // CraftBukkit end
         this.setChanged();
     }
 }
