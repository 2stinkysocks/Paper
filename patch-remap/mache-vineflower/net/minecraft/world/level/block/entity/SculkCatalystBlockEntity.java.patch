--- a/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
@@ -12,31 +12,38 @@
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.SculkCatalystBlock;
 import net.minecraft.world.level.block.SculkSpreader;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.BlockPositionSource;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.gameevent.GameEventListener;
 import net.minecraft.world.level.gameevent.PositionSource;
 import net.minecraft.world.phys.Vec3;
 
-public class SculkCatalystBlockEntity extends BlockEntity implements GameEventListener.Holder<SculkCatalystBlockEntity.CatalystListener> {
+public class SculkCatalystBlockEntity extends BlockEntity implements GameEventListener.b<SculkCatalystBlockEntity.CatalystListener> {
+
     private final SculkCatalystBlockEntity.CatalystListener catalystListener;
 
-    public SculkCatalystBlockEntity(BlockPos pos, BlockState blockState) {
+    public SculkCatalystBlockEntity(BlockPos pos, IBlockData blockState) {
         super(BlockEntityType.SCULK_CATALYST, pos, blockState);
         this.catalystListener = new SculkCatalystBlockEntity.CatalystListener(blockState, new BlockPositionSource(pos));
+        catalystListener.level = level; // CraftBukkit
     }
 
-    public static void serverTick(Level level, BlockPos pos, BlockState state, SculkCatalystBlockEntity sculkCatalyst) {
+    public static void serverTick(Level level, BlockPos pos, IBlockData state, SculkCatalystBlockEntity sculkCatalyst) {
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = sculkCatalyst.getBlockPos(); // CraftBukkit - SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
         sculkCatalyst.catalystListener.getSculkSpreader().updateCursors(level, pos, level.getRandom(), true);
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = null; // CraftBukkit
     }
 
     @Override
     public void load(CompoundTag tag) {
+        super.load(tag); // CraftBukkit - SPIGOT-7393: Load super Bukkit data
         this.catalystListener.sculkSpreader.load(tag);
     }
 
@@ -52,15 +59,18 @@
     }
 
     public static class CatalystListener implements GameEventListener {
+
         public static final int PULSE_TICKS = 8;
         final SculkSpreader sculkSpreader;
-        private final BlockState blockState;
+        private final IBlockData blockState;
         private final PositionSource positionSource;
+        private Level level; // CraftBukkit
 
-        public CatalystListener(BlockState blockState, PositionSource positionSource) {
+        public CatalystListener(IBlockData blockState, PositionSource positionSource) {
             this.blockState = blockState;
             this.positionSource = positionSource;
             this.sculkSpreader = SculkSpreader.createLevelSpreader();
+            this.sculkSpreader.level = level; // CraftBukkit
         }
 
         @Override
@@ -74,30 +84,37 @@
         }
 
         @Override
-        public GameEventListener.DeliveryMode getDeliveryMode() {
-            return GameEventListener.DeliveryMode.BY_DISTANCE;
+        public GameEventListener.a getDeliveryMode() {
+            return GameEventListener.a.BY_DISTANCE;
         }
 
         @Override
         public boolean handleGameEvent(ServerLevel level, GameEvent gameEvent, GameEvent.Context context, Vec3 pos) {
-            if (gameEvent == GameEvent.ENTITY_DIE && context.sourceEntity() instanceof LivingEntity livingEntity) {
-                if (!livingEntity.wasExperienceConsumed()) {
-                    int experienceReward = livingEntity.getExperienceReward();
-                    if (livingEntity.shouldDropExperience() && experienceReward > 0) {
-                        this.sculkSpreader.addCursors(BlockPos.containing(pos.relative(Direction.UP, 0.5)), experienceReward);
-                        this.tryAwardItSpreadsAdvancement(level, livingEntity);
+            if (gameEvent == GameEvent.ENTITY_DIE) {
+                Entity entity = context.sourceEntity();
+
+                if (entity instanceof LivingEntity) {
+                    LivingEntity entityliving = (LivingEntity) entity;
+
+                    if (!entityliving.wasExperienceConsumed()) {
+                        int i = entityliving.getExperienceReward();
+
+                        if (entityliving.shouldDropExperience() && i > 0) {
+                            this.sculkSpreader.addCursors(BlockPos.containing(pos.relative(Direction.UP, 0.5D)), i);
+                            this.tryAwardItSpreadsAdvancement(level, entityliving);
+                        }
+
+                        entityliving.skipDropExperience();
+                        this.positionSource.getPosition(level).ifPresent((vec3d1) -> {
+                            this.bloom(level, BlockPos.containing(vec3d1), this.blockState, level.getRandom());
+                        });
                     }
 
-                    livingEntity.skipDropExperience();
-                    this.positionSource
-                        .getPosition(level)
-                        .ifPresent(position -> this.bloom(level, BlockPos.containing(position), this.blockState, level.getRandom()));
+                    return true;
                 }
-
-                return true;
-            } else {
-                return false;
             }
+
+            return false;
         }
 
         @VisibleForTesting
@@ -105,20 +122,23 @@
             return this.sculkSpreader;
         }
 
-        private void bloom(ServerLevel level, BlockPos pos, BlockState state, RandomSource random) {
-            level.setBlock(pos, state.setValue(SculkCatalystBlock.PULSE, Boolean.valueOf(true)), 3);
+        public void bloom(ServerLevel level, BlockPos pos, IBlockData state, RandomSource random) {
+            level.setBlock(pos, (IBlockData) state.setValue(SculkCatalystBlock.PULSE, true), 3);
             level.scheduleTick(pos, state.getBlock(), 8);
-            level.sendParticles(ParticleTypes.SCULK_SOUL, (double)pos.getX() + 0.5, (double)pos.getY() + 1.15, (double)pos.getZ() + 0.5, 2, 0.2, 0.0, 0.2, 0.0);
-            level.playSound(null, pos, SoundEvents.SCULK_CATALYST_BLOOM, SoundSource.BLOCKS, 2.0F, 0.6F + random.nextFloat() * 0.4F);
+            level.sendParticles(ParticleTypes.SCULK_SOUL, (double) pos.getX() + 0.5D, (double) pos.getY() + 1.15D, (double) pos.getZ() + 0.5D, 2, 0.2D, 0.0D, 0.2D, 0.0D);
+            level.playSound((Player) null, pos, SoundEvents.SCULK_CATALYST_BLOOM, SoundSource.BLOCKS, 2.0F, 0.6F + random.nextFloat() * 0.4F);
         }
 
         private void tryAwardItSpreadsAdvancement(Level level, LivingEntity entity) {
-            if (entity.getLastHurtByMob() instanceof ServerPlayer serverPlayer) {
-                DamageSource damageSource = entity.getLastDamageSource() == null
-                    ? level.damageSources().playerAttack(serverPlayer)
-                    : entity.getLastDamageSource();
-                CriteriaTriggers.KILL_MOB_NEAR_SCULK_CATALYST.trigger(serverPlayer, entity, damageSource);
+            LivingEntity entityliving1 = entity.getLastHurtByMob();
+
+            if (entityliving1 instanceof ServerPlayer) {
+                ServerPlayer entityplayer = (ServerPlayer) entityliving1;
+                DamageSource damagesource = entity.getLastDamageSource() == null ? level.damageSources().playerAttack(entityplayer) : entity.getLastDamageSource();
+
+                CriteriaTriggers.KILL_MOB_NEAR_SCULK_CATALYST.trigger(entityplayer, entity, damagesource);
             }
+
         }
     }
 }
