--- a/net/minecraft/world/level/block/entity/BannerBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BannerBlockEntity.java
@@ -11,46 +11,48 @@
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
-import net.minecraft.world.Nameable;
+import net.minecraft.world.INamableTileEntity;
 import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.DyeColor;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.AbstractBannerBlock;
 import net.minecraft.world.level.block.BannerBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
-public class BannerBlockEntity extends BlockEntity implements Nameable {
+public class BannerBlockEntity extends BlockEntity implements INamableTileEntity {
+
     public static final int MAX_PATTERNS = 6;
     public static final String TAG_PATTERNS = "Patterns";
     public static final String TAG_PATTERN = "Pattern";
     public static final String TAG_COLOR = "Color";
     @Nullable
     private Component name;
-    private DyeColor baseColor;
+    public DyeColor baseColor;
     @Nullable
-    private ListTag itemPatterns;
+    public ListTag itemPatterns;
     @Nullable
     private List<Pair<Holder<BannerPattern>, DyeColor>> patterns;
 
-    public BannerBlockEntity(BlockPos pos, BlockState blockState) {
+    public BannerBlockEntity(BlockPos pos, IBlockData blockState) {
         super(BlockEntityType.BANNER, pos, blockState);
-        this.baseColor = ((AbstractBannerBlock)blockState.getBlock()).getColor();
+        this.baseColor = ((AbstractBannerBlock) blockState.getBlock()).getColor();
     }
 
-    public BannerBlockEntity(BlockPos pos, BlockState blockState, DyeColor baseColor) {
+    public BannerBlockEntity(BlockPos pos, IBlockData blockState, DyeColor baseColor) {
         this(pos, blockState);
         this.baseColor = baseColor;
     }
 
     @Nullable
     public static ListTag getItemPatterns(ItemStack stack) {
-        ListTag list = null;
-        CompoundTag blockEntityData = BlockItem.getBlockEntityData(stack);
-        if (blockEntityData != null && blockEntityData.contains("Patterns", 9)) {
-            list = blockEntityData.getList("Patterns", 10).copy();
+        ListTag nbttaglist = null;
+        CompoundTag nbttagcompound = BlockItem.getBlockEntityData(stack);
+
+        if (nbttagcompound != null && nbttagcompound.contains("Patterns", 9)) {
+            nbttaglist = nbttagcompound.getList("Patterns", 10).copy();
         }
 
-        return list;
+        return nbttaglist;
     }
 
     public void fromItem(ItemStack stack, DyeColor color) {
@@ -66,7 +68,7 @@
 
     @Override
     public Component getName() {
-        return (Component)(this.name != null ? this.name : Component.translatable("block.minecraft.banner"));
+        return (Component) (this.name != null ? this.name : Component.translatable("block.minecraft.banner"));
     }
 
     @Nullable
@@ -89,6 +91,7 @@
         if (this.name != null) {
             tag.putString("CustomName", Component.Serializer.toJson(this.name));
         }
+
     }
 
     @Override
@@ -99,6 +102,11 @@
         }
 
         this.itemPatterns = tag.getList("Patterns", 10);
+        // CraftBukkit start
+        while (this.itemPatterns.size() > 20) {
+            this.itemPatterns.remove(20);
+        }
+        // CraftBukkit end
         this.patterns = null;
     }
 
@@ -113,8 +121,9 @@
     }
 
     public static int getPatternCount(ItemStack stack) {
-        CompoundTag blockEntityData = BlockItem.getBlockEntityData(stack);
-        return blockEntityData != null && blockEntityData.contains("Patterns") ? blockEntityData.getList("Patterns", 10).size() : 0;
+        CompoundTag nbttagcompound = BlockItem.getBlockEntityData(stack);
+
+        return nbttagcompound != null && nbttagcompound.contains("Patterns") ? nbttagcompound.getList("Patterns", 10).size() : 0;
     }
 
     public List<Pair<Holder<BannerPattern>, DyeColor>> getPatterns() {
@@ -127,14 +136,17 @@
 
     public static List<Pair<Holder<BannerPattern>, DyeColor>> createPatterns(DyeColor color, @Nullable ListTag listTag) {
         List<Pair<Holder<BannerPattern>, DyeColor>> list = Lists.newArrayList();
+
         list.add(Pair.of(BuiltInRegistries.BANNER_PATTERN.getHolderOrThrow(BannerPatterns.BASE), color));
         if (listTag != null) {
-            for (int i = 0; i < listTag.size(); i++) {
-                CompoundTag compound = listTag.getCompound(i);
-                Holder<BannerPattern> holder = BannerPattern.byHash(compound.getString("Pattern"));
+            for (int i = 0; i < listTag.size(); ++i) {
+                CompoundTag nbttagcompound = listTag.getCompound(i);
+                Holder<BannerPattern> holder = BannerPattern.byHash(nbttagcompound.getString("Pattern"));
+
                 if (holder != null) {
-                    int _int = compound.getInt("Color");
-                    list.add(Pair.of(holder, DyeColor.byId(_int)));
+                    int j = nbttagcompound.getInt("Color");
+
+                    list.add(Pair.of(holder, DyeColor.byId(j)));
                 }
             }
         }
@@ -143,34 +155,38 @@
     }
 
     public static void removeLastPattern(ItemStack stack) {
-        CompoundTag blockEntityData = BlockItem.getBlockEntityData(stack);
-        if (blockEntityData != null && blockEntityData.contains("Patterns", 9)) {
-            ListTag list = blockEntityData.getList("Patterns", 10);
-            if (!list.isEmpty()) {
-                list.remove(list.size() - 1);
-                if (list.isEmpty()) {
-                    blockEntityData.remove("Patterns");
+        CompoundTag nbttagcompound = BlockItem.getBlockEntityData(stack);
+
+        if (nbttagcompound != null && nbttagcompound.contains("Patterns", 9)) {
+            ListTag nbttaglist = nbttagcompound.getList("Patterns", 10);
+
+            if (!nbttaglist.isEmpty()) {
+                nbttaglist.remove(nbttaglist.size() - 1);
+                if (nbttaglist.isEmpty()) {
+                    nbttagcompound.remove("Patterns");
                 }
             }
 
-            blockEntityData.remove("id");
-            BlockItem.setBlockEntityData(stack, BlockEntityType.BANNER, blockEntityData);
+            nbttagcompound.remove("id");
+            BlockItem.setBlockEntityData(stack, BlockEntityType.BANNER, nbttagcompound);
         }
     }
 
     public ItemStack getItem() {
-        ItemStack itemStack = new ItemStack(BannerBlock.byColor(this.baseColor));
+        ItemStack itemstack = new ItemStack(BannerBlock.byColor(this.baseColor));
+
         if (this.itemPatterns != null && !this.itemPatterns.isEmpty()) {
-            CompoundTag compoundTag = new CompoundTag();
-            compoundTag.put("Patterns", this.itemPatterns.copy());
-            BlockItem.setBlockEntityData(itemStack, this.getType(), compoundTag);
+            CompoundTag nbttagcompound = new CompoundTag();
+
+            nbttagcompound.put("Patterns", this.itemPatterns.copy());
+            BlockItem.setBlockEntityData(itemstack, this.getType(), nbttagcompound);
         }
 
         if (this.name != null) {
-            itemStack.setHoverName(this.name);
+            itemstack.setHoverName(this.name);
         }
 
-        return itemStack;
+        return itemstack;
     }
 
     public DyeColor getBaseColor() {
