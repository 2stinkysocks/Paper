--- a/net/minecraft/world/level/block/entity/SignBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/SignBlockEntity.java
@@ -2,7 +2,9 @@
 
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.logging.LogUtils;
+import com.mojang.serialization.DataResult;
 import java.util.List;
+import java.util.Objects;
 import java.util.UUID;
 import java.util.function.UnaryOperator;
 import javax.annotation.Nullable;
@@ -18,48 +20,63 @@
 import net.minecraft.network.chat.Style;
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.network.FilteredText;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.util.Mth;
-import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.SignBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
+import org.bukkit.block.sign.Side;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.SignChangeEvent;
+// CraftBukkit end
 
-public class SignBlockEntity extends BlockEntity {
+public class SignBlockEntity extends BlockEntity implements CommandSource { // CraftBukkit - implements
+
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final int MAX_TEXT_LINE_WIDTH = 90;
     private static final int TEXT_LINE_HEIGHT = 10;
     @Nullable
-    private UUID playerWhoMayEdit;
-    private SignText frontText = this.createDefaultSignText();
-    private SignText backText = this.createDefaultSignText();
+    public UUID playerWhoMayEdit;
+    private SignText frontText;
+    private SignText backText;
     private boolean isWaxed;
 
-    public SignBlockEntity(BlockPos pos, BlockState blockState) {
+    public SignBlockEntity(BlockPos pos, IBlockData blockState) {
         this(BlockEntityType.SIGN, pos, blockState);
     }
 
-    public SignBlockEntity(BlockEntityType type, BlockPos pos, BlockState blockState) {
+    public SignBlockEntity(BlockEntityType type, BlockPos pos, IBlockData blockState) {
         super(type, pos, blockState);
+        this.frontText = this.createDefaultSignText();
+        this.backText = this.createDefaultSignText();
     }
 
     protected SignText createDefaultSignText() {
         return new SignText();
     }
 
-    public boolean isFacingFrontText(Player player) {
-        if (this.getBlockState().getBlock() instanceof SignBlock signBlock) {
-            Vec3 signHitboxCenterPosition = signBlock.getSignHitboxCenterPosition(this.getBlockState());
-            double d = player.getX() - ((double)this.getBlockPos().getX() + signHitboxCenterPosition.x);
-            double d1 = player.getZ() - ((double)this.getBlockPos().getZ() + signHitboxCenterPosition.z);
-            float yRotationDegrees = signBlock.getYRotationDegrees(this.getBlockState());
-            float f = (float)(Mth.atan2(d1, d) * 180.0F / (float)Math.PI) - 90.0F;
-            return Mth.degreesDifferenceAbs(yRotationDegrees, f) <= 90.0F;
+    public boolean isFacingFrontText(net.minecraft.world.entity.player.Player player) {
+        Block block = this.getBlockState().getBlock();
+
+        if (block instanceof SignBlock) {
+            SignBlock blocksign = (SignBlock) block;
+            Vec3 vec3d = blocksign.getSignHitboxCenterPosition(this.getBlockState());
+            double d0 = player.getX() - ((double) this.getBlockPos().getX() + vec3d.x);
+            double d1 = player.getZ() - ((double) this.getBlockPos().getZ() + vec3d.z);
+            float f = blocksign.getYRotationDegrees(this.getBlockState());
+            float f1 = (float) (Mth.atan2(d1, d0) * 57.2957763671875D) - 90.0F;
+
+            return Mth.degreesDifferenceAbs(f, f1) <= 90.0F;
         } else {
             return false;
         }
@@ -88,87 +105,132 @@
     @Override
     protected void saveAdditional(CompoundTag tag) {
         super.saveAdditional(tag);
-        SignText.DIRECT_CODEC
-            .encodeStart(NbtOps.INSTANCE, this.frontText)
-            .resultOrPartial(LOGGER::error)
-            .ifPresent(frontTextTag -> tag.put("front_text", frontTextTag));
-        SignText.DIRECT_CODEC
-            .encodeStart(NbtOps.INSTANCE, this.backText)
-            .resultOrPartial(LOGGER::error)
-            .ifPresent(backTextTag -> tag.put("back_text", backTextTag));
+        DataResult<Tag> dataresult = SignText.DIRECT_CODEC.encodeStart(NbtOps.INSTANCE, this.frontText); // CraftBukkit - decompile error
+        Logger logger = SignBlockEntity.LOGGER;
+
+        Objects.requireNonNull(logger);
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+            tag.put("front_text", nbtbase);
+        });
+        dataresult = SignText.DIRECT_CODEC.encodeStart(NbtOps.INSTANCE, this.backText);
+        logger = SignBlockEntity.LOGGER;
+        Objects.requireNonNull(logger);
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+            tag.put("back_text", nbtbase);
+        });
         tag.putBoolean("is_waxed", this.isWaxed);
     }
 
     @Override
     public void load(CompoundTag tag) {
         super.load(tag);
+        DataResult<SignText> dataresult; // CraftBukkit - decompile error
+        Logger logger;
+
         if (tag.contains("front_text")) {
-            SignText.DIRECT_CODEC
-                .parse(NbtOps.INSTANCE, tag.getCompound("front_text"))
-                .resultOrPartial(LOGGER::error)
-                .ifPresent(signText -> this.frontText = this.loadLines(signText));
+            dataresult = SignText.DIRECT_CODEC.parse(NbtOps.INSTANCE, tag.getCompound("front_text"));
+            logger = SignBlockEntity.LOGGER;
+            Objects.requireNonNull(logger);
+            dataresult.resultOrPartial(logger::error).ifPresent((signtext) -> {
+                this.frontText = this.loadLines(signtext);
+            });
         }
 
         if (tag.contains("back_text")) {
-            SignText.DIRECT_CODEC
-                .parse(NbtOps.INSTANCE, tag.getCompound("back_text"))
-                .resultOrPartial(LOGGER::error)
-                .ifPresent(signText -> this.backText = this.loadLines(signText));
+            dataresult = SignText.DIRECT_CODEC.parse(NbtOps.INSTANCE, tag.getCompound("back_text"));
+            logger = SignBlockEntity.LOGGER;
+            Objects.requireNonNull(logger);
+            dataresult.resultOrPartial(logger::error).ifPresent((signtext) -> {
+                this.backText = this.loadLines(signtext);
+            });
         }
 
         this.isWaxed = tag.getBoolean("is_waxed");
     }
 
     private SignText loadLines(SignText text) {
-        for (int i = 0; i < 4; i++) {
-            Component component = this.loadLine(text.getMessage(i, false));
-            Component component1 = this.loadLine(text.getMessage(i, true));
-            text = text.setMessage(i, component, component1);
+        for (int i = 0; i < 4; ++i) {
+            Component ichatbasecomponent = this.loadLine(text.getMessage(i, false));
+            Component ichatbasecomponent1 = this.loadLine(text.getMessage(i, true));
+
+            text = text.setMessage(i, ichatbasecomponent, ichatbasecomponent1);
         }
 
         return text;
     }
 
     private Component loadLine(Component lineText) {
-        if (this.level instanceof ServerLevel serverLevel) {
+        Level world = this.level;
+
+        if (world instanceof ServerLevel) {
+            ServerLevel worldserver = (ServerLevel) world;
+
             try {
-                return ComponentUtils.updateForEntity(createCommandSourceStack(null, serverLevel, this.worldPosition), lineText, null, 0);
-            } catch (CommandSyntaxException var4) {
+                return ComponentUtils.updateForEntity(createCommandSourceStack((net.minecraft.world.entity.player.Player) null, worldserver, this.worldPosition), lineText, (Entity) null, 0);
+            } catch (CommandSyntaxException commandsyntaxexception) {
+                ;
             }
         }
 
         return lineText;
     }
 
-    public void updateSignText(Player player, boolean isFrontText, List<FilteredText> filteredText) {
+    public void updateSignText(net.minecraft.world.entity.player.Player player, boolean isFrontText, List<FilteredText> filteredText) {
         if (!this.isWaxed() && player.getUUID().equals(this.getPlayerWhoMayEdit()) && this.level != null) {
-            this.updateText(signText -> this.setMessages(player, filteredText, signText), isFrontText);
-            this.setAllowedPlayerEditor(null);
+            this.updateText((signtext) -> {
+                return this.setMessages(player, filteredText, signtext, isFrontText); // CraftBukkit
+            }, isFrontText);
+            this.setAllowedPlayerEditor((UUID) null);
             this.level.sendBlockUpdated(this.getBlockPos(), this.getBlockState(), this.getBlockState(), 3);
         } else {
-            LOGGER.warn("Player {} just tried to change non-editable sign", player.getName().getString());
+            SignBlockEntity.LOGGER.warn("Player {} just tried to change non-editable sign", player.getName().getString());
+            ((ServerPlayer) player).connection.send(this.getUpdatePacket()); // CraftBukkit
         }
     }
 
     public boolean updateText(UnaryOperator<SignText> updater, boolean isFrontText) {
-        SignText text = this.getText(isFrontText);
-        return this.setText(updater.apply(text), isFrontText);
+        SignText signtext = this.getText(isFrontText);
+
+        return this.setText((SignText) updater.apply(signtext), isFrontText);
     }
 
-    private SignText setMessages(Player player, List<FilteredText> filteredText, SignText text) {
-        for (int i = 0; i < filteredText.size(); i++) {
-            FilteredText filteredText1 = filteredText.get(i);
-            Style style = text.getMessage(i, player.isTextFilteringEnabled()).getStyle();
-            if (player.isTextFilteringEnabled()) {
-                text = text.setMessage(i, Component.literal(filteredText1.filteredOrEmpty()).setStyle(style));
+    private SignText setMessages(net.minecraft.world.entity.player.Player entityhuman, List<FilteredText> list, SignText signtext, boolean front) { // CraftBukkit
+        SignText originalText = signtext; // CraftBukkit
+        for (int i = 0; i < list.size(); ++i) {
+            FilteredText filteredtext = (FilteredText) list.get(i);
+            Style chatmodifier = signtext.getMessage(i, entityhuman.isTextFilteringEnabled()).getStyle();
+
+            if (entityhuman.isTextFilteringEnabled()) {
+                signtext = signtext.setMessage(i, Component.literal(filteredtext.filteredOrEmpty()).setStyle(chatmodifier));
             } else {
-                text = text.setMessage(
-                    i, Component.literal(filteredText1.raw()).setStyle(style), Component.literal(filteredText1.filteredOrEmpty()).setStyle(style)
-                );
+                signtext = signtext.setMessage(i, Component.literal(filteredtext.raw()).setStyle(chatmodifier), Component.literal(filteredtext.filteredOrEmpty()).setStyle(chatmodifier));
             }
         }
 
-        return text;
+        // CraftBukkit start
+        Player player = ((ServerPlayer) entityhuman).getBukkitEntity();
+        String[] lines = new String[4];
+
+        for (int i = 0; i < list.size(); ++i) {
+            lines[i] = CraftChatMessage.fromComponent(signtext.getMessage(i, entityhuman.isTextFilteringEnabled()));
+        }
+
+        SignChangeEvent event = new SignChangeEvent(CraftBlock.at(this.level, this.worldPosition), player, lines.clone(), (front) ? Side.FRONT : Side.BACK);
+        entityhuman.level().getCraftServer().getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) {
+            return originalText;
+        }
+
+        Component[] components = org.bukkit.craftbukkit.block.CraftSign.sanitizeLines(event.getLines());
+        for (int i = 0; i < components.length; i++) {
+            if (!Objects.equals(lines[i], event.getLine(i))) {
+                signtext = signtext.setMessage(i, components[i]);
+            }
+        }
+        // CraftBukkit end
+
+        return signtext;
     }
 
     public boolean setText(SignText text, boolean isFrontText) {
@@ -195,32 +257,63 @@
         }
     }
 
-    public boolean canExecuteClickCommands(boolean isFrontText, Player player) {
+    public boolean canExecuteClickCommands(boolean isFrontText, net.minecraft.world.entity.player.Player player) {
         return this.isWaxed() && this.getText(isFrontText).hasAnyClickCommands(player);
     }
 
-    public boolean executeClickCommandsIfPresent(Player player, Level level, BlockPos pos, boolean frontText) {
-        boolean flag = false;
+    public boolean executeClickCommandsIfPresent(net.minecraft.world.entity.player.Player player, Level level, BlockPos pos, boolean frontText) {
+        boolean flag1 = false;
+        Component[] aichatbasecomponent = this.getText(frontText).getMessages(player.isTextFilteringEnabled());
+        int i = aichatbasecomponent.length;
 
-        for (Component component : this.getText(frontText).getMessages(player.isTextFilteringEnabled())) {
-            Style style = component.getStyle();
-            ClickEvent clickEvent = style.getClickEvent();
-            if (clickEvent != null && clickEvent.getAction() == ClickEvent.Action.RUN_COMMAND) {
-                player.getServer().getCommands().performPrefixedCommand(createCommandSourceStack(player, level, pos), clickEvent.getValue());
-                flag = true;
+        for (int j = 0; j < i; ++j) {
+            Component ichatbasecomponent = aichatbasecomponent[j];
+            Style chatmodifier = ichatbasecomponent.getStyle();
+            ClickEvent chatclickable = chatmodifier.getClickEvent();
+
+            if (chatclickable != null && chatclickable.getAction() == ClickEvent.Action.RUN_COMMAND) {
+                player.getServer().getCommands().performPrefixedCommand(createCommandSourceStack(player, level, pos), chatclickable.getValue());
+                flag1 = true;
             }
         }
 
-        return flag;
+        return flag1;
     }
 
-    private static CommandSourceStack createCommandSourceStack(@Nullable Player player, Level level, BlockPos pos) {
-        String string = player == null ? "Sign" : player.getName().getString();
-        Component component = (Component)(player == null ? Component.literal("Sign") : player.getDisplayName());
-        return new CommandSourceStack(CommandSource.NULL, Vec3.atCenterOf(pos), Vec2.ZERO, (ServerLevel)level, 2, string, component, level.getServer(), player);
+    // CraftBukkit start
+    @Override
+    public void sendSystemMessage(Component component) {}
+
+    @Override
+    public org.bukkit.command.CommandSender getBukkitSender(CommandSourceStack wrapper) {
+        return wrapper.getEntity() != null ? wrapper.getEntity().getBukkitSender(wrapper) : new org.bukkit.craftbukkit.command.CraftBlockCommandSender(wrapper, this);
     }
 
     @Override
+    public boolean acceptsSuccess() {
+        return false;
+    }
+
+    @Override
+    public boolean acceptsFailure() {
+        return false;
+    }
+
+    @Override
+    public boolean shouldInformAdmins() {
+        return false;
+    }
+
+    private CommandSourceStack createCommandSourceStack(@Nullable net.minecraft.world.entity.player.Player level, Level pos, BlockPos blockposition) {
+        // CraftBukkit end
+        String s = level == null ? "Sign" : level.getName().getString();
+        Object object = level == null ? Component.literal("Sign") : level.getDisplayName();
+
+        // CraftBukkit - this
+        return new CommandSourceStack(this, Vec3.atCenterOf(blockposition), Vec2.ZERO, (ServerLevel) pos, 2, s, (Component) object, pos.getServer(), level);
+    }
+
+    @Override
     public ClientboundBlockEntityDataPacket getUpdatePacket() {
         return ClientboundBlockEntityDataPacket.create(this);
     }
@@ -241,12 +334,17 @@
 
     @Nullable
     public UUID getPlayerWhoMayEdit() {
+        // CraftBukkit start - unnecessary sign ticking removed, so do this lazily
+        if (this.level != null && this.playerWhoMayEdit != null) {
+            clearInvalidPlayerWhoMayEdit(this, this.level, this.playerWhoMayEdit);
+        }
+        // CraftBukkit end
         return this.playerWhoMayEdit;
     }
 
     private void markUpdated() {
         this.setChanged();
-        this.level.sendBlockUpdated(this.getBlockPos(), this.getBlockState(), this.getBlockState(), 3);
+        if (this.level != null) this.level.sendBlockUpdated(this.getBlockPos(), this.getBlockState(), this.getBlockState(), 3); // CraftBukkit - skip notify if world is null (SPIGOT-5122)
     }
 
     public boolean isWaxed() {
@@ -264,22 +362,25 @@
     }
 
     public boolean playerIsTooFarAwayToEdit(UUID uuid) {
-        Player playerByUUID = this.level.getPlayerByUUID(uuid);
-        return playerByUUID == null
-            || playerByUUID.distanceToSqr((double)this.getBlockPos().getX(), (double)this.getBlockPos().getY(), (double)this.getBlockPos().getZ()) > 64.0;
+        net.minecraft.world.entity.player.Player entityhuman = this.level.getPlayerByUUID(uuid);
+
+        return entityhuman == null || entityhuman.distanceToSqr((double) this.getBlockPos().getX(), (double) this.getBlockPos().getY(), (double) this.getBlockPos().getZ()) > 64.0D;
     }
 
-    public static void tick(Level level, BlockPos pos, BlockState state, SignBlockEntity sign) {
-        UUID playerWhoMayEdit = sign.getPlayerWhoMayEdit();
-        if (playerWhoMayEdit != null) {
-            sign.clearInvalidPlayerWhoMayEdit(sign, level, playerWhoMayEdit);
+    public static void tick(Level level, BlockPos pos, IBlockData state, SignBlockEntity sign) {
+        UUID uuid = sign.getPlayerWhoMayEdit();
+
+        if (uuid != null) {
+            sign.clearInvalidPlayerWhoMayEdit(sign, level, uuid);
         }
+
     }
 
     private void clearInvalidPlayerWhoMayEdit(SignBlockEntity sign, Level level, UUID uuid) {
         if (sign.playerIsTooFarAwayToEdit(uuid)) {
-            sign.setAllowedPlayerEditor(null);
+            sign.setAllowedPlayerEditor((UUID) null);
         }
+
     }
 
     public SoundEvent getSignInteractionFailedSoundEvent() {
