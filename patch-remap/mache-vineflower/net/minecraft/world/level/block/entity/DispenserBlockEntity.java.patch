--- a/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
@@ -7,20 +7,59 @@
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.entity.player.Inventory;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.DispenserMenu;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
+
     public static final int CONTAINER_SIZE = 9;
-    private NonNullList<ItemStack> items = NonNullList.withSize(9, ItemStack.EMPTY);
+    private NonNullList<ItemStack> items;
 
-    protected DispenserBlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState blockState) {
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+    protected DispenserBlockEntity(BlockEntityType<?> type, BlockPos pos, IBlockData blockState) {
         super(type, pos, blockState);
+        this.items = NonNullList.withSize(9, ItemStack.EMPTY);
     }
 
-    public DispenserBlockEntity(BlockPos pos, BlockState blockState) {
+    public DispenserBlockEntity(BlockPos pos, IBlockData blockState) {
         this(BlockEntityType.DISPENSER, pos, blockState);
     }
 
@@ -30,13 +69,13 @@
     }
 
     public int getRandomSlot(RandomSource random) {
-        this.unpackLootTable(null);
+        this.unpackLootTable((Player) null);
         int i = -1;
-        int i1 = 1;
+        int j = 1;
 
-        for (int i2 = 0; i2 < this.items.size(); i2++) {
-            if (!this.items.get(i2).isEmpty() && random.nextInt(i1++) == 0) {
-                i = i2;
+        for (int k = 0; k < this.items.size(); ++k) {
+            if (!((ItemStack) this.items.get(k)).isEmpty() && random.nextInt(j++) == 0) {
+                i = k;
             }
         }
 
@@ -44,8 +83,8 @@
     }
 
     public int addItem(ItemStack stack) {
-        for (int i = 0; i < this.items.size(); i++) {
-            if (this.items.get(i).isEmpty()) {
+        for (int i = 0; i < this.items.size(); ++i) {
+            if (((ItemStack) this.items.get(i)).isEmpty()) {
                 this.setItem(i, stack);
                 return i;
             }
@@ -66,6 +105,7 @@
         if (!this.tryLoadLootTable(tag)) {
             ContainerHelper.loadAllItems(tag, this.items);
         }
+
     }
 
     @Override
@@ -74,6 +114,7 @@
         if (!this.trySaveLootTable(tag)) {
             ContainerHelper.saveAllItems(tag, this.items);
         }
+
     }
 
     @Override
