--- a/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -23,37 +23,66 @@
 import net.minecraft.world.item.crafting.RecipeType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.CampfireBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockCookEvent;
+import org.bukkit.event.block.CampfireStartEvent;
+import org.bukkit.inventory.CampfireRecipe;
+// CraftBukkit end
+
 public class CampfireBlockEntity extends BlockEntity implements Clearable {
+
     private static final int BURN_COOL_SPEED = 2;
     private static final int NUM_SLOTS = 4;
-    private final NonNullList<ItemStack> items = NonNullList.withSize(4, ItemStack.EMPTY);
-    private final int[] cookingProgress = new int[4];
-    private final int[] cookingTime = new int[4];
-    private final RecipeManager.CachedCheck<Container, CampfireCookingRecipe> quickCheck = RecipeManager.createCheck(RecipeType.CAMPFIRE_COOKING);
+    private final NonNullList<ItemStack> items;
+    public final int[] cookingProgress;
+    public final int[] cookingTime;
+    private final RecipeManager.CachedCheck<Container, CampfireCookingRecipe> quickCheck;
 
-    public CampfireBlockEntity(BlockPos pos, BlockState blockState) {
+    public CampfireBlockEntity(BlockPos pos, IBlockData blockState) {
         super(BlockEntityType.CAMPFIRE, pos, blockState);
+        this.items = NonNullList.withSize(4, ItemStack.EMPTY);
+        this.cookingProgress = new int[4];
+        this.cookingTime = new int[4];
+        this.quickCheck = RecipeManager.createCheck(RecipeType.CAMPFIRE_COOKING);
     }
 
-    public static void cookTick(Level level, BlockPos pos, BlockState state, CampfireBlockEntity blockEntity) {
+    public static void cookTick(Level level, BlockPos pos, IBlockData state, CampfireBlockEntity blockEntity) {
         boolean flag = false;
 
-        for (int i = 0; i < blockEntity.items.size(); i++) {
-            ItemStack itemStack = blockEntity.items.get(i);
-            if (!itemStack.isEmpty()) {
+        for (int i = 0; i < blockEntity.items.size(); ++i) {
+            ItemStack itemstack = (ItemStack) blockEntity.items.get(i);
+
+            if (!itemstack.isEmpty()) {
                 flag = true;
-                blockEntity.cookingProgress[i]++;
+                int j = blockEntity.cookingProgress[i]++;
+
                 if (blockEntity.cookingProgress[i] >= blockEntity.cookingTime[i]) {
-                    Container container = new SimpleContainer(itemStack);
-                    ItemStack itemStack1 = blockEntity.quickCheck
-                        .getRecipeFor(container, level)
-                        .map(recipeHolder -> recipeHolder.value().assemble(container, level.registryAccess()))
-                        .orElse(itemStack);
-                    if (itemStack1.isItemEnabled(level.enabledFeatures())) {
-                        Containers.dropItemStack(level, (double)pos.getX(), (double)pos.getY(), (double)pos.getZ(), itemStack1);
+                    SimpleContainer inventorysubcontainer = new SimpleContainer(new ItemStack[]{itemstack});
+                    ItemStack itemstack1 = (ItemStack) blockEntity.quickCheck.getRecipeFor(inventorysubcontainer, level).map((recipeholder) -> {
+                        return ((CampfireCookingRecipe) recipeholder.value()).assemble(inventorysubcontainer, level.registryAccess());
+                    }).orElse(itemstack);
+
+                    if (itemstack1.isItemEnabled(level.enabledFeatures())) {
+                        // CraftBukkit start - fire BlockCookEvent
+                        CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+                        org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+
+                        BlockCookEvent blockCookEvent = new BlockCookEvent(CraftBlock.at(level, pos), source, result);
+                        level.getCraftServer().getPluginManager().callEvent(blockCookEvent);
+
+                        if (blockCookEvent.isCancelled()) {
+                            return;
+                        }
+
+                        result = blockCookEvent.getResult();
+                        itemstack1 = CraftItemStack.asNMSCopy(result);
+                        // CraftBukkit end
+                        Containers.dropItemStack(level, (double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), itemstack1);
                         blockEntity.items.set(i, ItemStack.EMPTY);
                         level.sendBlockUpdated(pos, state, state, 3);
                         level.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(state));
@@ -65,12 +94,13 @@
         if (flag) {
             setChanged(level, pos, state);
         }
+
     }
 
-    public static void cooldownTick(Level level, BlockPos pos, BlockState state, CampfireBlockEntity blockEntity) {
+    public static void cooldownTick(Level level, BlockPos pos, IBlockData state, CampfireBlockEntity blockEntity) {
         boolean flag = false;
 
-        for (int i = 0; i < blockEntity.items.size(); i++) {
+        for (int i = 0; i < blockEntity.items.size(); ++i) {
             if (blockEntity.cookingProgress[i] > 0) {
                 flag = true;
                 blockEntity.cookingProgress[i] = Mth.clamp(blockEntity.cookingProgress[i] - 2, 0, blockEntity.cookingTime[i]);
@@ -80,37 +110,35 @@
         if (flag) {
             setChanged(level, pos, state);
         }
+
     }
 
-    public static void particleTick(Level level, BlockPos pos, BlockState state, CampfireBlockEntity blockEntity) {
-        RandomSource randomSource = level.random;
-        if (randomSource.nextFloat() < 0.11F) {
-            for (int i = 0; i < randomSource.nextInt(2) + 2; i++) {
-                CampfireBlock.makeParticles(level, pos, state.getValue(CampfireBlock.SIGNAL_FIRE), false);
+    public static void particleTick(Level level, BlockPos pos, IBlockData state, CampfireBlockEntity blockEntity) {
+        RandomSource randomsource = level.random;
+        int i;
+
+        if (randomsource.nextFloat() < 0.11F) {
+            for (i = 0; i < randomsource.nextInt(2) + 2; ++i) {
+                CampfireBlock.makeParticles(level, pos, (Boolean) state.getValue(CampfireBlock.SIGNAL_FIRE), false);
             }
         }
 
-        int i = state.getValue(CampfireBlock.FACING).get2DDataValue();
+        i = ((Direction) state.getValue(CampfireBlock.FACING)).get2DDataValue();
 
-        for (int i1 = 0; i1 < blockEntity.items.size(); i1++) {
-            if (!blockEntity.items.get(i1).isEmpty() && randomSource.nextFloat() < 0.2F) {
-                Direction direction = Direction.from2DDataValue(Math.floorMod(i1 + i, 4));
+        for (int j = 0; j < blockEntity.items.size(); ++j) {
+            if (!((ItemStack) blockEntity.items.get(j)).isEmpty() && randomsource.nextFloat() < 0.2F) {
+                Direction enumdirection = Direction.from2DDataValue(Math.floorMod(j + i, 4));
                 float f = 0.3125F;
-                double d = (double)pos.getX()
-                    + 0.5
-                    - (double)((float)direction.getStepX() * 0.3125F)
-                    + (double)((float)direction.getClockWise().getStepX() * 0.3125F);
-                double d1 = (double)pos.getY() + 0.5;
-                double d2 = (double)pos.getZ()
-                    + 0.5
-                    - (double)((float)direction.getStepZ() * 0.3125F)
-                    + (double)((float)direction.getClockWise().getStepZ() * 0.3125F);
+                double d0 = (double) pos.getX() + 0.5D - (double) ((float) enumdirection.getStepX() * 0.3125F) + (double) ((float) enumdirection.getClockWise().getStepX() * 0.3125F);
+                double d1 = (double) pos.getY() + 0.5D;
+                double d2 = (double) pos.getZ() + 0.5D - (double) ((float) enumdirection.getStepZ() * 0.3125F) + (double) ((float) enumdirection.getClockWise().getStepZ() * 0.3125F);
 
-                for (int i2 = 0; i2 < 4; i2++) {
-                    level.addParticle(ParticleTypes.SMOKE, d, d1, d2, 0.0, 5.0E-4, 0.0);
+                for (int k = 0; k < 4; ++k) {
+                    level.addParticle(ParticleTypes.SMOKE, d0, d1, d2, 0.0D, 5.0E-4D, 0.0D);
                 }
             }
         }
+
     }
 
     public NonNullList<ItemStack> getItems() {
@@ -122,15 +150,18 @@
         super.load(tag);
         this.items.clear();
         ContainerHelper.loadAllItems(tag, this.items);
+        int[] aint;
+
         if (tag.contains("CookingTimes", 11)) {
-            int[] intArray = tag.getIntArray("CookingTimes");
-            System.arraycopy(intArray, 0, this.cookingProgress, 0, Math.min(this.cookingTime.length, intArray.length));
+            aint = tag.getIntArray("CookingTimes");
+            System.arraycopy(aint, 0, this.cookingProgress, 0, Math.min(this.cookingTime.length, aint.length));
         }
 
         if (tag.contains("CookingTotalTimes", 11)) {
-            int[] intArray = tag.getIntArray("CookingTotalTimes");
-            System.arraycopy(intArray, 0, this.cookingTime, 0, Math.min(this.cookingTime.length, intArray.length));
+            aint = tag.getIntArray("CookingTotalTimes");
+            System.arraycopy(aint, 0, this.cookingTime, 0, Math.min(this.cookingTime.length, aint.length));
         }
+
     }
 
     @Override
@@ -148,22 +179,28 @@
 
     @Override
     public CompoundTag getUpdateTag() {
-        CompoundTag compoundTag = new CompoundTag();
-        ContainerHelper.saveAllItems(compoundTag, this.items, true);
-        return compoundTag;
+        CompoundTag nbttagcompound = new CompoundTag();
+
+        ContainerHelper.saveAllItems(nbttagcompound, this.items, true);
+        return nbttagcompound;
     }
 
     public Optional<RecipeHolder<CampfireCookingRecipe>> getCookableRecipe(ItemStack stack) {
-        return this.items.stream().noneMatch(ItemStack::isEmpty) ? Optional.empty() : this.quickCheck.getRecipeFor(new SimpleContainer(stack), this.level);
+        return this.items.stream().noneMatch(ItemStack::isEmpty) ? Optional.empty() : this.quickCheck.getRecipeFor(new SimpleContainer(new ItemStack[]{stack}), this.level);
     }
 
     public boolean placeFood(@Nullable Entity entity, ItemStack stack, int cookTime) {
-        for (int i = 0; i < this.items.size(); i++) {
-            ItemStack itemStack = this.items.get(i);
-            if (itemStack.isEmpty()) {
-                this.cookingTime[i] = cookTime;
-                this.cookingProgress[i] = 0;
-                this.items.set(i, stack.split(1));
+        for (int j = 0; j < this.items.size(); ++j) {
+            ItemStack itemstack1 = (ItemStack) this.items.get(j);
+
+            if (itemstack1.isEmpty()) {
+                // CraftBukkit start
+                CampfireStartEvent event = new CampfireStartEvent(CraftBlock.at(this.level,this.worldPosition), CraftItemStack.asCraftMirror(stack), (CampfireRecipe) getCookableRecipe(stack).get().toBukkitRecipe());
+                this.level.getCraftServer().getPluginManager().callEvent(event);
+                this.cookingTime[j] = event.getTotalCookTime(); // i -> event.getTotalCookTime()
+                // CraftBukkit end
+                this.cookingProgress[j] = 0;
+                this.items.set(j, stack.split(1));
                 this.level.gameEvent(GameEvent.BLOCK_CHANGE, this.getBlockPos(), GameEvent.Context.of(entity, this.getBlockState()));
                 this.markUpdated();
                 return true;
@@ -187,5 +224,6 @@
         if (this.level != null) {
             this.markUpdated();
         }
+
     }
 }
