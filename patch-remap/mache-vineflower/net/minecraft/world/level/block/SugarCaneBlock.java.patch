--- a/net/minecraft/world/level/block/SugarCaneBlock.java
+++ b/net/minecraft/world/level/block/SugarCaneBlock.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block;
 
 import com.mojang.serialization.MapCodec;
+import java.util.Iterator;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -11,7 +12,7 @@
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
@@ -20,76 +21,84 @@
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class SugarCaneBlock extends Block {
+
     public static final MapCodec<SugarCaneBlock> CODEC = simpleCodec(SugarCaneBlock::new);
     public static final IntegerProperty AGE = BlockStateProperties.AGE_15;
     protected static final float AABB_OFFSET = 6.0F;
-    protected static final VoxelShape SHAPE = Block.box(2.0, 0.0, 2.0, 14.0, 16.0, 14.0);
+    protected static final VoxelShape SHAPE = Block.box(2.0D, 0.0D, 2.0D, 14.0D, 16.0D, 14.0D);
 
     @Override
     public MapCodec<SugarCaneBlock> codec() {
-        return CODEC;
+        return SugarCaneBlock.CODEC;
     }
 
     protected SugarCaneBlock(BlockBehaviour.Properties properties) {
         super(properties);
-        this.registerDefaultState(this.stateDefinition.any().setValue(AGE, Integer.valueOf(0)));
+        this.registerDefaultState((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(SugarCaneBlock.AGE, 0));
     }
 
     @Override
-    public VoxelShape getShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext context) {
-        return SHAPE;
+    public VoxelShape getShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
+        return SugarCaneBlock.SHAPE;
     }
 
     @Override
-    public void tick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
+    public void tick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
         if (!state.canSurvive(level, pos)) {
             level.destroyBlock(pos, true);
         }
+
     }
 
     @Override
-    public void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
+    public void randomTick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
         if (level.isEmptyBlock(pos.above())) {
-            int i = 1;
+            int i;
 
-            while (level.getBlockState(pos.below(i)).is(this)) {
-                i++;
+            for (i = 1; level.getBlockState(pos.below(i)).is((Block) this); ++i) {
+                ;
             }
 
             if (i < 3) {
-                int i1 = state.getValue(AGE);
-                if (i1 == 15) {
-                    level.setBlockAndUpdate(pos.above(), this.defaultBlockState());
-                    level.setBlock(pos, state.setValue(AGE, Integer.valueOf(0)), 4);
+                int j = (Integer) state.getValue(SugarCaneBlock.AGE);
+
+                if (j == 15) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(level, pos.above(), this.defaultBlockState()); // CraftBukkit
+                    level.setBlock(pos, (IBlockData) state.setValue(SugarCaneBlock.AGE, 0), 4);
                 } else {
-                    level.setBlock(pos, state.setValue(AGE, Integer.valueOf(i1 + 1)), 4);
+                    level.setBlock(pos, (IBlockData) state.setValue(SugarCaneBlock.AGE, j + 1), 4);
                 }
             }
         }
+
     }
 
     @Override
-    public BlockState updateShape(BlockState state, Direction facing, BlockState facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
+    public IBlockData updateShape(IBlockData state, Direction facing, IBlockData facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
         if (!state.canSurvive(level, currentPos)) {
-            level.scheduleTick(currentPos, this, 1);
+            level.scheduleTick(currentPos, (Block) this, 1);
         }
 
         return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
     }
 
     @Override
-    public boolean canSurvive(BlockState state, LevelReader level, BlockPos pos) {
-        BlockState blockState = level.getBlockState(pos.below());
-        if (blockState.is(this)) {
+    public boolean canSurvive(IBlockData state, LevelReader level, BlockPos pos) {
+        IBlockData iblockdata1 = level.getBlockState(pos.below());
+
+        if (iblockdata1.is((Block) this)) {
             return true;
         } else {
-            if (blockState.is(BlockTags.DIRT) || blockState.is(BlockTags.SAND)) {
-                BlockPos blockPos = pos.below();
+            if (iblockdata1.is(BlockTags.DIRT) || iblockdata1.is(BlockTags.SAND)) {
+                BlockPos blockposition1 = pos.below();
+                Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
 
-                for (Direction direction : Direction.Plane.HORIZONTAL) {
-                    BlockState blockState1 = level.getBlockState(blockPos.relative(direction));
-                    FluidState fluidState = level.getFluidState(blockPos.relative(direction));
-                    if (fluidState.is(FluidTags.WATER) || blockState1.is(Blocks.FROSTED_ICE)) {
+                while (iterator.hasNext()) {
+                    Direction enumdirection = (Direction) iterator.next();
+                    IBlockData iblockdata2 = level.getBlockState(blockposition1.relative(enumdirection));
+                    FluidState fluid = level.getFluidState(blockposition1.relative(enumdirection));
+
+                    if (fluid.is(FluidTags.WATER) || iblockdata2.is(Blocks.FROSTED_ICE)) {
                         return true;
                     }
                 }
@@ -100,7 +109,7 @@
     }
 
     @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(AGE);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(SugarCaneBlock.AGE);
     }
 }
