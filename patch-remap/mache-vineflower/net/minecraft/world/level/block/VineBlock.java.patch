--- a/net/minecraft/world/level/block/VineBlock.java
+++ b/net/minecraft/world/level/block/VineBlock.java
@@ -2,8 +2,8 @@
 
 import com.google.common.collect.ImmutableMap;
 import com.mojang.serialization.MapCodec;
+import java.util.Iterator;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
@@ -18,104 +18,98 @@
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
 
 public class VineBlock extends Block {
+
     public static final MapCodec<VineBlock> CODEC = simpleCodec(VineBlock::new);
     public static final BooleanProperty UP = PipeBlock.UP;
     public static final BooleanProperty NORTH = PipeBlock.NORTH;
     public static final BooleanProperty EAST = PipeBlock.EAST;
     public static final BooleanProperty SOUTH = PipeBlock.SOUTH;
     public static final BooleanProperty WEST = PipeBlock.WEST;
-    public static final Map<Direction, BooleanProperty> PROPERTY_BY_DIRECTION = PipeBlock.PROPERTY_BY_DIRECTION
-        .entrySet()
-        .stream()
-        .filter(entry -> entry.getKey() != Direction.DOWN)
-        .collect(Util.toMap());
+    public static final Map<Direction, BooleanProperty> PROPERTY_BY_DIRECTION = (Map) PipeBlock.PROPERTY_BY_DIRECTION.entrySet().stream().filter((entry) -> {
+        return entry.getKey() != Direction.DOWN;
+    }).collect(Util.toMap());
     protected static final float AABB_OFFSET = 1.0F;
-    private static final VoxelShape UP_AABB = Block.box(0.0, 15.0, 0.0, 16.0, 16.0, 16.0);
-    private static final VoxelShape WEST_AABB = Block.box(0.0, 0.0, 0.0, 1.0, 16.0, 16.0);
-    private static final VoxelShape EAST_AABB = Block.box(15.0, 0.0, 0.0, 16.0, 16.0, 16.0);
-    private static final VoxelShape NORTH_AABB = Block.box(0.0, 0.0, 0.0, 16.0, 16.0, 1.0);
-    private static final VoxelShape SOUTH_AABB = Block.box(0.0, 0.0, 15.0, 16.0, 16.0, 16.0);
-    private final Map<BlockState, VoxelShape> shapesCache;
+    private static final VoxelShape UP_AABB = Block.box(0.0D, 15.0D, 0.0D, 16.0D, 16.0D, 16.0D);
+    private static final VoxelShape WEST_AABB = Block.box(0.0D, 0.0D, 0.0D, 1.0D, 16.0D, 16.0D);
+    private static final VoxelShape EAST_AABB = Block.box(15.0D, 0.0D, 0.0D, 16.0D, 16.0D, 16.0D);
+    private static final VoxelShape NORTH_AABB = Block.box(0.0D, 0.0D, 0.0D, 16.0D, 16.0D, 1.0D);
+    private static final VoxelShape SOUTH_AABB = Block.box(0.0D, 0.0D, 15.0D, 16.0D, 16.0D, 16.0D);
+    private final Map<IBlockData, VoxelShape> shapesCache;
 
     @Override
     public MapCodec<VineBlock> codec() {
-        return CODEC;
+        return VineBlock.CODEC;
     }
 
     public VineBlock(BlockBehaviour.Properties properties) {
         super(properties);
-        this.registerDefaultState(
-            this.stateDefinition
-                .any()
-                .setValue(UP, Boolean.valueOf(false))
-                .setValue(NORTH, Boolean.valueOf(false))
-                .setValue(EAST, Boolean.valueOf(false))
-                .setValue(SOUTH, Boolean.valueOf(false))
-                .setValue(WEST, Boolean.valueOf(false))
-        );
-        this.shapesCache = ImmutableMap.copyOf(
-            this.stateDefinition.getPossibleStates().stream().collect(Collectors.toMap(Function.identity(), VineBlock::calculateShape))
-        );
+        this.registerDefaultState((IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(VineBlock.UP, false)).setValue(VineBlock.NORTH, false)).setValue(VineBlock.EAST, false)).setValue(VineBlock.SOUTH, false)).setValue(VineBlock.WEST, false));
+        this.shapesCache = ImmutableMap.copyOf((Map) this.stateDefinition.getPossibleStates().stream().collect(Collectors.toMap(Function.identity(), VineBlock::calculateShape)));
     }
 
-    private static VoxelShape calculateShape(BlockState state) {
-        VoxelShape voxelShape = Shapes.empty();
-        if (state.getValue(UP)) {
-            voxelShape = UP_AABB;
+    private static VoxelShape calculateShape(IBlockData state) {
+        VoxelShape voxelshape = Shapes.empty();
+
+        if ((Boolean) state.getValue(VineBlock.UP)) {
+            voxelshape = VineBlock.UP_AABB;
         }
 
-        if (state.getValue(NORTH)) {
-            voxelShape = Shapes.or(voxelShape, NORTH_AABB);
+        if ((Boolean) state.getValue(VineBlock.NORTH)) {
+            voxelshape = Shapes.or(voxelshape, VineBlock.NORTH_AABB);
         }
 
-        if (state.getValue(SOUTH)) {
-            voxelShape = Shapes.or(voxelShape, SOUTH_AABB);
+        if ((Boolean) state.getValue(VineBlock.SOUTH)) {
+            voxelshape = Shapes.or(voxelshape, VineBlock.SOUTH_AABB);
         }
 
-        if (state.getValue(EAST)) {
-            voxelShape = Shapes.or(voxelShape, EAST_AABB);
+        if ((Boolean) state.getValue(VineBlock.EAST)) {
+            voxelshape = Shapes.or(voxelshape, VineBlock.EAST_AABB);
         }
 
-        if (state.getValue(WEST)) {
-            voxelShape = Shapes.or(voxelShape, WEST_AABB);
+        if ((Boolean) state.getValue(VineBlock.WEST)) {
+            voxelshape = Shapes.or(voxelshape, VineBlock.WEST_AABB);
         }
 
-        return voxelShape.isEmpty() ? Shapes.block() : voxelShape;
+        return voxelshape.isEmpty() ? Shapes.block() : voxelshape;
     }
 
     @Override
-    public VoxelShape getShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext context) {
-        return this.shapesCache.get(state);
+    public VoxelShape getShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
+        return (VoxelShape) this.shapesCache.get(state);
     }
 
     @Override
-    public boolean propagatesSkylightDown(BlockState state, BlockGetter level, BlockPos pos) {
+    public boolean propagatesSkylightDown(IBlockData state, BlockGetter level, BlockPos pos) {
         return true;
     }
 
     @Override
-    public boolean canSurvive(BlockState state, LevelReader level, BlockPos pos) {
+    public boolean canSurvive(IBlockData state, LevelReader level, BlockPos pos) {
         return this.hasFaces(this.getUpdatedState(state, level, pos));
     }
 
-    private boolean hasFaces(BlockState state) {
+    private boolean hasFaces(IBlockData state) {
         return this.countFaces(state) > 0;
     }
 
-    private int countFaces(BlockState state) {
+    private int countFaces(IBlockData state) {
         int i = 0;
+        Iterator iterator = VineBlock.PROPERTY_BY_DIRECTION.values().iterator();
 
-        for (BooleanProperty booleanProperty : PROPERTY_BY_DIRECTION.values()) {
-            if (state.getValue(booleanProperty)) {
-                i++;
+        while (iterator.hasNext()) {
+            BooleanProperty blockstateboolean = (BooleanProperty) iterator.next();
+
+            if ((Boolean) state.getValue(blockstateboolean)) {
+                ++i;
             }
         }
 
@@ -126,15 +120,17 @@
         if (direction == Direction.DOWN) {
             return false;
         } else {
-            BlockPos blockPos = pos.relative(direction);
-            if (isAcceptableNeighbour(level, blockPos, direction)) {
+            BlockPos blockposition1 = pos.relative(direction);
+
+            if (isAcceptableNeighbour(level, blockposition1, direction)) {
                 return true;
             } else if (direction.getAxis() == Direction.Axis.Y) {
                 return false;
             } else {
-                BooleanProperty booleanProperty = PROPERTY_BY_DIRECTION.get(direction);
-                BlockState blockState = level.getBlockState(pos.above());
-                return blockState.is(this) && blockState.getValue(booleanProperty);
+                BooleanProperty blockstateboolean = (BooleanProperty) VineBlock.PROPERTY_BY_DIRECTION.get(direction);
+                IBlockData iblockdata = level.getBlockState(pos.above());
+
+                return iblockdata.is((Block) this) && (Boolean) iblockdata.getValue(blockstateboolean);
             }
         }
     }
@@ -143,27 +139,32 @@
         return MultifaceBlock.canAttachTo(blockReader, attachedFace, neighborPos, blockReader.getBlockState(neighborPos));
     }
 
-    private BlockState getUpdatedState(BlockState state, BlockGetter level, BlockPos pos) {
-        BlockPos blockPos = pos.above();
-        if (state.getValue(UP)) {
-            state = state.setValue(UP, Boolean.valueOf(isAcceptableNeighbour(level, blockPos, Direction.DOWN)));
+    private IBlockData getUpdatedState(IBlockData state, BlockGetter level, BlockPos pos) {
+        BlockPos blockposition1 = pos.above();
+
+        if ((Boolean) state.getValue(VineBlock.UP)) {
+            state = (IBlockData) state.setValue(VineBlock.UP, isAcceptableNeighbour(level, blockposition1, Direction.DOWN));
         }
 
-        BlockState blockState = null;
+        IBlockData iblockdata1 = null;
+        Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
 
-        for (Direction direction : Direction.Plane.HORIZONTAL) {
-            BooleanProperty propertyForFace = getPropertyForFace(direction);
-            if (state.getValue(propertyForFace)) {
-                boolean canSupportAtFace = this.canSupportAtFace(level, pos, direction);
-                if (!canSupportAtFace) {
-                    if (blockState == null) {
-                        blockState = level.getBlockState(blockPos);
+        while (iterator.hasNext()) {
+            Direction enumdirection = (Direction) iterator.next();
+            BooleanProperty blockstateboolean = getPropertyForFace(enumdirection);
+
+            if ((Boolean) state.getValue(blockstateboolean)) {
+                boolean flag = this.canSupportAtFace(level, pos, enumdirection);
+
+                if (!flag) {
+                    if (iblockdata1 == null) {
+                        iblockdata1 = level.getBlockState(blockposition1);
                     }
 
-                    canSupportAtFace = blockState.is(this) && blockState.getValue(propertyForFace);
+                    flag = iblockdata1.is((Block) this) && (Boolean) iblockdata1.getValue(blockstateboolean);
                 }
 
-                state = state.setValue(propertyForFace, Boolean.valueOf(canSupportAtFace));
+                state = (IBlockData) state.setValue(blockstateboolean, flag);
             }
         }
 
@@ -171,72 +172,86 @@
     }
 
     @Override
-    public BlockState updateShape(BlockState state, Direction facing, BlockState facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
+    public IBlockData updateShape(IBlockData state, Direction facing, IBlockData facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
         if (facing == Direction.DOWN) {
             return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
         } else {
-            BlockState updatedState = this.getUpdatedState(state, level, currentPos);
-            return !this.hasFaces(updatedState) ? Blocks.AIR.defaultBlockState() : updatedState;
+            IBlockData iblockdata2 = this.getUpdatedState(state, level, currentPos);
+
+            return !this.hasFaces(iblockdata2) ? Blocks.AIR.defaultBlockState() : iblockdata2;
         }
     }
 
     @Override
-    public void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
+    public void randomTick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
         if (level.getGameRules().getBoolean(GameRules.RULE_DO_VINES_SPREAD)) {
             if (random.nextInt(4) == 0) {
-                Direction random1 = Direction.getRandom(random);
-                BlockPos blockPos = pos.above();
-                if (random1.getAxis().isHorizontal() && !state.getValue(getPropertyForFace(random1))) {
+                Direction enumdirection = Direction.getRandom(random);
+                BlockPos blockposition1 = pos.above();
+                BlockPos blockposition2;
+                IBlockData iblockdata1;
+                Direction enumdirection1;
+
+                if (enumdirection.getAxis().isHorizontal() && !(Boolean) state.getValue(getPropertyForFace(enumdirection))) {
                     if (this.canSpread(level, pos)) {
-                        BlockPos blockPos1 = pos.relative(random1);
-                        BlockState blockState = level.getBlockState(blockPos1);
-                        if (blockState.isAir()) {
-                            Direction clockWise = random1.getClockWise();
-                            Direction counterClockWise = random1.getCounterClockWise();
-                            boolean flag = state.getValue(getPropertyForFace(clockWise));
-                            boolean flag1 = state.getValue(getPropertyForFace(counterClockWise));
-                            BlockPos blockPos2 = blockPos1.relative(clockWise);
-                            BlockPos blockPos3 = blockPos1.relative(counterClockWise);
-                            if (flag && isAcceptableNeighbour(level, blockPos2, clockWise)) {
-                                level.setBlock(blockPos1, this.defaultBlockState().setValue(getPropertyForFace(clockWise), Boolean.valueOf(true)), 2);
-                            } else if (flag1 && isAcceptableNeighbour(level, blockPos3, counterClockWise)) {
-                                level.setBlock(blockPos1, this.defaultBlockState().setValue(getPropertyForFace(counterClockWise), Boolean.valueOf(true)), 2);
+                        blockposition2 = pos.relative(enumdirection);
+                        iblockdata1 = level.getBlockState(blockposition2);
+                        if (iblockdata1.isAir()) {
+                            enumdirection1 = enumdirection.getClockWise();
+                            Direction enumdirection2 = enumdirection.getCounterClockWise();
+                            boolean flag = (Boolean) state.getValue(getPropertyForFace(enumdirection1));
+                            boolean flag1 = (Boolean) state.getValue(getPropertyForFace(enumdirection2));
+                            BlockPos blockposition3 = blockposition2.relative(enumdirection1);
+                            BlockPos blockposition4 = blockposition2.relative(enumdirection2);
+
+                            // CraftBukkit start - Call BlockSpreadEvent
+                            BlockPos source = pos;
+
+                            if (flag && isAcceptableNeighbour(level, blockposition3, enumdirection1)) {
+                                CraftEventFactory.handleBlockSpreadEvent(level, source, blockposition2, (IBlockData) this.defaultBlockState().setValue(getPropertyForFace(enumdirection1), true), 2);
+                            } else if (flag1 && isAcceptableNeighbour(level, blockposition4, enumdirection2)) {
+                                CraftEventFactory.handleBlockSpreadEvent(level, source, blockposition2, (IBlockData) this.defaultBlockState().setValue(getPropertyForFace(enumdirection2), true), 2);
                             } else {
-                                Direction opposite = random1.getOpposite();
-                                if (flag && level.isEmptyBlock(blockPos2) && isAcceptableNeighbour(level, pos.relative(clockWise), opposite)) {
-                                    level.setBlock(blockPos2, this.defaultBlockState().setValue(getPropertyForFace(opposite), Boolean.valueOf(true)), 2);
-                                } else if (flag1 && level.isEmptyBlock(blockPos3) && isAcceptableNeighbour(level, pos.relative(counterClockWise), opposite)) {
-                                    level.setBlock(blockPos3, this.defaultBlockState().setValue(getPropertyForFace(opposite), Boolean.valueOf(true)), 2);
-                                } else if ((double)random.nextFloat() < 0.05 && isAcceptableNeighbour(level, blockPos1.above(), Direction.UP)) {
-                                    level.setBlock(blockPos1, this.defaultBlockState().setValue(UP, Boolean.valueOf(true)), 2);
+                                Direction enumdirection3 = enumdirection.getOpposite();
+
+                                if (flag && level.isEmptyBlock(blockposition3) && isAcceptableNeighbour(level, pos.relative(enumdirection1), enumdirection3)) {
+                                    CraftEventFactory.handleBlockSpreadEvent(level, source, blockposition3, (IBlockData) this.defaultBlockState().setValue(getPropertyForFace(enumdirection3), true), 2);
+                                } else if (flag1 && level.isEmptyBlock(blockposition4) && isAcceptableNeighbour(level, pos.relative(enumdirection2), enumdirection3)) {
+                                    CraftEventFactory.handleBlockSpreadEvent(level, source, blockposition4, (IBlockData) this.defaultBlockState().setValue(getPropertyForFace(enumdirection3), true), 2);
+                                } else if ((double) random.nextFloat() < 0.05D && isAcceptableNeighbour(level, blockposition2.above(), Direction.UP)) {
+                                    CraftEventFactory.handleBlockSpreadEvent(level, source, blockposition2, (IBlockData) this.defaultBlockState().setValue(VineBlock.UP, true), 2);
                                 }
+                                // CraftBukkit end
                             }
-                        } else if (isAcceptableNeighbour(level, blockPos1, random1)) {
-                            level.setBlock(pos, state.setValue(getPropertyForFace(random1), Boolean.valueOf(true)), 2);
+                        } else if (isAcceptableNeighbour(level, blockposition2, enumdirection)) {
+                            CraftEventFactory.handleBlockGrowEvent(level, pos, (IBlockData) state.setValue(getPropertyForFace(enumdirection), true), 2); // CraftBukkit
                         }
+
                     }
                 } else {
-                    if (random1 == Direction.UP && pos.getY() < level.getMaxBuildHeight() - 1) {
-                        if (this.canSupportAtFace(level, pos, random1)) {
-                            level.setBlock(pos, state.setValue(UP, Boolean.valueOf(true)), 2);
+                    if (enumdirection == Direction.UP && pos.getY() < level.getMaxBuildHeight() - 1) {
+                        if (this.canSupportAtFace(level, pos, enumdirection)) {
+                            CraftEventFactory.handleBlockGrowEvent(level, pos, (IBlockData) state.setValue(VineBlock.UP, true), 2); // CraftBukkit
                             return;
                         }
 
-                        if (level.isEmptyBlock(blockPos)) {
+                        if (level.isEmptyBlock(blockposition1)) {
                             if (!this.canSpread(level, pos)) {
                                 return;
                             }
 
-                            BlockState blockState1 = state;
+                            IBlockData iblockdata2 = state;
+                            Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
 
-                            for (Direction clockWise : Direction.Plane.HORIZONTAL) {
-                                if (random.nextBoolean() || !isAcceptableNeighbour(level, blockPos.relative(clockWise), clockWise)) {
-                                    blockState1 = blockState1.setValue(getPropertyForFace(clockWise), Boolean.valueOf(false));
+                            while (iterator.hasNext()) {
+                                enumdirection1 = (Direction) iterator.next();
+                                if (random.nextBoolean() || !isAcceptableNeighbour(level, blockposition1.relative(enumdirection1), enumdirection1)) {
+                                    iblockdata2 = (IBlockData) iblockdata2.setValue(getPropertyForFace(enumdirection1), false);
                                 }
                             }
 
-                            if (this.hasHorizontalConnection(blockState1)) {
-                                level.setBlock(blockPos, blockState1, 2);
+                            if (this.hasHorizontalConnection(iblockdata2)) {
+                                CraftEventFactory.handleBlockSpreadEvent(level, pos, blockposition1, iblockdata2, 2); // CraftBukkit
                             }
 
                             return;
@@ -244,27 +259,34 @@
                     }
 
                     if (pos.getY() > level.getMinBuildHeight()) {
-                        BlockPos blockPos1 = pos.below();
-                        BlockState blockState = level.getBlockState(blockPos1);
-                        if (blockState.isAir() || blockState.is(this)) {
-                            BlockState blockState2 = blockState.isAir() ? this.defaultBlockState() : blockState;
-                            BlockState blockState3 = this.copyRandomFaces(state, blockState2, random);
-                            if (blockState2 != blockState3 && this.hasHorizontalConnection(blockState3)) {
-                                level.setBlock(blockPos1, blockState3, 2);
+                        blockposition2 = pos.below();
+                        iblockdata1 = level.getBlockState(blockposition2);
+                        if (iblockdata1.isAir() || iblockdata1.is((Block) this)) {
+                            IBlockData iblockdata3 = iblockdata1.isAir() ? this.defaultBlockState() : iblockdata1;
+                            IBlockData iblockdata4 = this.copyRandomFaces(state, iblockdata3, random);
+
+                            if (iblockdata3 != iblockdata4 && this.hasHorizontalConnection(iblockdata4)) {
+                                CraftEventFactory.handleBlockSpreadEvent(level, pos, blockposition2, iblockdata4, 2); // CraftBukkit
                             }
                         }
                     }
+
                 }
             }
         }
     }
 
-    private BlockState copyRandomFaces(BlockState sourceState, BlockState spreadState, RandomSource random) {
-        for (Direction direction : Direction.Plane.HORIZONTAL) {
+    private IBlockData copyRandomFaces(IBlockData sourceState, IBlockData spreadState, RandomSource random) {
+        Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
+
+        while (iterator.hasNext()) {
+            Direction enumdirection = (Direction) iterator.next();
+
             if (random.nextBoolean()) {
-                BooleanProperty propertyForFace = getPropertyForFace(direction);
-                if (sourceState.getValue(propertyForFace)) {
-                    spreadState = spreadState.setValue(propertyForFace, Boolean.valueOf(true));
+                BooleanProperty blockstateboolean = getPropertyForFace(enumdirection);
+
+                if ((Boolean) sourceState.getValue(blockstateboolean)) {
+                    spreadState = (IBlockData) spreadState.setValue(blockstateboolean, true);
                 }
             }
         }
@@ -272,18 +294,22 @@
         return spreadState;
     }
 
-    private boolean hasHorizontalConnection(BlockState state) {
-        return state.getValue(NORTH) || state.getValue(EAST) || state.getValue(SOUTH) || state.getValue(WEST);
+    private boolean hasHorizontalConnection(IBlockData state) {
+        return (Boolean) state.getValue(VineBlock.NORTH) || (Boolean) state.getValue(VineBlock.EAST) || (Boolean) state.getValue(VineBlock.SOUTH) || (Boolean) state.getValue(VineBlock.WEST);
     }
 
     private boolean canSpread(BlockGetter blockReader, BlockPos pos) {
-        int i = 4;
+        boolean flag = true;
         Iterable<BlockPos> iterable = BlockPos.betweenClosed(pos.getX() - 4, pos.getY() - 1, pos.getZ() - 4, pos.getX() + 4, pos.getY() + 1, pos.getZ() + 4);
-        int i1 = 5;
+        int i = 5;
+        Iterator iterator = iterable.iterator();
 
-        for (BlockPos blockPos : iterable) {
-            if (blockReader.getBlockState(blockPos).is(this)) {
-                if (--i1 <= 0) {
+        while (iterator.hasNext()) {
+            BlockPos blockposition1 = (BlockPos) iterator.next();
+
+            if (blockReader.getBlockState(blockposition1).is((Block) this)) {
+                --i;
+                if (i <= 0) {
                     return false;
                 }
             }
@@ -293,72 +319,69 @@
     }
 
     @Override
-    public boolean canBeReplaced(BlockState state, BlockPlaceContext useContext) {
-        BlockState blockState = useContext.getLevel().getBlockState(useContext.getClickedPos());
-        return blockState.is(this) ? this.countFaces(blockState) < PROPERTY_BY_DIRECTION.size() : super.canBeReplaced(state, useContext);
+    public boolean canBeReplaced(IBlockData state, BlockPlaceContext useContext) {
+        IBlockData iblockdata1 = useContext.getLevel().getBlockState(useContext.getClickedPos());
+
+        return iblockdata1.is((Block) this) ? this.countFaces(iblockdata1) < VineBlock.PROPERTY_BY_DIRECTION.size() : super.canBeReplaced(state, useContext);
     }
 
     @Nullable
     @Override
-    public BlockState getStateForPlacement(BlockPlaceContext context) {
-        BlockState blockState = context.getLevel().getBlockState(context.getClickedPos());
-        boolean isBlock = blockState.is(this);
-        BlockState blockState1 = isBlock ? blockState : this.defaultBlockState();
+    public IBlockData getStateForPlacement(BlockPlaceContext context) {
+        IBlockData iblockdata = context.getLevel().getBlockState(context.getClickedPos());
+        boolean flag = iblockdata.is((Block) this);
+        IBlockData iblockdata1 = flag ? iblockdata : this.defaultBlockState();
+        Direction[] aenumdirection = context.getNearestLookingDirections();
+        int i = aenumdirection.length;
 
-        for (Direction direction : context.getNearestLookingDirections()) {
-            if (direction != Direction.DOWN) {
-                BooleanProperty propertyForFace = getPropertyForFace(direction);
-                boolean flag = isBlock && blockState.getValue(propertyForFace);
-                if (!flag && this.canSupportAtFace(context.getLevel(), context.getClickedPos(), direction)) {
-                    return blockState1.setValue(propertyForFace, Boolean.valueOf(true));
+        for (int j = 0; j < i; ++j) {
+            Direction enumdirection = aenumdirection[j];
+
+            if (enumdirection != Direction.DOWN) {
+                BooleanProperty blockstateboolean = getPropertyForFace(enumdirection);
+                boolean flag1 = flag && (Boolean) iblockdata.getValue(blockstateboolean);
+
+                if (!flag1 && this.canSupportAtFace(context.getLevel(), context.getClickedPos(), enumdirection)) {
+                    return (IBlockData) iblockdata1.setValue(blockstateboolean, true);
                 }
             }
         }
 
-        return isBlock ? blockState1 : null;
+        return flag ? iblockdata1 : null;
     }
 
     @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(UP, NORTH, EAST, SOUTH, WEST);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(VineBlock.UP, VineBlock.NORTH, VineBlock.EAST, VineBlock.SOUTH, VineBlock.WEST);
     }
 
     @Override
-    public BlockState rotate(BlockState state, Rotation rotate) {
+    public IBlockData rotate(IBlockData state, Rotation rotate) {
         switch (rotate) {
             case CLOCKWISE_180:
-                return state.setValue(NORTH, state.getValue(SOUTH))
-                    .setValue(EAST, state.getValue(WEST))
-                    .setValue(SOUTH, state.getValue(NORTH))
-                    .setValue(WEST, state.getValue(EAST));
+                return (IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) state.setValue(VineBlock.NORTH, (Boolean) state.getValue(VineBlock.SOUTH))).setValue(VineBlock.EAST, (Boolean) state.getValue(VineBlock.WEST))).setValue(VineBlock.SOUTH, (Boolean) state.getValue(VineBlock.NORTH))).setValue(VineBlock.WEST, (Boolean) state.getValue(VineBlock.EAST));
             case COUNTERCLOCKWISE_90:
-                return state.setValue(NORTH, state.getValue(EAST))
-                    .setValue(EAST, state.getValue(SOUTH))
-                    .setValue(SOUTH, state.getValue(WEST))
-                    .setValue(WEST, state.getValue(NORTH));
+                return (IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) state.setValue(VineBlock.NORTH, (Boolean) state.getValue(VineBlock.EAST))).setValue(VineBlock.EAST, (Boolean) state.getValue(VineBlock.SOUTH))).setValue(VineBlock.SOUTH, (Boolean) state.getValue(VineBlock.WEST))).setValue(VineBlock.WEST, (Boolean) state.getValue(VineBlock.NORTH));
             case CLOCKWISE_90:
-                return state.setValue(NORTH, state.getValue(WEST))
-                    .setValue(EAST, state.getValue(NORTH))
-                    .setValue(SOUTH, state.getValue(EAST))
-                    .setValue(WEST, state.getValue(SOUTH));
+                return (IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) state.setValue(VineBlock.NORTH, (Boolean) state.getValue(VineBlock.WEST))).setValue(VineBlock.EAST, (Boolean) state.getValue(VineBlock.NORTH))).setValue(VineBlock.SOUTH, (Boolean) state.getValue(VineBlock.EAST))).setValue(VineBlock.WEST, (Boolean) state.getValue(VineBlock.SOUTH));
             default:
                 return state;
         }
     }
 
     @Override
-    public BlockState mirror(BlockState state, Mirror mirror) {
+    public IBlockData mirror(IBlockData state, Mirror mirror) {
         switch (mirror) {
             case LEFT_RIGHT:
-                return state.setValue(NORTH, state.getValue(SOUTH)).setValue(SOUTH, state.getValue(NORTH));
+                return (IBlockData) ((IBlockData) state.setValue(VineBlock.NORTH, (Boolean) state.getValue(VineBlock.SOUTH))).setValue(VineBlock.SOUTH, (Boolean) state.getValue(VineBlock.NORTH));
             case FRONT_BACK:
-                return state.setValue(EAST, state.getValue(WEST)).setValue(WEST, state.getValue(EAST));
+                return (IBlockData) ((IBlockData) state.setValue(VineBlock.EAST, (Boolean) state.getValue(VineBlock.WEST))).setValue(VineBlock.WEST, (Boolean) state.getValue(VineBlock.EAST));
             default:
                 return super.mirror(state, mirror);
         }
     }
 
     public static BooleanProperty getPropertyForFace(Direction face) {
-        return PROPERTY_BY_DIRECTION.get(face);
+        return (BooleanProperty) VineBlock.PROPERTY_BY_DIRECTION.get(face);
     }
 }
