--- a/net/minecraft/world/level/block/ComparatorBlock.java
+++ b/net/minecraft/world/level/block/ComparatorBlock.java
@@ -9,7 +9,7 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.RandomSource;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.decoration.ItemFrame;
 import net.minecraft.world.entity.player.Player;
@@ -19,7 +19,7 @@
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.ComparatorBlockEntity;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.ComparatorMode;
@@ -27,84 +27,82 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.ticks.TickPriority;
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
 
 public class ComparatorBlock extends DiodeBlock implements EntityBlock {
+
     public static final MapCodec<ComparatorBlock> CODEC = simpleCodec(ComparatorBlock::new);
     public static final EnumProperty<ComparatorMode> MODE = BlockStateProperties.MODE_COMPARATOR;
 
     @Override
     public MapCodec<ComparatorBlock> codec() {
-        return CODEC;
+        return ComparatorBlock.CODEC;
     }
 
     public ComparatorBlock(BlockBehaviour.Properties properties) {
         super(properties);
-        this.registerDefaultState(
-            this.stateDefinition.any().setValue(FACING, Direction.NORTH).setValue(POWERED, Boolean.valueOf(false)).setValue(MODE, ComparatorMode.COMPARE)
-        );
+        this.registerDefaultState((IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(ComparatorBlock.FACING, Direction.NORTH)).setValue(ComparatorBlock.POWERED, false)).setValue(ComparatorBlock.MODE, ComparatorMode.COMPARE));
     }
 
     @Override
-    protected int getDelay(BlockState state) {
+    protected int getDelay(IBlockData state) {
         return 2;
     }
 
     @Override
-    public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor level, BlockPos pos, BlockPos neighborPos) {
-        return direction == Direction.DOWN && !this.canSurviveOn(level, neighborPos, neighborState)
-            ? Blocks.AIR.defaultBlockState()
-            : super.updateShape(state, direction, neighborState, level, pos, neighborPos);
+    public IBlockData updateShape(IBlockData state, Direction direction, IBlockData neighborState, LevelAccessor level, BlockPos pos, BlockPos neighborPos) {
+        return direction == Direction.DOWN && !this.canSurviveOn(level, neighborPos, neighborState) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, level, pos, neighborPos);
     }
 
     @Override
-    protected int getOutputSignal(BlockGetter level, BlockPos pos, BlockState state) {
-        BlockEntity blockEntity = level.getBlockEntity(pos);
-        return blockEntity instanceof ComparatorBlockEntity ? ((ComparatorBlockEntity)blockEntity).getOutputSignal() : 0;
+    protected int getOutputSignal(BlockGetter level, BlockPos pos, IBlockData state) {
+        BlockEntity tileentity = level.getBlockEntity(pos);
+
+        return tileentity instanceof ComparatorBlockEntity ? ((ComparatorBlockEntity) tileentity).getOutputSignal() : 0;
     }
 
-    private int calculateOutputSignal(Level level, BlockPos pos, BlockState state) {
-        int inputSignal = this.getInputSignal(level, pos, state);
-        if (inputSignal == 0) {
+    private int calculateOutputSignal(Level level, BlockPos pos, IBlockData state) {
+        int i = this.getInputSignal(level, pos, state);
+
+        if (i == 0) {
             return 0;
         } else {
-            int alternateSignal = this.getAlternateSignal(level, pos, state);
-            if (alternateSignal > inputSignal) {
-                return 0;
-            } else {
-                return state.getValue(MODE) == ComparatorMode.SUBTRACT ? inputSignal - alternateSignal : inputSignal;
-            }
+            int j = this.getAlternateSignal(level, pos, state);
+
+            return j > i ? 0 : (state.getValue(ComparatorBlock.MODE) == ComparatorMode.SUBTRACT ? i - j : i);
         }
     }
 
     @Override
-    protected boolean shouldTurnOn(Level level, BlockPos pos, BlockState state) {
-        int inputSignal = this.getInputSignal(level, pos, state);
-        if (inputSignal == 0) {
+    protected boolean shouldTurnOn(Level level, BlockPos pos, IBlockData state) {
+        int i = this.getInputSignal(level, pos, state);
+
+        if (i == 0) {
             return false;
         } else {
-            int alternateSignal = this.getAlternateSignal(level, pos, state);
-            return inputSignal > alternateSignal || inputSignal == alternateSignal && state.getValue(MODE) == ComparatorMode.COMPARE;
+            int j = this.getAlternateSignal(level, pos, state);
+
+            return i > j ? true : i == j && state.getValue(ComparatorBlock.MODE) == ComparatorMode.COMPARE;
         }
     }
 
     @Override
-    protected int getInputSignal(Level level, BlockPos pos, BlockState state) {
+    protected int getInputSignal(Level level, BlockPos pos, IBlockData state) {
         int i = super.getInputSignal(level, pos, state);
-        Direction direction = state.getValue(FACING);
-        BlockPos blockPos = pos.relative(direction);
-        BlockState blockState = level.getBlockState(blockPos);
-        if (blockState.hasAnalogOutputSignal()) {
-            i = blockState.getAnalogOutputSignal(level, blockPos);
-        } else if (i < 15 && blockState.isRedstoneConductor(level, blockPos)) {
-            blockPos = blockPos.relative(direction);
-            blockState = level.getBlockState(blockPos);
-            ItemFrame itemFrame = this.getItemFrame(level, direction, blockPos);
-            int max = Math.max(
-                itemFrame == null ? Integer.MIN_VALUE : itemFrame.getAnalogOutput(),
-                blockState.hasAnalogOutputSignal() ? blockState.getAnalogOutputSignal(level, blockPos) : Integer.MIN_VALUE
-            );
-            if (max != Integer.MIN_VALUE) {
-                i = max;
+        Direction enumdirection = (Direction) state.getValue(ComparatorBlock.FACING);
+        BlockPos blockposition1 = pos.relative(enumdirection);
+        IBlockData iblockdata1 = level.getBlockState(blockposition1);
+
+        if (iblockdata1.hasAnalogOutputSignal()) {
+            i = iblockdata1.getAnalogOutputSignal(level, blockposition1);
+        } else if (i < 15 && iblockdata1.isRedstoneConductor(level, blockposition1)) {
+            blockposition1 = blockposition1.relative(enumdirection);
+            iblockdata1 = level.getBlockState(blockposition1);
+            ItemFrame entityitemframe = this.getItemFrame(level, enumdirection, blockposition1);
+            int j = Math.max(entityitemframe == null ? Integer.MIN_VALUE : entityitemframe.getAnalogOutput(), iblockdata1.hasAnalogOutputSignal() ? iblockdata1.getAnalogOutputSignal(level, blockposition1) : Integer.MIN_VALUE);
+
+            if (j != Integer.MIN_VALUE) {
+                i = j;
             }
         }
 
@@ -113,21 +111,22 @@
 
     @Nullable
     private ItemFrame getItemFrame(Level level, Direction facing, BlockPos pos) {
-        List<ItemFrame> entitiesOfClass = level.getEntitiesOfClass(
-            ItemFrame.class,
-            new AABB((double)pos.getX(), (double)pos.getY(), (double)pos.getZ(), (double)(pos.getX() + 1), (double)(pos.getY() + 1), (double)(pos.getZ() + 1)),
-            itemFrame -> itemFrame != null && itemFrame.getDirection() == facing
-        );
-        return entitiesOfClass.size() == 1 ? entitiesOfClass.get(0) : null;
+        // CraftBukkit - decompile error
+        List<ItemFrame> list = level.getEntitiesOfClass(ItemFrame.class, new AABB((double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), (double) (pos.getX() + 1), (double) (pos.getY() + 1), (double) (pos.getZ() + 1)), (java.util.function.Predicate<ItemFrame>) (entityitemframe) -> {
+            return entityitemframe != null && entityitemframe.getDirection() == facing;
+        });
+
+        return list.size() == 1 ? (ItemFrame) list.get(0) : null;
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+    public InteractionResult use(IBlockData state, Level level, BlockPos pos, Player player, EnumHand hand, BlockHitResult hit) {
         if (!player.getAbilities().mayBuild) {
             return InteractionResult.PASS;
         } else {
-            state = state.cycle(MODE);
-            float f = state.getValue(MODE) == ComparatorMode.SUBTRACT ? 0.55F : 0.5F;
+            state = (IBlockData) state.cycle(ComparatorBlock.MODE);
+            float f = state.getValue(ComparatorBlock.MODE) == ComparatorMode.SUBTRACT ? 0.55F : 0.5F;
+
             level.playSound(player, pos, SoundEvents.COMPARATOR_CLICK, SoundSource.BLOCKS, 0.3F, f);
             level.setBlock(pos, state, 2);
             this.refreshOutputState(level, pos, state);
@@ -136,59 +135,78 @@
     }
 
     @Override
-    protected void checkTickOnNeighbor(Level level, BlockPos pos, BlockState state) {
+    protected void checkTickOnNeighbor(Level level, BlockPos pos, IBlockData state) {
         if (!level.getBlockTicks().willTickThisTick(pos, this)) {
             int i = this.calculateOutputSignal(level, pos, state);
-            BlockEntity blockEntity = level.getBlockEntity(pos);
-            int i1 = blockEntity instanceof ComparatorBlockEntity ? ((ComparatorBlockEntity)blockEntity).getOutputSignal() : 0;
-            if (i != i1 || state.getValue(POWERED) != this.shouldTurnOn(level, pos, state)) {
-                TickPriority tickPriority = this.shouldPrioritize(level, pos, state) ? TickPriority.HIGH : TickPriority.NORMAL;
-                level.scheduleTick(pos, this, 2, tickPriority);
+            BlockEntity tileentity = level.getBlockEntity(pos);
+            int j = tileentity instanceof ComparatorBlockEntity ? ((ComparatorBlockEntity) tileentity).getOutputSignal() : 0;
+
+            if (i != j || (Boolean) state.getValue(ComparatorBlock.POWERED) != this.shouldTurnOn(level, pos, state)) {
+                TickPriority ticklistpriority = this.shouldPrioritize(level, pos, state) ? TickPriority.HIGH : TickPriority.NORMAL;
+
+                level.scheduleTick(pos, (Block) this, 2, ticklistpriority);
             }
+
         }
     }
 
-    private void refreshOutputState(Level level, BlockPos pos, BlockState state) {
+    private void refreshOutputState(Level level, BlockPos pos, IBlockData state) {
         int i = this.calculateOutputSignal(level, pos, state);
-        BlockEntity blockEntity = level.getBlockEntity(pos);
-        int i1 = 0;
-        if (blockEntity instanceof ComparatorBlockEntity comparatorBlockEntity) {
-            i1 = comparatorBlockEntity.getOutputSignal();
-            comparatorBlockEntity.setOutputSignal(i);
+        BlockEntity tileentity = level.getBlockEntity(pos);
+        int j = 0;
+
+        if (tileentity instanceof ComparatorBlockEntity) {
+            ComparatorBlockEntity tileentitycomparator = (ComparatorBlockEntity) tileentity;
+
+            j = tileentitycomparator.getOutputSignal();
+            tileentitycomparator.setOutputSignal(i);
         }
 
-        if (i1 != i || state.getValue(MODE) == ComparatorMode.COMPARE) {
-            boolean shouldTurnOn = this.shouldTurnOn(level, pos, state);
-            boolean flag = state.getValue(POWERED);
-            if (flag && !shouldTurnOn) {
-                level.setBlock(pos, state.setValue(POWERED, Boolean.valueOf(false)), 2);
-            } else if (!flag && shouldTurnOn) {
-                level.setBlock(pos, state.setValue(POWERED, Boolean.valueOf(true)), 2);
+        if (j != i || state.getValue(ComparatorBlock.MODE) == ComparatorMode.COMPARE) {
+            boolean flag = this.shouldTurnOn(level, pos, state);
+            boolean flag1 = (Boolean) state.getValue(ComparatorBlock.POWERED);
+
+            if (flag1 && !flag) {
+                // CraftBukkit start
+                if (CraftEventFactory.callRedstoneChange(level, pos, 15, 0).getNewCurrent() != 0) {
+                    return;
+                }
+                // CraftBukkit end
+                level.setBlock(pos, (IBlockData) state.setValue(ComparatorBlock.POWERED, false), 2);
+            } else if (!flag1 && flag) {
+                // CraftBukkit start
+                if (CraftEventFactory.callRedstoneChange(level, pos, 0, 15).getNewCurrent() != 15) {
+                    return;
+                }
+                // CraftBukkit end
+                level.setBlock(pos, (IBlockData) state.setValue(ComparatorBlock.POWERED, true), 2);
             }
 
             this.updateNeighborsInFront(level, pos, state);
         }
+
     }
 
     @Override
-    public void tick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
+    public void tick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
         this.refreshOutputState(level, pos, state);
     }
 
     @Override
-    public boolean triggerEvent(BlockState state, Level level, BlockPos pos, int id, int param) {
+    public boolean triggerEvent(IBlockData state, Level level, BlockPos pos, int id, int param) {
         super.triggerEvent(state, level, pos, id, param);
-        BlockEntity blockEntity = level.getBlockEntity(pos);
-        return blockEntity != null && blockEntity.triggerEvent(id, param);
+        BlockEntity tileentity = level.getBlockEntity(pos);
+
+        return tileentity != null && tileentity.triggerEvent(id, param);
     }
 
     @Override
-    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
+    public BlockEntity newBlockEntity(BlockPos pos, IBlockData state) {
         return new ComparatorBlockEntity(pos, state);
     }
 
     @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(FACING, MODE, POWERED);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(ComparatorBlock.FACING, ComparatorBlock.MODE, ComparatorBlock.POWERED);
     }
 }
