--- a/net/minecraft/world/level/block/BambooStalkBlock.java
+++ b/net/minecraft/world/level/block/BambooStalkBlock.java
@@ -15,26 +15,27 @@
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BambooLeaves;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.EnumProperty;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
 import net.minecraft.world.level.material.FluidState;
-import net.minecraft.world.level.pathfinder.PathComputationType;
+import net.minecraft.world.level.pathfinder.PathMode;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class BambooStalkBlock extends Block implements BonemealableBlock {
+
     public static final MapCodec<BambooStalkBlock> CODEC = simpleCodec(BambooStalkBlock::new);
     protected static final float SMALL_LEAVES_AABB_OFFSET = 3.0F;
     protected static final float LARGE_LEAVES_AABB_OFFSET = 5.0F;
     protected static final float COLLISION_AABB_OFFSET = 1.5F;
-    protected static final VoxelShape SMALL_SHAPE = Block.box(5.0, 0.0, 5.0, 11.0, 16.0, 11.0);
-    protected static final VoxelShape LARGE_SHAPE = Block.box(3.0, 0.0, 3.0, 13.0, 16.0, 13.0);
-    protected static final VoxelShape COLLISION_SHAPE = Block.box(6.5, 0.0, 6.5, 9.5, 16.0, 9.5);
+    protected static final VoxelShape SMALL_SHAPE = Block.box(5.0D, 0.0D, 5.0D, 11.0D, 16.0D, 11.0D);
+    protected static final VoxelShape LARGE_SHAPE = Block.box(3.0D, 0.0D, 3.0D, 13.0D, 16.0D, 13.0D);
+    protected static final VoxelShape COLLISION_SHAPE = Block.box(6.5D, 0.0D, 6.5D, 9.5D, 16.0D, 9.5D);
     public static final IntegerProperty AGE = BlockStateProperties.AGE_1;
     public static final EnumProperty<BambooLeaves> LEAVES = BlockStateProperties.BAMBOO_LEAVES;
     public static final IntegerProperty STAGE = BlockStateProperties.STAGE;
@@ -46,68 +47,70 @@
 
     @Override
     public MapCodec<BambooStalkBlock> codec() {
-        return CODEC;
+        return BambooStalkBlock.CODEC;
     }
 
     public BambooStalkBlock(BlockBehaviour.Properties properties) {
         super(properties);
-        this.registerDefaultState(
-            this.stateDefinition.any().setValue(AGE, Integer.valueOf(0)).setValue(LEAVES, BambooLeaves.NONE).setValue(STAGE, Integer.valueOf(0))
-        );
+        this.registerDefaultState((IBlockData) ((IBlockData) ((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(BambooStalkBlock.AGE, 0)).setValue(BambooStalkBlock.LEAVES, BambooLeaves.NONE)).setValue(BambooStalkBlock.STAGE, 0));
     }
 
     @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(AGE, LEAVES, STAGE);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(BambooStalkBlock.AGE, BambooStalkBlock.LEAVES, BambooStalkBlock.STAGE);
     }
 
     @Override
-    public boolean propagatesSkylightDown(BlockState state, BlockGetter level, BlockPos pos) {
+    public boolean propagatesSkylightDown(IBlockData state, BlockGetter level, BlockPos pos) {
         return true;
     }
 
     @Override
-    public VoxelShape getShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext context) {
-        VoxelShape voxelShape = state.getValue(LEAVES) == BambooLeaves.LARGE ? LARGE_SHAPE : SMALL_SHAPE;
-        Vec3 offset = state.getOffset(level, pos);
-        return voxelShape.move(offset.x, offset.y, offset.z);
+    public VoxelShape getShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
+        VoxelShape voxelshape = state.getValue(BambooStalkBlock.LEAVES) == BambooLeaves.LARGE ? BambooStalkBlock.LARGE_SHAPE : BambooStalkBlock.SMALL_SHAPE;
+        Vec3 vec3d = state.getOffset(level, pos);
+
+        return voxelshape.move(vec3d.x, vec3d.y, vec3d.z);
     }
 
     @Override
-    public boolean isPathfindable(BlockState state, BlockGetter level, BlockPos pos, PathComputationType type) {
+    public boolean isPathfindable(IBlockData state, BlockGetter level, BlockPos pos, PathMode type) {
         return false;
     }
 
     @Override
-    public VoxelShape getCollisionShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext context) {
-        Vec3 offset = state.getOffset(level, pos);
-        return COLLISION_SHAPE.move(offset.x, offset.y, offset.z);
+    public VoxelShape getCollisionShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
+        Vec3 vec3d = state.getOffset(level, pos);
+
+        return BambooStalkBlock.COLLISION_SHAPE.move(vec3d.x, vec3d.y, vec3d.z);
     }
 
     @Override
-    public boolean isCollisionShapeFullBlock(BlockState state, BlockGetter level, BlockPos pos) {
+    public boolean isCollisionShapeFullBlock(IBlockData state, BlockGetter level, BlockPos pos) {
         return false;
     }
 
     @Nullable
     @Override
-    public BlockState getStateForPlacement(BlockPlaceContext context) {
-        FluidState fluidState = context.getLevel().getFluidState(context.getClickedPos());
-        if (!fluidState.isEmpty()) {
+    public IBlockData getStateForPlacement(BlockPlaceContext context) {
+        FluidState fluid = context.getLevel().getFluidState(context.getClickedPos());
+
+        if (!fluid.isEmpty()) {
             return null;
         } else {
-            BlockState blockState = context.getLevel().getBlockState(context.getClickedPos().below());
-            if (blockState.is(BlockTags.BAMBOO_PLANTABLE_ON)) {
-                if (blockState.is(Blocks.BAMBOO_SAPLING)) {
-                    return this.defaultBlockState().setValue(AGE, Integer.valueOf(0));
-                } else if (blockState.is(Blocks.BAMBOO)) {
-                    int i = blockState.getValue(AGE) > 0 ? 1 : 0;
-                    return this.defaultBlockState().setValue(AGE, Integer.valueOf(i));
+            IBlockData iblockdata = context.getLevel().getBlockState(context.getClickedPos().below());
+
+            if (iblockdata.is(BlockTags.BAMBOO_PLANTABLE_ON)) {
+                if (iblockdata.is(Blocks.BAMBOO_SAPLING)) {
+                    return (IBlockData) this.defaultBlockState().setValue(BambooStalkBlock.AGE, 0);
+                } else if (iblockdata.is(Blocks.BAMBOO)) {
+                    int i = (Integer) iblockdata.getValue(BambooStalkBlock.AGE) > 0 ? 1 : 0;
+
+                    return (IBlockData) this.defaultBlockState().setValue(BambooStalkBlock.AGE, i);
                 } else {
-                    BlockState blockState1 = context.getLevel().getBlockState(context.getClickedPos().above());
-                    return blockState1.is(Blocks.BAMBOO)
-                        ? this.defaultBlockState().setValue(AGE, blockState1.getValue(AGE))
-                        : Blocks.BAMBOO_SAPLING.defaultBlockState();
+                    IBlockData iblockdata1 = context.getLevel().getBlockState(context.getClickedPos().above());
+
+                    return iblockdata1.is(Blocks.BAMBOO) ? (IBlockData) this.defaultBlockState().setValue(BambooStalkBlock.AGE, (Integer) iblockdata1.getValue(BambooStalkBlock.AGE)) : Blocks.BAMBOO_SAPLING.defaultBlockState();
                 }
             } else {
                 return null;
@@ -116,123 +119,142 @@
     }
 
     @Override
-    public void tick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
+    public void tick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
         if (!state.canSurvive(level, pos)) {
             level.destroyBlock(pos, true);
         }
+
     }
 
     @Override
-    public boolean isRandomlyTicking(BlockState state) {
-        return state.getValue(STAGE) == 0;
+    public boolean isRandomlyTicking(IBlockData state) {
+        return (Integer) state.getValue(BambooStalkBlock.STAGE) == 0;
     }
 
     @Override
-    public void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
-        if (state.getValue(STAGE) == 0) {
+    public void randomTick(IBlockData state, ServerLevel level, BlockPos pos, RandomSource random) {
+        if ((Integer) state.getValue(BambooStalkBlock.STAGE) == 0) {
             if (random.nextInt(3) == 0 && level.isEmptyBlock(pos.above()) && level.getRawBrightness(pos.above(), 0) >= 9) {
                 int i = this.getHeightBelowUpToMax(level, pos) + 1;
+
                 if (i < 16) {
                     this.growBamboo(state, level, pos, random, i);
                 }
             }
+
         }
     }
 
     @Override
-    public boolean canSurvive(BlockState state, LevelReader level, BlockPos pos) {
+    public boolean canSurvive(IBlockData state, LevelReader level, BlockPos pos) {
         return level.getBlockState(pos.below()).is(BlockTags.BAMBOO_PLANTABLE_ON);
     }
 
     @Override
-    public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor level, BlockPos pos, BlockPos neighborPos) {
+    public IBlockData updateShape(IBlockData state, Direction direction, IBlockData neighborState, LevelAccessor level, BlockPos pos, BlockPos neighborPos) {
         if (!state.canSurvive(level, pos)) {
-            level.scheduleTick(pos, this, 1);
+            level.scheduleTick(pos, (Block) this, 1);
         }
 
-        if (direction == Direction.UP && neighborState.is(Blocks.BAMBOO) && neighborState.getValue(AGE) > state.getValue(AGE)) {
-            level.setBlock(pos, state.cycle(AGE), 2);
+        if (direction == Direction.UP && neighborState.is(Blocks.BAMBOO) && (Integer) neighborState.getValue(BambooStalkBlock.AGE) > (Integer) state.getValue(BambooStalkBlock.AGE)) {
+            level.setBlock(pos, (IBlockData) state.cycle(BambooStalkBlock.AGE), 2);
         }
 
         return super.updateShape(state, direction, neighborState, level, pos, neighborPos);
     }
 
     @Override
-    public boolean isValidBonemealTarget(LevelReader levelReader, BlockPos blockPos, BlockState blockState) {
-        int heightAboveUpToMax = this.getHeightAboveUpToMax(levelReader, blockPos);
-        int heightBelowUpToMax = this.getHeightBelowUpToMax(levelReader, blockPos);
-        return heightAboveUpToMax + heightBelowUpToMax + 1 < 16 && levelReader.getBlockState(blockPos.above(heightAboveUpToMax)).getValue(STAGE) != 1;
+    public boolean isValidBonemealTarget(LevelReader iworldreader, BlockPos blockposition, IBlockData iblockdata) {
+        int i = this.getHeightAboveUpToMax(iworldreader, blockposition);
+        int j = this.getHeightBelowUpToMax(iworldreader, blockposition);
+
+        return i + j + 1 < 16 && (Integer) iworldreader.getBlockState(blockposition.above(i)).getValue(BambooStalkBlock.STAGE) != 1;
     }
 
     @Override
-    public boolean isBonemealSuccess(Level level, RandomSource random, BlockPos pos, BlockState state) {
+    public boolean isBonemealSuccess(Level level, RandomSource random, BlockPos pos, IBlockData state) {
         return true;
     }
 
     @Override
-    public void performBonemeal(ServerLevel level, RandomSource random, BlockPos pos, BlockState state) {
-        int heightAboveUpToMax = this.getHeightAboveUpToMax(level, pos);
-        int heightBelowUpToMax = this.getHeightBelowUpToMax(level, pos);
-        int i = heightAboveUpToMax + heightBelowUpToMax + 1;
-        int i1 = 1 + random.nextInt(2);
+    public void performBonemeal(ServerLevel level, RandomSource random, BlockPos pos, IBlockData state) {
+        int i = this.getHeightAboveUpToMax(level, pos);
+        int j = this.getHeightBelowUpToMax(level, pos);
+        int k = i + j + 1;
+        int l = 1 + random.nextInt(2);
 
-        for (int i2 = 0; i2 < i1; i2++) {
-            BlockPos blockPos = pos.above(heightAboveUpToMax);
-            BlockState blockState = level.getBlockState(blockPos);
-            if (i >= 16 || blockState.getValue(STAGE) == 1 || !level.isEmptyBlock(blockPos.above())) {
+        for (int i1 = 0; i1 < l; ++i1) {
+            BlockPos blockposition1 = pos.above(i);
+            IBlockData iblockdata1 = level.getBlockState(blockposition1);
+
+            if (k >= 16 || !iblockdata1.is(Blocks.BAMBOO) || (Integer) iblockdata1.getValue(BambooStalkBlock.STAGE) == 1 || !level.isEmptyBlock(blockposition1.above())) { // CraftBukkit - If the BlockSpreadEvent was cancelled, we have no bamboo here
                 return;
             }
 
-            this.growBamboo(blockState, level, blockPos, random, i);
-            heightAboveUpToMax++;
-            i++;
+            this.growBamboo(iblockdata1, level, blockposition1, random, k);
+            ++i;
+            ++k;
         }
+
     }
 
     @Override
-    public float getDestroyProgress(BlockState state, Player player, BlockGetter level, BlockPos pos) {
+    public float getDestroyProgress(IBlockData state, Player player, BlockGetter level, BlockPos pos) {
         return player.getMainHandItem().getItem() instanceof SwordItem ? 1.0F : super.getDestroyProgress(state, player, level, pos);
     }
 
-    protected void growBamboo(BlockState state, Level level, BlockPos pos, RandomSource random, int age) {
-        BlockState blockState = level.getBlockState(pos.below());
-        BlockPos blockPos = pos.below(2);
-        BlockState blockState1 = level.getBlockState(blockPos);
-        BambooLeaves bambooLeaves = BambooLeaves.NONE;
+    protected void growBamboo(IBlockData state, Level level, BlockPos pos, RandomSource random, int age) {
+        IBlockData iblockdata1 = level.getBlockState(pos.below());
+        BlockPos blockposition1 = pos.below(2);
+        IBlockData iblockdata2 = level.getBlockState(blockposition1);
+        BambooLeaves blockpropertybamboosize = BambooLeaves.NONE;
+        boolean shouldUpdateOthers = false; // CraftBukkit
+
         if (age >= 1) {
-            if (!blockState.is(Blocks.BAMBOO) || blockState.getValue(LEAVES) == BambooLeaves.NONE) {
-                bambooLeaves = BambooLeaves.SMALL;
-            } else if (blockState.is(Blocks.BAMBOO) && blockState.getValue(LEAVES) != BambooLeaves.NONE) {
-                bambooLeaves = BambooLeaves.LARGE;
-                if (blockState1.is(Blocks.BAMBOO)) {
-                    level.setBlock(pos.below(), blockState.setValue(LEAVES, BambooLeaves.SMALL), 3);
-                    level.setBlock(blockPos, blockState1.setValue(LEAVES, BambooLeaves.NONE), 3);
+            if (iblockdata1.is(Blocks.BAMBOO) && iblockdata1.getValue(BambooStalkBlock.LEAVES) != BambooLeaves.NONE) {
+                if (iblockdata1.is(Blocks.BAMBOO) && iblockdata1.getValue(BambooStalkBlock.LEAVES) != BambooLeaves.NONE) {
+                    blockpropertybamboosize = BambooLeaves.LARGE;
+                    if (iblockdata2.is(Blocks.BAMBOO)) {
+                        // CraftBukkit start - moved down
+                        // world.setBlock(blockposition.below(), (IBlockData) iblockdata1.setValue(BlockBamboo.LEAVES, BlockPropertyBambooSize.SMALL), 3);
+                        // world.setBlock(blockposition1, (IBlockData) iblockdata2.setValue(BlockBamboo.LEAVES, BlockPropertyBambooSize.NONE), 3);
+                        shouldUpdateOthers = true;
+                        // CraftBukkit end
+                    }
                 }
+            } else {
+                blockpropertybamboosize = BambooLeaves.SMALL;
             }
         }
 
-        int i = state.getValue(AGE) != 1 && !blockState1.is(Blocks.BAMBOO) ? 0 : 1;
-        int i1 = (age < 11 || !(random.nextFloat() < 0.25F)) && age != 15 ? 0 : 1;
-        level.setBlock(
-            pos.above(), this.defaultBlockState().setValue(AGE, Integer.valueOf(i)).setValue(LEAVES, bambooLeaves).setValue(STAGE, Integer.valueOf(i1)), 3
-        );
+        int j = (Integer) state.getValue(BambooStalkBlock.AGE) != 1 && !iblockdata2.is(Blocks.BAMBOO) ? 0 : 1;
+        int k = (age < 11 || random.nextFloat() >= 0.25F) && age != 15 ? 0 : 1;
+
+        // CraftBukkit start
+        if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(level, pos, pos.above(), (IBlockData) ((IBlockData) ((IBlockData) this.defaultBlockState().setValue(BambooStalkBlock.AGE, j)).setValue(BambooStalkBlock.LEAVES, blockpropertybamboosize)).setValue(BambooStalkBlock.STAGE, k), 3)) {
+            if (shouldUpdateOthers) {
+                level.setBlock(pos.below(), (IBlockData) iblockdata1.setValue(BambooStalkBlock.LEAVES, BambooLeaves.SMALL), 3);
+                level.setBlock(blockposition1, (IBlockData) iblockdata2.setValue(BambooStalkBlock.LEAVES, BambooLeaves.NONE), 3);
+            }
+        }
+        // CraftBukkit end
     }
 
     protected int getHeightAboveUpToMax(BlockGetter level, BlockPos pos) {
-        int i = 0;
+        int i;
 
-        while (i < 16 && level.getBlockState(pos.above(i + 1)).is(Blocks.BAMBOO)) {
-            i++;
+        for (i = 0; i < 16 && level.getBlockState(pos.above(i + 1)).is(Blocks.BAMBOO); ++i) {
+            ;
         }
 
         return i;
     }
 
     protected int getHeightBelowUpToMax(BlockGetter level, BlockPos pos) {
-        int i = 0;
+        int i;
 
-        while (i < 16 && level.getBlockState(pos.below(i + 1)).is(Blocks.BAMBOO)) {
-            i++;
+        for (i = 0; i < 16 && level.getBlockState(pos.below(i + 1)).is(Blocks.BAMBOO); ++i) {
+            ;
         }
 
         return i;
