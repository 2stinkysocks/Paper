--- a/net/minecraft/world/level/block/DropperBlock.java
+++ b/net/minecraft/world/level/block/DropperBlock.java
@@ -4,29 +4,34 @@
 import com.mojang.serialization.MapCodec;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.dispenser.BlockSource;
 import net.minecraft.core.dispenser.DefaultDispenseItemBehavior;
 import net.minecraft.core.dispenser.DispenseItemBehavior;
+import net.minecraft.core.dispenser.SourceBlock;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.CompoundContainer;
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.entity.DispenserBlockEntity;
-import net.minecraft.world.level.block.entity.DropperBlockEntity;
 import net.minecraft.world.level.block.entity.HopperBlockEntity;
+import net.minecraft.world.level.block.entity.TileEntityDropper;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import org.slf4j.Logger;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.inventory.InventoryMoveItemEvent;
+// CraftBukkit end
 
 public class DropperBlock extends DispenserBlock {
+
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final MapCodec<DropperBlock> CODEC = simpleCodec(DropperBlock::new);
-    private static final DispenseItemBehavior DISPENSE_BEHAVIOUR = new DefaultDispenseItemBehavior();
+    private static final DispenseItemBehavior DISPENSE_BEHAVIOUR = new DefaultDispenseItemBehavior(true); // CraftBukkit
 
     @Override
     public MapCodec<DropperBlock> codec() {
-        return CODEC;
+        return DropperBlock.CODEC;
     }
 
     public DropperBlock(BlockBehaviour.Properties properties) {
@@ -35,43 +40,64 @@
 
     @Override
     protected DispenseItemBehavior getDispenseMethod(ItemStack stack) {
-        return DISPENSE_BEHAVIOUR;
+        return DropperBlock.DISPENSE_BEHAVIOUR;
     }
 
     @Override
-    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
-        return new DropperBlockEntity(pos, state);
+    public BlockEntity newBlockEntity(BlockPos pos, IBlockData state) {
+        return new TileEntityDropper(pos, state);
     }
 
     @Override
-    protected void dispenseFrom(ServerLevel serverLevel, BlockState blockState, BlockPos blockPos) {
-        DispenserBlockEntity dispenserBlockEntity = serverLevel.getBlockEntity(blockPos, BlockEntityType.DROPPER).orElse(null);
-        if (dispenserBlockEntity == null) {
-            LOGGER.warn("Ignoring dispensing attempt for Dropper without matching block entity at {}", blockPos);
+    public void dispenseFrom(ServerLevel worldserver, IBlockData iblockdata, BlockPos blockposition) {
+        DispenserBlockEntity tileentitydispenser = (DispenserBlockEntity) worldserver.getBlockEntity(blockposition, BlockEntityType.DROPPER).orElse(null); // CraftBukkit - decompile error
+
+        if (tileentitydispenser == null) {
+            DropperBlock.LOGGER.warn("Ignoring dispensing attempt for Dropper without matching block entity at {}", blockposition);
         } else {
-            BlockSource blockSource = new BlockSource(serverLevel, blockPos, blockState, dispenserBlockEntity);
-            int randomSlot = dispenserBlockEntity.getRandomSlot(serverLevel.random);
-            if (randomSlot < 0) {
-                serverLevel.levelEvent(1001, blockPos, 0);
+            SourceBlock sourceblock = new SourceBlock(worldserver, blockposition, iblockdata, tileentitydispenser);
+            int i = tileentitydispenser.getRandomSlot(worldserver.random);
+
+            if (i < 0) {
+                worldserver.levelEvent(1001, blockposition, 0);
             } else {
-                ItemStack item = dispenserBlockEntity.getItem(randomSlot);
-                if (!item.isEmpty()) {
-                    Direction direction = serverLevel.getBlockState(blockPos).getValue(FACING);
-                    Container containerAt = HopperBlockEntity.getContainerAt(serverLevel, blockPos.relative(direction));
-                    ItemStack itemStack;
-                    if (containerAt == null) {
-                        itemStack = DISPENSE_BEHAVIOUR.dispense(blockSource, item);
+                ItemStack itemstack = tileentitydispenser.getItem(i);
+
+                if (!itemstack.isEmpty()) {
+                    Direction enumdirection = (Direction) worldserver.getBlockState(blockposition).getValue(DropperBlock.FACING);
+                    Container iinventory = HopperBlockEntity.getContainerAt(worldserver, blockposition.relative(enumdirection));
+                    ItemStack itemstack1;
+
+                    if (iinventory == null) {
+                        itemstack1 = DropperBlock.DISPENSE_BEHAVIOUR.dispense(sourceblock, itemstack);
                     } else {
-                        itemStack = HopperBlockEntity.addItem(dispenserBlockEntity, containerAt, item.copy().split(1), direction.getOpposite());
-                        if (itemStack.isEmpty()) {
-                            itemStack = item.copy();
-                            itemStack.shrink(1);
+                        // CraftBukkit start - Fire event when pushing items into other inventories
+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(itemstack.copy().split(1));
+
+                        org.bukkit.inventory.Inventory destinationInventory;
+                        // Have to special case large chests as they work oddly
+                        if (iinventory instanceof CompoundContainer) {
+                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) iinventory);
                         } else {
-                            itemStack = item.copy();
+                            destinationInventory = iinventory.getOwner().getInventory();
                         }
+
+                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(tileentitydispenser.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
+                        worldserver.getCraftServer().getPluginManager().callEvent(event);
+                        if (event.isCancelled()) {
+                            return;
+                        }
+                        itemstack1 = HopperBlockEntity.addItem(tileentitydispenser, iinventory, CraftItemStack.asNMSCopy(event.getItem()), enumdirection.getOpposite());
+                        if (event.getItem().equals(oitemstack) && itemstack1.isEmpty()) {
+                            // CraftBukkit end
+                            itemstack1 = itemstack.copy();
+                            itemstack1.shrink(1);
+                        } else {
+                            itemstack1 = itemstack.copy();
+                        }
                     }
 
-                    dispenserBlockEntity.setItem(randomSlot, itemStack);
+                    tileentitydispenser.setItem(i, itemstack1);
                 }
             }
         }
