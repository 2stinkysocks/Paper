--- a/net/minecraft/world/level/block/DaylightDetectorBlock.java
+++ b/net/minecraft/world/level/block/DaylightDetectorBlock.java
@@ -5,18 +5,18 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.util.Mth;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.EnumSkyBlock;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntityTicker;
 import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.entity.DaylightDetectorBlockEntity;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
@@ -27,64 +27,70 @@
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class DaylightDetectorBlock extends BaseEntityBlock {
+
     public static final MapCodec<DaylightDetectorBlock> CODEC = simpleCodec(DaylightDetectorBlock::new);
     public static final IntegerProperty POWER = BlockStateProperties.POWER;
     public static final BooleanProperty INVERTED = BlockStateProperties.INVERTED;
-    protected static final VoxelShape SHAPE = Block.box(0.0, 0.0, 0.0, 16.0, 6.0, 16.0);
+    protected static final VoxelShape SHAPE = Block.box(0.0D, 0.0D, 0.0D, 16.0D, 6.0D, 16.0D);
 
     @Override
     public MapCodec<DaylightDetectorBlock> codec() {
-        return CODEC;
+        return DaylightDetectorBlock.CODEC;
     }
 
     public DaylightDetectorBlock(BlockBehaviour.Properties properties) {
         super(properties);
-        this.registerDefaultState(this.stateDefinition.any().setValue(POWER, Integer.valueOf(0)).setValue(INVERTED, Boolean.valueOf(false)));
+        this.registerDefaultState((IBlockData) ((IBlockData) ((IBlockData) this.stateDefinition.any()).setValue(DaylightDetectorBlock.POWER, 0)).setValue(DaylightDetectorBlock.INVERTED, false));
     }
 
     @Override
-    public VoxelShape getShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext context) {
-        return SHAPE;
+    public VoxelShape getShape(IBlockData state, BlockGetter level, BlockPos pos, CollisionContext context) {
+        return DaylightDetectorBlock.SHAPE;
     }
 
     @Override
-    public boolean useShapeForLightOcclusion(BlockState state) {
+    public boolean useShapeForLightOcclusion(IBlockData state) {
         return true;
     }
 
     @Override
-    public int getSignal(BlockState blockState, BlockGetter blockAccess, BlockPos pos, Direction side) {
-        return blockState.getValue(POWER);
+    public int getSignal(IBlockData blockState, BlockGetter blockAccess, BlockPos pos, Direction side) {
+        return (Integer) blockState.getValue(DaylightDetectorBlock.POWER);
     }
 
-    private static void updateSignalStrength(BlockState state, Level level, BlockPos pos) {
-        int i = level.getBrightness(LightLayer.SKY, pos) - level.getSkyDarken();
-        float sunAngle = level.getSunAngle(1.0F);
-        boolean flag = state.getValue(INVERTED);
+    private static void updateSignalStrength(IBlockData state, Level level, BlockPos pos) {
+        int i = level.getBrightness(EnumSkyBlock.SKY, pos) - level.getSkyDarken();
+        float f = level.getSunAngle(1.0F);
+        boolean flag = (Boolean) state.getValue(DaylightDetectorBlock.INVERTED);
+
         if (flag) {
             i = 15 - i;
         } else if (i > 0) {
-            float f = sunAngle < (float) Math.PI ? 0.0F : (float) (Math.PI * 2);
-            sunAngle += (f - sunAngle) * 0.2F;
-            i = Math.round((float)i * Mth.cos(sunAngle));
+            float f1 = f < 3.1415927F ? 0.0F : 6.2831855F;
+
+            f += (f1 - f) * 0.2F;
+            i = Math.round((float) i * Mth.cos(f));
         }
 
-        int var7 = Mth.clamp(i, 0, 15);
-        if (state.getValue(POWER) != var7) {
-            level.setBlock(pos, state.setValue(POWER, Integer.valueOf(var7)), 3);
+        i = Mth.clamp(i, 0, 15);
+        if ((Integer) state.getValue(DaylightDetectorBlock.POWER) != i) {
+            i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(level, pos, ((Integer) state.getValue(POWER)), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
+            level.setBlock(pos, (IBlockData) state.setValue(DaylightDetectorBlock.POWER, i), 3);
         }
+
     }
 
     @Override
-    public InteractionResult use(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
+    public InteractionResult use(IBlockData state, Level level, BlockPos pos, Player player, EnumHand hand, BlockHitResult hit) {
         if (player.mayBuild()) {
             if (level.isClientSide) {
                 return InteractionResult.SUCCESS;
             } else {
-                BlockState blockState = state.cycle(INVERTED);
-                level.setBlock(pos, blockState, 2);
-                level.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(player, blockState));
-                updateSignalStrength(blockState, level, pos);
+                IBlockData iblockdata1 = (IBlockData) state.cycle(DaylightDetectorBlock.INVERTED);
+
+                level.setBlock(pos, iblockdata1, 2);
+                level.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(player, iblockdata1));
+                updateSignalStrength(iblockdata1, level, pos);
                 return InteractionResult.CONSUME;
             }
         } else {
@@ -93,36 +99,35 @@
     }
 
     @Override
-    public RenderShape getRenderShape(BlockState state) {
-        return RenderShape.MODEL;
+    public EnumRenderType getRenderShape(IBlockData state) {
+        return EnumRenderType.MODEL;
     }
 
     @Override
-    public boolean isSignalSource(BlockState state) {
+    public boolean isSignalSource(IBlockData state) {
         return true;
     }
 
     @Override
-    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
+    public BlockEntity newBlockEntity(BlockPos pos, IBlockData state) {
         return new DaylightDetectorBlockEntity(pos, state);
     }
 
     @Nullable
     @Override
-    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, BlockState state, BlockEntityType<T> blockEntityType) {
-        return !level.isClientSide && level.dimensionType().hasSkyLight()
-            ? createTickerHelper(blockEntityType, BlockEntityType.DAYLIGHT_DETECTOR, DaylightDetectorBlock::tickEntity)
-            : null;
+    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, IBlockData state, BlockEntityType<T> blockEntityType) {
+        return !level.isClientSide && level.dimensionType().hasSkyLight() ? createTickerHelper(blockEntityType, BlockEntityType.DAYLIGHT_DETECTOR, DaylightDetectorBlock::tickEntity) : null;
     }
 
-    private static void tickEntity(Level level, BlockPos pos, BlockState state, DaylightDetectorBlockEntity blockEntity) {
+    private static void tickEntity(Level level, BlockPos pos, IBlockData state, DaylightDetectorBlockEntity blockEntity) {
         if (level.getGameTime() % 20L == 0L) {
             updateSignalStrength(state, level, pos);
         }
+
     }
 
     @Override
-    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(POWER, INVERTED);
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, IBlockData> builder) {
+        builder.add(DaylightDetectorBlock.POWER, DaylightDetectorBlock.INVERTED);
     }
 }
