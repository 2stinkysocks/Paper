--- a/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -3,11 +3,13 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.logging.LogUtils;
+import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
@@ -31,29 +33,46 @@
 import net.minecraft.world.level.saveddata.SavedData;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import java.util.UUID;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.map.CraftMapView;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+// CraftBukkit end
+
 public class MapItemSavedData extends SavedData {
+
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final int MAP_SIZE = 128;
     private static final int HALF_MAP_SIZE = 64;
     public static final int MAX_SCALE = 4;
     public static final int TRACKED_DECORATION_LIMIT = 256;
-    public final int centerX;
-    public final int centerZ;
-    public final ResourceKey<Level> dimension;
-    private final boolean trackingPosition;
-    private final boolean unlimitedTracking;
-    public final byte scale;
+    public int centerX;
+    public int centerZ;
+    public ResourceKey<Level> dimension;
+    public boolean trackingPosition;
+    public boolean unlimitedTracking;
+    public byte scale;
     public byte[] colors = new byte[16384];
-    public final boolean locked;
-    private final List<MapItemSavedData.HoldingPlayer> carriedBy = Lists.newArrayList();
-    private final Map<Player, MapItemSavedData.HoldingPlayer> carriedByPlayers = Maps.newHashMap();
+    public boolean locked;
+    public final List<MapItemSavedData.HoldingPlayer> carriedBy = Lists.newArrayList();
+    public final Map<Player, MapItemSavedData.HoldingPlayer> carriedByPlayers = Maps.newHashMap();
     private final Map<String, MapBanner> bannerMarkers = Maps.newHashMap();
-    final Map<String, MapDecoration> decorations = Maps.newLinkedHashMap();
+    public final Map<String, MapDecoration> decorations = Maps.newLinkedHashMap();
     private final Map<String, MapFrame> frameMarkers = Maps.newHashMap();
     private int trackedDecorationCount;
 
-    public static SavedData.Factory<MapItemSavedData> factory() {
-        return new SavedData.Factory<>(() -> {
+    // CraftBukkit start
+    public final CraftMapView mapView;
+    private CraftServer server;
+    public UUID uniqueId = null;
+    public String id;
+    // CraftBukkit end
+
+    public static SavedData.a<MapItemSavedData> factory() {
+        return new SavedData.a<>(() -> {
             throw new IllegalStateException("Should never create an empty map saved data");
         }, MapItemSavedData::load, DataFixTypes.SAVED_DATA_MAP_DATA);
     }
@@ -67,17 +86,20 @@
         this.unlimitedTracking = unlimitedTracking;
         this.locked = locked;
         this.setDirty();
+        // CraftBukkit start
+        mapView = new CraftMapView(this);
+        server = (CraftServer) org.bukkit.Bukkit.getServer();
+        // CraftBukkit end
     }
 
-    public static MapItemSavedData createFresh(
-        double x, double z, byte scale, boolean trackingPosition, boolean unlimitedTracking, ResourceKey<Level> dimension
-    ) {
-        int i = 128 * (1 << scale);
-        int floor = Mth.floor((x + 64.0) / (double)i);
-        int floor1 = Mth.floor((z + 64.0) / (double)i);
-        int i1 = floor * i + i / 2 - 64;
-        int i2 = floor1 * i + i / 2 - 64;
-        return new MapItemSavedData(i1, i2, scale, trackingPosition, unlimitedTracking, false, dimension);
+    public static MapItemSavedData createFresh(double x, double d1, byte z, boolean flag, boolean scale, ResourceKey<Level> trackingPosition) {
+        int i = 128 * (1 << z);
+        int j = Mth.floor((x + 64.0D) / (double) i);
+        int k = Mth.floor((d1 + 64.0D) / (double) i);
+        int l = j * i + i / 2 - 64;
+        int i1 = k * i + i / 2 - 64;
+
+        return new MapItemSavedData(l, i1, z, flag, scale, false, trackingPosition);
     }
 
     public static MapItemSavedData createForClient(byte scale, boolean locked, ResourceKey<Level> dimension) {
@@ -85,62 +107,93 @@
     }
 
     public static MapItemSavedData load(CompoundTag compoundTag) {
-        ResourceKey<Level> resourceKey = DimensionType.parseLegacy(new Dynamic<>(NbtOps.INSTANCE, compoundTag.get("dimension")))
-            .resultOrPartial(LOGGER::error)
-            .orElseThrow(() -> new IllegalArgumentException("Invalid map dimension: " + compoundTag.get("dimension")));
-        int _int = compoundTag.getInt("xCenter");
-        int _int1 = compoundTag.getInt("zCenter");
-        byte b = (byte)Mth.clamp(compoundTag.getByte("scale"), 0, 4);
+        DataResult<ResourceKey<Level>> dataresult = DimensionType.parseLegacy(new Dynamic(NbtOps.INSTANCE, compoundTag.get("dimension"))); // CraftBukkit - decompile error
+        Logger logger = MapItemSavedData.LOGGER;
+
+        Objects.requireNonNull(logger);
+        // CraftBukkit start
+        ResourceKey<Level> resourcekey = dataresult.resultOrPartial(logger::error).orElseGet(() -> {
+            long least = compoundTag.getLong("UUIDLeast");
+            long most = compoundTag.getLong("UUIDMost");
+
+            if (least != 0L && most != 0L) {
+                UUID uniqueId = new UUID(most, least);
+
+                CraftWorld world = (CraftWorld) Bukkit.getWorld(uniqueId);
+                // Check if the stored world details are correct.
+                if (world == null) {
+                    /* All Maps which do not have their valid world loaded are set to a dimension which hopefully won't be reached.
+                       This is to prevent them being corrupted with the wrong map data. */
+                    // PAIL: Use Vanilla exception handling for now
+                } else {
+                    return world.getHandle().dimension();
+                }
+            }
+            throw new IllegalArgumentException("Invalid map dimension: " + compoundTag.get("dimension"));
+            // CraftBukkit end
+        });
+        int i = compoundTag.getInt("xCenter");
+        int j = compoundTag.getInt("zCenter");
+        byte b0 = (byte) Mth.clamp(compoundTag.getByte("scale"), 0, 4);
         boolean flag = !compoundTag.contains("trackingPosition", 1) || compoundTag.getBoolean("trackingPosition");
-        boolean _boolean = compoundTag.getBoolean("unlimitedTracking");
-        boolean _boolean1 = compoundTag.getBoolean("locked");
-        MapItemSavedData mapItemSavedData = new MapItemSavedData(_int, _int1, b, flag, _boolean, _boolean1, resourceKey);
-        byte[] byteArray = compoundTag.getByteArray("colors");
-        if (byteArray.length == 16384) {
-            mapItemSavedData.colors = byteArray;
+        boolean flag1 = compoundTag.getBoolean("unlimitedTracking");
+        boolean flag2 = compoundTag.getBoolean("locked");
+        MapItemSavedData worldmap = new MapItemSavedData(i, j, b0, flag, flag1, flag2, resourcekey);
+        byte[] abyte = compoundTag.getByteArray("colors");
+
+        if (abyte.length == 16384) {
+            worldmap.colors = abyte;
         }
 
-        ListTag list = compoundTag.getList("banners", 10);
+        ListTag nbttaglist = compoundTag.getList("banners", 10);
 
-        for (int i = 0; i < list.size(); i++) {
-            MapBanner mapBanner = MapBanner.load(list.getCompound(i));
-            mapItemSavedData.bannerMarkers.put(mapBanner.getId(), mapBanner);
-            mapItemSavedData.addDecoration(
-                mapBanner.getDecoration(),
-                null,
-                mapBanner.getId(),
-                (double)mapBanner.getPos().getX(),
-                (double)mapBanner.getPos().getZ(),
-                180.0,
-                mapBanner.getName()
-            );
+        for (int k = 0; k < nbttaglist.size(); ++k) {
+            MapBanner mapiconbanner = MapBanner.load(nbttaglist.getCompound(k));
+
+            worldmap.bannerMarkers.put(mapiconbanner.getId(), mapiconbanner);
+            worldmap.addDecoration(mapiconbanner.getDecoration(), (LevelAccessor) null, mapiconbanner.getId(), (double) mapiconbanner.getPos().getX(), (double) mapiconbanner.getPos().getZ(), 180.0D, mapiconbanner.getName());
         }
 
-        ListTag list1 = compoundTag.getList("frames", 10);
+        ListTag nbttaglist1 = compoundTag.getList("frames", 10);
 
-        for (int i1 = 0; i1 < list1.size(); i1++) {
-            MapFrame mapFrame = MapFrame.load(list1.getCompound(i1));
-            mapItemSavedData.frameMarkers.put(mapFrame.getId(), mapFrame);
-            mapItemSavedData.addDecoration(
-                MapDecoration.Type.FRAME,
-                null,
-                "frame-" + mapFrame.getEntityId(),
-                (double)mapFrame.getPos().getX(),
-                (double)mapFrame.getPos().getZ(),
-                (double)mapFrame.getRotation(),
-                null
-            );
+        for (int l = 0; l < nbttaglist1.size(); ++l) {
+            MapFrame worldmapframe = MapFrame.load(nbttaglist1.getCompound(l));
+
+            worldmap.frameMarkers.put(worldmapframe.getId(), worldmapframe);
+            worldmap.addDecoration(MapDecoration.Type.FRAME, (LevelAccessor) null, "frame-" + worldmapframe.getEntityId(), (double) worldmapframe.getPos().getX(), (double) worldmapframe.getPos().getZ(), (double) worldmapframe.getRotation(), (Component) null);
         }
 
-        return mapItemSavedData;
+        return worldmap;
     }
 
     @Override
     public CompoundTag save(CompoundTag compound) {
-        ResourceLocation.CODEC
-            .encodeStart(NbtOps.INSTANCE, this.dimension.location())
-            .resultOrPartial(LOGGER::error)
-            .ifPresent(tag -> compound.put("dimension", tag));
+        DataResult<Tag> dataresult = ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.dimension.location()); // CraftBukkit - decompile error
+        Logger logger = MapItemSavedData.LOGGER;
+
+        Objects.requireNonNull(logger);
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+            compound.put("dimension", nbtbase);
+        });
+        // CraftBukkit start
+        if (true) {
+            if (this.uniqueId == null) {
+                for (org.bukkit.World world : server.getWorlds()) {
+                    CraftWorld cWorld = (CraftWorld) world;
+                    if (cWorld.getHandle().dimension() == this.dimension) {
+                        this.uniqueId = cWorld.getUID();
+                        break;
+                    }
+                }
+            }
+            /* Perform a second check to see if a matching world was found, this is a necessary
+               change incase Maps are forcefully unlinked from a World and lack a UID.*/
+            if (this.uniqueId != null) {
+                compound.putLong("UUIDLeast", this.uniqueId.getLeastSignificantBits());
+                compound.putLong("UUIDMost", this.uniqueId.getMostSignificantBits());
+            }
+        }
+        // CraftBukkit end
         compound.putInt("xCenter", this.centerX);
         compound.putInt("zCenter", this.centerZ);
         compound.putByte("scale", this.scale);
@@ -148,168 +201,154 @@
         compound.putBoolean("trackingPosition", this.trackingPosition);
         compound.putBoolean("unlimitedTracking", this.unlimitedTracking);
         compound.putBoolean("locked", this.locked);
-        ListTag list = new ListTag();
+        ListTag nbttaglist = new ListTag();
+        Iterator iterator = this.bannerMarkers.values().iterator();
 
-        for (MapBanner mapBanner : this.bannerMarkers.values()) {
-            list.add(mapBanner.save());
+        while (iterator.hasNext()) {
+            MapBanner mapiconbanner = (MapBanner) iterator.next();
+
+            nbttaglist.add(mapiconbanner.save());
         }
 
-        compound.put("banners", list);
-        ListTag list1 = new ListTag();
+        compound.put("banners", nbttaglist);
+        ListTag nbttaglist1 = new ListTag();
+        Iterator iterator1 = this.frameMarkers.values().iterator();
 
-        for (MapFrame mapFrame : this.frameMarkers.values()) {
-            list1.add(mapFrame.save());
+        while (iterator1.hasNext()) {
+            MapFrame worldmapframe = (MapFrame) iterator1.next();
+
+            nbttaglist1.add(worldmapframe.save());
         }
 
-        compound.put("frames", list1);
+        compound.put("frames", nbttaglist1);
         return compound;
     }
 
     public MapItemSavedData locked() {
-        MapItemSavedData mapItemSavedData = new MapItemSavedData(
-            this.centerX, this.centerZ, this.scale, this.trackingPosition, this.unlimitedTracking, true, this.dimension
-        );
-        mapItemSavedData.bannerMarkers.putAll(this.bannerMarkers);
-        mapItemSavedData.decorations.putAll(this.decorations);
-        mapItemSavedData.trackedDecorationCount = this.trackedDecorationCount;
-        System.arraycopy(this.colors, 0, mapItemSavedData.colors, 0, this.colors.length);
-        mapItemSavedData.setDirty();
-        return mapItemSavedData;
+        MapItemSavedData worldmap = new MapItemSavedData(this.centerX, this.centerZ, this.scale, this.trackingPosition, this.unlimitedTracking, true, this.dimension);
+
+        worldmap.bannerMarkers.putAll(this.bannerMarkers);
+        worldmap.decorations.putAll(this.decorations);
+        worldmap.trackedDecorationCount = this.trackedDecorationCount;
+        System.arraycopy(this.colors, 0, worldmap.colors, 0, this.colors.length);
+        worldmap.setDirty();
+        return worldmap;
     }
 
     public MapItemSavedData scaled(int scalar) {
-        return createFresh(
-            (double)this.centerX,
-            (double)this.centerZ,
-            (byte)Mth.clamp(this.scale + scalar, 0, 4),
-            this.trackingPosition,
-            this.unlimitedTracking,
-            this.dimension
-        );
+        return createFresh((double) this.centerX, (double) this.centerZ, (byte) Mth.clamp(this.scale + scalar, 0, 4), this.trackingPosition, this.unlimitedTracking, this.dimension);
     }
 
     public void tickCarriedBy(Player player, ItemStack mapStack) {
         if (!this.carriedByPlayers.containsKey(player)) {
-            MapItemSavedData.HoldingPlayer holdingPlayer = new MapItemSavedData.HoldingPlayer(player);
-            this.carriedByPlayers.put(player, holdingPlayer);
-            this.carriedBy.add(holdingPlayer);
+            MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = new MapItemSavedData.HoldingPlayer(player);
+
+            this.carriedByPlayers.put(player, worldmap_worldmaphumantracker);
+            this.carriedBy.add(worldmap_worldmaphumantracker);
         }
 
         if (!player.getInventory().contains(mapStack)) {
             this.removeDecoration(player.getName().getString());
         }
 
-        for (int i = 0; i < this.carriedBy.size(); i++) {
-            MapItemSavedData.HoldingPlayer holdingPlayer1 = this.carriedBy.get(i);
-            String string = holdingPlayer1.player.getName().getString();
-            if (!holdingPlayer1.player.isRemoved() && (holdingPlayer1.player.getInventory().contains(mapStack) || mapStack.isFramed())) {
-                if (!mapStack.isFramed() && holdingPlayer1.player.level().dimension() == this.dimension && this.trackingPosition) {
-                    this.addDecoration(
-                        MapDecoration.Type.PLAYER,
-                        holdingPlayer1.player.level(),
-                        string,
-                        holdingPlayer1.player.getX(),
-                        holdingPlayer1.player.getZ(),
-                        (double)holdingPlayer1.player.getYRot(),
-                        null
-                    );
+        for (int i = 0; i < this.carriedBy.size(); ++i) {
+            MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker1 = (MapItemSavedData.HoldingPlayer) this.carriedBy.get(i);
+            String s = worldmap_worldmaphumantracker1.player.getName().getString();
+
+            if (!worldmap_worldmaphumantracker1.player.isRemoved() && (worldmap_worldmaphumantracker1.player.getInventory().contains(mapStack) || mapStack.isFramed())) {
+                if (!mapStack.isFramed() && worldmap_worldmaphumantracker1.player.level().dimension() == this.dimension && this.trackingPosition) {
+                    this.addDecoration(MapDecoration.Type.PLAYER, worldmap_worldmaphumantracker1.player.level(), s, worldmap_worldmaphumantracker1.player.getX(), worldmap_worldmaphumantracker1.player.getZ(), (double) worldmap_worldmaphumantracker1.player.getYRot(), (Component) null);
                 }
             } else {
-                this.carriedByPlayers.remove(holdingPlayer1.player);
-                this.carriedBy.remove(holdingPlayer1);
-                this.removeDecoration(string);
+                this.carriedByPlayers.remove(worldmap_worldmaphumantracker1.player);
+                this.carriedBy.remove(worldmap_worldmaphumantracker1);
+                this.removeDecoration(s);
             }
         }
 
         if (mapStack.isFramed() && this.trackingPosition) {
-            ItemFrame frame = mapStack.getFrame();
-            BlockPos pos = frame.getPos();
-            MapFrame mapFrame = this.frameMarkers.get(MapFrame.frameId(pos));
-            if (mapFrame != null && frame.getId() != mapFrame.getEntityId() && this.frameMarkers.containsKey(mapFrame.getId())) {
-                this.removeDecoration("frame-" + mapFrame.getEntityId());
+            ItemFrame entityitemframe = mapStack.getFrame();
+            BlockPos blockposition = entityitemframe.getPos();
+            MapFrame worldmapframe = (MapFrame) this.frameMarkers.get(MapFrame.frameId(blockposition));
+
+            if (worldmapframe != null && entityitemframe.getId() != worldmapframe.getEntityId() && this.frameMarkers.containsKey(worldmapframe.getId())) {
+                this.removeDecoration("frame-" + worldmapframe.getEntityId());
             }
 
-            MapFrame mapFrame1 = new MapFrame(pos, frame.getDirection().get2DDataValue() * 90, frame.getId());
-            this.addDecoration(
-                MapDecoration.Type.FRAME,
-                player.level(),
-                "frame-" + frame.getId(),
-                (double)pos.getX(),
-                (double)pos.getZ(),
-                (double)(frame.getDirection().get2DDataValue() * 90),
-                null
-            );
-            this.frameMarkers.put(mapFrame1.getId(), mapFrame1);
+            MapFrame worldmapframe1 = new MapFrame(blockposition, entityitemframe.getDirection().get2DDataValue() * 90, entityitemframe.getId());
+
+            this.addDecoration(MapDecoration.Type.FRAME, player.level(), "frame-" + entityitemframe.getId(), (double) blockposition.getX(), (double) blockposition.getZ(), (double) (entityitemframe.getDirection().get2DDataValue() * 90), (Component) null);
+            this.frameMarkers.put(worldmapframe1.getId(), worldmapframe1);
         }
 
-        CompoundTag tag = mapStack.getTag();
-        if (tag != null && tag.contains("Decorations", 9)) {
-            ListTag list = tag.getList("Decorations", 10);
+        CompoundTag nbttagcompound = mapStack.getTag();
 
-            for (int i1 = 0; i1 < list.size(); i1++) {
-                CompoundTag compound = list.getCompound(i1);
-                if (!this.decorations.containsKey(compound.getString("id"))) {
-                    this.addDecoration(
-                        MapDecoration.Type.byIcon(compound.getByte("type")),
-                        player.level(),
-                        compound.getString("id"),
-                        compound.getDouble("x"),
-                        compound.getDouble("z"),
-                        compound.getDouble("rot"),
-                        null
-                    );
+        if (nbttagcompound != null && nbttagcompound.contains("Decorations", 9)) {
+            ListTag nbttaglist = nbttagcompound.getList("Decorations", 10);
+
+            for (int j = 0; j < nbttaglist.size(); ++j) {
+                CompoundTag nbttagcompound1 = nbttaglist.getCompound(j);
+
+                if (!this.decorations.containsKey(nbttagcompound1.getString("id"))) {
+                    this.addDecoration(MapDecoration.Type.byIcon(nbttagcompound1.getByte("type")), player.level(), nbttagcompound1.getString("id"), nbttagcompound1.getDouble("x"), nbttagcompound1.getDouble("z"), nbttagcompound1.getDouble("rot"), (Component) null);
                 }
             }
         }
+
     }
 
     private void removeDecoration(String identifier) {
-        MapDecoration mapDecoration = this.decorations.remove(identifier);
-        if (mapDecoration != null && mapDecoration.type().shouldTrackCount()) {
-            this.trackedDecorationCount--;
+        MapDecoration mapicon = (MapDecoration) this.decorations.remove(identifier);
+
+        if (mapicon != null && mapicon.type().shouldTrackCount()) {
+            --this.trackedDecorationCount;
         }
 
         this.setDecorationsDirty();
     }
 
     public static void addTargetDecoration(ItemStack map, BlockPos target, String decorationName, MapDecoration.Type type) {
-        ListTag list;
+        ListTag nbttaglist;
+
         if (map.hasTag() && map.getTag().contains("Decorations", 9)) {
-            list = map.getTag().getList("Decorations", 10);
+            nbttaglist = map.getTag().getList("Decorations", 10);
         } else {
-            list = new ListTag();
-            map.addTagElement("Decorations", list);
+            nbttaglist = new ListTag();
+            map.addTagElement("Decorations", nbttaglist);
         }
 
-        CompoundTag compoundTag = new CompoundTag();
-        compoundTag.putByte("type", type.getIcon());
-        compoundTag.putString("id", decorationName);
-        compoundTag.putDouble("x", (double)target.getX());
-        compoundTag.putDouble("z", (double)target.getZ());
-        compoundTag.putDouble("rot", 180.0);
-        list.add(compoundTag);
+        CompoundTag nbttagcompound = new CompoundTag();
+
+        nbttagcompound.putByte("type", type.getIcon());
+        nbttagcompound.putString("id", decorationName);
+        nbttagcompound.putDouble("x", (double) target.getX());
+        nbttagcompound.putDouble("z", (double) target.getZ());
+        nbttagcompound.putDouble("rot", 180.0D);
+        nbttaglist.add(nbttagcompound);
         if (type.hasMapColor()) {
-            CompoundTag tagElement = map.getOrCreateTagElement("display");
-            tagElement.putInt("MapColor", type.getMapColor());
+            CompoundTag nbttagcompound1 = map.getOrCreateTagElement("display");
+
+            nbttagcompound1.putInt("MapColor", type.getMapColor());
         }
+
     }
 
-    private void addDecoration(
-        MapDecoration.Type type, @Nullable LevelAccessor level, String decorationName, double levelX, double levelZ, double rotation, @Nullable Component name
-    ) {
+    private void addDecoration(MapDecoration.Type type, @Nullable LevelAccessor level, String decorationName, double levelX, double d1, double levelZ, @Nullable Component ichatbasecomponent) {
         int i = 1 << this.scale;
-        float f = (float)(levelX - (double)this.centerX) / (float)i;
-        float f1 = (float)(levelZ - (double)this.centerZ) / (float)i;
-        byte b = (byte)((int)((double)(f * 2.0F) + 0.5));
-        byte b1 = (byte)((int)((double)(f1 * 2.0F) + 0.5));
-        int i1 = 63;
+        float f = (float) (levelX - (double) this.centerX) / (float) i;
+        float f1 = (float) (d1 - (double) this.centerZ) / (float) i;
+        byte b0 = (byte) ((int) ((double) (f * 2.0F) + 0.5D));
+        byte b1 = (byte) ((int) ((double) (f1 * 2.0F) + 0.5D));
+        boolean flag = true;
         byte b2;
+
         if (f >= -63.0F && f1 >= -63.0F && f <= 63.0F && f1 <= 63.0F) {
-            rotation += rotation < 0.0 ? -8.0 : 8.0;
-            b2 = (byte)((int)(rotation * 16.0 / 360.0));
+            levelZ += levelZ < 0.0D ? -8.0D : 8.0D;
+            b2 = (byte) ((int) (levelZ * 16.0D / 360.0D));
             if (this.dimension == Level.NETHER && level != null) {
-                int i2 = (int)(level.getLevelData().getDayTime() / 10L);
-                b2 = (byte)(i2 * i2 * 34187121 + i2 * 121 >> 15 & 15);
+                int j = (int) (level.getLevelData().getDayTime() / 10L);
+
+                b2 = (byte) (j * j * 34187121 + j * 121 >> 15 & 15);
             }
         } else {
             if (type != MapDecoration.Type.PLAYER) {
@@ -317,7 +356,8 @@
                 return;
             }
 
-            int i2 = 320;
+            boolean flag1 = true;
+
             if (Math.abs(f) < 320.0F && Math.abs(f1) < 320.0F) {
                 type = MapDecoration.Type.PLAYER_OFF_MAP;
             } else {
@@ -331,7 +371,7 @@
 
             b2 = 0;
             if (f <= -63.0F) {
-                b = -128;
+                b0 = -128;
             }
 
             if (f1 <= -63.0F) {
@@ -339,7 +379,7 @@
             }
 
             if (f >= 63.0F) {
-                b = 127;
+                b0 = 127;
             }
 
             if (f1 >= 63.0F) {
@@ -347,72 +387,82 @@
             }
         }
 
-        MapDecoration mapDecoration = new MapDecoration(type, b, b1, b2, name);
-        MapDecoration mapDecoration1 = this.decorations.put(decorationName, mapDecoration);
-        if (!mapDecoration.equals(mapDecoration1)) {
-            if (mapDecoration1 != null && mapDecoration1.type().shouldTrackCount()) {
-                this.trackedDecorationCount--;
+        MapDecoration mapicon = new MapDecoration(type, b0, b1, b2, ichatbasecomponent);
+        MapDecoration mapicon1 = (MapDecoration) this.decorations.put(decorationName, mapicon);
+
+        if (!mapicon.equals(mapicon1)) {
+            if (mapicon1 != null && mapicon1.type().shouldTrackCount()) {
+                --this.trackedDecorationCount;
             }
 
             if (type.shouldTrackCount()) {
-                this.trackedDecorationCount++;
+                ++this.trackedDecorationCount;
             }
 
             this.setDecorationsDirty();
         }
+
     }
 
     @Nullable
     public Packet<?> getUpdatePacket(int mapId, Player player) {
-        MapItemSavedData.HoldingPlayer holdingPlayer = this.carriedByPlayers.get(player);
-        return holdingPlayer == null ? null : holdingPlayer.nextUpdatePacket(mapId);
+        MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = (MapItemSavedData.HoldingPlayer) this.carriedByPlayers.get(player);
+
+        return worldmap_worldmaphumantracker == null ? null : worldmap_worldmaphumantracker.nextUpdatePacket(mapId);
     }
 
-    private void setColorsDirty(int x, int z) {
+    public void setColorsDirty(int x, int z) {
         this.setDirty();
+        Iterator iterator = this.carriedBy.iterator();
 
-        for (MapItemSavedData.HoldingPlayer holdingPlayer : this.carriedBy) {
-            holdingPlayer.markColorsDirty(x, z);
+        while (iterator.hasNext()) {
+            MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = (MapItemSavedData.HoldingPlayer) iterator.next();
+
+            worldmap_worldmaphumantracker.markColorsDirty(x, z);
         }
+
     }
 
-    private void setDecorationsDirty() {
+    public void setDecorationsDirty() {
         this.setDirty();
         this.carriedBy.forEach(MapItemSavedData.HoldingPlayer::markDecorationsDirty);
     }
 
     public MapItemSavedData.HoldingPlayer getHoldingPlayer(Player player) {
-        MapItemSavedData.HoldingPlayer holdingPlayer = this.carriedByPlayers.get(player);
-        if (holdingPlayer == null) {
-            holdingPlayer = new MapItemSavedData.HoldingPlayer(player);
-            this.carriedByPlayers.put(player, holdingPlayer);
-            this.carriedBy.add(holdingPlayer);
+        MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = (MapItemSavedData.HoldingPlayer) this.carriedByPlayers.get(player);
+
+        if (worldmap_worldmaphumantracker == null) {
+            worldmap_worldmaphumantracker = new MapItemSavedData.HoldingPlayer(player);
+            this.carriedByPlayers.put(player, worldmap_worldmaphumantracker);
+            this.carriedBy.add(worldmap_worldmaphumantracker);
         }
 
-        return holdingPlayer;
+        return worldmap_worldmaphumantracker;
     }
 
     public boolean toggleBanner(LevelAccessor accessor, BlockPos pos) {
-        double d = (double)pos.getX() + 0.5;
-        double d1 = (double)pos.getZ() + 0.5;
+        double d0 = (double) pos.getX() + 0.5D;
+        double d1 = (double) pos.getZ() + 0.5D;
         int i = 1 << this.scale;
-        double d2 = (d - (double)this.centerX) / (double)i;
-        double d3 = (d1 - (double)this.centerZ) / (double)i;
-        int i1 = 63;
-        if (d2 >= -63.0 && d3 >= -63.0 && d2 <= 63.0 && d3 <= 63.0) {
-            MapBanner mapBanner = MapBanner.fromWorld(accessor, pos);
-            if (mapBanner == null) {
+        double d2 = (d0 - (double) this.centerX) / (double) i;
+        double d3 = (d1 - (double) this.centerZ) / (double) i;
+        boolean flag = true;
+
+        if (d2 >= -63.0D && d3 >= -63.0D && d2 <= 63.0D && d3 <= 63.0D) {
+            MapBanner mapiconbanner = MapBanner.fromWorld(accessor, pos);
+
+            if (mapiconbanner == null) {
                 return false;
             }
 
-            if (this.bannerMarkers.remove(mapBanner.getId(), mapBanner)) {
-                this.removeDecoration(mapBanner.getId());
+            if (this.bannerMarkers.remove(mapiconbanner.getId(), mapiconbanner)) {
+                this.removeDecoration(mapiconbanner.getId());
                 return true;
             }
 
             if (!this.isTrackedCountOverLimit(256)) {
-                this.bannerMarkers.put(mapBanner.getId(), mapBanner);
-                this.addDecoration(mapBanner.getDecoration(), accessor, mapBanner.getId(), d, d1, 180.0, mapBanner.getName());
+                this.bannerMarkers.put(mapiconbanner.getId(), mapiconbanner);
+                this.addDecoration(mapiconbanner.getDecoration(), accessor, mapiconbanner.getId(), d0, d1, 180.0D, mapiconbanner.getName());
                 return true;
             }
         }
@@ -421,18 +471,21 @@
     }
 
     public void checkBanners(BlockGetter reader, int x, int z) {
-        Iterator<MapBanner> iterator = this.bannerMarkers.values().iterator();
+        Iterator iterator = this.bannerMarkers.values().iterator();
 
         while (iterator.hasNext()) {
-            MapBanner mapBanner = iterator.next();
-            if (mapBanner.getPos().getX() == x && mapBanner.getPos().getZ() == z) {
-                MapBanner mapBanner1 = MapBanner.fromWorld(reader, mapBanner.getPos());
-                if (!mapBanner.equals(mapBanner1)) {
+            MapBanner mapiconbanner = (MapBanner) iterator.next();
+
+            if (mapiconbanner.getPos().getX() == x && mapiconbanner.getPos().getZ() == z) {
+                MapBanner mapiconbanner1 = MapBanner.fromWorld(reader, mapiconbanner.getPos());
+
+                if (!mapiconbanner.equals(mapiconbanner1)) {
                     iterator.remove();
-                    this.removeDecoration(mapBanner.getId());
+                    this.removeDecoration(mapiconbanner.getId());
                 }
             }
         }
+
     }
 
     public Collection<MapBanner> getBanners() {
@@ -445,8 +498,9 @@
     }
 
     public boolean updateColor(int x, int z, byte color) {
-        byte b = this.colors[x + z * 128];
-        if (b != color) {
+        byte b1 = this.colors[x + z * 128];
+
+        if (b1 != color) {
             this.setColor(x, z, color);
             return true;
         } else {
@@ -460,26 +514,34 @@
     }
 
     public boolean isExplorationMap() {
-        for (MapDecoration mapDecoration : this.decorations.values()) {
-            if (mapDecoration.type().isExplorationMapElement()) {
-                return true;
+        Iterator iterator = this.decorations.values().iterator();
+
+        MapDecoration mapicon;
+
+        do {
+            if (!iterator.hasNext()) {
+                return false;
             }
-        }
 
-        return false;
+            mapicon = (MapDecoration) iterator.next();
+        } while (!mapicon.type().isExplorationMapElement());
+
+        return true;
     }
 
     public void addClientSideDecorations(List<MapDecoration> decorations) {
         this.decorations.clear();
         this.trackedDecorationCount = 0;
 
-        for (int i = 0; i < decorations.size(); i++) {
-            MapDecoration mapDecoration = decorations.get(i);
-            this.decorations.put("icon-" + i, mapDecoration);
-            if (mapDecoration.type().shouldTrackCount()) {
-                this.trackedDecorationCount++;
+        for (int i = 0; i < decorations.size(); ++i) {
+            MapDecoration mapicon = (MapDecoration) decorations.get(i);
+
+            this.decorations.put("icon-" + i, mapicon);
+            if (mapicon.type().shouldTrackCount()) {
+                ++this.trackedDecorationCount;
             }
         }
+
     }
 
     public Iterable<MapDecoration> getDecorations() {
@@ -491,6 +553,7 @@
     }
 
     public class HoldingPlayer {
+
         public final Player player;
         private boolean dirtyData = true;
         private int minDirtyX;
@@ -501,47 +564,57 @@
         private int tick;
         public int step;
 
-        HoldingPlayer(Player player) {
-            this.player = player;
+        HoldingPlayer(Player entityhuman) {
+            this.player = entityhuman;
         }
 
-        private MapItemSavedData.MapPatch createPatch() {
+        private MapItemSavedData.MapPatch createPatch(byte[] buffer) { // CraftBukkit
             int i = this.minDirtyX;
-            int i1 = this.minDirtyY;
-            int i2 = this.maxDirtyX + 1 - this.minDirtyX;
-            int i3 = this.maxDirtyY + 1 - this.minDirtyY;
-            byte[] bytes = new byte[i2 * i3];
+            int j = this.minDirtyY;
+            int k = this.maxDirtyX + 1 - this.minDirtyX;
+            int l = this.maxDirtyY + 1 - this.minDirtyY;
+            byte[] abyte = new byte[k * l];
 
-            for (int i4 = 0; i4 < i2; i4++) {
-                for (int i5 = 0; i5 < i3; i5++) {
-                    bytes[i4 + i5 * i2] = MapItemSavedData.this.colors[i + i4 + (i1 + i5) * 128];
+            for (int i1 = 0; i1 < k; ++i1) {
+                for (int j1 = 0; j1 < l; ++j1) {
+                    abyte[i1 + j1 * k] = buffer[i + i1 + (j + j1) * 128]; // CraftBukkit
                 }
             }
 
-            return new MapItemSavedData.MapPatch(i, i1, i2, i3, bytes);
+            return new MapItemSavedData.MapPatch(i, j, k, l, abyte);
         }
 
         @Nullable
         Packet<?> nextUpdatePacket(int mapId) {
-            MapItemSavedData.MapPatch mapPatch;
+            MapItemSavedData.MapPatch worldmap_b;
+            org.bukkit.craftbukkit.map.RenderData render = MapItemSavedData.this.mapView.render((org.bukkit.craftbukkit.entity.CraftPlayer) this.player.getBukkitEntity()); // CraftBukkit
+
             if (this.dirtyData) {
                 this.dirtyData = false;
-                mapPatch = this.createPatch();
+                worldmap_b = this.createPatch(render.buffer); // CraftBukkit
             } else {
-                mapPatch = null;
+                worldmap_b = null;
             }
 
-            Collection<MapDecoration> collection;
-            if (this.dirtyDecorations && this.tick++ % 5 == 0) {
+            Collection collection;
+
+            if ((true || this.dirtyDecorations) && this.tick++ % 5 == 0) { // CraftBukkit - custom maps don't update this yet
                 this.dirtyDecorations = false;
-                collection = MapItemSavedData.this.decorations.values();
+                // CraftBukkit start
+                java.util.Collection<MapDecoration> icons = new java.util.ArrayList<MapDecoration>();
+
+                for (org.bukkit.map.MapCursor cursor : render.cursors) {
+                    if (cursor.isVisible()) {
+                        icons.add(new MapDecoration(MapDecoration.Type.byIcon(cursor.getRawType()), cursor.getX(), cursor.getY(), cursor.getDirection(), CraftChatMessage.fromStringOrNull(cursor.getCaption())));
+                    }
+                }
+                collection = icons;
+                // CraftBukkit end
             } else {
                 collection = null;
             }
 
-            return collection == null && mapPatch == null
-                ? null
-                : new ClientboundMapItemDataPacket(mapId, MapItemSavedData.this.scale, MapItemSavedData.this.locked, collection, mapPatch);
+            return collection == null && worldmap_b == null ? null : new ClientboundMapItemDataPacket(mapId, MapItemSavedData.this.scale, MapItemSavedData.this.locked, collection, worldmap_b);
         }
 
         void markColorsDirty(int x, int z) {
@@ -557,6 +630,7 @@
                 this.maxDirtyX = x;
                 this.maxDirtyY = z;
             }
+
         }
 
         private void markDecorationsDirty() {
@@ -565,6 +639,7 @@
     }
 
     public static class MapPatch {
+
         public final int startX;
         public final int startY;
         public final int width;
@@ -580,11 +655,12 @@
         }
 
         public void applyToMap(MapItemSavedData savedData) {
-            for (int i = 0; i < this.width; i++) {
-                for (int i1 = 0; i1 < this.height; i1++) {
-                    savedData.setColor(this.startX + i, this.startY + i1, this.mapColors[i + i1 * this.width]);
+            for (int i = 0; i < this.width; ++i) {
+                for (int j = 0; j < this.height; ++j) {
+                    savedData.setColor(this.startX + i, this.startY + j, this.mapColors[i + j * this.width]);
                 }
             }
+
         }
     }
 }
