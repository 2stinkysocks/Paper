--- a/net/minecraft/world/level/LevelAccessor.java
+++ b/net/minecraft/world/level/LevelAccessor.java
@@ -13,7 +13,7 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.chunk.ChunkSource;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.Fluid;
@@ -25,6 +25,7 @@
 import net.minecraft.world.ticks.TickPriority;
 
 public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
+
     @Override
     default long dayTime() {
         return this.getLevelData().getDayTime();
@@ -34,12 +35,12 @@
 
     LevelTickAccess<Block> getBlockTicks();
 
-    private <T> ScheduledTick<T> createTick(BlockPos pos, T type, int delay, TickPriority priority) {
-        return new ScheduledTick<>(type, pos, this.getLevelData().getGameTime() + (long)delay, priority, this.nextSubTickCount());
+    default <T> ScheduledTick<T> createTick(BlockPos pos, T type, int delay, TickPriority priority) { // CraftBukkit - decompile error
+        return new ScheduledTick<>(type, pos, this.getLevelData().getGameTime() + (long) delay, priority, this.nextSubTickCount());
     }
 
-    private <T> ScheduledTick<T> createTick(BlockPos pos, T type, int delay) {
-        return new ScheduledTick<>(type, pos, this.getLevelData().getGameTime() + (long)delay, this.nextSubTickCount());
+    default <T> ScheduledTick<T> createTick(BlockPos pos, T type, int delay) { // CraftBukkit - decompile error
+        return new ScheduledTick<>(type, pos, this.getLevelData().getGameTime() + (long) delay, this.nextSubTickCount());
     }
 
     default void scheduleTick(BlockPos pos, Block block, int delay, TickPriority priority) {
@@ -80,10 +81,9 @@
 
     RandomSource getRandom();
 
-    default void blockUpdated(BlockPos pos, Block block) {
-    }
+    default void blockUpdated(BlockPos pos, Block block) {}
 
-    default void neighborShapeChanged(Direction direction, BlockState queried, BlockPos pos, BlockPos offsetPos, int flags, int recursionLevel) {
+    default void neighborShapeChanged(Direction direction, IBlockData queried, BlockPos pos, BlockPos offsetPos, int flags, int recursionLevel) {
         NeighborUpdater.executeShapeUpdate(this, direction, queried, pos, offsetPos, flags, recursionLevel - 1);
     }
 
@@ -93,25 +93,27 @@
 
     void playSound(@Nullable Player player, BlockPos pos, SoundEvent sound, SoundSource source, float volume, float pitch);
 
-    void addParticle(ParticleOptions particleData, double x, double d, double y, double d1, double z, double d2);
+    void addParticle(ParticleOptions particleData, double x, double d1, double y, double d3, double z, double d5);
 
     void levelEvent(@Nullable Player player, int type, BlockPos pos, int data);
 
     default void levelEvent(int type, BlockPos pos, int data) {
-        this.levelEvent(null, type, pos, data);
+        this.levelEvent((Player) null, type, pos, data);
     }
 
     void gameEvent(GameEvent event, Vec3 position, GameEvent.Context context);
 
     default void gameEvent(@Nullable Entity entity, GameEvent event, Vec3 position) {
-        this.gameEvent(event, position, new GameEvent.Context(entity, null));
+        this.gameEvent(event, position, new GameEvent.Context(entity, (IBlockData) null));
     }
 
     default void gameEvent(@Nullable Entity entity, GameEvent event, BlockPos pos) {
-        this.gameEvent(event, pos, new GameEvent.Context(entity, null));
+        this.gameEvent(event, pos, new GameEvent.Context(entity, (IBlockData) null));
     }
 
     default void gameEvent(GameEvent event, BlockPos pos, GameEvent.Context context) {
         this.gameEvent(event, Vec3.atCenterOf(pos), context);
     }
+
+    net.minecraft.server.level.ServerLevel getMinecraftWorld(); // CraftBukkit
 }
