--- a/net/minecraft/world/inventory/HorseInventoryMenu.java
+++ b/net/minecraft/world/inventory/HorseInventoryMenu.java
@@ -8,17 +8,40 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.inventory.InventoryView;
+// CraftBukkit end
+
 public class HorseInventoryMenu extends AbstractContainerMenu {
+
     private final Container horseContainer;
     private final AbstractHorse horse;
 
+    // CraftBukkit start
+    org.bukkit.craftbukkit.inventory.CraftInventoryView bukkitEntity;
+    Inventory player;
+
+    @Override
+    public InventoryView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        return bukkitEntity = new CraftInventoryView(player.player.getBukkitEntity(), horseContainer.getOwner().getInventory(), this);
+    }
+
     public HorseInventoryMenu(int containerId, Inventory playerInventory, Container container, final AbstractHorse horse) {
-        super(null, containerId);
+        super((MenuType) null, containerId);
+        player = playerInventory;
+        // CraftBukkit end
         this.horseContainer = container;
         this.horse = horse;
-        int i = 3;
+        boolean flag = true;
+
         container.startOpen(playerInventory.player);
-        int i1 = -18;
+        boolean flag1 = true;
+
         this.addSlot(new Slot(container, 0, 8, 18) {
             @Override
             public boolean mayPlace(ItemStack stack) {
@@ -46,83 +69,88 @@
                 return 1;
             }
         });
+        int j;
+        int k;
+
         if (this.hasChest(horse)) {
-            for (int i2 = 0; i2 < 3; i2++) {
-                for (int i3 = 0; i3 < ((AbstractChestedHorse)horse).getInventoryColumns(); i3++) {
-                    this.addSlot(new Slot(container, 2 + i3 + i2 * ((AbstractChestedHorse)horse).getInventoryColumns(), 80 + i3 * 18, 18 + i2 * 18));
+            for (j = 0; j < 3; ++j) {
+                for (k = 0; k < ((AbstractChestedHorse) horse).getInventoryColumns(); ++k) {
+                    this.addSlot(new Slot(container, 2 + k + j * ((AbstractChestedHorse) horse).getInventoryColumns(), 80 + k * 18, 18 + j * 18));
                 }
             }
         }
 
-        for (int i2 = 0; i2 < 3; i2++) {
-            for (int i3 = 0; i3 < 9; i3++) {
-                this.addSlot(new Slot(playerInventory, i3 + i2 * 9 + 9, 8 + i3 * 18, 102 + i2 * 18 + -18));
+        for (j = 0; j < 3; ++j) {
+            for (k = 0; k < 9; ++k) {
+                this.addSlot(new Slot(playerInventory, k + j * 9 + 9, 8 + k * 18, 102 + j * 18 + -18));
             }
         }
 
-        for (int i2 = 0; i2 < 9; i2++) {
-            this.addSlot(new Slot(playerInventory, i2, 8 + i2 * 18, 142));
+        for (j = 0; j < 9; ++j) {
+            this.addSlot(new Slot(playerInventory, j, 8 + j * 18, 142));
         }
+
     }
 
     @Override
     public boolean stillValid(Player player) {
-        return !this.horse.hasInventoryChanged(this.horseContainer)
-            && this.horseContainer.stillValid(player)
-            && this.horse.isAlive()
-            && this.horse.distanceTo(player) < 8.0F;
+        return !this.horse.hasInventoryChanged(this.horseContainer) && this.horseContainer.stillValid(player) && this.horse.isAlive() && this.horse.distanceTo(player) < 8.0F;
     }
 
     private boolean hasChest(AbstractHorse horse) {
-        return horse instanceof AbstractChestedHorse && ((AbstractChestedHorse)horse).hasChest();
+        return horse instanceof AbstractChestedHorse && ((AbstractChestedHorse) horse).hasChest();
     }
 
     @Override
     public ItemStack quickMoveStack(Player player, int index) {
-        ItemStack itemStack = ItemStack.EMPTY;
-        Slot slot = this.slots.get(index);
+        ItemStack itemstack = ItemStack.EMPTY;
+        Slot slot = (Slot) this.slots.get(index);
+
         if (slot != null && slot.hasItem()) {
-            ItemStack item = slot.getItem();
-            itemStack = item.copy();
-            int containerSize = this.horseContainer.getContainerSize();
-            if (index < containerSize) {
-                if (!this.moveItemStackTo(item, containerSize, this.slots.size(), true)) {
+            ItemStack itemstack1 = slot.getItem();
+
+            itemstack = itemstack1.copy();
+            int j = this.horseContainer.getContainerSize();
+
+            if (index < j) {
+                if (!this.moveItemStackTo(itemstack1, j, this.slots.size(), true)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (this.getSlot(1).mayPlace(item) && !this.getSlot(1).hasItem()) {
-                if (!this.moveItemStackTo(item, 1, 2, false)) {
+            } else if (this.getSlot(1).mayPlace(itemstack1) && !this.getSlot(1).hasItem()) {
+                if (!this.moveItemStackTo(itemstack1, 1, 2, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (this.getSlot(0).mayPlace(item)) {
-                if (!this.moveItemStackTo(item, 0, 1, false)) {
+            } else if (this.getSlot(0).mayPlace(itemstack1)) {
+                if (!this.moveItemStackTo(itemstack1, 0, 1, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (containerSize <= 2 || !this.moveItemStackTo(item, 2, containerSize, false)) {
-                int i1 = containerSize + 27;
-                int i3 = i1 + 9;
-                if (index >= i1 && index < i3) {
-                    if (!this.moveItemStackTo(item, containerSize, i1, false)) {
+            } else if (j <= 2 || !this.moveItemStackTo(itemstack1, 2, j, false)) {
+                int k = j + 27;
+                int l = k + 9;
+
+                if (index >= k && index < l) {
+                    if (!this.moveItemStackTo(itemstack1, j, k, false)) {
                         return ItemStack.EMPTY;
                     }
-                } else if (index >= containerSize && index < i1) {
-                    if (!this.moveItemStackTo(item, i1, i3, false)) {
+                } else if (index >= j && index < k) {
+                    if (!this.moveItemStackTo(itemstack1, k, l, false)) {
                         return ItemStack.EMPTY;
                     }
-                } else if (!this.moveItemStackTo(item, i1, i1, false)) {
+                } else if (!this.moveItemStackTo(itemstack1, k, k, false)) {
                     return ItemStack.EMPTY;
                 }
 
                 return ItemStack.EMPTY;
             }
 
-            if (item.isEmpty()) {
+            if (itemstack1.isEmpty()) {
                 slot.setByPlayer(ItemStack.EMPTY);
             } else {
                 slot.setChanged();
             }
         }
 
-        return itemStack;
+        return itemstack;
     }
 
     @Override
