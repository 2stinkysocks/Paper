--- a/net/minecraft/world/inventory/BeaconMenu.java
+++ b/net/minecraft/world/inventory/BeaconMenu.java
@@ -7,12 +7,16 @@
 import net.minecraft.world.Container;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.effect.MobEffect;
+import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+// CraftBukkit end
 
 public class BeaconMenu extends AbstractContainerMenu {
+
     private static final int PAYMENT_SLOT = 0;
     private static final int SLOT_COUNT = 1;
     private static final int DATA_COUNT = 3;
@@ -21,20 +25,14 @@
     private static final int USE_ROW_SLOT_START = 28;
     private static final int USE_ROW_SLOT_END = 37;
     private static final int NO_EFFECT = 0;
-    private final Container beacon = new SimpleContainer(1) {
-        @Override
-        public boolean canPlaceItem(int index, ItemStack stack) {
-            return stack.is(ItemTags.BEACON_PAYMENT_ITEMS);
-        }
-
-        @Override
-        public int getMaxStackSize() {
-            return 1;
-        }
-    };
+    private final Container beacon;
     private final BeaconMenu.PaymentSlot paymentSlot;
     private final ContainerLevelAccess access;
     private final ContainerData beaconData;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private Inventory player;
+    // CraftBukkit end
 
     public BeaconMenu(int containerId, Container container) {
         this(containerId, container, new SimpleContainerData(3), ContainerLevelAccess.NULL);
@@ -42,39 +40,57 @@
 
     public BeaconMenu(int containerId, Container container, ContainerData beaconData, ContainerLevelAccess access) {
         super(MenuType.BEACON, containerId);
+        player = (Inventory) container; // CraftBukkit - TODO: check this
+        this.beacon = new SimpleContainer(1) {
+            @Override
+            public boolean canPlaceItem(int index, ItemStack stack) {
+                return stack.is(ItemTags.BEACON_PAYMENT_ITEMS);
+            }
+
+            @Override
+            public int getMaxStackSize() {
+                return 1;
+            }
+        };
         checkContainerDataCount(beaconData, 3);
         this.beaconData = beaconData;
         this.access = access;
         this.paymentSlot = new BeaconMenu.PaymentSlot(this.beacon, 0, 136, 110);
         this.addSlot(this.paymentSlot);
         this.addDataSlots(beaconData);
-        int i = 36;
-        int i1 = 137;
+        boolean flag = true;
+        boolean flag1 = true;
 
-        for (int i2 = 0; i2 < 3; i2++) {
-            for (int i3 = 0; i3 < 9; i3++) {
-                this.addSlot(new Slot(container, i3 + i2 * 9 + 9, 36 + i3 * 18, 137 + i2 * 18));
+        int j;
+
+        for (j = 0; j < 3; ++j) {
+            for (int k = 0; k < 9; ++k) {
+                this.addSlot(new Slot(container, k + j * 9 + 9, 36 + k * 18, 137 + j * 18));
             }
         }
 
-        for (int i2 = 0; i2 < 9; i2++) {
-            this.addSlot(new Slot(container, i2, 36 + i2 * 18, 195));
+        for (j = 0; j < 9; ++j) {
+            this.addSlot(new Slot(container, j, 36 + j * 18, 195));
         }
+
     }
 
     @Override
     public void removed(Player player) {
         super.removed(player);
         if (!player.level().isClientSide) {
-            ItemStack itemStack = this.paymentSlot.remove(this.paymentSlot.getMaxStackSize());
-            if (!itemStack.isEmpty()) {
-                player.drop(itemStack, false);
+            ItemStack itemstack = this.paymentSlot.remove(this.paymentSlot.getMaxStackSize());
+
+            if (!itemstack.isEmpty()) {
+                player.drop(itemstack, false);
             }
+
         }
     }
 
     @Override
     public boolean stillValid(Player player) {
+        if (!this.checkReachable) return true; // CraftBukkit
         return stillValid(this.access, player, Blocks.BEACON);
     }
 
@@ -86,60 +102,62 @@
 
     @Override
     public ItemStack quickMoveStack(Player player, int index) {
-        ItemStack itemStack = ItemStack.EMPTY;
-        Slot slot = this.slots.get(index);
+        ItemStack itemstack = ItemStack.EMPTY;
+        Slot slot = (Slot) this.slots.get(index);
+
         if (slot != null && slot.hasItem()) {
-            ItemStack item = slot.getItem();
-            itemStack = item.copy();
+            ItemStack itemstack1 = slot.getItem();
+
+            itemstack = itemstack1.copy();
             if (index == 0) {
-                if (!this.moveItemStackTo(item, 1, 37, true)) {
+                if (!this.moveItemStackTo(itemstack1, 1, 37, true)) {
                     return ItemStack.EMPTY;
                 }
 
-                slot.onQuickCraft(item, itemStack);
-            } else if (!this.paymentSlot.hasItem() && this.paymentSlot.mayPlace(item) && item.getCount() == 1) {
-                if (!this.moveItemStackTo(item, 0, 1, false)) {
+                slot.onQuickCraft(itemstack1, itemstack);
+            } else if (!this.paymentSlot.hasItem() && this.paymentSlot.mayPlace(itemstack1) && itemstack1.getCount() == 1) {
+                if (!this.moveItemStackTo(itemstack1, 0, 1, false)) {
                     return ItemStack.EMPTY;
                 }
             } else if (index >= 1 && index < 28) {
-                if (!this.moveItemStackTo(item, 28, 37, false)) {
+                if (!this.moveItemStackTo(itemstack1, 28, 37, false)) {
                     return ItemStack.EMPTY;
                 }
             } else if (index >= 28 && index < 37) {
-                if (!this.moveItemStackTo(item, 1, 28, false)) {
+                if (!this.moveItemStackTo(itemstack1, 1, 28, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (!this.moveItemStackTo(item, 1, 37, false)) {
+            } else if (!this.moveItemStackTo(itemstack1, 1, 37, false)) {
                 return ItemStack.EMPTY;
             }
 
-            if (item.isEmpty()) {
+            if (itemstack1.isEmpty()) {
                 slot.setByPlayer(ItemStack.EMPTY);
             } else {
                 slot.setChanged();
             }
 
-            if (item.getCount() == itemStack.getCount()) {
+            if (itemstack1.getCount() == itemstack.getCount()) {
                 return ItemStack.EMPTY;
             }
 
-            slot.onTake(player, item);
+            slot.onTake(player, itemstack1);
         }
 
-        return itemStack;
+        return itemstack;
     }
 
     public int getLevels() {
         return this.beaconData.get(0);
     }
 
-    public static int encodeEffect(@Nullable MobEffect mobEffect) {
-        return mobEffect == null ? 0 : BuiltInRegistries.MOB_EFFECT.getId(mobEffect) + 1;
+    public static int encodeEffect(@Nullable MobEffect mobeffectlist) {
+        return mobeffectlist == null ? 0 : BuiltInRegistries.MOB_EFFECT.getId(mobeffectlist) + 1;
     }
 
     @Nullable
     public static MobEffect decodeEffect(int i) {
-        return i == 0 ? null : BuiltInRegistries.MOB_EFFECT.byId(i - 1);
+        return i == 0 ? null : (MobEffect) BuiltInRegistries.MOB_EFFECT.byId(i - 1);
     }
 
     @Nullable
@@ -154,20 +172,22 @@
 
     public void updateEffects(Optional<MobEffect> primaryEffect, Optional<MobEffect> secondaryEffect) {
         if (this.paymentSlot.hasItem()) {
-            this.beaconData.set(1, encodeEffect(primaryEffect.orElse(null)));
-            this.beaconData.set(2, encodeEffect(secondaryEffect.orElse(null)));
+            this.beaconData.set(1, encodeEffect((MobEffect) primaryEffect.orElse(null))); // CraftBukkit - decompile error
+            this.beaconData.set(2, encodeEffect((MobEffect) secondaryEffect.orElse(null))); // CraftBukkit - decompile error
             this.paymentSlot.remove(1);
             this.access.execute(Level::blockEntityChanged);
         }
+
     }
 
     public boolean hasPayment() {
         return !this.beacon.getItem(0).isEmpty();
     }
 
-    class PaymentSlot extends Slot {
-        public PaymentSlot(Container container, int containerIndex, int xPosition, int yPosition) {
-            super(container, containerIndex, xPosition, yPosition);
+    private class PaymentSlot extends Slot {
+
+        public PaymentSlot(Container container, int slot, int x, int y) {
+            super(container, slot, x, y);
         }
 
         @Override
@@ -180,4 +200,17 @@
             return 1;
         }
     }
+
+    // CraftBukkit start
+    @Override
+    public CraftInventoryView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        org.bukkit.craftbukkit.inventory.CraftInventory inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryBeacon(this.beacon);
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
