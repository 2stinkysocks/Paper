--- a/net/minecraft/world/inventory/InventoryMenu.java
+++ b/net/minecraft/world/inventory/InventoryMenu.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.inventory;
 
 import com.mojang.datafixers.util.Pair;
+import net.minecraft.network.chat.Component;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.Container;
 import net.minecraft.world.entity.EquipmentSlot;
@@ -12,8 +13,12 @@
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+// CraftBukkit end
 
-public class InventoryMenu extends RecipeBookMenu<CraftingContainer> {
+public class InventoryMenu extends RecipeBookMenu<InventoryCrafting> {
+
     public static final int CONTAINER_ID = 0;
     public static final int RESULT_SLOT = 0;
     public static final int CRAFT_SLOT_START = 1;
@@ -31,34 +36,49 @@
     public static final ResourceLocation EMPTY_ARMOR_SLOT_LEGGINGS = new ResourceLocation("item/empty_armor_slot_leggings");
     public static final ResourceLocation EMPTY_ARMOR_SLOT_BOOTS = new ResourceLocation("item/empty_armor_slot_boots");
     public static final ResourceLocation EMPTY_ARMOR_SLOT_SHIELD = new ResourceLocation("item/empty_armor_slot_shield");
-    static final ResourceLocation[] TEXTURE_EMPTY_SLOTS = new ResourceLocation[]{
-        EMPTY_ARMOR_SLOT_BOOTS, EMPTY_ARMOR_SLOT_LEGGINGS, EMPTY_ARMOR_SLOT_CHESTPLATE, EMPTY_ARMOR_SLOT_HELMET
-    };
+    static final ResourceLocation[] TEXTURE_EMPTY_SLOTS = new ResourceLocation[]{InventoryMenu.EMPTY_ARMOR_SLOT_BOOTS, InventoryMenu.EMPTY_ARMOR_SLOT_LEGGINGS, InventoryMenu.EMPTY_ARMOR_SLOT_CHESTPLATE, InventoryMenu.EMPTY_ARMOR_SLOT_HELMET};
     private static final EquipmentSlot[] SLOT_IDS = new EquipmentSlot[]{EquipmentSlot.HEAD, EquipmentSlot.CHEST, EquipmentSlot.LEGS, EquipmentSlot.FEET};
-    private final CraftingContainer craftSlots = new TransientCraftingContainer(this, 2, 2);
-    private final ResultContainer resultSlots = new ResultContainer();
+    // CraftBukkit start
+    private final TransientCraftingContainer craftSlots;
+    private final ResultContainer resultSlots;
+    // CraftBukkit end
     public final boolean active;
     private final Player owner;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private Inventory player;
+    // CraftBukkit end
 
     public InventoryMenu(Inventory playerInventory, boolean active, final Player owner) {
-        super(null, 0);
+        super((MenuType) null, 0);
         this.active = active;
         this.owner = owner;
+        // CraftBukkit start
+        this.resultSlots = new ResultContainer(); // CraftBukkit - moved to before InventoryCrafting construction
+        this.craftSlots = new TransientCraftingContainer(this, 2, 2, playerInventory.player); // CraftBukkit - pass player
+        this.craftSlots.resultInventory = this.resultSlots; // CraftBukkit - let InventoryCrafting know about its result slot
+        this.player = playerInventory; // CraftBukkit - save player
+        setTitle(Component.translatable("container.crafting")); // SPIGOT-4722: Allocate title for player inventory
+        // CraftBukkit end
         this.addSlot(new ResultSlot(playerInventory.player, this.craftSlots, this.resultSlots, 0, 154, 28));
 
-        for (int i = 0; i < 2; i++) {
-            for (int i1 = 0; i1 < 2; i1++) {
-                this.addSlot(new Slot(this.craftSlots, i1 + i * 2, 98 + i1 * 18, 18 + i * 18));
+        int i;
+        int j;
+
+        for (i = 0; i < 2; ++i) {
+            for (j = 0; j < 2; ++j) {
+                this.addSlot(new Slot(this.craftSlots, j + i * 2, 98 + j * 18, 18 + i * 18));
             }
         }
 
-        for (int i = 0; i < 4; i++) {
-            final EquipmentSlot equipmentSlot = SLOT_IDS[i];
+        for (i = 0; i < 4; ++i) {
+            final EquipmentSlot enumitemslot = InventoryMenu.SLOT_IDS[i];
+
             this.addSlot(new Slot(playerInventory, 39 - i, 8, 8 + i * 18) {
                 @Override
-                public void setByPlayer(ItemStack itemStack, ItemStack itemStack1) {
-                    InventoryMenu.onEquipItem(owner, equipmentSlot, itemStack, itemStack1);
-                    super.setByPlayer(itemStack, itemStack1);
+                public void setByPlayer(ItemStack itemstack, ItemStack itemstack1) {
+                    InventoryMenu.onEquipItem(owner, enumitemslot, itemstack, itemstack1);
+                    super.setByPlayer(itemstack, itemstack1);
                 }
 
                 @Override
@@ -68,37 +88,38 @@
 
                 @Override
                 public boolean mayPlace(ItemStack stack) {
-                    return equipmentSlot == Mob.getEquipmentSlotForItem(stack);
+                    return enumitemslot == Mob.getEquipmentSlotForItem(stack);
                 }
 
                 @Override
                 public boolean mayPickup(Player player) {
-                    ItemStack item = this.getItem();
-                    return (item.isEmpty() || player.isCreative() || !EnchantmentHelper.hasBindingCurse(item)) && super.mayPickup(player);
+                    ItemStack itemstack = this.getItem();
+
+                    return !itemstack.isEmpty() && !player.isCreative() && EnchantmentHelper.hasBindingCurse(itemstack) ? false : super.mayPickup(player);
                 }
 
                 @Override
                 public Pair<ResourceLocation, ResourceLocation> getNoItemIcon() {
-                    return Pair.of(InventoryMenu.BLOCK_ATLAS, InventoryMenu.TEXTURE_EMPTY_SLOTS[equipmentSlot.getIndex()]);
+                    return Pair.of(InventoryMenu.BLOCK_ATLAS, InventoryMenu.TEXTURE_EMPTY_SLOTS[enumitemslot.getIndex()]);
                 }
             });
         }
 
-        for (int i = 0; i < 3; i++) {
-            for (int i1 = 0; i1 < 9; i1++) {
-                this.addSlot(new Slot(playerInventory, i1 + (i + 1) * 9, 8 + i1 * 18, 84 + i * 18));
+        for (i = 0; i < 3; ++i) {
+            for (j = 0; j < 9; ++j) {
+                this.addSlot(new Slot(playerInventory, j + (i + 1) * 9, 8 + j * 18, 84 + i * 18));
             }
         }
 
-        for (int i = 0; i < 9; i++) {
+        for (i = 0; i < 9; ++i) {
             this.addSlot(new Slot(playerInventory, i, 8 + i * 18, 142));
         }
 
         this.addSlot(new Slot(playerInventory, 40, 77, 62) {
             @Override
-            public void setByPlayer(ItemStack itemStack, ItemStack itemStack1) {
-                InventoryMenu.onEquipItem(owner, EquipmentSlot.OFFHAND, itemStack, itemStack1);
-                super.setByPlayer(itemStack, itemStack1);
+            public void setByPlayer(ItemStack itemstack, ItemStack itemstack1) {
+                InventoryMenu.onEquipItem(owner, EquipmentSlot.OFFHAND, itemstack, itemstack1);
+                super.setByPlayer(itemstack, itemstack1);
             }
 
             @Override
@@ -128,8 +149,8 @@
     }
 
     @Override
-    public boolean recipeMatches(RecipeHolder<? extends Recipe<CraftingContainer>> recipeHolder) {
-        return recipeHolder.value().matches(this.craftSlots, this.owner.level());
+    public boolean recipeMatches(RecipeHolder<? extends Recipe<InventoryCrafting>> recipeholder) {
+        return recipeholder.value().matches(this.craftSlots, this.owner.level());
     }
 
     @Override
@@ -153,64 +174,68 @@
 
     @Override
     public ItemStack quickMoveStack(Player player, int index) {
-        ItemStack itemStack = ItemStack.EMPTY;
-        Slot slot = this.slots.get(index);
+        ItemStack itemstack = ItemStack.EMPTY;
+        Slot slot = (Slot) this.slots.get(index);
+
         if (slot.hasItem()) {
-            ItemStack item = slot.getItem();
-            itemStack = item.copy();
-            EquipmentSlot equipmentSlotForItem = Mob.getEquipmentSlotForItem(itemStack);
+            ItemStack itemstack1 = slot.getItem();
+
+            itemstack = itemstack1.copy();
+            EquipmentSlot enumitemslot = Mob.getEquipmentSlotForItem(itemstack);
+
             if (index == 0) {
-                if (!this.moveItemStackTo(item, 9, 45, true)) {
+                if (!this.moveItemStackTo(itemstack1, 9, 45, true)) {
                     return ItemStack.EMPTY;
                 }
 
-                slot.onQuickCraft(item, itemStack);
+                slot.onQuickCraft(itemstack1, itemstack);
             } else if (index >= 1 && index < 5) {
-                if (!this.moveItemStackTo(item, 9, 45, false)) {
+                if (!this.moveItemStackTo(itemstack1, 9, 45, false)) {
                     return ItemStack.EMPTY;
                 }
             } else if (index >= 5 && index < 9) {
-                if (!this.moveItemStackTo(item, 9, 45, false)) {
+                if (!this.moveItemStackTo(itemstack1, 9, 45, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (equipmentSlotForItem.getType() == EquipmentSlot.Type.ARMOR && !this.slots.get(8 - equipmentSlotForItem.getIndex()).hasItem()) {
-                int i = 8 - equipmentSlotForItem.getIndex();
-                if (!this.moveItemStackTo(item, i, i + 1, false)) {
+            } else if (enumitemslot.getType() == EquipmentSlot.Function.ARMOR && !((Slot) this.slots.get(8 - enumitemslot.getIndex())).hasItem()) {
+                int j = 8 - enumitemslot.getIndex();
+
+                if (!this.moveItemStackTo(itemstack1, j, j + 1, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (equipmentSlotForItem == EquipmentSlot.OFFHAND && !this.slots.get(45).hasItem()) {
-                if (!this.moveItemStackTo(item, 45, 46, false)) {
+            } else if (enumitemslot == EquipmentSlot.OFFHAND && !((Slot) this.slots.get(45)).hasItem()) {
+                if (!this.moveItemStackTo(itemstack1, 45, 46, false)) {
                     return ItemStack.EMPTY;
                 }
             } else if (index >= 9 && index < 36) {
-                if (!this.moveItemStackTo(item, 36, 45, false)) {
+                if (!this.moveItemStackTo(itemstack1, 36, 45, false)) {
                     return ItemStack.EMPTY;
                 }
             } else if (index >= 36 && index < 45) {
-                if (!this.moveItemStackTo(item, 9, 36, false)) {
+                if (!this.moveItemStackTo(itemstack1, 9, 36, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (!this.moveItemStackTo(item, 9, 45, false)) {
+            } else if (!this.moveItemStackTo(itemstack1, 9, 45, false)) {
                 return ItemStack.EMPTY;
             }
 
-            if (item.isEmpty()) {
-                slot.setByPlayer(ItemStack.EMPTY, itemStack);
+            if (itemstack1.isEmpty()) {
+                slot.setByPlayer(ItemStack.EMPTY, itemstack);
             } else {
                 slot.setChanged();
             }
 
-            if (item.getCount() == itemStack.getCount()) {
+            if (itemstack1.getCount() == itemstack.getCount()) {
                 return ItemStack.EMPTY;
             }
 
-            slot.onTake(player, item);
+            slot.onTake(player, itemstack1);
             if (index == 0) {
-                player.drop(item, false);
+                player.drop(itemstack1, false);
             }
         }
 
-        return itemStack;
+        return itemstack;
     }
 
     @Override
@@ -238,7 +263,7 @@
         return 5;
     }
 
-    public CraftingContainer getCraftSlots() {
+    public InventoryCrafting getCraftSlots() {
         return this.craftSlots;
     }
 
@@ -251,4 +276,17 @@
     public boolean shouldMoveToInventory(int slotIndex) {
         return slotIndex != this.getResultSlotIndex();
     }
+
+    // CraftBukkit start
+    @Override
+    public CraftInventoryView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftSlots, this.resultSlots);
+        bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
