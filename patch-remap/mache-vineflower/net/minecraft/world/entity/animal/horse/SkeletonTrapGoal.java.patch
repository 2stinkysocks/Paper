--- a/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
+++ b/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
@@ -1,12 +1,14 @@
 package net.minecraft.world.entity.animal.horse;
 
 import javax.annotation.Nullable;
+import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LightningBolt;
-import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.monster.Skeleton;
 import net.minecraft.world.item.ItemStack;
@@ -14,6 +16,7 @@
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 
 public class SkeletonTrapGoal extends Goal {
+
     private final SkeletonHorse horse;
 
     public SkeletonTrapGoal(SkeletonHorse horse) {
@@ -22,89 +25,81 @@
 
     @Override
     public boolean canUse() {
-        return this.horse.level().hasNearbyAlivePlayer(this.horse.getX(), this.horse.getY(), this.horse.getZ(), 10.0);
+        return this.horse.level().hasNearbyAlivePlayer(this.horse.getX(), this.horse.getY(), this.horse.getZ(), 10.0D);
     }
 
     @Override
     public void tick() {
-        ServerLevel serverLevel = (ServerLevel)this.horse.level();
-        DifficultyInstance currentDifficultyAt = serverLevel.getCurrentDifficultyAt(this.horse.blockPosition());
+        ServerLevel worldserver = (ServerLevel) this.horse.level();
+        DifficultyInstance difficultydamagescaler = worldserver.getCurrentDifficultyAt(this.horse.blockPosition());
+
         this.horse.setTrap(false);
         this.horse.setTamed(true);
         this.horse.setAge(0);
-        LightningBolt lightningBolt = EntityType.LIGHTNING_BOLT.create(serverLevel);
-        if (lightningBolt != null) {
-            lightningBolt.moveTo(this.horse.getX(), this.horse.getY(), this.horse.getZ());
-            lightningBolt.setVisualOnly(true);
-            serverLevel.addFreshEntity(lightningBolt);
-            Skeleton skeleton = this.createSkeleton(currentDifficultyAt, this.horse);
-            if (skeleton != null) {
-                skeleton.startRiding(this.horse);
-                serverLevel.addFreshEntityWithPassengers(skeleton);
+        LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(worldserver);
 
-                for (int i = 0; i < 3; i++) {
-                    AbstractHorse abstractHorse = this.createHorse(currentDifficultyAt);
-                    if (abstractHorse != null) {
-                        Skeleton skeleton1 = this.createSkeleton(currentDifficultyAt, abstractHorse);
-                        if (skeleton1 != null) {
-                            skeleton1.startRiding(abstractHorse);
-                            abstractHorse.push(this.horse.getRandom().triangle(0.0, 1.1485), 0.0, this.horse.getRandom().triangle(0.0, 1.1485));
-                            serverLevel.addFreshEntityWithPassengers(abstractHorse);
+        if (entitylightning != null) {
+            entitylightning.moveTo(this.horse.getX(), this.horse.getY(), this.horse.getZ());
+            entitylightning.setVisualOnly(true);
+            worldserver.strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.TRAP); // CraftBukkit
+            Skeleton entityskeleton = this.createSkeleton(difficultydamagescaler, this.horse);
+
+            if (entityskeleton != null) {
+                entityskeleton.startRiding(this.horse);
+                worldserver.addFreshEntityWithPassengers(entityskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.TRAP); // CraftBukkit
+
+                for (int i = 0; i < 3; ++i) {
+                    AbstractHorse entityhorseabstract = this.createHorse(difficultydamagescaler);
+
+                    if (entityhorseabstract != null) {
+                        Skeleton entityskeleton1 = this.createSkeleton(difficultydamagescaler, entityhorseabstract);
+
+                        if (entityskeleton1 != null) {
+                            entityskeleton1.startRiding(entityhorseabstract);
+                            entityhorseabstract.push(this.horse.getRandom().triangle(0.0D, 1.1485D), 0.0D, this.horse.getRandom().triangle(0.0D, 1.1485D));
+                            worldserver.addFreshEntityWithPassengers(entityhorseabstract, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.JOCKEY); // CraftBukkit
                         }
                     }
                 }
+
             }
         }
     }
 
     @Nullable
     private AbstractHorse createHorse(DifficultyInstance difficulty) {
-        SkeletonHorse skeletonHorse = EntityType.SKELETON_HORSE.create(this.horse.level());
-        if (skeletonHorse != null) {
-            skeletonHorse.finalizeSpawn((ServerLevel)this.horse.level(), difficulty, MobSpawnType.TRIGGERED, null, null);
-            skeletonHorse.setPos(this.horse.getX(), this.horse.getY(), this.horse.getZ());
-            skeletonHorse.invulnerableTime = 60;
-            skeletonHorse.setPersistenceRequired();
-            skeletonHorse.setTamed(true);
-            skeletonHorse.setAge(0);
+        SkeletonHorse entityhorseskeleton = (SkeletonHorse) EntityType.SKELETON_HORSE.create(this.horse.level());
+
+        if (entityhorseskeleton != null) {
+            entityhorseskeleton.finalizeSpawn((ServerLevel) this.horse.level(), difficulty, EnumMobSpawn.TRIGGERED, (GroupDataEntity) null, (CompoundTag) null);
+            entityhorseskeleton.setPos(this.horse.getX(), this.horse.getY(), this.horse.getZ());
+            entityhorseskeleton.invulnerableTime = 60;
+            entityhorseskeleton.setPersistenceRequired();
+            entityhorseskeleton.setTamed(true);
+            entityhorseskeleton.setAge(0);
         }
 
-        return skeletonHorse;
+        return entityhorseskeleton;
     }
 
     @Nullable
     private Skeleton createSkeleton(DifficultyInstance difficulty, AbstractHorse horse) {
-        Skeleton skeleton = EntityType.SKELETON.create(horse.level());
-        if (skeleton != null) {
-            skeleton.finalizeSpawn((ServerLevel)horse.level(), difficulty, MobSpawnType.TRIGGERED, null, null);
-            skeleton.setPos(horse.getX(), horse.getY(), horse.getZ());
-            skeleton.invulnerableTime = 60;
-            skeleton.setPersistenceRequired();
-            if (skeleton.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
-                skeleton.setItemSlot(EquipmentSlot.HEAD, new ItemStack(Items.IRON_HELMET));
+        Skeleton entityskeleton = (Skeleton) EntityType.SKELETON.create(horse.level());
+
+        if (entityskeleton != null) {
+            entityskeleton.finalizeSpawn((ServerLevel) horse.level(), difficulty, EnumMobSpawn.TRIGGERED, (GroupDataEntity) null, (CompoundTag) null);
+            entityskeleton.setPos(horse.getX(), horse.getY(), horse.getZ());
+            entityskeleton.invulnerableTime = 60;
+            entityskeleton.setPersistenceRequired();
+            if (entityskeleton.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+                entityskeleton.setItemSlot(EquipmentSlot.HEAD, new ItemStack(Items.IRON_HELMET));
             }
 
-            skeleton.setItemSlot(
-                EquipmentSlot.MAINHAND,
-                EnchantmentHelper.enchantItem(
-                    skeleton.getRandom(),
-                    this.disenchant(skeleton.getMainHandItem()),
-                    (int)(5.0F + difficulty.getSpecialMultiplier() * (float)skeleton.getRandom().nextInt(18)),
-                    false
-                )
-            );
-            skeleton.setItemSlot(
-                EquipmentSlot.HEAD,
-                EnchantmentHelper.enchantItem(
-                    skeleton.getRandom(),
-                    this.disenchant(skeleton.getItemBySlot(EquipmentSlot.HEAD)),
-                    (int)(5.0F + difficulty.getSpecialMultiplier() * (float)skeleton.getRandom().nextInt(18)),
-                    false
-                )
-            );
+            entityskeleton.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getMainHandItem()), (int) (5.0F + difficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false));
+            entityskeleton.setItemSlot(EquipmentSlot.HEAD, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getItemBySlot(EquipmentSlot.HEAD)), (int) (5.0F + difficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false));
         }
 
-        return skeleton;
+        return entityskeleton;
     }
 
     private ItemStack disenchant(ItemStack stack) {
