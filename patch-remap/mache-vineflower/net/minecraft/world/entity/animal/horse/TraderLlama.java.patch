--- a/net/minecraft/world/entity/animal/horse/TraderLlama.java
+++ b/net/minecraft/world/entity/animal/horse/TraderLlama.java
@@ -7,9 +7,9 @@
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.PanicGoal;
 import net.minecraft.world.entity.ai.goal.target.TargetGoal;
@@ -20,6 +20,7 @@
 import net.minecraft.world.level.ServerLevelAccessor;
 
 public class TraderLlama extends Llama {
+
     private int despawnDelay = 47999;
 
     public TraderLlama(EntityType<? extends TraderLlama> entityType, Level level) {
@@ -34,7 +35,7 @@
     @Nullable
     @Override
     protected Llama makeNewLlama() {
-        return EntityType.TRADER_LLAMA.create(this.level());
+        return (Llama) EntityType.TRADER_LLAMA.create(this.level());
     }
 
     @Override
@@ -49,12 +50,13 @@
         if (compound.contains("DespawnDelay", 99)) {
             this.despawnDelay = compound.getInt("DespawnDelay");
         }
+
     }
 
     @Override
     protected void registerGoals() {
         super.registerGoals();
-        this.goalSelector.addGoal(1, new PanicGoal(this, 2.0));
+        this.goalSelector.addGoal(1, new PanicGoal(this, 2.0D));
         this.targetSelector.addGoal(1, new TraderLlama.TraderLlamaDefendWanderingTraderGoal(this));
     }
 
@@ -64,8 +66,9 @@
 
     @Override
     protected void doPlayerRide(Player player) {
-        Entity leashHolder = this.getLeashHolder();
-        if (!(leashHolder instanceof WanderingTrader)) {
+        Entity entity = this.getLeashHolder();
+
+        if (!(entity instanceof WanderingTrader)) {
             super.doPlayerRide(player);
         }
     }
@@ -76,15 +79,17 @@
         if (!this.level().isClientSide) {
             this.maybeDespawn();
         }
+
     }
 
     private void maybeDespawn() {
         if (this.canDespawn()) {
-            this.despawnDelay = this.isLeashedToWanderingTrader() ? ((WanderingTrader)this.getLeashHolder()).getDespawnDelay() - 1 : this.despawnDelay - 1;
+            this.despawnDelay = this.isLeashedToWanderingTrader() ? ((WanderingTrader) this.getLeashHolder()).getDespawnDelay() - 1 : this.despawnDelay - 1;
             if (this.despawnDelay <= 0) {
                 this.dropLeash(true, false);
                 this.discard();
             }
+
         }
     }
 
@@ -102,10 +107,8 @@
 
     @Nullable
     @Override
-    public SpawnGroupData finalizeSpawn(
-        ServerLevelAccessor level, DifficultyInstance difficulty, MobSpawnType reason, @Nullable SpawnGroupData spawnData, @Nullable CompoundTag dataTag
-    ) {
-        if (reason == MobSpawnType.EVENT) {
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
+        if (reason == EnumMobSpawn.EVENT) {
             this.setAge(0);
         }
 
@@ -113,10 +116,11 @@
             spawnData = new AgeableMob.AgeableMobGroupData(false);
         }
 
-        return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
+        return super.finalizeSpawn(level, difficulty, reason, (GroupDataEntity) spawnData, dataTag);
     }
 
     protected static class TraderLlamaDefendWanderingTraderGoal extends TargetGoal {
+
         private final Llama llama;
         private LivingEntity ownerLastHurtBy;
         private int timestamp;
@@ -124,28 +128,36 @@
         public TraderLlamaDefendWanderingTraderGoal(Llama llama) {
             super(llama, false);
             this.llama = llama;
-            this.setFlags(EnumSet.of(Goal.Flag.TARGET));
+            this.setFlags(EnumSet.of(Goal.Type.TARGET));
         }
 
         @Override
         public boolean canUse() {
             if (!this.llama.isLeashed()) {
                 return false;
-            } else if (!(this.llama.getLeashHolder() instanceof WanderingTrader wanderingTrader)) {
-                return false;
             } else {
-                this.ownerLastHurtBy = wanderingTrader.getLastHurtByMob();
-                int lastHurtByMobTimestamp = wanderingTrader.getLastHurtByMobTimestamp();
-                return lastHurtByMobTimestamp != this.timestamp && this.canAttack(this.ownerLastHurtBy, TargetingConditions.DEFAULT);
+                Entity entity = this.llama.getLeashHolder();
+
+                if (!(entity instanceof WanderingTrader)) {
+                    return false;
+                } else {
+                    WanderingTrader entityvillagertrader = (WanderingTrader) entity;
+
+                    this.ownerLastHurtBy = entityvillagertrader.getLastHurtByMob();
+                    int i = entityvillagertrader.getLastHurtByMobTimestamp();
+
+                    return i != this.timestamp && this.canAttack(this.ownerLastHurtBy, TargetingConditions.DEFAULT);
+                }
             }
         }
 
         @Override
         public void start() {
-            this.mob.setTarget(this.ownerLastHurtBy);
-            Entity leashHolder = this.llama.getLeashHolder();
-            if (leashHolder instanceof WanderingTrader) {
-                this.timestamp = ((WanderingTrader)leashHolder).getLastHurtByMobTimestamp();
+            this.mob.setTarget(this.ownerLastHurtBy, org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_ATTACKED_OWNER, true); // CraftBukkit
+            Entity entity = this.llama.getLeashHolder();
+
+            if (entity instanceof WanderingTrader) {
+                this.timestamp = ((WanderingTrader) entity).getLastHurtByMobTimestamp();
             }
 
             super.start();
