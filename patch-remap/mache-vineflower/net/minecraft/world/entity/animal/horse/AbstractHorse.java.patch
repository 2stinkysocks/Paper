--- a/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -1,5 +1,7 @@
 package net.minecraft.world.entity.animal.horse;
 
+import com.google.common.collect.UnmodifiableIterator;
+import java.util.Iterator;
 import java.util.UUID;
 import java.util.function.DoubleSupplier;
 import java.util.function.IntUnaryOperator;
@@ -8,8 +10,8 @@
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.core.particles.SimpleParticleType;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
@@ -25,26 +27,26 @@
 import net.minecraft.world.Container;
 import net.minecraft.world.ContainerListener;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.HasCustomInventoryScreen;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.OwnableEntity;
 import net.minecraft.world.entity.PlayerRideableJumping;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.Saddleable;
 import net.minecraft.world.entity.SlotAccess;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -70,35 +72,49 @@
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.SoundType;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import org.joml.Vector3f;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+// CraftBukkit end
+
 public abstract class AbstractHorse extends Animal implements ContainerListener, HasCustomInventoryScreen, OwnableEntity, PlayerRideableJumping, Saddleable {
+
     public static final int EQUIPMENT_SLOT_OFFSET = 400;
     public static final int CHEST_SLOT_OFFSET = 499;
     public static final int INVENTORY_SLOT_OFFSET = 500;
-    public static final double BREEDING_CROSS_FACTOR = 0.15;
-    private static final float MIN_MOVEMENT_SPEED = (float)generateSpeed(() -> 0.0);
-    private static final float MAX_MOVEMENT_SPEED = (float)generateSpeed(() -> 1.0);
-    private static final float MIN_JUMP_STRENGTH = (float)generateJumpStrength(() -> 0.0);
-    private static final float MAX_JUMP_STRENGTH = (float)generateJumpStrength(() -> 1.0);
-    private static final float MIN_HEALTH = generateMaxHealth(i -> 0);
-    private static final float MAX_HEALTH = generateMaxHealth(i -> i - 1);
+    public static final double BREEDING_CROSS_FACTOR = 0.15D;
+    private static final float MIN_MOVEMENT_SPEED = (float) generateSpeed(() -> {
+        return 0.0D;
+    });
+    private static final float MAX_MOVEMENT_SPEED = (float) generateSpeed(() -> {
+        return 1.0D;
+    });
+    private static final float MIN_JUMP_STRENGTH = (float) generateJumpStrength(() -> {
+        return 0.0D;
+    });
+    private static final float MAX_JUMP_STRENGTH = (float) generateJumpStrength(() -> {
+        return 1.0D;
+    });
+    private static final float MIN_HEALTH = generateMaxHealth((i) -> {
+        return 0;
+    });
+    private static final float MAX_HEALTH = generateMaxHealth((i) -> {
+        return i - 1;
+    });
     private static final float BACKWARDS_MOVE_SPEED_FACTOR = 0.25F;
     private static final float SIDEWAYS_MOVE_SPEED_FACTOR = 0.5F;
-    private static final Predicate<LivingEntity> PARENT_HORSE_SELECTOR = livingEntity -> livingEntity instanceof AbstractHorse
-            && ((AbstractHorse)livingEntity).isBred();
-    private static final TargetingConditions MOMMY_TARGETING = TargetingConditions.forNonCombat()
-        .range(16.0)
-        .ignoreLineOfSight()
-        .selector(PARENT_HORSE_SELECTOR);
-    private static final Ingredient FOOD_ITEMS = Ingredient.of(
-        Items.WHEAT, Items.SUGAR, Blocks.HAY_BLOCK.asItem(), Items.APPLE, Items.GOLDEN_CARROT, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE
-    );
+    private static final Predicate<LivingEntity> PARENT_HORSE_SELECTOR = (entityliving) -> {
+        return entityliving instanceof AbstractHorse && ((AbstractHorse) entityliving).isBred();
+    };
+    private static final TargetingConditions MOMMY_TARGETING = TargetingConditions.forNonCombat().range(16.0D).ignoreLineOfSight().selector(AbstractHorse.PARENT_HORSE_SELECTOR);
+    private static final Ingredient FOOD_ITEMS = Ingredient.of(Items.WHEAT, Items.SUGAR, Blocks.HAY_BLOCK.asItem(), Items.APPLE, Items.GOLDEN_CARROT, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE);
     private static final EntityDataAccessor<Byte> DATA_ID_FLAGS = SynchedEntityData.defineId(AbstractHorse.class, EntityDataSerializers.BYTE);
     private static final int FLAG_TAME = 2;
     private static final int FLAG_SADDLE = 4;
@@ -115,7 +131,7 @@
     public int tailCounter;
     public int sprintCounter;
     protected boolean isJumping;
-    protected SimpleContainer inventory;
+    public SimpleContainer inventory;
     protected int temper;
     protected float playerJumpPendingScale;
     protected boolean allowStandSliding;
@@ -129,6 +145,7 @@
     protected int gallopSoundCounter;
     @Nullable
     private UUID owner;
+    public int maxDomestication = 100; // CraftBukkit - store max domestication value
 
     protected AbstractHorse(EntityType<? extends AbstractHorse> entityType, Level level) {
         super(entityType, level);
@@ -138,11 +155,11 @@
 
     @Override
     protected void registerGoals() {
-        this.goalSelector.addGoal(1, new PanicGoal(this, 1.2));
-        this.goalSelector.addGoal(1, new RunAroundLikeCrazyGoal(this, 1.2));
-        this.goalSelector.addGoal(2, new BreedGoal(this, 1.0, AbstractHorse.class));
-        this.goalSelector.addGoal(4, new FollowParentGoal(this, 1.0));
-        this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 0.7));
+        this.goalSelector.addGoal(1, new PanicGoal(this, 1.2D));
+        this.goalSelector.addGoal(1, new RunAroundLikeCrazyGoal(this, 1.2D));
+        this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D, AbstractHorse.class));
+        this.goalSelector.addGoal(4, new FollowParentGoal(this, 1.0D));
+        this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 0.7D));
         this.goalSelector.addGoal(7, new LookAtPlayerGoal(this, Player.class, 6.0F));
         this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
         if (this.canPerformRearing()) {
@@ -154,26 +171,28 @@
 
     protected void addBehaviourGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
-        this.goalSelector.addGoal(3, new TemptGoal(this, 1.25, Ingredient.of(Items.GOLDEN_CARROT, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE), false));
+        this.goalSelector.addGoal(3, new TemptGoal(this, 1.25D, Ingredient.of(Items.GOLDEN_CARROT, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE), false));
     }
 
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_ID_FLAGS, (byte)0);
+        this.entityData.define(AbstractHorse.DATA_ID_FLAGS, (byte) 0);
     }
 
     protected boolean getFlag(int flagId) {
-        return (this.entityData.get(DATA_ID_FLAGS) & flagId) != 0;
+        return ((Byte) this.entityData.get(AbstractHorse.DATA_ID_FLAGS) & flagId) != 0;
     }
 
     protected void setFlag(int flagId, boolean value) {
-        byte b = this.entityData.get(DATA_ID_FLAGS);
+        byte b0 = (Byte) this.entityData.get(AbstractHorse.DATA_ID_FLAGS);
+
         if (value) {
-            this.entityData.set(DATA_ID_FLAGS, (byte)(b | flagId));
+            this.entityData.set(AbstractHorse.DATA_ID_FLAGS, (byte) (b0 | flagId));
         } else {
-            this.entityData.set(DATA_ID_FLAGS, (byte)(b & ~flagId));
+            this.entityData.set(AbstractHorse.DATA_ID_FLAGS, (byte) (b0 & ~flagId));
         }
+
     }
 
     public boolean isTamed() {
@@ -207,6 +226,7 @@
         if (distance > 6.0F && this.isEating()) {
             this.setEating(false);
         }
+
     }
 
     public boolean isEating() {
@@ -242,6 +262,7 @@
                 armor.shrink(1);
             }
         }
+
     }
 
     @Override
@@ -258,9 +279,10 @@
     }
 
     public int modifyTemper(int addedTemper) {
-        int i = Mth.clamp(this.getTemper() + addedTemper, 0, this.getMaxTemper());
-        this.setTemper(i);
-        return i;
+        int j = Mth.clamp(this.getTemper() + addedTemper, 0, this.getMaxTemper());
+
+        this.setTemper(j);
+        return j;
     }
 
     @Override
@@ -271,21 +293,13 @@
     private void eating() {
         this.openMouth();
         if (!this.isSilent()) {
-            SoundEvent eatingSound = this.getEatingSound();
-            if (eatingSound != null) {
-                this.level()
-                    .playSound(
-                        null,
-                        this.getX(),
-                        this.getY(),
-                        this.getZ(),
-                        eatingSound,
-                        this.getSoundSource(),
-                        1.0F,
-                        1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F
-                    );
+            SoundEvent soundeffect = this.getEatingSound();
+
+            if (soundeffect != null) {
+                this.level().playSound((Player) null, this.getX(), this.getY(), this.getZ(), soundeffect, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             }
         }
+
     }
 
     @Override
@@ -295,13 +309,18 @@
         }
 
         int i = this.calculateFallDamage(fallDistance, multiplier);
+
         if (i <= 0) {
             return false;
         } else {
-            this.hurt(source, (float)i);
+            this.hurt(source, (float) i);
             if (this.isVehicle()) {
-                for (Entity entity : this.getIndirectPassengers()) {
-                    entity.hurt(source, (float)i);
+                Iterator iterator = this.getIndirectPassengers().iterator();
+
+                while (iterator.hasNext()) {
+                    Entity entity = (Entity) iterator.next();
+
+                    entity.hurt(source, (float) i);
                 }
             }
 
@@ -319,17 +338,19 @@
         return 2;
     }
 
-    protected void createInventory() {
-        SimpleContainer simpleContainer = this.inventory;
-        this.inventory = new SimpleContainer(this.getInventorySize());
-        if (simpleContainer != null) {
-            simpleContainer.removeListener(this);
-            int min = Math.min(simpleContainer.getContainerSize(), this.inventory.getContainerSize());
+    public void createInventory() {
+        SimpleContainer inventorysubcontainer = this.inventory;
 
-            for (int i = 0; i < min; i++) {
-                ItemStack item = simpleContainer.getItem(i);
-                if (!item.isEmpty()) {
-                    this.inventory.setItem(i, item.copy());
+        this.inventory = new SimpleContainer(this.getInventorySize(), (org.bukkit.entity.AbstractHorse) this.getBukkitEntity()); // CraftBukkit
+        if (inventorysubcontainer != null) {
+            inventorysubcontainer.removeListener(this);
+            int i = Math.min(inventorysubcontainer.getContainerSize(), this.inventory.getContainerSize());
+
+            for (int j = 0; j < i; ++j) {
+                ItemStack itemstack = inventorysubcontainer.getItem(j);
+
+                if (!itemstack.isEmpty()) {
+                    this.inventory.setItem(j, itemstack.copy());
                 }
             }
         }
@@ -346,11 +367,13 @@
 
     @Override
     public void containerChanged(Container invBasic) {
-        boolean isSaddled = this.isSaddled();
+        boolean flag = this.isSaddled();
+
         this.updateContainerEquipment();
-        if (this.tickCount > 20 && !isSaddled && this.isSaddled()) {
+        if (this.tickCount > 20 && !flag && this.isSaddled()) {
             this.playSound(this.getSaddleSoundEvent(), 0.5F, 1.0F);
         }
+
     }
 
     public double getCustomJump() {
@@ -360,6 +383,7 @@
     @Override
     public boolean hurt(DamageSource source, float amount) {
         boolean flag = super.hurt(source, amount);
+
         if (flag && this.random.nextInt(3) == 0) {
             this.standIfPossible();
         }
@@ -382,35 +406,33 @@
     }
 
     @Override
-    protected void playStepSound(BlockPos pos, BlockState block) {
+    protected void playStepSound(BlockPos pos, IBlockData block) {
         if (!block.liquid()) {
-            BlockState blockState = this.level().getBlockState(pos.above());
-            SoundType soundType = block.getSoundType();
-            if (blockState.is(Blocks.SNOW)) {
-                soundType = blockState.getSoundType();
+            IBlockData iblockdata1 = this.level().getBlockState(pos.above());
+            SoundType soundeffecttype = block.getSoundType();
+
+            if (iblockdata1.is(Blocks.SNOW)) {
+                soundeffecttype = iblockdata1.getSoundType();
             }
 
             if (this.isVehicle() && this.canGallop) {
-                this.gallopSoundCounter++;
+                ++this.gallopSoundCounter;
                 if (this.gallopSoundCounter > 5 && this.gallopSoundCounter % 3 == 0) {
-                    this.playGallopSound(soundType);
+                    this.playGallopSound(soundeffecttype);
                 } else if (this.gallopSoundCounter <= 5) {
-                    this.playSound(SoundEvents.HORSE_STEP_WOOD, soundType.getVolume() * 0.15F, soundType.getPitch());
+                    this.playSound(SoundEvents.HORSE_STEP_WOOD, soundeffecttype.getVolume() * 0.15F, soundeffecttype.getPitch());
                 }
-            } else if (this.isWoodSoundType(soundType)) {
-                this.playSound(SoundEvents.HORSE_STEP_WOOD, soundType.getVolume() * 0.15F, soundType.getPitch());
+            } else if (this.isWoodSoundType(soundeffecttype)) {
+                this.playSound(SoundEvents.HORSE_STEP_WOOD, soundeffecttype.getVolume() * 0.15F, soundeffecttype.getPitch());
             } else {
-                this.playSound(SoundEvents.HORSE_STEP, soundType.getVolume() * 0.15F, soundType.getPitch());
+                this.playSound(SoundEvents.HORSE_STEP, soundeffecttype.getVolume() * 0.15F, soundeffecttype.getPitch());
             }
+
         }
     }
 
     private boolean isWoodSoundType(SoundType soundType) {
-        return soundType == SoundType.WOOD
-            || soundType == SoundType.NETHER_WOOD
-            || soundType == SoundType.STEM
-            || soundType == SoundType.CHERRY_WOOD
-            || soundType == SoundType.BAMBOO_WOOD;
+        return soundType == SoundType.WOOD || soundType == SoundType.NETHER_WOOD || soundType == SoundType.STEM || soundType == SoundType.CHERRY_WOOD || soundType == SoundType.BAMBOO_WOOD;
     }
 
     protected void playGallopSound(SoundType soundType) {
@@ -418,7 +440,7 @@
     }
 
     public static AttributeSupplier.Builder createBaseHorseAttributes() {
-        return Mob.createMobAttributes().add(Attributes.JUMP_STRENGTH).add(Attributes.MAX_HEALTH, 53.0).add(Attributes.MOVEMENT_SPEED, 0.225F);
+        return Mob.createMobAttributes().add(Attributes.JUMP_STRENGTH).add(Attributes.MAX_HEALTH, 53.0D).add(Attributes.MOVEMENT_SPEED, 0.22499999403953552D);
     }
 
     @Override
@@ -427,7 +449,7 @@
     }
 
     public int getMaxTemper() {
-        return 100;
+        return this.maxDomestication; // CraftBukkit - return stored max domestication instead of 100
     }
 
     @Override
@@ -442,56 +464,55 @@
 
     @Override
     public void openCustomInventoryScreen(Player player) {
-        if (!this.level().isClientSide && (!this.isVehicle() || this.hasPassenger(player)) && this.isTamed()) {
+        if (!this.level().isClientSide && (!this.isVehicle() || this.hasPassenger((Entity) player)) && this.isTamed()) {
             player.openHorseInventory(this, this.inventory);
         }
+
     }
 
     public InteractionResult fedFood(Player player, ItemStack stack) {
         boolean flag = this.handleEating(player, stack);
+
         if (flag & !player.getAbilities().instabuild) {
             stack.shrink(1);
         }
 
-        if (this.level().isClientSide) {
-            return InteractionResult.CONSUME;
-        } else {
-            return flag ? InteractionResult.SUCCESS : InteractionResult.PASS;
-        }
+        return this.level().isClientSide ? InteractionResult.CONSUME : (flag ? InteractionResult.SUCCESS : InteractionResult.PASS);
     }
 
     protected boolean handleEating(Player player, ItemStack stack) {
         boolean flag = false;
         float f = 0.0F;
-        int i = 0;
-        int i1 = 0;
+        short short0 = 0;
+        byte b0 = 0;
+
         if (stack.is(Items.WHEAT)) {
             f = 2.0F;
-            i = 20;
-            i1 = 3;
+            short0 = 20;
+            b0 = 3;
         } else if (stack.is(Items.SUGAR)) {
             f = 1.0F;
-            i = 30;
-            i1 = 3;
+            short0 = 30;
+            b0 = 3;
         } else if (stack.is(Blocks.HAY_BLOCK.asItem())) {
             f = 20.0F;
-            i = 180;
+            short0 = 180;
         } else if (stack.is(Items.APPLE)) {
             f = 3.0F;
-            i = 60;
-            i1 = 3;
+            short0 = 60;
+            b0 = 3;
         } else if (stack.is(Items.GOLDEN_CARROT)) {
             f = 4.0F;
-            i = 60;
-            i1 = 5;
+            short0 = 60;
+            b0 = 5;
             if (!this.level().isClientSide && this.isTamed() && this.getAge() == 0 && !this.isInLove()) {
                 flag = true;
                 this.setInLove(player);
             }
         } else if (stack.is(Items.GOLDEN_APPLE) || stack.is(Items.ENCHANTED_GOLDEN_APPLE)) {
             f = 10.0F;
-            i = 240;
-            i1 = 10;
+            short0 = 240;
+            b0 = 10;
             if (!this.level().isClientSide && this.isTamed() && this.getAge() == 0 && !this.isInLove()) {
                 flag = true;
                 this.setInLove(player);
@@ -499,20 +520,20 @@
         }
 
         if (this.getHealth() < this.getMaxHealth() && f > 0.0F) {
-            this.heal(f);
+            this.heal(f, EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
             flag = true;
         }
 
-        if (this.isBaby() && i > 0) {
-            this.level().addParticle(ParticleTypes.HAPPY_VILLAGER, this.getRandomX(1.0), this.getRandomY() + 0.5, this.getRandomZ(1.0), 0.0, 0.0, 0.0);
+        if (this.isBaby() && short0 > 0) {
+            this.level().addParticle(ParticleTypes.HAPPY_VILLAGER, this.getRandomX(1.0D), this.getRandomY() + 0.5D, this.getRandomZ(1.0D), 0.0D, 0.0D, 0.0D);
             if (!this.level().isClientSide) {
-                this.ageUp(i);
+                this.ageUp(short0);
                 flag = true;
             }
         }
 
-        if (i1 > 0 && (flag || !this.isTamed()) && this.getTemper() < this.getMaxTemper() && !this.level().isClientSide) {
-            this.modifyTemper(i1);
+        if (b0 > 0 && (flag || !this.isTamed()) && this.getTemper() < this.getMaxTemper() && !this.level().isClientSide) {
+            this.modifyTemper(b0);
             flag = true;
         }
 
@@ -532,6 +553,7 @@
             player.setXRot(this.getXRot());
             player.startRiding(this);
         }
+
     }
 
     @Override
@@ -541,7 +563,7 @@
 
     @Override
     public boolean isFood(ItemStack stack) {
-        return FOOD_ITEMS.test(stack);
+        return AbstractHorse.FOOD_ITEMS.test(stack);
     }
 
     private void moveTail() {
@@ -552,12 +574,14 @@
     protected void dropEquipment() {
         super.dropEquipment();
         if (this.inventory != null) {
-            for (int i = 0; i < this.inventory.getContainerSize(); i++) {
-                ItemStack item = this.inventory.getItem(i);
-                if (!item.isEmpty() && !EnchantmentHelper.hasVanishingCurse(item)) {
-                    this.spawnAtLocation(item);
+            for (int i = 0; i < this.inventory.getContainerSize(); ++i) {
+                ItemStack itemstack = this.inventory.getItem(i);
+
+                if (!itemstack.isEmpty() && !EnchantmentHelper.hasVanishingCurse(itemstack)) {
+                    this.spawnAtLocation(itemstack);
                 }
             }
+
         }
     }
 
@@ -570,14 +594,11 @@
         super.aiStep();
         if (!this.level().isClientSide && this.isAlive()) {
             if (this.random.nextInt(900) == 0 && this.deathTime == 0) {
-                this.heal(1.0F);
+                this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
             }
 
             if (this.canEatGrass()) {
-                if (!this.isEating()
-                    && !this.isVehicle()
-                    && this.random.nextInt(300) == 0
-                    && this.level().getBlockState(this.blockPosition().below()).is(Blocks.GRASS_BLOCK)) {
+                if (!this.isEating() && !this.isVehicle() && this.random.nextInt(300) == 0 && this.level().getBlockState(this.blockPosition().below()).is(Blocks.GRASS_BLOCK)) {
                     this.setEating(true);
                 }
 
@@ -593,12 +614,13 @@
 
     protected void followMommy() {
         if (this.isBred() && this.isBaby() && !this.isEating()) {
-            LivingEntity nearestEntity = this.level()
-                .getNearestEntity(AbstractHorse.class, MOMMY_TARGETING, this, this.getX(), this.getY(), this.getZ(), this.getBoundingBox().inflate(16.0));
-            if (nearestEntity != null && this.distanceToSqr(nearestEntity) > 4.0) {
-                this.navigation.createPath(nearestEntity, 0);
+            LivingEntity entityliving = this.level().getNearestEntity(AbstractHorse.class, AbstractHorse.MOMMY_TARGETING, this, this.getX(), this.getY(), this.getZ(), this.getBoundingBox().inflate(16.0D));
+
+            if (entityliving != null && this.distanceToSqr((Entity) entityliving) > 4.0D) {
+                this.navigation.createPath((Entity) entityliving, 0);
             }
         }
+
     }
 
     public boolean canEatGrass() {
@@ -623,7 +645,7 @@
         }
 
         if (this.sprintCounter > 0) {
-            this.sprintCounter++;
+            ++this.sprintCounter;
             if (this.sprintCounter > 300) {
                 this.sprintCounter = 0;
             }
@@ -631,12 +653,12 @@
 
         this.eatAnimO = this.eatAnim;
         if (this.isEating()) {
-            this.eatAnim = this.eatAnim + (1.0F - this.eatAnim) * 0.4F + 0.05F;
+            this.eatAnim += (1.0F - this.eatAnim) * 0.4F + 0.05F;
             if (this.eatAnim > 1.0F) {
                 this.eatAnim = 1.0F;
             }
         } else {
-            this.eatAnim = this.eatAnim + ((0.0F - this.eatAnim) * 0.4F - 0.05F);
+            this.eatAnim += (0.0F - this.eatAnim) * 0.4F - 0.05F;
             if (this.eatAnim < 0.0F) {
                 this.eatAnim = 0.0F;
             }
@@ -646,13 +668,13 @@
         if (this.isStanding()) {
             this.eatAnim = 0.0F;
             this.eatAnimO = this.eatAnim;
-            this.standAnim = this.standAnim + (1.0F - this.standAnim) * 0.4F + 0.05F;
+            this.standAnim += (1.0F - this.standAnim) * 0.4F + 0.05F;
             if (this.standAnim > 1.0F) {
                 this.standAnim = 1.0F;
             }
         } else {
             this.allowStandSliding = false;
-            this.standAnim = this.standAnim + ((0.8F * this.standAnim * this.standAnim * this.standAnim - this.standAnim) * 0.6F - 0.05F);
+            this.standAnim += (0.8F * this.standAnim * this.standAnim * this.standAnim - this.standAnim) * 0.6F - 0.05F;
             if (this.standAnim < 0.0F) {
                 this.standAnim = 0.0F;
             }
@@ -660,41 +682,46 @@
 
         this.mouthAnimO = this.mouthAnim;
         if (this.getFlag(64)) {
-            this.mouthAnim = this.mouthAnim + (1.0F - this.mouthAnim) * 0.7F + 0.05F;
+            this.mouthAnim += (1.0F - this.mouthAnim) * 0.7F + 0.05F;
             if (this.mouthAnim > 1.0F) {
                 this.mouthAnim = 1.0F;
             }
         } else {
-            this.mouthAnim = this.mouthAnim + ((0.0F - this.mouthAnim) * 0.7F - 0.05F);
+            this.mouthAnim += (0.0F - this.mouthAnim) * 0.7F - 0.05F;
             if (this.mouthAnim < 0.0F) {
                 this.mouthAnim = 0.0F;
             }
         }
+
     }
 
     @Override
-    public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        if (this.isVehicle() || this.isBaby()) {
-            return super.mobInteract(player, hand);
-        } else if (this.isTamed() && player.isSecondaryUseActive()) {
-            this.openCustomInventoryScreen(player);
-            return InteractionResult.sidedSuccess(this.level().isClientSide);
-        } else {
-            ItemStack itemInHand = player.getItemInHand(hand);
-            if (!itemInHand.isEmpty()) {
-                InteractionResult interactionResult = itemInHand.interactLivingEntity(player, this, hand);
-                if (interactionResult.consumesAction()) {
-                    return interactionResult;
-                }
+    public InteractionResult mobInteract(Player player, EnumHand hand) {
+        if (!this.isVehicle() && !this.isBaby()) {
+            if (this.isTamed() && player.isSecondaryUseActive()) {
+                this.openCustomInventoryScreen(player);
+                return InteractionResult.sidedSuccess(this.level().isClientSide);
+            } else {
+                ItemStack itemstack = player.getItemInHand(hand);
 
-                if (this.canWearArmor() && this.isArmor(itemInHand) && !this.isWearingArmor()) {
-                    this.equipArmor(player, itemInHand);
-                    return InteractionResult.sidedSuccess(this.level().isClientSide);
+                if (!itemstack.isEmpty()) {
+                    InteractionResult enuminteractionresult = itemstack.interactLivingEntity(player, this, hand);
+
+                    if (enuminteractionresult.consumesAction()) {
+                        return enuminteractionresult;
+                    }
+
+                    if (this.canWearArmor() && this.isArmor(itemstack) && !this.isWearingArmor()) {
+                        this.equipArmor(player, itemstack);
+                        return InteractionResult.sidedSuccess(this.level().isClientSide);
+                    }
                 }
-            }
 
-            this.doPlayerRide(player);
-            return InteractionResult.sidedSuccess(this.level().isClientSide);
+                this.doPlayerRide(player);
+                return InteractionResult.sidedSuccess(this.level().isClientSide);
+            }
+        } else {
+            return super.mobInteract(player, hand);
         }
     }
 
@@ -703,6 +730,7 @@
             this.mouthCounter = 1;
             this.setFlag(64, true);
         }
+
     }
 
     public void setEating(boolean eating) {
@@ -727,37 +755,41 @@
             this.standCounter = 1;
             this.setStanding(true);
         }
+
     }
 
     public void makeMad() {
         if (!this.isStanding()) {
             this.standIfPossible();
-            SoundEvent angrySound = this.getAngrySound();
-            if (angrySound != null) {
-                this.playSound(angrySound, this.getSoundVolume(), this.getVoicePitch());
+            SoundEvent soundeffect = this.getAngrySound();
+
+            if (soundeffect != null) {
+                this.playSound(soundeffect, this.getSoundVolume(), this.getVoicePitch());
             }
         }
+
     }
 
     public boolean tameWithName(Player player) {
         this.setOwnerUUID(player.getUUID());
         this.setTamed(true);
         if (player instanceof ServerPlayer) {
-            CriteriaTriggers.TAME_ANIMAL.trigger((ServerPlayer)player, this);
+            CriteriaTriggers.TAME_ANIMAL.trigger((ServerPlayer) player, (Animal) this);
         }
 
-        this.level().broadcastEntityEvent(this, (byte)7);
+        this.level().broadcastEntityEvent(this, (byte) 7);
         return true;
     }
 
     @Override
     protected void tickRidden(Player player, Vec3 travelVector) {
         super.tickRidden(player, travelVector);
-        Vec2 riddenRotation = this.getRiddenRotation(player);
-        this.setRot(riddenRotation.y, riddenRotation.x);
+        Vec2 vec2f = this.getRiddenRotation(player);
+
+        this.setRot(vec2f.y, vec2f.x);
         this.yRotO = this.yBodyRot = this.yHeadRot = this.getYRot();
         if (this.isControlledByLocalInstance()) {
-            if (travelVector.z <= 0.0) {
+            if (travelVector.z <= 0.0D) {
                 this.gallopSoundCounter = 0;
             }
 
@@ -770,6 +802,7 @@
                 this.playerJumpPendingScale = 0.0F;
             }
         }
+
     }
 
     protected Vec2 getRiddenRotation(LivingEntity entity) {
@@ -783,33 +816,35 @@
         } else {
             float f = player.xxa * 0.5F;
             float f1 = player.zza;
+
             if (f1 <= 0.0F) {
                 f1 *= 0.25F;
             }
 
-            return new Vec3((double)f, 0.0, (double)f1);
+            return new Vec3((double) f, 0.0D, (double) f1);
         }
     }
 
     @Override
     protected float getRiddenSpeed(Player player) {
-        return (float)this.getAttributeValue(Attributes.MOVEMENT_SPEED);
+        return (float) this.getAttributeValue(Attributes.MOVEMENT_SPEED);
     }
 
     protected void executeRidersJump(float playerJumpPendingScale, Vec3 travelVector) {
-        double d = this.getCustomJump() * (double)playerJumpPendingScale * (double)this.getBlockJumpFactor();
-        double d1 = d + (double)this.getJumpBoostPower();
-        Vec3 deltaMovement = this.getDeltaMovement();
-        this.setDeltaMovement(deltaMovement.x, d1, deltaMovement.z);
+        double d0 = this.getCustomJump() * (double) playerJumpPendingScale * (double) this.getBlockJumpFactor();
+        double d1 = d0 + (double) this.getJumpBoostPower();
+        Vec3 vec3d1 = this.getDeltaMovement();
+
+        this.setDeltaMovement(vec3d1.x, d1, vec3d1.z);
         this.setIsJumping(true);
         this.hasImpulse = true;
-        if (travelVector.z > 0.0) {
-            float sin = Mth.sin(this.getYRot() * (float) (Math.PI / 180.0));
-            float cos = Mth.cos(this.getYRot() * (float) (Math.PI / 180.0));
-            this.setDeltaMovement(
-                this.getDeltaMovement().add((double)(-0.4F * sin * playerJumpPendingScale), 0.0, (double)(0.4F * cos * playerJumpPendingScale))
-            );
+        if (travelVector.z > 0.0D) {
+            float f1 = Mth.sin(this.getYRot() * 0.017453292F);
+            float f2 = Mth.cos(this.getYRot() * 0.017453292F);
+
+            this.setDeltaMovement(this.getDeltaMovement().add((double) (-0.4F * f1 * playerJumpPendingScale), 0.0D, (double) (0.4F * f2 * playerJumpPendingScale)));
         }
+
     }
 
     protected void playJumpSound() {
@@ -826,10 +861,12 @@
         if (this.getOwnerUUID() != null) {
             compound.putUUID("Owner", this.getOwnerUUID());
         }
+        compound.putInt("Bukkit.MaxDomestication", this.maxDomestication); // CraftBukkit
 
         if (!this.inventory.getItem(0).isEmpty()) {
             compound.put("SaddleItem", this.inventory.getItem(0).save(new CompoundTag()));
         }
+
     }
 
     @Override
@@ -839,22 +876,30 @@
         this.setBred(compound.getBoolean("Bred"));
         this.setTemper(compound.getInt("Temper"));
         this.setTamed(compound.getBoolean("Tame"));
-        UUID uUID;
+        UUID uuid;
+
         if (compound.hasUUID("Owner")) {
-            uUID = compound.getUUID("Owner");
+            uuid = compound.getUUID("Owner");
         } else {
-            String string = compound.getString("Owner");
-            uUID = OldUsersConverter.convertMobOwnerIfNecessary(this.getServer(), string);
+            String s = compound.getString("Owner");
+
+            uuid = OldUsersConverter.convertMobOwnerIfNecessary(this.getServer(), s);
         }
 
-        if (uUID != null) {
-            this.setOwnerUUID(uUID);
+        if (uuid != null) {
+            this.setOwnerUUID(uuid);
         }
+        // CraftBukkit start
+        if (compound.contains("Bukkit.MaxDomestication")) {
+            this.maxDomestication = compound.getInt("Bukkit.MaxDomestication");
+        }
+        // CraftBukkit end
 
         if (compound.contains("SaddleItem", 10)) {
-            ItemStack itemStack = ItemStack.of(compound.getCompound("SaddleItem"));
-            if (itemStack.is(Items.SADDLE)) {
-                this.inventory.setItem(0, itemStack);
+            ItemStack itemstack = ItemStack.of(compound.getCompound("SaddleItem"));
+
+            if (itemstack.is(Items.SADDLE)) {
+                this.inventory.setItem(0, itemstack);
             }
         }
 
@@ -877,35 +922,38 @@
     }
 
     protected void setOffspringAttributes(AgeableMob parent, AbstractHorse child) {
-        this.setOffspringAttribute(parent, child, Attributes.MAX_HEALTH, (double)MIN_HEALTH, (double)MAX_HEALTH);
-        this.setOffspringAttribute(parent, child, Attributes.JUMP_STRENGTH, (double)MIN_JUMP_STRENGTH, (double)MAX_JUMP_STRENGTH);
-        this.setOffspringAttribute(parent, child, Attributes.MOVEMENT_SPEED, (double)MIN_MOVEMENT_SPEED, (double)MAX_MOVEMENT_SPEED);
+        this.setOffspringAttribute(parent, child, Attributes.MAX_HEALTH, (double) AbstractHorse.MIN_HEALTH, (double) AbstractHorse.MAX_HEALTH);
+        this.setOffspringAttribute(parent, child, Attributes.JUMP_STRENGTH, (double) AbstractHorse.MIN_JUMP_STRENGTH, (double) AbstractHorse.MAX_JUMP_STRENGTH);
+        this.setOffspringAttribute(parent, child, Attributes.MOVEMENT_SPEED, (double) AbstractHorse.MIN_MOVEMENT_SPEED, (double) AbstractHorse.MAX_MOVEMENT_SPEED);
     }
 
-    private void setOffspringAttribute(AgeableMob otherParent, AbstractHorse child, Attribute attribute, double min, double max) {
-        double d = createOffspringAttribute(this.getAttributeBaseValue(attribute), otherParent.getAttributeBaseValue(attribute), min, max, this.random);
-        child.getAttribute(attribute).setBaseValue(d);
+    private void setOffspringAttribute(AgeableMob otherParent, AbstractHorse child, Attribute attribute, double min, double d1) {
+        double d2 = createOffspringAttribute(this.getAttributeBaseValue(attribute), otherParent.getAttributeBaseValue(attribute), min, d1, this.random);
+
+        child.getAttribute(attribute).setBaseValue(d2);
     }
 
-    static double createOffspringAttribute(double value1, double value2, double min, double max, RandomSource random) {
-        if (max <= min) {
+    static double createOffspringAttribute(double value1, double d1, double value2, double d3, RandomSource min) {
+        if (d3 <= value2) {
             throw new IllegalArgumentException("Incorrect range for an attribute");
         } else {
-            value1 = Mth.clamp(value1, min, max);
-            value2 = Mth.clamp(value2, min, max);
-            double d = 0.15 * (max - min);
-            double d1 = Math.abs(value1 - value2) + d * 2.0;
-            double d2 = (value1 + value2) / 2.0;
-            double d3 = (random.nextDouble() + random.nextDouble() + random.nextDouble()) / 3.0 - 0.5;
-            double d4 = d2 + d1 * d3;
-            if (d4 > max) {
-                double d5 = d4 - max;
-                return max - d5;
-            } else if (d4 < min) {
-                double d5 = min - d4;
-                return min + d5;
+            value1 = Mth.clamp(value1, value2, d3);
+            d1 = Mth.clamp(d1, value2, d3);
+            double d4 = 0.15D * (d3 - value2);
+            double d5 = Math.abs(value1 - d1) + d4 * 2.0D;
+            double d6 = (value1 + d1) / 2.0D;
+            double d7 = (min.nextDouble() + min.nextDouble() + min.nextDouble()) / 3.0D - 0.5D;
+            double d8 = d6 + d5 * d7;
+            double d9;
+
+            if (d8 > d3) {
+                d9 = d8 - d3;
+                return d3 - d9;
+            } else if (d8 < value2) {
+                d9 = value2 - d8;
+                return value2 + d9;
             } else {
-                return d4;
+                return d8;
             }
         }
     }
@@ -935,8 +983,9 @@
             if (jumpPower >= 90) {
                 this.playerJumpPendingScale = 1.0F;
             } else {
-                this.playerJumpPendingScale = 0.4F + 0.4F * (float)jumpPower / 90.0F;
+                this.playerJumpPendingScale = 0.4F + 0.4F * (float) jumpPower / 90.0F;
             }
+
         }
     }
 
@@ -947,24 +996,36 @@
 
     @Override
     public void handleStartJump(int jumpPower) {
+        // CraftBukkit start
+        float power;
+        if (jumpPower >= 90) {
+            power = 1.0F;
+        } else {
+            power = 0.4F + 0.4F * (float) jumpPower / 90.0F;
+        }
+        if (!CraftEventFactory.callHorseJumpEvent(this, power)) {
+            return;
+        }
+        // CraftBukkit end
         this.allowStandSliding = true;
         this.standIfPossible();
         this.playJumpSound();
     }
 
     @Override
-    public void handleStopJump() {
-    }
+    public void handleStopJump() {}
 
     protected void spawnTamingParticles(boolean tamed) {
-        ParticleOptions particleOptions = tamed ? ParticleTypes.HEART : ParticleTypes.SMOKE;
+        SimpleParticleType particletype = tamed ? ParticleTypes.HEART : ParticleTypes.SMOKE;
 
-        for (int i = 0; i < 7; i++) {
-            double d = this.random.nextGaussian() * 0.02;
-            double d1 = this.random.nextGaussian() * 0.02;
-            double d2 = this.random.nextGaussian() * 0.02;
-            this.level().addParticle(particleOptions, this.getRandomX(1.0), this.getRandomY() + 0.5, this.getRandomZ(1.0), d, d1, d2);
+        for (int i = 0; i < 7; ++i) {
+            double d0 = this.random.nextGaussian() * 0.02D;
+            double d1 = this.random.nextGaussian() * 0.02D;
+            double d2 = this.random.nextGaussian() * 0.02D;
+
+            this.level().addParticle(particletype, this.getRandomX(1.0D), this.getRandomY() + 0.5D, this.getRandomZ(1.0D), d0, d1, d2);
         }
+
     }
 
     @Override
@@ -976,26 +1037,28 @@
         } else {
             super.handleEntityEvent(id);
         }
+
     }
 
     @Override
     protected void positionRider(Entity passenger, Entity.MoveFunction callback) {
         super.positionRider(passenger, callback);
         if (passenger instanceof LivingEntity) {
-            ((LivingEntity)passenger).yBodyRot = this.yBodyRot;
+            ((LivingEntity) passenger).yBodyRot = this.yBodyRot;
         }
+
     }
 
     protected static float generateMaxHealth(IntUnaryOperator operator) {
-        return 15.0F + (float)operator.applyAsInt(8) + (float)operator.applyAsInt(9);
+        return 15.0F + (float) operator.applyAsInt(8) + (float) operator.applyAsInt(9);
     }
 
     protected static double generateJumpStrength(DoubleSupplier supplier) {
-        return 0.4F + supplier.getAsDouble() * 0.2 + supplier.getAsDouble() * 0.2 + supplier.getAsDouble() * 0.2;
+        return 0.4000000059604645D + supplier.getAsDouble() * 0.2D + supplier.getAsDouble() * 0.2D + supplier.getAsDouble() * 0.2D;
     }
 
     protected static double generateSpeed(DoubleSupplier supplier) {
-        return (0.45F + supplier.getAsDouble() * 0.3 + supplier.getAsDouble() * 0.3 + supplier.getAsDouble() * 0.3) * 0.25;
+        return (0.44999998807907104D + supplier.getAsDouble() * 0.3D + supplier.getAsDouble() * 0.3D + supplier.getAsDouble() * 0.3D) * 0.25D;
     }
 
     @Override
@@ -1004,7 +1067,7 @@
     }
 
     @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions size) {
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions size) {
         return size.height * 0.95F;
     }
 
@@ -1042,32 +1105,41 @@
 
     @Override
     public SlotAccess getSlot(int slot) {
-        int i = slot - 400;
-        if (i >= 0 && i < 2 && i < this.inventory.getContainerSize()) {
-            if (i == 0) {
-                return this.createEquipmentSlotAccess(i, itemStack -> itemStack.isEmpty() || itemStack.is(Items.SADDLE));
+        int j = slot - 400;
+
+        if (j >= 0 && j < 2 && j < this.inventory.getContainerSize()) {
+            if (j == 0) {
+                return this.createEquipmentSlotAccess(j, (itemstack) -> {
+                    return itemstack.isEmpty() || itemstack.is(Items.SADDLE);
+                });
             }
 
-            if (i == 1) {
+            if (j == 1) {
                 if (!this.canWearArmor()) {
                     return SlotAccess.NULL;
                 }
 
-                return this.createEquipmentSlotAccess(i, itemStack -> itemStack.isEmpty() || this.isArmor(itemStack));
+                return this.createEquipmentSlotAccess(j, (itemstack) -> {
+                    return itemstack.isEmpty() || this.isArmor(itemstack);
+                });
             }
         }
 
-        int i1 = slot - 500 + 2;
-        return i1 >= 2 && i1 < this.inventory.getContainerSize() ? SlotAccess.forContainer(this.inventory, i1) : super.getSlot(slot);
+        int k = slot - 500 + 2;
+
+        return k >= 2 && k < this.inventory.getContainerSize() ? SlotAccess.forContainer(this.inventory, k) : super.getSlot(slot);
     }
 
     @Nullable
     @Override
     public LivingEntity getControllingPassenger() {
         if (this.isSaddled()) {
-            Entity var2 = this.getFirstPassenger();
-            if (var2 instanceof Player) {
-                return (Player)var2;
+            Entity entity = this.getFirstPassenger();
+
+            if (entity instanceof Player) {
+                Player entityhuman = (Player) entity;
+
+                return entityhuman;
             }
         }
 
@@ -1076,32 +1148,40 @@
 
     @Nullable
     private Vec3 getDismountLocationInDirection(Vec3 direction, LivingEntity passenger) {
-        double d = this.getX() + direction.x;
+        double d0 = this.getX() + direction.x;
         double d1 = this.getBoundingBox().minY;
         double d2 = this.getZ() + direction.z;
-        BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
+        UnmodifiableIterator unmodifiableiterator = passenger.getDismountPoses().iterator();
 
-        for (Pose pose : passenger.getDismountPoses()) {
-            mutableBlockPos.set(d, d1, d2);
-            double d3 = this.getBoundingBox().maxY + 0.75;
+        while (unmodifiableiterator.hasNext()) {
+            EntityPose entitypose = (EntityPose) unmodifiableiterator.next();
 
-            do {
-                double blockFloorHeight = this.level().getBlockFloorHeight(mutableBlockPos);
-                if ((double)mutableBlockPos.getY() + blockFloorHeight > d3) {
+            blockposition_mutableblockposition.set(d0, d1, d2);
+            double d3 = this.getBoundingBox().maxY + 0.75D;
+
+            while (true) {
+                double d4 = this.level().getBlockFloorHeight(blockposition_mutableblockposition);
+
+                if ((double) blockposition_mutableblockposition.getY() + d4 > d3) {
                     break;
                 }
 
-                if (DismountHelper.isBlockFloorValid(blockFloorHeight)) {
-                    AABB localBoundsForPose = passenger.getLocalBoundsForPose(pose);
-                    Vec3 vec3 = new Vec3(d, (double)mutableBlockPos.getY() + blockFloorHeight, d2);
-                    if (DismountHelper.canDismountTo(this.level(), passenger, localBoundsForPose.move(vec3))) {
-                        passenger.setPose(pose);
-                        return vec3;
+                if (DismountHelper.isBlockFloorValid(d4)) {
+                    AABB axisalignedbb = passenger.getLocalBoundsForPose(entitypose);
+                    Vec3 vec3d1 = new Vec3(d0, (double) blockposition_mutableblockposition.getY() + d4, d2);
+
+                    if (DismountHelper.canDismountTo(this.level(), passenger, axisalignedbb.move(vec3d1))) {
+                        passenger.setPose(entitypose);
+                        return vec3d1;
                     }
                 }
 
-                mutableBlockPos.move(Direction.UP);
-            } while (!((double)mutableBlockPos.getY() < d3));
+                blockposition_mutableblockposition.move(Direction.UP);
+                if ((double) blockposition_mutableblockposition.getY() >= d3) {
+                    break;
+                }
+            }
         }
 
         return null;
@@ -1109,35 +1189,30 @@
 
     @Override
     public Vec3 getDismountLocationForPassenger(LivingEntity livingEntity) {
-        Vec3 collisionHorizontalEscapeVector = getCollisionHorizontalEscapeVector(
-            (double)this.getBbWidth(), (double)livingEntity.getBbWidth(), this.getYRot() + (livingEntity.getMainArm() == HumanoidArm.RIGHT ? 90.0F : -90.0F)
-        );
-        Vec3 dismountLocationInDirection = this.getDismountLocationInDirection(collisionHorizontalEscapeVector, livingEntity);
-        if (dismountLocationInDirection != null) {
-            return dismountLocationInDirection;
+        Vec3 vec3d = getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) livingEntity.getBbWidth(), this.getYRot() + (livingEntity.getMainArm() == HumanoidArm.RIGHT ? 90.0F : -90.0F));
+        Vec3 vec3d1 = this.getDismountLocationInDirection(vec3d, livingEntity);
+
+        if (vec3d1 != null) {
+            return vec3d1;
         } else {
-            Vec3 collisionHorizontalEscapeVector1 = getCollisionHorizontalEscapeVector(
-                (double)this.getBbWidth(), (double)livingEntity.getBbWidth(), this.getYRot() + (livingEntity.getMainArm() == HumanoidArm.LEFT ? 90.0F : -90.0F)
-            );
-            Vec3 dismountLocationInDirection1 = this.getDismountLocationInDirection(collisionHorizontalEscapeVector1, livingEntity);
-            return dismountLocationInDirection1 != null ? dismountLocationInDirection1 : this.position();
+            Vec3 vec3d2 = getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) livingEntity.getBbWidth(), this.getYRot() + (livingEntity.getMainArm() == HumanoidArm.LEFT ? 90.0F : -90.0F));
+            Vec3 vec3d3 = this.getDismountLocationInDirection(vec3d2, livingEntity);
+
+            return vec3d3 != null ? vec3d3 : this.position();
         }
     }
 
-    protected void randomizeAttributes(RandomSource random) {
-    }
+    protected void randomizeAttributes(RandomSource random) {}
 
     @Nullable
     @Override
-    public SpawnGroupData finalizeSpawn(
-        ServerLevelAccessor level, DifficultyInstance difficulty, MobSpawnType reason, @Nullable SpawnGroupData spawnData, @Nullable CompoundTag dataTag
-    ) {
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
         if (spawnData == null) {
             spawnData = new AgeableMob.AgeableMobGroupData(0.2F);
         }
 
         this.randomizeAttributes(level.getRandom());
-        return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
+        return super.finalizeSpawn(level, difficulty, reason, (GroupDataEntity) spawnData, dataTag);
     }
 
     public boolean hasInventoryChanged(Container inventory) {
@@ -1149,11 +1224,11 @@
     }
 
     @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entityDimensions, float f) {
-        return new Vector3f(0.0F, this.getPassengersRidingOffsetY(entityDimensions, f) + 0.15F * this.standAnimO * f, -0.7F * this.standAnimO * f);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, this.getPassengersRidingOffsetY(entitysize, f) + 0.15F * this.standAnimO * f, -0.7F * this.standAnimO * f);
     }
 
-    protected float getPassengersRidingOffsetY(EntityDimensions entityDimensions, float f) {
-        return entityDimensions.height + (this.isBaby() ? 0.125F : -0.15625F) * f;
+    protected float getPassengersRidingOffsetY(EntityDimensions entitysize, float f) {
+        return entitysize.height + (this.isBaby() ? 0.125F : -0.15625F) * f;
     }
 }
