--- a/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/net/minecraft/world/entity/animal/allay/Allay.java
@@ -2,7 +2,10 @@
 
 import com.google.common.collect.ImmutableList;
 import com.mojang.logging.LogUtils;
+import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
+import java.util.Iterator;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.UUID;
 import java.util.function.BiConsumer;
@@ -25,18 +28,18 @@
 import net.minecraft.tags.GameEventTags;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.Mth;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMoveType;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.PathfinderMob;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -58,7 +61,7 @@
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.EntityPositionSource;
 import net.minecraft.world.level.gameevent.GameEvent;
@@ -69,6 +72,7 @@
 import org.slf4j.Logger;
 
 public class Allay extends PathfinderMob implements InventoryCarrier, VibrationSystem {
+
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final Vec3i ITEM_PICKUP_REACH = new Vec3i(1, 1, 1);
     private static final int LIFTING_ITEM_ANIMATION_DURATION = 5;
@@ -79,55 +83,43 @@
     private static final int NUM_OF_DUPLICATION_HEARTS = 3;
     private static final EntityDataAccessor<Boolean> DATA_DANCING = SynchedEntityData.defineId(Allay.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_CAN_DUPLICATE = SynchedEntityData.defineId(Allay.class, EntityDataSerializers.BOOLEAN);
-    protected static final ImmutableList<SensorType<? extends Sensor<? super Allay>>> SENSOR_TYPES = ImmutableList.of(
-        SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.HURT_BY, SensorType.NEAREST_ITEMS
-    );
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(
-        MemoryModuleType.PATH,
-        MemoryModuleType.LOOK_TARGET,
-        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
-        MemoryModuleType.WALK_TARGET,
-        MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
-        MemoryModuleType.HURT_BY,
-        MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM,
-        MemoryModuleType.LIKED_PLAYER,
-        MemoryModuleType.LIKED_NOTEBLOCK_POSITION,
-        MemoryModuleType.LIKED_NOTEBLOCK_COOLDOWN_TICKS,
-        MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS,
-        MemoryModuleType.IS_PANICKING
-    );
-    public static final ImmutableList<Float> THROW_SOUND_PITCHES = ImmutableList.of(
-        0.5625F, 0.625F, 0.75F, 0.9375F, 1.0F, 1.0F, 1.125F, 1.25F, 1.5F, 1.875F, 2.0F, 2.25F, 2.5F, 3.0F, 3.75F, 4.0F
-    );
+    protected static final ImmutableList<SensorType<? extends Sensor<? super Allay>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.HURT_BY, SensorType.NEAREST_ITEMS);
+    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.PATH, MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.HURT_BY, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.LIKED_PLAYER, MemoryModuleType.LIKED_NOTEBLOCK_POSITION, MemoryModuleType.LIKED_NOTEBLOCK_COOLDOWN_TICKS, MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS, MemoryModuleType.IS_PANICKING, new MemoryModuleType[0]);
+    public static final ImmutableList<Float> THROW_SOUND_PITCHES = ImmutableList.of(0.5625F, 0.625F, 0.75F, 0.9375F, 1.0F, 1.0F, 1.125F, 1.25F, 1.5F, 1.875F, 2.0F, 2.25F, new Float[]{2.5F, 3.0F, 3.75F, 4.0F});
     private final DynamicGameEventListener<VibrationSystem.Listener> dynamicVibrationListener;
     private VibrationSystem.Data vibrationData;
     private final VibrationSystem.User vibrationUser;
     private final DynamicGameEventListener<Allay.JukeboxListener> dynamicJukeboxListener;
     private final SimpleContainer inventory = new SimpleContainer(1);
     @Nullable
-    private BlockPos jukeboxPos;
-    private long duplicationCooldown;
+    public BlockPos jukeboxPos;
+    public long duplicationCooldown;
     private float holdingItemAnimationTicks;
     private float holdingItemAnimationTicks0;
     private float dancingAnimationTicks;
     private float spinningAnimationTicks;
     private float spinningAnimationTicks0;
+    public boolean forceDancing = false; // CraftBukkit
 
     public Allay(EntityType<? extends Allay> entityType, Level level) {
         super(entityType, level);
         this.moveControl = new FlyingMoveControl(this, 20, true);
         this.setCanPickUpLoot(this.canPickUpLoot());
-        this.vibrationUser = new Allay.VibrationUser();
+        this.vibrationUser = new Allay.b();
         this.vibrationData = new VibrationSystem.Data();
         this.dynamicVibrationListener = new DynamicGameEventListener<>(new VibrationSystem.Listener(this));
-        this.dynamicJukeboxListener = new DynamicGameEventListener<>(
-            new Allay.JukeboxListener(this.vibrationUser.getPositionSource(), GameEvent.JUKEBOX_PLAY.getNotificationRadius())
-        );
+        this.dynamicJukeboxListener = new DynamicGameEventListener<>(new Allay.JukeboxListener(this.vibrationUser.getPositionSource(), GameEvent.JUKEBOX_PLAY.getNotificationRadius()));
     }
 
+    // CraftBukkit start
+    public void setCanDuplicate(boolean canDuplicate) {
+        this.entityData.set(Allay.DATA_CAN_DUPLICATE, canDuplicate);
+    }
+    // CraftBukkit end
+
     @Override
     protected Brain.Provider<Allay> brainProvider() {
-        return Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
+        return Brain.provider(Allay.MEMORY_TYPES, Allay.SENSOR_TYPES);
     }
 
     @Override
@@ -137,32 +129,28 @@
 
     @Override
     public Brain<Allay> getBrain() {
-        return (Brain<Allay>)super.getBrain();
+        return (Brain<Allay>) super.getBrain(); // CraftBukkit - decompile error
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Mob.createMobAttributes()
-            .add(Attributes.MAX_HEALTH, 20.0)
-            .add(Attributes.FLYING_SPEED, 0.1F)
-            .add(Attributes.MOVEMENT_SPEED, 0.1F)
-            .add(Attributes.ATTACK_DAMAGE, 2.0)
-            .add(Attributes.FOLLOW_RANGE, 48.0);
+        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 20.0D).add(Attributes.FLYING_SPEED, 0.10000000149011612D).add(Attributes.MOVEMENT_SPEED, 0.10000000149011612D).add(Attributes.ATTACK_DAMAGE, 2.0D).add(Attributes.FOLLOW_RANGE, 48.0D);
     }
 
     @Override
     protected PathNavigation createNavigation(Level level) {
-        FlyingPathNavigation flyingPathNavigation = new FlyingPathNavigation(this, level);
-        flyingPathNavigation.setCanOpenDoors(false);
-        flyingPathNavigation.setCanFloat(true);
-        flyingPathNavigation.setCanPassDoors(true);
-        return flyingPathNavigation;
+        FlyingPathNavigation navigationflying = new FlyingPathNavigation(this, level);
+
+        navigationflying.setCanOpenDoors(false);
+        navigationflying.setCanFloat(true);
+        navigationflying.setCanPassDoors(true);
+        return navigationflying;
     }
 
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_DANCING, false);
-        this.entityData.define(DATA_CAN_DUPLICATE, true);
+        this.entityData.define(Allay.DATA_DANCING, false);
+        this.entityData.define(Allay.DATA_CAN_DUPLICATE, true);
     }
 
     @Override
@@ -170,16 +158,16 @@
         if (this.isControlledByLocalInstance()) {
             if (this.isInWater()) {
                 this.moveRelative(0.02F, travelVector);
-                this.move(MoverType.SELF, this.getDeltaMovement());
-                this.setDeltaMovement(this.getDeltaMovement().scale(0.8F));
+                this.move(EnumMoveType.SELF, this.getDeltaMovement());
+                this.setDeltaMovement(this.getDeltaMovement().scale(0.800000011920929D));
             } else if (this.isInLava()) {
                 this.moveRelative(0.02F, travelVector);
-                this.move(MoverType.SELF, this.getDeltaMovement());
-                this.setDeltaMovement(this.getDeltaMovement().scale(0.5));
+                this.move(EnumMoveType.SELF, this.getDeltaMovement());
+                this.setDeltaMovement(this.getDeltaMovement().scale(0.5D));
             } else {
                 this.moveRelative(this.getSpeed(), travelVector);
-                this.move(MoverType.SELF, this.getDeltaMovement());
-                this.setDeltaMovement(this.getDeltaMovement().scale(0.91F));
+                this.move(EnumMoveType.SELF, this.getDeltaMovement());
+                this.setDeltaMovement(this.getDeltaMovement().scale(0.9100000262260437D));
             }
         }
 
@@ -187,15 +175,19 @@
     }
 
     @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions dimensions) {
         return dimensions.height * 0.6F;
     }
 
     @Override
     public boolean hurt(DamageSource source, float amount) {
-        if (source.getEntity() instanceof Player player) {
-            Optional<UUID> memory = this.getBrain().getMemory(MemoryModuleType.LIKED_PLAYER);
-            if (memory.isPresent() && player.getUUID().equals(memory.get())) {
+        Entity entity = source.getEntity();
+
+        if (entity instanceof Player) {
+            Player entityhuman = (Player) entity;
+            Optional<UUID> optional = this.getBrain().getMemory(MemoryModuleType.LIKED_PLAYER);
+
+            if (optional.isPresent() && entityhuman.getUUID().equals(optional.get())) {
                 return false;
             }
         }
@@ -204,12 +196,10 @@
     }
 
     @Override
-    protected void playStepSound(BlockPos pos, BlockState state) {
-    }
+    protected void playStepSound(BlockPos pos, IBlockData state) {}
 
     @Override
-    protected void checkFallDamage(double y, boolean onGround, BlockState state, BlockPos pos) {
-    }
+    protected void checkFallDamage(double y, boolean flag, IBlockData onGround, BlockPos state) {}
 
     @Override
     protected SoundEvent getAmbientSound() {
@@ -234,7 +224,7 @@
     @Override
     protected void customServerAiStep() {
         this.level().getProfiler().push("allayBrain");
-        this.getBrain().tick((ServerLevel)this.level(), this);
+        this.getBrain().tick((ServerLevel) this.level(), this);
         this.level().getProfiler().pop();
         this.level().getProfiler().push("allayActivityUpdate");
         AllayAi.updateActivity(this);
@@ -246,7 +236,7 @@
     public void aiStep() {
         super.aiStep();
         if (!this.level().isClientSide && this.isAlive() && this.tickCount % 10 == 0) {
-            this.heal(1.0F);
+            this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
         }
 
         if (this.isDancing() && this.shouldStopDancing() && this.tickCount % 20 == 0) {
@@ -269,12 +259,12 @@
             }
 
             if (this.isDancing()) {
-                this.dancingAnimationTicks++;
+                ++this.dancingAnimationTicks;
                 this.spinningAnimationTicks0 = this.spinningAnimationTicks;
                 if (this.isSpinning()) {
-                    this.spinningAnimationTicks++;
+                    ++this.spinningAnimationTicks;
                 } else {
-                    this.spinningAnimationTicks--;
+                    --this.spinningAnimationTicks;
                 }
 
                 this.spinningAnimationTicks = Mth.clamp(this.spinningAnimationTicks, 0.0F, 15.0F);
@@ -289,6 +279,7 @@
                 this.setDancing(false);
             }
         }
+
     }
 
     @Override
@@ -297,11 +288,11 @@
     }
 
     public boolean hasItemInHand() {
-        return !this.getItemInHand(InteractionHand.MAIN_HAND).isEmpty();
+        return !this.getItemInHand(EnumHand.MAIN_HAND).isEmpty();
     }
 
     @Override
-    public boolean canTakeItem(ItemStack itemstack) {
+    public boolean canTakeItem(ItemStack stack) {
         return false;
     }
 
@@ -310,33 +301,43 @@
     }
 
     @Override
-    protected InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemInHand = player.getItemInHand(hand);
-        ItemStack itemInHand1 = this.getItemInHand(InteractionHand.MAIN_HAND);
-        if (this.isDancing() && this.isDuplicationItem(itemInHand) && this.canDuplicate()) {
-            this.duplicateAllay();
-            this.level().broadcastEntityEvent(this, (byte)18);
-            this.level().playSound(player, this, SoundEvents.AMETHYST_BLOCK_CHIME, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.removeInteractionItem(player, itemInHand);
+    protected InteractionResult mobInteract(Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
+        ItemStack itemstack1 = this.getItemInHand(EnumHand.MAIN_HAND);
+
+        if (this.isDancing() && this.isDuplicationItem(itemstack) && this.canDuplicate()) {
+            // CraftBukkit start - handle cancel duplication
+            Allay allay = this.duplicateAllay();
+            if (allay == null) {
+                return InteractionResult.SUCCESS;
+            }
+            // CraftBukkit end
+            this.level().broadcastEntityEvent(this, (byte) 18);
+            this.level().playSound(player, (Entity) this, SoundEvents.AMETHYST_BLOCK_CHIME, SoundSource.NEUTRAL, 2.0F, 1.0F);
+            this.removeInteractionItem(player, itemstack);
             return InteractionResult.SUCCESS;
-        } else if (itemInHand1.isEmpty() && !itemInHand.isEmpty()) {
-            ItemStack itemStack = itemInHand.copyWithCount(1);
-            this.setItemInHand(InteractionHand.MAIN_HAND, itemStack);
-            this.removeInteractionItem(player, itemInHand);
-            this.level().playSound(player, this, SoundEvents.ALLAY_ITEM_GIVEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.getBrain().setMemory(MemoryModuleType.LIKED_PLAYER, player.getUUID());
+        } else if (itemstack1.isEmpty() && !itemstack.isEmpty()) {
+            ItemStack itemstack2 = itemstack.copyWithCount(1);
+
+            this.setItemInHand(EnumHand.MAIN_HAND, itemstack2);
+            this.removeInteractionItem(player, itemstack);
+            this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_GIVEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
+            this.getBrain().setMemory(MemoryModuleType.LIKED_PLAYER, player.getUUID()); // CraftBukkit - decompile error
             return InteractionResult.SUCCESS;
-        } else if (!itemInHand1.isEmpty() && hand == InteractionHand.MAIN_HAND && itemInHand.isEmpty()) {
+        } else if (!itemstack1.isEmpty() && hand == EnumHand.MAIN_HAND && itemstack.isEmpty()) {
             this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
-            this.level().playSound(player, this, SoundEvents.ALLAY_ITEM_TAKEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.swing(InteractionHand.MAIN_HAND);
+            this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_TAKEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
+            this.swing(EnumHand.MAIN_HAND);
+            Iterator iterator = this.getInventory().removeAllItems().iterator();
 
-            for (ItemStack itemStack1 : this.getInventory().removeAllItems()) {
-                BehaviorUtils.throwItem(this, itemStack1, this.position());
+            while (iterator.hasNext()) {
+                ItemStack itemstack3 = (ItemStack) iterator.next();
+
+                BehaviorUtils.throwItem(this, itemstack3, this.position());
             }
 
             this.getBrain().eraseMemory(MemoryModuleType.LIKED_PLAYER);
-            player.addItem(itemInHand1);
+            player.addItem(itemstack1);
             return InteractionResult.SUCCESS;
         } else {
             return super.mobInteract(player, hand);
@@ -353,6 +354,7 @@
             this.jukeboxPos = null;
             this.setDancing(false);
         }
+
     }
 
     @Override
@@ -362,16 +364,14 @@
 
     @Override
     protected Vec3i getPickupReach() {
-        return ITEM_PICKUP_REACH;
+        return Allay.ITEM_PICKUP_REACH;
     }
 
     @Override
     public boolean wantsToPickUp(ItemStack stack) {
-        ItemStack itemInHand = this.getItemInHand(InteractionHand.MAIN_HAND);
-        return !itemInHand.isEmpty()
-            && this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)
-            && this.inventory.canAddItem(stack)
-            && this.allayConsidersItemEqual(itemInHand, stack);
+        ItemStack itemstack1 = this.getItemInHand(EnumHand.MAIN_HAND);
+
+        return !itemstack1.isEmpty() && this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && this.inventory.canAddItem(stack) && this.allayConsidersItemEqual(itemstack1, stack);
     }
 
     private boolean allayConsidersItemEqual(ItemStack first, ItemStack second) {
@@ -379,19 +379,22 @@
     }
 
     private boolean hasNonMatchingPotion(ItemStack first, ItemStack second) {
-        CompoundTag tag = first.getTag();
-        boolean flag = tag != null && tag.contains("Potion");
+        CompoundTag nbttagcompound = first.getTag();
+        boolean flag = nbttagcompound != null && nbttagcompound.contains("Potion");
+
         if (!flag) {
             return false;
         } else {
-            CompoundTag tag1 = second.getTag();
-            boolean flag1 = tag1 != null && tag1.contains("Potion");
+            CompoundTag nbttagcompound1 = second.getTag();
+            boolean flag1 = nbttagcompound1 != null && nbttagcompound1.contains("Potion");
+
             if (!flag1) {
                 return true;
             } else {
-                Tag tag2 = tag.get("Potion");
-                Tag tag3 = tag1.get("Potion");
-                return tag2 != null && tag3 != null && !tag2.equals(tag3);
+                Tag nbtbase = nbttagcompound.get("Potion");
+                Tag nbtbase1 = nbttagcompound1.get("Potion");
+
+                return nbtbase != null && nbtbase1 != null && !nbtbase.equals(nbtbase1);
             }
         }
     }
@@ -414,26 +417,30 @@
 
     @Override
     public void updateDynamicGameEventListener(BiConsumer<DynamicGameEventListener<?>, ServerLevel> listenerConsumer) {
-        if (this.level() instanceof ServerLevel serverLevel) {
-            listenerConsumer.accept(this.dynamicVibrationListener, serverLevel);
-            listenerConsumer.accept(this.dynamicJukeboxListener, serverLevel);
+        Level world = this.level();
+
+        if (world instanceof ServerLevel) {
+            ServerLevel worldserver = (ServerLevel) world;
+
+            listenerConsumer.accept(this.dynamicVibrationListener, worldserver);
+            listenerConsumer.accept(this.dynamicJukeboxListener, worldserver);
         }
+
     }
 
     public boolean isDancing() {
-        return this.entityData.get(DATA_DANCING);
+        return (Boolean) this.entityData.get(Allay.DATA_DANCING);
     }
 
     public void setDancing(boolean dancing) {
         if (!this.level().isClientSide && this.isEffectiveAi() && (!dancing || !this.isPanicking())) {
-            this.entityData.set(DATA_DANCING, dancing);
+            this.entityData.set(Allay.DATA_DANCING, dancing);
         }
     }
 
     private boolean shouldStopDancing() {
-        return this.jukeboxPos == null
-            || !this.jukeboxPos.closerToCenterThan(this.position(), (double)GameEvent.JUKEBOX_PLAY.getNotificationRadius())
-            || !this.level().getBlockState(this.jukeboxPos).is(Blocks.JUKEBOX);
+        if (this.forceDancing) {return false;} // CraftBukkit
+        return this.jukeboxPos == null || !this.jukeboxPos.closerToCenterThan(this.position(), (double) GameEvent.JUKEBOX_PLAY.getNotificationRadius()) || !this.level().getBlockState(this.jukeboxPos).is(Blocks.JUKEBOX);
     }
 
     public float getHoldingItemAnimationProgress(float partialTick) {
@@ -442,6 +449,7 @@
 
     public boolean isSpinning() {
         float f = this.dancingAnimationTicks % 55.0F;
+
         return f < 15.0F;
     }
 
@@ -458,11 +466,13 @@
     protected void dropEquipment() {
         super.dropEquipment();
         this.inventory.removeAllItems().forEach(this::spawnAtLocation);
-        ItemStack itemBySlot = this.getItemBySlot(EquipmentSlot.MAINHAND);
-        if (!itemBySlot.isEmpty() && !EnchantmentHelper.hasVanishingCurse(itemBySlot)) {
-            this.spawnAtLocation(itemBySlot);
+        ItemStack itemstack = this.getItemBySlot(EquipmentSlot.MAINHAND);
+
+        if (!itemstack.isEmpty() && !EnchantmentHelper.hasVanishingCurse(itemstack)) {
+            this.spawnAtLocation(itemstack);
             this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
         }
+
     }
 
     @Override
@@ -474,10 +484,13 @@
     public void addAdditionalSaveData(CompoundTag compound) {
         super.addAdditionalSaveData(compound);
         this.writeInventoryToTag(compound);
-        VibrationSystem.Data.CODEC
-            .encodeStart(NbtOps.INSTANCE, this.vibrationData)
-            .resultOrPartial(LOGGER::error)
-            .ifPresent(tag -> compound.put("listener", tag));
+        DataResult<net.minecraft.nbt.Tag> dataresult = VibrationSystem.Data.CODEC.encodeStart(NbtOps.INSTANCE, this.vibrationData); // CraftBukkit - decompile error
+        Logger logger = Allay.LOGGER;
+
+        Objects.requireNonNull(logger);
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+            compound.put("listener", nbtbase);
+        });
         compound.putLong("DuplicationCooldown", this.duplicationCooldown);
         compound.putBoolean("CanDuplicate", this.canDuplicate());
     }
@@ -487,14 +500,17 @@
         super.readAdditionalSaveData(compound);
         this.readInventoryFromTag(compound);
         if (compound.contains("listener", 10)) {
-            VibrationSystem.Data.CODEC
-                .parse(new Dynamic<>(NbtOps.INSTANCE, compound.getCompound("listener")))
-                .resultOrPartial(LOGGER::error)
-                .ifPresent(vibrationData -> this.vibrationData = vibrationData);
+            DataResult<VibrationSystem.Data> dataresult = VibrationSystem.Data.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compound.getCompound("listener"))); // CraftBukkit - decompile error
+            Logger logger = Allay.LOGGER;
+
+            Objects.requireNonNull(logger);
+            dataresult.resultOrPartial(logger::error).ifPresent((vibrationsystem_a) -> {
+                this.vibrationData = vibrationsystem_a;
+            });
         }
 
-        this.duplicationCooldown = (long)compound.getInt("DuplicationCooldown");
-        this.entityData.set(DATA_CAN_DUPLICATE, compound.getBoolean("CanDuplicate"));
+        this.duplicationCooldown = (long) compound.getInt("DuplicationCooldown");
+        this.entityData.set(Allay.DATA_CAN_DUPLICATE, compound.getBoolean("CanDuplicate"));
     }
 
     @Override
@@ -504,47 +520,51 @@
 
     private void updateDuplicationCooldown() {
         if (this.duplicationCooldown > 0L) {
-            this.duplicationCooldown--;
+            --this.duplicationCooldown;
         }
 
         if (!this.level().isClientSide() && this.duplicationCooldown == 0L && !this.canDuplicate()) {
-            this.entityData.set(DATA_CAN_DUPLICATE, true);
+            this.entityData.set(Allay.DATA_CAN_DUPLICATE, true);
         }
+
     }
 
     private boolean isDuplicationItem(ItemStack stack) {
-        return DUPLICATION_ITEM.test(stack);
+        return Allay.DUPLICATION_ITEM.test(stack);
     }
 
-    private void duplicateAllay() {
-        Allay allay = EntityType.ALLAY.create(this.level());
+    public Allay duplicateAllay() { // CraftBukkit - return allay
+        Allay allay = (Allay) EntityType.ALLAY.create(this.level());
+
         if (allay != null) {
             allay.moveTo(this.position());
             allay.setPersistenceRequired();
             allay.resetDuplicationCooldown();
             this.resetDuplicationCooldown();
-            this.level().addFreshEntity(allay);
+            this.level().addFreshEntity(allay, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DUPLICATION); // CraftBukkit - reason for duplicated allay
         }
+        return allay; // CraftBukkit
     }
 
-    private void resetDuplicationCooldown() {
+    public void resetDuplicationCooldown() {
         this.duplicationCooldown = 6000L;
-        this.entityData.set(DATA_CAN_DUPLICATE, false);
+        this.entityData.set(Allay.DATA_CAN_DUPLICATE, false);
     }
 
-    private boolean canDuplicate() {
-        return this.entityData.get(DATA_CAN_DUPLICATE);
+    public boolean canDuplicate() {
+        return (Boolean) this.entityData.get(Allay.DATA_CAN_DUPLICATE);
     }
 
     private void removeInteractionItem(Player player, ItemStack stack) {
         if (!player.getAbilities().instabuild) {
             stack.shrink(1);
         }
+
     }
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0, (double)this.getEyeHeight() * 0.6, (double)this.getBbWidth() * 0.1);
+        return new Vec3(0.0D, (double) this.getEyeHeight() * 0.6D, (double) this.getBbWidth() * 0.1D);
     }
 
     @Override
@@ -555,19 +575,21 @@
     @Override
     public void handleEntityEvent(byte id) {
         if (id == 18) {
-            for (int i = 0; i < 3; i++) {
+            for (int i = 0; i < 3; ++i) {
                 this.spawnHeartParticle();
             }
         } else {
             super.handleEntityEvent(id);
         }
+
     }
 
     private void spawnHeartParticle() {
-        double d = this.random.nextGaussian() * 0.02;
-        double d1 = this.random.nextGaussian() * 0.02;
-        double d2 = this.random.nextGaussian() * 0.02;
-        this.level().addParticle(ParticleTypes.HEART, this.getRandomX(1.0), this.getRandomY() + 0.5, this.getRandomZ(1.0), d, d1, d2);
+        double d0 = this.random.nextGaussian() * 0.02D;
+        double d1 = this.random.nextGaussian() * 0.02D;
+        double d2 = this.random.nextGaussian() * 0.02D;
+
+        this.level().addParticle(ParticleTypes.HEART, this.getRandomX(1.0D), this.getRandomY() + 0.5D, this.getRandomZ(1.0D), d0, d1, d2);
     }
 
     @Override
@@ -580,43 +602,13 @@
         return this.vibrationUser;
     }
 
-    class JukeboxListener implements GameEventListener {
-        private final PositionSource listenerSource;
-        private final int listenerRadius;
+    private class b implements VibrationSystem.User {
 
-        public JukeboxListener(PositionSource listenerSource, int listenerRadius) {
-            this.listenerSource = listenerSource;
-            this.listenerRadius = listenerRadius;
-        }
-
-        @Override
-        public PositionSource getListenerSource() {
-            return this.listenerSource;
-        }
-
-        @Override
-        public int getListenerRadius() {
-            return this.listenerRadius;
-        }
-
-        @Override
-        public boolean handleGameEvent(ServerLevel level, GameEvent gameEvent, GameEvent.Context context, Vec3 pos) {
-            if (gameEvent == GameEvent.JUKEBOX_PLAY) {
-                Allay.this.setJukeboxPlaying(BlockPos.containing(pos), true);
-                return true;
-            } else if (gameEvent == GameEvent.JUKEBOX_STOP_PLAY) {
-                Allay.this.setJukeboxPlaying(BlockPos.containing(pos), false);
-                return true;
-            } else {
-                return false;
-            }
-        }
-    }
-
-    class VibrationUser implements VibrationSystem.User {
         private static final int VIBRATION_EVENT_LISTENER_RANGE = 16;
         private final PositionSource positionSource = new EntityPositionSource(Allay.this, Allay.this.getEyeHeight());
 
+        b() {}
+
         @Override
         public int getListenerRadius() {
             return 16;
@@ -632,23 +624,24 @@
             if (Allay.this.isNoAi()) {
                 return false;
             } else {
-                Optional<GlobalPos> memory = Allay.this.getBrain().getMemory(MemoryModuleType.LIKED_NOTEBLOCK_POSITION);
-                if (memory.isEmpty()) {
+                Optional<GlobalPos> optional = Allay.this.getBrain().getMemory(MemoryModuleType.LIKED_NOTEBLOCK_POSITION);
+
+                if (optional.isEmpty()) {
                     return true;
                 } else {
-                    GlobalPos globalPos = memory.get();
-                    return globalPos.dimension().equals(level.dimension()) && globalPos.pos().equals(pos);
+                    GlobalPos globalpos = (GlobalPos) optional.get();
+
+                    return globalpos.dimension().equals(level.dimension()) && globalpos.pos().equals(pos);
                 }
             }
         }
 
         @Override
-        public void onReceiveVibration(
-            ServerLevel level, BlockPos pos, GameEvent gameEvent, @Nullable Entity entity, @Nullable Entity playerEntity, float distance
-        ) {
+        public void onReceiveVibration(ServerLevel level, BlockPos pos, GameEvent gameEvent, @Nullable Entity entity, @Nullable Entity playerEntity, float distance) {
             if (gameEvent == GameEvent.NOTE_BLOCK_PLAY) {
                 AllayAi.hearNoteblock(Allay.this, new BlockPos(pos));
             }
+
         }
 
         @Override
@@ -656,4 +649,38 @@
             return GameEventTags.ALLAY_CAN_LISTEN;
         }
     }
+
+    private class JukeboxListener implements GameEventListener {
+
+        private final PositionSource listenerSource;
+        private final int listenerRadius;
+
+        public JukeboxListener(PositionSource positionsource, int i) {
+            this.listenerSource = positionsource;
+            this.listenerRadius = i;
+        }
+
+        @Override
+        public PositionSource getListenerSource() {
+            return this.listenerSource;
+        }
+
+        @Override
+        public int getListenerRadius() {
+            return this.listenerRadius;
+        }
+
+        @Override
+        public boolean handleGameEvent(ServerLevel level, GameEvent gameEvent, GameEvent.Context context, Vec3 pos) {
+            if (gameEvent == GameEvent.JUKEBOX_PLAY) {
+                Allay.this.setJukeboxPlaying(BlockPos.containing(pos), true);
+                return true;
+            } else if (gameEvent == GameEvent.JUKEBOX_STOP_PLAY) {
+                Allay.this.setJukeboxPlaying(BlockPos.containing(pos), false);
+                return true;
+            } else {
+                return false;
+            }
+        }
+    }
 }
