--- a/net/minecraft/world/entity/item/ItemEntity.java
+++ b/net/minecraft/world/entity/item/ItemEntity.java
@@ -1,17 +1,10 @@
 package net.minecraft.world.entity.item;
 
+import java.util.Iterator;
+import java.util.List;
 import java.util.Objects;
 import java.util.UUID;
 import javax.annotation.Nullable;
-import net.minecraft.core.BlockPos;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.syncher.EntityDataAccessor;
-import net.minecraft.network.syncher.EntityDataSerializers;
-import net.minecraft.network.syncher.SynchedEntityData;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.sounds.SoundSource;
-import net.minecraft.stats.Stats;
 import net.minecraft.tags.DamageTypeTags;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.tags.ItemTags;
@@ -19,51 +12,70 @@
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.MoverType;
+import net.minecraft.world.entity.EnumMoveType;
 import net.minecraft.world.entity.TraceableEntity;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.Vec3;
+import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.syncher.EntityDataAccessor;
+import net.minecraft.network.syncher.EntityDataSerializers;
+import net.minecraft.network.syncher.SynchedEntityData;
+// CraftBukkit start
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.stats.Stats;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.EntityPickupItemEvent;
+import org.bukkit.event.player.PlayerPickupItemEvent;
+// CraftBukkit end
 
 public class ItemEntity extends Entity implements TraceableEntity {
+
     private static final EntityDataAccessor<ItemStack> DATA_ITEM = SynchedEntityData.defineId(ItemEntity.class, EntityDataSerializers.ITEM_STACK);
     private static final int LIFETIME = 6000;
     private static final int INFINITE_PICKUP_DELAY = 32767;
     private static final int INFINITE_LIFETIME = -32768;
-    private int age;
-    private int pickupDelay;
-    private int health = 5;
+    public int age;
+    public int pickupDelay;
+    private int health;
     @Nullable
-    private UUID thrower;
+    public UUID thrower;
     @Nullable
     private Entity cachedThrower;
     @Nullable
-    private UUID target;
+    public UUID target;
     public final float bobOffs;
+    private int lastTick = MinecraftServer.currentTick - 1; // CraftBukkit
 
     public ItemEntity(EntityType<? extends ItemEntity> entityType, Level level) {
         super(entityType, level);
-        this.bobOffs = this.random.nextFloat() * (float) Math.PI * 2.0F;
+        this.health = 5;
+        this.bobOffs = this.random.nextFloat() * 3.1415927F * 2.0F;
         this.setYRot(this.random.nextFloat() * 360.0F);
     }
 
-    public ItemEntity(Level level, double posX, double posY, double posZ, ItemStack itemStack) {
-        this(level, posX, posY, posZ, itemStack, level.random.nextDouble() * 0.2 - 0.1, 0.2, level.random.nextDouble() * 0.2 - 0.1);
+    public ItemEntity(Level level, double posX, double d1, double posY, ItemStack itemstack) {
+        this(level, posX, d1, posY, itemstack, level.random.nextDouble() * 0.2D - 0.1D, 0.2D, level.random.nextDouble() * 0.2D - 0.1D);
     }
 
-    public ItemEntity(Level level, double posX, double posY, double posZ, ItemStack itemStack, double deltaX, double deltaY, double deltaZ) {
+    public ItemEntity(Level level, double posX, double d1, double posY, ItemStack itemstack, double posZ, double d4, double itemStack) {
         this(EntityType.ITEM, level);
-        this.setPos(posX, posY, posZ);
-        this.setDeltaMovement(deltaX, deltaY, deltaZ);
-        this.setItem(itemStack);
+        this.setPos(posX, d1, posY);
+        this.setDeltaMovement(posZ, d4, itemStack);
+        this.setItem(itemstack);
     }
 
     private ItemEntity(ItemEntity other) {
         super(other.getType(), other.level());
+        this.health = 5;
         this.setItem(other.getItem().copy());
         this.copyPosition(other);
         this.age = other.age;
@@ -80,10 +92,18 @@
     public Entity getOwner() {
         if (this.cachedThrower != null && !this.cachedThrower.isRemoved()) {
             return this.cachedThrower;
-        } else if (this.thrower != null && this.level() instanceof ServerLevel serverLevel) {
-            this.cachedThrower = serverLevel.getEntity(this.thrower);
-            return this.cachedThrower;
         } else {
+            if (this.thrower != null) {
+                Level world = this.level();
+
+                if (world instanceof ServerLevel) {
+                    ServerLevel worldserver = (ServerLevel) world;
+
+                    this.cachedThrower = worldserver.getEntity(this.thrower);
+                    return this.cachedThrower;
+                }
+            }
+
             return null;
         }
     }
@@ -91,9 +111,12 @@
     @Override
     public void restoreFrom(Entity entity) {
         super.restoreFrom(entity);
-        if (entity instanceof ItemEntity itemEntity) {
-            this.cachedThrower = itemEntity.cachedThrower;
+        if (entity instanceof ItemEntity) {
+            ItemEntity entityitem = (ItemEntity) entity;
+
+            this.cachedThrower = entityitem.cachedThrower;
         }
+
     }
 
     @Override
@@ -103,7 +126,7 @@
 
     @Override
     protected void defineSynchedData() {
-        this.getEntityData().define(DATA_ITEM, ItemStack.EMPTY);
+        this.getEntityData().define(ItemEntity.DATA_ITEM, ItemStack.EMPTY);
     }
 
     @Override
@@ -112,71 +135,86 @@
             this.discard();
         } else {
             super.tick();
-            if (this.pickupDelay > 0 && this.pickupDelay != 32767) {
-                this.pickupDelay--;
-            }
+            // CraftBukkit start - Use wall time for pickup and despawn timers
+            int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+            if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
+            if (this.age != -32768) this.age += elapsedTicks;
+            this.lastTick = MinecraftServer.currentTick;
+            // CraftBukkit end
 
             this.xo = this.getX();
             this.yo = this.getY();
             this.zo = this.getZ();
-            Vec3 deltaMovement = this.getDeltaMovement();
+            Vec3 vec3d = this.getDeltaMovement();
             float f = this.getEyeHeight() - 0.11111111F;
-            if (this.isInWater() && this.getFluidHeight(FluidTags.WATER) > (double)f) {
+
+            if (this.isInWater() && this.getFluidHeight(FluidTags.WATER) > (double) f) {
                 this.setUnderwaterMovement();
-            } else if (this.isInLava() && this.getFluidHeight(FluidTags.LAVA) > (double)f) {
+            } else if (this.isInLava() && this.getFluidHeight(FluidTags.LAVA) > (double) f) {
                 this.setUnderLavaMovement();
             } else if (!this.isNoGravity()) {
-                this.setDeltaMovement(this.getDeltaMovement().add(0.0, -0.04, 0.0));
+                this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.04D, 0.0D));
             }
 
             if (this.level().isClientSide) {
                 this.noPhysics = false;
             } else {
-                this.noPhysics = !this.level().noCollision(this, this.getBoundingBox().deflate(1.0E-7));
+                this.noPhysics = !this.level().noCollision(this, this.getBoundingBox().deflate(1.0E-7D));
                 if (this.noPhysics) {
-                    this.moveTowardsClosestSpace(this.getX(), (this.getBoundingBox().minY + this.getBoundingBox().maxY) / 2.0, this.getZ());
+                    this.moveTowardsClosestSpace(this.getX(), (this.getBoundingBox().minY + this.getBoundingBox().maxY) / 2.0D, this.getZ());
                 }
             }
 
-            if (!this.onGround() || this.getDeltaMovement().horizontalDistanceSqr() > 1.0E-5F || (this.tickCount + this.getId()) % 4 == 0) {
-                this.move(MoverType.SELF, this.getDeltaMovement());
+            if (!this.onGround() || this.getDeltaMovement().horizontalDistanceSqr() > 9.999999747378752E-6D || (this.tickCount + this.getId()) % 4 == 0) {
+                this.move(EnumMoveType.SELF, this.getDeltaMovement());
                 float f1 = 0.98F;
+
                 if (this.onGround()) {
                     f1 = this.level().getBlockState(this.getBlockPosBelowThatAffectsMyMovement()).getBlock().getFriction() * 0.98F;
                 }
 
-                this.setDeltaMovement(this.getDeltaMovement().multiply((double)f1, 0.98, (double)f1));
+                this.setDeltaMovement(this.getDeltaMovement().multiply((double) f1, 0.98D, (double) f1));
                 if (this.onGround()) {
-                    Vec3 deltaMovement1 = this.getDeltaMovement();
-                    if (deltaMovement1.y < 0.0) {
-                        this.setDeltaMovement(deltaMovement1.multiply(1.0, -0.5, 1.0));
+                    Vec3 vec3d1 = this.getDeltaMovement();
+
+                    if (vec3d1.y < 0.0D) {
+                        this.setDeltaMovement(vec3d1.multiply(1.0D, -0.5D, 1.0D));
                     }
                 }
             }
 
-            boolean flag = Mth.floor(this.xo) != Mth.floor(this.getX())
-                || Mth.floor(this.yo) != Mth.floor(this.getY())
-                || Mth.floor(this.zo) != Mth.floor(this.getZ());
+            boolean flag = Mth.floor(this.xo) != Mth.floor(this.getX()) || Mth.floor(this.yo) != Mth.floor(this.getY()) || Mth.floor(this.zo) != Mth.floor(this.getZ());
             int i = flag ? 2 : 40;
+
             if (this.tickCount % i == 0 && !this.level().isClientSide && this.isMergable()) {
                 this.mergeWithNeighbours();
             }
 
+            /* CraftBukkit start - moved up
             if (this.age != -32768) {
-                this.age++;
+                ++this.age;
             }
+            // CraftBukkit end */
 
-            this.hasImpulse = this.hasImpulse | this.updateInWaterStateAndDoFluidPushing();
+            this.hasImpulse |= this.updateInWaterStateAndDoFluidPushing();
             if (!this.level().isClientSide) {
-                double d = this.getDeltaMovement().subtract(deltaMovement).lengthSqr();
-                if (d > 0.01) {
+                double d0 = this.getDeltaMovement().subtract(vec3d).lengthSqr();
+
+                if (d0 > 0.01D) {
                     this.hasImpulse = true;
                 }
             }
 
             if (!this.level().isClientSide && this.age >= 6000) {
+                // CraftBukkit start - fire ItemDespawnEvent
+                if (CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
+                    this.age = 0;
+                    return;
+                }
+                // CraftBukkit end
                 this.discard();
             }
+
         }
     }
 
@@ -186,72 +224,89 @@
     }
 
     private void setUnderwaterMovement() {
-        Vec3 deltaMovement = this.getDeltaMovement();
-        this.setDeltaMovement(deltaMovement.x * 0.99F, deltaMovement.y + (double)(deltaMovement.y < 0.06F ? 5.0E-4F : 0.0F), deltaMovement.z * 0.99F);
+        Vec3 vec3d = this.getDeltaMovement();
+
+        this.setDeltaMovement(vec3d.x * 0.9900000095367432D, vec3d.y + (double) (vec3d.y < 0.05999999865889549D ? 5.0E-4F : 0.0F), vec3d.z * 0.9900000095367432D);
     }
 
     private void setUnderLavaMovement() {
-        Vec3 deltaMovement = this.getDeltaMovement();
-        this.setDeltaMovement(deltaMovement.x * 0.95F, deltaMovement.y + (double)(deltaMovement.y < 0.06F ? 5.0E-4F : 0.0F), deltaMovement.z * 0.95F);
+        Vec3 vec3d = this.getDeltaMovement();
+
+        this.setDeltaMovement(vec3d.x * 0.949999988079071D, vec3d.y + (double) (vec3d.y < 0.05999999865889549D ? 5.0E-4F : 0.0F), vec3d.z * 0.949999988079071D);
     }
 
     private void mergeWithNeighbours() {
         if (this.isMergable()) {
-            for (ItemEntity itemEntity : this.level()
-                .getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(0.5, 0.0, 0.5), neighbour -> neighbour != this && neighbour.isMergable())) {
-                if (itemEntity.isMergable()) {
-                    this.tryToMerge(itemEntity);
+            List<ItemEntity> list = this.level().getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(0.5D, 0.0D, 0.5D), (entityitem) -> {
+                return entityitem != this && entityitem.isMergable();
+            });
+            Iterator iterator = list.iterator();
+
+            while (iterator.hasNext()) {
+                ItemEntity entityitem = (ItemEntity) iterator.next();
+
+                if (entityitem.isMergable()) {
+                    this.tryToMerge(entityitem);
                     if (this.isRemoved()) {
                         break;
                     }
                 }
             }
+
         }
     }
 
     private boolean isMergable() {
-        ItemStack item = this.getItem();
-        return this.isAlive() && this.pickupDelay != 32767 && this.age != -32768 && this.age < 6000 && item.getCount() < item.getMaxStackSize();
+        ItemStack itemstack = this.getItem();
+
+        return this.isAlive() && this.pickupDelay != 32767 && this.age != -32768 && this.age < 6000 && itemstack.getCount() < itemstack.getMaxStackSize();
     }
 
     private void tryToMerge(ItemEntity itemEntity) {
-        ItemStack item = this.getItem();
-        ItemStack item1 = itemEntity.getItem();
-        if (Objects.equals(this.target, itemEntity.target) && areMergable(item, item1)) {
-            if (item1.getCount() < item.getCount()) {
-                merge(this, item, itemEntity, item1);
+        ItemStack itemstack = this.getItem();
+        ItemStack itemstack1 = itemEntity.getItem();
+
+        if (Objects.equals(this.target, itemEntity.target) && areMergable(itemstack, itemstack1)) {
+            if (itemstack1.getCount() < itemstack.getCount()) {
+                merge(this, itemstack, itemEntity, itemstack1);
             } else {
-                merge(itemEntity, item1, this, item);
+                merge(itemEntity, itemstack1, this, itemstack);
             }
+
         }
     }
 
     public static boolean areMergable(ItemStack destinationStack, ItemStack originStack) {
-        return originStack.is(destinationStack.getItem())
-            && originStack.getCount() + destinationStack.getCount() <= originStack.getMaxStackSize()
-            && !(originStack.hasTag() ^ destinationStack.hasTag())
-            && (!originStack.hasTag() || originStack.getTag().equals(destinationStack.getTag()));
+        return !originStack.is(destinationStack.getItem()) ? false : (originStack.getCount() + destinationStack.getCount() > originStack.getMaxStackSize() ? false : (originStack.hasTag() ^ destinationStack.hasTag() ? false : !originStack.hasTag() || originStack.getTag().equals(destinationStack.getTag())));
     }
 
     public static ItemStack merge(ItemStack destinationStack, ItemStack originStack, int amount) {
-        int min = Math.min(Math.min(destinationStack.getMaxStackSize(), amount) - destinationStack.getCount(), originStack.getCount());
-        ItemStack itemStack = destinationStack.copyWithCount(destinationStack.getCount() + min);
-        originStack.shrink(min);
-        return itemStack;
+        int j = Math.min(Math.min(destinationStack.getMaxStackSize(), amount) - destinationStack.getCount(), originStack.getCount());
+        ItemStack itemstack2 = destinationStack.copyWithCount(destinationStack.getCount() + j);
+
+        originStack.shrink(j);
+        return itemstack2;
     }
 
     private static void merge(ItemEntity destinationEntity, ItemStack destinationStack, ItemStack originStack) {
-        ItemStack itemStack = merge(destinationStack, originStack, 64);
-        destinationEntity.setItem(itemStack);
+        ItemStack itemstack2 = merge(destinationStack, originStack, 64);
+
+        destinationEntity.setItem(itemstack2);
     }
 
     private static void merge(ItemEntity destinationEntity, ItemStack destinationStack, ItemEntity originEntity, ItemStack originStack) {
+        // CraftBukkit start
+        if (!CraftEventFactory.callItemMergeEvent(originEntity, destinationEntity)) {
+            return;
+        }
+        // CraftBukkit end
         merge(destinationEntity, destinationStack, originStack);
         destinationEntity.pickupDelay = Math.max(destinationEntity.pickupDelay, originEntity.pickupDelay);
         destinationEntity.age = Math.min(destinationEntity.age, originEntity.age);
         if (originStack.isEmpty()) {
             originEntity.discard();
         }
+
     }
 
     @Override
@@ -270,8 +325,13 @@
         } else if (this.level().isClientSide) {
             return true;
         } else {
+            // CraftBukkit start
+            if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount)) {
+                return false;
+            }
+            // CraftBukkit end
             this.markHurt();
-            this.health = (int)((float)this.health - amount);
+            this.health = (int) ((float) this.health - amount);
             this.gameEvent(GameEvent.ENTITY_DAMAGE, source.getEntity());
             if (this.health <= 0) {
                 this.getItem().onDestroyed(this);
@@ -284,9 +344,9 @@
 
     @Override
     public void addAdditionalSaveData(CompoundTag compound) {
-        compound.putShort("Health", (short)this.health);
-        compound.putShort("Age", (short)this.age);
-        compound.putShort("PickupDelay", (short)this.pickupDelay);
+        compound.putShort("Health", (short) this.health);
+        compound.putShort("Age", (short) this.age);
+        compound.putShort("PickupDelay", (short) this.pickupDelay);
         if (this.thrower != null) {
             compound.putUUID("Thrower", this.thrower);
         }
@@ -298,6 +358,7 @@
         if (!this.getItem().isEmpty()) {
             compound.put("Item", this.getItem().save(new CompoundTag()));
         }
+
     }
 
     @Override
@@ -317,36 +378,81 @@
             this.cachedThrower = null;
         }
 
-        CompoundTag compound1 = compound.getCompound("Item");
-        this.setItem(ItemStack.of(compound1));
+        CompoundTag nbttagcompound1 = compound.getCompound("Item");
+
+        this.setItem(ItemStack.of(nbttagcompound1));
         if (this.getItem().isEmpty()) {
             this.discard();
         }
+
     }
 
     @Override
-    public void playerTouch(Player entity) {
+    public void playerTouch(net.minecraft.world.entity.player.Player entity) {
         if (!this.level().isClientSide) {
-            ItemStack item = this.getItem();
-            Item item1 = item.getItem();
-            int count = item.getCount();
-            if (this.pickupDelay == 0 && (this.target == null || this.target.equals(entity.getUUID())) && entity.getInventory().add(item)) {
-                entity.take(this, count);
-                if (item.isEmpty()) {
+            ItemStack itemstack = this.getItem();
+            Item item = itemstack.getItem();
+            int i = itemstack.getCount();
+
+            // CraftBukkit start - fire PlayerPickupItemEvent
+            int canHold = entity.getInventory().canHold(itemstack);
+            int remaining = i - canHold;
+
+            if (this.pickupDelay <= 0 && canHold > 0) {
+                itemstack.setCount(canHold);
+                // Call legacy event
+                PlayerPickupItemEvent playerEvent = new PlayerPickupItemEvent((Player) entity.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+                playerEvent.setCancelled(!playerEvent.getPlayer().getCanPickupItems());
+                this.level().getCraftServer().getPluginManager().callEvent(playerEvent);
+                if (playerEvent.isCancelled()) {
+                    itemstack.setCount(i); // SPIGOT-5294 - restore count
+                    return;
+                }
+
+                // Call newer event afterwards
+                EntityPickupItemEvent entityEvent = new EntityPickupItemEvent((Player) entity.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+                entityEvent.setCancelled(!entityEvent.getEntity().getCanPickupItems());
+                this.level().getCraftServer().getPluginManager().callEvent(entityEvent);
+                if (entityEvent.isCancelled()) {
+                    itemstack.setCount(i); // SPIGOT-5294 - restore count
+                    return;
+                }
+
+                // Update the ItemStack if it was changed in the event
+                ItemStack current = this.getItem();
+                if (!itemstack.equals(current)) {
+                    itemstack = current;
+                } else {
+                    itemstack.setCount(canHold + remaining); // = i
+                }
+
+                // Possibly < 0; fix here so we do not have to modify code below
+                this.pickupDelay = 0;
+            } else if (this.pickupDelay == 0) {
+                // ensure that the code below isn't triggered if canHold says we can't pick the items up
+                this.pickupDelay = -1;
+            }
+            // CraftBukkit end
+
+            if (this.pickupDelay == 0 && (this.target == null || this.target.equals(entity.getUUID())) && entity.getInventory().add(itemstack)) {
+                entity.take(this, i);
+                if (itemstack.isEmpty()) {
                     this.discard();
-                    item.setCount(count);
+                    itemstack.setCount(i);
                 }
 
-                entity.awardStat(Stats.ITEM_PICKED_UP.get(item1), count);
+                entity.awardStat(Stats.ITEM_PICKED_UP.get(item), i);
                 entity.onItemPickup(this);
             }
+
         }
     }
 
     @Override
     public Component getName() {
-        Component customName = this.getCustomName();
-        return (Component)(customName != null ? customName : Component.translatable(this.getItem().getDescriptionId()));
+        Component ichatbasecomponent = this.getCustomName();
+
+        return (Component) (ichatbasecomponent != null ? ichatbasecomponent : Component.translatable(this.getItem().getDescriptionId()));
     }
 
     @Override
@@ -358,27 +464,29 @@
     @Override
     public Entity changeDimension(ServerLevel server) {
         Entity entity = super.changeDimension(server);
+
         if (!this.level().isClientSide && entity instanceof ItemEntity) {
-            ((ItemEntity)entity).mergeWithNeighbours();
+            ((ItemEntity) entity).mergeWithNeighbours();
         }
 
         return entity;
     }
 
     public ItemStack getItem() {
-        return this.getEntityData().get(DATA_ITEM);
+        return (ItemStack) this.getEntityData().get(ItemEntity.DATA_ITEM);
     }
 
     public void setItem(ItemStack stack) {
-        this.getEntityData().set(DATA_ITEM, stack);
+        this.getEntityData().set(ItemEntity.DATA_ITEM, stack);
     }
 
     @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> key) {
         super.onSyncedDataUpdated(key);
-        if (DATA_ITEM.equals(key)) {
+        if (ItemEntity.DATA_ITEM.equals(key)) {
             this.getItem().setEntityRepresentation(this);
         }
+
     }
 
     public void setTarget(@Nullable UUID target) {
@@ -428,7 +536,7 @@
     }
 
     public float getSpin(float partialTicks) {
-        return ((float)this.getAge() + partialTicks) / 20.0F + this.bobOffs;
+        return ((float) this.getAge() + partialTicks) / 20.0F + this.bobOffs;
     }
 
     public ItemEntity copy() {
@@ -442,6 +550,6 @@
 
     @Override
     public float getVisualRotationYInDegrees() {
-        return 180.0F - this.getSpin(0.5F) / (float) (Math.PI * 2) * 360.0F;
+        return 180.0F - this.getSpin(0.5F) / 6.2831855F * 360.0F;
     }
 }
