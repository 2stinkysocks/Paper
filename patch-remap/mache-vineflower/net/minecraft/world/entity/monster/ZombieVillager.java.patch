--- a/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -3,11 +3,11 @@
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
+import java.util.Objects;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.Holder;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
@@ -15,12 +15,8 @@
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.sounds.SoundEvent;
-import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
@@ -28,9 +24,9 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.entity.EquipmentSlot;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.ai.village.ReputationEventType;
 import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.entity.npc.VillagerData;
@@ -46,50 +42,63 @@
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.BedBlock;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import org.joml.Vector3f;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundEvents;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityTransformEvent;
+// CraftBukkit end
+
 public class ZombieVillager extends Zombie implements VillagerDataHolder {
+
     private static final Logger LOGGER = LogUtils.getLogger();
-    private static final EntityDataAccessor<Boolean> DATA_CONVERTING_ID = SynchedEntityData.defineId(ZombieVillager.class, EntityDataSerializers.BOOLEAN);
-    private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA = SynchedEntityData.defineId(
-        ZombieVillager.class, EntityDataSerializers.VILLAGER_DATA
-    );
+    public static final EntityDataAccessor<Boolean> DATA_CONVERTING_ID = SynchedEntityData.defineId(ZombieVillager.class, EntityDataSerializers.BOOLEAN);
+    private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA = SynchedEntityData.defineId(ZombieVillager.class, EntityDataSerializers.VILLAGER_DATA);
     private static final int VILLAGER_CONVERSION_WAIT_MIN = 3600;
     private static final int VILLAGER_CONVERSION_WAIT_MAX = 6000;
     private static final int MAX_SPECIAL_BLOCKS_COUNT = 14;
     private static final int SPECIAL_BLOCK_RADIUS = 4;
-    private int villagerConversionTime;
+    public int villagerConversionTime;
     @Nullable
-    private UUID conversionStarter;
+    public UUID conversionStarter;
     @Nullable
     private Tag gossips;
     @Nullable
     private CompoundTag tradeOffers;
     private int villagerXp;
+    private int lastTick = MinecraftServer.currentTick; // CraftBukkit - add field
 
     public ZombieVillager(EntityType<? extends ZombieVillager> entityType, Level level) {
         super(entityType, level);
-        BuiltInRegistries.VILLAGER_PROFESSION
-            .getRandom(this.random)
-            .ifPresent(profession -> this.setVillagerData(this.getVillagerData().setProfession(profession.value())));
+        BuiltInRegistries.VILLAGER_PROFESSION.getRandom(this.random).ifPresent((holder_c) -> {
+            this.setVillagerData(this.getVillagerData().setProfession((VillagerProfession) holder_c.value()));
+        });
     }
 
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_CONVERTING_ID, false);
-        this.entityData.define(DATA_VILLAGER_DATA, new VillagerData(VillagerType.PLAINS, VillagerProfession.NONE, 1));
+        this.entityData.define(ZombieVillager.DATA_CONVERTING_ID, false);
+        this.entityData.define(ZombieVillager.DATA_VILLAGER_DATA, new VillagerData(VillagerType.PLAINS, VillagerProfession.NONE, 1));
     }
 
     @Override
     public void addAdditionalSaveData(CompoundTag compound) {
         super.addAdditionalSaveData(compound);
-        VillagerData.CODEC
-            .encodeStart(NbtOps.INSTANCE, this.getVillagerData())
-            .resultOrPartial(LOGGER::error)
-            .ifPresent(tag -> compound.put("VillagerData", tag));
+        DataResult<Tag> dataresult = VillagerData.CODEC.encodeStart(NbtOps.INSTANCE, this.getVillagerData()); // CraftBukkit - decompile error
+        Logger logger = ZombieVillager.LOGGER;
+
+        Objects.requireNonNull(logger);
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+            compound.put("VillagerData", nbtbase);
+        });
         if (this.tradeOffers != null) {
             compound.put("Offers", this.tradeOffers);
         }
@@ -110,8 +119,11 @@
     public void readAdditionalSaveData(CompoundTag compound) {
         super.readAdditionalSaveData(compound);
         if (compound.contains("VillagerData", 10)) {
-            DataResult<VillagerData> dataResult = VillagerData.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, compound.get("VillagerData")));
-            dataResult.resultOrPartial(LOGGER::error).ifPresent(this::setVillagerData);
+            DataResult<VillagerData> dataresult = VillagerData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, compound.get("VillagerData")));
+            Logger logger = ZombieVillager.LOGGER;
+
+            Objects.requireNonNull(logger);
+            dataresult.resultOrPartial(logger::error).ifPresent(this::setVillagerData);
         }
 
         if (compound.contains("Offers", 10)) {
@@ -129,28 +141,36 @@
         if (compound.contains("Xp", 3)) {
             this.villagerXp = compound.getInt("Xp");
         }
+
     }
 
     @Override
     public void tick() {
         if (!this.level().isClientSide && this.isAlive() && this.isConverting()) {
-            int conversionProgress = this.getConversionProgress();
-            this.villagerConversionTime -= conversionProgress;
+            int i = this.getConversionProgress();
+            // CraftBukkit start - Use wall time instead of ticks for villager conversion
+            int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+            i *= elapsedTicks;
+            // CraftBukkit end
+
+            this.villagerConversionTime -= i;
             if (this.villagerConversionTime <= 0) {
-                this.finishConversion((ServerLevel)this.level());
+                this.finishConversion((ServerLevel) this.level());
             }
         }
 
         super.tick();
+        this.lastTick = MinecraftServer.currentTick; // CraftBukkit
     }
 
     @Override
-    public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemInHand = player.getItemInHand(hand);
-        if (itemInHand.is(Items.GOLDEN_APPLE)) {
+    public InteractionResult mobInteract(Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
+
+        if (itemstack.is(Items.GOLDEN_APPLE)) {
             if (this.hasEffect(MobEffects.WEAKNESS)) {
                 if (!player.getAbilities().instabuild) {
-                    itemInHand.shrink(1);
+                    itemstack.shrink(1);
                 }
 
                 if (!this.level().isClientSide) {
@@ -177,98 +197,108 @@
     }
 
     public boolean isConverting() {
-        return this.getEntityData().get(DATA_CONVERTING_ID);
+        return (Boolean) this.getEntityData().get(ZombieVillager.DATA_CONVERTING_ID);
     }
 
-    private void startConverting(@Nullable UUID conversionStarter, int villagerConversionTime) {
+    public void startConverting(@Nullable UUID conversionStarter, int villagerConversionTime) {
         this.conversionStarter = conversionStarter;
         this.villagerConversionTime = villagerConversionTime;
-        this.getEntityData().set(DATA_CONVERTING_ID, true);
-        this.removeEffect(MobEffects.WEAKNESS);
-        this.addEffect(new MobEffectInstance(MobEffects.DAMAGE_BOOST, villagerConversionTime, Math.min(this.level().getDifficulty().getId() - 1, 0)));
-        this.level().broadcastEntityEvent(this, (byte)16);
+        this.getEntityData().set(ZombieVillager.DATA_CONVERTING_ID, true);
+        // CraftBukkit start
+        this.removeEffect(MobEffects.WEAKNESS, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.CONVERSION);
+        this.addEffect(new MobEffectInstance(MobEffects.DAMAGE_BOOST, villagerConversionTime, Math.min(this.level().getDifficulty().getId() - 1, 0)), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.CONVERSION);
+        // CraftBukkit end
+        this.level().broadcastEntityEvent(this, (byte) 16);
     }
 
     @Override
     public void handleEntityEvent(byte id) {
         if (id == 16) {
             if (!this.isSilent()) {
-                this.level()
-                    .playLocalSound(
-                        this.getX(),
-                        this.getEyeY(),
-                        this.getZ(),
-                        SoundEvents.ZOMBIE_VILLAGER_CURE,
-                        this.getSoundSource(),
-                        1.0F + this.random.nextFloat(),
-                        this.random.nextFloat() * 0.7F + 0.3F,
-                        false
-                    );
+                this.level().playLocalSound(this.getX(), this.getEyeY(), this.getZ(), SoundEvents.ZOMBIE_VILLAGER_CURE, this.getSoundSource(), 1.0F + this.random.nextFloat(), this.random.nextFloat() * 0.7F + 0.3F, false);
             }
+
         } else {
             super.handleEntityEvent(id);
         }
     }
 
     private void finishConversion(ServerLevel serverLevel) {
-        Villager villager = this.convertTo(EntityType.VILLAGER, false);
+        // CraftBukkit start
+        Villager entityvillager = (Villager) this.convertTo(EntityType.VILLAGER, false, EntityTransformEvent.TransformReason.CURED, CreatureSpawnEvent.SpawnReason.CURED);
+        if (entityvillager == null) {
+            ((org.bukkit.entity.ZombieVillager) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
+            return;
+        }
+        // CraftBukkit end
+        EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
+        int i = aenumitemslot.length;
 
-        for (EquipmentSlot equipmentSlot : EquipmentSlot.values()) {
-            ItemStack itemBySlot = this.getItemBySlot(equipmentSlot);
-            if (!itemBySlot.isEmpty()) {
-                if (EnchantmentHelper.hasBindingCurse(itemBySlot)) {
-                    villager.getSlot(equipmentSlot.getIndex() + 300).set(itemBySlot);
+        for (int j = 0; j < i; ++j) {
+            EquipmentSlot enumitemslot = aenumitemslot[j];
+            ItemStack itemstack = this.getItemBySlot(enumitemslot);
+
+            if (!itemstack.isEmpty()) {
+                if (EnchantmentHelper.hasBindingCurse(itemstack)) {
+                    entityvillager.getSlot(enumitemslot.getIndex() + 300).set(itemstack);
                 } else {
-                    double d = (double)this.getEquipmentDropChance(equipmentSlot);
-                    if (d > 1.0) {
-                        this.spawnAtLocation(itemBySlot);
+                    double d0 = (double) this.getEquipmentDropChance(enumitemslot);
+
+                    if (d0 > 1.0D) {
+                        this.forceDrops = true; // CraftBukkit
+                        this.spawnAtLocation(itemstack);
+                        this.forceDrops = false; // CraftBukkit
                     }
                 }
             }
         }
 
-        villager.setVillagerData(this.getVillagerData());
+        entityvillager.setVillagerData(this.getVillagerData());
         if (this.gossips != null) {
-            villager.setGossips(this.gossips);
+            entityvillager.setGossips(this.gossips);
         }
 
         if (this.tradeOffers != null) {
-            villager.setOffers(new MerchantOffers(this.tradeOffers));
+            entityvillager.setOffers(new MerchantOffers(this.tradeOffers));
         }
 
-        villager.setVillagerXp(this.villagerXp);
-        villager.finalizeSpawn(serverLevel, serverLevel.getCurrentDifficultyAt(villager.blockPosition()), MobSpawnType.CONVERSION, null, null);
-        villager.refreshBrain(serverLevel);
+        entityvillager.setVillagerXp(this.villagerXp);
+        entityvillager.finalizeSpawn(serverLevel, serverLevel.getCurrentDifficultyAt(entityvillager.blockPosition()), EnumMobSpawn.CONVERSION, (GroupDataEntity) null, (CompoundTag) null);
+        entityvillager.refreshBrain(serverLevel);
         if (this.conversionStarter != null) {
-            Player playerByUUID = serverLevel.getPlayerByUUID(this.conversionStarter);
-            if (playerByUUID instanceof ServerPlayer) {
-                CriteriaTriggers.CURED_ZOMBIE_VILLAGER.trigger((ServerPlayer)playerByUUID, this, villager);
-                serverLevel.onReputationEvent(ReputationEventType.ZOMBIE_VILLAGER_CURED, playerByUUID, villager);
+            Player entityhuman = serverLevel.getPlayerByUUID(this.conversionStarter);
+
+            if (entityhuman instanceof ServerPlayer) {
+                CriteriaTriggers.CURED_ZOMBIE_VILLAGER.trigger((ServerPlayer) entityhuman, this, entityvillager);
+                serverLevel.onReputationEvent(ReputationEventType.ZOMBIE_VILLAGER_CURED, entityhuman, entityvillager);
             }
         }
 
-        villager.addEffect(new MobEffectInstance(MobEffects.CONFUSION, 200, 0));
+        entityvillager.addEffect(new MobEffectInstance(MobEffects.CONFUSION, 200, 0), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.CONVERSION); // CraftBukkit
         if (!this.isSilent()) {
-            serverLevel.levelEvent(null, 1027, this.blockPosition(), 0);
+            serverLevel.levelEvent((Player) null, 1027, this.blockPosition(), 0);
         }
+
     }
 
     private int getConversionProgress() {
         int i = 1;
+
         if (this.random.nextFloat() < 0.01F) {
-            int i1 = 0;
-            BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
+            int j = 0;
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
 
-            for (int i2 = (int)this.getX() - 4; i2 < (int)this.getX() + 4 && i1 < 14; i2++) {
-                for (int i3 = (int)this.getY() - 4; i3 < (int)this.getY() + 4 && i1 < 14; i3++) {
-                    for (int i4 = (int)this.getZ() - 4; i4 < (int)this.getZ() + 4 && i1 < 14; i4++) {
-                        BlockState blockState = this.level().getBlockState(mutableBlockPos.set(i2, i3, i4));
-                        if (blockState.is(Blocks.IRON_BARS) || blockState.getBlock() instanceof BedBlock) {
+            for (int k = (int) this.getX() - 4; k < (int) this.getX() + 4 && j < 14; ++k) {
+                for (int l = (int) this.getY() - 4; l < (int) this.getY() + 4 && j < 14; ++l) {
+                    for (int i1 = (int) this.getZ() - 4; i1 < (int) this.getZ() + 4 && j < 14; ++i1) {
+                        IBlockData iblockdata = this.level().getBlockState(blockposition_mutableblockposition.set(k, l, i1));
+
+                        if (iblockdata.is(Blocks.IRON_BARS) || iblockdata.getBlock() instanceof BedBlock) {
                             if (this.random.nextFloat() < 0.3F) {
-                                i++;
+                                ++i;
                             }
 
-                            i1++;
+                            ++j;
                         }
                     }
                 }
@@ -280,9 +310,7 @@
 
     @Override
     public float getVoicePitch() {
-        return this.isBaby()
-            ? (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 2.0F
-            : (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F;
+        return this.isBaby() ? (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 2.0F : (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F;
     }
 
     @Override
@@ -320,26 +348,25 @@
 
     @Nullable
     @Override
-    public SpawnGroupData finalizeSpawn(
-        ServerLevelAccessor level, DifficultyInstance difficulty, MobSpawnType reason, @Nullable SpawnGroupData spawnData, @Nullable CompoundTag dataTag
-    ) {
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
         this.setVillagerData(this.getVillagerData().setType(VillagerType.byBiome(level.getBiome(this.blockPosition()))));
         return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
     }
 
     @Override
     public void setVillagerData(VillagerData data) {
-        VillagerData villagerData = this.getVillagerData();
-        if (villagerData.getProfession() != data.getProfession()) {
+        VillagerData villagerdata1 = this.getVillagerData();
+
+        if (villagerdata1.getProfession() != data.getProfession()) {
             this.tradeOffers = null;
         }
 
-        this.entityData.set(DATA_VILLAGER_DATA, data);
+        this.entityData.set(ZombieVillager.DATA_VILLAGER_DATA, data);
     }
 
     @Override
     public VillagerData getVillagerData() {
-        return this.entityData.get(DATA_VILLAGER_DATA);
+        return (VillagerData) this.entityData.get(ZombieVillager.DATA_VILLAGER_DATA);
     }
 
     public int getVillagerXp() {
@@ -351,7 +378,7 @@
     }
 
     @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entityDimensions, float f) {
-        return new Vector3f(0.0F, entityDimensions.height + 0.175F * f, 0.0F);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, entitysize.height + 0.175F * f, 0.0F);
     }
 }
