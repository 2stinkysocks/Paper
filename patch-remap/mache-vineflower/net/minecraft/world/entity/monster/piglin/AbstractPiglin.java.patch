--- a/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
+++ b/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
@@ -11,9 +11,9 @@
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.navigation.GroundPathNavigation;
 import net.minecraft.world.entity.ai.util.GoalUtils;
@@ -25,12 +25,11 @@
 import org.joml.Vector3f;
 
 public abstract class AbstractPiglin extends Monster {
-    protected static final EntityDataAccessor<Boolean> DATA_IMMUNE_TO_ZOMBIFICATION = SynchedEntityData.defineId(
-        AbstractPiglin.class, EntityDataSerializers.BOOLEAN
-    );
+
+    protected static final EntityDataAccessor<Boolean> DATA_IMMUNE_TO_ZOMBIFICATION = SynchedEntityData.defineId(AbstractPiglin.class, EntityDataSerializers.BOOLEAN);
     protected static final int CONVERSION_TIME = 300;
     protected static final float PIGLIN_EYE_HEIGHT = 1.79F;
-    protected int timeInOverworld;
+    public int timeInOverworld;
 
     public AbstractPiglin(EntityType<? extends AbstractPiglin> entityType, Level level) {
         super(entityType, level);
@@ -42,12 +41,13 @@
 
     private void applyOpenDoorsAbility() {
         if (GoalUtils.hasGroundPathNavigation(this)) {
-            ((GroundPathNavigation)this.getNavigation()).setCanOpenDoors(true);
+            ((GroundPathNavigation) this.getNavigation()).setCanOpenDoors(true);
         }
+
     }
 
     @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions dimensions) {
         return 1.79F;
     }
 
@@ -57,24 +57,24 @@
     }
 
     @Override
-    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entityDimensions, float f) {
-        return new Vector3f(0.0F, entityDimensions.height + 0.0625F * f, 0.0F);
+    protected Vector3f getPassengerAttachmentPoint(Entity entity, EntityDimensions entitysize, float f) {
+        return new Vector3f(0.0F, entitysize.height + 0.0625F * f, 0.0F);
     }
 
     protected abstract boolean canHunt();
 
     public void setImmuneToZombification(boolean immuneToZombification) {
-        this.getEntityData().set(DATA_IMMUNE_TO_ZOMBIFICATION, immuneToZombification);
+        this.getEntityData().set(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION, immuneToZombification);
     }
 
-    protected boolean isImmuneToZombification() {
-        return this.getEntityData().get(DATA_IMMUNE_TO_ZOMBIFICATION);
+    public boolean isImmuneToZombification() {
+        return (Boolean) this.getEntityData().get(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION);
     }
 
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_IMMUNE_TO_ZOMBIFICATION, false);
+        this.entityData.define(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION, false);
     }
 
     @Override
@@ -98,15 +98,16 @@
     protected void customServerAiStep() {
         super.customServerAiStep();
         if (this.isConverting()) {
-            this.timeInOverworld++;
+            ++this.timeInOverworld;
         } else {
             this.timeInOverworld = 0;
         }
 
         if (this.timeInOverworld > 300) {
             this.playConvertedSound();
-            this.finishConversion((ServerLevel)this.level());
+            this.finishConversion((ServerLevel) this.level());
         }
+
     }
 
     public boolean isConverting() {
@@ -114,22 +115,24 @@
     }
 
     protected void finishConversion(ServerLevel serverLevel) {
-        ZombifiedPiglin zombifiedPiglin = this.convertTo(EntityType.ZOMBIFIED_PIGLIN, true);
-        if (zombifiedPiglin != null) {
-            zombifiedPiglin.addEffect(new MobEffectInstance(MobEffects.CONFUSION, 200, 0));
+        ZombifiedPiglin entitypigzombie = (ZombifiedPiglin) this.convertTo(EntityType.ZOMBIFIED_PIGLIN, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.PIGLIN_ZOMBIFIED, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.PIGLIN_ZOMBIFIED); // CraftBukkit - add spawn and transform reasons
+
+        if (entitypigzombie != null) {
+            entitypigzombie.addEffect(new MobEffectInstance(MobEffects.CONFUSION, 200, 0));
         }
+
     }
 
     public boolean isAdult() {
         return !this.isBaby();
     }
 
-    public abstract PiglinArmPose getArmPose();
+    public abstract EntityPiglinArmPose getArmPose();
 
     @Nullable
     @Override
     public LivingEntity getTarget() {
-        return this.brain.getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null);
+        return (LivingEntity) this.brain.getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null); // CraftBukkit - decompile error
     }
 
     protected boolean isHoldingMeleeWeapon() {
@@ -141,6 +144,7 @@
         if (PiglinAi.isIdle(this)) {
             super.playAmbientSound();
         }
+
     }
 
     @Override
