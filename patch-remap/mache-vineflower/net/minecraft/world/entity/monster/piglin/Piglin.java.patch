--- a/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -5,30 +5,22 @@
 import java.util.List;
 import java.util.UUID;
 import javax.annotation.Nullable;
-import net.minecraft.core.BlockPos;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.network.syncher.EntityDataAccessor;
-import net.minecraft.network.syncher.EntityDataSerializers;
-import net.minecraft.network.syncher.SynchedEntityData;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.sounds.SoundEvent;
-import net.minecraft.sounds.SoundEvents;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.VisibleForDebug;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.GroupDataEntity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.Pose;
-import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeInstance;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
@@ -53,16 +45,35 @@
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
+// CraftBukkit start
+import java.util.stream.Collectors;
+import java.util.HashSet;
+import java.util.Set;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.network.syncher.EntityDataAccessor;
+import net.minecraft.network.syncher.EntityDataSerializers;
+import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.world.item.Item;
+// CraftBukkit end
+
 public class Piglin extends AbstractPiglin implements CrossbowAttackMob, InventoryCarrier {
+
     private static final EntityDataAccessor<Boolean> DATA_BABY_ID = SynchedEntityData.defineId(Piglin.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_IS_CHARGING_CROSSBOW = SynchedEntityData.defineId(Piglin.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_IS_DANCING = SynchedEntityData.defineId(Piglin.class, EntityDataSerializers.BOOLEAN);
     private static final UUID SPEED_MODIFIER_BABY_UUID = UUID.fromString("766bfa64-11f3-11ea-8d71-362b9e155667");
-    private static final AttributeModifier SPEED_MODIFIER_BABY = new AttributeModifier(
-        SPEED_MODIFIER_BABY_UUID, "Baby speed boost", 0.2F, AttributeModifier.Operation.MULTIPLY_BASE
-    );
+    private static final AttributeModifier SPEED_MODIFIER_BABY = new AttributeModifier(Piglin.SPEED_MODIFIER_BABY_UUID, "Baby speed boost", 0.20000000298023224D, AttributeModifier.Operation.MULTIPLY_BASE);
     private static final int MAX_HEALTH = 16;
     private static final float MOVEMENT_SPEED_WHEN_FIGHTING = 0.35F;
     private static final int ATTACK_DAMAGE = 5;
@@ -71,53 +82,15 @@
     private static final int MAX_PASSENGERS_ON_ONE_HOGLIN = 3;
     private static final float PROBABILITY_OF_SPAWNING_AS_BABY = 0.2F;
     private static final float BABY_EYE_HEIGHT_ADJUSTMENT = 0.82F;
-    private static final double PROBABILITY_OF_SPAWNING_WITH_CROSSBOW_INSTEAD_OF_SWORD = 0.5;
-    private final SimpleContainer inventory = new SimpleContainer(8);
-    private boolean cannotHunt;
-    protected static final ImmutableList<SensorType<? extends Sensor<? super Piglin>>> SENSOR_TYPES = ImmutableList.of(
-        SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.HURT_BY, SensorType.PIGLIN_SPECIFIC_SENSOR
-    );
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(
-        MemoryModuleType.LOOK_TARGET,
-        MemoryModuleType.DOORS_TO_CLOSE,
-        MemoryModuleType.NEAREST_LIVING_ENTITIES,
-        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
-        MemoryModuleType.NEAREST_VISIBLE_PLAYER,
-        MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER,
-        MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS,
-        MemoryModuleType.NEARBY_ADULT_PIGLINS,
-        MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM,
-        MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS,
-        MemoryModuleType.HURT_BY,
-        MemoryModuleType.HURT_BY_ENTITY,
-        MemoryModuleType.WALK_TARGET,
-        MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
-        MemoryModuleType.ATTACK_TARGET,
-        MemoryModuleType.ATTACK_COOLING_DOWN,
-        MemoryModuleType.INTERACTION_TARGET,
-        MemoryModuleType.PATH,
-        MemoryModuleType.ANGRY_AT,
-        MemoryModuleType.UNIVERSAL_ANGER,
-        MemoryModuleType.AVOID_TARGET,
-        MemoryModuleType.ADMIRING_ITEM,
-        MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM,
-        MemoryModuleType.ADMIRING_DISABLED,
-        MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM,
-        MemoryModuleType.CELEBRATE_LOCATION,
-        MemoryModuleType.DANCING,
-        MemoryModuleType.HUNTED_RECENTLY,
-        MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN,
-        MemoryModuleType.NEAREST_VISIBLE_NEMESIS,
-        MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED,
-        MemoryModuleType.RIDE_TARGET,
-        MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT,
-        MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT,
-        MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN,
-        MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD,
-        MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM,
-        MemoryModuleType.ATE_RECENTLY,
-        MemoryModuleType.NEAREST_REPELLENT
-    );
+    private static final double PROBABILITY_OF_SPAWNING_WITH_CROSSBOW_INSTEAD_OF_SWORD = 0.5D;
+    public final SimpleContainer inventory = new SimpleContainer(8);
+    public boolean cannotHunt;
+    protected static final ImmutableList<SensorType<? extends Sensor<? super Piglin>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.HURT_BY, SensorType.PIGLIN_SPECIFIC_SENSOR);
+    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, new MemoryModuleType[]{MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.PATH, MemoryModuleType.ANGRY_AT, MemoryModuleType.UNIVERSAL_ANGER, MemoryModuleType.AVOID_TARGET, MemoryModuleType.ADMIRING_ITEM, MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, MemoryModuleType.ADMIRING_DISABLED, MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM, MemoryModuleType.CELEBRATE_LOCATION, MemoryModuleType.DANCING, MemoryModuleType.HUNTED_RECENTLY, MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, MemoryModuleType.RIDE_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.NEAREST_REPELLENT});
+    // CraftBukkit start - Custom bartering and interest list
+    public Set<Item> allowedBarterItems = new HashSet<>();
+    public Set<Item> interestItems = new HashSet<>();
+    // CraftBukkit end
 
     public Piglin(EntityType<? extends AbstractPiglin> entityType, Level level) {
         super(entityType, level);
@@ -136,6 +109,14 @@
         }
 
         this.writeInventoryToTag(compound);
+        // CraftBukkit start
+        ListTag barterList = new ListTag();
+        allowedBarterItems.stream().map(BuiltInRegistries.ITEM::getKey).map(ResourceLocation::toString).map(StringTag::valueOf).forEach(barterList::add);
+        compound.put("Bukkit.BarterList", barterList);
+        ListTag interestList = new ListTag();
+        interestItems.stream().map(BuiltInRegistries.ITEM::getKey).map(ResourceLocation::toString).map(StringTag::valueOf).forEach(interestList::add);
+        compound.put("Bukkit.InterestList", interestList);
+        // CraftBukkit end
     }
 
     @Override
@@ -144,6 +125,10 @@
         this.setBaby(compound.getBoolean("IsBaby"));
         this.setCannotHunt(compound.getBoolean("CannotHunt"));
         this.readInventoryFromTag(compound);
+        // CraftBukkit start
+        this.allowedBarterItems = compound.getList("Bukkit.BarterList", 8).stream().map(Tag::getAsString).map(ResourceLocation::tryParse).map(BuiltInRegistries.ITEM::get).collect(Collectors.toCollection(HashSet::new));
+        this.interestItems = compound.getList("Bukkit.InterestList", 8).stream().map(Tag::getAsString).map(ResourceLocation::tryParse).map(BuiltInRegistries.ITEM::get).collect(Collectors.toCollection(HashSet::new));
+        // CraftBukkit end
     }
 
     @VisibleForDebug
@@ -155,10 +140,17 @@
     @Override
     protected void dropCustomDeathLoot(DamageSource source, int looting, boolean recentlyHit) {
         super.dropCustomDeathLoot(source, looting, recentlyHit);
-        if (source.getEntity() instanceof Creeper creeper && creeper.canDropMobsSkull()) {
-            ItemStack itemStack = new ItemStack(Items.PIGLIN_HEAD);
-            creeper.increaseDroppedSkulls();
-            this.spawnAtLocation(itemStack);
+        Entity entity = source.getEntity();
+
+        if (entity instanceof Creeper) {
+            Creeper entitycreeper = (Creeper) entity;
+
+            if (entitycreeper.canDropMobsSkull()) {
+                ItemStack itemstack = new ItemStack(Items.PIGLIN_HEAD);
+
+                entitycreeper.increaseDroppedSkulls();
+                this.spawnAtLocation(itemstack);
+            }
         }
 
         this.inventory.removeAllItems().forEach(this::spawnAtLocation);
@@ -175,35 +167,35 @@
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_BABY_ID, false);
-        this.entityData.define(DATA_IS_CHARGING_CROSSBOW, false);
-        this.entityData.define(DATA_IS_DANCING, false);
+        this.entityData.define(Piglin.DATA_BABY_ID, false);
+        this.entityData.define(Piglin.DATA_IS_CHARGING_CROSSBOW, false);
+        this.entityData.define(Piglin.DATA_IS_DANCING, false);
     }
 
     @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> key) {
         super.onSyncedDataUpdated(key);
-        if (DATA_BABY_ID.equals(key)) {
+        if (Piglin.DATA_BABY_ID.equals(key)) {
             this.refreshDimensions();
         }
+
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 16.0).add(Attributes.MOVEMENT_SPEED, 0.35F).add(Attributes.ATTACK_DAMAGE, 5.0);
+        return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 16.0D).add(Attributes.MOVEMENT_SPEED, 0.3499999940395355D).add(Attributes.ATTACK_DAMAGE, 5.0D);
     }
 
-    public static boolean checkPiglinSpawnRules(EntityType<Piglin> piglin, LevelAccessor level, MobSpawnType spawnType, BlockPos pos, RandomSource random) {
+    public static boolean checkPiglinSpawnRules(EntityType<Piglin> piglin, LevelAccessor level, EnumMobSpawn spawnType, BlockPos pos, RandomSource random) {
         return !level.getBlockState(pos.below()).is(Blocks.NETHER_WART_BLOCK);
     }
 
     @Nullable
     @Override
-    public SpawnGroupData finalizeSpawn(
-        ServerLevelAccessor level, DifficultyInstance difficulty, MobSpawnType reason, @Nullable SpawnGroupData spawnData, @Nullable CompoundTag dataTag
-    ) {
-        RandomSource random = level.getRandom();
-        if (reason != MobSpawnType.STRUCTURE) {
-            if (random.nextFloat() < 0.2F) {
+    public GroupDataEntity finalizeSpawn(ServerLevelAccessor level, DifficultyInstance difficulty, EnumMobSpawn reason, @Nullable GroupDataEntity spawnData, @Nullable CompoundTag dataTag) {
+        RandomSource randomsource = level.getRandom();
+
+        if (reason != EnumMobSpawn.STRUCTURE) {
+            if (randomsource.nextFloat() < 0.2F) {
                 this.setBaby(true);
             } else if (this.isAdult()) {
                 this.setItemSlot(EquipmentSlot.MAINHAND, this.createSpawnWeapon());
@@ -211,8 +203,8 @@
         }
 
         PiglinAi.initMemories(this, level.getRandom());
-        this.populateDefaultEquipmentSlots(random, difficulty);
-        this.populateDefaultEquipmentEnchantments(random, difficulty);
+        this.populateDefaultEquipmentSlots(randomsource, difficulty);
+        this.populateDefaultEquipmentEnchantments(randomsource, difficulty);
         return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
     }
 
@@ -234,17 +226,19 @@
             this.maybeWearArmor(EquipmentSlot.LEGS, new ItemStack(Items.GOLDEN_LEGGINGS), random);
             this.maybeWearArmor(EquipmentSlot.FEET, new ItemStack(Items.GOLDEN_BOOTS), random);
         }
+
     }
 
     private void maybeWearArmor(EquipmentSlot slot, ItemStack stack, RandomSource random) {
         if (random.nextFloat() < 0.1F) {
             this.setItemSlot(slot, stack);
         }
+
     }
 
     @Override
     protected Brain.Provider<Piglin> brainProvider() {
-        return Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
+        return Brain.provider(Piglin.MEMORY_TYPES, Piglin.SENSOR_TYPES);
     }
 
     @Override
@@ -254,43 +248,48 @@
 
     @Override
     public Brain<Piglin> getBrain() {
-        return (Brain<Piglin>)super.getBrain();
+        return (Brain<Piglin>) super.getBrain(); // CraftBukkit - Decompile error
     }
 
     @Override
-    public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        InteractionResult interactionResult = super.mobInteract(player, hand);
-        if (interactionResult.consumesAction()) {
-            return interactionResult;
+    public InteractionResult mobInteract(Player player, EnumHand hand) {
+        InteractionResult enuminteractionresult = super.mobInteract(player, hand);
+
+        if (enuminteractionresult.consumesAction()) {
+            return enuminteractionresult;
         } else if (!this.level().isClientSide) {
             return PiglinAi.mobInteract(this, player, hand);
         } else {
-            boolean flag = PiglinAi.canAdmire(this, player.getItemInHand(hand)) && this.getArmPose() != PiglinArmPose.ADMIRING_ITEM;
+            boolean flag = PiglinAi.canAdmire(this, player.getItemInHand(hand)) && this.getArmPose() != EntityPiglinArmPose.ADMIRING_ITEM;
+
             return flag ? InteractionResult.SUCCESS : InteractionResult.PASS;
         }
     }
 
     @Override
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions size) {
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions size) {
         float f = super.getStandingEyeHeight(pose, size);
+
         return this.isBaby() ? f - 0.82F : f;
     }
 
     @Override
     public void setBaby(boolean childZombie) {
-        this.getEntityData().set(DATA_BABY_ID, childZombie);
+        this.getEntityData().set(Piglin.DATA_BABY_ID, childZombie);
         if (!this.level().isClientSide) {
-            AttributeInstance attribute = this.getAttribute(Attributes.MOVEMENT_SPEED);
-            attribute.removeModifier(SPEED_MODIFIER_BABY.getId());
+            AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
+
+            attributemodifiable.removeModifier(Piglin.SPEED_MODIFIER_BABY.getId());
             if (childZombie) {
-                attribute.addTransientModifier(SPEED_MODIFIER_BABY);
+                attributemodifiable.addTransientModifier(Piglin.SPEED_MODIFIER_BABY);
             }
         }
+
     }
 
     @Override
     public boolean isBaby() {
-        return this.getEntityData().get(DATA_BABY_ID);
+        return (Boolean) this.getEntityData().get(Piglin.DATA_BABY_ID);
     }
 
     private void setCannotHunt(boolean cannotHunt) {
@@ -305,7 +304,7 @@
     @Override
     protected void customServerAiStep() {
         this.level().getProfiler().push("piglinBrain");
-        this.getBrain().tick((ServerLevel)this.level(), this);
+        this.getBrain().tick((ServerLevel) this.level(), this);
         this.level().getProfiler().pop();
         PiglinAi.updateActivity(this);
         super.customServerAiStep();
@@ -324,16 +323,16 @@
     }
 
     private ItemStack createSpawnWeapon() {
-        return (double)this.random.nextFloat() < 0.5 ? new ItemStack(Items.CROSSBOW) : new ItemStack(Items.GOLDEN_SWORD);
+        return (double) this.random.nextFloat() < 0.5D ? new ItemStack(Items.CROSSBOW) : new ItemStack(Items.GOLDEN_SWORD);
     }
 
     private boolean isChargingCrossbow() {
-        return this.entityData.get(DATA_IS_CHARGING_CROSSBOW);
+        return (Boolean) this.entityData.get(Piglin.DATA_IS_CHARGING_CROSSBOW);
     }
 
     @Override
     public void setChargingCrossbow(boolean isCharging) {
-        this.entityData.set(DATA_IS_CHARGING_CROSSBOW, isCharging);
+        this.entityData.set(Piglin.DATA_IS_CHARGING_CROSSBOW, isCharging);
     }
 
     @Override
@@ -342,36 +341,27 @@
     }
 
     @Override
-    public PiglinArmPose getArmPose() {
-        if (this.isDancing()) {
-            return PiglinArmPose.DANCING;
-        } else if (PiglinAi.isLovedItem(this.getOffhandItem())) {
-            return PiglinArmPose.ADMIRING_ITEM;
-        } else if (this.isAggressive() && this.isHoldingMeleeWeapon()) {
-            return PiglinArmPose.ATTACKING_WITH_MELEE_WEAPON;
-        } else if (this.isChargingCrossbow()) {
-            return PiglinArmPose.CROSSBOW_CHARGE;
-        } else {
-            return this.isAggressive() && this.isHolding(Items.CROSSBOW) ? PiglinArmPose.CROSSBOW_HOLD : PiglinArmPose.DEFAULT;
-        }
+    public EntityPiglinArmPose getArmPose() {
+        return this.isDancing() ? EntityPiglinArmPose.DANCING : (PiglinAi.isLovedItem(this.getOffhandItem()) ? EntityPiglinArmPose.ADMIRING_ITEM : (this.isAggressive() && this.isHoldingMeleeWeapon() ? EntityPiglinArmPose.ATTACKING_WITH_MELEE_WEAPON : (this.isChargingCrossbow() ? EntityPiglinArmPose.CROSSBOW_CHARGE : (this.isAggressive() && this.isHolding(Items.CROSSBOW) ? EntityPiglinArmPose.CROSSBOW_HOLD : EntityPiglinArmPose.DEFAULT))));
     }
 
     public boolean isDancing() {
-        return this.entityData.get(DATA_IS_DANCING);
+        return (Boolean) this.entityData.get(Piglin.DATA_IS_DANCING);
     }
 
     public void setDancing(boolean dancing) {
-        this.entityData.set(DATA_IS_DANCING, dancing);
+        this.entityData.set(Piglin.DATA_IS_DANCING, dancing);
     }
 
     @Override
     public boolean hurt(DamageSource source, float amount) {
         boolean flag = super.hurt(source, amount);
+
         if (this.level().isClientSide) {
             return false;
         } else {
             if (flag && source.getEntity() instanceof LivingEntity) {
-                PiglinAi.wasHurtBy(this, (LivingEntity)source.getEntity());
+                PiglinAi.wasHurtBy(this, (LivingEntity) source.getEntity());
             }
 
             return flag;
@@ -398,12 +388,13 @@
     }
 
     protected void holdInOffHand(ItemStack stack) {
-        if (stack.is(PiglinAi.BARTERING_ITEM)) {
+        if (stack.is(PiglinAi.BARTERING_ITEM) || allowedBarterItems.contains(stack.getItem())) { // CraftBukkit - Changes to accept custom payment items
             this.setItemSlot(EquipmentSlot.OFFHAND, stack);
             this.setGuaranteedDrop(EquipmentSlot.OFFHAND);
         } else {
             this.setItemSlotAndDropWhenKilled(EquipmentSlot.OFFHAND, stack);
         }
+
     }
 
     @Override
@@ -412,9 +403,10 @@
     }
 
     protected boolean canReplaceCurrentItem(ItemStack candidate) {
-        EquipmentSlot equipmentSlotForItem = Mob.getEquipmentSlotForItem(candidate);
-        ItemStack itemBySlot = this.getItemBySlot(equipmentSlotForItem);
-        return this.canReplaceCurrentItem(candidate, itemBySlot);
+        EquipmentSlot enumitemslot = Mob.getEquipmentSlotForItem(candidate);
+        ItemStack itemstack1 = this.getItemBySlot(enumitemslot);
+
+        return this.canReplaceCurrentItem(candidate, itemstack1);
     }
 
     @Override
@@ -422,12 +414,10 @@
         if (EnchantmentHelper.hasBindingCurse(existing)) {
             return false;
         } else {
-            boolean flag = PiglinAi.isLovedItem(candidate) || candidate.is(Items.CROSSBOW);
-            boolean flag1 = PiglinAi.isLovedItem(existing) || existing.is(Items.CROSSBOW);
-            return flag && !flag1
-                || (flag || !flag1)
-                    && (!this.isAdult() || candidate.is(Items.CROSSBOW) || !existing.is(Items.CROSSBOW))
-                    && super.canReplaceCurrentItem(candidate, existing);
+            boolean flag = PiglinAi.isLovedItem(candidate, this) || candidate.is(Items.CROSSBOW); // CraftBukkit
+            boolean flag1 = PiglinAi.isLovedItem(existing, this) || existing.is(Items.CROSSBOW); // CraftBukkit
+
+            return flag && !flag1 ? true : (!flag && flag1 ? false : (this.isAdult() && !candidate.is(Items.CROSSBOW) && existing.is(Items.CROSSBOW) ? false : super.canReplaceCurrentItem(candidate, existing)));
         }
     }
 
@@ -447,13 +437,14 @@
     }
 
     private Entity getTopPassenger(Entity vehicle, int maxPosition) {
-        List<Entity> passengers = vehicle.getPassengers();
-        return maxPosition != 1 && !passengers.isEmpty() ? this.getTopPassenger(passengers.get(0), maxPosition - 1) : vehicle;
+        List<Entity> list = vehicle.getPassengers();
+
+        return maxPosition != 1 && !list.isEmpty() ? this.getTopPassenger((Entity) list.get(0), maxPosition - 1) : vehicle;
     }
 
     @Override
     protected SoundEvent getAmbientSound() {
-        return this.level().isClientSide ? null : PiglinAi.getSoundForCurrentActivity(this).orElse(null);
+        return this.level().isClientSide ? null : (SoundEvent) PiglinAi.getSoundForCurrentActivity(this).orElse(null); // CraftBukkit - Decompile error
     }
 
     @Override
@@ -467,7 +458,7 @@
     }
 
     @Override
-    protected void playStepSound(BlockPos pos, BlockState block) {
+    protected void playStepSound(BlockPos pos, IBlockData block) {
         this.playSound(SoundEvents.PIGLIN_STEP, 0.15F, 1.0F);
     }
 
