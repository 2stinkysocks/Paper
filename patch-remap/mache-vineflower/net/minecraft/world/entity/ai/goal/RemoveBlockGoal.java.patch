--- a/net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java
+++ b/net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java
@@ -20,15 +20,20 @@
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
 
 public class RemoveBlockGoal extends MoveToBlockGoal {
+
     private final Block blockToRemove;
     private final Mob removerMob;
     private int ticksSinceReachedGoal;
     private static final int WAIT_AFTER_BLOCK_FOUND = 20;
 
-    public RemoveBlockGoal(Block blockToRemove, PathfinderMob removerMob, double speedModifier, int searchRange) {
-        super(removerMob, speedModifier, 24, searchRange);
+    public RemoveBlockGoal(Block blockToRemove, PathfinderMob removerMob, double speedModifier, int i) {
+        super(removerMob, speedModifier, 24, i);
         this.blockToRemove = blockToRemove;
         this.removerMob = removerMob;
     }
@@ -38,7 +43,7 @@
         if (!this.removerMob.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
             return false;
         } else if (this.nextStartTick > 0) {
-            this.nextStartTick--;
+            --this.nextStartTick;
             return false;
         } else if (this.findNearestBlock()) {
             this.nextStartTick = reducedTickDelay(20);
@@ -61,75 +66,62 @@
         this.ticksSinceReachedGoal = 0;
     }
 
-    public void playDestroyProgressSound(LevelAccessor level, BlockPos pos) {
-    }
+    public void playDestroyProgressSound(LevelAccessor level, BlockPos pos) {}
 
-    public void playBreakSound(Level level, BlockPos pos) {
-    }
+    public void playBreakSound(Level level, BlockPos pos) {}
 
     @Override
     public void tick() {
         super.tick();
-        Level level = this.removerMob.level();
-        BlockPos blockPos = this.removerMob.blockPosition();
-        BlockPos posWithBlock = this.getPosWithBlock(blockPos, level);
-        RandomSource random = this.removerMob.getRandom();
-        if (this.isReachedTarget() && posWithBlock != null) {
+        Level world = this.removerMob.level();
+        BlockPos blockposition = this.removerMob.blockPosition();
+        BlockPos blockposition1 = this.getPosWithBlock(blockposition, world);
+        RandomSource randomsource = this.removerMob.getRandom();
+
+        if (this.isReachedTarget() && blockposition1 != null) {
+            Vec3 vec3d;
+            double d0;
+
             if (this.ticksSinceReachedGoal > 0) {
-                Vec3 deltaMovement = this.removerMob.getDeltaMovement();
-                this.removerMob.setDeltaMovement(deltaMovement.x, 0.3, deltaMovement.z);
-                if (!level.isClientSide) {
-                    double d = 0.08;
-                    ((ServerLevel)level)
-                        .sendParticles(
-                            new ItemParticleOption(ParticleTypes.ITEM, new ItemStack(Items.EGG)),
-                            (double)posWithBlock.getX() + 0.5,
-                            (double)posWithBlock.getY() + 0.7,
-                            (double)posWithBlock.getZ() + 0.5,
-                            3,
-                            ((double)random.nextFloat() - 0.5) * 0.08,
-                            ((double)random.nextFloat() - 0.5) * 0.08,
-                            ((double)random.nextFloat() - 0.5) * 0.08,
-                            0.15F
-                        );
+                vec3d = this.removerMob.getDeltaMovement();
+                this.removerMob.setDeltaMovement(vec3d.x, 0.3D, vec3d.z);
+                if (!world.isClientSide) {
+                    d0 = 0.08D;
+                    ((ServerLevel) world).sendParticles(new ItemParticleOption(ParticleTypes.ITEM, new ItemStack(Items.EGG)), (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.7D, (double) blockposition1.getZ() + 0.5D, 3, ((double) randomsource.nextFloat() - 0.5D) * 0.08D, ((double) randomsource.nextFloat() - 0.5D) * 0.08D, ((double) randomsource.nextFloat() - 0.5D) * 0.08D, 0.15000000596046448D);
                 }
             }
 
             if (this.ticksSinceReachedGoal % 2 == 0) {
-                Vec3 deltaMovement = this.removerMob.getDeltaMovement();
-                this.removerMob.setDeltaMovement(deltaMovement.x, -0.3, deltaMovement.z);
+                vec3d = this.removerMob.getDeltaMovement();
+                this.removerMob.setDeltaMovement(vec3d.x, -0.3D, vec3d.z);
                 if (this.ticksSinceReachedGoal % 6 == 0) {
-                    this.playDestroyProgressSound(level, this.blockPos);
+                    this.playDestroyProgressSound(world, this.blockPos);
                 }
             }
 
             if (this.ticksSinceReachedGoal > 60) {
-                level.removeBlock(posWithBlock, false);
-                if (!level.isClientSide) {
-                    for (int i = 0; i < 20; i++) {
-                        double d = random.nextGaussian() * 0.02;
-                        double d1 = random.nextGaussian() * 0.02;
-                        double d2 = random.nextGaussian() * 0.02;
-                        ((ServerLevel)level)
-                            .sendParticles(
-                                ParticleTypes.POOF,
-                                (double)posWithBlock.getX() + 0.5,
-                                (double)posWithBlock.getY(),
-                                (double)posWithBlock.getZ() + 0.5,
-                                1,
-                                d,
-                                d1,
-                                d2,
-                                0.15F
-                            );
+                // CraftBukkit start - Step on eggs
+                if (!CraftEventFactory.callEntityInteractEvent(this.removerMob, CraftBlock.at(world, blockposition1))) {
+                    return;
+                }
+                // CraftBukkit end
+                world.removeBlock(blockposition1, false);
+                if (!world.isClientSide) {
+                    for (int i = 0; i < 20; ++i) {
+                        d0 = randomsource.nextGaussian() * 0.02D;
+                        double d1 = randomsource.nextGaussian() * 0.02D;
+                        double d2 = randomsource.nextGaussian() * 0.02D;
+
+                        ((ServerLevel) world).sendParticles(ParticleTypes.POOF, (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY(), (double) blockposition1.getZ() + 0.5D, 1, d0, d1, d2, 0.15000000596046448D);
                     }
 
-                    this.playBreakSound(level, posWithBlock);
+                    this.playBreakSound(world, blockposition1);
                 }
             }
 
-            this.ticksSinceReachedGoal++;
+            ++this.ticksSinceReachedGoal;
         }
+
     }
 
     @Nullable
@@ -137,11 +129,15 @@
         if (level.getBlockState(pos).is(this.blockToRemove)) {
             return pos;
         } else {
-            BlockPos[] blockPoss = new BlockPos[]{pos.below(), pos.west(), pos.east(), pos.north(), pos.south(), pos.below().below()};
+            BlockPos[] ablockposition = new BlockPos[]{pos.below(), pos.west(), pos.east(), pos.north(), pos.south(), pos.below().below()};
+            BlockPos[] ablockposition1 = ablockposition;
+            int i = ablockposition.length;
 
-            for (BlockPos blockPos : blockPoss) {
-                if (level.getBlockState(blockPos).is(this.blockToRemove)) {
-                    return blockPos;
+            for (int j = 0; j < i; ++j) {
+                BlockPos blockposition1 = ablockposition1[j];
+
+                if (level.getBlockState(blockposition1).is(this.blockToRemove)) {
+                    return blockposition1;
                 }
             }
 
@@ -151,10 +147,8 @@
 
     @Override
     protected boolean isValidTarget(LevelReader level, BlockPos pos) {
-        ChunkAccess chunk = level.getChunk(SectionPos.blockToSectionCoord(pos.getX()), SectionPos.blockToSectionCoord(pos.getZ()), ChunkStatus.FULL, false);
-        return chunk != null
-            && chunk.getBlockState(pos).is(this.blockToRemove)
-            && chunk.getBlockState(pos.above()).isAir()
-            && chunk.getBlockState(pos.above(2)).isAir();
+        ChunkAccess ichunkaccess = level.getChunk(SectionPos.blockToSectionCoord(pos.getX()), SectionPos.blockToSectionCoord(pos.getZ()), ChunkStatus.FULL, false);
+
+        return ichunkaccess == null ? false : ichunkaccess.getBlockState(pos).is(this.blockToRemove) && ichunkaccess.getBlockState(pos.above()).isAir() && ichunkaccess.getBlockState(pos.above(2)).isAir();
     }
 }
