--- a/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
+++ b/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
@@ -3,30 +3,40 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import java.util.Comparator;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.function.Function;
 import java.util.function.ToIntFunction;
+import java.util.stream.Stream;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.Mth;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryStatus;
-import net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities;
 import net.minecraft.world.entity.ai.memory.WalkTarget;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.level.pathfinder.WalkNodeEvaluator;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+// CraftBukkit end
 
 public class PrepareRamNearestTarget<E extends PathfinderMob> extends Behavior<E> {
+
     public static final int TIME_OUT_DURATION = 160;
     private final ToIntFunction<E> getCooldownOnFail;
     private final int minRamDistance;
@@ -38,28 +48,8 @@
     private Optional<Long> reachedRamPositionTimestamp = Optional.empty();
     private Optional<PrepareRamNearestTarget.RamCandidate> ramCandidate = Optional.empty();
 
-    public PrepareRamNearestTarget(
-        ToIntFunction<E> getCooldownOnFall,
-        int minRamDistance,
-        int maxRamDistance,
-        float walkSpeed,
-        TargetingConditions ramTargeting,
-        int ramPrepareTime,
-        Function<E, SoundEvent> getPrepareRamSound
-    ) {
-        super(
-            ImmutableMap.of(
-                MemoryModuleType.LOOK_TARGET,
-                MemoryStatus.REGISTERED,
-                MemoryModuleType.RAM_COOLDOWN_TICKS,
-                MemoryStatus.VALUE_ABSENT,
-                MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
-                MemoryStatus.VALUE_PRESENT,
-                MemoryModuleType.RAM_TARGET,
-                MemoryStatus.VALUE_ABSENT
-            ),
-            160
-        );
+    public PrepareRamNearestTarget(ToIntFunction<E> getCooldownOnFall, int minRamDistance, int maxRamDistance, float walkSpeed, TargetingConditions ramTargeting, int ramPrepareTime, Function<E, SoundEvent> getPrepareRamSound) {
+        super(ImmutableMap.of(MemoryModuleType.LOOK_TARGET, MemoryStatus.REGISTERED, MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryStatus.VALUE_ABSENT, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryStatus.VALUE_PRESENT, MemoryModuleType.RAM_TARGET, MemoryStatus.VALUE_ABSENT), 160);
         this.getCooldownOnFail = getCooldownOnFall;
         this.minRamDistance = minRamDistance;
         this.maxRamDistance = maxRamDistance;
@@ -69,106 +59,136 @@
         this.getPrepareRamSound = getPrepareRamSound;
     }
 
-    @Override
     protected void start(ServerLevel level, PathfinderMob entity, long gameTime) {
-        Brain<?> brain = entity.getBrain();
-        brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES)
-            .flatMap(memory -> memory.findClosest(entity1 -> this.ramTargeting.test(entity, entity1)))
-            .ifPresent(entity1 -> this.chooseRamPosition(entity, entity1));
+        Brain<?> behaviorcontroller = entity.getBrain();
+
+        behaviorcontroller.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).flatMap((nearestvisiblelivingentities) -> {
+            return nearestvisiblelivingentities.findClosest((entityliving) -> {
+                return this.ramTargeting.test(entity, entityliving);
+            });
+        }).ifPresent((entityliving) -> {
+            // CraftBukkit start
+            EntityTargetEvent event = CraftEventFactory.callEntityTargetLivingEvent(entity, entityliving, (entityliving instanceof ServerPlayer) ? EntityTargetEvent.TargetReason.CLOSEST_PLAYER : EntityTargetEvent.TargetReason.CLOSEST_ENTITY);
+            if (event.isCancelled() || event.getTarget() == null) {
+                return;
+            }
+            entityliving = ((CraftLivingEntity) event.getTarget()).getHandle();
+            // CraftBukkit end
+            this.chooseRamPosition(entity, entityliving);
+        });
     }
 
-    @Override
     protected void stop(ServerLevel level, E entity, long gameTime) {
-        Brain<?> brain = entity.getBrain();
-        if (!brain.hasMemoryValue(MemoryModuleType.RAM_TARGET)) {
-            level.broadcastEntityEvent(entity, (byte)59);
-            brain.setMemory(MemoryModuleType.RAM_COOLDOWN_TICKS, this.getCooldownOnFail.applyAsInt(entity));
+        Brain<?> behaviorcontroller = entity.getBrain();
+
+        if (!behaviorcontroller.hasMemoryValue(MemoryModuleType.RAM_TARGET)) {
+            level.broadcastEntityEvent(entity, (byte) 59);
+            behaviorcontroller.setMemory(MemoryModuleType.RAM_COOLDOWN_TICKS, this.getCooldownOnFail.applyAsInt(entity)); // CraftBukkit - decompile error
         }
+
     }
 
-    @Override
     protected boolean canStillUse(ServerLevel level, PathfinderMob entity, long gameTime) {
-        return this.ramCandidate.isPresent() && this.ramCandidate.get().getTarget().isAlive();
+        return this.ramCandidate.isPresent() && ((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getTarget().isAlive();
     }
 
-    @Override
     protected void tick(ServerLevel level, E owner, long gameTime) {
         if (!this.ramCandidate.isEmpty()) {
-            owner.getBrain().setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(this.ramCandidate.get().getStartPosition(), this.walkSpeed, 0));
-            owner.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, new EntityTracker(this.ramCandidate.get().getTarget(), true));
-            boolean flag = !this.ramCandidate.get().getTarget().blockPosition().equals(this.ramCandidate.get().getTargetPosition());
+            owner.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (new WalkTarget(((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getStartPosition(), this.walkSpeed, 0))); // CraftBukkit - decompile error
+            owner.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, (new EntityTracker(((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getTarget(), true))); // CraftBukkit - decompile error
+            boolean flag = !((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getTarget().blockPosition().equals(((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getTargetPosition());
+
             if (flag) {
-                level.broadcastEntityEvent(owner, (byte)59);
+                level.broadcastEntityEvent(owner, (byte) 59);
                 owner.getNavigation().stop();
-                this.chooseRamPosition(owner, this.ramCandidate.get().target);
+                this.chooseRamPosition(owner, ((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).target);
             } else {
-                BlockPos blockPos = owner.blockPosition();
-                if (blockPos.equals(this.ramCandidate.get().getStartPosition())) {
-                    level.broadcastEntityEvent(owner, (byte)58);
+                BlockPos blockposition = owner.blockPosition();
+
+                if (blockposition.equals(((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getStartPosition())) {
+                    level.broadcastEntityEvent(owner, (byte) 58);
                     if (this.reachedRamPositionTimestamp.isEmpty()) {
                         this.reachedRamPositionTimestamp = Optional.of(gameTime);
                     }
 
-                    if (gameTime - this.reachedRamPositionTimestamp.get() >= (long)this.ramPrepareTime) {
-                        owner.getBrain().setMemory(MemoryModuleType.RAM_TARGET, this.getEdgeOfBlock(blockPos, this.ramCandidate.get().getTargetPosition()));
-                        level.playSound(null, owner, this.getPrepareRamSound.apply(owner), SoundSource.NEUTRAL, 1.0F, owner.getVoicePitch());
+                    if (gameTime - (Long) this.reachedRamPositionTimestamp.get() >= (long) this.ramPrepareTime) {
+                        owner.getBrain().setMemory(MemoryModuleType.RAM_TARGET, this.getEdgeOfBlock(blockposition, ((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getTargetPosition())); // CraftBukkit - decompile error
+                        level.playSound((Player) null, (Entity) owner, (SoundEvent) this.getPrepareRamSound.apply(owner), SoundSource.NEUTRAL, 1.0F, owner.getVoicePitch());
                         this.ramCandidate = Optional.empty();
                     }
                 }
             }
+
         }
     }
 
     private Vec3 getEdgeOfBlock(BlockPos pos, BlockPos other) {
-        double d = 0.5;
-        double d1 = 0.5 * (double)Mth.sign((double)(other.getX() - pos.getX()));
-        double d2 = 0.5 * (double)Mth.sign((double)(other.getZ() - pos.getZ()));
-        return Vec3.atBottomCenterOf(other).add(d1, 0.0, d2);
+        double d0 = 0.5D;
+        double d1 = 0.5D * (double) Mth.sign((double) (other.getX() - pos.getX()));
+        double d2 = 0.5D * (double) Mth.sign((double) (other.getZ() - pos.getZ()));
+
+        return Vec3.atBottomCenterOf(other).add(d1, 0.0D, d2);
     }
 
     private Optional<BlockPos> calculateRammingStartPosition(PathfinderMob pathfinder, LivingEntity entity) {
-        BlockPos blockPos = entity.blockPosition();
-        if (!this.isWalkableBlock(pathfinder, blockPos)) {
+        BlockPos blockposition = entity.blockPosition();
+
+        if (!this.isWalkableBlock(pathfinder, blockposition)) {
             return Optional.empty();
         } else {
             List<BlockPos> list = Lists.newArrayList();
-            BlockPos.MutableBlockPos mutableBlockPos = blockPos.mutable();
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = blockposition.mutable();
+            Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
 
-            for (Direction direction : Direction.Plane.HORIZONTAL) {
-                mutableBlockPos.set(blockPos);
+            while (iterator.hasNext()) {
+                Direction enumdirection = (Direction) iterator.next();
 
-                for (int i = 0; i < this.maxRamDistance; i++) {
-                    if (!this.isWalkableBlock(pathfinder, mutableBlockPos.move(direction))) {
-                        mutableBlockPos.move(direction.getOpposite());
-                        break;
+                blockposition_mutableblockposition.set(blockposition);
+                int i = 0;
+
+                while (true) {
+                    if (i < this.maxRamDistance) {
+                        if (this.isWalkableBlock(pathfinder, blockposition_mutableblockposition.move(enumdirection))) {
+                            ++i;
+                            continue;
+                        }
+
+                        blockposition_mutableblockposition.move(enumdirection.getOpposite());
                     }
-                }
 
-                if (mutableBlockPos.distManhattan(blockPos) >= this.minRamDistance) {
-                    list.add(mutableBlockPos.immutable());
+                    if (blockposition_mutableblockposition.distManhattan(blockposition) >= this.minRamDistance) {
+                        list.add(blockposition_mutableblockposition.immutable());
+                    }
+                    break;
                 }
             }
 
-            PathNavigation navigation = pathfinder.getNavigation();
-            return list.stream().sorted(Comparator.comparingDouble(pathfinder.blockPosition()::distSqr)).filter(pos -> {
-                Path path = navigation.createPath(pos, 0);
-                return path != null && path.canReach();
+            PathNavigation navigationabstract = pathfinder.getNavigation();
+            Stream<BlockPos> stream = list.stream(); // CraftBukkit - decompile error
+            BlockPos blockposition1 = pathfinder.blockPosition();
+
+            Objects.requireNonNull(blockposition1);
+            return stream.sorted(Comparator.comparingDouble(blockposition1::distSqr)).filter((blockposition2) -> {
+                Path pathentity = navigationabstract.createPath(blockposition2, 0);
+
+                return pathentity != null && pathentity.canReach();
             }).findFirst();
         }
     }
 
     private boolean isWalkableBlock(PathfinderMob pathfinder, BlockPos pos) {
-        return pathfinder.getNavigation().isStableDestination(pos)
-            && pathfinder.getPathfindingMalus(WalkNodeEvaluator.getBlockPathTypeStatic(pathfinder.level(), pos.mutable())) == 0.0F;
+        return pathfinder.getNavigation().isStableDestination(pos) && pathfinder.getPathfindingMalus(WalkNodeEvaluator.getBlockPathTypeStatic(pathfinder.level(), pos.mutable())) == 0.0F;
     }
 
     private void chooseRamPosition(PathfinderMob pathfinder, LivingEntity entity) {
         this.reachedRamPositionTimestamp = Optional.empty();
-        this.ramCandidate = this.calculateRammingStartPosition(pathfinder, entity)
-            .map(blockPos -> new PrepareRamNearestTarget.RamCandidate(blockPos, entity.blockPosition(), entity));
+        this.ramCandidate = this.calculateRammingStartPosition(pathfinder, entity).map((blockposition) -> {
+            return new PrepareRamNearestTarget.RamCandidate(blockposition, entity.blockPosition(), entity);
+        });
     }
 
     public static class RamCandidate {
+
         private final BlockPos startPosition;
         private final BlockPos targetPosition;
         final LivingEntity target;
