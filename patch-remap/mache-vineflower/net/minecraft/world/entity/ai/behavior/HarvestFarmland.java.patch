--- a/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
+++ b/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
@@ -15,16 +15,24 @@
 import net.minecraft.world.entity.ai.memory.WalkTarget;
 import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.entity.npc.VillagerProfession;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.BlockItem;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.IBlockData;
+import net.minecraft.world.level.gameevent.GameEvent;
+
+// CraftBukkit start
+import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.CropBlock;
 import net.minecraft.world.level.block.FarmBlock;
-import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.gameevent.GameEvent;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
 
 public class HarvestFarmland extends Behavior<Villager> {
+
     private static final int HARVEST_DURATION = 200;
     public static final float SPEED_MODIFIER = 0.5F;
     @Nullable
@@ -34,34 +42,25 @@
     private final List<BlockPos> validFarmlandAroundVillager = Lists.newArrayList();
 
     public HarvestFarmland() {
-        super(
-            ImmutableMap.of(
-                MemoryModuleType.LOOK_TARGET,
-                MemoryStatus.VALUE_ABSENT,
-                MemoryModuleType.WALK_TARGET,
-                MemoryStatus.VALUE_ABSENT,
-                MemoryModuleType.SECONDARY_JOB_SITE,
-                MemoryStatus.VALUE_PRESENT
-            )
-        );
+        super(ImmutableMap.of(MemoryModuleType.LOOK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.SECONDARY_JOB_SITE, MemoryStatus.VALUE_PRESENT));
     }
 
-    @Override
     protected boolean checkExtraStartConditions(ServerLevel level, Villager owner) {
         if (!level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
             return false;
         } else if (owner.getVillagerData().getProfession() != VillagerProfession.FARMER) {
             return false;
         } else {
-            BlockPos.MutableBlockPos mutableBlockPos = owner.blockPosition().mutable();
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = owner.blockPosition().mutable();
+
             this.validFarmlandAroundVillager.clear();
 
-            for (int i = -1; i <= 1; i++) {
-                for (int i1 = -1; i1 <= 1; i1++) {
-                    for (int i2 = -1; i2 <= 1; i2++) {
-                        mutableBlockPos.set(owner.getX() + (double)i, owner.getY() + (double)i1, owner.getZ() + (double)i2);
-                        if (this.validPos(mutableBlockPos, level)) {
-                            this.validFarmlandAroundVillager.add(new BlockPos(mutableBlockPos));
+            for (int i = -1; i <= 1; ++i) {
+                for (int j = -1; j <= 1; ++j) {
+                    for (int k = -1; k <= 1; ++k) {
+                        blockposition_mutableblockposition.set(owner.getX() + (double) i, owner.getY() + (double) j, owner.getZ() + (double) k);
+                        if (this.validPos(blockposition_mutableblockposition, level)) {
+                            this.validFarmlandAroundVillager.add(new BlockPos(blockposition_mutableblockposition));
                         }
                     }
                 }
@@ -74,27 +73,25 @@
 
     @Nullable
     private BlockPos getValidFarmland(ServerLevel serverLevel) {
-        return this.validFarmlandAroundVillager.isEmpty()
-            ? null
-            : this.validFarmlandAroundVillager.get(serverLevel.getRandom().nextInt(this.validFarmlandAroundVillager.size()));
+        return this.validFarmlandAroundVillager.isEmpty() ? null : (BlockPos) this.validFarmlandAroundVillager.get(serverLevel.getRandom().nextInt(this.validFarmlandAroundVillager.size()));
     }
 
     private boolean validPos(BlockPos pos, ServerLevel serverLevel) {
-        BlockState blockState = serverLevel.getBlockState(pos);
-        Block block = blockState.getBlock();
+        IBlockData iblockdata = serverLevel.getBlockState(pos);
+        Block block = iblockdata.getBlock();
         Block block1 = serverLevel.getBlockState(pos.below()).getBlock();
-        return block instanceof CropBlock && ((CropBlock)block).isMaxAge(blockState) || blockState.isAir() && block1 instanceof FarmBlock;
+
+        return block instanceof CropBlock && ((CropBlock) block).isMaxAge(iblockdata) || iblockdata.isAir() && block1 instanceof FarmBlock;
     }
 
-    @Override
     protected void start(ServerLevel level, Villager entity, long gameTime) {
         if (gameTime > this.nextOkStartTime && this.aboveFarmlandPos != null) {
-            entity.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, new BlockPosTracker(this.aboveFarmlandPos));
-            entity.getBrain().setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(new BlockPosTracker(this.aboveFarmlandPos), 0.5F, 1));
+            entity.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, (new BlockPosTracker(this.aboveFarmlandPos))); // CraftBukkit - decompile error
+            entity.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (new WalkTarget(new BlockPosTracker(this.aboveFarmlandPos), 0.5F, 1))); // CraftBukkit - decompile error
         }
+
     }
 
-    @Override
     protected void stop(ServerLevel level, Villager entity, long gameTime) {
         entity.getBrain().eraseMemory(MemoryModuleType.LOOK_TARGET);
         entity.getBrain().eraseMemory(MemoryModuleType.WALK_TARGET);
@@ -102,66 +99,67 @@
         this.nextOkStartTime = gameTime + 40L;
     }
 
-    @Override
     protected void tick(ServerLevel level, Villager owner, long gameTime) {
-        if (this.aboveFarmlandPos == null || this.aboveFarmlandPos.closerToCenterThan(owner.position(), 1.0)) {
+        if (this.aboveFarmlandPos == null || this.aboveFarmlandPos.closerToCenterThan(owner.position(), 1.0D)) {
             if (this.aboveFarmlandPos != null && gameTime > this.nextOkStartTime) {
-                BlockState blockState = level.getBlockState(this.aboveFarmlandPos);
-                Block block = blockState.getBlock();
+                IBlockData iblockdata = level.getBlockState(this.aboveFarmlandPos);
+                Block block = iblockdata.getBlock();
                 Block block1 = level.getBlockState(this.aboveFarmlandPos.below()).getBlock();
-                if (block instanceof CropBlock && ((CropBlock)block).isMaxAge(blockState)) {
+
+                if (block instanceof CropBlock && ((CropBlock) block).isMaxAge(iblockdata)) {
+                    if (CraftEventFactory.callEntityChangeBlockEvent(owner, this.aboveFarmlandPos, Blocks.AIR.defaultBlockState())) { // CraftBukkit
                     level.destroyBlock(this.aboveFarmlandPos, true, owner);
+                    } // CraftBukkit
                 }
 
-                if (blockState.isAir() && block1 instanceof FarmBlock && owner.hasFarmSeeds()) {
-                    SimpleContainer inventory = owner.getInventory();
+                if (iblockdata.isAir() && block1 instanceof FarmBlock && owner.hasFarmSeeds()) {
+                    SimpleContainer inventorysubcontainer = owner.getInventory();
 
-                    for (int i = 0; i < inventory.getContainerSize(); i++) {
-                        ItemStack item = inventory.getItem(i);
+                    for (int j = 0; j < inventorysubcontainer.getContainerSize(); ++j) {
+                        ItemStack itemstack = inventorysubcontainer.getItem(j);
                         boolean flag = false;
-                        if (!item.isEmpty() && item.is(ItemTags.VILLAGER_PLANTABLE_SEEDS) && item.getItem() instanceof BlockItem blockItem) {
-                            BlockState blockState1 = blockItem.getBlock().defaultBlockState();
-                            level.setBlockAndUpdate(this.aboveFarmlandPos, blockState1);
-                            level.gameEvent(GameEvent.BLOCK_PLACE, this.aboveFarmlandPos, GameEvent.Context.of(owner, blockState1));
-                            flag = true;
+
+                        if (!itemstack.isEmpty() && itemstack.is(ItemTags.VILLAGER_PLANTABLE_SEEDS)) {
+                            Item item = itemstack.getItem();
+
+                            if (item instanceof BlockItem) {
+                                BlockItem itemblock = (BlockItem) item;
+                                IBlockData iblockdata1 = itemblock.getBlock().defaultBlockState();
+
+                                if (CraftEventFactory.callEntityChangeBlockEvent(owner, this.aboveFarmlandPos, iblockdata1)) { // CraftBukkit
+                                level.setBlockAndUpdate(this.aboveFarmlandPos, iblockdata1);
+                                level.gameEvent(GameEvent.BLOCK_PLACE, this.aboveFarmlandPos, GameEvent.Context.of(owner, iblockdata1));
+                                flag = true;
+                                } // CraftBukkit
+                            }
                         }
 
                         if (flag) {
-                            level.playSound(
-                                null,
-                                (double)this.aboveFarmlandPos.getX(),
-                                (double)this.aboveFarmlandPos.getY(),
-                                (double)this.aboveFarmlandPos.getZ(),
-                                SoundEvents.CROP_PLANTED,
-                                SoundSource.BLOCKS,
-                                1.0F,
-                                1.0F
-                            );
-                            item.shrink(1);
-                            if (item.isEmpty()) {
-                                inventory.setItem(i, ItemStack.EMPTY);
+                            level.playSound((Player) null, (double) this.aboveFarmlandPos.getX(), (double) this.aboveFarmlandPos.getY(), (double) this.aboveFarmlandPos.getZ(), SoundEvents.CROP_PLANTED, SoundSource.BLOCKS, 1.0F, 1.0F);
+                            itemstack.shrink(1);
+                            if (itemstack.isEmpty()) {
+                                inventorysubcontainer.setItem(j, ItemStack.EMPTY);
                             }
                             break;
                         }
                     }
                 }
 
-                if (block instanceof CropBlock && !((CropBlock)block).isMaxAge(blockState)) {
+                if (block instanceof CropBlock && !((CropBlock) block).isMaxAge(iblockdata)) {
                     this.validFarmlandAroundVillager.remove(this.aboveFarmlandPos);
                     this.aboveFarmlandPos = this.getValidFarmland(level);
                     if (this.aboveFarmlandPos != null) {
                         this.nextOkStartTime = gameTime + 20L;
-                        owner.getBrain().setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(new BlockPosTracker(this.aboveFarmlandPos), 0.5F, 1));
-                        owner.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, new BlockPosTracker(this.aboveFarmlandPos));
+                        owner.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (new WalkTarget(new BlockPosTracker(this.aboveFarmlandPos), 0.5F, 1))); // CraftBukkit - decompile error
+                        owner.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, (new BlockPosTracker(this.aboveFarmlandPos))); // CraftBukkit - decompile error
                     }
                 }
             }
 
-            this.timeWorkedSoFar++;
+            ++this.timeWorkedSoFar;
         }
     }
 
-    @Override
     protected boolean canStillUse(ServerLevel level, Villager entity, long gameTime) {
         return this.timeWorkedSoFar < 200;
     }
