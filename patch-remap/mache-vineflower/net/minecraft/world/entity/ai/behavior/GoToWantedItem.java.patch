--- a/net/minecraft/world/entity/ai/behavior/GoToWantedItem.java
+++ b/net/minecraft/world/entity/ai/behavior/GoToWantedItem.java
@@ -2,7 +2,6 @@
 
 import com.mojang.datafixers.kinds.K1;
 import java.util.function.Predicate;
-import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.behavior.declarative.BehaviorBuilder;
 import net.minecraft.world.entity.ai.behavior.declarative.MemoryAccessor;
@@ -11,40 +10,48 @@
 import net.minecraft.world.entity.item.ItemEntity;
 
 public class GoToWantedItem {
+
+    public GoToWantedItem() {}
+
     public static BehaviorControl<LivingEntity> create(float speedModifier, boolean hasTarget, int maxDistToWalk) {
-        return create(entity -> true, speedModifier, hasTarget, maxDistToWalk);
+        return create((entityliving) -> {
+            return true;
+        }, speedModifier, hasTarget, maxDistToWalk);
     }
 
     public static <E extends LivingEntity> BehaviorControl<E> create(Predicate<E> canWalkToItem, float speedModifier, boolean hasTarget, int maxDistToWalk) {
-        return BehaviorBuilder.create(
-            instance -> {
-                BehaviorBuilder<E, ? extends MemoryAccessor<? extends K1, WalkTarget>> behaviorBuilder = hasTarget
-                    ? instance.registered(MemoryModuleType.WALK_TARGET)
-                    : instance.absent(MemoryModuleType.WALK_TARGET);
-                return instance.group(
-                        instance.registered(MemoryModuleType.LOOK_TARGET),
-                        behaviorBuilder,
-                        instance.present(MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM),
-                        instance.registered(MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS)
-                    )
-                    .apply(
-                        instance,
-                        (lookTarget, walkTarget, nearestVisibleWantedItem, itemPickupCooldownTicks) -> (level, entity, gameTime) -> {
-                                ItemEntity itemEntity = instance.get(nearestVisibleWantedItem);
-                                if (instance.tryGet(itemPickupCooldownTicks).isEmpty()
-                                    && canWalkToItem.test(entity)
-                                    && itemEntity.closerThan(entity, (double)maxDistToWalk)
-                                    && entity.level().getWorldBorder().isWithinBounds(itemEntity.blockPosition())) {
-                                    WalkTarget walkTarget1 = new WalkTarget(new EntityTracker(itemEntity, false), speedModifier, 0);
-                                    lookTarget.set(new EntityTracker(itemEntity, true));
-                                    walkTarget.set(walkTarget1);
-                                    return true;
-                                } else {
-                                    return false;
-                                }
+        return BehaviorBuilder.create((behaviorbuilder_b) -> {
+            BehaviorBuilder<E, ? extends MemoryAccessor<? extends K1, WalkTarget>> behaviorbuilder = hasTarget ? behaviorbuilder_b.registered(MemoryModuleType.WALK_TARGET) : behaviorbuilder_b.absent(MemoryModuleType.WALK_TARGET);
+
+            return behaviorbuilder_b.group(behaviorbuilder_b.registered(MemoryModuleType.LOOK_TARGET), behaviorbuilder, behaviorbuilder_b.present(MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM), behaviorbuilder_b.registered(MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS)).apply(behaviorbuilder_b, (memoryaccessor, memoryaccessor1, memoryaccessor2, memoryaccessor3) -> {
+                return (worldserver, entityliving, j) -> {
+                    ItemEntity entityitem = (ItemEntity) behaviorbuilder_b.get(memoryaccessor2);
+
+                    if (behaviorbuilder_b.tryGet(memoryaccessor3).isEmpty() && canWalkToItem.test(entityliving) && entityitem.closerThan(entityliving, (double) maxDistToWalk) && entityliving.level().getWorldBorder().isWithinBounds(entityitem.blockPosition())) {
+                        // CraftBukkit start
+                        if (entityliving instanceof net.minecraft.world.entity.animal.allay.Allay) {
+                            org.bukkit.event.entity.EntityTargetEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTargetEvent(entityliving, entityitem, org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_ENTITY);
+
+                            if (event.isCancelled()) {
+                                return false;
                             }
-                    );
-            }
-        );
+                            if (!(event.getTarget() instanceof ItemEntity)) {
+                                memoryaccessor2.erase();
+                            }
+
+                            entityitem = (ItemEntity) ((org.bukkit.craftbukkit.entity.CraftEntity) event.getTarget()).getHandle();
+                        }
+                        // CraftBukkit end
+                        WalkTarget memorytarget = new WalkTarget(new EntityTracker(entityitem, false), speedModifier, 0);
+
+                        memoryaccessor.set(new EntityTracker(entityitem, true));
+                        memoryaccessor1.set(memorytarget);
+                        return true;
+                    } else {
+                        return false;
+                    }
+                };
+            });
+        });
     }
 }
