--- a/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
+++ b/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
@@ -8,6 +8,7 @@
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.AgeableMob;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
@@ -16,115 +17,128 @@
 import net.minecraft.world.entity.ai.village.poi.PoiTypes;
 import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.level.pathfinder.Path;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+// CraftBukkit end
 
 public class VillagerMakeLove extends Behavior<Villager> {
+
     private static final int INTERACT_DIST_SQR = 5;
     private static final float SPEED_MODIFIER = 0.5F;
     private long birthTimestamp;
 
     public VillagerMakeLove() {
-        super(
-            ImmutableMap.of(
-                MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_PRESENT, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryStatus.VALUE_PRESENT
-            ),
-            350,
-            350
-        );
+        super(ImmutableMap.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_PRESENT, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryStatus.VALUE_PRESENT), 350, 350);
     }
 
-    @Override
     protected boolean checkExtraStartConditions(ServerLevel level, Villager owner) {
         return this.isBreedingPossible(owner);
     }
 
-    @Override
     protected boolean canStillUse(ServerLevel level, Villager entity, long gameTime) {
         return gameTime <= this.birthTimestamp && this.isBreedingPossible(entity);
     }
 
-    @Override
     protected void start(ServerLevel level, Villager entity, long gameTime) {
-        AgeableMob ageableMob = entity.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
-        BehaviorUtils.lockGazeAndWalkToEachOther(entity, ageableMob, 0.5F);
-        level.broadcastEntityEvent(ageableMob, (byte)18);
-        level.broadcastEntityEvent(entity, (byte)18);
-        int i = 275 + entity.getRandom().nextInt(50);
-        this.birthTimestamp = gameTime + (long)i;
+        AgeableMob entityageable = (AgeableMob) entity.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
+
+        BehaviorUtils.lockGazeAndWalkToEachOther(entity, entityageable, 0.5F);
+        level.broadcastEntityEvent(entityageable, (byte) 18);
+        level.broadcastEntityEvent(entity, (byte) 18);
+        int j = 275 + entity.getRandom().nextInt(50);
+
+        this.birthTimestamp = gameTime + (long) j;
     }
 
-    @Override
     protected void tick(ServerLevel level, Villager owner, long gameTime) {
-        Villager villager = (Villager)owner.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
-        if (!(owner.distanceToSqr(villager) > 5.0)) {
-            BehaviorUtils.lockGazeAndWalkToEachOther(owner, villager, 0.5F);
+        Villager entityvillager1 = (Villager) owner.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
+
+        if (owner.distanceToSqr((Entity) entityvillager1) <= 5.0D) {
+            BehaviorUtils.lockGazeAndWalkToEachOther(owner, entityvillager1, 0.5F);
             if (gameTime >= this.birthTimestamp) {
                 owner.eatAndDigestFood();
-                villager.eatAndDigestFood();
-                this.tryToGiveBirth(level, owner, villager);
+                entityvillager1.eatAndDigestFood();
+                this.tryToGiveBirth(level, owner, entityvillager1);
             } else if (owner.getRandom().nextInt(35) == 0) {
-                level.broadcastEntityEvent(villager, (byte)12);
-                level.broadcastEntityEvent(owner, (byte)12);
+                level.broadcastEntityEvent(entityvillager1, (byte) 12);
+                level.broadcastEntityEvent(owner, (byte) 12);
             }
+
         }
     }
 
     private void tryToGiveBirth(ServerLevel level, Villager parent, Villager partner) {
         Optional<BlockPos> optional = this.takeVacantBed(level, parent);
+
         if (optional.isEmpty()) {
-            level.broadcastEntityEvent(partner, (byte)13);
-            level.broadcastEntityEvent(parent, (byte)13);
+            level.broadcastEntityEvent(partner, (byte) 13);
+            level.broadcastEntityEvent(parent, (byte) 13);
         } else {
             Optional<Villager> optional1 = this.breed(level, parent, partner);
+
             if (optional1.isPresent()) {
-                this.giveBedToChild(level, optional1.get(), optional.get());
+                this.giveBedToChild(level, (Villager) optional1.get(), (BlockPos) optional.get());
             } else {
-                level.getPoiManager().release(optional.get());
-                DebugPackets.sendPoiTicketCountPacket(level, optional.get());
+                level.getPoiManager().release((BlockPos) optional.get());
+                DebugPackets.sendPoiTicketCountPacket(level, (BlockPos) optional.get());
             }
         }
+
     }
 
-    @Override
     protected void stop(ServerLevel level, Villager entity, long gameTime) {
         entity.getBrain().eraseMemory(MemoryModuleType.BREED_TARGET);
     }
 
     private boolean isBreedingPossible(Villager villager) {
-        Brain<Villager> brain = villager.getBrain();
-        Optional<AgeableMob> optional = brain.getMemory(MemoryModuleType.BREED_TARGET).filter(entity -> entity.getType() == EntityType.VILLAGER);
-        return !optional.isEmpty()
-            && BehaviorUtils.targetIsValid(brain, MemoryModuleType.BREED_TARGET, EntityType.VILLAGER)
-            && villager.canBreed()
-            && optional.get().canBreed();
+        Brain<Villager> behaviorcontroller = villager.getBrain();
+        Optional<AgeableMob> optional = behaviorcontroller.getMemory(MemoryModuleType.BREED_TARGET).filter((entityageable) -> {
+            return entityageable.getType() == EntityType.VILLAGER;
+        });
+
+        return optional.isEmpty() ? false : BehaviorUtils.targetIsValid(behaviorcontroller, MemoryModuleType.BREED_TARGET, EntityType.VILLAGER) && villager.canBreed() && ((AgeableMob) optional.get()).canBreed();
     }
 
     private Optional<BlockPos> takeVacantBed(ServerLevel level, Villager villager) {
-        return level.getPoiManager()
-            .take(holder -> holder.is(PoiTypes.HOME), (holder, blockPos) -> this.canReach(villager, blockPos, holder), villager.blockPosition(), 48);
+        return level.getPoiManager().take((holder) -> {
+            return holder.is(PoiTypes.HOME);
+        }, (holder, blockposition) -> {
+            return this.canReach(villager, blockposition, holder);
+        }, villager.blockPosition(), 48);
     }
 
     private boolean canReach(Villager villager, BlockPos pos, Holder<PoiType> poiType) {
-        Path path = villager.getNavigation().createPath(pos, poiType.value().validRange());
-        return path != null && path.canReach();
+        Path pathentity = villager.getNavigation().createPath(pos, ((PoiType) poiType.value()).validRange());
+
+        return pathentity != null && pathentity.canReach();
     }
 
     private Optional<Villager> breed(ServerLevel level, Villager parent, Villager partner) {
-        Villager breedOffspring = parent.getBreedOffspring(level, partner);
-        if (breedOffspring == null) {
+        Villager entityvillager2 = parent.getBreedOffspring(level, partner);
+
+        if (entityvillager2 == null) {
             return Optional.empty();
         } else {
+            entityvillager2.setAge(-24000);
+            entityvillager2.moveTo(parent.getX(), parent.getY(), parent.getZ(), 0.0F, 0.0F);
+            // CraftBukkit start - call EntityBreedEvent
+            if (CraftEventFactory.callEntityBreedEvent(entityvillager2, parent, partner, null, null, 0).isCancelled()) {
+                return Optional.empty();
+            }
+            // Move age setting down
             parent.setAge(6000);
             partner.setAge(6000);
-            breedOffspring.setAge(-24000);
-            breedOffspring.moveTo(parent.getX(), parent.getY(), parent.getZ(), 0.0F, 0.0F);
-            level.addFreshEntityWithPassengers(breedOffspring);
-            level.broadcastEntityEvent(breedOffspring, (byte)12);
-            return Optional.of(breedOffspring);
+            level.addFreshEntityWithPassengers(entityvillager2, CreatureSpawnEvent.SpawnReason.BREEDING);
+            // CraftBukkit end
+            level.broadcastEntityEvent(entityvillager2, (byte) 12);
+            return Optional.of(entityvillager2);
         }
     }
 
     private void giveBedToChild(ServerLevel level, Villager villager, BlockPos pos) {
-        GlobalPos globalPos = GlobalPos.of(level.dimension(), pos);
-        villager.getBrain().setMemory(MemoryModuleType.HOME, globalPos);
+        GlobalPos globalpos = GlobalPos.of(level.dimension(), pos);
+
+        villager.getBrain().setMemory(MemoryModuleType.HOME, globalpos); // CraftBukkit - decompile error
     }
 }
