--- a/net/minecraft/world/entity/decoration/LeashFenceKnotEntity.java
+++ b/net/minecraft/world/entity/decoration/LeashFenceKnotEntity.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity.decoration;
 
+import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
@@ -8,15 +9,17 @@
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
+import net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -24,30 +27,33 @@
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
 
 public class LeashFenceKnotEntity extends HangingEntity {
-    public static final double OFFSET_Y = 0.375;
 
+    public static final double OFFSET_Y = 0.375D;
+
     public LeashFenceKnotEntity(EntityType<? extends LeashFenceKnotEntity> entityType, Level level) {
         super(entityType, level);
     }
 
     public LeashFenceKnotEntity(Level level, BlockPos pos) {
         super(EntityType.LEASH_KNOT, level, pos);
-        this.setPos((double)pos.getX(), (double)pos.getY(), (double)pos.getZ());
+        this.setPos((double) pos.getX(), (double) pos.getY(), (double) pos.getZ());
     }
 
     @Override
     protected void recalculateBoundingBox() {
-        this.setPosRaw((double)this.pos.getX() + 0.5, (double)this.pos.getY() + 0.375, (double)this.pos.getZ() + 0.5);
-        double d = (double)this.getType().getWidth() / 2.0;
-        double d1 = (double)this.getType().getHeight();
-        this.setBoundingBox(new AABB(this.getX() - d, this.getY(), this.getZ() - d, this.getX() + d, this.getY() + d1, this.getZ() + d));
+        this.setPosRaw((double) this.pos.getX() + 0.5D, (double) this.pos.getY() + 0.375D, (double) this.pos.getZ() + 0.5D);
+        double d0 = (double) this.getType().getWidth() / 2.0D;
+        double d1 = (double) this.getType().getHeight();
+
+        this.setBoundingBox(new AABB(this.getX() - d0, this.getY(), this.getZ() - d0, this.getX() + d0, this.getY() + d1, this.getZ() + d0));
     }
 
     @Override
-    public void setDirection(Direction facingDirection) {
-    }
+    public void setDirection(Direction facingDirection) {}
 
     @Override
     public int getWidth() {
@@ -60,13 +66,13 @@
     }
 
     @Override
-    protected float getEyeHeight(Pose pose, EntityDimensions size) {
+    protected float getEyeHeight(EntityPose pose, EntityDimensions size) {
         return 0.0625F;
     }
 
     @Override
     public boolean shouldRenderAtSqrDistance(double distance) {
-        return distance < 1024.0;
+        return distance < 1024.0D;
     }
 
     @Override
@@ -75,42 +81,65 @@
     }
 
     @Override
-    public void addAdditionalSaveData(CompoundTag compound) {
-    }
+    public void addAdditionalSaveData(CompoundTag compound) {}
 
     @Override
-    public void readAdditionalSaveData(CompoundTag compound) {
-    }
+    public void readAdditionalSaveData(CompoundTag compound) {}
 
     @Override
-    public InteractionResult interact(Player player, InteractionHand hand) {
+    public InteractionResult interact(Player player, EnumHand hand) {
         if (this.level().isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
             boolean flag = false;
-            double d = 7.0;
-            List<Mob> entitiesOfClass = this.level()
-                .getEntitiesOfClass(
-                    Mob.class, new AABB(this.getX() - 7.0, this.getY() - 7.0, this.getZ() - 7.0, this.getX() + 7.0, this.getY() + 7.0, this.getZ() + 7.0)
-                );
+            double d0 = 7.0D;
+            List<Mob> list = this.level().getEntitiesOfClass(Mob.class, new AABB(this.getX() - 7.0D, this.getY() - 7.0D, this.getZ() - 7.0D, this.getX() + 7.0D, this.getY() + 7.0D, this.getZ() + 7.0D));
+            Iterator iterator = list.iterator();
 
-            for (Mob mob : entitiesOfClass) {
-                if (mob.getLeashHolder() == player) {
-                    mob.setLeashedTo(this, true);
+            while (iterator.hasNext()) {
+                Mob entityinsentient = (Mob) iterator.next();
+
+                if (entityinsentient.getLeashHolder() == player) {
+                    // CraftBukkit start
+                    if (CraftEventFactory.callPlayerLeashEntityEvent(entityinsentient, this, player, hand).isCancelled()) {
+                        ((ServerPlayer) player).connection.send(new ClientboundSetEntityLinkPacket(entityinsentient, entityinsentient.getLeashHolder()));
+                        continue;
+                    }
+                    // CraftBukkit end
+                    entityinsentient.setLeashedTo(this, true);
                     flag = true;
                 }
             }
 
             boolean flag1 = false;
+
             if (!flag) {
-                this.discard();
-                if (player.getAbilities().instabuild) {
-                    for (Mob mob1 : entitiesOfClass) {
-                        if (mob1.isLeashed() && mob1.getLeashHolder() == this) {
-                            mob1.dropLeash(true, false);
+                // CraftBukkit start - Move below
+                // this.discard();
+                boolean die = true;
+                // CraftBukkit end
+                if (true || player.getAbilities().instabuild) { // CraftBukkit - Process for non-creative as well
+                    Iterator iterator1 = list.iterator();
+
+                    while (iterator1.hasNext()) {
+                        Mob entityinsentient1 = (Mob) iterator1.next();
+
+                        if (entityinsentient1.isLeashed() && entityinsentient1.getLeashHolder() == this) {
+                            // CraftBukkit start
+                            if (CraftEventFactory.callPlayerUnleashEntityEvent(entityinsentient1, player, hand).isCancelled()) {
+                                die = false;
+                                continue;
+                            }
+                            entityinsentient1.dropLeash(true, !player.getAbilities().instabuild); // false -> survival mode boolean
+                            // CraftBukkit end
                             flag1 = true;
                         }
                     }
+                    // CraftBukkit start
+                    if (die) {
+                        this.discard();
+                    }
+                    // CraftBukkit end
                 }
             }
 
@@ -128,21 +157,26 @@
     }
 
     public static LeashFenceKnotEntity getOrCreateKnot(Level level, BlockPos pos) {
-        int x = pos.getX();
-        int y = pos.getY();
-        int z = pos.getZ();
+        int i = pos.getX();
+        int j = pos.getY();
+        int k = pos.getZ();
+        List<LeashFenceKnotEntity> list = level.getEntitiesOfClass(LeashFenceKnotEntity.class, new AABB((double) i - 1.0D, (double) j - 1.0D, (double) k - 1.0D, (double) i + 1.0D, (double) j + 1.0D, (double) k + 1.0D));
+        Iterator iterator = list.iterator();
 
-        for (LeashFenceKnotEntity leashFenceKnotEntity : level.getEntitiesOfClass(
-            LeashFenceKnotEntity.class, new AABB((double)x - 1.0, (double)y - 1.0, (double)z - 1.0, (double)x + 1.0, (double)y + 1.0, (double)z + 1.0)
-        )) {
-            if (leashFenceKnotEntity.getPos().equals(pos)) {
-                return leashFenceKnotEntity;
+        LeashFenceKnotEntity entityleash;
+
+        do {
+            if (!iterator.hasNext()) {
+                LeashFenceKnotEntity entityleash1 = new LeashFenceKnotEntity(level, pos);
+
+                level.addFreshEntity(entityleash1);
+                return entityleash1;
             }
-        }
 
-        LeashFenceKnotEntity leashFenceKnotEntity1 = new LeashFenceKnotEntity(level, pos);
-        level.addFreshEntity(leashFenceKnotEntity1);
-        return leashFenceKnotEntity1;
+            entityleash = (LeashFenceKnotEntity) iterator.next();
+        } while (!entityleash.getPos().equals(pos));
+
+        return entityleash;
     }
 
     @Override
@@ -157,7 +191,7 @@
 
     @Override
     public Vec3 getRopeHoldPosition(float partialTicks) {
-        return this.getPosition(partialTicks).add(0.0, 0.2, 0.0);
+        return this.getPosition(partialTicks).add(0.0D, 0.2D, 0.0D);
     }
 
     @Override
