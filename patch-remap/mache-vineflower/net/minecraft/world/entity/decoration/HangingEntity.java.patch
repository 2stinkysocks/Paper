--- a/net/minecraft/world/entity/decoration/HangingEntity.java
+++ b/net/minecraft/world/entity/decoration/HangingEntity.java
@@ -3,16 +3,11 @@
 import com.mojang.logging.LogUtils;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.util.Mth;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMoveType;
 import net.minecraft.world.entity.LightningBolt;
-import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
@@ -20,21 +15,36 @@
 import net.minecraft.world.level.block.DiodeBlock;
 import net.minecraft.world.level.block.Mirror;
 import net.minecraft.world.level.block.Rotation;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.Validate;
 import org.slf4j.Logger;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.server.level.ServerLevel;
+// CraftBukkit start
+import net.minecraft.tags.DamageTypeTags;
+import net.minecraft.util.Mth;
+import org.bukkit.entity.Hanging;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
+import org.bukkit.event.hanging.HangingBreakEvent;
+// CraftBukkit end
 
 public abstract class HangingEntity extends Entity {
+
     private static final Logger LOGGER = LogUtils.getLogger();
-    protected static final Predicate<Entity> HANGING_ENTITY = entity -> entity instanceof HangingEntity;
+    protected static final Predicate<Entity> HANGING_ENTITY = (entity) -> {
+        return entity instanceof HangingEntity;
+    };
     private int checkInterval;
-    protected BlockPos pos;
-    protected Direction direction = Direction.SOUTH;
+    public BlockPos pos;
+    protected Direction direction;
 
     protected HangingEntity(EntityType<? extends HangingEntity> entityType, Level level) {
         super(entityType, level);
+        this.direction = Direction.SOUTH;
     }
 
     protected HangingEntity(EntityType<? extends HangingEntity> entityType, Level level, BlockPos pos) {
@@ -43,51 +53,65 @@
     }
 
     @Override
-    protected void defineSynchedData() {
-    }
+    protected void defineSynchedData() {}
 
-    protected void setDirection(Direction facingDirection) {
+    public void setDirection(Direction facingDirection) {
         Validate.notNull(facingDirection);
         Validate.isTrue(facingDirection.getAxis().isHorizontal());
         this.direction = facingDirection;
-        this.setYRot((float)(this.direction.get2DDataValue() * 90));
+        this.setYRot((float) (this.direction.get2DDataValue() * 90));
         this.yRotO = this.getYRot();
         this.recalculateBoundingBox();
     }
 
     protected void recalculateBoundingBox() {
         if (this.direction != null) {
-            double d = (double)this.pos.getX() + 0.5;
-            double d1 = (double)this.pos.getY() + 0.5;
-            double d2 = (double)this.pos.getZ() + 0.5;
-            double d3 = 0.46875;
-            double d4 = this.offs(this.getWidth());
-            double d5 = this.offs(this.getHeight());
-            d -= (double)this.direction.getStepX() * 0.46875;
-            d2 -= (double)this.direction.getStepZ() * 0.46875;
-            double var22 = d1 + d5;
-            Direction counterClockWise = this.direction.getCounterClockWise();
-            double var21 = d + d4 * (double)counterClockWise.getStepX();
-            double var24 = d2 + d4 * (double)counterClockWise.getStepZ();
-            this.setPosRaw(var21, var22, var24);
-            double d6 = (double)this.getWidth();
-            double d7 = (double)this.getHeight();
-            double d8 = (double)this.getWidth();
-            if (this.direction.getAxis() == Direction.Axis.Z) {
-                d8 = 1.0;
+            // CraftBukkit start code moved in to calculateBoundingBox
+            this.setBoundingBox(calculateBoundingBox(this, this.pos, this.direction, this.getWidth(), this.getHeight()));
+            // CraftBukkit end
+        }
+    }
+
+    // CraftBukkit start - break out BB calc into own method
+    public static AABB calculateBoundingBox(@Nullable Entity entity, BlockPos blockPosition, Direction direction, int width, int height) {
+        {
+            double d0 = (double) blockPosition.getX() + 0.5D;
+            double d1 = (double) blockPosition.getY() + 0.5D;
+            double d2 = (double) blockPosition.getZ() + 0.5D;
+            double d3 = 0.46875D;
+            double d4 = offs(width);
+            double d5 = offs(height);
+
+            d0 -= (double) direction.getStepX() * 0.46875D;
+            d2 -= (double) direction.getStepZ() * 0.46875D;
+            d1 += d5;
+            Direction enumdirection = direction.getCounterClockWise();
+
+            d0 += d4 * (double) enumdirection.getStepX();
+            d2 += d4 * (double) enumdirection.getStepZ();
+            if (entity != null) {
+                entity.setPosRaw(d0, d1, d2);
+            }
+            double d6 = (double) width;
+            double d7 = (double) height;
+            double d8 = (double) width;
+
+            if (direction.getAxis() == Direction.Axis.Z) {
+                d8 = 1.0D;
             } else {
-                d6 = 1.0;
+                d6 = 1.0D;
             }
 
-            d6 /= 32.0;
-            d7 /= 32.0;
-            d8 /= 32.0;
-            this.setBoundingBox(new AABB(var21 - d6, var22 - d7, var24 - d8, var21 + d6, var22 + d7, var24 + d8));
+            d6 /= 32.0D;
+            d7 /= 32.0D;
+            d8 /= 32.0D;
+            return new AABB(d0 - d6, d1 - d7, d2 - d8, d0 + d6, d1 + d7, d2 + d8);
         }
     }
+    // CraftBukkit end
 
-    private double offs(int offset) {
-        return offset % 32 == 0 ? 0.5 : 0.0;
+    private static double offs(int i) { // CraftBukkit - static
+        return i % 32 == 0 ? 0.5D : 0.0D;
     }
 
     @Override
@@ -97,36 +121,57 @@
             if (this.checkInterval++ == 100) {
                 this.checkInterval = 0;
                 if (!this.isRemoved() && !this.survives()) {
+                    // CraftBukkit start - fire break events
+                    IBlockData material = this.level().getBlockState(this.blockPosition());
+                    HangingBreakEvent.RemoveCause cause;
+
+                    if (!material.isAir()) {
+                        // TODO: This feels insufficient to catch 100% of suffocation cases
+                        cause = HangingBreakEvent.RemoveCause.OBSTRUCTION;
+                    } else {
+                        cause = HangingBreakEvent.RemoveCause.PHYSICS;
+                    }
+
+                    HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), cause);
+                    this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                    if (this.isRemoved() || event.isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
                     this.discard();
-                    this.dropItem(null);
+                    this.dropItem((Entity) null);
                 }
             }
         }
+
     }
 
     public boolean survives() {
-        if (!this.level().noCollision(this)) {
+        if (!this.level().noCollision((Entity) this)) {
             return false;
         } else {
-            int max = Math.max(1, this.getWidth() / 16);
-            int max1 = Math.max(1, this.getHeight() / 16);
-            BlockPos blockPos = this.pos.relative(this.direction.getOpposite());
-            Direction counterClockWise = this.direction.getCounterClockWise();
-            BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
+            int i = Math.max(1, this.getWidth() / 16);
+            int j = Math.max(1, this.getHeight() / 16);
+            BlockPos blockposition = this.pos.relative(this.direction.getOpposite());
+            Direction enumdirection = this.direction.getCounterClockWise();
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
 
-            for (int i = 0; i < max; i++) {
-                for (int i1 = 0; i1 < max1; i1++) {
-                    int i2 = (max - 1) / -2;
-                    int i3 = (max1 - 1) / -2;
-                    mutableBlockPos.set(blockPos).move(counterClockWise, i + i2).move(Direction.UP, i1 + i3);
-                    BlockState blockState = this.level().getBlockState(mutableBlockPos);
-                    if (!blockState.isSolid() && !DiodeBlock.isDiode(blockState)) {
+            for (int k = 0; k < i; ++k) {
+                for (int l = 0; l < j; ++l) {
+                    int i1 = (i - 1) / -2;
+                    int j1 = (j - 1) / -2;
+
+                    blockposition_mutableblockposition.set(blockposition).move(enumdirection, k + i1).move(Direction.UP, l + j1);
+                    IBlockData iblockdata = this.level().getBlockState(blockposition_mutableblockposition);
+
+                    if (!iblockdata.isSolid() && !DiodeBlock.isDiode(iblockdata)) {
                         return false;
                     }
                 }
             }
 
-            return this.level().getEntities(this, this.getBoundingBox(), HANGING_ENTITY).isEmpty();
+            return this.level().getEntities((Entity) this, this.getBoundingBox(), HangingEntity.HANGING_ENTITY).isEmpty();
         }
     }
 
@@ -137,7 +182,13 @@
 
     @Override
     public boolean skipAttackInteraction(Entity entity) {
-        return entity instanceof Player player && (!this.level().mayInteract(player, this.pos) || this.hurt(this.damageSources().playerAttack(player), 0.0F));
+        if (entity instanceof Player) {
+            Player entityhuman = (Player) entity;
+
+            return !this.level().mayInteract(entityhuman, this.pos) ? true : this.hurt(this.damageSources().playerAttack(entityhuman), 0.0F);
+        } else {
+            return false;
+        }
     }
 
     @Override
@@ -151,6 +202,22 @@
             return false;
         } else {
             if (!this.isRemoved() && !this.level().isClientSide) {
+                // CraftBukkit start - fire break events
+                Entity damager = (source.isIndirect()) ? source.getEntity() : source.getDirectEntity();
+                HangingBreakEvent event;
+                if (damager != null) {
+                    event = new HangingBreakByEntityEvent((Hanging) this.getBukkitEntity(), damager.getBukkitEntity(), source.is(DamageTypeTags.IS_EXPLOSION) ? HangingBreakEvent.RemoveCause.EXPLOSION : HangingBreakEvent.RemoveCause.ENTITY);
+                } else {
+                    event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), source.is(DamageTypeTags.IS_EXPLOSION) ? HangingBreakEvent.RemoveCause.EXPLOSION : HangingBreakEvent.RemoveCause.DEFAULT);
+                }
+
+                this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                if (this.isRemoved() || event.isCancelled()) {
+                    return true;
+                }
+                // CraftBukkit end
+
                 this.kill();
                 this.markHurt();
                 this.dropItem(source.getEntity());
@@ -161,36 +228,61 @@
     }
 
     @Override
-    public void move(MoverType type, Vec3 pos) {
-        if (!this.level().isClientSide && !this.isRemoved() && pos.lengthSqr() > 0.0) {
+    public void move(EnumMoveType type, Vec3 pos) {
+        if (!this.level().isClientSide && !this.isRemoved() && pos.lengthSqr() > 0.0D) {
+            if (this.isRemoved()) return; // CraftBukkit
+
+            // CraftBukkit start - fire break events
+            // TODO - Does this need its own cause? Seems to only be triggered by pistons
+            HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.PHYSICS);
+            this.level().getCraftServer().getPluginManager().callEvent(event);
+
+            if (this.isRemoved() || event.isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
+
             this.kill();
-            this.dropItem(null);
+            this.dropItem((Entity) null);
         }
+
     }
 
     @Override
-    public void push(double x, double y, double z) {
-        if (!this.level().isClientSide && !this.isRemoved() && x * x + y * y + z * z > 0.0) {
+    public void push(double x, double d1, double y) {
+        if (false && !this.level().isClientSide && !this.isRemoved() && x * x + d1 * d1 + y * y > 0.0D) { // CraftBukkit - not needed
             this.kill();
-            this.dropItem(null);
+            this.dropItem((Entity) null);
         }
+
     }
 
+    // CraftBukkit start - selectively save tile position
     @Override
+    public void addAdditionalSaveData(CompoundTag nbttagcompound, boolean includeAll) {
+        if (includeAll) {
+            addAdditionalSaveData(nbttagcompound);
+        }
+    }
+    // CraftBukkit end
+
+    @Override
     public void addAdditionalSaveData(CompoundTag compound) {
-        BlockPos pos = this.getPos();
-        compound.putInt("TileX", pos.getX());
-        compound.putInt("TileY", pos.getY());
-        compound.putInt("TileZ", pos.getZ());
+        BlockPos blockposition = this.getPos();
+
+        compound.putInt("TileX", blockposition.getX());
+        compound.putInt("TileY", blockposition.getY());
+        compound.putInt("TileZ", blockposition.getZ());
     }
 
     @Override
     public void readAdditionalSaveData(CompoundTag compound) {
-        BlockPos blockPos = new BlockPos(compound.getInt("TileX"), compound.getInt("TileY"), compound.getInt("TileZ"));
-        if (!blockPos.closerThan(this.blockPosition(), 16.0)) {
-            LOGGER.error("Hanging entity at invalid position: {}", blockPos);
+        BlockPos blockposition = new BlockPos(compound.getInt("TileX"), compound.getInt("TileY"), compound.getInt("TileZ"));
+
+        if (!blockposition.closerThan(this.blockPosition(), 16.0D)) {
+            HangingEntity.LOGGER.error("Hanging entity at invalid position: {}", blockposition);
         } else {
-            this.pos = blockPos;
+            this.pos = blockposition;
         }
     }
 
@@ -204,16 +296,11 @@
 
     @Override
     public ItemEntity spawnAtLocation(ItemStack stack, float offsetY) {
-        ItemEntity itemEntity = new ItemEntity(
-            this.level(),
-            this.getX() + (double)((float)this.direction.getStepX() * 0.15F),
-            this.getY() + (double)offsetY,
-            this.getZ() + (double)((float)this.direction.getStepZ() * 0.15F),
-            stack
-        );
-        itemEntity.setDefaultPickUpDelay();
-        this.level().addFreshEntity(itemEntity);
-        return itemEntity;
+        ItemEntity entityitem = new ItemEntity(this.level(), this.getX() + (double) ((float) this.direction.getStepX() * 0.15F), this.getY() + (double) offsetY, this.getZ() + (double) ((float) this.direction.getStepZ() * 0.15F), stack);
+
+        entityitem.setDefaultPickUpDelay();
+        this.level().addFreshEntity(entityitem);
+        return entityitem;
     }
 
     @Override
@@ -222,8 +309,8 @@
     }
 
     @Override
-    public void setPos(double x, double y, double z) {
-        this.pos = BlockPos.containing(x, y, z);
+    public void setPos(double x, double d1, double y) {
+        this.pos = BlockPos.containing(x, d1, y);
         this.recalculateBoundingBox();
         this.hasImpulse = true;
     }
@@ -248,6 +335,7 @@
         }
 
         float f = Mth.wrapDegrees(this.getYRot());
+
         switch (transformRotation) {
             case CLOCKWISE_180:
                 return f + 180.0F;
@@ -266,10 +354,8 @@
     }
 
     @Override
-    public void thunderHit(ServerLevel level, LightningBolt lightning) {
-    }
+    public void thunderHit(ServerLevel level, LightningBolt lightning) {}
 
     @Override
-    public void refreshDimensions() {
-    }
+    public void refreshDimensions() {}
 }
