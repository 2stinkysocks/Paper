--- a/net/minecraft/world/entity/decoration/ItemFrame.java
+++ b/net/minecraft/world/entity/decoration/ItemFrame.java
@@ -16,14 +16,14 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.DamageTypeTags;
 import net.minecraft.util.Mth;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityPose;
 import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.MoverType;
-import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.EnumMoveType;
 import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
@@ -33,7 +33,7 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.DiodeBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.AABB;
@@ -42,15 +42,17 @@
 import org.slf4j.Logger;
 
 public class ItemFrame extends HangingEntity {
+
     private static final Logger LOGGER = LogUtils.getLogger();
-    private static final EntityDataAccessor<ItemStack> DATA_ITEM = SynchedEntityData.defineId(ItemFrame.class, EntityDataSerializers.ITEM_STACK);
-    private static final EntityDataAccessor<Integer> DATA_ROTATION = SynchedEntityData.defineId(ItemFrame.class, EntityDataSerializers.INT);
+    public static final EntityDataAccessor<ItemStack> DATA_ITEM = SynchedEntityData.defineId(ItemFrame.class, EntityDataSerializers.ITEM_STACK);
+    public static final EntityDataAccessor<Integer> DATA_ROTATION = SynchedEntityData.defineId(ItemFrame.class, EntityDataSerializers.INT);
     public static final int NUM_ROTATIONS = 8;
-    private float dropChance = 1.0F;
-    private boolean fixed;
+    public float dropChance;
+    public boolean fixed;
 
     public ItemFrame(EntityType<? extends ItemFrame> entityType, Level level) {
         super(entityType, level);
+        this.dropChance = 1.0F;
     }
 
     public ItemFrame(Level level, BlockPos pos, Direction facingDirection) {
@@ -59,29 +61,30 @@
 
     public ItemFrame(EntityType<? extends ItemFrame> entityType, Level level, BlockPos pos, Direction direction) {
         super(entityType, level, pos);
+        this.dropChance = 1.0F;
         this.setDirection(direction);
     }
 
     @Override
-    protected float getEyeHeight(Pose pose, EntityDimensions size) {
+    protected float getEyeHeight(EntityPose pose, EntityDimensions size) {
         return 0.0F;
     }
 
     @Override
     protected void defineSynchedData() {
-        this.getEntityData().define(DATA_ITEM, ItemStack.EMPTY);
-        this.getEntityData().define(DATA_ROTATION, 0);
+        this.getEntityData().define(ItemFrame.DATA_ITEM, ItemStack.EMPTY);
+        this.getEntityData().define(ItemFrame.DATA_ROTATION, 0);
     }
 
     @Override
-    protected void setDirection(Direction facingDirection) {
+    public void setDirection(Direction facingDirection) {
         Validate.notNull(facingDirection);
         this.direction = facingDirection;
         if (facingDirection.getAxis().isHorizontal()) {
             this.setXRot(0.0F);
-            this.setYRot((float)(this.direction.get2DDataValue() * 90));
+            this.setYRot((float) (this.direction.get2DDataValue() * 90));
         } else {
-            this.setXRot((float)(-90 * facingDirection.getAxisDirection().getStep()));
+            this.setXRot((float) (-90 * facingDirection.getAxisDirection().getStep()));
             this.setYRot(0.0F);
         }
 
@@ -93,58 +96,74 @@
     @Override
     protected void recalculateBoundingBox() {
         if (this.direction != null) {
-            double d = 0.46875;
-            double d1 = (double)this.pos.getX() + 0.5 - (double)this.direction.getStepX() * 0.46875;
-            double d2 = (double)this.pos.getY() + 0.5 - (double)this.direction.getStepY() * 0.46875;
-            double d3 = (double)this.pos.getZ() + 0.5 - (double)this.direction.getStepZ() * 0.46875;
-            this.setPosRaw(d1, d2, d3);
-            double d4 = (double)this.getWidth();
-            double d5 = (double)this.getHeight();
-            double d6 = (double)this.getWidth();
-            Direction.Axis axis = this.direction.getAxis();
-            switch (axis) {
+            // CraftBukkit start code moved in to calculateBoundingBox
+            this.setBoundingBox(calculateBoundingBox(this, this.pos, this.direction, this.getWidth(), this.getHeight()));
+            // CraftBukkit end
+        }
+    }
+
+    // CraftBukkit start - break out BB calc into own method
+    public static AABB calculateBoundingBox(@Nullable Entity entity, BlockPos blockPosition, Direction direction, int width, int height) {
+        {
+            double d0 = 0.46875D;
+            double d1 = (double) blockPosition.getX() + 0.5D - (double) direction.getStepX() * 0.46875D;
+            double d2 = (double) blockPosition.getY() + 0.5D - (double) direction.getStepY() * 0.46875D;
+            double d3 = (double) blockPosition.getZ() + 0.5D - (double) direction.getStepZ() * 0.46875D;
+
+            if (entity != null) {
+                entity.setPosRaw(d1, d2, d3);
+            }
+            double d4 = (double) width;
+            double d5 = (double) height;
+            double d6 = (double) width;
+            Direction.Axis enumdirection_enumaxis = direction.getAxis();
+
+            switch (enumdirection_enumaxis) {
                 case X:
-                    d4 = 1.0;
+                    d4 = 1.0D;
                     break;
                 case Y:
-                    d5 = 1.0;
+                    d5 = 1.0D;
                     break;
                 case Z:
-                    d6 = 1.0;
+                    d6 = 1.0D;
             }
 
-            d4 /= 32.0;
-            d5 /= 32.0;
-            d6 /= 32.0;
-            this.setBoundingBox(new AABB(d1 - d4, d2 - d5, d3 - d6, d1 + d4, d2 + d5, d3 + d6));
+            d4 /= 32.0D;
+            d5 /= 32.0D;
+            d6 /= 32.0D;
+            return new AABB(d1 - d4, d2 - d5, d3 - d6, d1 + d4, d2 + d5, d3 + d6);
         }
     }
+    // CraftBukkit end
 
     @Override
     public boolean survives() {
         if (this.fixed) {
             return true;
-        } else if (!this.level().noCollision(this)) {
+        } else if (!this.level().noCollision((Entity) this)) {
             return false;
         } else {
-            BlockState blockState = this.level().getBlockState(this.pos.relative(this.direction.getOpposite()));
-            return (blockState.isSolid() || this.direction.getAxis().isHorizontal() && DiodeBlock.isDiode(blockState))
-                && this.level().getEntities(this, this.getBoundingBox(), HANGING_ENTITY).isEmpty();
+            IBlockData iblockdata = this.level().getBlockState(this.pos.relative(this.direction.getOpposite()));
+
+            return !iblockdata.isSolid() && (!this.direction.getAxis().isHorizontal() || !DiodeBlock.isDiode(iblockdata)) ? false : this.level().getEntities((Entity) this, this.getBoundingBox(), ItemFrame.HANGING_ENTITY).isEmpty();
         }
     }
 
     @Override
-    public void move(MoverType type, Vec3 pos) {
+    public void move(EnumMoveType type, Vec3 pos) {
         if (!this.fixed) {
             super.move(type, pos);
         }
+
     }
 
     @Override
-    public void push(double x, double y, double z) {
+    public void push(double x, double d1, double y) {
         if (!this.fixed) {
-            super.push(x, y, z);
+            super.push(x, d1, y);
         }
+
     }
 
     @Override
@@ -156,11 +175,16 @@
     @Override
     public boolean hurt(DamageSource source, float amount) {
         if (this.fixed) {
-            return (source.is(DamageTypeTags.BYPASSES_INVULNERABILITY) || source.isCreativePlayer()) && super.hurt(source, amount);
+            return !source.is(DamageTypeTags.BYPASSES_INVULNERABILITY) && !source.isCreativePlayer() ? false : super.hurt(source, amount);
         } else if (this.isInvulnerableTo(source)) {
             return false;
         } else if (!source.is(DamageTypeTags.IS_EXPLOSION) && !this.getItem().isEmpty()) {
             if (!this.level().isClientSide) {
+                // CraftBukkit start - fire EntityDamageEvent
+                if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount, false) || this.isRemoved()) {
+                    return true;
+                }
+                // CraftBukkit end
                 this.dropItem(source.getEntity(), false);
                 this.gameEvent(GameEvent.BLOCK_CHANGE, source.getEntity());
                 this.playSound(this.getRemoveItemSound(), 1.0F, 1.0F);
@@ -188,9 +212,10 @@
 
     @Override
     public boolean shouldRenderAtSqrDistance(double distance) {
-        double d = 16.0;
-        d *= 64.0 * getViewScale();
-        return distance < d * d;
+        double d1 = 16.0D;
+
+        d1 *= 64.0D * getViewScale();
+        return distance < d1 * d1;
     }
 
     @Override
@@ -215,54 +240,65 @@
 
     private void dropItem(@Nullable Entity entity, boolean dropSelf) {
         if (!this.fixed) {
-            ItemStack item = this.getItem();
+            ItemStack itemstack = this.getItem();
+
             this.setItem(ItemStack.EMPTY);
             if (!this.level().getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
                 if (entity == null) {
-                    this.removeFramedMap(item);
+                    this.removeFramedMap(itemstack);
                 }
+
             } else {
-                if (entity instanceof Player player && player.getAbilities().instabuild) {
-                    this.removeFramedMap(item);
-                    return;
+                if (entity instanceof Player) {
+                    Player entityhuman = (Player) entity;
+
+                    if (entityhuman.getAbilities().instabuild) {
+                        this.removeFramedMap(itemstack);
+                        return;
+                    }
                 }
 
                 if (dropSelf) {
                     this.spawnAtLocation(this.getFrameItemStack());
                 }
 
-                if (!item.isEmpty()) {
-                    ItemStack var5 = item.copy();
-                    this.removeFramedMap(var5);
+                if (!itemstack.isEmpty()) {
+                    itemstack = itemstack.copy();
+                    this.removeFramedMap(itemstack);
                     if (this.random.nextFloat() < this.dropChance) {
-                        this.spawnAtLocation(var5);
+                        this.spawnAtLocation(itemstack);
                     }
                 }
+
             }
         }
     }
 
     private void removeFramedMap(ItemStack stack) {
-        this.getFramedMapId().ifPresent(i -> {
-            MapItemSavedData savedData = MapItem.getSavedData(i, this.level());
-            if (savedData != null) {
-                savedData.removedFromFrame(this.pos, this.getId());
-                savedData.setDirty(true);
+        this.getFramedMapId().ifPresent((i) -> {
+            MapItemSavedData worldmap = MapItem.getSavedData(i, this.level());
+
+            if (worldmap != null) {
+                worldmap.removedFromFrame(this.pos, this.getId());
+                worldmap.setDirty(true);
             }
+
         });
-        stack.setEntityRepresentation(null);
+        stack.setEntityRepresentation((Entity) null);
     }
 
     public ItemStack getItem() {
-        return this.getEntityData().get(DATA_ITEM);
+        return (ItemStack) this.getEntityData().get(ItemFrame.DATA_ITEM);
     }
 
     public OptionalInt getFramedMapId() {
-        ItemStack item = this.getItem();
-        if (item.is(Items.FILLED_MAP)) {
-            Integer mapId = MapItem.getMapId(item);
-            if (mapId != null) {
-                return OptionalInt.of(mapId);
+        ItemStack itemstack = this.getItem();
+
+        if (itemstack.is(Items.FILLED_MAP)) {
+            Integer integer = MapItem.getMapId(itemstack);
+
+            if (integer != null) {
+                return OptionalInt.of(integer);
             }
         }
 
@@ -278,19 +314,26 @@
     }
 
     public void setItem(ItemStack stack, boolean updateNeighbours) {
-        if (!stack.isEmpty()) {
-            stack = stack.copyWithCount(1);
+        // CraftBukkit start
+        this.setItem(stack, updateNeighbours, true);
+    }
+
+    public void setItem(ItemStack itemstack, boolean flag, boolean playSound) {
+        // CraftBukkit end
+        if (!itemstack.isEmpty()) {
+            itemstack = itemstack.copyWithCount(1);
         }
 
-        this.onItemChanged(stack);
-        this.getEntityData().set(DATA_ITEM, stack);
-        if (!stack.isEmpty()) {
+        this.onItemChanged(itemstack);
+        this.getEntityData().set(ItemFrame.DATA_ITEM, itemstack);
+        if (!itemstack.isEmpty() && playSound) { // CraftBukkit
             this.playSound(this.getAddItemSound(), 1.0F, 1.0F);
         }
 
-        if (updateNeighbours && this.pos != null) {
+        if (flag && this.pos != null) {
             this.level().updateNeighbourForOutputSignal(this.pos, Blocks.AIR);
         }
+
     }
 
     public SoundEvent getAddItemSound() {
@@ -315,9 +358,10 @@
 
     @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> key) {
-        if (key.equals(DATA_ITEM)) {
+        if (key.equals(ItemFrame.DATA_ITEM)) {
             this.onItemChanged(this.getItem());
         }
+
     }
 
     private void onItemChanged(ItemStack item) {
@@ -329,7 +373,7 @@
     }
 
     public int getRotation() {
-        return this.getEntityData().get(DATA_ROTATION);
+        return (Integer) this.getEntityData().get(ItemFrame.DATA_ROTATION);
     }
 
     public void setRotation(int rotation) {
@@ -337,10 +381,11 @@
     }
 
     private void setRotation(int rotation, boolean updateNeighbours) {
-        this.getEntityData().set(DATA_ROTATION, rotation % 8);
+        this.getEntityData().set(ItemFrame.DATA_ROTATION, rotation % 8);
         if (updateNeighbours && this.pos != null) {
             this.level().updateNeighbourForOutputSignal(this.pos, Blocks.AIR);
         }
+
     }
 
     @Override
@@ -348,11 +393,11 @@
         super.addAdditionalSaveData(compound);
         if (!this.getItem().isEmpty()) {
             compound.put("Item", this.getItem().save(new CompoundTag()));
-            compound.putByte("ItemRotation", (byte)this.getRotation());
+            compound.putByte("ItemRotation", (byte) this.getRotation());
             compound.putFloat("ItemDropChance", this.dropChance);
         }
 
-        compound.putByte("Facing", (byte)this.direction.get3DDataValue());
+        compound.putByte("Facing", (byte) this.direction.get3DDataValue());
         compound.putBoolean("Invisible", this.isInvisible());
         compound.putBoolean("Fixed", this.fixed);
     }
@@ -360,19 +405,22 @@
     @Override
     public void readAdditionalSaveData(CompoundTag compound) {
         super.readAdditionalSaveData(compound);
-        CompoundTag compound1 = compound.getCompound("Item");
-        if (compound1 != null && !compound1.isEmpty()) {
-            ItemStack itemStack = ItemStack.of(compound1);
-            if (itemStack.isEmpty()) {
-                LOGGER.warn("Unable to load item from: {}", compound1);
+        CompoundTag nbttagcompound1 = compound.getCompound("Item");
+
+        if (nbttagcompound1 != null && !nbttagcompound1.isEmpty()) {
+            ItemStack itemstack = ItemStack.of(nbttagcompound1);
+
+            if (itemstack.isEmpty()) {
+                ItemFrame.LOGGER.warn("Unable to load item from: {}", nbttagcompound1);
             }
 
-            ItemStack item = this.getItem();
-            if (!item.isEmpty() && !ItemStack.matches(itemStack, item)) {
-                this.removeFramedMap(item);
+            ItemStack itemstack1 = this.getItem();
+
+            if (!itemstack1.isEmpty() && !ItemStack.matches(itemstack, itemstack1)) {
+                this.removeFramedMap(itemstack1);
             }
 
-            this.setItem(itemStack, false);
+            this.setItem(itemstack, false);
             this.setRotation(compound.getByte("ItemRotation"), false);
             if (compound.contains("ItemDropChance", 99)) {
                 this.dropChance = compound.getFloat("ItemDropChance");
@@ -385,26 +433,28 @@
     }
 
     @Override
-    public InteractionResult interact(Player player, InteractionHand hand) {
-        ItemStack itemInHand = player.getItemInHand(hand);
+    public InteractionResult interact(Player player, EnumHand hand) {
+        ItemStack itemstack = player.getItemInHand(hand);
         boolean flag = !this.getItem().isEmpty();
-        boolean flag1 = !itemInHand.isEmpty();
+        boolean flag1 = !itemstack.isEmpty();
+
         if (this.fixed) {
             return InteractionResult.PASS;
         } else if (!this.level().isClientSide) {
             if (!flag) {
                 if (flag1 && !this.isRemoved()) {
-                    if (itemInHand.is(Items.FILLED_MAP)) {
-                        MapItemSavedData savedData = MapItem.getSavedData(itemInHand, this.level());
-                        if (savedData != null && savedData.isTrackedCountOverLimit(256)) {
+                    if (itemstack.is(Items.FILLED_MAP)) {
+                        MapItemSavedData worldmap = MapItem.getSavedData(itemstack, this.level());
+
+                        if (worldmap != null && worldmap.isTrackedCountOverLimit(256)) {
                             return InteractionResult.FAIL;
                         }
                     }
 
-                    this.setItem(itemInHand);
+                    this.setItem(itemstack);
                     this.gameEvent(GameEvent.BLOCK_CHANGE, player);
                     if (!player.getAbilities().instabuild) {
-                        itemInHand.shrink(1);
+                        itemstack.shrink(1);
                     }
                 }
             } else {
@@ -440,8 +490,9 @@
 
     @Override
     public ItemStack getPickResult() {
-        ItemStack item = this.getItem();
-        return item.isEmpty() ? this.getFrameItemStack() : item.copy();
+        ItemStack itemstack = this.getItem();
+
+        return itemstack.isEmpty() ? this.getFrameItemStack() : itemstack.copy();
     }
 
     protected ItemStack getFrameItemStack() {
@@ -450,8 +501,9 @@
 
     @Override
     public float getVisualRotationYInDegrees() {
-        Direction direction = this.getDirection();
-        int i = direction.getAxis().isVertical() ? 90 * direction.getAxisDirection().getStep() : 0;
-        return (float)Mth.wrapDegrees(180 + direction.get2DDataValue() * 90 + this.getRotation() * 45 + i);
+        Direction enumdirection = this.getDirection();
+        int i = enumdirection.getAxis().isVertical() ? 90 * enumdirection.getAxisDirection().getStep() : 0;
+
+        return (float) Mth.wrapDegrees(180 + enumdirection.get2DDataValue() * 90 + this.getRotation() * 45 + i);
     }
 }
