--- a/net/minecraft/world/entity/player/Inventory.java
+++ b/net/minecraft/world/entity/player/Inventory.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.player;
 
 import com.google.common.collect.ImmutableList;
+import java.util.Iterator;
 import java.util.List;
 import java.util.function.Predicate;
 import net.minecraft.CrashReport;
@@ -16,15 +17,24 @@
 import net.minecraft.tags.TagKey;
 import net.minecraft.world.Container;
 import net.minecraft.world.ContainerHelper;
-import net.minecraft.world.Nameable;
+import net.minecraft.world.INamableTileEntity;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.item.ArmorItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 
-public class Inventory implements Container, Nameable {
+// CraftBukkit start
+import java.util.ArrayList;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
+public class Inventory implements Container, INamableTileEntity {
+
     public static final int POP_TIME_DURATION = 5;
     public static final int INVENTORY_SIZE = 36;
     private static final int SELECTION_SIZE = 9;
@@ -32,20 +42,72 @@
     public static final int NOT_FOUND_INDEX = -1;
     public static final int[] ALL_ARMOR_SLOTS = new int[]{0, 1, 2, 3};
     public static final int[] HELMET_SLOT_ONLY = new int[]{3};
-    public final NonNullList<ItemStack> items = NonNullList.withSize(36, ItemStack.EMPTY);
-    public final NonNullList<ItemStack> armor = NonNullList.withSize(4, ItemStack.EMPTY);
-    public final NonNullList<ItemStack> offhand = NonNullList.withSize(1, ItemStack.EMPTY);
-    private final List<NonNullList<ItemStack>> compartments = ImmutableList.of(this.items, this.armor, this.offhand);
+    public final NonNullList<ItemStack> items;
+    public final NonNullList<ItemStack> armor;
+    public final NonNullList<ItemStack> offhand;
+    private final List<NonNullList<ItemStack>> compartments;
     public int selected;
     public final Player player;
     private int timesChanged;
 
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        List<ItemStack> combined = new ArrayList<ItemStack>(items.size() + armor.size() + offhand.size());
+        for (List<net.minecraft.world.item.ItemStack> sub : this.compartments) {
+            combined.addAll(sub);
+        }
+
+        return combined;
+    }
+
+    public List<ItemStack> getArmorContents() {
+        return this.armor;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    public org.bukkit.inventory.InventoryHolder getOwner() {
+        return this.player.getBukkitEntity();
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    @Override
+    public Location getLocation() {
+        return player.getBukkitEntity().getLocation();
+    }
+    // CraftBukkit end
+
     public Inventory(Player player) {
+        this.items = NonNullList.withSize(36, ItemStack.EMPTY);
+        this.armor = NonNullList.withSize(4, ItemStack.EMPTY);
+        this.offhand = NonNullList.withSize(1, ItemStack.EMPTY);
+        this.compartments = ImmutableList.of(this.items, this.armor, this.offhand);
         this.player = player;
     }
 
     public ItemStack getSelected() {
-        return isHotbarSlot(this.selected) ? this.items.get(this.selected) : ItemStack.EMPTY;
+        return isHotbarSlot(this.selected) ? (ItemStack) this.items.get(this.selected) : ItemStack.EMPTY;
     }
 
     public static int getSelectionSize() {
@@ -53,16 +115,34 @@
     }
 
     private boolean hasRemainingSpaceForItem(ItemStack destination, ItemStack origin) {
-        return !destination.isEmpty()
-            && ItemStack.isSameItemSameTags(destination, origin)
-            && destination.isStackable()
-            && destination.getCount() < destination.getMaxStackSize()
-            && destination.getCount() < this.getMaxStackSize();
+        return !destination.isEmpty() && ItemStack.isSameItemSameTags(destination, origin) && destination.isStackable() && destination.getCount() < destination.getMaxStackSize() && destination.getCount() < this.getMaxStackSize();
     }
 
+    // CraftBukkit start - Watch method above! :D
+    public int canHold(ItemStack itemstack) {
+        int remains = itemstack.getCount();
+        for (int i = 0; i < this.items.size(); ++i) {
+            ItemStack itemstack1 = this.getItem(i);
+            if (itemstack1.isEmpty()) return itemstack.getCount();
+
+            if (this.hasRemainingSpaceForItem(itemstack1, itemstack)) {
+                remains -= (itemstack1.getMaxStackSize() < this.getMaxStackSize() ? itemstack1.getMaxStackSize() : this.getMaxStackSize()) - itemstack1.getCount();
+            }
+            if (remains <= 0) return itemstack.getCount();
+        }
+        ItemStack offhandItemStack = this.getItem(this.items.size() + this.armor.size());
+        if (this.hasRemainingSpaceForItem(offhandItemStack, itemstack)) {
+            remains -= (offhandItemStack.getMaxStackSize() < this.getMaxStackSize() ? offhandItemStack.getMaxStackSize() : this.getMaxStackSize()) - offhandItemStack.getCount();
+        }
+        if (remains <= 0) return itemstack.getCount();
+
+        return itemstack.getCount() - remains;
+    }
+    // CraftBukkit end
+
     public int getFreeSlot() {
-        for (int i = 0; i < this.items.size(); i++) {
-            if (this.items.get(i).isEmpty()) {
+        for (int i = 0; i < this.items.size(); ++i) {
+            if (((ItemStack) this.items.get(i)).isEmpty()) {
                 return i;
             }
         }
@@ -72,15 +152,17 @@
 
     public void setPickedItem(ItemStack stack) {
         int i = this.findSlotMatchingItem(stack);
+
         if (isHotbarSlot(i)) {
             this.selected = i;
         } else {
             if (i == -1) {
                 this.selected = this.getSuitableHotbarSlot();
-                if (!this.items.get(this.selected).isEmpty()) {
-                    int freeSlot = this.getFreeSlot();
-                    if (freeSlot != -1) {
-                        this.items.set(freeSlot, this.items.get(this.selected));
+                if (!((ItemStack) this.items.get(this.selected)).isEmpty()) {
+                    int j = this.getFreeSlot();
+
+                    if (j != -1) {
+                        this.items.set(j, (ItemStack) this.items.get(this.selected));
                     }
                 }
 
@@ -88,14 +170,16 @@
             } else {
                 this.pickSlot(i);
             }
+
         }
     }
 
     public void pickSlot(int index) {
         this.selected = this.getSuitableHotbarSlot();
-        ItemStack itemStack = this.items.get(this.selected);
-        this.items.set(this.selected, this.items.get(index));
-        this.items.set(index, itemStack);
+        ItemStack itemstack = (ItemStack) this.items.get(this.selected);
+
+        this.items.set(this.selected, (ItemStack) this.items.get(index));
+        this.items.set(index, itemstack);
     }
 
     public static boolean isHotbarSlot(int index) {
@@ -103,8 +187,8 @@
     }
 
     public int findSlotMatchingItem(ItemStack stack) {
-        for (int i = 0; i < this.items.size(); i++) {
-            if (!this.items.get(i).isEmpty() && ItemStack.isSameItemSameTags(stack, this.items.get(i))) {
+        for (int i = 0; i < this.items.size(); ++i) {
+            if (!((ItemStack) this.items.get(i)).isEmpty() && ItemStack.isSameItemSameTags(stack, (ItemStack) this.items.get(i))) {
                 return i;
             }
         }
@@ -113,13 +197,10 @@
     }
 
     public int findSlotMatchingUnusedItem(ItemStack stack) {
-        for (int i = 0; i < this.items.size(); i++) {
-            ItemStack itemStack = this.items.get(i);
-            if (!this.items.get(i).isEmpty()
-                && ItemStack.isSameItemSameTags(stack, this.items.get(i))
-                && !this.items.get(i).isDamaged()
-                && !itemStack.isEnchanted()
-                && !itemStack.hasCustomHoverName()) {
+        for (int i = 0; i < this.items.size(); ++i) {
+            ItemStack itemstack1 = (ItemStack) this.items.get(i);
+
+            if (!((ItemStack) this.items.get(i)).isEmpty() && ItemStack.isSameItemSameTags(stack, (ItemStack) this.items.get(i)) && !((ItemStack) this.items.get(i)).isDamaged() && !itemstack1.isEnchanted() && !itemstack1.hasCustomHoverName()) {
                 return i;
             }
         }
@@ -128,17 +209,20 @@
     }
 
     public int getSuitableHotbarSlot() {
-        for (int i = 0; i < 9; i++) {
-            int i1 = (this.selected + i) % 9;
-            if (this.items.get(i1).isEmpty()) {
-                return i1;
+        int i;
+        int j;
+
+        for (j = 0; j < 9; ++j) {
+            i = (this.selected + j) % 9;
+            if (((ItemStack) this.items.get(i)).isEmpty()) {
+                return i;
             }
         }
 
-        for (int ix = 0; ix < 9; ix++) {
-            int i1 = (this.selected + ix) % 9;
-            if (!this.items.get(i1).isEnchanted()) {
-                return i1;
+        for (j = 0; j < 9; ++j) {
+            i = (this.selected + j) % 9;
+            if (!((ItemStack) this.items.get(i)).isEnchanted()) {
+                return i;
             }
         }
 
@@ -146,70 +230,75 @@
     }
 
     public void swapPaint(double direction) {
-        int i = (int)Math.signum(direction);
-        this.selected -= i;
+        int i = (int) Math.signum(direction);
 
-        while (this.selected < 0) {
-            this.selected += 9;
+        for (this.selected -= i; this.selected < 0; this.selected += 9) {
+            ;
         }
 
         while (this.selected >= 9) {
             this.selected -= 9;
         }
+
     }
 
     public int clearOrCountMatchingItems(Predicate<ItemStack> stackPredicate, int maxCount, Container inventory) {
-        int i = 0;
+        byte b0 = 0;
         boolean flag = maxCount == 0;
-        i += ContainerHelper.clearOrCountMatchingItems(this, stackPredicate, maxCount - i, flag);
-        i += ContainerHelper.clearOrCountMatchingItems(inventory, stackPredicate, maxCount - i, flag);
-        ItemStack carried = this.player.containerMenu.getCarried();
-        int var9 = i + ContainerHelper.clearOrCountMatchingItems(carried, stackPredicate, maxCount - i, flag);
-        if (carried.isEmpty()) {
+        int j = b0 + ContainerHelper.clearOrCountMatchingItems((Container) this, stackPredicate, maxCount - b0, flag);
+
+        j += ContainerHelper.clearOrCountMatchingItems(inventory, stackPredicate, maxCount - j, flag);
+        ItemStack itemstack = this.player.containerMenu.getCarried();
+
+        j += ContainerHelper.clearOrCountMatchingItems(itemstack, stackPredicate, maxCount - j, flag);
+        if (itemstack.isEmpty()) {
             this.player.containerMenu.setCarried(ItemStack.EMPTY);
         }
 
-        return var9;
+        return j;
     }
 
     private int addResource(ItemStack stack) {
-        int slotWithRemainingSpace = this.getSlotWithRemainingSpace(stack);
-        if (slotWithRemainingSpace == -1) {
-            slotWithRemainingSpace = this.getFreeSlot();
+        int i = this.getSlotWithRemainingSpace(stack);
+
+        if (i == -1) {
+            i = this.getFreeSlot();
         }
 
-        return slotWithRemainingSpace == -1 ? stack.getCount() : this.addResource(slotWithRemainingSpace, stack);
+        return i == -1 ? stack.getCount() : this.addResource(i, stack);
     }
 
     private int addResource(int slot, ItemStack stack) {
         Item item = stack.getItem();
-        int count = stack.getCount();
-        ItemStack item1 = this.getItem(slot);
-        if (item1.isEmpty()) {
-            item1 = new ItemStack(item, 0);
+        int j = stack.getCount();
+        ItemStack itemstack1 = this.getItem(slot);
+
+        if (itemstack1.isEmpty()) {
+            itemstack1 = new ItemStack(item, 0);
             if (stack.hasTag()) {
-                item1.setTag(stack.getTag().copy());
+                itemstack1.setTag(stack.getTag().copy());
             }
 
-            this.setItem(slot, item1);
+            this.setItem(slot, itemstack1);
         }
 
-        int i = count;
-        if (count > item1.getMaxStackSize() - item1.getCount()) {
-            i = item1.getMaxStackSize() - item1.getCount();
+        int k = j;
+
+        if (j > itemstack1.getMaxStackSize() - itemstack1.getCount()) {
+            k = itemstack1.getMaxStackSize() - itemstack1.getCount();
         }
 
-        if (i > this.getMaxStackSize() - item1.getCount()) {
-            i = this.getMaxStackSize() - item1.getCount();
+        if (k > this.getMaxStackSize() - itemstack1.getCount()) {
+            k = this.getMaxStackSize() - itemstack1.getCount();
         }
 
-        if (i == 0) {
-            return count;
+        if (k == 0) {
+            return j;
         } else {
-            count -= i;
-            item1.grow(i);
-            item1.setPopTime(5);
-            return count;
+            j -= k;
+            itemstack1.grow(k);
+            itemstack1.setPopTime(5);
+            return j;
         }
     }
 
@@ -219,8 +308,8 @@
         } else if (this.hasRemainingSpaceForItem(this.getItem(40), stack)) {
             return 40;
         } else {
-            for (int i = 0; i < this.items.size(); i++) {
-                if (this.hasRemainingSpaceForItem(this.items.get(i), stack)) {
+            for (int i = 0; i < this.items.size(); ++i) {
+                if (this.hasRemainingSpaceForItem((ItemStack) this.items.get(i), stack)) {
                     return i;
                 }
             }
@@ -230,13 +319,18 @@
     }
 
     public void tick() {
-        for (NonNullList<ItemStack> list : this.compartments) {
-            for (int i = 0; i < list.size(); i++) {
-                if (!list.get(i).isEmpty()) {
-                    list.get(i).inventoryTick(this.player.level(), this.player, i, this.selected == i);
+        Iterator iterator = this.compartments.iterator();
+
+        while (iterator.hasNext()) {
+            NonNullList<ItemStack> nonnulllist = (NonNullList) iterator.next();
+
+            for (int i = 0; i < nonnulllist.size(); ++i) {
+                if (!((ItemStack) nonnulllist.get(i)).isEmpty()) {
+                    ((ItemStack) nonnulllist.get(i)).inventoryTick(this.player.level(), this.player, i, this.selected == i);
                 }
             }
         }
+
     }
 
     public boolean add(ItemStack stack) {
@@ -255,7 +349,7 @@
 
                     if (slot >= 0) {
                         this.items.set(slot, stack.copyAndClear());
-                        this.items.get(slot).setPopTime(5);
+                        ((ItemStack) this.items.get(slot)).setPopTime(5);
                         return true;
                     } else if (this.player.getAbilities().instabuild) {
                         stack.setCount(0);
@@ -264,30 +358,34 @@
                         return false;
                     }
                 } else {
-                    int count;
+                    int j;
+
                     do {
-                        count = stack.getCount();
+                        j = stack.getCount();
                         if (slot == -1) {
                             stack.setCount(this.addResource(stack));
                         } else {
                             stack.setCount(this.addResource(slot, stack));
                         }
-                    } while (!stack.isEmpty() && stack.getCount() < count);
+                    } while (!stack.isEmpty() && stack.getCount() < j);
 
-                    if (stack.getCount() == count && this.player.getAbilities().instabuild) {
+                    if (stack.getCount() == j && this.player.getAbilities().instabuild) {
                         stack.setCount(0);
                         return true;
                     } else {
-                        return stack.getCount() < count;
+                        return stack.getCount() < j;
                     }
                 }
-            } catch (Throwable var6) {
-                CrashReport crashReport = CrashReport.forThrowable(var6, "Adding item to inventory");
-                CrashReportCategory crashReportCategory = crashReport.addCategory("Item being added");
-                crashReportCategory.setDetail("Item ID", Item.getId(stack.getItem()));
-                crashReportCategory.setDetail("Item data", stack.getDamageValue());
-                crashReportCategory.setDetail("Item name", () -> stack.getHoverName().getString());
-                throw new ReportedException(crashReport);
+            } catch (Throwable throwable) {
+                CrashReport crashreport = CrashReport.forThrowable(throwable, "Adding item to inventory");
+                CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Item being added");
+
+                crashreportsystemdetails.setDetail("Item ID", (Object) Item.getId(stack.getItem()));
+                crashreportsystemdetails.setDetail("Item data", (Object) stack.getDamageValue());
+                crashreportsystemdetails.setDetail("Item name", () -> {
+                    return stack.getHoverName().getString();
+                });
+                throw new ReportedException(crashreport);
             }
         }
     }
@@ -297,23 +395,27 @@
     }
 
     public void placeItemBackInInventory(ItemStack stack, boolean sendPacket) {
-        while (!stack.isEmpty()) {
-            int slotWithRemainingSpace = this.getSlotWithRemainingSpace(stack);
-            if (slotWithRemainingSpace == -1) {
-                slotWithRemainingSpace = this.getFreeSlot();
-            }
+        while (true) {
+            if (!stack.isEmpty()) {
+                int i = this.getSlotWithRemainingSpace(stack);
 
-            if (slotWithRemainingSpace == -1) {
+                if (i == -1) {
+                    i = this.getFreeSlot();
+                }
+
+                if (i != -1) {
+                    int j = stack.getMaxStackSize() - this.getItem(i).getCount();
+
+                    if (this.add(i, stack.split(j)) && sendPacket && this.player instanceof ServerPlayer) {
+                        ((ServerPlayer) this.player).connection.send(new ClientboundContainerSetSlotPacket(-2, 0, i, this.getItem(i)));
+                    }
+                    continue;
+                }
+
                 this.player.drop(stack, false);
-                break;
             }
 
-            int i = stack.getMaxStackSize() - this.getItem(slotWithRemainingSpace).getCount();
-            if (this.add(slotWithRemainingSpace, stack.split(i)) && sendPacket && this.player instanceof ServerPlayer) {
-                ((ServerPlayer)this.player)
-                    .connection
-                    .send(new ClientboundContainerSetSlotPacket(-2, 0, slotWithRemainingSpace, this.getItem(slotWithRemainingSpace)));
-            }
+            return;
         }
     }
 
@@ -321,46 +423,54 @@
     public ItemStack removeItem(int index, int count) {
         List<ItemStack> list = null;
 
-        for (NonNullList<ItemStack> list1 : this.compartments) {
-            if (index < list1.size()) {
-                list = list1;
+        NonNullList nonnulllist;
+
+        for (Iterator iterator = this.compartments.iterator(); iterator.hasNext(); index -= nonnulllist.size()) {
+            nonnulllist = (NonNullList) iterator.next();
+            if (index < nonnulllist.size()) {
+                list = nonnulllist;
                 break;
             }
-
-            index -= list1.size();
         }
 
-        return list != null && !list.get(index).isEmpty() ? ContainerHelper.removeItem(list, index, count) : ItemStack.EMPTY;
+        return list != null && !((ItemStack) list.get(index)).isEmpty() ? ContainerHelper.removeItem(list, index, count) : ItemStack.EMPTY;
     }
 
     public void removeItem(ItemStack stack) {
-        for (NonNullList<ItemStack> list : this.compartments) {
-            for (int i = 0; i < list.size(); i++) {
-                if (list.get(i) == stack) {
-                    list.set(i, ItemStack.EMPTY);
+        Iterator iterator = this.compartments.iterator();
+
+        while (iterator.hasNext()) {
+            NonNullList<ItemStack> nonnulllist = (NonNullList) iterator.next();
+
+            for (int i = 0; i < nonnulllist.size(); ++i) {
+                if (nonnulllist.get(i) == stack) {
+                    nonnulllist.set(i, ItemStack.EMPTY);
                     break;
                 }
             }
         }
+
     }
 
     @Override
     public ItemStack removeItemNoUpdate(int index) {
-        NonNullList<ItemStack> list = null;
+        NonNullList<ItemStack> nonnulllist = null;
 
-        for (NonNullList<ItemStack> list1 : this.compartments) {
-            if (index < list1.size()) {
-                list = list1;
+        NonNullList nonnulllist1;
+
+        for (Iterator iterator = this.compartments.iterator(); iterator.hasNext(); index -= nonnulllist1.size()) {
+            nonnulllist1 = (NonNullList) iterator.next();
+            if (index < nonnulllist1.size()) {
+                nonnulllist = nonnulllist1;
                 break;
             }
-
-            index -= list1.size();
         }
 
-        if (list != null && !list.get(index).isEmpty()) {
-            ItemStack itemStack = list.get(index);
-            list.set(index, ItemStack.EMPTY);
-            return itemStack;
+        if (nonnulllist != null && !((ItemStack) nonnulllist.get(index)).isEmpty()) {
+            ItemStack itemstack = (ItemStack) nonnulllist.get(index);
+
+            nonnulllist.set(index, ItemStack.EMPTY);
+            return itemstack;
         } else {
             return ItemStack.EMPTY;
         }
@@ -368,51 +478,56 @@
 
     @Override
     public void setItem(int index, ItemStack stack) {
-        NonNullList<ItemStack> list = null;
+        NonNullList<ItemStack> nonnulllist = null;
 
-        for (NonNullList<ItemStack> list1 : this.compartments) {
-            if (index < list1.size()) {
-                list = list1;
+        NonNullList nonnulllist1;
+
+        for (Iterator iterator = this.compartments.iterator(); iterator.hasNext(); index -= nonnulllist1.size()) {
+            nonnulllist1 = (NonNullList) iterator.next();
+            if (index < nonnulllist1.size()) {
+                nonnulllist = nonnulllist1;
                 break;
             }
-
-            index -= list1.size();
         }
 
-        if (list != null) {
-            list.set(index, stack);
+        if (nonnulllist != null) {
+            nonnulllist.set(index, stack);
         }
+
     }
 
-    public float getDestroySpeed(BlockState state) {
-        return this.items.get(this.selected).getDestroySpeed(state);
+    public float getDestroySpeed(IBlockData state) {
+        return ((ItemStack) this.items.get(this.selected)).getDestroySpeed(state);
     }
 
     public ListTag save(ListTag listTag) {
-        for (int i = 0; i < this.items.size(); i++) {
-            if (!this.items.get(i).isEmpty()) {
-                CompoundTag compoundTag = new CompoundTag();
-                compoundTag.putByte("Slot", (byte)i);
-                this.items.get(i).save(compoundTag);
-                listTag.add(compoundTag);
+        CompoundTag nbttagcompound;
+        int i;
+
+        for (i = 0; i < this.items.size(); ++i) {
+            if (!((ItemStack) this.items.get(i)).isEmpty()) {
+                nbttagcompound = new CompoundTag();
+                nbttagcompound.putByte("Slot", (byte) i);
+                ((ItemStack) this.items.get(i)).save(nbttagcompound);
+                listTag.add(nbttagcompound);
             }
         }
 
-        for (int ix = 0; ix < this.armor.size(); ix++) {
-            if (!this.armor.get(ix).isEmpty()) {
-                CompoundTag compoundTag = new CompoundTag();
-                compoundTag.putByte("Slot", (byte)(ix + 100));
-                this.armor.get(ix).save(compoundTag);
-                listTag.add(compoundTag);
+        for (i = 0; i < this.armor.size(); ++i) {
+            if (!((ItemStack) this.armor.get(i)).isEmpty()) {
+                nbttagcompound = new CompoundTag();
+                nbttagcompound.putByte("Slot", (byte) (i + 100));
+                ((ItemStack) this.armor.get(i)).save(nbttagcompound);
+                listTag.add(nbttagcompound);
             }
         }
 
-        for (int ixx = 0; ixx < this.offhand.size(); ixx++) {
-            if (!this.offhand.get(ixx).isEmpty()) {
-                CompoundTag compoundTag = new CompoundTag();
-                compoundTag.putByte("Slot", (byte)(ixx + 150));
-                this.offhand.get(ixx).save(compoundTag);
-                listTag.add(compoundTag);
+        for (i = 0; i < this.offhand.size(); ++i) {
+            if (!((ItemStack) this.offhand.get(i)).isEmpty()) {
+                nbttagcompound = new CompoundTag();
+                nbttagcompound.putByte("Slot", (byte) (i + 150));
+                ((ItemStack) this.offhand.get(i)).save(nbttagcompound);
+                listTag.add(nbttagcompound);
             }
         }
 
@@ -424,20 +539,22 @@
         this.armor.clear();
         this.offhand.clear();
 
-        for (int i = 0; i < listTag.size(); i++) {
-            CompoundTag compound = listTag.getCompound(i);
-            int i1 = compound.getByte("Slot") & 255;
-            ItemStack itemStack = ItemStack.of(compound);
-            if (!itemStack.isEmpty()) {
-                if (i1 >= 0 && i1 < this.items.size()) {
-                    this.items.set(i1, itemStack);
-                } else if (i1 >= 100 && i1 < this.armor.size() + 100) {
-                    this.armor.set(i1 - 100, itemStack);
-                } else if (i1 >= 150 && i1 < this.offhand.size() + 150) {
-                    this.offhand.set(i1 - 150, itemStack);
+        for (int i = 0; i < listTag.size(); ++i) {
+            CompoundTag nbttagcompound = listTag.getCompound(i);
+            int j = nbttagcompound.getByte("Slot") & 255;
+            ItemStack itemstack = ItemStack.of(nbttagcompound);
+
+            if (!itemstack.isEmpty()) {
+                if (j >= 0 && j < this.items.size()) {
+                    this.items.set(j, itemstack);
+                } else if (j >= 100 && j < this.armor.size() + 100) {
+                    this.armor.set(j - 100, itemstack);
+                } else if (j >= 150 && j < this.offhand.size() + 150) {
+                    this.offhand.set(j - 150, itemstack);
                 }
             }
         }
+
     }
 
     @Override
@@ -447,41 +564,56 @@
 
     @Override
     public boolean isEmpty() {
-        for (ItemStack itemStack : this.items) {
-            if (!itemStack.isEmpty()) {
-                return false;
-            }
-        }
+        Iterator iterator = this.items.iterator();
 
-        for (ItemStack itemStackx : this.armor) {
-            if (!itemStackx.isEmpty()) {
-                return false;
-            }
-        }
+        ItemStack itemstack;
 
-        for (ItemStack itemStackxx : this.offhand) {
-            if (!itemStackxx.isEmpty()) {
+        do {
+            if (!iterator.hasNext()) {
+                iterator = this.armor.iterator();
+
+                do {
+                    if (!iterator.hasNext()) {
+                        iterator = this.offhand.iterator();
+
+                        do {
+                            if (!iterator.hasNext()) {
+                                return true;
+                            }
+
+                            itemstack = (ItemStack) iterator.next();
+                        } while (itemstack.isEmpty());
+
+                        return false;
+                    }
+
+                    itemstack = (ItemStack) iterator.next();
+                } while (itemstack.isEmpty());
+
                 return false;
             }
-        }
 
-        return true;
+            itemstack = (ItemStack) iterator.next();
+        } while (itemstack.isEmpty());
+
+        return false;
     }
 
     @Override
     public ItemStack getItem(int index) {
         List<ItemStack> list = null;
 
-        for (NonNullList<ItemStack> list1 : this.compartments) {
-            if (index < list1.size()) {
-                list = list1;
+        NonNullList nonnulllist;
+
+        for (Iterator iterator = this.compartments.iterator(); iterator.hasNext(); index -= nonnulllist.size()) {
+            nonnulllist = (NonNullList) iterator.next();
+            if (index < nonnulllist.size()) {
+                list = nonnulllist;
                 break;
             }
-
-            index -= list1.size();
         }
 
-        return list == null ? ItemStack.EMPTY : list.get(index);
+        return list == null ? ItemStack.EMPTY : (ItemStack) list.get(index);
     }
 
     @Override
@@ -490,42 +622,54 @@
     }
 
     public ItemStack getArmor(int slot) {
-        return this.armor.get(slot);
+        return (ItemStack) this.armor.get(slot);
     }
 
     public void hurtArmor(DamageSource source, float damage, int[] armorPieces) {
-        if (!(damage <= 0.0F)) {
-            float var9 = damage / 4.0F;
-            if (var9 < 1.0F) {
-                var9 = 1.0F;
+        if (damage > 0.0F) {
+            damage /= 4.0F;
+            if (damage < 1.0F) {
+                damage = 1.0F;
             }
 
-            for (int i : armorPieces) {
-                ItemStack itemStack = this.armor.get(i);
-                if ((!source.is(DamageTypeTags.IS_FIRE) || !itemStack.getItem().isFireResistant()) && itemStack.getItem() instanceof ArmorItem) {
-                    itemStack.hurtAndBreak(
-                        (int)var9, this.player, entity -> entity.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Type.ARMOR, i))
-                    );
+            int[] aint1 = armorPieces;
+            int i = armorPieces.length;
+
+            for (int j = 0; j < i; ++j) {
+                int k = aint1[j];
+                ItemStack itemstack = (ItemStack) this.armor.get(k);
+
+                if ((!source.is(DamageTypeTags.IS_FIRE) || !itemstack.getItem().isFireResistant()) && itemstack.getItem() instanceof ArmorItem) {
+                    itemstack.hurtAndBreak((int) damage, this.player, (entityhuman) -> {
+                        entityhuman.broadcastBreakEvent(EquipmentSlot.byTypeAndIndex(EquipmentSlot.Function.ARMOR, k));
+                    });
                 }
             }
+
         }
     }
 
     public void dropAll() {
-        for (List<ItemStack> list : this.compartments) {
-            for (int i = 0; i < list.size(); i++) {
-                ItemStack itemStack = list.get(i);
-                if (!itemStack.isEmpty()) {
-                    this.player.drop(itemStack, true, false);
+        Iterator iterator = this.compartments.iterator();
+
+        while (iterator.hasNext()) {
+            List<ItemStack> list = (List) iterator.next();
+
+            for (int i = 0; i < list.size(); ++i) {
+                ItemStack itemstack = (ItemStack) list.get(i);
+
+                if (!itemstack.isEmpty()) {
+                    this.player.drop(itemstack, true, false);
                     list.set(i, ItemStack.EMPTY);
                 }
             }
         }
+
     }
 
     @Override
     public void setChanged() {
-        this.timesChanged++;
+        ++this.timesChanged;
     }
 
     public int getTimesChanged() {
@@ -534,13 +678,20 @@
 
     @Override
     public boolean stillValid(Player player) {
-        return !this.player.isRemoved() && !(player.distanceToSqr(this.player) > 64.0);
+        return this.player.isRemoved() ? false : player.distanceToSqr((Entity) this.player) <= 64.0D;
     }
 
     public boolean contains(ItemStack stack) {
-        for (List<ItemStack> list : this.compartments) {
-            for (ItemStack itemStack : list) {
-                if (!itemStack.isEmpty() && ItemStack.isSameItemSameTags(itemStack, stack)) {
+        Iterator iterator = this.compartments.iterator();
+
+        while (iterator.hasNext()) {
+            List<ItemStack> list = (List) iterator.next();
+            Iterator iterator1 = list.iterator();
+
+            while (iterator1.hasNext()) {
+                ItemStack itemstack1 = (ItemStack) iterator1.next();
+
+                if (!itemstack1.isEmpty() && ItemStack.isSameItemSameTags(itemstack1, stack)) {
                     return true;
                 }
             }
@@ -550,9 +701,16 @@
     }
 
     public boolean contains(TagKey<Item> tag) {
-        for (List<ItemStack> list : this.compartments) {
-            for (ItemStack itemStack : list) {
-                if (!itemStack.isEmpty() && itemStack.is(tag)) {
+        Iterator iterator = this.compartments.iterator();
+
+        while (iterator.hasNext()) {
+            List<ItemStack> list = (List) iterator.next();
+            Iterator iterator1 = list.iterator();
+
+            while (iterator1.hasNext()) {
+                ItemStack itemstack = (ItemStack) iterator1.next();
+
+                if (!itemstack.isEmpty() && itemstack.is(tag)) {
                     return true;
                 }
             }
@@ -562,7 +720,7 @@
     }
 
     public void replaceWith(Inventory playerInventory) {
-        for (int i = 0; i < this.getContainerSize(); i++) {
+        for (int i = 0; i < this.getContainerSize(); ++i) {
             this.setItem(i, playerInventory.getItem(i));
         }
 
@@ -571,19 +729,30 @@
 
     @Override
     public void clearContent() {
-        for (List<ItemStack> list : this.compartments) {
+        Iterator iterator = this.compartments.iterator();
+
+        while (iterator.hasNext()) {
+            List<ItemStack> list = (List) iterator.next();
+
             list.clear();
         }
+
     }
 
     public void fillStackedContents(StackedContents stackedContent) {
-        for (ItemStack itemStack : this.items) {
-            stackedContent.accountSimpleStack(itemStack);
+        Iterator iterator = this.items.iterator();
+
+        while (iterator.hasNext()) {
+            ItemStack itemstack = (ItemStack) iterator.next();
+
+            stackedContent.accountSimpleStack(itemstack);
         }
+
     }
 
     public ItemStack removeFromSelected(boolean removeStack) {
-        ItemStack selected = this.getSelected();
-        return selected.isEmpty() ? ItemStack.EMPTY : this.removeItem(this.selected, removeStack ? selected.getCount() : 1);
+        ItemStack itemstack = this.getSelected();
+
+        return itemstack.isEmpty() ? ItemStack.EMPTY : this.removeItem(this.selected, removeStack ? itemstack.getCount() : 1);
     }
 }
