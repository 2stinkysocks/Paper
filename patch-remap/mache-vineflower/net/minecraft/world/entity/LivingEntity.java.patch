--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -29,6 +29,8 @@
 import net.minecraft.core.particles.ItemParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.FloatTag;
+import net.minecraft.nbt.IntTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
@@ -59,7 +61,7 @@
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.Difficulty;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.damagesource.CombatRules;
 import net.minecraft.world.damagesource.CombatTracker;
 import net.minecraft.world.damagesource.DamageSource;
@@ -76,20 +78,19 @@
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.attributes.DefaultAttributes;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
-import net.minecraft.world.entity.animal.FlyingAnimal;
+import net.minecraft.world.entity.animal.EntityBird;
 import net.minecraft.world.entity.animal.Wolf;
 import net.minecraft.world.entity.boss.wither.WitherBoss;
 import net.minecraft.world.entity.item.ItemEntity;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.food.FoodProperties;
 import net.minecraft.world.item.AxeItem;
 import net.minecraft.world.item.ElytraItem;
+import net.minecraft.world.item.EnumAnimation;
 import net.minecraft.world.item.Equipable;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.item.UseAnim;
 import net.minecraft.world.item.alchemy.PotionUtils;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
@@ -104,7 +105,7 @@
 import net.minecraft.world.level.block.PowderSnowBlock;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.TrapDoorBlock;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.Fluid;
@@ -119,14 +120,33 @@
 import net.minecraft.world.scores.PlayerTeam;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Set;
+import com.google.common.base.Function;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.ArrowBodyCountChangeEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityResurrectEvent;
+import org.bukkit.event.entity.EntityTeleportEvent;
+import org.bukkit.event.player.PlayerItemConsumeEvent;
+// CraftBukkit end
+
 public abstract class LivingEntity extends Entity implements Attackable {
+
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final String TAG_ACTIVE_EFFECTS = "active_effects";
     private static final UUID SPEED_MODIFIER_SOUL_SPEED_UUID = UUID.fromString("87f46a96-686f-4796-b035-22e16ee9e038");
     private static final UUID SPEED_MODIFIER_POWDER_SNOW_UUID = UUID.fromString("1eaf83ff-7207-4596-b37a-d7a07b3ec4ce");
-    private static final AttributeModifier SPEED_MODIFIER_SPRINTING = new AttributeModifier(
-        UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D"), "Sprinting speed boost", 0.3F, AttributeModifier.Operation.MULTIPLY_TOTAL
-    );
+    private static final AttributeModifier SPEED_MODIFIER_SPRINTING = new AttributeModifier(UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D"), "Sprinting speed boost", 0.30000001192092896D, AttributeModifier.Operation.MULTIPLY_TOTAL);
     public static final int HAND_SLOTS = 2;
     public static final int ARMOR_SLOTS = 4;
     public static final int EQUIPMENT_SLOT_OFFSET = 98;
@@ -134,38 +154,36 @@
     public static final int SWING_DURATION = 6;
     public static final int PLAYER_HURT_EXPERIENCE_TIME = 100;
     private static final int DAMAGE_SOURCE_TIMEOUT = 40;
-    public static final double MIN_MOVEMENT_DISTANCE = 0.003;
-    public static final double DEFAULT_BASE_GRAVITY = 0.08;
+    public static final double MIN_MOVEMENT_DISTANCE = 0.003D;
+    public static final double DEFAULT_BASE_GRAVITY = 0.08D;
     public static final int DEATH_DURATION = 20;
     private static final int WAIT_TICKS_BEFORE_ITEM_USE_EFFECTS = 7;
     private static final int TICKS_PER_ELYTRA_FREE_FALL_EVENT = 10;
     private static final int FREE_FALL_EVENTS_PER_ELYTRA_BREAK = 2;
     public static final int USE_ITEM_INTERVAL = 4;
     private static final float BASE_JUMP_POWER = 0.42F;
-    private static final double MAX_LINE_OF_SIGHT_TEST_RANGE = 128.0;
+    private static final double MAX_LINE_OF_SIGHT_TEST_RANGE = 128.0D;
     protected static final int LIVING_ENTITY_FLAG_IS_USING = 1;
     protected static final int LIVING_ENTITY_FLAG_OFF_HAND = 2;
     protected static final int LIVING_ENTITY_FLAG_SPIN_ATTACK = 4;
     protected static final EntityDataAccessor<Byte> DATA_LIVING_ENTITY_FLAGS = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.BYTE);
-    private static final EntityDataAccessor<Float> DATA_HEALTH_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.FLOAT);
+    public static final EntityDataAccessor<Float> DATA_HEALTH_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.FLOAT);
     private static final EntityDataAccessor<Integer> DATA_EFFECT_COLOR_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_EFFECT_AMBIENCE_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.BOOLEAN);
-    private static final EntityDataAccessor<Integer> DATA_ARROW_COUNT_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.INT);
+    public static final EntityDataAccessor<Integer> DATA_ARROW_COUNT_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Integer> DATA_STINGER_COUNT_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.INT);
-    private static final EntityDataAccessor<Optional<BlockPos>> SLEEPING_POS_ID = SynchedEntityData.defineId(
-        LivingEntity.class, EntityDataSerializers.OPTIONAL_BLOCK_POS
-    );
+    private static final EntityDataAccessor<Optional<BlockPos>> SLEEPING_POS_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.OPTIONAL_BLOCK_POS);
     protected static final float DEFAULT_EYE_HEIGHT = 1.74F;
     protected static final EntityDimensions SLEEPING_DIMENSIONS = EntityDimensions.fixed(0.2F, 0.2F);
     public static final float EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT = 0.5F;
     private final AttributeMap attributes;
-    private final CombatTracker combatTracker = new CombatTracker(this);
-    private final Map<MobEffect, MobEffectInstance> activeEffects = Maps.newHashMap();
-    private final NonNullList<ItemStack> lastHandItemStacks = NonNullList.withSize(2, ItemStack.EMPTY);
-    private final NonNullList<ItemStack> lastArmorItemStacks = NonNullList.withSize(4, ItemStack.EMPTY);
+    public CombatTracker combatTracker = new CombatTracker(this);
+    public final Map<MobEffect, MobEffectInstance> activeEffects = Maps.newHashMap();
+    private final NonNullList<ItemStack> lastHandItemStacks;
+    private final NonNullList<ItemStack> lastArmorItemStacks;
     public boolean swinging;
-    private boolean discardFriction = false;
-    public InteractionHand swingingArm;
+    private boolean discardFriction;
+    public EnumHand swingingArm;
     public int swingTime;
     public int removeArrowTime;
     public int removeStingerTime;
@@ -175,8 +193,8 @@
     public float oAttackAnim;
     public float attackAnim;
     protected int attackStrengthTicker;
-    public final WalkAnimationState walkAnimation = new WalkAnimationState();
-    public final int invulnerableDuration = 20;
+    public final WalkAnimationState walkAnimation;
+    public int invulnerableDuration;
     public final float timeOffs;
     public final float rotA;
     public float yBodyRot;
@@ -184,7 +202,7 @@
     public float yHeadRot;
     public float yHeadRotO;
     @Nullable
-    protected Player lastHurtByPlayer;
+    public net.minecraft.world.entity.player.Player lastHurtByPlayer;
     protected int lastHurtByPlayerTime;
     protected boolean dead;
     protected int noActionTime;
@@ -194,7 +212,7 @@
     protected float animStepO;
     protected float rotOffs;
     protected int deathScore;
-    protected float lastHurt;
+    public float lastHurt;
     protected boolean jumping;
     public float xxa;
     public float yya;
@@ -207,20 +225,20 @@
     protected double lerpXRot;
     protected double lerpYHeadRot;
     protected int lerpHeadSteps;
-    private boolean effectsDirty = true;
+    public boolean effectsDirty;
     @Nullable
-    private LivingEntity lastHurtByMob;
-    private int lastHurtByMobTimestamp;
+    public LivingEntity lastHurtByMob;
+    public int lastHurtByMobTimestamp;
     private LivingEntity lastHurtMob;
     private int lastHurtMobTimestamp;
     private float speed;
     private int noJumpDelay;
     private float absorptionAmount;
-    protected ItemStack useItem = ItemStack.EMPTY;
+    protected ItemStack useItem;
     protected int useItemRemaining;
     protected int fallFlyTicks;
     private BlockPos lastPos;
-    private Optional<BlockPos> lastClimbablePos = Optional.empty();
+    private Optional<BlockPos> lastClimbablePos;
     @Nullable
     private DamageSource lastDamageSource;
     private long lastDamageStamp;
@@ -229,20 +247,45 @@
     private float swimAmountO;
     protected Brain<?> brain;
     private boolean skipDropExperience;
+    // CraftBukkit start
+    public int expToDrop;
+    public boolean forceDrops;
+    public ArrayList<org.bukkit.inventory.ItemStack> drops = new ArrayList<org.bukkit.inventory.ItemStack>();
+    public final org.bukkit.craftbukkit.attribute.CraftAttributeMap craftAttributes;
+    public boolean collides = true;
+    public Set<UUID> collidableExemptions = new HashSet<>();
+    public boolean bukkitPickUpLoot;
 
+    @Override
+    public float getBukkitYaw() {
+        return getYHeadRot();
+    }
+    // CraftBukkit end
+
     protected LivingEntity(EntityType<? extends LivingEntity> entityType, Level level) {
         super(entityType, level);
+        this.lastHandItemStacks = NonNullList.withSize(2, ItemStack.EMPTY);
+        this.lastArmorItemStacks = NonNullList.withSize(4, ItemStack.EMPTY);
+        this.discardFriction = false;
+        this.walkAnimation = new WalkAnimationState();
+        this.invulnerableDuration = 20;
+        this.effectsDirty = true;
+        this.useItem = ItemStack.EMPTY;
+        this.lastClimbablePos = Optional.empty();
         this.attributes = new AttributeMap(DefaultAttributes.getSupplier(entityType));
-        this.setHealth(this.getMaxHealth());
+        this.craftAttributes = new CraftAttributeMap(attributes); // CraftBukkit
+        // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
+        this.entityData.set(LivingEntity.DATA_HEALTH_ID, (float) this.getAttribute(Attributes.MAX_HEALTH).getValue());
         this.blocksBuilding = true;
-        this.rotA = (float)((Math.random() + 1.0) * 0.01F);
+        this.rotA = (float) ((Math.random() + 1.0D) * 0.009999999776482582D);
         this.reapplyPosition();
-        this.timeOffs = (float)Math.random() * 12398.0F;
-        this.setYRot((float)(Math.random() * (float) (Math.PI * 2)));
+        this.timeOffs = (float) Math.random() * 12398.0F;
+        this.setYRot((float) (Math.random() * 6.2831854820251465D));
         this.yHeadRot = this.getYRot();
         this.setMaxUpStep(0.6F);
-        NbtOps nbtOps = NbtOps.INSTANCE;
-        this.brain = this.makeBrain(new Dynamic<>(nbtOps, nbtOps.createMap(ImmutableMap.of(nbtOps.createString("memories"), nbtOps.emptyMap()))));
+        NbtOps dynamicopsnbt = NbtOps.INSTANCE;
+
+        this.brain = this.makeBrain(new Dynamic(dynamicopsnbt, (Tag) dynamicopsnbt.createMap((Map) ImmutableMap.of(dynamicopsnbt.createString("memories"), (Tag) dynamicopsnbt.emptyMap()))));
     }
 
     public Brain<?> getBrain() {
@@ -268,59 +311,63 @@
 
     @Override
     protected void defineSynchedData() {
-        this.entityData.define(DATA_LIVING_ENTITY_FLAGS, (byte)0);
-        this.entityData.define(DATA_EFFECT_COLOR_ID, 0);
-        this.entityData.define(DATA_EFFECT_AMBIENCE_ID, false);
-        this.entityData.define(DATA_ARROW_COUNT_ID, 0);
-        this.entityData.define(DATA_STINGER_COUNT_ID, 0);
-        this.entityData.define(DATA_HEALTH_ID, 1.0F);
-        this.entityData.define(SLEEPING_POS_ID, Optional.empty());
+        this.entityData.define(LivingEntity.DATA_LIVING_ENTITY_FLAGS, (byte) 0);
+        this.entityData.define(LivingEntity.DATA_EFFECT_COLOR_ID, 0);
+        this.entityData.define(LivingEntity.DATA_EFFECT_AMBIENCE_ID, false);
+        this.entityData.define(LivingEntity.DATA_ARROW_COUNT_ID, 0);
+        this.entityData.define(LivingEntity.DATA_STINGER_COUNT_ID, 0);
+        this.entityData.define(LivingEntity.DATA_HEALTH_ID, 1.0F);
+        this.entityData.define(LivingEntity.SLEEPING_POS_ID, Optional.empty());
     }
 
     public static AttributeSupplier.Builder createLivingAttributes() {
-        return AttributeSupplier.builder()
-            .add(Attributes.MAX_HEALTH)
-            .add(Attributes.KNOCKBACK_RESISTANCE)
-            .add(Attributes.MOVEMENT_SPEED)
-            .add(Attributes.ARMOR)
-            .add(Attributes.ARMOR_TOUGHNESS)
-            .add(Attributes.MAX_ABSORPTION);
+        return AttributeSupplier.builder().add(Attributes.MAX_HEALTH).add(Attributes.KNOCKBACK_RESISTANCE).add(Attributes.MOVEMENT_SPEED).add(Attributes.ARMOR).add(Attributes.ARMOR_TOUGHNESS).add(Attributes.MAX_ABSORPTION);
     }
 
     @Override
-    protected void checkFallDamage(double y, boolean onGround, BlockState state, BlockPos pos) {
+    protected void checkFallDamage(double y, boolean flag, IBlockData onGround, BlockPos state) {
         if (!this.isInWater()) {
             this.updateInWaterStateAndDoWaterCurrentPushing();
         }
 
-        if (!this.level().isClientSide && onGround && this.fallDistance > 0.0F) {
+        if (!this.level().isClientSide && flag && this.fallDistance > 0.0F) {
             this.removeSoulSpeed();
             this.tryAddSoulSpeed();
         }
 
-        if (!this.level().isClientSide && this.fallDistance > 3.0F && onGround && !state.isAir()) {
-            double x = this.getX();
-            double y1 = this.getY();
-            double z = this.getZ();
-            BlockPos blockPos = this.blockPosition();
-            if (pos.getX() != blockPos.getX() || pos.getZ() != blockPos.getZ()) {
-                double d = x - (double)pos.getX() - 0.5;
-                double d1 = z - (double)pos.getZ() - 0.5;
-                double max = Math.max(Math.abs(d), Math.abs(d1));
-                x = (double)pos.getX() + 0.5 + d / max * 0.5;
-                z = (double)pos.getZ() + 0.5 + d1 / max * 0.5;
+        if (!this.level().isClientSide && this.fallDistance > 3.0F && flag && !onGround.isAir()) {
+            double d1 = this.getX();
+            double d2 = this.getY();
+            double d3 = this.getZ();
+            BlockPos blockposition1 = this.blockPosition();
+
+            if (state.getX() != blockposition1.getX() || state.getZ() != blockposition1.getZ()) {
+                double d4 = d1 - (double) state.getX() - 0.5D;
+                double d5 = d3 - (double) state.getZ() - 0.5D;
+                double d6 = Math.max(Math.abs(d4), Math.abs(d5));
+
+                d1 = (double) state.getX() + 0.5D + d4 / d6 * 0.5D;
+                d3 = (double) state.getZ() + 0.5D + d5 / d6 * 0.5D;
             }
 
-            float f = (float)Mth.ceil(this.fallDistance - 3.0F);
-            double min = Math.min((double)(0.2F + f / 15.0F), 2.5);
-            int i = (int)(150.0 * min);
-            ((ServerLevel)this.level()).sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, state), x, y1, z, i, 0.0, 0.0, 0.0, 0.15F);
+            float f = (float) Mth.ceil(this.fallDistance - 3.0F);
+            double d7 = Math.min((double) (0.2F + f / 15.0F), 2.5D);
+            int i = (int) (150.0D * d7);
+
+            // CraftBukkit start - visiblity api
+            if (this instanceof ServerPlayer) {
+                ((ServerLevel) this.level()).sendParticles((ServerPlayer) this, new BlockParticleOption(ParticleTypes.BLOCK, onGround), this.getX(), this.getY(), this.getZ(), i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, false);
+            } else {
+                ((ServerLevel) this.level()).sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, onGround), d1, d2, d3, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D);
+            }
+            // CraftBukkit end
         }
 
-        super.checkFallDamage(y, onGround, state, pos);
-        if (onGround) {
+        super.checkFallDamage(y, flag, onGround, state);
+        if (flag) {
             this.lastClimbablePos = Optional.empty();
         }
+
     }
 
     public final boolean canBreatheUnderwater() {
@@ -349,46 +396,39 @@
         }
 
         if (this.isAlive()) {
-            boolean flag = this instanceof Player;
+            boolean flag = this instanceof net.minecraft.world.entity.player.Player;
+
             if (!this.level().isClientSide) {
                 if (this.isInWall()) {
                     this.hurt(this.damageSources().inWall(), 1.0F);
                 } else if (flag && !this.level().getWorldBorder().isWithinBounds(this.getBoundingBox())) {
-                    double d = this.level().getWorldBorder().getDistanceToBorder(this) + this.level().getWorldBorder().getDamageSafeZone();
-                    if (d < 0.0) {
-                        double damagePerBlock = this.level().getWorldBorder().getDamagePerBlock();
-                        if (damagePerBlock > 0.0) {
-                            this.hurt(this.damageSources().outOfBorder(), (float)Math.max(1, Mth.floor(-d * damagePerBlock)));
+                    double d0 = this.level().getWorldBorder().getDistanceToBorder(this) + this.level().getWorldBorder().getDamageSafeZone();
+
+                    if (d0 < 0.0D) {
+                        double d1 = this.level().getWorldBorder().getDamagePerBlock();
+
+                        if (d1 > 0.0D) {
+                            this.hurt(this.damageSources().outOfBorder(), (float) Math.max(1, Mth.floor(-d0 * d1)));
                         }
                     }
                 }
             }
 
-            if (this.isEyeInFluid(FluidTags.WATER)
-                && !this.level().getBlockState(BlockPos.containing(this.getX(), this.getEyeY(), this.getZ())).is(Blocks.BUBBLE_COLUMN)) {
-                boolean flag1 = !this.canBreatheUnderwater()
-                    && !MobEffectUtil.hasWaterBreathing(this)
-                    && (!flag || !((Player)this).getAbilities().invulnerable);
+            if (this.isEyeInFluid(FluidTags.WATER) && !this.level().getBlockState(BlockPos.containing(this.getX(), this.getEyeY(), this.getZ())).is(Blocks.BUBBLE_COLUMN)) {
+                boolean flag1 = !this.canBreatheUnderwater() && !MobEffectUtil.hasWaterBreathing(this) && (!flag || !((net.minecraft.world.entity.player.Player) this).getAbilities().invulnerable);
+
                 if (flag1) {
                     this.setAirSupply(this.decreaseAirSupply(this.getAirSupply()));
                     if (this.getAirSupply() == -20) {
                         this.setAirSupply(0);
-                        Vec3 deltaMovement = this.getDeltaMovement();
+                        Vec3 vec3d = this.getDeltaMovement();
 
-                        for (int i = 0; i < 8; i++) {
-                            double d1 = this.random.nextDouble() - this.random.nextDouble();
+                        for (int i = 0; i < 8; ++i) {
                             double d2 = this.random.nextDouble() - this.random.nextDouble();
                             double d3 = this.random.nextDouble() - this.random.nextDouble();
-                            this.level()
-                                .addParticle(
-                                    ParticleTypes.BUBBLE,
-                                    this.getX() + d1,
-                                    this.getY() + d2,
-                                    this.getZ() + d3,
-                                    deltaMovement.x,
-                                    deltaMovement.y,
-                                    deltaMovement.z
-                                );
+                            double d4 = this.random.nextDouble() - this.random.nextDouble();
+
+                            this.level().addParticle(ParticleTypes.BUBBLE, this.getX() + d2, this.getY() + d3, this.getZ() + d4, vec3d.x, vec3d.y, vec3d.z);
                         }
 
                         this.hurt(this.damageSources().drown(), 2.0F);
@@ -403,10 +443,11 @@
             }
 
             if (!this.level().isClientSide) {
-                BlockPos blockPos = this.blockPosition();
-                if (!Objects.equal(this.lastPos, blockPos)) {
-                    this.lastPos = blockPos;
-                    this.onChangedBlock(blockPos);
+                BlockPos blockposition = this.blockPosition();
+
+                if (!Objects.equal(this.lastPos, blockposition)) {
+                    this.lastPos = blockposition;
+                    this.onChangedBlock(blockposition);
                 }
             }
         }
@@ -416,11 +457,11 @@
         }
 
         if (this.hurtTime > 0) {
-            this.hurtTime--;
+            --this.hurtTime;
         }
 
         if (this.invulnerableTime > 0 && !(this instanceof ServerPlayer)) {
-            this.invulnerableTime--;
+            --this.invulnerableTime;
         }
 
         if (this.isDeadOrDying() && this.level().shouldTickDeath(this)) {
@@ -428,7 +469,7 @@
         }
 
         if (this.lastHurtByPlayerTime > 0) {
-            this.lastHurtByPlayerTime--;
+            --this.lastHurtByPlayerTime;
         } else {
             this.lastHurtByPlayer = null;
         }
@@ -439,9 +480,9 @@
 
         if (this.lastHurtByMob != null) {
             if (!this.lastHurtByMob.isAlive()) {
-                this.setLastHurtByMob(null);
+                this.setLastHurtByMob((LivingEntity) null);
             } else if (this.tickCount - this.lastHurtByMobTimestamp > 100) {
-                this.setLastHurtByMob(null);
+                this.setLastHurtByMob((LivingEntity) null);
             }
         }
 
@@ -455,27 +496,15 @@
     }
 
     public boolean canSpawnSoulSpeedParticle() {
-        return this.tickCount % 5 == 0
-            && this.getDeltaMovement().x != 0.0
-            && this.getDeltaMovement().z != 0.0
-            && !this.isSpectator()
-            && EnchantmentHelper.hasSoulSpeed(this)
-            && this.onSoulSpeedBlock();
+        return this.tickCount % 5 == 0 && this.getDeltaMovement().x != 0.0D && this.getDeltaMovement().z != 0.0D && !this.isSpectator() && EnchantmentHelper.hasSoulSpeed(this) && this.onSoulSpeedBlock();
     }
 
     protected void spawnSoulSpeedParticle() {
-        Vec3 deltaMovement = this.getDeltaMovement();
-        this.level()
-            .addParticle(
-                ParticleTypes.SOUL,
-                this.getX() + (this.random.nextDouble() - 0.5) * (double)this.getBbWidth(),
-                this.getY() + 0.1,
-                this.getZ() + (this.random.nextDouble() - 0.5) * (double)this.getBbWidth(),
-                deltaMovement.x * -0.2,
-                0.1,
-                deltaMovement.z * -0.2
-            );
+        Vec3 vec3d = this.getDeltaMovement();
+
+        this.level().addParticle(ParticleTypes.SOUL, this.getX() + (this.random.nextDouble() - 0.5D) * (double) this.getBbWidth(), this.getY() + 0.1D, this.getZ() + (this.random.nextDouble() - 0.5D) * (double) this.getBbWidth(), vec3d.x * -0.2D, 0.1D, vec3d.z * -0.2D);
         float f = this.random.nextFloat() * 0.4F + this.random.nextFloat() > 0.9F ? 0.6F : 0.0F;
+
         this.playSound(SoundEvents.SOUL_ESCAPE, f, 0.6F + this.random.nextFloat() * 0.4F);
     }
 
@@ -488,74 +517,80 @@
         return this.onSoulSpeedBlock() && EnchantmentHelper.getEnchantmentLevel(Enchantments.SOUL_SPEED, this) > 0 ? 1.0F : super.getBlockSpeedFactor();
     }
 
-    protected boolean shouldRemoveSoulSpeed(BlockState state) {
+    protected boolean shouldRemoveSoulSpeed(IBlockData state) {
         return !state.isAir() || this.isFallFlying();
     }
 
     protected void removeSoulSpeed() {
-        AttributeInstance attribute = this.getAttribute(Attributes.MOVEMENT_SPEED);
-        if (attribute != null) {
-            if (attribute.getModifier(SPEED_MODIFIER_SOUL_SPEED_UUID) != null) {
-                attribute.removeModifier(SPEED_MODIFIER_SOUL_SPEED_UUID);
+        AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
+
+        if (attributemodifiable != null) {
+            if (attributemodifiable.getModifier(LivingEntity.SPEED_MODIFIER_SOUL_SPEED_UUID) != null) {
+                attributemodifiable.removeModifier(LivingEntity.SPEED_MODIFIER_SOUL_SPEED_UUID);
             }
+
         }
     }
 
     protected void tryAddSoulSpeed() {
         if (!this.getBlockStateOnLegacy().isAir()) {
-            int enchantmentLevel = EnchantmentHelper.getEnchantmentLevel(Enchantments.SOUL_SPEED, this);
-            if (enchantmentLevel > 0 && this.onSoulSpeedBlock()) {
-                AttributeInstance attribute = this.getAttribute(Attributes.MOVEMENT_SPEED);
-                if (attribute == null) {
+            int i = EnchantmentHelper.getEnchantmentLevel(Enchantments.SOUL_SPEED, this);
+
+            if (i > 0 && this.onSoulSpeedBlock()) {
+                AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
+
+                if (attributemodifiable == null) {
                     return;
                 }
 
-                attribute.addTransientModifier(
-                    new AttributeModifier(
-                        SPEED_MODIFIER_SOUL_SPEED_UUID,
-                        "Soul speed boost",
-                        (double)(0.03F * (1.0F + (float)enchantmentLevel * 0.35F)),
-                        AttributeModifier.Operation.ADDITION
-                    )
-                );
+                attributemodifiable.addTransientModifier(new AttributeModifier(LivingEntity.SPEED_MODIFIER_SOUL_SPEED_UUID, "Soul speed boost", (double) (0.03F * (1.0F + (float) i * 0.35F)), AttributeModifier.Operation.ADDITION));
                 if (this.getRandom().nextFloat() < 0.04F) {
-                    ItemStack itemBySlot = this.getItemBySlot(EquipmentSlot.FEET);
-                    itemBySlot.hurtAndBreak(1, this, entity -> entity.broadcastBreakEvent(EquipmentSlot.FEET));
+                    ItemStack itemstack = this.getItemBySlot(EquipmentSlot.FEET);
+
+                    itemstack.hurtAndBreak(1, this, (entityliving) -> {
+                        entityliving.broadcastBreakEvent(EquipmentSlot.FEET);
+                    });
                 }
             }
         }
+
     }
 
     protected void removeFrost() {
-        AttributeInstance attribute = this.getAttribute(Attributes.MOVEMENT_SPEED);
-        if (attribute != null) {
-            if (attribute.getModifier(SPEED_MODIFIER_POWDER_SNOW_UUID) != null) {
-                attribute.removeModifier(SPEED_MODIFIER_POWDER_SNOW_UUID);
+        AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
+
+        if (attributemodifiable != null) {
+            if (attributemodifiable.getModifier(LivingEntity.SPEED_MODIFIER_POWDER_SNOW_UUID) != null) {
+                attributemodifiable.removeModifier(LivingEntity.SPEED_MODIFIER_POWDER_SNOW_UUID);
             }
+
         }
     }
 
     protected void tryAddFrost() {
         if (!this.getBlockStateOnLegacy().isAir()) {
-            int ticksFrozen = this.getTicksFrozen();
-            if (ticksFrozen > 0) {
-                AttributeInstance attribute = this.getAttribute(Attributes.MOVEMENT_SPEED);
-                if (attribute == null) {
+            int i = this.getTicksFrozen();
+
+            if (i > 0) {
+                AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
+
+                if (attributemodifiable == null) {
                     return;
                 }
 
                 float f = -0.05F * this.getPercentFrozen();
-                attribute.addTransientModifier(
-                    new AttributeModifier(SPEED_MODIFIER_POWDER_SNOW_UUID, "Powder snow slow", (double)f, AttributeModifier.Operation.ADDITION)
-                );
+
+                attributemodifiable.addTransientModifier(new AttributeModifier(LivingEntity.SPEED_MODIFIER_POWDER_SNOW_UUID, "Powder snow slow", (double) f, AttributeModifier.Operation.ADDITION));
             }
         }
+
     }
 
     protected void onChangedBlock(BlockPos pos) {
-        int enchantmentLevel = EnchantmentHelper.getEnchantmentLevel(Enchantments.FROST_WALKER, this);
-        if (enchantmentLevel > 0) {
-            FrostWalkerEnchantment.onEntityMoved(this, this.level(), pos, enchantmentLevel);
+        int i = EnchantmentHelper.getEnchantmentLevel(Enchantments.FROST_WALKER, this);
+
+        if (i > 0) {
+            FrostWalkerEnchantment.onEntityMoved(this, this.level(), pos, i);
         }
 
         if (this.shouldRemoveSoulSpeed(this.getBlockStateOnLegacy())) {
@@ -578,11 +613,12 @@
     }
 
     protected void tickDeath() {
-        this.deathTime++;
+        ++this.deathTime;
         if (this.deathTime >= 20 && !this.level().isClientSide() && !this.isRemoved()) {
-            this.level().broadcastEntityEvent(this, (byte)60);
+            this.level().broadcastEntityEvent(this, (byte) 60);
             this.remove(Entity.RemovalReason.KILLED);
         }
+
     }
 
     public boolean shouldDropExperience() {
@@ -594,8 +630,9 @@
     }
 
     protected int decreaseAirSupply(int currentAir) {
-        int respiration = EnchantmentHelper.getRespiration(this);
-        return respiration > 0 && this.random.nextInt(respiration + 1) > 0 ? currentAir : currentAir - 1;
+        int j = EnchantmentHelper.getRespiration(this);
+
+        return j > 0 && this.random.nextInt(j + 1) > 0 ? currentAir : currentAir - 1;
     }
 
     protected int increaseAirSupply(int currentAir) {
@@ -628,7 +665,7 @@
         return this.lastHurtByMobTimestamp;
     }
 
-    public void setLastHurtByPlayer(@Nullable Player player) {
+    public void setLastHurtByPlayer(@Nullable net.minecraft.world.entity.player.Player player) {
         this.lastHurtByPlayer = player;
         this.lastHurtByPlayerTime = this.tickCount;
     }
@@ -649,7 +686,7 @@
 
     public void setLastHurtMob(Entity entity) {
         if (entity instanceof LivingEntity) {
-            this.lastHurtMob = (LivingEntity)entity;
+            this.lastHurtMob = (LivingEntity) entity;
         } else {
             this.lastHurtMob = null;
         }
@@ -678,18 +715,27 @@
     }
 
     public void onEquipItem(EquipmentSlot slot, ItemStack oldItem, ItemStack newItem) {
-        boolean flag = newItem.isEmpty() && oldItem.isEmpty();
-        if (!flag && !ItemStack.isSameItemSameTags(oldItem, newItem) && !this.firstTick) {
-            Equipable equipable = Equipable.get(newItem);
+        // CraftBukkit start
+        onEquipItem(slot, oldItem, newItem, false);
+    }
+
+    public void onEquipItem(EquipmentSlot enumitemslot, ItemStack itemstack, ItemStack itemstack1, boolean silent) {
+        // CraftBukkit end
+        boolean flag = itemstack1.isEmpty() && itemstack.isEmpty();
+
+        if (!flag && !ItemStack.isSameItemSameTags(itemstack, itemstack1) && !this.firstTick) {
+            Equipable equipable = Equipable.get(itemstack1);
+
             if (!this.level().isClientSide() && !this.isSpectator()) {
-                if (!this.isSilent() && equipable != null && equipable.getEquipmentSlot() == slot) {
-                    this.level().playSound(null, this.getX(), this.getY(), this.getZ(), equipable.getEquipSound(), this.getSoundSource(), 1.0F, 1.0F);
+                if (!this.isSilent() && equipable != null && equipable.getEquipmentSlot() == enumitemslot && !silent) { // CraftBukkit
+                    this.level().playSound((net.minecraft.world.entity.player.Player) null, this.getX(), this.getY(), this.getZ(), equipable.getEquipSound(), this.getSoundSource(), 1.0F, 1.0F);
                 }
 
-                if (this.doesEmitEquipEvent(slot)) {
+                if (this.doesEmitEquipEvent(enumitemslot)) {
                     this.gameEvent(equipable != null ? GameEvent.EQUIP : GameEvent.UNEQUIP);
                 }
             }
+
         }
     }
 
@@ -702,29 +748,37 @@
     @Override
     public void addAdditionalSaveData(CompoundTag compound) {
         compound.putFloat("Health", this.getHealth());
-        compound.putShort("HurtTime", (short)this.hurtTime);
+        compound.putShort("HurtTime", (short) this.hurtTime);
         compound.putInt("HurtByTimestamp", this.lastHurtByMobTimestamp);
-        compound.putShort("DeathTime", (short)this.deathTime);
+        compound.putShort("DeathTime", (short) this.deathTime);
         compound.putFloat("AbsorptionAmount", this.getAbsorptionAmount());
         compound.put("Attributes", this.getAttributes().save());
         if (!this.activeEffects.isEmpty()) {
-            ListTag list = new ListTag();
+            ListTag nbttaglist = new ListTag();
+            Iterator iterator = this.activeEffects.values().iterator();
 
-            for (MobEffectInstance mobEffectInstance : this.activeEffects.values()) {
-                list.add(mobEffectInstance.save(new CompoundTag()));
+            while (iterator.hasNext()) {
+                MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
+
+                nbttaglist.add(mobeffect.save(new CompoundTag()));
             }
 
-            compound.put("active_effects", list);
+            compound.put("active_effects", nbttaglist);
         }
 
         compound.putBoolean("FallFlying", this.isFallFlying());
-        this.getSleepingPos().ifPresent(pos -> {
-            compound.putInt("SleepingX", pos.getX());
-            compound.putInt("SleepingY", pos.getY());
-            compound.putInt("SleepingZ", pos.getZ());
+        this.getSleepingPos().ifPresent((blockposition) -> {
+            compound.putInt("SleepingX", blockposition.getX());
+            compound.putInt("SleepingY", blockposition.getY());
+            compound.putInt("SleepingZ", blockposition.getZ());
         });
-        DataResult<Tag> dataResult = this.brain.serializeStart(NbtOps.INSTANCE);
-        dataResult.resultOrPartial(LOGGER::error).ifPresent(nbt -> compound.put("Brain", nbt));
+        DataResult<Tag> dataresult = this.brain.serializeStart(NbtOps.INSTANCE);
+        Logger logger = LivingEntity.LOGGER;
+
+        java.util.Objects.requireNonNull(logger);
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+            compound.put("Brain", nbtbase);
+        });
     }
 
     @Override
@@ -735,17 +789,29 @@
         }
 
         if (compound.contains("active_effects", 9)) {
-            ListTag list = compound.getList("active_effects", 10);
+            ListTag nbttaglist = compound.getList("active_effects", 10);
 
-            for (int i = 0; i < list.size(); i++) {
-                CompoundTag compound1 = list.getCompound(i);
-                MobEffectInstance mobEffectInstance = MobEffectInstance.load(compound1);
-                if (mobEffectInstance != null) {
-                    this.activeEffects.put(mobEffectInstance.getEffect(), mobEffectInstance);
+            for (int i = 0; i < nbttaglist.size(); ++i) {
+                CompoundTag nbttagcompound1 = nbttaglist.getCompound(i);
+                MobEffectInstance mobeffect = MobEffectInstance.load(nbttagcompound1);
+
+                if (mobeffect != null) {
+                    this.activeEffects.put(mobeffect.getEffect(), mobeffect);
                 }
             }
         }
 
+        // CraftBukkit start
+        if (compound.contains("Bukkit.MaxHealth")) {
+            Tag nbtbase = compound.get("Bukkit.MaxHealth");
+            if (nbtbase.getId() == 5) {
+                this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(((FloatTag) nbtbase).getAsDouble());
+            } else if (nbtbase.getId() == 3) {
+                this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(((IntTag) nbtbase).getAsDouble());
+            }
+        }
+        // CraftBukkit end
+
         if (compound.contains("Health", 99)) {
             this.setHealth(compound.getFloat("Health"));
         }
@@ -754,11 +820,12 @@
         this.deathTime = compound.getShort("DeathTime");
         this.lastHurtByMobTimestamp = compound.getInt("HurtByTimestamp");
         if (compound.contains("Team", 8)) {
-            String string = compound.getString("Team");
-            PlayerTeam playerTeam = this.level().getScoreboard().getPlayerTeam(string);
-            boolean flag = playerTeam != null && this.level().getScoreboard().addPlayerToTeam(this.getStringUUID(), playerTeam);
+            String s = compound.getString("Team");
+            PlayerTeam scoreboardteam = this.level().getScoreboard().getPlayerTeam(s);
+            boolean flag = scoreboardteam != null && this.level().getScoreboard().addPlayerToTeam(this.getStringUUID(), scoreboardteam);
+
             if (!flag) {
-                LOGGER.warn("Unable to add mob to team \"{}\" (that team probably doesn't exist)", string);
+                LivingEntity.LOGGER.warn("Unable to add mob to team \"{}\" (that team probably doesn't exist)", s);
             }
         }
 
@@ -767,37 +834,83 @@
         }
 
         if (compound.contains("SleepingX", 99) && compound.contains("SleepingY", 99) && compound.contains("SleepingZ", 99)) {
-            BlockPos blockPos = new BlockPos(compound.getInt("SleepingX"), compound.getInt("SleepingY"), compound.getInt("SleepingZ"));
-            this.setSleepingPos(blockPos);
-            this.entityData.set(DATA_POSE, Pose.SLEEPING);
+            BlockPos blockposition = new BlockPos(compound.getInt("SleepingX"), compound.getInt("SleepingY"), compound.getInt("SleepingZ"));
+
+            this.setSleepingPos(blockposition);
+            this.entityData.set(LivingEntity.DATA_POSE, EntityPose.SLEEPING);
             if (!this.firstTick) {
-                this.setPosToBed(blockPos);
+                this.setPosToBed(blockposition);
             }
         }
 
         if (compound.contains("Brain", 10)) {
-            this.brain = this.makeBrain(new Dynamic<>(NbtOps.INSTANCE, compound.get("Brain")));
+            this.brain = this.makeBrain(new Dynamic(NbtOps.INSTANCE, compound.get("Brain")));
         }
+
     }
 
+    // CraftBukkit start
+    private boolean isTickingEffects = false;
+    private List<ProcessableEffect> effectsToProcess = Lists.newArrayList();
+
+    private static class ProcessableEffect {
+
+        private MobEffect type;
+        private MobEffectInstance effect;
+        private final EntityPotionEffectEvent.Cause cause;
+
+        private ProcessableEffect(MobEffectInstance effect, EntityPotionEffectEvent.Cause cause) {
+            this.effect = effect;
+            this.cause = cause;
+        }
+
+        private ProcessableEffect(MobEffect type, EntityPotionEffectEvent.Cause cause) {
+            this.type = type;
+            this.cause = cause;
+        }
+    }
+    // CraftBukkit end
+
     protected void tickEffects() {
-        Iterator<MobEffect> iterator = this.activeEffects.keySet().iterator();
+        Iterator iterator = this.activeEffects.keySet().iterator();
 
+        isTickingEffects = true; // CraftBukkit
         try {
             while (iterator.hasNext()) {
-                MobEffect mobEffect = iterator.next();
-                MobEffectInstance mobEffectInstance = this.activeEffects.get(mobEffect);
-                if (!mobEffectInstance.tick(this, () -> this.onEffectUpdated(mobEffectInstance, true, null))) {
+                MobEffect mobeffectlist = (MobEffect) iterator.next();
+                MobEffectInstance mobeffect = (MobEffectInstance) this.activeEffects.get(mobeffectlist);
+
+                if (!mobeffect.tick(this, () -> {
+                    this.onEffectUpdated(mobeffect, true, (Entity) null);
+                })) {
                     if (!this.level().isClientSide) {
+                        // CraftBukkit start
+                        EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffect, null, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.EXPIRATION);
+                        if (event.isCancelled()) {
+                            continue;
+                        }
+                        // CraftBukkit end
                         iterator.remove();
-                        this.onEffectRemoved(mobEffectInstance);
+                        this.onEffectRemoved(mobeffect);
                     }
-                } else if (mobEffectInstance.getDuration() % 600 == 0) {
-                    this.onEffectUpdated(mobEffectInstance, false, null);
+                } else if (mobeffect.getDuration() % 600 == 0) {
+                    this.onEffectUpdated(mobeffect, false, (Entity) null);
                 }
             }
-        } catch (ConcurrentModificationException var11) {
+        } catch (ConcurrentModificationException concurrentmodificationexception) {
+            ;
         }
+        // CraftBukkit start
+        isTickingEffects = false;
+        for (ProcessableEffect e : effectsToProcess) {
+            if (e.effect != null) {
+                addEffect(e.effect, e.cause);
+            } else {
+                removeEffect(e.type, e.cause);
+            }
+        }
+        effectsToProcess.clear();
+        // CraftBukkit end
 
         if (this.effectsDirty) {
             if (!this.level().isClientSide) {
@@ -808,10 +921,12 @@
             this.effectsDirty = false;
         }
 
-        int i = this.entityData.get(DATA_EFFECT_COLOR_ID);
-        boolean flag = this.entityData.get(DATA_EFFECT_AMBIENCE_ID);
+        int i = (Integer) this.entityData.get(LivingEntity.DATA_EFFECT_COLOR_ID);
+        boolean flag = (Boolean) this.entityData.get(LivingEntity.DATA_EFFECT_AMBIENCE_ID);
+
         if (i > 0) {
             boolean flag1;
+
             if (this.isInvisible()) {
                 flag1 = this.random.nextInt(15) == 0;
             } else {
@@ -823,21 +938,14 @@
             }
 
             if (flag1 && i > 0) {
-                double d = (double)(i >> 16 & 0xFF) / 255.0;
-                double d1 = (double)(i >> 8 & 0xFF) / 255.0;
-                double d2 = (double)(i >> 0 & 0xFF) / 255.0;
-                this.level()
-                    .addParticle(
-                        flag ? ParticleTypes.AMBIENT_ENTITY_EFFECT : ParticleTypes.ENTITY_EFFECT,
-                        this.getRandomX(0.5),
-                        this.getRandomY(),
-                        this.getRandomZ(0.5),
-                        d,
-                        d1,
-                        d2
-                    );
+                double d0 = (double) (i >> 16 & 255) / 255.0D;
+                double d1 = (double) (i >> 8 & 255) / 255.0D;
+                double d2 = (double) (i >> 0 & 255) / 255.0D;
+
+                this.level().addParticle(flag ? ParticleTypes.AMBIENT_ENTITY_EFFECT : ParticleTypes.ENTITY_EFFECT, this.getRandomX(0.5D), this.getRandomY(), this.getRandomZ(0.5D), d0, d1, d2);
             }
         }
+
     }
 
     protected void updateInvisibilityStatus() {
@@ -846,51 +954,54 @@
             this.setInvisible(false);
         } else {
             Collection<MobEffectInstance> collection = this.activeEffects.values();
-            this.entityData.set(DATA_EFFECT_AMBIENCE_ID, areAllEffectsAmbient(collection));
-            this.entityData.set(DATA_EFFECT_COLOR_ID, PotionUtils.getColor(collection));
+
+            this.entityData.set(LivingEntity.DATA_EFFECT_AMBIENCE_ID, areAllEffectsAmbient(collection));
+            this.entityData.set(LivingEntity.DATA_EFFECT_COLOR_ID, PotionUtils.getColor(collection));
             this.setInvisible(this.hasEffect(MobEffects.INVISIBILITY));
         }
+
     }
 
     private void updateGlowingStatus() {
-        boolean isCurrentlyGlowing = this.isCurrentlyGlowing();
-        if (this.getSharedFlag(6) != isCurrentlyGlowing) {
-            this.setSharedFlag(6, isCurrentlyGlowing);
+        boolean flag = this.isCurrentlyGlowing();
+
+        if (this.getSharedFlag(6) != flag) {
+            this.setSharedFlag(6, flag);
         }
+
     }
 
     public double getVisibilityPercent(@Nullable Entity lookingEntity) {
-        double d = 1.0;
+        double d0 = 1.0D;
+
         if (this.isDiscrete()) {
-            d *= 0.8;
+            d0 *= 0.8D;
         }
 
         if (this.isInvisible()) {
-            float armorCoverPercentage = this.getArmorCoverPercentage();
-            if (armorCoverPercentage < 0.1F) {
-                armorCoverPercentage = 0.1F;
+            float f = this.getArmorCoverPercentage();
+
+            if (f < 0.1F) {
+                f = 0.1F;
             }
 
-            d *= 0.7 * (double)armorCoverPercentage;
+            d0 *= 0.7D * (double) f;
         }
 
         if (lookingEntity != null) {
-            ItemStack itemBySlot = this.getItemBySlot(EquipmentSlot.HEAD);
-            EntityType<?> type = lookingEntity.getType();
-            if (type == EntityType.SKELETON && itemBySlot.is(Items.SKELETON_SKULL)
-                || type == EntityType.ZOMBIE && itemBySlot.is(Items.ZOMBIE_HEAD)
-                || type == EntityType.PIGLIN && itemBySlot.is(Items.PIGLIN_HEAD)
-                || type == EntityType.PIGLIN_BRUTE && itemBySlot.is(Items.PIGLIN_HEAD)
-                || type == EntityType.CREEPER && itemBySlot.is(Items.CREEPER_HEAD)) {
-                d *= 0.5;
+            ItemStack itemstack = this.getItemBySlot(EquipmentSlot.HEAD);
+            EntityType<?> entitytypes = lookingEntity.getType();
+
+            if (entitytypes == EntityType.SKELETON && itemstack.is(Items.SKELETON_SKULL) || entitytypes == EntityType.ZOMBIE && itemstack.is(Items.ZOMBIE_HEAD) || entitytypes == EntityType.PIGLIN && itemstack.is(Items.PIGLIN_HEAD) || entitytypes == EntityType.PIGLIN_BRUTE && itemstack.is(Items.PIGLIN_HEAD) || entitytypes == EntityType.CREEPER && itemstack.is(Items.CREEPER_HEAD)) {
+                d0 *= 0.5D;
             }
         }
 
-        return d;
+        return d0;
     }
 
     public boolean canAttack(LivingEntity target) {
-        return (!(target instanceof Player) || this.level().getDifficulty() != Difficulty.PEACEFUL) && target.canBeSeenAsEnemy();
+        return target instanceof net.minecraft.world.entity.player.Player && this.level().getDifficulty() == Difficulty.PEACEFUL ? false : target.canBeSeenAsEnemy();
     }
 
     public boolean canAttack(LivingEntity livingentity, TargetingConditions condition) {
@@ -906,29 +1017,49 @@
     }
 
     public static boolean areAllEffectsAmbient(Collection<MobEffectInstance> potionEffects) {
-        for (MobEffectInstance mobEffectInstance : potionEffects) {
-            if (mobEffectInstance.isVisible() && !mobEffectInstance.isAmbient()) {
-                return false;
+        Iterator iterator = potionEffects.iterator();
+
+        MobEffectInstance mobeffect;
+
+        do {
+            if (!iterator.hasNext()) {
+                return true;
             }
-        }
 
-        return true;
+            mobeffect = (MobEffectInstance) iterator.next();
+        } while (!mobeffect.isVisible() || mobeffect.isAmbient());
+
+        return false;
     }
 
     protected void removeEffectParticles() {
-        this.entityData.set(DATA_EFFECT_AMBIENCE_ID, false);
-        this.entityData.set(DATA_EFFECT_COLOR_ID, 0);
+        this.entityData.set(LivingEntity.DATA_EFFECT_AMBIENCE_ID, false);
+        this.entityData.set(LivingEntity.DATA_EFFECT_COLOR_ID, 0);
     }
 
+    // CraftBukkit start
     public boolean removeAllEffects() {
+        return removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+    }
+
+    public boolean removeAllEffects(EntityPotionEffectEvent.Cause cause) {
+        // CraftBukkit end
         if (this.level().isClientSide) {
             return false;
         } else {
             Iterator<MobEffectInstance> iterator = this.activeEffects.values().iterator();
 
             boolean flag;
+
             for (flag = false; iterator.hasNext(); flag = true) {
-                this.onEffectRemoved(iterator.next());
+                // CraftBukkit start
+                MobEffectInstance effect = (MobEffectInstance) iterator.next();
+                EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause, EntityPotionEffectEvent.Action.CLEARED);
+                if (event.isCancelled()) {
+                    continue;
+                }
+                this.onEffectRemoved(effect);
+                // CraftBukkit end
                 iterator.remove();
             }
 
@@ -950,37 +1081,69 @@
 
     @Nullable
     public MobEffectInstance getEffect(MobEffect effect) {
-        return this.activeEffects.get(effect);
+        return (MobEffectInstance) this.activeEffects.get(effect);
     }
 
     public final boolean addEffect(MobEffectInstance effectInstance) {
-        return this.addEffect(effectInstance, null);
+        return this.addEffect(effectInstance, (Entity) null);
     }
 
+    // CraftBukkit start
+    public boolean addEffect(MobEffectInstance mobeffect, EntityPotionEffectEvent.Cause cause) {
+        return this.addEffect(mobeffect, (Entity) null, cause);
+    }
+
     public boolean addEffect(MobEffectInstance effectInstance, @Nullable Entity entity) {
-        if (!this.canBeAffected(effectInstance)) {
+        return this.addEffect(effectInstance, entity, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+    }
+
+    public boolean addEffect(MobEffectInstance mobeffect, @Nullable Entity entity, EntityPotionEffectEvent.Cause cause) {
+        if (isTickingEffects) {
+            effectsToProcess.add(new ProcessableEffect(mobeffect, cause));
+            return true;
+        }
+        // CraftBukkit end
+
+        if (!this.canBeAffected(mobeffect)) {
             return false;
         } else {
-            MobEffectInstance mobEffectInstance = this.activeEffects.get(effectInstance.getEffect());
+            MobEffectInstance mobeffect1 = (MobEffectInstance) this.activeEffects.get(mobeffect.getEffect());
             boolean flag = false;
-            if (mobEffectInstance == null) {
-                this.activeEffects.put(effectInstance.getEffect(), effectInstance);
-                this.onEffectAdded(effectInstance, entity);
+
+            // CraftBukkit start
+            boolean override = false;
+            if (mobeffect1 != null) {
+                override = new MobEffectInstance(mobeffect1).update(mobeffect);
+            }
+
+            EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffect1, mobeffect, cause, override);
+            if (event.isCancelled()) {
+                return false;
+            }
+            // CraftBukkit end
+
+            if (mobeffect1 == null) {
+                this.activeEffects.put(mobeffect.getEffect(), mobeffect);
+                this.onEffectAdded(mobeffect, entity);
                 flag = true;
-            } else if (mobEffectInstance.update(effectInstance)) {
-                this.onEffectUpdated(mobEffectInstance, true, entity);
+                // CraftBukkit start
+            } else if (event.isOverride()) {
+                mobeffect1.update(mobeffect);
+                this.onEffectUpdated(mobeffect1, true, entity);
+                // CraftBukkit end
                 flag = true;
             }
 
-            effectInstance.onEffectStarted(this);
+            mobeffect.onEffectStarted(this);
             return flag;
         }
     }
 
     public boolean canBeAffected(MobEffectInstance effectInstance) {
-        if (this.getMobType() == MobType.UNDEAD) {
-            MobEffect effect = effectInstance.getEffect();
-            if (effect == MobEffects.REGENERATION || effect == MobEffects.POISON) {
+        if (this.getMobType() == EnumMonsterType.UNDEAD) {
+            MobEffect mobeffectlist = effectInstance.getEffect();
+
+            if (mobeffectlist == MobEffects.REGENERATION || mobeffectlist == MobEffects.POISON) {
                 return false;
             }
         }
@@ -990,28 +1153,57 @@
 
     public void forceAddEffect(MobEffectInstance instance, @Nullable Entity entity) {
         if (this.canBeAffected(instance)) {
-            MobEffectInstance mobEffectInstance = this.activeEffects.put(instance.getEffect(), instance);
-            if (mobEffectInstance == null) {
+            MobEffectInstance mobeffect1 = (MobEffectInstance) this.activeEffects.put(instance.getEffect(), instance);
+
+            if (mobeffect1 == null) {
                 this.onEffectAdded(instance, entity);
             } else {
                 this.onEffectUpdated(instance, true, entity);
             }
+
         }
     }
 
     public boolean isInvertedHealAndHarm() {
-        return this.getMobType() == MobType.UNDEAD;
+        return this.getMobType() == EnumMonsterType.UNDEAD;
     }
 
+    // CraftBukkit start
     @Nullable
     public MobEffectInstance removeEffectNoUpdate(@Nullable MobEffect effect) {
-        return this.activeEffects.remove(effect);
+        return c(effect, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
     }
 
+    @Nullable
+    public MobEffectInstance c(@Nullable MobEffect mobeffectlist, EntityPotionEffectEvent.Cause cause) {
+        if (isTickingEffects) {
+            effectsToProcess.add(new ProcessableEffect(mobeffectlist, cause));
+            return null;
+        }
+
+        MobEffectInstance effect = this.activeEffects.get(mobeffectlist);
+        if (effect == null) {
+            return null;
+        }
+
+        EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause);
+        if (event.isCancelled()) {
+            return null;
+        }
+
+        return (MobEffectInstance) this.activeEffects.remove(mobeffectlist);
+    }
+
     public boolean removeEffect(MobEffect effect) {
-        MobEffectInstance mobEffectInstance = this.removeEffectNoUpdate(effect);
-        if (mobEffectInstance != null) {
-            this.onEffectRemoved(mobEffectInstance);
+        return removeEffect(effect, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+    }
+
+    public boolean removeEffect(MobEffect mobeffectlist, EntityPotionEffectEvent.Cause cause) {
+        MobEffectInstance mobeffect = this.c(mobeffectlist, cause);
+        // CraftBukkit end
+
+        if (mobeffect != null) {
+            this.onEffectRemoved(mobeffect);
             return true;
         } else {
             return false;
@@ -1024,28 +1216,38 @@
             effectInstance.getEffect().addAttributeModifiers(this.getAttributes(), effectInstance.getAmplifier());
             this.sendEffectToPassengers(effectInstance);
         }
+
     }
 
     public void sendEffectToPassengers(MobEffectInstance effectInstance) {
-        for (Entity entity : this.getPassengers()) {
-            if (entity instanceof ServerPlayer serverPlayer) {
-                serverPlayer.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), effectInstance));
+        Iterator iterator = this.getPassengers().iterator();
+
+        while (iterator.hasNext()) {
+            Entity entity = (Entity) iterator.next();
+
+            if (entity instanceof ServerPlayer) {
+                ServerPlayer entityplayer = (ServerPlayer) entity;
+
+                entityplayer.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), effectInstance));
             }
         }
+
     }
 
     protected void onEffectUpdated(MobEffectInstance effectInstance, boolean forced, @Nullable Entity entity) {
         this.effectsDirty = true;
         if (forced && !this.level().isClientSide) {
-            MobEffect effect = effectInstance.getEffect();
-            effect.removeAttributeModifiers(this.getAttributes());
-            effect.addAttributeModifiers(this.getAttributes(), effectInstance.getAmplifier());
+            MobEffect mobeffectlist = effectInstance.getEffect();
+
+            mobeffectlist.removeAttributeModifiers(this.getAttributes());
+            mobeffectlist.addAttributeModifiers(this.getAttributes(), effectInstance.getAmplifier());
             this.refreshDirtyAttributes();
         }
 
         if (!this.level().isClientSide) {
             this.sendEffectToPassengers(effectInstance);
         }
+
     }
 
     protected void onEffectRemoved(MobEffectInstance effectInstance) {
@@ -1053,48 +1255,99 @@
         if (!this.level().isClientSide) {
             effectInstance.getEffect().removeAttributeModifiers(this.getAttributes());
             this.refreshDirtyAttributes();
+            Iterator iterator = this.getPassengers().iterator();
 
-            for (Entity entity : this.getPassengers()) {
-                if (entity instanceof ServerPlayer serverPlayer) {
-                    serverPlayer.connection.send(new ClientboundRemoveMobEffectPacket(this.getId(), effectInstance.getEffect()));
+            while (iterator.hasNext()) {
+                Entity entity = (Entity) iterator.next();
+
+                if (entity instanceof ServerPlayer) {
+                    ServerPlayer entityplayer = (ServerPlayer) entity;
+
+                    entityplayer.connection.send(new ClientboundRemoveMobEffectPacket(this.getId(), effectInstance.getEffect()));
                 }
             }
         }
+
     }
 
     private void refreshDirtyAttributes() {
-        for (AttributeInstance attributeInstance : this.getAttributes().getDirtyAttributes()) {
-            this.onAttributeUpdated(attributeInstance.getAttribute());
+        Iterator iterator = this.getAttributes().getDirtyAttributes().iterator();
+
+        while (iterator.hasNext()) {
+            AttributeInstance attributemodifiable = (AttributeInstance) iterator.next();
+
+            this.onAttributeUpdated(attributemodifiable.getAttribute());
         }
+
     }
 
-    private void onAttributeUpdated(Attribute attribute) {
-        if (attribute == Attributes.MAX_HEALTH) {
-            float maxHealth = this.getMaxHealth();
-            if (this.getHealth() > maxHealth) {
-                this.setHealth(maxHealth);
+    private void onAttributeUpdated(Attribute attributebase) {
+        float f;
+
+        if (attributebase == Attributes.MAX_HEALTH) {
+            f = this.getMaxHealth();
+            if (this.getHealth() > f) {
+                this.setHealth(f);
             }
-        } else if (attribute == Attributes.MAX_ABSORPTION) {
-            float maxHealth = this.getMaxAbsorption();
-            if (this.getAbsorptionAmount() > maxHealth) {
-                this.setAbsorptionAmount(maxHealth);
+        } else if (attributebase == Attributes.MAX_ABSORPTION) {
+            f = this.getMaxAbsorption();
+            if (this.getAbsorptionAmount() > f) {
+                this.setAbsorptionAmount(f);
             }
         }
+
     }
 
+    // CraftBukkit start - Delegate so we can handle providing a reason for health being regained
     public void heal(float healAmount) {
-        float health = this.getHealth();
-        if (health > 0.0F) {
-            this.setHealth(health + healAmount);
+        heal(healAmount, EntityRegainHealthEvent.RegainReason.CUSTOM);
+    }
+
+    public void heal(float f, EntityRegainHealthEvent.RegainReason regainReason) {
+        float f1 = this.getHealth();
+
+        if (f1 > 0.0F) {
+            EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), f, regainReason);
+            // Suppress during worldgen
+            if (this.valid) {
+                this.level().getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (!event.isCancelled()) {
+                this.setHealth((float) (this.getHealth() + event.getAmount()));
+            }
+            // CraftBukkit end
         }
+
     }
 
     public float getHealth() {
-        return this.entityData.get(DATA_HEALTH_ID);
+        // CraftBukkit start - Use unscaled health
+        if (this instanceof ServerPlayer) {
+            return (float) ((ServerPlayer) this).getBukkitEntity().getHealth();
+        }
+        // CraftBukkit end
+        return (Float) this.entityData.get(LivingEntity.DATA_HEALTH_ID);
     }
 
     public void setHealth(float health) {
-        this.entityData.set(DATA_HEALTH_ID, Mth.clamp(health, 0.0F, this.getMaxHealth()));
+        // CraftBukkit start - Handle scaled health
+        if (this instanceof ServerPlayer) {
+            org.bukkit.craftbukkit.entity.CraftPlayer player = ((ServerPlayer) this).getBukkitEntity();
+            // Squeeze
+            if (health < 0.0F) {
+                player.setRealHealth(0.0D);
+            } else if (health > player.getMaxHealth()) {
+                player.setRealHealth(player.getMaxHealth());
+            } else {
+                player.setRealHealth(health);
+            }
+
+            player.updateScaledHealth(false);
+            return;
+        }
+        // CraftBukkit end
+        this.entityData.set(LivingEntity.DATA_HEALTH_ID, Mth.clamp(health, 0.0F, this.getMaxHealth()));
     }
 
     public boolean isDeadOrDying() {
@@ -1107,7 +1360,7 @@
             return false;
         } else if (this.level().isClientSide) {
             return false;
-        } else if (this.isDeadOrDying()) {
+        } else if (this.isRemoved() || this.dead || this.getHealth() <= 0.0F) { // CraftBukkit - Don't allow entities that got set to dead/killed elsewhere to get damaged and die
             return false;
         } else if (source.is(DamageTypeTags.IS_FIRE) && this.hasEffect(MobEffects.FIRE_RESISTANCE)) {
             return false;
@@ -1117,15 +1370,23 @@
             }
 
             this.noActionTime = 0;
-            float f = amount;
-            boolean flag = false;
-            float f1 = 0.0F;
-            if (amount > 0.0F && this.isDamageSourceBlocked(source)) {
+            float f1 = amount;
+            boolean flag = amount > 0.0F && this.isDamageSourceBlocked(source); // Copied from below
+            float f2 = 0.0F;
+
+            // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+            if (false && amount > 0.0F && this.isDamageSourceBlocked(source)) {
                 this.hurtCurrentlyUsedShield(amount);
-                f1 = amount;
+                f2 = amount;
                 amount = 0.0F;
-                if (!source.is(DamageTypeTags.IS_PROJECTILE) && source.getDirectEntity() instanceof LivingEntity livingEntity) {
-                    this.blockUsingShield(livingEntity);
+                if (!source.is(DamageTypeTags.IS_PROJECTILE)) {
+                    Entity entity = source.getDirectEntity();
+
+                    if (entity instanceof LivingEntity) {
+                        LivingEntity entityliving = (LivingEntity) entity;
+
+                        this.blockUsingShield(entityliving);
+                    }
                 }
 
                 flag = true;
@@ -1137,49 +1398,75 @@
 
             this.walkAnimation.setSpeed(1.5F);
             boolean flag1 = true;
-            if ((float)this.invulnerableTime > 10.0F && !source.is(DamageTypeTags.BYPASSES_COOLDOWN)) {
+
+            if ((float) this.invulnerableTime > (float) this.invulnerableDuration / 2.0F && !source.is(DamageTypeTags.BYPASSES_COOLDOWN)) { // CraftBukkit - restore use of maxNoDamageTicks
                 if (amount <= this.lastHurt) {
                     return false;
                 }
 
-                this.actuallyHurt(source, amount - this.lastHurt);
+                // CraftBukkit start
+                if (!this.damageEntity0(source, amount - this.lastHurt)) {
+                    return false;
+                }
+                // CraftBukkit end
                 this.lastHurt = amount;
                 flag1 = false;
             } else {
+                // CraftBukkit start
+                if (!this.damageEntity0(source, amount)) {
+                    return false;
+                }
                 this.lastHurt = amount;
-                this.invulnerableTime = 20;
-                this.actuallyHurt(source, amount);
+                this.invulnerableTime = this.invulnerableDuration; // CraftBukkit - restore use of maxNoDamageTicks
+                // this.damageEntity0(damagesource, f);
+                // CraftBukkit end
                 this.hurtDuration = 10;
                 this.hurtTime = this.hurtDuration;
             }
 
-            if (source.is(DamageTypeTags.DAMAGES_HELMET) && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+            // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+            if (false && source.is(DamageTypeTags.DAMAGES_HELMET) && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
                 this.hurtHelmet(source, amount);
                 amount *= 0.75F;
             }
 
-            Entity entity = source.getEntity();
-            if (entity != null) {
-                if (entity instanceof LivingEntity livingEntity1 && !source.is(DamageTypeTags.NO_ANGER)) {
-                    this.setLastHurtByMob(livingEntity1);
+            Entity entity1 = source.getEntity();
+
+            if (entity1 != null) {
+                if (entity1 instanceof LivingEntity) {
+                    LivingEntity entityliving1 = (LivingEntity) entity1;
+
+                    if (!source.is(DamageTypeTags.NO_ANGER)) {
+                        this.setLastHurtByMob(entityliving1);
+                    }
                 }
 
-                if (entity instanceof Player player) {
+                if (entity1 instanceof net.minecraft.world.entity.player.Player) {
+                    net.minecraft.world.entity.player.Player entityhuman = (net.minecraft.world.entity.player.Player) entity1;
+
                     this.lastHurtByPlayerTime = 100;
-                    this.lastHurtByPlayer = player;
-                } else if (entity instanceof Wolf wolf && wolf.isTame()) {
-                    this.lastHurtByPlayerTime = 100;
-                    if (wolf.getOwner() instanceof Player player1) {
-                        this.lastHurtByPlayer = player1;
-                    } else {
-                        this.lastHurtByPlayer = null;
+                    this.lastHurtByPlayer = entityhuman;
+                } else if (entity1 instanceof Wolf) {
+                    Wolf entitywolf = (Wolf) entity1;
+
+                    if (entitywolf.isTame()) {
+                        this.lastHurtByPlayerTime = 100;
+                        LivingEntity entityliving2 = entitywolf.getOwner();
+
+                        if (entityliving2 instanceof net.minecraft.world.entity.player.Player) {
+                            net.minecraft.world.entity.player.Player entityhuman1 = (net.minecraft.world.entity.player.Player) entityliving2;
+
+                            this.lastHurtByPlayer = entityhuman1;
+                        } else {
+                            this.lastHurtByPlayer = null;
+                        }
                     }
                 }
             }
 
             if (flag1) {
                 if (flag) {
-                    this.level().broadcastEntityEvent(this, (byte)29);
+                    this.level().broadcastEntityEvent(this, (byte) 29);
                 } else {
                     this.level().broadcastDamageEvent(this, source);
                 }
@@ -1188,26 +1475,28 @@
                     this.markHurt();
                 }
 
-                if (entity != null && !source.is(DamageTypeTags.NO_KNOCKBACK)) {
-                    double d = entity.getX() - this.getX();
+                if (entity1 != null && !source.is(DamageTypeTags.NO_KNOCKBACK)) {
+                    double d0 = entity1.getX() - this.getX();
 
                     double d1;
-                    for (d1 = entity.getZ() - this.getZ(); d * d + d1 * d1 < 1.0E-4; d1 = (Math.random() - Math.random()) * 0.01) {
-                        d = (Math.random() - Math.random()) * 0.01;
+
+                    for (d1 = entity1.getZ() - this.getZ(); d0 * d0 + d1 * d1 < 1.0E-4D; d1 = (Math.random() - Math.random()) * 0.01D) {
+                        d0 = (Math.random() - Math.random()) * 0.01D;
                     }
 
-                    this.knockback(0.4F, d, d1);
+                    this.knockback(0.4000000059604645D, d0, d1);
                     if (!flag) {
-                        this.indicateDamage(d, d1);
+                        this.indicateDamage(d0, d1);
                     }
                 }
             }
 
             if (this.isDeadOrDying()) {
                 if (!this.checkTotemDeathProtection(source)) {
-                    SoundEvent deathSound = this.getDeathSound();
-                    if (flag1 && deathSound != null) {
-                        this.playSound(deathSound, this.getSoundVolume(), this.getVoicePitch());
+                    SoundEvent soundeffect = this.getDeathSound();
+
+                    if (flag1 && soundeffect != null) {
+                        this.playSound(soundeffect, this.getSoundVolume(), this.getVoicePitch());
                     }
 
                     this.die(source);
@@ -1217,20 +1506,21 @@
             }
 
             boolean flag2 = !flag || amount > 0.0F;
+
             if (flag2) {
                 this.lastDamageSource = source;
                 this.lastDamageStamp = this.level().getGameTime();
             }
 
             if (this instanceof ServerPlayer) {
-                CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer)this, source, f, amount, flag);
-                if (f1 > 0.0F && f1 < 3.4028235E37F) {
-                    ((ServerPlayer)this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(f1 * 10.0F));
+                CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer) this, source, f1, amount, flag);
+                if (f2 > 0.0F && f2 < 3.4028235E37F) {
+                    ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(f2 * 10.0F));
                 }
             }
 
-            if (entity instanceof ServerPlayer) {
-                CriteriaTriggers.PLAYER_HURT_ENTITY.trigger((ServerPlayer)entity, this, source, f, amount, flag);
+            if (entity1 instanceof ServerPlayer) {
+                CriteriaTriggers.PLAYER_HURT_ENTITY.trigger((ServerPlayer) entity1, this, source, f1, amount, flag);
             }
 
             return flag2;
@@ -1242,40 +1532,61 @@
     }
 
     protected void blockedByShield(LivingEntity defender) {
-        defender.knockback(0.5, defender.getX() - this.getX(), defender.getZ() - this.getZ());
+        defender.knockback(0.5D, defender.getX() - this.getX(), defender.getZ() - this.getZ());
     }
 
     private boolean checkTotemDeathProtection(DamageSource damageSource) {
         if (damageSource.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
             return false;
         } else {
-            ItemStack itemStack = null;
+            ItemStack itemstack = null;
+            EnumHand[] aenumhand = EnumHand.values();
+            int i = aenumhand.length;
 
-            for (InteractionHand interactionHand : InteractionHand.values()) {
-                ItemStack itemInHand = this.getItemInHand(interactionHand);
-                if (itemInHand.is(Items.TOTEM_OF_UNDYING)) {
-                    itemStack = itemInHand.copy();
-                    itemInHand.shrink(1);
+            // CraftBukkit start
+            EnumHand hand = null;
+            ItemStack itemstack1 = ItemStack.EMPTY;
+            for (int j = 0; j < i; ++j) {
+                EnumHand enumhand = aenumhand[j];
+                itemstack1 = this.getItemInHand(enumhand);
+
+                if (itemstack1.is(Items.TOTEM_OF_UNDYING)) {
+                    hand = enumhand; // CraftBukkit
+                    itemstack = itemstack1.copy();
+                    // itemstack1.subtract(1); // CraftBukkit
                     break;
                 }
             }
 
-            if (itemStack != null) {
-                if (this instanceof ServerPlayer serverPlayer) {
-                    serverPlayer.awardStat(Stats.ITEM_USED.get(Items.TOTEM_OF_UNDYING));
-                    CriteriaTriggers.USED_TOTEM.trigger(serverPlayer, itemStack);
+            org.bukkit.inventory.EquipmentSlot handSlot = (hand != null) ? org.bukkit.craftbukkit.CraftEquipmentSlot.getHand(hand) : null;
+            EntityResurrectEvent event = new EntityResurrectEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity(), handSlot);
+            event.setCancelled(itemstack == null);
+            this.level().getCraftServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled()) {
+                if (!itemstack1.isEmpty()) {
+                    itemstack1.shrink(1);
+                }
+                if (itemstack != null && this instanceof ServerPlayer) {
+                    // CraftBukkit end
+                    ServerPlayer entityplayer = (ServerPlayer) this;
+
+                    entityplayer.awardStat(Stats.ITEM_USED.get(Items.TOTEM_OF_UNDYING));
+                    CriteriaTriggers.USED_TOTEM.trigger(entityplayer, itemstack);
                     this.gameEvent(GameEvent.ITEM_INTERACT_FINISH);
                 }
 
                 this.setHealth(1.0F);
-                this.removeAllEffects();
-                this.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 900, 1));
-                this.addEffect(new MobEffectInstance(MobEffects.ABSORPTION, 100, 1));
-                this.addEffect(new MobEffectInstance(MobEffects.FIRE_RESISTANCE, 800, 0));
-                this.level().broadcastEntityEvent(this, (byte)35);
+                // CraftBukkit start
+                this.removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+                this.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 900, 1), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+                this.addEffect(new MobEffectInstance(MobEffects.ABSORPTION, 100, 1), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+                this.addEffect(new MobEffectInstance(MobEffects.FIRE_RESISTANCE, 800, 0), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+                // CraftBukkit end
+                this.level().broadcastEntityEvent(this, (byte) 35);
             }
 
-            return itemStack != null;
+            return !event.isCancelled();
         }
     }
 
@@ -1289,26 +1600,35 @@
     }
 
     protected void playHurtSound(DamageSource source) {
-        SoundEvent hurtSound = this.getHurtSound(source);
-        if (hurtSound != null) {
-            this.playSound(hurtSound, this.getSoundVolume(), this.getVoicePitch());
+        SoundEvent soundeffect = this.getHurtSound(source);
+
+        if (soundeffect != null) {
+            this.playSound(soundeffect, this.getSoundVolume(), this.getVoicePitch());
         }
+
     }
 
     public boolean isDamageSourceBlocked(DamageSource damageSource) {
-        Entity directEntity = damageSource.getDirectEntity();
+        Entity entity = damageSource.getDirectEntity();
         boolean flag = false;
-        if (directEntity instanceof AbstractArrow abstractArrow && abstractArrow.getPierceLevel() > 0) {
-            flag = true;
+
+        if (entity instanceof AbstractArrow) {
+            AbstractArrow entityarrow = (AbstractArrow) entity;
+
+            if (entityarrow.getPierceLevel() > 0) {
+                flag = true;
+            }
         }
 
         if (!damageSource.is(DamageTypeTags.BYPASSES_SHIELD) && this.isBlocking() && !flag) {
-            Vec3 sourcePosition = damageSource.getSourcePosition();
-            if (sourcePosition != null) {
-                Vec3 vec3 = this.calculateViewVector(0.0F, this.getYHeadRot());
-                Vec3 vec31 = sourcePosition.vectorTo(this.position());
-                vec31 = new Vec3(vec31.x, 0.0, vec31.z).normalize();
-                return vec31.dot(vec3) < 0.0;
+            Vec3 vec3d = damageSource.getSourcePosition();
+
+            if (vec3d != null) {
+                Vec3 vec3d1 = this.calculateViewVector(0.0F, this.getYHeadRot());
+                Vec3 vec3d2 = vec3d.vectorTo(this.position());
+
+                vec3d2 = (new Vec3(vec3d2.x, 0.0D, vec3d2.z)).normalize();
+                return vec3d2.dot(vec3d1) < 0.0D;
             }
         }
 
@@ -1318,29 +1638,21 @@
     private void breakItem(ItemStack stack) {
         if (!stack.isEmpty()) {
             if (!this.isSilent()) {
-                this.level()
-                    .playLocalSound(
-                        this.getX(),
-                        this.getY(),
-                        this.getZ(),
-                        SoundEvents.ITEM_BREAK,
-                        this.getSoundSource(),
-                        0.8F,
-                        0.8F + this.level().random.nextFloat() * 0.4F,
-                        false
-                    );
+                this.level().playLocalSound(this.getX(), this.getY(), this.getZ(), SoundEvents.ITEM_BREAK, this.getSoundSource(), 0.8F, 0.8F + this.level().random.nextFloat() * 0.4F, false);
             }
 
             this.spawnItemParticles(stack, 5);
         }
+
     }
 
     public void die(DamageSource damageSource) {
         if (!this.isRemoved() && !this.dead) {
             Entity entity = damageSource.getEntity();
-            LivingEntity killCredit = this.getKillCredit();
-            if (this.deathScore >= 0 && killCredit != null) {
-                killCredit.awardKillScore(this, this.deathScore, damageSource);
+            LivingEntity entityliving = this.getKillCredit();
+
+            if (this.deathScore >= 0 && entityliving != null) {
+                entityliving.awardKillScore(this, this.deathScore, damageSource);
             }
 
             if (this.isSleeping()) {
@@ -1348,82 +1660,113 @@
             }
 
             if (!this.level().isClientSide && this.hasCustomName()) {
-                LOGGER.info("Named entity {} died: {}", this, this.getCombatTracker().getDeathMessage().getString());
+                LivingEntity.LOGGER.info("Named entity {} died: {}", this, this.getCombatTracker().getDeathMessage().getString());
             }
 
             this.dead = true;
             this.getCombatTracker().recheckStatus();
-            if (this.level() instanceof ServerLevel serverLevel) {
-                if (entity == null || entity.killedEntity(serverLevel, this)) {
+            Level world = this.level();
+
+            if (world instanceof ServerLevel) {
+                ServerLevel worldserver = (ServerLevel) world;
+
+                if (entity == null || entity.killedEntity(worldserver, this)) {
                     this.gameEvent(GameEvent.ENTITY_DIE);
                     this.dropAllDeathLoot(damageSource);
-                    this.createWitherRose(killCredit);
+                    this.createWitherRose(entityliving);
                 }
 
-                this.level().broadcastEntityEvent(this, (byte)3);
+                this.level().broadcastEntityEvent(this, (byte) 3);
             }
 
-            this.setPose(Pose.DYING);
+            this.setPose(EntityPose.DYING);
         }
     }
 
     protected void createWitherRose(@Nullable LivingEntity entitySource) {
         if (!this.level().isClientSide) {
             boolean flag = false;
+
             if (entitySource instanceof WitherBoss) {
                 if (this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
-                    BlockPos blockPos = this.blockPosition();
-                    BlockState blockState = Blocks.WITHER_ROSE.defaultBlockState();
-                    if (this.level().getBlockState(blockPos).isAir() && blockState.canSurvive(this.level(), blockPos)) {
-                        this.level().setBlock(blockPos, blockState, 3);
-                        flag = true;
+                    BlockPos blockposition = this.blockPosition();
+                    IBlockData iblockdata = Blocks.WITHER_ROSE.defaultBlockState();
+
+                    if (this.level().getBlockState(blockposition).isAir() && iblockdata.canSurvive(this.level(), blockposition)) {
+                        // CraftBukkit start - call EntityBlockFormEvent for Wither Rose
+                        flag = org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this.level(), blockposition, iblockdata, 3, this);
+                        // CraftBukkit end
                     }
                 }
 
                 if (!flag) {
-                    ItemEntity itemEntity = new ItemEntity(this.level(), this.getX(), this.getY(), this.getZ(), new ItemStack(Items.WITHER_ROSE));
-                    this.level().addFreshEntity(itemEntity);
+                    ItemEntity entityitem = new ItemEntity(this.level(), this.getX(), this.getY(), this.getZ(), new ItemStack(Items.WITHER_ROSE));
+
+                    // CraftBukkit start
+                    org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+                    CraftEventFactory.callEvent(event);
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
+                    this.level().addFreshEntity(entityitem);
                 }
             }
+
         }
     }
 
     protected void dropAllDeathLoot(DamageSource damageSource) {
         Entity entity = damageSource.getEntity();
-        int mobLooting;
-        if (entity instanceof Player) {
-            mobLooting = EnchantmentHelper.getMobLooting((LivingEntity)entity);
+        int i;
+
+        if (entity instanceof net.minecraft.world.entity.player.Player) {
+            i = EnchantmentHelper.getMobLooting((LivingEntity) entity);
         } else {
-            mobLooting = 0;
+            i = 0;
         }
 
         boolean flag = this.lastHurtByPlayerTime > 0;
+
+        this.dropEquipment(); // CraftBukkit - from below
         if (this.shouldDropLoot() && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
             this.dropFromLootTable(damageSource, flag);
-            this.dropCustomDeathLoot(damageSource, mobLooting, flag);
+            this.dropCustomDeathLoot(damageSource, i, flag);
         }
+        // CraftBukkit start - Call death event
+        CraftEventFactory.callEntityDeathEvent(this, this.drops);
+        this.drops = new ArrayList<>();
+        // CraftBukkit end
 
-        this.dropEquipment();
+        // this.dropInventory();// CraftBukkit - moved up
         this.dropExperience();
     }
 
-    protected void dropEquipment() {
+    protected void dropEquipment() {}
+
+    // CraftBukkit start
+    public int getExpReward() {
+        if (this.level() instanceof ServerLevel && !this.wasExperienceConsumed() && (this.isAlwaysExperienceDropper() || this.lastHurtByPlayerTime > 0 && this.shouldDropExperience() && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT))) {
+            int i = this.getExperienceReward();
+            return i;
+        } else {
+            return 0;
+        }
     }
+    // CraftBukkit end
 
     protected void dropExperience() {
-        if (this.level() instanceof ServerLevel
-            && !this.wasExperienceConsumed()
-            && (
-                this.isAlwaysExperienceDropper()
-                    || this.lastHurtByPlayerTime > 0 && this.shouldDropExperience() && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)
-            )) {
-            ExperienceOrb.award((ServerLevel)this.level(), this.position(), this.getExperienceReward());
+        // CraftBukkit start - Update getExpReward() above if the removed if() changes!
+        if (true && !(this instanceof net.minecraft.world.entity.boss.enderdragon.EnderDragon)) { // CraftBukkit - SPIGOT-2420: Special case ender dragon will drop the xp over time
+            ExperienceOrb.award((ServerLevel) this.level(), this.position(), this.expToDrop);
+            this.expToDrop = 0;
         }
-    }
+        // CraftBukkit end
 
-    protected void dropCustomDeathLoot(DamageSource damageSource, int looting, boolean hitByPlayer) {
     }
 
+    protected void dropCustomDeathLoot(DamageSource damageSource, int looting, boolean hitByPlayer) {}
+
     public ResourceLocation getLootTable() {
         return this.getType().getDefaultLootTable();
     }
@@ -1433,36 +1776,31 @@
     }
 
     protected void dropFromLootTable(DamageSource damageSource, boolean hitByPlayer) {
-        ResourceLocation lootTable = this.getLootTable();
-        LootTable lootTable1 = this.level().getServer().getLootData().getLootTable(lootTable);
-        LootParams.Builder builder = new LootParams.Builder((ServerLevel)this.level())
-            .withParameter(LootContextParams.THIS_ENTITY, this)
-            .withParameter(LootContextParams.ORIGIN, this.position())
-            .withParameter(LootContextParams.DAMAGE_SOURCE, damageSource)
-            .withOptionalParameter(LootContextParams.KILLER_ENTITY, damageSource.getEntity())
-            .withOptionalParameter(LootContextParams.DIRECT_KILLER_ENTITY, damageSource.getDirectEntity());
+        ResourceLocation minecraftkey = this.getLootTable();
+        LootTable loottable = this.level().getServer().getLootData().getLootTable(minecraftkey);
+        LootParams.Builder lootparams_a = (new LootParams.Builder((ServerLevel) this.level())).withParameter(LootContextParams.THIS_ENTITY, this).withParameter(LootContextParams.ORIGIN, this.position()).withParameter(LootContextParams.DAMAGE_SOURCE, damageSource).withOptionalParameter(LootContextParams.KILLER_ENTITY, damageSource.getEntity()).withOptionalParameter(LootContextParams.DIRECT_KILLER_ENTITY, damageSource.getDirectEntity());
+
         if (hitByPlayer && this.lastHurtByPlayer != null) {
-            builder = builder.withParameter(LootContextParams.LAST_DAMAGE_PLAYER, this.lastHurtByPlayer).withLuck(this.lastHurtByPlayer.getLuck());
+            lootparams_a = lootparams_a.withParameter(LootContextParams.LAST_DAMAGE_PLAYER, this.lastHurtByPlayer).withLuck(this.lastHurtByPlayer.getLuck());
         }
 
-        LootParams lootParams = builder.create(LootContextParamSets.ENTITY);
-        lootTable1.getRandomItems(lootParams, this.getLootTableSeed(), this::spawnAtLocation);
+        LootParams lootparams = lootparams_a.create(LootContextParamSets.ENTITY);
+
+        loottable.getRandomItems(lootparams, this.getLootTableSeed(), this::spawnAtLocation);
     }
 
-    public void knockback(double strength, double x, double z) {
-        double var9 = strength * (1.0 - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE));
-        if (!(var9 <= 0.0)) {
+    public void knockback(double strength, double d1, double x) {
+        strength *= 1.0D - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE);
+        if (strength > 0.0D) {
             this.hasImpulse = true;
-            Vec3 deltaMovement = this.getDeltaMovement();
-            Vec3 vec3 = new Vec3(x, 0.0, z).normalize().scale(var9);
-            this.setDeltaMovement(
-                deltaMovement.x / 2.0 - vec3.x, this.onGround() ? Math.min(0.4, deltaMovement.y / 2.0 + var9) : deltaMovement.y, deltaMovement.z / 2.0 - vec3.z
-            );
+            Vec3 vec3d = this.getDeltaMovement();
+            Vec3 vec3d1 = (new Vec3(d1, 0.0D, x)).normalize().scale(strength);
+
+            this.setDeltaMovement(vec3d.x / 2.0D - vec3d1.x, this.onGround() ? Math.min(0.4D, vec3d.y / 2.0D + strength) : vec3d.y, vec3d.z / 2.0D - vec3d1.z);
         }
     }
 
-    public void indicateDamage(double xDistance, double zDistance) {
-    }
+    public void indicateDamage(double xDistance, double d1) {}
 
     @Nullable
     protected SoundEvent getHurtSound(DamageSource damageSource) {
@@ -1491,18 +1829,20 @@
     }
 
     protected AABB getHitbox() {
-        AABB boundingBox = this.getBoundingBox();
-        Entity vehicle = this.getVehicle();
-        if (vehicle != null) {
-            Vec3 passengerRidingPosition = vehicle.getPassengerRidingPosition(this);
-            return boundingBox.setMinY(Math.max(passengerRidingPosition.y, boundingBox.minY));
+        AABB axisalignedbb = this.getBoundingBox();
+        Entity entity = this.getVehicle();
+
+        if (entity != null) {
+            Vec3 vec3d = entity.getPassengerRidingPosition(this);
+
+            return axisalignedbb.setMinY(Math.max(vec3d.y, axisalignedbb.minY));
         } else {
-            return boundingBox;
+            return axisalignedbb;
         }
     }
 
-    public LivingEntity.Fallsounds getFallSounds() {
-        return new LivingEntity.Fallsounds(SoundEvents.GENERIC_SMALL_FALL, SoundEvents.GENERIC_BIG_FALL);
+    public LivingEntity.a getFallSounds() {
+        return new LivingEntity.a(SoundEvents.GENERIC_SMALL_FALL, SoundEvents.GENERIC_BIG_FALL);
     }
 
     protected SoundEvent getDrinkingSound(ItemStack stack) {
@@ -1513,6 +1853,28 @@
         return stack.getEatingSound();
     }
 
+    // CraftBukkit start - Add delegate methods
+    public SoundEvent getHurtSound0(DamageSource damagesource) {
+        return getHurtSound(damagesource);
+    }
+
+    public SoundEvent getDeathSound0() {
+        return getDeathSound();
+    }
+
+    public SoundEvent getFallDamageSound0(int fallHeight) {
+        return getFallDamageSound(fallHeight);
+    }
+
+    public SoundEvent getDrinkingSound0(ItemStack itemstack) {
+        return getDrinkingSound(itemstack);
+    }
+
+    public SoundEvent getEatingSound0(ItemStack itemstack) {
+        return getEatingSound(itemstack);
+    }
+    // CraftBukkit end
+
     public Optional<BlockPos> getLastClimbablePos() {
         return this.lastClimbablePos;
     }
@@ -1521,13 +1883,14 @@
         if (this.isSpectator()) {
             return false;
         } else {
-            BlockPos blockPos = this.blockPosition();
-            BlockState feetBlockState = this.getFeetBlockState();
-            if (feetBlockState.is(BlockTags.CLIMBABLE)) {
-                this.lastClimbablePos = Optional.of(blockPos);
+            BlockPos blockposition = this.blockPosition();
+            IBlockData iblockdata = this.getFeetBlockState();
+
+            if (iblockdata.is(BlockTags.CLIMBABLE)) {
+                this.lastClimbablePos = Optional.of(blockposition);
                 return true;
-            } else if (feetBlockState.getBlock() instanceof TrapDoorBlock && this.trapdoorUsableAsLadder(blockPos, feetBlockState)) {
-                this.lastClimbablePos = Optional.of(blockPos);
+            } else if (iblockdata.getBlock() instanceof TrapDoorBlock && this.trapdoorUsableAsLadder(blockposition, iblockdata)) {
+                this.lastClimbablePos = Optional.of(blockposition);
                 return true;
             } else {
                 return false;
@@ -1535,10 +1898,11 @@
         }
     }
 
-    private boolean trapdoorUsableAsLadder(BlockPos pos, BlockState state) {
-        if (state.getValue(TrapDoorBlock.OPEN)) {
-            BlockState blockState = this.level().getBlockState(pos.below());
-            if (blockState.is(Blocks.LADDER) && blockState.getValue(LadderBlock.FACING) == state.getValue(TrapDoorBlock.FACING)) {
+    private boolean trapdoorUsableAsLadder(BlockPos pos, IBlockData state) {
+        if ((Boolean) state.getValue(TrapDoorBlock.OPEN)) {
+            IBlockData iblockdata1 = this.level().getBlockState(pos.below());
+
+            if (iblockdata1.is(Blocks.LADDER) && iblockdata1.getValue(LadderBlock.FACING) == state.getValue(TrapDoorBlock.FACING)) {
                 return true;
             }
         }
@@ -1555,10 +1919,16 @@
     public boolean causeFallDamage(float fallDistance, float multiplier, DamageSource source) {
         boolean flag = super.causeFallDamage(fallDistance, multiplier, source);
         int i = this.calculateFallDamage(fallDistance, multiplier);
+
         if (i > 0) {
+            // CraftBukkit start
+            if (!this.hurt(source, (float) i)) {
+                return true;
+            }
+            // CraftBukkit end
             this.playSound(this.getFallDamageSound(i), 1.0F, 1.0F);
             this.playBlockFallSound();
-            this.hurt(source, (float)i);
+            // this.damageEntity(damagesource, (float) i); // CraftBukkit - moved up
             return true;
         } else {
             return flag;
@@ -1569,22 +1939,26 @@
         if (this.getType().is(EntityTypeTags.FALL_DAMAGE_IMMUNE)) {
             return 0;
         } else {
-            MobEffectInstance effect = this.getEffect(MobEffects.JUMP);
-            float f = effect == null ? 0.0F : (float)(effect.getAmplifier() + 1);
-            return Mth.ceil((fallDistance - 3.0F - f) * damageMultiplier);
+            MobEffectInstance mobeffect = this.getEffect(MobEffects.JUMP);
+            float f2 = mobeffect == null ? 0.0F : (float) (mobeffect.getAmplifier() + 1);
+
+            return Mth.ceil((fallDistance - 3.0F - f2) * damageMultiplier);
         }
     }
 
     protected void playBlockFallSound() {
         if (!this.isSilent()) {
-            int floor = Mth.floor(this.getX());
-            int floor1 = Mth.floor(this.getY() - 0.2F);
-            int floor2 = Mth.floor(this.getZ());
-            BlockState blockState = this.level().getBlockState(new BlockPos(floor, floor1, floor2));
-            if (!blockState.isAir()) {
-                SoundType soundType = blockState.getSoundType();
-                this.playSound(soundType.getFallSound(), soundType.getVolume() * 0.5F, soundType.getPitch() * 0.75F);
+            int i = Mth.floor(this.getX());
+            int j = Mth.floor(this.getY() - 0.20000000298023224D);
+            int k = Mth.floor(this.getZ());
+            IBlockData iblockdata = this.level().getBlockState(new BlockPos(i, j, k));
+
+            if (!iblockdata.isAir()) {
+                SoundType soundeffecttype = iblockdata.getSoundType();
+
+                this.playSound(soundeffecttype.getFallSound(), soundeffecttype.getVolume() * 0.5F, soundeffecttype.getPitch() * 0.75F);
             }
+
         }
     }
 
@@ -1598,21 +1972,16 @@
         return Mth.floor(this.getAttributeValue(Attributes.ARMOR));
     }
 
-    protected void hurtArmor(DamageSource damageSource, float damageAmount) {
-    }
+    protected void hurtArmor(DamageSource damageSource, float damageAmount) {}
 
-    protected void hurtHelmet(DamageSource damageSource, float damageAmount) {
-    }
+    protected void hurtHelmet(DamageSource damageSource, float damageAmount) {}
 
-    protected void hurtCurrentlyUsedShield(float damageAmount) {
-    }
+    protected void hurtCurrentlyUsedShield(float damageAmount) {}
 
     protected float getDamageAfterArmorAbsorb(DamageSource damageSource, float damageAmount) {
         if (!damageSource.is(DamageTypeTags.BYPASSES_ARMOR)) {
-            this.hurtArmor(damageSource, damageAmount);
-            damageAmount = CombatRules.getDamageAfterAbsorb(
-                damageAmount, (float)this.getArmorValue(), (float)this.getAttributeValue(Attributes.ARMOR_TOUGHNESS)
-            );
+            // this.hurtArmor(damagesource, f); // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+            damageAmount = CombatRules.getDamageAfterAbsorb(damageAmount, (float) this.getArmorValue(), (float) this.getAttributeValue(Attributes.ARMOR_TOUGHNESS));
         }
 
         return damageAmount;
@@ -1622,18 +1991,23 @@
         if (damageSource.is(DamageTypeTags.BYPASSES_EFFECTS)) {
             return damageAmount;
         } else {
-            if (this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && !damageSource.is(DamageTypeTags.BYPASSES_RESISTANCE)) {
-                int i = (this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
-                int i1 = 25 - i;
-                float f = damageAmount * (float)i1;
-                float f1 = damageAmount;
-                damageAmount = Math.max(f / 25.0F, 0.0F);
-                float f2 = f1 - damageAmount;
-                if (f2 > 0.0F && f2 < 3.4028235E37F) {
+            int i;
+
+            // CraftBukkit - Moved to damageEntity0(DamageSource, float)
+            if (false && this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && !damageSource.is(DamageTypeTags.BYPASSES_RESISTANCE)) {
+                i = (this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
+                int j = 25 - i;
+                float f1 = damageAmount * (float) j;
+                float f2 = damageAmount;
+
+                damageAmount = Math.max(f1 / 25.0F, 0.0F);
+                float f3 = f2 - damageAmount;
+
+                if (f3 > 0.0F && f3 < 3.4028235E37F) {
                     if (this instanceof ServerPlayer) {
-                        ((ServerPlayer)this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f2 * 10.0F));
+                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f3 * 10.0F));
                     } else if (damageSource.getEntity() instanceof ServerPlayer) {
-                        ((ServerPlayer)damageSource.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f2 * 10.0F));
+                        ((ServerPlayer) damageSource.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f3 * 10.0F));
                     }
                 }
             }
@@ -1643,9 +2017,9 @@
             } else if (damageSource.is(DamageTypeTags.BYPASSES_ENCHANTMENTS)) {
                 return damageAmount;
             } else {
-                int i = EnchantmentHelper.getDamageProtection(this.getArmorSlots(), damageSource);
+                i = EnchantmentHelper.getDamageProtection(this.getArmorSlots(), damageSource);
                 if (i > 0) {
-                    damageAmount = CombatRules.getDamageAfterMagicAbsorb(damageAmount, (float)i);
+                    damageAmount = CombatRules.getDamageAfterMagicAbsorb(damageAmount, (float) i);
                 }
 
                 return damageAmount;
@@ -1653,24 +2027,176 @@
         }
     }
 
-    protected void actuallyHurt(DamageSource damageSource, float damageAmount) {
-        if (!this.isInvulnerableTo(damageSource)) {
-            damageAmount = this.getDamageAfterArmorAbsorb(damageSource, damageAmount);
-            damageAmount = this.getDamageAfterMagicAbsorb(damageSource, damageAmount);
-            float var9 = Math.max(damageAmount - this.getAbsorptionAmount(), 0.0F);
-            this.setAbsorptionAmount(this.getAbsorptionAmount() - (damageAmount - var9));
-            float f1 = damageAmount - var9;
-            if (f1 > 0.0F && f1 < 3.4028235E37F && damageSource.getEntity() instanceof ServerPlayer serverPlayer) {
-                serverPlayer.awardStat(Stats.DAMAGE_DEALT_ABSORBED, Math.round(f1 * 10.0F));
+    // CraftBukkit start
+    protected boolean damageEntity0(final DamageSource damagesource, float f) { // void -> boolean, add final
+       if (!this.isInvulnerableTo(damagesource)) {
+            final boolean human = this instanceof net.minecraft.world.entity.player.Player;
+            float originalDamage = f;
+            Function<Double, Double> hardHat = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    if (damagesource.is(DamageTypeTags.DAMAGES_HELMET) && !LivingEntity.this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+                        return -(f - (f * 0.75F));
+
+                    }
+                    return -0.0;
+                }
+            };
+            float hardHatModifier = hardHat.apply((double) f).floatValue();
+            f += hardHatModifier;
+
+            Function<Double, Double> blocking = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -((LivingEntity.this.isDamageSourceBlocked(damagesource)) ? f : 0.0);
+                }
+            };
+            float blockingModifier = blocking.apply((double) f).floatValue();
+            f += blockingModifier;
+
+            Function<Double, Double> armor = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -(f - LivingEntity.this.getDamageAfterArmorAbsorb(damagesource, f.floatValue()));
+                }
+            };
+            float armorModifier = armor.apply((double) f).floatValue();
+            f += armorModifier;
+
+            Function<Double, Double> resistance = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    if (!damagesource.is(DamageTypeTags.BYPASSES_EFFECTS) && LivingEntity.this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && !damagesource.is(DamageTypeTags.BYPASSES_RESISTANCE)) {
+                        int i = (LivingEntity.this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
+                        int j = 25 - i;
+                        float f1 = f.floatValue() * (float) j;
+                        return -(f - (f1 / 25.0F));
+                    }
+                    return -0.0;
+                }
+            };
+            float resistanceModifier = resistance.apply((double) f).floatValue();
+            f += resistanceModifier;
+
+            Function<Double, Double> magic = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -(f - LivingEntity.this.getDamageAfterMagicAbsorb(damagesource, f.floatValue()));
+                }
+            };
+            float magicModifier = magic.apply((double) f).floatValue();
+            f += magicModifier;
+
+            Function<Double, Double> absorption = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -(Math.max(f - Math.max(f - LivingEntity.this.getAbsorptionAmount(), 0.0F), 0.0F));
+                }
+            };
+            float absorptionModifier = absorption.apply((double) f).floatValue();
+
+            EntityDamageEvent event = CraftEventFactory.handleLivingEntityDamageEvent(this, damagesource, originalDamage, hardHatModifier, blockingModifier, armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
+            if (damagesource.getEntity() instanceof net.minecraft.world.entity.player.Player) {
+                ((net.minecraft.world.entity.player.Player) damagesource.getEntity()).resetAttackStrengthTicker(); // Moved from EntityHuman in order to make the cooldown reset get called after the damage event is fired
             }
+            if (event.isCancelled()) {
+                return false;
+            }
 
-            if (var9 != 0.0F) {
-                this.getCombatTracker().recordDamage(damageSource, var9);
-                this.setHealth(this.getHealth() - var9);
-                this.setAbsorptionAmount(this.getAbsorptionAmount() - var9);
+            f = (float) event.getFinalDamage();
+
+            // Resistance
+            if (event.getDamage(DamageModifier.RESISTANCE) < 0) {
+                float f3 = (float) -event.getDamage(DamageModifier.RESISTANCE);
+                if (f3 > 0.0F && f3 < 3.4028235E37F) {
+                    if (this instanceof ServerPlayer) {
+                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f3 * 10.0F));
+                    } else if (damagesource.getEntity() instanceof ServerPlayer) {
+                        ((ServerPlayer) damagesource.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f3 * 10.0F));
+                    }
+                }
+            }
+
+            // Apply damage to helmet
+            if (damagesource.is(DamageTypeTags.DAMAGES_HELMET) && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+                this.hurtHelmet(damagesource, f);
+            }
+
+            // Apply damage to armor
+            if (!damagesource.is(DamageTypeTags.BYPASSES_ARMOR)) {
+                float armorDamage = (float) (event.getDamage() + event.getDamage(DamageModifier.BLOCKING) + event.getDamage(DamageModifier.HARD_HAT));
+                this.hurtArmor(damagesource, armorDamage);
+            }
+
+            // Apply blocking code // PAIL: steal from above
+            if (event.getDamage(DamageModifier.BLOCKING) < 0) {
+                this.level().broadcastEntityEvent(this, (byte) 29); // SPIGOT-4635 - shield damage sound
+                this.hurtCurrentlyUsedShield((float) -event.getDamage(DamageModifier.BLOCKING));
+                Entity entity = damagesource.getDirectEntity();
+
+                if (entity instanceof LivingEntity) {
+                    this.blockUsingShield((LivingEntity) entity);
+                }
+            }
+
+            absorptionModifier = (float) -event.getDamage(DamageModifier.ABSORPTION);
+            this.setAbsorptionAmount(Math.max(this.getAbsorptionAmount() - absorptionModifier, 0.0F));
+            float f2 = absorptionModifier;
+
+            if (f2 > 0.0F && f2 < 3.4028235E37F && this instanceof net.minecraft.world.entity.player.Player) {
+                ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_ABSORBED, Math.round(f2 * 10.0F));
+            }
+            if (f2 > 0.0F && f2 < 3.4028235E37F) {
+                Entity entity = damagesource.getEntity();
+
+                if (entity instanceof ServerPlayer) {
+                    ServerPlayer entityplayer = (ServerPlayer) entity;
+
+                    entityplayer.awardStat(Stats.DAMAGE_DEALT_ABSORBED, Math.round(f2 * 10.0F));
+                }
+            }
+
+            if (f > 0 || !human) {
+                if (human) {
+                    // PAIL: Be sure to drag all this code from the EntityHuman subclass each update.
+                    ((net.minecraft.world.entity.player.Player) this).causeFoodExhaustion(damagesource.getFoodExhaustion(), org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.DAMAGED); // CraftBukkit - EntityExhaustionEvent
+                    if (f < 3.4028235E37F) {
+                        ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_TAKEN, Math.round(f * 10.0F));
+                    }
+                }
+                // CraftBukkit end
+                this.getCombatTracker().recordDamage(damagesource, f);
+                this.setHealth(this.getHealth() - f);
+                // CraftBukkit start
+                if (!human) {
+                    this.setAbsorptionAmount(this.getAbsorptionAmount() - f);
+                }
                 this.gameEvent(GameEvent.ENTITY_DAMAGE);
+
+                return true;
+            } else {
+                // Duplicate triggers if blocking
+                if (event.getDamage(DamageModifier.BLOCKING) < 0) {
+                    if (this instanceof ServerPlayer) {
+                        CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer) this, damagesource, f, originalDamage, true);
+                        f2 = (float) -event.getDamage(DamageModifier.BLOCKING);
+                        if (f2 > 0.0F && f2 < 3.4028235E37F) {
+                            ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(originalDamage * 10.0F));
+                        }
+                    }
+
+                    if (damagesource.getEntity() instanceof ServerPlayer) {
+                        CriteriaTriggers.PLAYER_HURT_ENTITY.trigger((ServerPlayer) damagesource.getEntity(), this, damagesource, f, originalDamage, true);
+                    }
+
+                    return false;
+                } else {
+                    return originalDamage > 0;
+                }
+                // CraftBukkit end
             }
         }
+        return false; // CraftBukkit
     }
 
     public CombatTracker getCombatTracker() {
@@ -1679,64 +2205,68 @@
 
     @Nullable
     public LivingEntity getKillCredit() {
-        if (this.lastHurtByPlayer != null) {
-            return this.lastHurtByPlayer;
-        } else {
-            return this.lastHurtByMob != null ? this.lastHurtByMob : null;
-        }
+        return (LivingEntity) (this.lastHurtByPlayer != null ? this.lastHurtByPlayer : (this.lastHurtByMob != null ? this.lastHurtByMob : null));
     }
 
     public final float getMaxHealth() {
-        return (float)this.getAttributeValue(Attributes.MAX_HEALTH);
+        return (float) this.getAttributeValue(Attributes.MAX_HEALTH);
     }
 
     public final float getMaxAbsorption() {
-        return (float)this.getAttributeValue(Attributes.MAX_ABSORPTION);
+        return (float) this.getAttributeValue(Attributes.MAX_ABSORPTION);
     }
 
     public final int getArrowCount() {
-        return this.entityData.get(DATA_ARROW_COUNT_ID);
+        return (Integer) this.entityData.get(LivingEntity.DATA_ARROW_COUNT_ID);
     }
 
     public final void setArrowCount(int count) {
-        this.entityData.set(DATA_ARROW_COUNT_ID, count);
+        // CraftBukkit start
+        setArrowCount(count, false);
     }
 
+    public final void setArrowCount(int i, boolean flag) {
+        ArrowBodyCountChangeEvent event = CraftEventFactory.callArrowBodyCountChangeEvent(this, getArrowCount(), i, flag);
+        if (event.isCancelled()) {
+            return;
+        }
+        this.entityData.set(LivingEntity.DATA_ARROW_COUNT_ID, event.getNewAmount());
+    }
+    // CraftBukkit end
+
     public final int getStingerCount() {
-        return this.entityData.get(DATA_STINGER_COUNT_ID);
+        return (Integer) this.entityData.get(LivingEntity.DATA_STINGER_COUNT_ID);
     }
 
     public final void setStingerCount(int stingerCount) {
-        this.entityData.set(DATA_STINGER_COUNT_ID, stingerCount);
+        this.entityData.set(LivingEntity.DATA_STINGER_COUNT_ID, stingerCount);
     }
 
     private int getCurrentSwingDuration() {
-        if (MobEffectUtil.hasDigSpeed(this)) {
-            return 6 - (1 + MobEffectUtil.getDigSpeedAmplification(this));
-        } else {
-            return this.hasEffect(MobEffects.DIG_SLOWDOWN) ? 6 + (1 + this.getEffect(MobEffects.DIG_SLOWDOWN).getAmplifier()) * 2 : 6;
-        }
+        return MobEffectUtil.hasDigSpeed(this) ? 6 - (1 + MobEffectUtil.getDigSpeedAmplification(this)) : (this.hasEffect(MobEffects.DIG_SLOWDOWN) ? 6 + (1 + this.getEffect(MobEffects.DIG_SLOWDOWN).getAmplifier()) * 2 : 6);
     }
 
-    public void swing(InteractionHand hand) {
+    public void swing(EnumHand hand) {
         this.swing(hand, false);
     }
 
-    public void swing(InteractionHand hand, boolean updateSelf) {
+    public void swing(EnumHand hand, boolean updateSelf) {
         if (!this.swinging || this.swingTime >= this.getCurrentSwingDuration() / 2 || this.swingTime < 0) {
             this.swingTime = -1;
             this.swinging = true;
             this.swingingArm = hand;
             if (this.level() instanceof ServerLevel) {
-                ClientboundAnimatePacket clientboundAnimatePacket = new ClientboundAnimatePacket(this, hand == InteractionHand.MAIN_HAND ? 0 : 3);
-                ServerChunkCache chunkSource = ((ServerLevel)this.level()).getChunkSource();
+                ClientboundAnimatePacket packetplayoutanimation = new ClientboundAnimatePacket(this, hand == EnumHand.MAIN_HAND ? 0 : 3);
+                ServerChunkCache chunkproviderserver = ((ServerLevel) this.level()).getChunkSource();
+
                 if (updateSelf) {
-                    chunkSource.broadcastAndSend(this, clientboundAnimatePacket);
+                    chunkproviderserver.broadcastAndSend(this, packetplayoutanimation);
                 } else {
-                    chunkSource.broadcast(this, clientboundAnimatePacket);
+                    chunkproviderserver.broadcast(this, packetplayoutanimation);
                 }
             }
         }
+
     }
 
     @Override
@@ -1745,9 +2275,10 @@
         this.invulnerableTime = 20;
         this.hurtDuration = 10;
         this.hurtTime = this.hurtDuration;
-        SoundEvent hurtSound = this.getHurtSound(damageSource);
-        if (hurtSound != null) {
-            this.playSound(hurtSound, this.getSoundVolume(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+        SoundEvent soundeffect = this.getHurtSound(damageSource);
+
+        if (soundeffect != null) {
+            this.playSound(soundeffect, this.getSoundVolume(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
         }
 
         this.hurt(this.damageSources().generic(), 0.0F);
@@ -1759,12 +2290,13 @@
     public void handleEntityEvent(byte id) {
         switch (id) {
             case 3:
-                SoundEvent deathSound = this.getDeathSound();
-                if (deathSound != null) {
-                    this.playSound(deathSound, this.getSoundVolume(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+                SoundEvent soundeffect = this.getDeathSound();
+
+                if (soundeffect != null) {
+                    this.playSound(soundeffect, this.getSoundVolume(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
                 }
 
-                if (!(this instanceof Player)) {
+                if (!(this instanceof net.minecraft.world.entity.player.Player)) {
                     this.setHealth(0.0F);
                     this.die(this.damageSources().generic());
                 }
@@ -1776,19 +2308,21 @@
                 this.playSound(SoundEvents.SHIELD_BREAK, 0.8F, 0.8F + this.level().random.nextFloat() * 0.4F);
                 break;
             case 46:
-                int i = 128;
+                boolean flag = true;
 
-                for (int i1 = 0; i1 < 128; i1++) {
-                    double d = (double)i1 / 127.0;
+                for (int i = 0; i < 128; ++i) {
+                    double d0 = (double) i / 127.0D;
                     float f = (this.random.nextFloat() - 0.5F) * 0.2F;
                     float f1 = (this.random.nextFloat() - 0.5F) * 0.2F;
                     float f2 = (this.random.nextFloat() - 0.5F) * 0.2F;
-                    double d1 = Mth.lerp(d, this.xo, this.getX()) + (this.random.nextDouble() - 0.5) * (double)this.getBbWidth() * 2.0;
-                    double d2 = Mth.lerp(d, this.yo, this.getY()) + this.random.nextDouble() * (double)this.getBbHeight();
-                    double d3 = Mth.lerp(d, this.zo, this.getZ()) + (this.random.nextDouble() - 0.5) * (double)this.getBbWidth() * 2.0;
-                    this.level().addParticle(ParticleTypes.PORTAL, d1, d2, d3, (double)f, (double)f1, (double)f2);
+                    double d1 = Mth.lerp(d0, this.xo, this.getX()) + (this.random.nextDouble() - 0.5D) * (double) this.getBbWidth() * 2.0D;
+                    double d2 = Mth.lerp(d0, this.yo, this.getY()) + this.random.nextDouble() * (double) this.getBbHeight();
+                    double d3 = Mth.lerp(d0, this.zo, this.getZ()) + (this.random.nextDouble() - 0.5D) * (double) this.getBbWidth() * 2.0D;
+
+                    this.level().addParticle(ParticleTypes.PORTAL, d1, d2, d3, (double) f, (double) f1, (double) f2);
                 }
-                break;
+
+                return;
             case 47:
                 this.breakItem(this.getItemBySlot(EquipmentSlot.MAINHAND));
                 break;
@@ -1819,21 +2353,25 @@
             default:
                 super.handleEntityEvent(id);
         }
+
     }
 
     private void makePoofParticles() {
-        for (int i = 0; i < 20; i++) {
-            double d = this.random.nextGaussian() * 0.02;
-            double d1 = this.random.nextGaussian() * 0.02;
-            double d2 = this.random.nextGaussian() * 0.02;
-            this.level().addParticle(ParticleTypes.POOF, this.getRandomX(1.0), this.getRandomY(), this.getRandomZ(1.0), d, d1, d2);
+        for (int i = 0; i < 20; ++i) {
+            double d0 = this.random.nextGaussian() * 0.02D;
+            double d1 = this.random.nextGaussian() * 0.02D;
+            double d2 = this.random.nextGaussian() * 0.02D;
+
+            this.level().addParticle(ParticleTypes.POOF, this.getRandomX(1.0D), this.getRandomY(), this.getRandomZ(1.0D), d0, d1, d2);
         }
+
     }
 
     private void swapHandItems() {
-        ItemStack itemBySlot = this.getItemBySlot(EquipmentSlot.OFFHAND);
+        ItemStack itemstack = this.getItemBySlot(EquipmentSlot.OFFHAND);
+
         this.setItemSlot(EquipmentSlot.OFFHAND, this.getItemBySlot(EquipmentSlot.MAINHAND));
-        this.setItemSlot(EquipmentSlot.MAINHAND, itemBySlot);
+        this.setItemSlot(EquipmentSlot.MAINHAND, itemstack);
     }
 
     @Override
@@ -1842,10 +2380,11 @@
     }
 
     protected void updateSwingTime() {
-        int currentSwingDuration = this.getCurrentSwingDuration();
+        int i = this.getCurrentSwingDuration();
+
         if (this.swinging) {
-            this.swingTime++;
-            if (this.swingTime >= currentSwingDuration) {
+            ++this.swingTime;
+            if (this.swingTime >= i) {
                 this.swingTime = 0;
                 this.swinging = false;
             }
@@ -1853,7 +2392,7 @@
             this.swingTime = 0;
         }
 
-        this.attackAnim = (float)this.swingTime / (float)currentSwingDuration;
+        this.attackAnim = (float) this.swingTime / (float) i;
     }
 
     @Nullable
@@ -1862,7 +2401,7 @@
     }
 
     public double getAttributeValue(Holder<Attribute> attribute) {
-        return this.getAttributeValue(attribute.value());
+        return this.getAttributeValue((Attribute) attribute.value());
     }
 
     public double getAttributeValue(Attribute attribute) {
@@ -1870,7 +2409,7 @@
     }
 
     public double getAttributeBaseValue(Holder<Attribute> attribute) {
-        return this.getAttributeBaseValue(attribute.value());
+        return this.getAttributeBaseValue((Attribute) attribute.value());
     }
 
     public double getAttributeBaseValue(Attribute attribute) {
@@ -1881,8 +2420,8 @@
         return this.attributes;
     }
 
-    public MobType getMobType() {
-        return MobType.UNDEFINED;
+    public EnumMonsterType getMobType() {
+        return EnumMonsterType.UNDEFINED;
     }
 
     public ItemStack getMainHandItem() {
@@ -1894,33 +2433,36 @@
     }
 
     public boolean isHolding(Item item) {
-        return this.isHolding(stack -> stack.is(item));
+        return this.isHolding((itemstack) -> {
+            return itemstack.is(item);
+        });
     }
 
     public boolean isHolding(Predicate<ItemStack> predicate) {
         return predicate.test(this.getMainHandItem()) || predicate.test(this.getOffhandItem());
     }
 
-    public ItemStack getItemInHand(InteractionHand hand) {
-        if (hand == InteractionHand.MAIN_HAND) {
+    public ItemStack getItemInHand(EnumHand hand) {
+        if (hand == EnumHand.MAIN_HAND) {
             return this.getItemBySlot(EquipmentSlot.MAINHAND);
-        } else if (hand == InteractionHand.OFF_HAND) {
+        } else if (hand == EnumHand.OFF_HAND) {
             return this.getItemBySlot(EquipmentSlot.OFFHAND);
         } else {
             throw new IllegalArgumentException("Invalid hand " + hand);
         }
     }
 
-    public void setItemInHand(InteractionHand hand, ItemStack stack) {
-        if (hand == InteractionHand.MAIN_HAND) {
+    public void setItemInHand(EnumHand hand, ItemStack stack) {
+        if (hand == EnumHand.MAIN_HAND) {
             this.setItemSlot(EquipmentSlot.MAINHAND, stack);
         } else {
-            if (hand != InteractionHand.OFF_HAND) {
+            if (hand != EnumHand.OFF_HAND) {
                 throw new IllegalArgumentException("Invalid hand " + hand);
             }
 
             this.setItemSlot(EquipmentSlot.OFFHAND, stack);
         }
+
     }
 
     public boolean hasItemInSlot(EquipmentSlot slot) {
@@ -1932,40 +2474,50 @@
 
     public abstract ItemStack getItemBySlot(EquipmentSlot slot);
 
+    // CraftBukkit start
+    public void setItemSlot(EquipmentSlot enumitemslot, ItemStack itemstack, boolean silent) {
+        this.setItemSlot(enumitemslot, itemstack);
+    }
+    // CraftBukkit end
+
     @Override
     public abstract void setItemSlot(EquipmentSlot slot, ItemStack stack);
 
     protected void verifyEquippedItem(ItemStack stack) {
-        CompoundTag tag = stack.getTag();
-        if (tag != null) {
-            stack.getItem().verifyTagAfterLoad(tag);
+        CompoundTag nbttagcompound = stack.getTag();
+
+        if (nbttagcompound != null) {
+            stack.getItem().verifyTagAfterLoad(nbttagcompound);
         }
+
     }
 
     public float getArmorCoverPercentage() {
-        Iterable<ItemStack> armorSlots = this.getArmorSlots();
+        Iterable<ItemStack> iterable = this.getArmorSlots();
         int i = 0;
-        int i1 = 0;
+        int j = 0;
 
-        for (ItemStack itemStack : armorSlots) {
-            if (!itemStack.isEmpty()) {
-                i1++;
-            }
+        for (Iterator iterator = iterable.iterator(); iterator.hasNext(); ++i) {
+            ItemStack itemstack = (ItemStack) iterator.next();
 
-            i++;
+            if (!itemstack.isEmpty()) {
+                ++j;
+            }
         }
 
-        return i > 0 ? (float)i1 / (float)i : 0.0F;
+        return i > 0 ? (float) j / (float) i : 0.0F;
     }
 
     @Override
     public void setSprinting(boolean sprinting) {
         super.setSprinting(sprinting);
-        AttributeInstance attribute = this.getAttribute(Attributes.MOVEMENT_SPEED);
-        attribute.removeModifier(SPEED_MODIFIER_SPRINTING.getId());
+        AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
+
+        attributemodifiable.removeModifier(LivingEntity.SPEED_MODIFIER_SPRINTING.getId());
         if (sprinting) {
-            attribute.addTransientModifier(SPEED_MODIFIER_SPRINTING);
+            attributemodifiable.addTransientModifier(LivingEntity.SPEED_MODIFIER_SPRINTING);
         }
+
     }
 
     protected float getSoundVolume() {
@@ -1973,9 +2525,7 @@
     }
 
     public float getVoicePitch() {
-        return this.isBaby()
-            ? (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.5F
-            : (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F;
+        return this.isBaby() ? (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.5F : (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F;
     }
 
     protected boolean isImmobile() {
@@ -1987,20 +2537,23 @@
         if (!this.isSleeping()) {
             super.push(entity);
         }
+
     }
 
     private void dismountVehicle(Entity vehicle) {
-        Vec3 vec3;
+        Vec3 vec3d;
+
         if (this.isRemoved()) {
-            vec3 = this.position();
+            vec3d = this.position();
         } else if (!vehicle.isRemoved() && !this.level().getBlockState(vehicle.blockPosition()).is(BlockTags.PORTALS)) {
-            vec3 = vehicle.getDismountLocationForPassenger(this);
+            vec3d = vehicle.getDismountLocationForPassenger(this);
         } else {
-            double max = Math.max(this.getY(), vehicle.getY());
-            vec3 = new Vec3(this.getX(), max, this.getZ());
+            double d0 = Math.max(this.getY(), vehicle.getY());
+
+            vec3d = new Vec3(this.getX(), d0, this.getZ());
         }
 
-        this.dismountTo(vec3.x, vec3.y, vec3.z);
+        this.dismountTo(vec3d.x, vec3d.y, vec3d.z);
     }
 
     @Override
@@ -2013,26 +2566,28 @@
     }
 
     public float getJumpBoostPower() {
-        return this.hasEffect(MobEffects.JUMP) ? 0.1F * ((float)this.getEffect(MobEffects.JUMP).getAmplifier() + 1.0F) : 0.0F;
+        return this.hasEffect(MobEffects.JUMP) ? 0.1F * ((float) this.getEffect(MobEffects.JUMP).getAmplifier() + 1.0F) : 0.0F;
     }
 
     protected void jumpFromGround() {
-        Vec3 deltaMovement = this.getDeltaMovement();
-        this.setDeltaMovement(deltaMovement.x, (double)this.getJumpPower(), deltaMovement.z);
+        Vec3 vec3d = this.getDeltaMovement();
+
+        this.setDeltaMovement(vec3d.x, (double) this.getJumpPower(), vec3d.z);
         if (this.isSprinting()) {
-            float f = this.getYRot() * (float) (Math.PI / 180.0);
-            this.setDeltaMovement(this.getDeltaMovement().add((double)(-Mth.sin(f) * 0.2F), 0.0, (double)(Mth.cos(f) * 0.2F)));
+            float f = this.getYRot() * 0.017453292F;
+
+            this.setDeltaMovement(this.getDeltaMovement().add((double) (-Mth.sin(f) * 0.2F), 0.0D, (double) (Mth.cos(f) * 0.2F)));
         }
 
         this.hasImpulse = true;
     }
 
     protected void goDownInWater() {
-        this.setDeltaMovement(this.getDeltaMovement().add(0.0, -0.04F, 0.0));
+        this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.03999999910593033D, 0.0D));
     }
 
     protected void jumpInLiquid(TagKey<Fluid> fluidTag) {
-        this.setDeltaMovement(this.getDeltaMovement().add(0.0, 0.04F, 0.0));
+        this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.03999999910593033D, 0.0D));
     }
 
     protected float getWaterSlowDown() {
@@ -2045,18 +2600,23 @@
 
     public void travel(Vec3 travelVector) {
         if (this.isControlledByLocalInstance()) {
-            double d = 0.08;
-            boolean flag = this.getDeltaMovement().y <= 0.0;
+            double d0 = 0.08D;
+            boolean flag = this.getDeltaMovement().y <= 0.0D;
+
             if (flag && this.hasEffect(MobEffects.SLOW_FALLING)) {
-                d = 0.01;
+                d0 = 0.01D;
             }
 
-            FluidState fluidState = this.level().getFluidState(this.blockPosition());
-            if (this.isInWater() && this.isAffectedByFluids() && !this.canStandOnFluid(fluidState)) {
-                double y = this.getY();
-                float f = this.isSprinting() ? 0.9F : this.getWaterSlowDown();
+            FluidState fluid = this.level().getFluidState(this.blockPosition());
+            double d1;
+            float f;
+
+            if (this.isInWater() && this.isAffectedByFluids() && !this.canStandOnFluid(fluid)) {
+                d1 = this.getY();
+                f = this.isSprinting() ? 0.9F : this.getWaterSlowDown();
                 float f1 = 0.02F;
-                float f2 = (float)EnchantmentHelper.getDepthStrider(this);
+                float f2 = (float) EnchantmentHelper.getDepthStrider(this);
+
                 if (f2 > 3.0F) {
                     f2 = 3.0F;
                 }
@@ -2075,170 +2635,182 @@
                 }
 
                 this.moveRelative(f1, travelVector);
-                this.move(MoverType.SELF, this.getDeltaMovement());
-                Vec3 deltaMovement = this.getDeltaMovement();
+                this.move(EnumMoveType.SELF, this.getDeltaMovement());
+                Vec3 vec3d1 = this.getDeltaMovement();
+
                 if (this.horizontalCollision && this.onClimbable()) {
-                    deltaMovement = new Vec3(deltaMovement.x, 0.2, deltaMovement.z);
+                    vec3d1 = new Vec3(vec3d1.x, 0.2D, vec3d1.z);
                 }
 
-                this.setDeltaMovement(deltaMovement.multiply((double)f, 0.8F, (double)f));
-                Vec3 fluidFallingAdjustedMovement = this.getFluidFallingAdjustedMovement(d, flag, this.getDeltaMovement());
-                this.setDeltaMovement(fluidFallingAdjustedMovement);
-                if (this.horizontalCollision
-                    && this.isFree(fluidFallingAdjustedMovement.x, fluidFallingAdjustedMovement.y + 0.6F - this.getY() + y, fluidFallingAdjustedMovement.z)) {
-                    this.setDeltaMovement(fluidFallingAdjustedMovement.x, 0.3F, fluidFallingAdjustedMovement.z);
+                this.setDeltaMovement(vec3d1.multiply((double) f, 0.800000011920929D, (double) f));
+                Vec3 vec3d2 = this.getFluidFallingAdjustedMovement(d0, flag, this.getDeltaMovement());
+
+                this.setDeltaMovement(vec3d2);
+                if (this.horizontalCollision && this.isFree(vec3d2.x, vec3d2.y + 0.6000000238418579D - this.getY() + d1, vec3d2.z)) {
+                    this.setDeltaMovement(vec3d2.x, 0.30000001192092896D, vec3d2.z);
                 }
-            } else if (this.isInLava() && this.isAffectedByFluids() && !this.canStandOnFluid(fluidState)) {
-                double yx = this.getY();
+            } else if (this.isInLava() && this.isAffectedByFluids() && !this.canStandOnFluid(fluid)) {
+                d1 = this.getY();
                 this.moveRelative(0.02F, travelVector);
-                this.move(MoverType.SELF, this.getDeltaMovement());
+                this.move(EnumMoveType.SELF, this.getDeltaMovement());
+                Vec3 vec3d3;
+
                 if (this.getFluidHeight(FluidTags.LAVA) <= this.getFluidJumpThreshold()) {
-                    this.setDeltaMovement(this.getDeltaMovement().multiply(0.5, 0.8F, 0.5));
-                    Vec3 fluidFallingAdjustedMovement1 = this.getFluidFallingAdjustedMovement(d, flag, this.getDeltaMovement());
-                    this.setDeltaMovement(fluidFallingAdjustedMovement1);
+                    this.setDeltaMovement(this.getDeltaMovement().multiply(0.5D, 0.800000011920929D, 0.5D));
+                    vec3d3 = this.getFluidFallingAdjustedMovement(d0, flag, this.getDeltaMovement());
+                    this.setDeltaMovement(vec3d3);
                 } else {
-                    this.setDeltaMovement(this.getDeltaMovement().scale(0.5));
+                    this.setDeltaMovement(this.getDeltaMovement().scale(0.5D));
                 }
 
                 if (!this.isNoGravity()) {
-                    this.setDeltaMovement(this.getDeltaMovement().add(0.0, -d / 4.0, 0.0));
+                    this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -d0 / 4.0D, 0.0D));
                 }
 
-                Vec3 fluidFallingAdjustedMovement1 = this.getDeltaMovement();
-                if (this.horizontalCollision
-                    && this.isFree(fluidFallingAdjustedMovement1.x, fluidFallingAdjustedMovement1.y + 0.6F - this.getY() + yx, fluidFallingAdjustedMovement1.z)
-                    )
-                 {
-                    this.setDeltaMovement(fluidFallingAdjustedMovement1.x, 0.3F, fluidFallingAdjustedMovement1.z);
+                vec3d3 = this.getDeltaMovement();
+                if (this.horizontalCollision && this.isFree(vec3d3.x, vec3d3.y + 0.6000000238418579D - this.getY() + d1, vec3d3.z)) {
+                    this.setDeltaMovement(vec3d3.x, 0.30000001192092896D, vec3d3.z);
                 }
             } else if (this.isFallFlying()) {
                 this.checkSlowFallDistance();
-                Vec3 deltaMovement1 = this.getDeltaMovement();
-                Vec3 lookAngle = this.getLookAngle();
-                float fx = this.getXRot() * (float) (Math.PI / 180.0);
-                double squareRoot = Math.sqrt(lookAngle.x * lookAngle.x + lookAngle.z * lookAngle.z);
-                double d1 = deltaMovement1.horizontalDistance();
-                double len = lookAngle.length();
-                double cos = Math.cos((double)fx);
-                double var35 = cos * cos * Math.min(1.0, len / 0.4);
-                Vec3 var22 = this.getDeltaMovement().add(0.0, d * (-1.0 + var35 * 0.75), 0.0);
-                if (var22.y < 0.0 && squareRoot > 0.0) {
-                    double d2 = var22.y * -0.1 * var35;
-                    var22 = var22.add(lookAngle.x * d2 / squareRoot, d2, lookAngle.z * d2 / squareRoot);
+                Vec3 vec3d4 = this.getDeltaMovement();
+                Vec3 vec3d5 = this.getLookAngle();
+
+                f = this.getXRot() * 0.017453292F;
+                double d2 = Math.sqrt(vec3d5.x * vec3d5.x + vec3d5.z * vec3d5.z);
+                double d3 = vec3d4.horizontalDistance();
+                double d4 = vec3d5.length();
+                double d5 = Math.cos((double) f);
+
+                d5 = d5 * d5 * Math.min(1.0D, d4 / 0.4D);
+                vec3d4 = this.getDeltaMovement().add(0.0D, d0 * (-1.0D + d5 * 0.75D), 0.0D);
+                double d6;
+
+                if (vec3d4.y < 0.0D && d2 > 0.0D) {
+                    d6 = vec3d4.y * -0.1D * d5;
+                    vec3d4 = vec3d4.add(vec3d5.x * d6 / d2, d6, vec3d5.z * d6 / d2);
                 }
 
-                if (fx < 0.0F && squareRoot > 0.0) {
-                    double d2 = d1 * (double)(-Mth.sin(fx)) * 0.04;
-                    var22 = var22.add(-lookAngle.x * d2 / squareRoot, d2 * 3.2, -lookAngle.z * d2 / squareRoot);
+                if (f < 0.0F && d2 > 0.0D) {
+                    d6 = d3 * (double) (-Mth.sin(f)) * 0.04D;
+                    vec3d4 = vec3d4.add(-vec3d5.x * d6 / d2, d6 * 3.2D, -vec3d5.z * d6 / d2);
                 }
 
-                if (squareRoot > 0.0) {
-                    var22 = var22.add((lookAngle.x / squareRoot * d1 - var22.x) * 0.1, 0.0, (lookAngle.z / squareRoot * d1 - var22.z) * 0.1);
+                if (d2 > 0.0D) {
+                    vec3d4 = vec3d4.add((vec3d5.x / d2 * d3 - vec3d4.x) * 0.1D, 0.0D, (vec3d5.z / d2 * d3 - vec3d4.z) * 0.1D);
                 }
 
-                this.setDeltaMovement(var22.multiply(0.99F, 0.98F, 0.99F));
-                this.move(MoverType.SELF, this.getDeltaMovement());
+                this.setDeltaMovement(vec3d4.multiply(0.9900000095367432D, 0.9800000190734863D, 0.9900000095367432D));
+                this.move(EnumMoveType.SELF, this.getDeltaMovement());
                 if (this.horizontalCollision && !this.level().isClientSide) {
-                    double d2 = this.getDeltaMovement().horizontalDistance();
-                    double d3 = d1 - d2;
-                    float f3 = (float)(d3 * 10.0 - 3.0);
+                    d6 = this.getDeltaMovement().horizontalDistance();
+                    double d7 = d3 - d6;
+                    float f3 = (float) (d7 * 10.0D - 3.0D);
+
                     if (f3 > 0.0F) {
-                        this.playSound(this.getFallDamageSound((int)f3), 1.0F, 1.0F);
+                        this.playSound(this.getFallDamageSound((int) f3), 1.0F, 1.0F);
                         this.hurt(this.damageSources().flyIntoWall(), f3);
                     }
                 }
 
                 if (this.onGround() && !this.level().isClientSide) {
+                    if (getSharedFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) // CraftBukkit
                     this.setSharedFlag(7, false);
                 }
             } else {
-                BlockPos blockPosBelowThatAffectsMyMovement = this.getBlockPosBelowThatAffectsMyMovement();
-                float friction = this.level().getBlockState(blockPosBelowThatAffectsMyMovement).getBlock().getFriction();
-                float fxx = this.onGround() ? friction * 0.91F : 0.91F;
-                Vec3 vec3 = this.handleRelativeFrictionAndCalculateMovement(travelVector, friction);
-                double d4 = vec3.y;
+                BlockPos blockposition = this.getBlockPosBelowThatAffectsMyMovement();
+                float f4 = this.level().getBlockState(blockposition).getBlock().getFriction();
+
+                f = this.onGround() ? f4 * 0.91F : 0.91F;
+                Vec3 vec3d6 = this.handleRelativeFrictionAndCalculateMovement(travelVector, f4);
+                double d8 = vec3d6.y;
+
                 if (this.hasEffect(MobEffects.LEVITATION)) {
-                    d4 += (0.05 * (double)(this.getEffect(MobEffects.LEVITATION).getAmplifier() + 1) - vec3.y) * 0.2;
-                } else if (this.level().isClientSide && !this.level().hasChunkAt(blockPosBelowThatAffectsMyMovement)) {
-                    if (this.getY() > (double)this.level().getMinBuildHeight()) {
-                        d4 = -0.1;
+                    d8 += (0.05D * (double) (this.getEffect(MobEffects.LEVITATION).getAmplifier() + 1) - vec3d6.y) * 0.2D;
+                } else if (this.level().isClientSide && !this.level().hasChunkAt(blockposition)) {
+                    if (this.getY() > (double) this.level().getMinBuildHeight()) {
+                        d8 = -0.1D;
                     } else {
-                        d4 = 0.0;
+                        d8 = 0.0D;
                     }
                 } else if (!this.isNoGravity()) {
-                    d4 -= d;
+                    d8 -= d0;
                 }
 
                 if (this.shouldDiscardFriction()) {
-                    this.setDeltaMovement(vec3.x, d4, vec3.z);
+                    this.setDeltaMovement(vec3d6.x, d8, vec3d6.z);
                 } else {
-                    this.setDeltaMovement(vec3.x * (double)fxx, d4 * 0.98F, vec3.z * (double)fxx);
+                    this.setDeltaMovement(vec3d6.x * (double) f, d8 * 0.9800000190734863D, vec3d6.z * (double) f);
                 }
             }
         }
 
-        this.calculateEntityAnimation(this instanceof FlyingAnimal);
+        this.calculateEntityAnimation(this instanceof EntityBird);
     }
 
-    private void travelRidden(Player player, Vec3 travelVector) {
-        Vec3 riddenInput = this.getRiddenInput(player, travelVector);
-        this.tickRidden(player, riddenInput);
+    private void travelRidden(net.minecraft.world.entity.player.Player player, Vec3 travelVector) {
+        Vec3 vec3d1 = this.getRiddenInput(player, travelVector);
+
+        this.tickRidden(player, vec3d1);
         if (this.isControlledByLocalInstance()) {
             this.setSpeed(this.getRiddenSpeed(player));
-            this.travel(riddenInput);
+            this.travel(vec3d1);
         } else {
             this.calculateEntityAnimation(false);
             this.setDeltaMovement(Vec3.ZERO);
             this.tryCheckInsideBlocks();
         }
-    }
 
-    protected void tickRidden(Player player, Vec3 travelVector) {
     }
 
-    protected Vec3 getRiddenInput(Player player, Vec3 travelVector) {
+    protected void tickRidden(net.minecraft.world.entity.player.Player player, Vec3 travelVector) {}
+
+    protected Vec3 getRiddenInput(net.minecraft.world.entity.player.Player player, Vec3 travelVector) {
         return travelVector;
     }
 
-    protected float getRiddenSpeed(Player player) {
+    protected float getRiddenSpeed(net.minecraft.world.entity.player.Player player) {
         return this.getSpeed();
     }
 
     public void calculateEntityAnimation(boolean includeHeight) {
-        float f = (float)Mth.length(this.getX() - this.xo, includeHeight ? this.getY() - this.yo : 0.0, this.getZ() - this.zo);
+        float f = (float) Mth.length(this.getX() - this.xo, includeHeight ? this.getY() - this.yo : 0.0D, this.getZ() - this.zo);
+
         this.updateWalkAnimation(f);
     }
 
     protected void updateWalkAnimation(float partialTick) {
-        float min = Math.min(partialTick * 4.0F, 1.0F);
-        this.walkAnimation.update(min, 0.4F);
+        float f1 = Math.min(partialTick * 4.0F, 1.0F);
+
+        this.walkAnimation.update(f1, 0.4F);
     }
 
     public Vec3 handleRelativeFrictionAndCalculateMovement(Vec3 deltaMovement, float friction) {
         this.moveRelative(this.getFrictionInfluencedSpeed(friction), deltaMovement);
         this.setDeltaMovement(this.handleOnClimbable(this.getDeltaMovement()));
-        this.move(MoverType.SELF, this.getDeltaMovement());
-        Vec3 deltaMovement1 = this.getDeltaMovement();
-        if ((this.horizontalCollision || this.jumping)
-            && (this.onClimbable() || this.getFeetBlockState().is(Blocks.POWDER_SNOW) && PowderSnowBlock.canEntityWalkOnPowderSnow(this))) {
-            deltaMovement1 = new Vec3(deltaMovement1.x, 0.2, deltaMovement1.z);
+        this.move(EnumMoveType.SELF, this.getDeltaMovement());
+        Vec3 vec3d1 = this.getDeltaMovement();
+
+        if ((this.horizontalCollision || this.jumping) && (this.onClimbable() || this.getFeetBlockState().is(Blocks.POWDER_SNOW) && PowderSnowBlock.canEntityWalkOnPowderSnow(this))) {
+            vec3d1 = new Vec3(vec3d1.x, 0.2D, vec3d1.z);
         }
 
-        return deltaMovement1;
+        return vec3d1;
     }
 
-    public Vec3 getFluidFallingAdjustedMovement(double gravity, boolean isFalling, Vec3 deltaMovement) {
+    public Vec3 getFluidFallingAdjustedMovement(double gravity, boolean flag, Vec3 isFalling) {
         if (!this.isNoGravity() && !this.isSprinting()) {
-            double d;
-            if (isFalling && Math.abs(deltaMovement.y - 0.005) >= 0.003 && Math.abs(deltaMovement.y - gravity / 16.0) < 0.003) {
-                d = -0.003;
+            double d1;
+
+            if (flag && Math.abs(isFalling.y - 0.005D) >= 0.003D && Math.abs(isFalling.y - gravity / 16.0D) < 0.003D) {
+                d1 = -0.003D;
             } else {
-                d = deltaMovement.y - gravity / 16.0;
+                d1 = isFalling.y - gravity / 16.0D;
             }
 
-            return new Vec3(deltaMovement.x, d, deltaMovement.z);
+            return new Vec3(isFalling.x, d1, isFalling.z);
         } else {
-            return deltaMovement;
+            return isFalling;
         }
     }
 
@@ -2246,14 +2818,15 @@
         if (this.onClimbable()) {
             this.resetFallDistance();
             float f = 0.15F;
-            double d = Mth.clamp(deltaMovement.x, -0.15F, 0.15F);
-            double d1 = Mth.clamp(deltaMovement.z, -0.15F, 0.15F);
-            double max = Math.max(deltaMovement.y, -0.15F);
-            if (max < 0.0 && !this.getFeetBlockState().is(Blocks.SCAFFOLDING) && this.isSuppressingSlidingDownLadder() && this instanceof Player) {
-                max = 0.0;
+            double d0 = Mth.clamp(deltaMovement.x, -0.15000000596046448D, 0.15000000596046448D);
+            double d1 = Mth.clamp(deltaMovement.z, -0.15000000596046448D, 0.15000000596046448D);
+            double d2 = Math.max(deltaMovement.y, -0.15000000596046448D);
+
+            if (d2 < 0.0D && !this.getFeetBlockState().is(Blocks.SCAFFOLDING) && this.isSuppressingSlidingDownLadder() && this instanceof net.minecraft.world.entity.player.Player) {
+                d2 = 0.0D;
             }
 
-            deltaMovement = new Vec3(d, max, d1);
+            deltaMovement = new Vec3(d0, d2, d1);
         }
 
         return deltaMovement;
@@ -2264,7 +2837,7 @@
     }
 
     protected float getFlyingSpeed() {
-        return this.getControllingPassenger() instanceof Player ? this.getSpeed() * 0.1F : 0.02F;
+        return this.getControllingPassenger() instanceof net.minecraft.world.entity.player.Player ? this.getSpeed() * 0.1F : 0.02F;
     }
 
     public float getSpeed() {
@@ -2286,31 +2859,33 @@
         this.updatingUsingItem();
         this.updateSwimAmount();
         if (!this.level().isClientSide) {
-            int arrowCount = this.getArrowCount();
-            if (arrowCount > 0) {
+            int i = this.getArrowCount();
+
+            if (i > 0) {
                 if (this.removeArrowTime <= 0) {
-                    this.removeArrowTime = 20 * (30 - arrowCount);
+                    this.removeArrowTime = 20 * (30 - i);
                 }
 
-                this.removeArrowTime--;
+                --this.removeArrowTime;
                 if (this.removeArrowTime <= 0) {
-                    this.setArrowCount(arrowCount - 1);
+                    this.setArrowCount(i - 1);
                 }
             }
 
-            int stingerCount = this.getStingerCount();
-            if (stingerCount > 0) {
+            int j = this.getStingerCount();
+
+            if (j > 0) {
                 if (this.removeStingerTime <= 0) {
-                    this.removeStingerTime = 20 * (30 - stingerCount);
+                    this.removeStingerTime = 20 * (30 - j);
                 }
 
-                this.removeStingerTime--;
+                --this.removeStingerTime;
                 if (this.removeStingerTime <= 0) {
-                    this.setStingerCount(stingerCount - 1);
+                    this.setStingerCount(j - 1);
                 }
             }
 
-            this.detectEquipmentUpdates();
+            this.detectEquipmentUpdatesPublic(); // CraftBukkit
             if (this.tickCount % 20 == 0) {
                 this.getCombatTracker().recheckStatus();
             }
@@ -2324,19 +2899,22 @@
             this.aiStep();
         }
 
-        double d = this.getX() - this.xo;
+        double d0 = this.getX() - this.xo;
         double d1 = this.getZ() - this.zo;
-        float f = (float)(d * d + d1 * d1);
+        float f = (float) (d0 * d0 + d1 * d1);
         float f1 = this.yBodyRot;
         float f2 = 0.0F;
+
         this.oRun = this.run;
         float f3 = 0.0F;
+
         if (f > 0.0025000002F) {
             f3 = 1.0F;
-            f2 = (float)Math.sqrt((double)f) * 3.0F;
-            float f4 = (float)Mth.atan2(d1, d) * (180.0F / (float)Math.PI) - 90.0F;
-            float abs = Mth.abs(Mth.wrapDegrees(this.getYRot()) - f4);
-            if (95.0F < abs && abs < 265.0F) {
+            f2 = (float) Math.sqrt((double) f) * 3.0F;
+            float f4 = (float) Mth.atan2(d1, d0) * 57.295776F - 90.0F;
+            float f5 = Mth.abs(Mth.wrapDegrees(this.getYRot()) - f4);
+
+            if (95.0F < f5 && f5 < 265.0F) {
                 f1 = f4 - 180.0F;
             } else {
                 f1 = f4;
@@ -2351,9 +2929,9 @@
             f3 = 0.0F;
         }
 
-        this.run = this.run + (f3 - this.run) * 0.3F;
+        this.run += (f3 - this.run) * 0.3F;
         this.level().getProfiler().push("headTurn");
-        float var12 = this.tickHeadTurn(f1, f2);
+        f2 = this.tickHeadTurn(f1, f2);
         this.level().getProfiler().pop();
         this.level().getProfiler().push("rangeChecks");
 
@@ -2390,9 +2968,9 @@
         }
 
         this.level().getProfiler().pop();
-        this.animStep += var12;
+        this.animStep += f2;
         if (this.isFallFlying()) {
-            this.fallFlyTicks++;
+            ++this.fallFlyTicks;
         } else {
             this.fallFlyTicks = 0;
         }
@@ -2404,46 +2982,53 @@
         this.refreshDirtyAttributes();
     }
 
-    private void detectEquipmentUpdates() {
+    public void detectEquipmentUpdatesPublic() { // CraftBukkit
         Map<EquipmentSlot, ItemStack> map = this.collectEquipmentChanges();
+
         if (map != null) {
             this.handleHandSwap(map);
             if (!map.isEmpty()) {
                 this.handleEquipmentChanges(map);
             }
         }
+
     }
 
     @Nullable
     private Map<EquipmentSlot, ItemStack> collectEquipmentChanges() {
         Map<EquipmentSlot, ItemStack> map = null;
+        EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
+        int i = aenumitemslot.length;
 
-        for (EquipmentSlot equipmentSlot : EquipmentSlot.values()) {
-            ItemStack lastHandItem;
-            switch (equipmentSlot.getType()) {
+        for (int j = 0; j < i; ++j) {
+            EquipmentSlot enumitemslot = aenumitemslot[j];
+            ItemStack itemstack;
+
+            switch (enumitemslot.getType()) {
                 case HAND:
-                    lastHandItem = this.getLastHandItem(equipmentSlot);
+                    itemstack = this.getLastHandItem(enumitemslot);
                     break;
                 case ARMOR:
-                    lastHandItem = this.getLastArmorItem(equipmentSlot);
+                    itemstack = this.getLastArmorItem(enumitemslot);
                     break;
                 default:
                     continue;
             }
 
-            ItemStack itemBySlot = this.getItemBySlot(equipmentSlot);
-            if (this.equipmentHasChanged(lastHandItem, itemBySlot)) {
+            ItemStack itemstack1 = this.getItemBySlot(enumitemslot);
+
+            if (this.equipmentHasChanged(itemstack, itemstack1)) {
                 if (map == null) {
                     map = Maps.newEnumMap(EquipmentSlot.class);
                 }
 
-                map.put(equipmentSlot, itemBySlot);
-                if (!lastHandItem.isEmpty()) {
-                    this.getAttributes().removeAttributeModifiers(lastHandItem.getAttributeModifiers(equipmentSlot));
+                map.put(enumitemslot, itemstack1);
+                if (!itemstack.isEmpty()) {
+                    this.getAttributes().removeAttributeModifiers(itemstack.getAttributeModifiers(enumitemslot));
                 }
 
-                if (!itemBySlot.isEmpty()) {
-                    this.getAttributes().addTransientAttributeModifiers(itemBySlot.getAttributeModifiers(equipmentSlot));
+                if (!itemstack1.isEmpty()) {
+                    this.getAttributes().addTransientAttributeModifiers(itemstack1.getAttributeModifiers(enumitemslot));
                 }
             }
         }
@@ -2456,38 +3041,40 @@
     }
 
     private void handleHandSwap(Map<EquipmentSlot, ItemStack> hands) {
-        ItemStack itemStack = hands.get(EquipmentSlot.MAINHAND);
-        ItemStack itemStack1 = hands.get(EquipmentSlot.OFFHAND);
-        if (itemStack != null
-            && itemStack1 != null
-            && ItemStack.matches(itemStack, this.getLastHandItem(EquipmentSlot.OFFHAND))
-            && ItemStack.matches(itemStack1, this.getLastHandItem(EquipmentSlot.MAINHAND))) {
-            ((ServerLevel)this.level()).getChunkSource().broadcast(this, new ClientboundEntityEventPacket(this, (byte)55));
+        ItemStack itemstack = (ItemStack) hands.get(EquipmentSlot.MAINHAND);
+        ItemStack itemstack1 = (ItemStack) hands.get(EquipmentSlot.OFFHAND);
+
+        if (itemstack != null && itemstack1 != null && ItemStack.matches(itemstack, this.getLastHandItem(EquipmentSlot.OFFHAND)) && ItemStack.matches(itemstack1, this.getLastHandItem(EquipmentSlot.MAINHAND))) {
+            ((ServerLevel) this.level()).getChunkSource().broadcast(this, new ClientboundEntityEventPacket(this, (byte) 55));
             hands.remove(EquipmentSlot.MAINHAND);
             hands.remove(EquipmentSlot.OFFHAND);
-            this.setLastHandItem(EquipmentSlot.MAINHAND, itemStack.copy());
-            this.setLastHandItem(EquipmentSlot.OFFHAND, itemStack1.copy());
+            this.setLastHandItem(EquipmentSlot.MAINHAND, itemstack.copy());
+            this.setLastHandItem(EquipmentSlot.OFFHAND, itemstack1.copy());
         }
+
     }
 
     private void handleEquipmentChanges(Map<EquipmentSlot, ItemStack> equipments) {
         List<Pair<EquipmentSlot, ItemStack>> list = Lists.newArrayListWithCapacity(equipments.size());
-        equipments.forEach((slot, stack) -> {
-            ItemStack itemStack = stack.copy();
-            list.add(Pair.of(slot, itemStack));
-            switch (slot.getType()) {
+
+        equipments.forEach((enumitemslot, itemstack) -> {
+            ItemStack itemstack1 = itemstack.copy();
+
+            list.add(Pair.of(enumitemslot, itemstack1));
+            switch (enumitemslot.getType()) {
                 case HAND:
-                    this.setLastHandItem(slot, itemStack);
+                    this.setLastHandItem(enumitemslot, itemstack1);
                     break;
                 case ARMOR:
-                    this.setLastArmorItem(slot, itemStack);
+                    this.setLastArmorItem(enumitemslot, itemstack1);
             }
+
         });
-        ((ServerLevel)this.level()).getChunkSource().broadcast(this, new ClientboundSetEquipmentPacket(this.getId(), list));
+        ((ServerLevel) this.level()).getChunkSource().broadcast(this, new ClientboundSetEquipmentPacket(this.getId(), list));
     }
 
     private ItemStack getLastArmorItem(EquipmentSlot slot) {
-        return this.lastArmorItemStacks.get(slot.getIndex());
+        return (ItemStack) this.lastArmorItemStacks.get(slot.getIndex());
     }
 
     private void setLastArmorItem(EquipmentSlot slot, ItemStack stack) {
@@ -2495,7 +3082,7 @@
     }
 
     private ItemStack getLastHandItem(EquipmentSlot slot) {
-        return this.lastHandItemStacks.get(slot.getIndex());
+        return (ItemStack) this.lastHandItemStacks.get(slot.getIndex());
     }
 
     private void setLastHandItem(EquipmentSlot slot, ItemStack stack) {
@@ -2503,15 +3090,18 @@
     }
 
     protected float tickHeadTurn(float yRot, float animStep) {
-        float f = Mth.wrapDegrees(yRot - this.yBodyRot);
-        this.yBodyRot += f * 0.3F;
-        float f1 = Mth.wrapDegrees(this.getYRot() - this.yBodyRot);
-        float maxHeadRotationRelativeToBody = this.getMaxHeadRotationRelativeToBody();
-        if (Math.abs(f1) > maxHeadRotationRelativeToBody) {
-            this.yBodyRot = this.yBodyRot + (f1 - (float)Mth.sign((double)f1) * maxHeadRotationRelativeToBody);
+        float f2 = Mth.wrapDegrees(yRot - this.yBodyRot);
+
+        this.yBodyRot += f2 * 0.3F;
+        float f3 = Mth.wrapDegrees(this.getYRot() - this.yBodyRot);
+        float f4 = this.getMaxHeadRotationRelativeToBody();
+
+        if (Math.abs(f3) > f4) {
+            this.yBodyRot += f3 - (float) Mth.sign((double) f3) * f4;
         }
 
-        boolean flag = f1 < -90.0F || f1 >= 90.0F;
+        boolean flag = f3 < -90.0F || f3 >= 90.0F;
+
         if (flag) {
             animStep *= -1.0F;
         }
@@ -2525,7 +3115,7 @@
 
     public void aiStep() {
         if (this.noJumpDelay > 0) {
-            this.noJumpDelay--;
+            --this.noJumpDelay;
         }
 
         if (this.isControlledByLocalInstance()) {
@@ -2535,33 +3125,34 @@
 
         if (this.lerpSteps > 0) {
             this.lerpPositionAndRotationStep(this.lerpSteps, this.lerpX, this.lerpY, this.lerpZ, this.lerpYRot, this.lerpXRot);
-            this.lerpSteps--;
+            --this.lerpSteps;
         } else if (!this.isEffectiveAi()) {
-            this.setDeltaMovement(this.getDeltaMovement().scale(0.98));
+            this.setDeltaMovement(this.getDeltaMovement().scale(0.98D));
         }
 
         if (this.lerpHeadSteps > 0) {
             this.lerpHeadRotationStep(this.lerpHeadSteps, this.lerpYHeadRot);
-            this.lerpHeadSteps--;
+            --this.lerpHeadSteps;
         }
 
-        Vec3 deltaMovement = this.getDeltaMovement();
-        double d = deltaMovement.x;
-        double d1 = deltaMovement.y;
-        double d2 = deltaMovement.z;
-        if (Math.abs(deltaMovement.x) < 0.003) {
-            d = 0.0;
+        Vec3 vec3d = this.getDeltaMovement();
+        double d0 = vec3d.x;
+        double d1 = vec3d.y;
+        double d2 = vec3d.z;
+
+        if (Math.abs(vec3d.x) < 0.003D) {
+            d0 = 0.0D;
         }
 
-        if (Math.abs(deltaMovement.y) < 0.003) {
-            d1 = 0.0;
+        if (Math.abs(vec3d.y) < 0.003D) {
+            d1 = 0.0D;
         }
 
-        if (Math.abs(deltaMovement.z) < 0.003) {
-            d2 = 0.0;
+        if (Math.abs(vec3d.z) < 0.003D) {
+            d2 = 0.0D;
         }
 
-        this.setDeltaMovement(d, d1, d2);
+        this.setDeltaMovement(d0, d1, d2);
         this.level().getProfiler().push("ai");
         if (this.isImmobile()) {
             this.jumping = false;
@@ -2576,26 +3167,24 @@
         this.level().getProfiler().pop();
         this.level().getProfiler().push("jump");
         if (this.jumping && this.isAffectedByFluids()) {
-            double fluidHeight;
+            double d3;
+
             if (this.isInLava()) {
-                fluidHeight = this.getFluidHeight(FluidTags.LAVA);
+                d3 = this.getFluidHeight(FluidTags.LAVA);
             } else {
-                fluidHeight = this.getFluidHeight(FluidTags.WATER);
+                d3 = this.getFluidHeight(FluidTags.WATER);
             }
 
-            boolean flag = this.isInWater() && fluidHeight > 0.0;
-            double fluidJumpThreshold = this.getFluidJumpThreshold();
-            if (!flag || this.onGround() && !(fluidHeight > fluidJumpThreshold)) {
-                if (!this.isInLava() || this.onGround() && !(fluidHeight > fluidJumpThreshold)) {
-                    if ((this.onGround() || flag && fluidHeight <= fluidJumpThreshold) && this.noJumpDelay == 0) {
-                        this.jumpFromGround();
-                        this.noJumpDelay = 10;
-                    }
-                } else {
-                    this.jumpInLiquid(FluidTags.LAVA);
-                }
-            } else {
+            boolean flag = this.isInWater() && d3 > 0.0D;
+            double d4 = this.getFluidJumpThreshold();
+
+            if (flag && (!this.onGround() || d3 > d4)) {
                 this.jumpInLiquid(FluidTags.WATER);
+            } else if (this.isInLava() && (!this.onGround() || d3 > d4)) {
+                this.jumpInLiquid(FluidTags.LAVA);
+            } else if ((this.onGround() || flag && d3 <= d4) && this.noJumpDelay == 0) {
+                this.jumpFromGround();
+                this.noJumpDelay = 10;
             }
         } else {
             this.noJumpDelay = 0;
@@ -2606,29 +3195,38 @@
         this.xxa *= 0.98F;
         this.zza *= 0.98F;
         this.updateFallFlying();
-        AABB boundingBox = this.getBoundingBox();
-        Vec3 vec3 = new Vec3((double)this.xxa, (double)this.yya, (double)this.zza);
+        AABB axisalignedbb = this.getBoundingBox();
+        Vec3 vec3d1 = new Vec3((double) this.xxa, (double) this.yya, (double) this.zza);
+
         if (this.hasEffect(MobEffects.SLOW_FALLING) || this.hasEffect(MobEffects.LEVITATION)) {
             this.resetFallDistance();
         }
 
-        label104: {
-            if (this.getControllingPassenger() instanceof Player player && this.isAlive()) {
-                this.travelRidden(player, vec3);
-                break label104;
+        label104:
+        {
+            LivingEntity entityliving = this.getControllingPassenger();
+
+            if (entityliving instanceof net.minecraft.world.entity.player.Player) {
+                net.minecraft.world.entity.player.Player entityhuman = (net.minecraft.world.entity.player.Player) entityliving;
+
+                if (this.isAlive()) {
+                    this.travelRidden(entityhuman, vec3d1);
+                    break label104;
+                }
             }
 
-            this.travel(vec3);
+            this.travel(vec3d1);
         }
 
         this.level().getProfiler().pop();
         this.level().getProfiler().push("freezing");
         if (!this.level().isClientSide && !this.isDeadOrDying()) {
-            int ticksFrozen = this.getTicksFrozen();
+            int i = this.getTicksFrozen();
+
             if (this.isInPowderSnow && this.canFreeze()) {
-                this.setTicksFrozen(Math.min(this.getTicksRequiredToFreeze(), ticksFrozen + 1));
+                this.setTicksFrozen(Math.min(this.getTicksRequiredToFreeze(), i + 1));
             } else {
-                this.setTicksFrozen(Math.max(0, ticksFrozen - 2));
+                this.setTicksFrozen(Math.max(0, i - 2));
             }
         }
 
@@ -2641,8 +3239,8 @@
         this.level().getProfiler().pop();
         this.level().getProfiler().push("push");
         if (this.autoSpinAttackTicks > 0) {
-            this.autoSpinAttackTicks--;
-            this.checkAutoSpinAttack(boundingBox, this.getBoundingBox());
+            --this.autoSpinAttackTicks;
+            this.checkAutoSpinAttack(axisalignedbb, this.getBoundingBox());
         }
 
         this.pushEntities();
@@ -2650,6 +3248,7 @@
         if (!this.level().isClientSide && this.isSensitiveToWater() && this.isInWaterRainOrBubble()) {
             this.hurt(this.damageSources().drown(), 1.0F);
         }
+
     }
 
     public boolean isSensitiveToWater() {
@@ -2657,72 +3256,94 @@
     }
 
     private void updateFallFlying() {
-        boolean sharedFlag = this.getSharedFlag(7);
-        if (sharedFlag && !this.onGround() && !this.isPassenger() && !this.hasEffect(MobEffects.LEVITATION)) {
-            ItemStack itemBySlot = this.getItemBySlot(EquipmentSlot.CHEST);
-            if (itemBySlot.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(itemBySlot)) {
-                sharedFlag = true;
+        boolean flag = this.getSharedFlag(7);
+
+        if (flag && !this.onGround() && !this.isPassenger() && !this.hasEffect(MobEffects.LEVITATION)) {
+            ItemStack itemstack = this.getItemBySlot(EquipmentSlot.CHEST);
+
+            if (itemstack.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(itemstack)) {
+                flag = true;
                 int i = this.fallFlyTicks + 1;
+
                 if (!this.level().isClientSide && i % 10 == 0) {
-                    int i1 = i / 10;
-                    if (i1 % 2 == 0) {
-                        itemBySlot.hurtAndBreak(1, this, entity -> entity.broadcastBreakEvent(EquipmentSlot.CHEST));
+                    int j = i / 10;
+
+                    if (j % 2 == 0) {
+                        itemstack.hurtAndBreak(1, this, (entityliving) -> {
+                            entityliving.broadcastBreakEvent(EquipmentSlot.CHEST);
+                        });
                     }
 
                     this.gameEvent(GameEvent.ELYTRA_GLIDE);
                 }
             } else {
-                sharedFlag = false;
+                flag = false;
             }
         } else {
-            sharedFlag = false;
+            flag = false;
         }
 
         if (!this.level().isClientSide) {
-            this.setSharedFlag(7, sharedFlag);
+            if (flag != this.getSharedFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, flag).isCancelled()) // CraftBukkit
+            this.setSharedFlag(7, flag);
         }
-    }
 
-    protected void serverAiStep() {
     }
 
+    protected void serverAiStep() {}
+
     protected void pushEntities() {
         if (this.level().isClientSide()) {
-            this.level().getEntities(EntityTypeTest.forClass(Player.class), this.getBoundingBox(), EntitySelector.pushableBy(this)).forEach(this::doPush);
+            this.level().getEntities(EntityTypeTest.forClass(net.minecraft.world.entity.player.Player.class), this.getBoundingBox(), EntitySelector.pushableBy(this)).forEach(this::doPush);
         } else {
-            List<Entity> entities = this.level().getEntities(this, this.getBoundingBox(), EntitySelector.pushableBy(this));
-            if (!entities.isEmpty()) {
-                int _int = this.level().getGameRules().getInt(GameRules.RULE_MAX_ENTITY_CRAMMING);
-                if (_int > 0 && entities.size() > _int - 1 && this.random.nextInt(4) == 0) {
-                    int i = 0;
+            List<Entity> list = this.level().getEntities((Entity) this, this.getBoundingBox(), EntitySelector.pushableBy(this));
 
-                    for (Entity entity : entities) {
+            if (!list.isEmpty()) {
+                int i = this.level().getGameRules().getInt(GameRules.RULE_MAX_ENTITY_CRAMMING);
+
+                if (i > 0 && list.size() > i - 1 && this.random.nextInt(4) == 0) {
+                    int j = 0;
+                    Iterator iterator = list.iterator();
+
+                    while (iterator.hasNext()) {
+                        Entity entity = (Entity) iterator.next();
+
                         if (!entity.isPassenger()) {
-                            i++;
+                            ++j;
                         }
                     }
 
-                    if (i > _int - 1) {
+                    if (j > i - 1) {
                         this.hurt(this.damageSources().cramming(), 6.0F);
                     }
                 }
 
-                for (Entity entity1 : entities) {
+                Iterator iterator1 = list.iterator();
+
+                while (iterator1.hasNext()) {
+                    Entity entity1 = (Entity) iterator1.next();
+
                     this.doPush(entity1);
                 }
             }
+
         }
     }
 
     protected void checkAutoSpinAttack(AABB boundingBoxBeforeSpin, AABB boundingBoxAfterSpin) {
-        AABB aABB = boundingBoxBeforeSpin.minmax(boundingBoxAfterSpin);
-        List<Entity> entities = this.level().getEntities(this, aABB);
-        if (!entities.isEmpty()) {
-            for (Entity entity : entities) {
+        AABB axisalignedbb2 = boundingBoxBeforeSpin.minmax(boundingBoxAfterSpin);
+        List<Entity> list = this.level().getEntities(this, axisalignedbb2);
+
+        if (!list.isEmpty()) {
+            Iterator iterator = list.iterator();
+
+            while (iterator.hasNext()) {
+                Entity entity = (Entity) iterator.next();
+
                 if (entity instanceof LivingEntity) {
-                    this.doAutoAttackOnTouch((LivingEntity)entity);
+                    this.doAutoAttackOnTouch((LivingEntity) entity);
                     this.autoSpinAttackTicks = 0;
-                    this.setDeltaMovement(this.getDeltaMovement().scale(-0.2));
+                    this.setDeltaMovement(this.getDeltaMovement().scale(-0.2D));
                     break;
                 }
             }
@@ -2733,26 +3354,28 @@
         if (!this.level().isClientSide && this.autoSpinAttackTicks <= 0) {
             this.setLivingEntityFlag(4, false);
         }
+
     }
 
     protected void doPush(Entity entity) {
         entity.push(this);
     }
 
-    protected void doAutoAttackOnTouch(LivingEntity target) {
-    }
+    protected void doAutoAttackOnTouch(LivingEntity target) {}
 
     public boolean isAutoSpinAttack() {
-        return (this.entityData.get(DATA_LIVING_ENTITY_FLAGS) & 4) != 0;
+        return ((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS) & 4) != 0;
     }
 
     @Override
     public void stopRiding() {
-        Entity vehicle = this.getVehicle();
+        Entity entity = this.getVehicle();
+
         super.stopRiding();
-        if (vehicle != null && vehicle != this.getVehicle() && !this.level().isClientSide) {
-            this.dismountVehicle(vehicle);
+        if (entity != null && entity != this.getVehicle() && !this.level().isClientSide) {
+            this.dismountVehicle(entity);
         }
+
     }
 
     @Override
@@ -2764,12 +3387,12 @@
     }
 
     @Override
-    public void lerpTo(double d, double d1, double d2, float f, float f1, int i) {
-        this.lerpX = d;
+    public void lerpTo(double d0, double d1, double d2, float f, float f1, int i) {
+        this.lerpX = d0;
         this.lerpY = d1;
         this.lerpZ = d2;
-        this.lerpYRot = (double)f;
-        this.lerpXRot = (double)f1;
+        this.lerpYRot = (double) f;
+        this.lerpXRot = (double) f1;
         this.lerpSteps = i;
     }
 
@@ -2790,17 +3413,17 @@
 
     @Override
     public float lerpTargetXRot() {
-        return this.lerpSteps > 0 ? (float)this.lerpXRot : this.getXRot();
+        return this.lerpSteps > 0 ? (float) this.lerpXRot : this.getXRot();
     }
 
     @Override
     public float lerpTargetYRot() {
-        return this.lerpSteps > 0 ? (float)this.lerpYRot : this.getYRot();
+        return this.lerpSteps > 0 ? (float) this.lerpYRot : this.getYRot();
     }
 
     @Override
     public void lerpHeadTo(float yaw, int pitch) {
-        this.lerpYHeadRot = (double)yaw;
+        this.lerpYHeadRot = (double) yaw;
         this.lerpHeadSteps = pitch;
     }
 
@@ -2809,28 +3432,29 @@
     }
 
     public void onItemPickup(ItemEntity itemEntity) {
-        Entity owner = itemEntity.getOwner();
-        if (owner instanceof ServerPlayer) {
-            CriteriaTriggers.THROWN_ITEM_PICKED_UP_BY_ENTITY.trigger((ServerPlayer)owner, itemEntity.getItem(), this);
+        Entity entity = itemEntity.getOwner();
+
+        if (entity instanceof ServerPlayer) {
+            CriteriaTriggers.THROWN_ITEM_PICKED_UP_BY_ENTITY.trigger((ServerPlayer) entity, itemEntity.getItem(), this);
         }
+
     }
 
     public void take(Entity entity, int amount) {
-        if (!entity.isRemoved()
-            && !this.level().isClientSide
-            && (entity instanceof ItemEntity || entity instanceof AbstractArrow || entity instanceof ExperienceOrb)) {
-            ((ServerLevel)this.level()).getChunkSource().broadcast(entity, new ClientboundTakeItemEntityPacket(entity.getId(), this.getId(), amount));
+        if (!entity.isRemoved() && !this.level().isClientSide && (entity instanceof ItemEntity || entity instanceof AbstractArrow || entity instanceof ExperienceOrb)) {
+            ((ServerLevel) this.level()).getChunkSource().broadcast(entity, new ClientboundTakeItemEntityPacket(entity.getId(), this.getId(), amount));
         }
+
     }
 
     public boolean hasLineOfSight(Entity entity) {
         if (entity.level() != this.level()) {
             return false;
         } else {
-            Vec3 vec3 = new Vec3(this.getX(), this.getEyeY(), this.getZ());
-            Vec3 vec31 = new Vec3(entity.getX(), entity.getEyeY(), entity.getZ());
-            return !(vec31.distanceTo(vec3) > 128.0)
-                && this.level().clip(new ClipContext(vec3, vec31, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, this)).getType() == HitResult.Type.MISS;
+            Vec3 vec3d = new Vec3(this.getX(), this.getEyeY(), this.getZ());
+            Vec3 vec3d1 = new Vec3(entity.getX(), entity.getEyeY(), entity.getZ());
+
+            return vec3d1.distanceTo(vec3d) > 128.0D ? false : this.level().clip(new ClipContext(vec3d, vec3d1, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, this)).getType() == HitResult.EnumMovingObjectType.MISS;
         }
     }
 
@@ -2840,25 +3464,33 @@
     }
 
     public float getAttackAnim(float partialTick) {
-        float f = this.attackAnim - this.oAttackAnim;
-        if (f < 0.0F) {
-            f++;
+        float f1 = this.attackAnim - this.oAttackAnim;
+
+        if (f1 < 0.0F) {
+            ++f1;
         }
 
-        return this.oAttackAnim + f * partialTick;
+        return this.oAttackAnim + f1 * partialTick;
     }
 
     @Override
     public boolean isPickable() {
-        return !this.isRemoved();
+        return !this.isRemoved() && this.collides; // CraftBukkit
     }
 
     @Override
     public boolean isPushable() {
-        return this.isAlive() && !this.isSpectator() && !this.onClimbable();
+        return this.isAlive() && !this.isSpectator() && !this.onClimbable() && this.collides; // CraftBukkit
     }
 
+    // CraftBukkit start - collidable API
     @Override
+    public boolean canCollideWithBukkit(Entity entity) {
+        return isPushable() && this.collides != this.collidableExemptions.contains(entity.getUUID());
+    }
+    // CraftBukkit end
+
+    @Override
     public float getYHeadRot() {
         return this.yHeadRot;
     }
@@ -2879,7 +3511,7 @@
     }
 
     public static Vec3 resetForwardDirectionOfRelativePortalPosition(Vec3 relativePortalPosition) {
-        return new Vec3(relativePortalPosition.x, relativePortalPosition.y, 0.0);
+        return new Vec3(relativePortalPosition.x, relativePortalPosition.y, 0.0D);
     }
 
     public float getAbsorptionAmount() {
@@ -2894,11 +3526,9 @@
         this.absorptionAmount = f;
     }
 
-    public void onEnterCombat() {
-    }
+    public void onEnterCombat() {}
 
-    public void onLeaveCombat() {
-    }
+    public void onLeaveCombat() {}
 
     protected void updateEffectVisibility() {
         this.effectsDirty = true;
@@ -2907,11 +3537,11 @@
     public abstract HumanoidArm getMainArm();
 
     public boolean isUsingItem() {
-        return (this.entityData.get(DATA_LIVING_ENTITY_FLAGS) & 1) > 0;
+        return ((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS) & 1) > 0;
     }
 
-    public InteractionHand getUsedItemHand() {
-        return (this.entityData.get(DATA_LIVING_ENTITY_FLAGS) & 2) > 0 ? InteractionHand.OFF_HAND : InteractionHand.MAIN_HAND;
+    public EnumHand getUsedItemHand() {
+        return ((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS) & 2) > 0 ? EnumHand.OFF_HAND : EnumHand.MAIN_HAND;
     }
 
     private void updatingUsingItem() {
@@ -2923,6 +3553,7 @@
                 this.stopUsingItem();
             }
         }
+
     }
 
     protected void updateUsingItem(ItemStack usingItem) {
@@ -2934,14 +3565,16 @@
         if (--this.useItemRemaining == 0 && !this.level().isClientSide && !usingItem.useOnRelease()) {
             this.completeUsingItem();
         }
+
     }
 
     private boolean shouldTriggerItemUseEffects() {
-        int useItemRemainingTicks = this.getUseItemRemainingTicks();
-        FoodProperties foodProperties = this.useItem.getItem().getFoodProperties();
-        boolean flag = foodProperties != null && foodProperties.isFastFood();
-        flag |= useItemRemainingTicks <= this.useItem.getUseDuration() - 7;
-        return flag && useItemRemainingTicks % 4 == 0;
+        int i = this.getUseItemRemainingTicks();
+        FoodProperties foodinfo = this.useItem.getItem().getFoodProperties();
+        boolean flag = foodinfo != null && foodinfo.isFastFood();
+
+        flag |= i <= this.useItem.getUseDuration() - 7;
+        return flag && i % 4 == 0;
     }
 
     private void updateSwimAmount() {
@@ -2951,40 +3584,45 @@
         } else {
             this.swimAmount = Math.max(0.0F, this.swimAmount - 0.09F);
         }
+
     }
 
     protected void setLivingEntityFlag(int key, boolean value) {
-        int i = this.entityData.get(DATA_LIVING_ENTITY_FLAGS);
+        byte b0 = (Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS);
+        int j;
+
         if (value) {
-            i |= key;
+            j = b0 | key;
         } else {
-            i &= ~key;
+            j = b0 & ~key;
         }
 
-        this.entityData.set(DATA_LIVING_ENTITY_FLAGS, (byte)i);
+        this.entityData.set(LivingEntity.DATA_LIVING_ENTITY_FLAGS, (byte) j);
     }
 
-    public void startUsingItem(InteractionHand hand) {
-        ItemStack itemInHand = this.getItemInHand(hand);
-        if (!itemInHand.isEmpty() && !this.isUsingItem()) {
-            this.useItem = itemInHand;
-            this.useItemRemaining = itemInHand.getUseDuration();
+    public void startUsingItem(EnumHand hand) {
+        ItemStack itemstack = this.getItemInHand(hand);
+
+        if (!itemstack.isEmpty() && !this.isUsingItem()) {
+            this.useItem = itemstack;
+            this.useItemRemaining = itemstack.getUseDuration();
             if (!this.level().isClientSide) {
                 this.setLivingEntityFlag(1, true);
-                this.setLivingEntityFlag(2, hand == InteractionHand.OFF_HAND);
+                this.setLivingEntityFlag(2, hand == EnumHand.OFF_HAND);
                 this.gameEvent(GameEvent.ITEM_INTERACT_START);
             }
+
         }
     }
 
     @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> key) {
         super.onSyncedDataUpdated(key);
-        if (SLEEPING_POS_ID.equals(key)) {
+        if (LivingEntity.SLEEPING_POS_ID.equals(key)) {
             if (this.level().isClientSide) {
                 this.getSleepingPos().ifPresent(this::setPosToBed);
             }
-        } else if (DATA_LIVING_ENTITY_FLAGS.equals(key) && this.level().isClientSide) {
+        } else if (LivingEntity.DATA_LIVING_ENTITY_FLAGS.equals(key) && this.level().isClientSide) {
             if (this.isUsingItem() && this.useItem.isEmpty()) {
                 this.useItem = this.getItemInHand(this.getUsedItemHand());
                 if (!this.useItem.isEmpty()) {
@@ -2995,6 +3633,7 @@
                 this.useItemRemaining = 0;
             }
         }
+
     }
 
     @Override
@@ -3007,48 +3646,72 @@
 
     protected void triggerItemUseEffects(ItemStack stack, int amount) {
         if (!stack.isEmpty() && this.isUsingItem()) {
-            if (stack.getUseAnimation() == UseAnim.DRINK) {
+            if (stack.getUseAnimation() == EnumAnimation.DRINK) {
                 this.playSound(this.getDrinkingSound(stack), 0.5F, this.level().random.nextFloat() * 0.1F + 0.9F);
             }
 
-            if (stack.getUseAnimation() == UseAnim.EAT) {
+            if (stack.getUseAnimation() == EnumAnimation.EAT) {
                 this.spawnItemParticles(stack, amount);
-                this.playSound(
-                    this.getEatingSound(stack), 0.5F + 0.5F * (float)this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F
-                );
+                this.playSound(this.getEatingSound(stack), 0.5F + 0.5F * (float) this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             }
+
         }
     }
 
     private void spawnItemParticles(ItemStack stack, int amount) {
-        for (int i = 0; i < amount; i++) {
-            Vec3 vec3 = new Vec3(((double)this.random.nextFloat() - 0.5) * 0.1, Math.random() * 0.1 + 0.1, 0.0);
-            vec3 = vec3.xRot(-this.getXRot() * (float) (Math.PI / 180.0));
-            vec3 = vec3.yRot(-this.getYRot() * (float) (Math.PI / 180.0));
-            double d = (double)(-this.random.nextFloat()) * 0.6 - 0.3;
-            Vec3 vec31 = new Vec3(((double)this.random.nextFloat() - 0.5) * 0.3, d, 0.6);
-            vec31 = vec31.xRot(-this.getXRot() * (float) (Math.PI / 180.0));
-            vec31 = vec31.yRot(-this.getYRot() * (float) (Math.PI / 180.0));
-            vec31 = vec31.add(this.getX(), this.getEyeY(), this.getZ());
-            this.level().addParticle(new ItemParticleOption(ParticleTypes.ITEM, stack), vec31.x, vec31.y, vec31.z, vec3.x, vec3.y + 0.05, vec3.z);
+        for (int j = 0; j < amount; ++j) {
+            Vec3 vec3d = new Vec3(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+
+            vec3d = vec3d.xRot(-this.getXRot() * 0.017453292F);
+            vec3d = vec3d.yRot(-this.getYRot() * 0.017453292F);
+            double d0 = (double) (-this.random.nextFloat()) * 0.6D - 0.3D;
+            Vec3 vec3d1 = new Vec3(((double) this.random.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+
+            vec3d1 = vec3d1.xRot(-this.getXRot() * 0.017453292F);
+            vec3d1 = vec3d1.yRot(-this.getYRot() * 0.017453292F);
+            vec3d1 = vec3d1.add(this.getX(), this.getEyeY(), this.getZ());
+            this.level().addParticle(new ItemParticleOption(ParticleTypes.ITEM, stack), vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z);
         }
+
     }
 
     protected void completeUsingItem() {
         if (!this.level().isClientSide || this.isUsingItem()) {
-            InteractionHand usedItemHand = this.getUsedItemHand();
-            if (!this.useItem.equals(this.getItemInHand(usedItemHand))) {
+            EnumHand enumhand = this.getUsedItemHand();
+
+            if (!this.useItem.equals(this.getItemInHand(enumhand))) {
                 this.releaseUsingItem();
             } else {
                 if (!this.useItem.isEmpty() && this.isUsingItem()) {
                     this.triggerItemUseEffects(this.useItem, 16);
-                    ItemStack itemStack = this.useItem.finishUsingItem(this.level(), this);
-                    if (itemStack != this.useItem) {
-                        this.setItemInHand(usedItemHand, itemStack);
+                    // CraftBukkit start - fire PlayerItemConsumeEvent
+                    ItemStack itemstack;
+                    if (this instanceof ServerPlayer) {
+                        org.bukkit.inventory.ItemStack craftItem = CraftItemStack.asBukkitCopy(this.useItem);
+                        org.bukkit.inventory.EquipmentSlot hand = org.bukkit.craftbukkit.CraftEquipmentSlot.getHand(enumhand);
+                        PlayerItemConsumeEvent event = new PlayerItemConsumeEvent((Player) this.getBukkitEntity(), craftItem, hand);
+                        this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                        if (event.isCancelled()) {
+                            // Update client
+                            ((ServerPlayer) this).getBukkitEntity().updateInventory();
+                            ((ServerPlayer) this).getBukkitEntity().updateScaledHealth();
+                            return;
+                        }
+
+                        itemstack = (craftItem.equals(event.getItem())) ? this.useItem.finishUsingItem(this.level(), this) : CraftItemStack.asNMSCopy(event.getItem()).finishUsingItem(this.level(), this);
+                    } else {
+                        itemstack = this.useItem.finishUsingItem(this.level(), this);
                     }
+                    // CraftBukkit end
 
+                    if (itemstack != this.useItem) {
+                        this.setItemInHand(enumhand, itemstack);
+                    }
+
                     this.stopUsingItem();
                 }
+
             }
         }
     }
@@ -3078,9 +3741,10 @@
 
     public void stopUsingItem() {
         if (!this.level().isClientSide) {
-            boolean isUsingItem = this.isUsingItem();
+            boolean flag = this.isUsingItem();
+
             this.setLivingEntityFlag(1, false);
-            if (isUsingItem) {
+            if (flag) {
                 this.gameEvent(GameEvent.ITEM_INTERACT_FINISH);
             }
         }
@@ -3092,7 +3756,8 @@
     public boolean isBlocking() {
         if (this.isUsingItem() && !this.useItem.isEmpty()) {
             Item item = this.useItem.getItem();
-            return item.getUseAnimation(this.useItem) == UseAnim.BLOCK && item.getUseDuration(this.useItem) - this.useItemRemaining >= 5;
+
+            return item.getUseAnimation(this.useItem) != EnumAnimation.BLOCK ? false : item.getUseDuration(this.useItem) - this.useItemRemaining >= 5;
         } else {
             return false;
         }
@@ -3108,56 +3773,91 @@
 
     @Override
     public boolean isVisuallySwimming() {
-        return super.isVisuallySwimming() || !this.isFallFlying() && this.hasPose(Pose.FALL_FLYING);
+        return super.isVisuallySwimming() || !this.isFallFlying() && this.hasPose(EntityPose.FALL_FLYING);
     }
 
     public int getFallFlyingTicks() {
         return this.fallFlyTicks;
     }
 
-    public boolean randomTeleport(double x, double y, double z, boolean broadcastTeleport) {
-        double x1 = this.getX();
-        double y1 = this.getY();
-        double z1 = this.getZ();
-        double d = y;
-        boolean flag = false;
-        BlockPos blockPos = BlockPos.containing(x, y, z);
-        Level level = this.level();
-        if (level.hasChunkAt(blockPos)) {
-            boolean flag1 = false;
+    public boolean randomTeleport(double x, double d1, double y, boolean flag) {
+        // CraftBukkit start
+        return randomTeleport(x, d1, y, flag, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN).orElse(false);
+    }
 
-            while (!flag1 && blockPos.getY() > level.getMinBuildHeight()) {
-                BlockPos blockPos1 = blockPos.below();
-                BlockState blockState = level.getBlockState(blockPos1);
-                if (blockState.blocksMotion()) {
-                    flag1 = true;
+    public Optional<Boolean> randomTeleport(double d0, double d1, double d2, boolean flag, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+        // CraftBukkit end
+        double d3 = this.getX();
+        double d4 = this.getY();
+        double d5 = this.getZ();
+        double d6 = d1;
+        boolean flag1 = false;
+        BlockPos blockposition = BlockPos.containing(d0, d1, d2);
+        Level world = this.level();
+
+        if (world.hasChunkAt(blockposition)) {
+            boolean flag2 = false;
+
+            while (!flag2 && blockposition.getY() > world.getMinBuildHeight()) {
+                BlockPos blockposition1 = blockposition.below();
+                IBlockData iblockdata = world.getBlockState(blockposition1);
+
+                if (iblockdata.blocksMotion()) {
+                    flag2 = true;
                 } else {
-                    d--;
-                    blockPos = blockPos1;
+                    --d6;
+                    blockposition = blockposition1;
                 }
             }
 
-            if (flag1) {
-                this.teleportTo(x, d, z);
-                if (level.noCollision(this) && !level.containsAnyLiquid(this.getBoundingBox())) {
-                    flag = true;
+            if (flag2) {
+                // CraftBukkit start - Teleport event
+                // this.teleportTo(d0, d6, d2);
+
+                // first set position, to check if the place to teleport is valid
+                this.setPos(d0, d6, d2);
+                if (world.noCollision((Entity) this) && !world.containsAnyLiquid(this.getBoundingBox())) {
+                    flag1 = true;
                 }
+                // now revert and call event if the teleport place is valid
+                this.setPos(d3, d4, d5);
+
+                if (flag1) {
+                    if (!(this instanceof ServerPlayer)) {
+                        EntityTeleportEvent teleport = new EntityTeleportEvent(this.getBukkitEntity(), new Location(this.level().getWorld(), d3, d4, d5), new Location(this.level().getWorld(), d0, d6, d2));
+                        this.level().getCraftServer().getPluginManager().callEvent(teleport);
+                        if (!teleport.isCancelled()) {
+                            Location to = teleport.getTo();
+                            this.teleportTo(to.getX(), to.getY(), to.getZ());
+                        } else {
+                            return Optional.empty();
+                        }
+                    } else {
+                        // player teleport event is called in the underlining code
+                        if (((ServerPlayer) this).connection.teleport(d0, d6, d2, this.getYRot(), this.getXRot(), java.util.Collections.emptySet(), cause)) {
+                            return Optional.empty();
+                        }
+                    }
+                }
+                // CraftBukkit end
             }
         }
 
-        if (!flag) {
-            this.teleportTo(x1, y1, z1);
-            return false;
+        if (!flag1) {
+            // this.enderTeleportTo(d3, d4, d5); // CraftBukkit - already set the location back
+            return Optional.of(false); // CraftBukkit
         } else {
-            if (broadcastTeleport) {
-                level.broadcastEntityEvent(this, (byte)46);
+            if (flag) {
+                world.broadcastEntityEvent(this, (byte) 46);
             }
 
-            if (this instanceof PathfinderMob pathfinderMob) {
-                pathfinderMob.getNavigation().stop();
+            if (this instanceof PathfinderMob) {
+                PathfinderMob entitycreature = (PathfinderMob) this;
+
+                entitycreature.getNavigation().stop();
             }
 
-            return true;
+            return Optional.of(true); // CraftBukkit
         }
     }
 
@@ -3169,37 +3869,31 @@
         return true;
     }
 
-    public void setRecordPlayingNearby(BlockPos jukebox, boolean partyParrot) {
-    }
+    public void setRecordPlayingNearby(BlockPos jukebox, boolean partyParrot) {}
 
     public boolean canTakeItem(ItemStack stack) {
         return false;
     }
 
     @Override
-    public EntityDimensions getDimensions(Pose pose) {
-        return pose == Pose.SLEEPING ? SLEEPING_DIMENSIONS : super.getDimensions(pose).scale(this.getScale());
+    public EntityDimensions getDimensions(EntityPose pose) {
+        return pose == EntityPose.SLEEPING ? LivingEntity.SLEEPING_DIMENSIONS : super.getDimensions(pose).scale(this.getScale());
     }
 
-    public ImmutableList<Pose> getDismountPoses() {
-        return ImmutableList.of(Pose.STANDING);
+    public ImmutableList<EntityPose> getDismountPoses() {
+        return ImmutableList.of(EntityPose.STANDING);
     }
 
-    public AABB getLocalBoundsForPose(Pose pose) {
-        EntityDimensions dimensions = this.getDimensions(pose);
-        return new AABB(
-            (double)(-dimensions.width / 2.0F),
-            0.0,
-            (double)(-dimensions.width / 2.0F),
-            (double)(dimensions.width / 2.0F),
-            (double)dimensions.height,
-            (double)(dimensions.width / 2.0F)
-        );
+    public AABB getLocalBoundsForPose(EntityPose pose) {
+        EntityDimensions entitysize = this.getDimensions(pose);
+
+        return new AABB((double) (-entitysize.width / 2.0F), 0.0D, (double) (-entitysize.width / 2.0F), (double) (entitysize.width / 2.0F), (double) entitysize.height, (double) (entitysize.width / 2.0F));
     }
 
-    protected boolean wouldNotSuffocateAtTargetPose(Pose pose) {
-        AABB aABB = this.getDimensions(pose).makeBoundingBox(this.position());
-        return this.level().noBlockCollision(this, aABB);
+    protected boolean wouldNotSuffocateAtTargetPose(EntityPose entitypose) {
+        AABB axisalignedbb = this.getDimensions(entitypose).makeBoundingBox(this.position());
+
+        return this.level().noBlockCollision(this, axisalignedbb);
     }
 
     @Override
@@ -3208,15 +3902,15 @@
     }
 
     public Optional<BlockPos> getSleepingPos() {
-        return this.entityData.get(SLEEPING_POS_ID);
+        return (Optional) this.entityData.get(LivingEntity.SLEEPING_POS_ID);
     }
 
     public void setSleepingPos(BlockPos pos) {
-        this.entityData.set(SLEEPING_POS_ID, Optional.of(pos));
+        this.entityData.set(LivingEntity.SLEEPING_POS_ID, Optional.of(pos));
     }
 
     public void clearSleepingPos() {
-        this.entityData.set(SLEEPING_POS_ID, Optional.empty());
+        this.entityData.set(LivingEntity.SLEEPING_POS_ID, Optional.empty());
     }
 
     public boolean isSleeping() {
@@ -3228,12 +3922,13 @@
             this.stopRiding();
         }
 
-        BlockState blockState = this.level().getBlockState(pos);
-        if (blockState.getBlock() instanceof BedBlock) {
-            this.level().setBlock(pos, blockState.setValue(BedBlock.OCCUPIED, Boolean.valueOf(true)), 3);
+        IBlockData iblockdata = this.level().getBlockState(pos);
+
+        if (iblockdata.getBlock() instanceof BedBlock) {
+            this.level().setBlock(pos, (IBlockData) iblockdata.setValue(BedBlock.OCCUPIED, true), 3);
         }
 
-        this.setPose(Pose.SLEEPING);
+        this.setPose(EntityPose.SLEEPING);
         this.setPosToBed(pos);
         this.setSleepingPos(pos);
         this.setDeltaMovement(Vec3.ZERO);
@@ -3241,40 +3936,53 @@
     }
 
     private void setPosToBed(BlockPos pos) {
-        this.setPos((double)pos.getX() + 0.5, (double)pos.getY() + 0.6875, (double)pos.getZ() + 0.5);
+        this.setPos((double) pos.getX() + 0.5D, (double) pos.getY() + 0.6875D, (double) pos.getZ() + 0.5D);
     }
 
     private boolean checkBedExists() {
-        return this.getSleepingPos().map(blockPos -> this.level().getBlockState(blockPos).getBlock() instanceof BedBlock).orElse(false);
+        return (Boolean) this.getSleepingPos().map((blockposition) -> {
+            return this.level().getBlockState(blockposition).getBlock() instanceof BedBlock;
+        }).orElse(false);
     }
 
     public void stopSleeping() {
-        this.getSleepingPos().filter(this.level()::hasChunkAt).ifPresent(blockPos -> {
-            BlockState blockState = this.level().getBlockState(blockPos);
-            if (blockState.getBlock() instanceof BedBlock) {
-                Direction direction = blockState.getValue(BedBlock.FACING);
-                this.level().setBlock(blockPos, blockState.setValue(BedBlock.OCCUPIED, Boolean.valueOf(false)), 3);
-                Vec3 vec31 = BedBlock.findStandUpPosition(this.getType(), this.level(), blockPos, direction, this.getYRot()).orElseGet(() -> {
-                    BlockPos blockPos1 = blockPos.above();
-                    return new Vec3((double)blockPos1.getX() + 0.5, (double)blockPos1.getY() + 0.1, (double)blockPos1.getZ() + 0.5);
+        Optional<BlockPos> optional = this.getSleepingPos(); // CraftBukkit - decompile error
+        Level world = this.level();
+
+        java.util.Objects.requireNonNull(world);
+        optional.filter(world::hasChunkAt).ifPresent((blockposition) -> {
+            IBlockData iblockdata = this.level().getBlockState(blockposition);
+
+            if (iblockdata.getBlock() instanceof BedBlock) {
+                Direction enumdirection = (Direction) iblockdata.getValue(BedBlock.FACING);
+
+                this.level().setBlock(blockposition, (IBlockData) iblockdata.setValue(BedBlock.OCCUPIED, false), 3);
+                Vec3 vec3d = (Vec3) BedBlock.findStandUpPosition(this.getType(), this.level(), blockposition, enumdirection, this.getYRot()).orElseGet(() -> {
+                    BlockPos blockposition1 = blockposition.above();
+
+                    return new Vec3((double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.1D, (double) blockposition1.getZ() + 0.5D);
                 });
-                Vec3 vec32 = Vec3.atBottomCenterOf(blockPos).subtract(vec31).normalize();
-                float f = (float)Mth.wrapDegrees(Mth.atan2(vec32.z, vec32.x) * 180.0F / (float)Math.PI - 90.0);
-                this.setPos(vec31.x, vec31.y, vec31.z);
+                Vec3 vec3d1 = Vec3.atBottomCenterOf(blockposition).subtract(vec3d).normalize();
+                float f = (float) Mth.wrapDegrees(Mth.atan2(vec3d1.z, vec3d1.x) * 57.2957763671875D - 90.0D);
+
+                this.setPos(vec3d.x, vec3d.y, vec3d.z);
                 this.setYRot(f);
                 this.setXRot(0.0F);
             }
+
         });
-        Vec3 vec3 = this.position();
-        this.setPose(Pose.STANDING);
-        this.setPos(vec3.x, vec3.y, vec3.z);
+        Vec3 vec3d = this.position();
+
+        this.setPose(EntityPose.STANDING);
+        this.setPos(vec3d.x, vec3d.y, vec3d.z);
         this.clearSleepingPos();
     }
 
     @Nullable
     public Direction getBedOrientation() {
-        BlockPos blockPos = this.getSleepingPos().orElse(null);
-        return blockPos != null ? BedBlock.getBedOrientation(this.level(), blockPos) : null;
+        BlockPos blockposition = (BlockPos) this.getSleepingPos().orElse(null); // CraftBukkit - decompile error
+
+        return blockposition != null ? BedBlock.getBedOrientation(this.level(), blockposition) : null;
     }
 
     @Override
@@ -3283,11 +3991,11 @@
     }
 
     @Override
-    protected final float getEyeHeight(Pose pose, EntityDimensions size) {
-        return pose == Pose.SLEEPING ? 0.2F : this.getStandingEyeHeight(pose, size);
+    protected final float getEyeHeight(EntityPose pose, EntityDimensions size) {
+        return pose == EntityPose.SLEEPING ? 0.2F : this.getStandingEyeHeight(pose, size);
     }
 
-    protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
+    protected float getStandingEyeHeight(EntityPose pose, EntityDimensions dimensions) {
         return super.getEyeHeight(pose, dimensions);
     }
 
@@ -3297,18 +4005,9 @@
 
     public ItemStack eat(Level level, ItemStack food) {
         if (food.isEdible()) {
-            level.playSound(
-                null,
-                this.getX(),
-                this.getY(),
-                this.getZ(),
-                this.getEatingSound(food),
-                SoundSource.NEUTRAL,
-                1.0F,
-                1.0F + (level.random.nextFloat() - level.random.nextFloat()) * 0.4F
-            );
+            level.playSound((net.minecraft.world.entity.player.Player) null, this.getX(), this.getY(), this.getZ(), this.getEatingSound(food), SoundSource.NEUTRAL, 1.0F, 1.0F + (level.random.nextFloat() - level.random.nextFloat()) * 0.4F);
             this.addEatEffect(food, level, this);
-            if (!(this instanceof Player) || !((Player)this).getAbilities().instabuild) {
+            if (!(this instanceof net.minecraft.world.entity.player.Player) || !((net.minecraft.world.entity.player.Player) this).getAbilities().instabuild) {
                 food.shrink(1);
             }
 
@@ -3320,13 +4019,20 @@
 
     private void addEatEffect(ItemStack food, Level level, LivingEntity livingEntity) {
         Item item = food.getItem();
+
         if (item.isEdible()) {
-            for (Pair<MobEffectInstance, Float> pair : item.getFoodProperties().getEffects()) {
-                if (!level.isClientSide && pair.getFirst() != null && level.random.nextFloat() < pair.getSecond()) {
-                    livingEntity.addEffect(new MobEffectInstance(pair.getFirst()));
+            List<Pair<MobEffectInstance, Float>> list = item.getFoodProperties().getEffects();
+            Iterator iterator = list.iterator();
+
+            while (iterator.hasNext()) {
+                Pair<MobEffectInstance, Float> pair = (Pair) iterator.next();
+
+                if (!level.isClientSide && pair.getFirst() != null && level.random.nextFloat() < (Float) pair.getSecond()) {
+                    livingEntity.addEffect(new MobEffectInstance((MobEffectInstance) pair.getFirst()), EntityPotionEffectEvent.Cause.FOOD); // CraftBukkit
                 }
             }
         }
+
     }
 
     private static byte entityEventForEquipmentBreak(EquipmentSlot slot) {
@@ -3352,15 +4058,16 @@
         this.level().broadcastEntityEvent(this, entityEventForEquipmentBreak(slot));
     }
 
-    public void broadcastBreakEvent(InteractionHand hand) {
-        this.broadcastBreakEvent(hand == InteractionHand.MAIN_HAND ? EquipmentSlot.MAINHAND : EquipmentSlot.OFFHAND);
+    public void broadcastBreakEvent(EnumHand hand) {
+        this.broadcastBreakEvent(hand == EnumHand.MAIN_HAND ? EquipmentSlot.MAINHAND : EquipmentSlot.OFFHAND);
     }
 
     @Override
     public AABB getBoundingBoxForCulling() {
         if (this.getItemBySlot(EquipmentSlot.HEAD).is(Items.DRAGON_HEAD)) {
             float f = 0.5F;
-            return this.getBoundingBox().inflate(0.5, 0.5, 0.5);
+
+            return this.getBoundingBox().inflate(0.5D, 0.5D, 0.5D);
         } else {
             return super.getBoundingBoxForCulling();
         }
@@ -3368,36 +4075,26 @@
 
     public static EquipmentSlot getEquipmentSlotForItem(ItemStack item) {
         Equipable equipable = Equipable.get(item);
+
         return equipable != null ? equipable.getEquipmentSlot() : EquipmentSlot.MAINHAND;
     }
 
     private static SlotAccess createEquipmentSlotAccess(LivingEntity entity, EquipmentSlot slot) {
-        return slot != EquipmentSlot.HEAD && slot != EquipmentSlot.MAINHAND && slot != EquipmentSlot.OFFHAND
-            ? SlotAccess.forEquipmentSlot(entity, slot, itemStack -> itemStack.isEmpty() || Mob.getEquipmentSlotForItem(itemStack) == slot)
-            : SlotAccess.forEquipmentSlot(entity, slot);
+        return slot != EquipmentSlot.HEAD && slot != EquipmentSlot.MAINHAND && slot != EquipmentSlot.OFFHAND ? SlotAccess.forEquipmentSlot(entity, slot, (itemstack) -> {
+            return itemstack.isEmpty() || Mob.getEquipmentSlotForItem(itemstack) == slot;
+        }) : SlotAccess.forEquipmentSlot(entity, slot);
     }
 
     @Nullable
     private static EquipmentSlot getEquipmentSlot(int index) {
-        if (index == 100 + EquipmentSlot.HEAD.getIndex()) {
-            return EquipmentSlot.HEAD;
-        } else if (index == 100 + EquipmentSlot.CHEST.getIndex()) {
-            return EquipmentSlot.CHEST;
-        } else if (index == 100 + EquipmentSlot.LEGS.getIndex()) {
-            return EquipmentSlot.LEGS;
-        } else if (index == 100 + EquipmentSlot.FEET.getIndex()) {
-            return EquipmentSlot.FEET;
-        } else if (index == 98) {
-            return EquipmentSlot.MAINHAND;
-        } else {
-            return index == 99 ? EquipmentSlot.OFFHAND : null;
-        }
+        return index == 100 + EquipmentSlot.HEAD.getIndex() ? EquipmentSlot.HEAD : (index == 100 + EquipmentSlot.CHEST.getIndex() ? EquipmentSlot.CHEST : (index == 100 + EquipmentSlot.LEGS.getIndex() ? EquipmentSlot.LEGS : (index == 100 + EquipmentSlot.FEET.getIndex() ? EquipmentSlot.FEET : (index == 98 ? EquipmentSlot.MAINHAND : (index == 99 ? EquipmentSlot.OFFHAND : null)))));
     }
 
     @Override
     public SlotAccess getSlot(int slot) {
-        EquipmentSlot equipmentSlot = getEquipmentSlot(slot);
-        return equipmentSlot != null ? createEquipmentSlotAccess(this, equipmentSlot) : super.getSlot(slot);
+        EquipmentSlot enumitemslot = getEquipmentSlot(slot);
+
+        return enumitemslot != null ? createEquipmentSlotAccess(this, enumitemslot) : super.getSlot(slot);
     }
 
     @Override
@@ -3405,10 +4102,8 @@
         if (this.isSpectator()) {
             return false;
         } else {
-            boolean flag = !this.getItemBySlot(EquipmentSlot.HEAD).is(ItemTags.FREEZE_IMMUNE_WEARABLES)
-                && !this.getItemBySlot(EquipmentSlot.CHEST).is(ItemTags.FREEZE_IMMUNE_WEARABLES)
-                && !this.getItemBySlot(EquipmentSlot.LEGS).is(ItemTags.FREEZE_IMMUNE_WEARABLES)
-                && !this.getItemBySlot(EquipmentSlot.FEET).is(ItemTags.FREEZE_IMMUNE_WEARABLES);
+            boolean flag = !this.getItemBySlot(EquipmentSlot.HEAD).is(ItemTags.FREEZE_IMMUNE_WEARABLES) && !this.getItemBySlot(EquipmentSlot.CHEST).is(ItemTags.FREEZE_IMMUNE_WEARABLES) && !this.getItemBySlot(EquipmentSlot.LEGS).is(ItemTags.FREEZE_IMMUNE_WEARABLES) && !this.getItemBySlot(EquipmentSlot.FEET).is(ItemTags.FREEZE_IMMUNE_WEARABLES);
+
             return flag && super.canFreeze();
         }
     }
@@ -3425,19 +4120,20 @@
 
     @Override
     public void recreateFromPacket(ClientboundAddEntityPacket packet) {
-        double x = packet.getX();
-        double y = packet.getY();
-        double z = packet.getZ();
-        float yRot = packet.getYRot();
-        float xRot = packet.getXRot();
-        this.syncPacketPositionCodec(x, y, z);
+        double d0 = packet.getX();
+        double d1 = packet.getY();
+        double d2 = packet.getZ();
+        float f = packet.getYRot();
+        float f1 = packet.getXRot();
+
+        this.syncPacketPositionCodec(d0, d1, d2);
         this.yBodyRot = packet.getYHeadRot();
         this.yHeadRot = packet.getYHeadRot();
         this.yBodyRotO = this.yBodyRot;
         this.yHeadRotO = this.yHeadRot;
         this.setId(packet.getId());
         this.setUUID(packet.getUUID());
-        this.absMoveTo(x, y, z, yRot, xRot);
+        this.absMoveTo(d0, d1, d2, f, f1);
         this.setDeltaMovement(packet.getXa(), packet.getYa(), packet.getZa());
     }
 
@@ -3448,16 +4144,13 @@
     @Override
     public float maxUpStep() {
         float f = super.maxUpStep();
-        return this.getControllingPassenger() instanceof Player ? Math.max(f, 1.0F) : f;
+
+        return this.getControllingPassenger() instanceof net.minecraft.world.entity.player.Player ? Math.max(f, 1.0F) : f;
     }
 
     @Override
     public Vec3 getPassengerRidingPosition(Entity entity) {
-        return new Vec3(
-                this.getPassengerAttachmentPoint(entity, this.getDimensions(this.getPose()), this.getScale())
-                    .rotateY(-this.yBodyRot * (float) (Math.PI / 180.0))
-            )
-            .add(this.position());
+        return (new Vec3(this.getPassengerAttachmentPoint(entity, this.getDimensions(this.getPose()), this.getScale()).rotateY(-this.yBodyRot * 0.017453292F))).add(this.position());
     }
 
     @Override
@@ -3465,10 +4158,11 @@
         return this.ridingOffset(entity) * this.getScale();
     }
 
-    protected void lerpHeadRotationStep(int i, double d) {
-        this.yHeadRot = (float)Mth.rotLerp(1.0 / (double)i, (double)this.yHeadRot, d);
+    protected void lerpHeadRotationStep(int i, double d0) {
+        this.yHeadRot = (float) Mth.rotLerp(1.0D / (double) i, (double) this.yHeadRot, d0);
     }
 
-    public static record Fallsounds(SoundEvent small, SoundEvent big) {
+    public static record a(SoundEvent small, SoundEvent big) {
+
     }
 }
