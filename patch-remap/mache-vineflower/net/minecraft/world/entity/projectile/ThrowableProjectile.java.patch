--- a/net/minecraft/world/entity/projectile/ThrowableProjectile.java
+++ b/net/minecraft/world/entity/projectile/ThrowableProjectile.java
@@ -8,96 +8,96 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.TheEndGatewayBlockEntity;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 
 public abstract class ThrowableProjectile extends Projectile {
+
     protected ThrowableProjectile(EntityType<? extends ThrowableProjectile> entityType, Level level) {
         super(entityType, level);
     }
 
-    protected ThrowableProjectile(EntityType<? extends ThrowableProjectile> entityType, double x, double y, double z, Level level) {
-        this(entityType, level);
-        this.setPos(x, y, z);
+    protected ThrowableProjectile(EntityType<? extends ThrowableProjectile> entityType, double x, double d1, double y, Level world) {
+        this(entityType, world);
+        this.setPos(x, d1, y);
     }
 
     protected ThrowableProjectile(EntityType<? extends ThrowableProjectile> entityType, LivingEntity shooter, Level level) {
-        this(entityType, shooter.getX(), shooter.getEyeY() - 0.1F, shooter.getZ(), level);
+        this(entityType, shooter.getX(), shooter.getEyeY() - 0.10000000149011612D, shooter.getZ(), level);
         this.setOwner(shooter);
     }
 
     @Override
     public boolean shouldRenderAtSqrDistance(double distance) {
-        double d = this.getBoundingBox().getSize() * 4.0;
-        if (Double.isNaN(d)) {
-            d = 4.0;
+        double d1 = this.getBoundingBox().getSize() * 4.0D;
+
+        if (Double.isNaN(d1)) {
+            d1 = 4.0D;
         }
 
-        d *= 64.0;
-        return distance < d * d;
+        d1 *= 64.0D;
+        return distance < d1 * d1;
     }
 
     @Override
     public void tick() {
         super.tick();
-        HitResult hitResultOnMoveVector = ProjectileUtil.getHitResultOnMoveVector(this, this::canHitEntity);
+        HitResult movingobjectposition = ProjectileUtil.getHitResultOnMoveVector(this, this::canHitEntity);
         boolean flag = false;
-        if (hitResultOnMoveVector.getType() == HitResult.Type.BLOCK) {
-            BlockPos blockPos = ((BlockHitResult)hitResultOnMoveVector).getBlockPos();
-            BlockState blockState = this.level().getBlockState(blockPos);
-            if (blockState.is(Blocks.NETHER_PORTAL)) {
-                this.handleInsidePortal(blockPos);
+
+        if (movingobjectposition.getType() == HitResult.EnumMovingObjectType.BLOCK) {
+            BlockPos blockposition = ((BlockHitResult) movingobjectposition).getBlockPos();
+            IBlockData iblockdata = this.level().getBlockState(blockposition);
+
+            if (iblockdata.is(Blocks.NETHER_PORTAL)) {
+                this.handleInsidePortal(blockposition);
                 flag = true;
-            } else if (blockState.is(Blocks.END_GATEWAY)) {
-                BlockEntity blockEntity = this.level().getBlockEntity(blockPos);
-                if (blockEntity instanceof TheEndGatewayBlockEntity && TheEndGatewayBlockEntity.canEntityTeleport(this)) {
-                    TheEndGatewayBlockEntity.teleportEntity(this.level(), blockPos, blockState, this, (TheEndGatewayBlockEntity)blockEntity);
+            } else if (iblockdata.is(Blocks.END_GATEWAY)) {
+                BlockEntity tileentity = this.level().getBlockEntity(blockposition);
+
+                if (tileentity instanceof TheEndGatewayBlockEntity && TheEndGatewayBlockEntity.canEntityTeleport(this)) {
+                    TheEndGatewayBlockEntity.teleportEntity(this.level(), blockposition, iblockdata, this, (TheEndGatewayBlockEntity) tileentity);
                 }
 
                 flag = true;
             }
         }
 
-        if (hitResultOnMoveVector.getType() != HitResult.Type.MISS && !flag) {
-            this.onHit(hitResultOnMoveVector);
+        if (movingobjectposition.getType() != HitResult.EnumMovingObjectType.MISS && !flag) {
+            this.preOnHit(movingobjectposition); // CraftBukkit - projectile hit event
         }
 
         this.checkInsideBlocks();
-        Vec3 deltaMovement = this.getDeltaMovement();
-        double d = this.getX() + deltaMovement.x;
-        double d1 = this.getY() + deltaMovement.y;
-        double d2 = this.getZ() + deltaMovement.z;
+        Vec3 vec3d = this.getDeltaMovement();
+        double d0 = this.getX() + vec3d.x;
+        double d1 = this.getY() + vec3d.y;
+        double d2 = this.getZ() + vec3d.z;
+
         this.updateRotation();
-        float f1;
+        float f;
+
         if (this.isInWater()) {
-            for (int i = 0; i < 4; i++) {
-                float f = 0.25F;
-                this.level()
-                    .addParticle(
-                        ParticleTypes.BUBBLE,
-                        d - deltaMovement.x * 0.25,
-                        d1 - deltaMovement.y * 0.25,
-                        d2 - deltaMovement.z * 0.25,
-                        deltaMovement.x,
-                        deltaMovement.y,
-                        deltaMovement.z
-                    );
+            for (int i = 0; i < 4; ++i) {
+                float f1 = 0.25F;
+
+                this.level().addParticle(ParticleTypes.BUBBLE, d0 - vec3d.x * 0.25D, d1 - vec3d.y * 0.25D, d2 - vec3d.z * 0.25D, vec3d.x, vec3d.y, vec3d.z);
             }
 
-            f1 = 0.8F;
+            f = 0.8F;
         } else {
-            f1 = 0.99F;
+            f = 0.99F;
         }
 
-        this.setDeltaMovement(deltaMovement.scale((double)f1));
+        this.setDeltaMovement(vec3d.scale((double) f));
         if (!this.isNoGravity()) {
-            Vec3 deltaMovement1 = this.getDeltaMovement();
-            this.setDeltaMovement(deltaMovement1.x, deltaMovement1.y - (double)this.getGravity(), deltaMovement1.z);
+            Vec3 vec3d1 = this.getDeltaMovement();
+
+            this.setDeltaMovement(vec3d1.x, vec3d1.y - (double) this.getGravity(), vec3d1.z);
         }
 
-        this.setPos(d, d1, d2);
+        this.setPos(d0, d1, d2);
     }
 
     protected float getGravity() {
