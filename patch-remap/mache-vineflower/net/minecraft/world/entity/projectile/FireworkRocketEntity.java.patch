--- a/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
+++ b/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
@@ -1,5 +1,7 @@
 package net.minecraft.world.entity.projectile;
 
+import java.util.Iterator;
+import java.util.List;
 import java.util.OptionalInt;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
@@ -13,8 +15,9 @@
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMoveType;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.MoverType;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.ClipContext;
@@ -24,159 +27,149 @@
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
 
 public class FireworkRocketEntity extends Projectile implements ItemSupplier {
-    private static final EntityDataAccessor<ItemStack> DATA_ID_FIREWORKS_ITEM = SynchedEntityData.defineId(
-        FireworkRocketEntity.class, EntityDataSerializers.ITEM_STACK
-    );
-    private static final EntityDataAccessor<OptionalInt> DATA_ATTACHED_TO_TARGET = SynchedEntityData.defineId(
-        FireworkRocketEntity.class, EntityDataSerializers.OPTIONAL_UNSIGNED_INT
-    );
-    private static final EntityDataAccessor<Boolean> DATA_SHOT_AT_ANGLE = SynchedEntityData.defineId(FireworkRocketEntity.class, EntityDataSerializers.BOOLEAN);
-    private int life;
-    private int lifetime;
+
+    public static final EntityDataAccessor<ItemStack> DATA_ID_FIREWORKS_ITEM = SynchedEntityData.defineId(FireworkRocketEntity.class, EntityDataSerializers.ITEM_STACK);
+    private static final EntityDataAccessor<OptionalInt> DATA_ATTACHED_TO_TARGET = SynchedEntityData.defineId(FireworkRocketEntity.class, EntityDataSerializers.OPTIONAL_UNSIGNED_INT);
+    public static final EntityDataAccessor<Boolean> DATA_SHOT_AT_ANGLE = SynchedEntityData.defineId(FireworkRocketEntity.class, EntityDataSerializers.BOOLEAN);
+    public int life;
+    public int lifetime;
     @Nullable
-    private LivingEntity attachedToEntity;
+    public LivingEntity attachedToEntity;
 
     public FireworkRocketEntity(EntityType<? extends FireworkRocketEntity> entityType, Level level) {
         super(entityType, level);
     }
 
-    public FireworkRocketEntity(Level level, double x, double y, double z, ItemStack stack) {
+    public FireworkRocketEntity(Level level, double x, double d1, double y, ItemStack itemstack) {
         super(EntityType.FIREWORK_ROCKET, level);
         this.life = 0;
-        this.setPos(x, y, z);
+        this.setPos(x, d1, y);
         int i = 1;
-        if (!stack.isEmpty() && stack.hasTag()) {
-            this.entityData.set(DATA_ID_FIREWORKS_ITEM, stack.copy());
-            i += stack.getOrCreateTagElement("Fireworks").getByte("Flight");
+
+        if (!itemstack.isEmpty() && itemstack.hasTag()) {
+            this.entityData.set(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM, itemstack.copy());
+            i += itemstack.getOrCreateTagElement("Fireworks").getByte("Flight");
         }
 
-        this.setDeltaMovement(this.random.triangle(0.0, 0.002297), 0.05, this.random.triangle(0.0, 0.002297));
+        this.setDeltaMovement(this.random.triangle(0.0D, 0.002297D), 0.05D, this.random.triangle(0.0D, 0.002297D));
         this.lifetime = 10 * i + this.random.nextInt(6) + this.random.nextInt(7);
     }
 
-    public FireworkRocketEntity(Level level, @Nullable Entity shooter, double x, double y, double z, ItemStack stack) {
-        this(level, x, y, z, stack);
+    public FireworkRocketEntity(Level level, @Nullable Entity shooter, double x, double d1, double y, ItemStack itemstack) {
+        this(level, x, d1, y, itemstack);
         this.setOwner(shooter);
     }
 
     public FireworkRocketEntity(Level level, ItemStack stack, LivingEntity shooter) {
         this(level, shooter, shooter.getX(), shooter.getY(), shooter.getZ(), stack);
-        this.entityData.set(DATA_ATTACHED_TO_TARGET, OptionalInt.of(shooter.getId()));
+        this.entityData.set(FireworkRocketEntity.DATA_ATTACHED_TO_TARGET, OptionalInt.of(shooter.getId()));
         this.attachedToEntity = shooter;
     }
 
-    public FireworkRocketEntity(Level level, ItemStack stack, double x, double y, double z, boolean shotAtAngle) {
-        this(level, x, y, z, stack);
-        this.entityData.set(DATA_SHOT_AT_ANGLE, shotAtAngle);
+    public FireworkRocketEntity(Level level, ItemStack stack, double x, double d1, double y, boolean flag) {
+        this(level, x, d1, y, stack);
+        this.entityData.set(FireworkRocketEntity.DATA_SHOT_AT_ANGLE, flag);
     }
 
-    public FireworkRocketEntity(Level level, ItemStack stack, Entity shooter, double x, double y, double z, boolean shotAtAngle) {
-        this(level, stack, x, y, z, shotAtAngle);
+    public FireworkRocketEntity(Level level, ItemStack stack, Entity shooter, double x, double d1, double y, boolean flag) {
+        this(level, stack, x, d1, y, flag);
         this.setOwner(shooter);
     }
 
     @Override
     protected void defineSynchedData() {
-        this.entityData.define(DATA_ID_FIREWORKS_ITEM, ItemStack.EMPTY);
-        this.entityData.define(DATA_ATTACHED_TO_TARGET, OptionalInt.empty());
-        this.entityData.define(DATA_SHOT_AT_ANGLE, false);
+        this.entityData.define(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM, ItemStack.EMPTY);
+        this.entityData.define(FireworkRocketEntity.DATA_ATTACHED_TO_TARGET, OptionalInt.empty());
+        this.entityData.define(FireworkRocketEntity.DATA_SHOT_AT_ANGLE, false);
     }
 
     @Override
     public boolean shouldRenderAtSqrDistance(double distance) {
-        return distance < 4096.0 && !this.isAttachedToEntity();
+        return distance < 4096.0D && !this.isAttachedToEntity();
     }
 
     @Override
-    public boolean shouldRender(double x, double y, double z) {
-        return super.shouldRender(x, y, z) && !this.isAttachedToEntity();
+    public boolean shouldRender(double x, double d1, double y) {
+        return super.shouldRender(x, d1, y) && !this.isAttachedToEntity();
     }
 
     @Override
     public void tick() {
         super.tick();
+        Vec3 vec3d;
+
         if (this.isAttachedToEntity()) {
             if (this.attachedToEntity == null) {
-                this.entityData.get(DATA_ATTACHED_TO_TARGET).ifPresent(target -> {
-                    Entity entity = this.level().getEntity(target);
+                ((OptionalInt) this.entityData.get(FireworkRocketEntity.DATA_ATTACHED_TO_TARGET)).ifPresent((i) -> {
+                    Entity entity = this.level().getEntity(i);
+
                     if (entity instanceof LivingEntity) {
-                        this.attachedToEntity = (LivingEntity)entity;
+                        this.attachedToEntity = (LivingEntity) entity;
                     }
+
                 });
             }
 
             if (this.attachedToEntity != null) {
-                Vec3 handHoldingItemAngle;
                 if (this.attachedToEntity.isFallFlying()) {
-                    Vec3 lookAngle = this.attachedToEntity.getLookAngle();
-                    double d = 1.5;
-                    double d1 = 0.1;
-                    Vec3 deltaMovement = this.attachedToEntity.getDeltaMovement();
-                    this.attachedToEntity
-                        .setDeltaMovement(
-                            deltaMovement.add(
-                                lookAngle.x * 0.1 + (lookAngle.x * 1.5 - deltaMovement.x) * 0.5,
-                                lookAngle.y * 0.1 + (lookAngle.y * 1.5 - deltaMovement.y) * 0.5,
-                                lookAngle.z * 0.1 + (lookAngle.z * 1.5 - deltaMovement.z) * 0.5
-                            )
-                        );
-                    handHoldingItemAngle = this.attachedToEntity.getHandHoldingItemAngle(Items.FIREWORK_ROCKET);
+                    Vec3 vec3d1 = this.attachedToEntity.getLookAngle();
+                    double d0 = 1.5D;
+                    double d1 = 0.1D;
+                    Vec3 vec3d2 = this.attachedToEntity.getDeltaMovement();
+
+                    this.attachedToEntity.setDeltaMovement(vec3d2.add(vec3d1.x * 0.1D + (vec3d1.x * 1.5D - vec3d2.x) * 0.5D, vec3d1.y * 0.1D + (vec3d1.y * 1.5D - vec3d2.y) * 0.5D, vec3d1.z * 0.1D + (vec3d1.z * 1.5D - vec3d2.z) * 0.5D));
+                    vec3d = this.attachedToEntity.getHandHoldingItemAngle(Items.FIREWORK_ROCKET);
                 } else {
-                    handHoldingItemAngle = Vec3.ZERO;
+                    vec3d = Vec3.ZERO;
                 }
 
-                this.setPos(
-                    this.attachedToEntity.getX() + handHoldingItemAngle.x,
-                    this.attachedToEntity.getY() + handHoldingItemAngle.y,
-                    this.attachedToEntity.getZ() + handHoldingItemAngle.z
-                );
+                this.setPos(this.attachedToEntity.getX() + vec3d.x, this.attachedToEntity.getY() + vec3d.y, this.attachedToEntity.getZ() + vec3d.z);
                 this.setDeltaMovement(this.attachedToEntity.getDeltaMovement());
             }
         } else {
             if (!this.isShotAtAngle()) {
-                double d2 = this.horizontalCollision ? 1.0 : 1.15;
-                this.setDeltaMovement(this.getDeltaMovement().multiply(d2, 1.0, d2).add(0.0, 0.04, 0.0));
+                double d2 = this.horizontalCollision ? 1.0D : 1.15D;
+
+                this.setDeltaMovement(this.getDeltaMovement().multiply(d2, 1.0D, d2).add(0.0D, 0.04D, 0.0D));
             }
 
-            Vec3 handHoldingItemAngle = this.getDeltaMovement();
-            this.move(MoverType.SELF, handHoldingItemAngle);
-            this.setDeltaMovement(handHoldingItemAngle);
+            vec3d = this.getDeltaMovement();
+            this.move(EnumMoveType.SELF, vec3d);
+            this.setDeltaMovement(vec3d);
         }
 
-        HitResult hitResultOnMoveVector = ProjectileUtil.getHitResultOnMoveVector(this, this::canHitEntity);
+        HitResult movingobjectposition = ProjectileUtil.getHitResultOnMoveVector(this, this::canHitEntity);
+
         if (!this.noPhysics) {
-            this.onHit(hitResultOnMoveVector);
+            this.preOnHit(movingobjectposition); // CraftBukkit - projectile hit event
             this.hasImpulse = true;
         }
 
         this.updateRotation();
         if (this.life == 0 && !this.isSilent()) {
-            this.level().playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.FIREWORK_ROCKET_LAUNCH, SoundSource.AMBIENT, 3.0F, 1.0F);
+            this.level().playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.FIREWORK_ROCKET_LAUNCH, SoundSource.AMBIENT, 3.0F, 1.0F);
         }
 
-        this.life++;
+        ++this.life;
         if (this.level().isClientSide && this.life % 2 < 2) {
-            this.level()
-                .addParticle(
-                    ParticleTypes.FIREWORK,
-                    this.getX(),
-                    this.getY(),
-                    this.getZ(),
-                    this.random.nextGaussian() * 0.05,
-                    -this.getDeltaMovement().y * 0.5,
-                    this.random.nextGaussian() * 0.05
-                );
+            this.level().addParticle(ParticleTypes.FIREWORK, this.getX(), this.getY(), this.getZ(), this.random.nextGaussian() * 0.05D, -this.getDeltaMovement().y * 0.5D, this.random.nextGaussian() * 0.05D);
         }
 
         if (!this.level().isClientSide && this.life > this.lifetime) {
-            this.explode();
+            // CraftBukkit start
+            if (!org.bukkit.craftbukkit.event.CraftEventFactory.callFireworkExplodeEvent(this).isCancelled()) {
+                this.explode();
+            }
+            // CraftBukkit end
         }
+
     }
 
     private void explode() {
-        this.level().broadcastEntityEvent(this, (byte)17);
+        this.level().broadcastEntityEvent(this, (byte) 17);
         this.gameEvent(GameEvent.EXPLODE, this.getOwner());
         this.dealExplosionDamage();
         this.discard();
@@ -186,96 +179,110 @@
     protected void onHitEntity(EntityHitResult result) {
         super.onHitEntity(result);
         if (!this.level().isClientSide) {
-            this.explode();
+            // CraftBukkit start
+            if (!org.bukkit.craftbukkit.event.CraftEventFactory.callFireworkExplodeEvent(this).isCancelled()) {
+                this.explode();
+            }
+            // CraftBukkit end
         }
     }
 
     @Override
     protected void onHitBlock(BlockHitResult result) {
-        BlockPos blockPos = new BlockPos(result.getBlockPos());
-        this.level().getBlockState(blockPos).entityInside(this.level(), blockPos, this);
+        BlockPos blockposition = new BlockPos(result.getBlockPos());
+
+        this.level().getBlockState(blockposition).entityInside(this.level(), blockposition, this);
         if (!this.level().isClientSide() && this.hasExplosion()) {
-            this.explode();
+            // CraftBukkit start
+            if (!org.bukkit.craftbukkit.event.CraftEventFactory.callFireworkExplodeEvent(this).isCancelled()) {
+                this.explode();
+            }
+            // CraftBukkit end
         }
 
         super.onHitBlock(result);
     }
 
     private boolean hasExplosion() {
-        ItemStack itemStack = this.entityData.get(DATA_ID_FIREWORKS_ITEM);
-        CompoundTag compoundTag = itemStack.isEmpty() ? null : itemStack.getTagElement("Fireworks");
-        ListTag list = compoundTag != null ? compoundTag.getList("Explosions", 10) : null;
-        return list != null && !list.isEmpty();
+        ItemStack itemstack = (ItemStack) this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
+        CompoundTag nbttagcompound = itemstack.isEmpty() ? null : itemstack.getTagElement("Fireworks");
+        ListTag nbttaglist = nbttagcompound != null ? nbttagcompound.getList("Explosions", 10) : null;
+
+        return nbttaglist != null && !nbttaglist.isEmpty();
     }
 
     private void dealExplosionDamage() {
         float f = 0.0F;
-        ItemStack itemStack = this.entityData.get(DATA_ID_FIREWORKS_ITEM);
-        CompoundTag compoundTag = itemStack.isEmpty() ? null : itemStack.getTagElement("Fireworks");
-        ListTag list = compoundTag != null ? compoundTag.getList("Explosions", 10) : null;
-        if (list != null && !list.isEmpty()) {
-            f = 5.0F + (float)(list.size() * 2);
+        ItemStack itemstack = (ItemStack) this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
+        CompoundTag nbttagcompound = itemstack.isEmpty() ? null : itemstack.getTagElement("Fireworks");
+        ListTag nbttaglist = nbttagcompound != null ? nbttagcompound.getList("Explosions", 10) : null;
+
+        if (nbttaglist != null && !nbttaglist.isEmpty()) {
+            f = 5.0F + (float) (nbttaglist.size() * 2);
         }
 
         if (f > 0.0F) {
             if (this.attachedToEntity != null) {
-                this.attachedToEntity.hurt(this.damageSources().fireworks(this, this.getOwner()), 5.0F + (float)(list.size() * 2));
+                CraftEventFactory.entityDamage = this; // CraftBukkit
+                this.attachedToEntity.hurt(this.damageSources().fireworks(this, this.getOwner()), 5.0F + (float) (nbttaglist.size() * 2));
+                CraftEventFactory.entityDamage = null; // CraftBukkit
             }
 
-            double d = 5.0;
-            Vec3 vec3 = this.position();
+            double d0 = 5.0D;
+            Vec3 vec3d = this.position();
+            List<LivingEntity> list = this.level().getEntitiesOfClass(LivingEntity.class, this.getBoundingBox().inflate(5.0D));
+            Iterator iterator = list.iterator();
 
-            for (LivingEntity livingEntity : this.level().getEntitiesOfClass(LivingEntity.class, this.getBoundingBox().inflate(5.0))) {
-                if (livingEntity != this.attachedToEntity && !(this.distanceToSqr(livingEntity) > 25.0)) {
+            while (iterator.hasNext()) {
+                LivingEntity entityliving = (LivingEntity) iterator.next();
+
+                if (entityliving != this.attachedToEntity && this.distanceToSqr((Entity) entityliving) <= 25.0D) {
                     boolean flag = false;
 
-                    for (int i = 0; i < 2; i++) {
-                        Vec3 vec31 = new Vec3(livingEntity.getX(), livingEntity.getY(0.5 * (double)i), livingEntity.getZ());
-                        HitResult hitResult = this.level().clip(new ClipContext(vec3, vec31, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, this));
-                        if (hitResult.getType() == HitResult.Type.MISS) {
+                    for (int i = 0; i < 2; ++i) {
+                        Vec3 vec3d1 = new Vec3(entityliving.getX(), entityliving.getY(0.5D * (double) i), entityliving.getZ());
+                        BlockHitResult movingobjectpositionblock = this.level().clip(new ClipContext(vec3d, vec3d1, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, this));
+
+                        if (movingobjectpositionblock.getType() == HitResult.EnumMovingObjectType.MISS) {
                             flag = true;
                             break;
                         }
                     }
 
                     if (flag) {
-                        float f1 = f * (float)Math.sqrt((5.0 - (double)this.distanceTo(livingEntity)) / 5.0);
-                        livingEntity.hurt(this.damageSources().fireworks(this, this.getOwner()), f1);
+                        float f1 = f * (float) Math.sqrt((5.0D - (double) this.distanceTo(entityliving)) / 5.0D);
+
+                        CraftEventFactory.entityDamage = this; // CraftBukkit
+                        entityliving.hurt(this.damageSources().fireworks(this, this.getOwner()), f1);
+                        CraftEventFactory.entityDamage = null; // CraftBukkit
                     }
                 }
             }
         }
+
     }
 
     private boolean isAttachedToEntity() {
-        return this.entityData.get(DATA_ATTACHED_TO_TARGET).isPresent();
+        return ((OptionalInt) this.entityData.get(FireworkRocketEntity.DATA_ATTACHED_TO_TARGET)).isPresent();
     }
 
     public boolean isShotAtAngle() {
-        return this.entityData.get(DATA_SHOT_AT_ANGLE);
+        return (Boolean) this.entityData.get(FireworkRocketEntity.DATA_SHOT_AT_ANGLE);
     }
 
     @Override
     public void handleEntityEvent(byte id) {
         if (id == 17 && this.level().isClientSide) {
             if (!this.hasExplosion()) {
-                for (int i = 0; i < this.random.nextInt(3) + 2; i++) {
-                    this.level()
-                        .addParticle(
-                            ParticleTypes.POOF,
-                            this.getX(),
-                            this.getY(),
-                            this.getZ(),
-                            this.random.nextGaussian() * 0.05,
-                            0.005,
-                            this.random.nextGaussian() * 0.05
-                        );
+                for (int i = 0; i < this.random.nextInt(3) + 2; ++i) {
+                    this.level().addParticle(ParticleTypes.POOF, this.getX(), this.getY(), this.getZ(), this.random.nextGaussian() * 0.05D, 0.005D, this.random.nextGaussian() * 0.05D);
                 }
             } else {
-                ItemStack itemStack = this.entityData.get(DATA_ID_FIREWORKS_ITEM);
-                CompoundTag compoundTag = itemStack.isEmpty() ? null : itemStack.getTagElement("Fireworks");
-                Vec3 deltaMovement = this.getDeltaMovement();
-                this.level().createFireworks(this.getX(), this.getY(), this.getZ(), deltaMovement.x, deltaMovement.y, deltaMovement.z, compoundTag);
+                ItemStack itemstack = (ItemStack) this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
+                CompoundTag nbttagcompound = itemstack.isEmpty() ? null : itemstack.getTagElement("Fireworks");
+                Vec3 vec3d = this.getDeltaMovement();
+
+                this.level().createFireworks(this.getX(), this.getY(), this.getZ(), vec3d.x, vec3d.y, vec3d.z, nbttagcompound);
             }
         }
 
@@ -287,12 +294,13 @@
         super.addAdditionalSaveData(compound);
         compound.putInt("Life", this.life);
         compound.putInt("LifeTime", this.lifetime);
-        ItemStack itemStack = this.entityData.get(DATA_ID_FIREWORKS_ITEM);
-        if (!itemStack.isEmpty()) {
-            compound.put("FireworksItem", itemStack.save(new CompoundTag()));
+        ItemStack itemstack = (ItemStack) this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
+
+        if (!itemstack.isEmpty()) {
+            compound.put("FireworksItem", itemstack.save(new CompoundTag()));
         }
 
-        compound.putBoolean("ShotAtAngle", this.entityData.get(DATA_SHOT_AT_ANGLE));
+        compound.putBoolean("ShotAtAngle", (Boolean) this.entityData.get(FireworkRocketEntity.DATA_SHOT_AT_ANGLE));
     }
 
     @Override
@@ -300,20 +308,23 @@
         super.readAdditionalSaveData(compound);
         this.life = compound.getInt("Life");
         this.lifetime = compound.getInt("LifeTime");
-        ItemStack itemStack = ItemStack.of(compound.getCompound("FireworksItem"));
-        if (!itemStack.isEmpty()) {
-            this.entityData.set(DATA_ID_FIREWORKS_ITEM, itemStack);
+        ItemStack itemstack = ItemStack.of(compound.getCompound("FireworksItem"));
+
+        if (!itemstack.isEmpty()) {
+            this.entityData.set(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM, itemstack);
         }
 
         if (compound.contains("ShotAtAngle")) {
-            this.entityData.set(DATA_SHOT_AT_ANGLE, compound.getBoolean("ShotAtAngle"));
+            this.entityData.set(FireworkRocketEntity.DATA_SHOT_AT_ANGLE, compound.getBoolean("ShotAtAngle"));
         }
+
     }
 
     @Override
     public ItemStack getItem() {
-        ItemStack itemStack = this.entityData.get(DATA_ID_FIREWORKS_ITEM);
-        return itemStack.isEmpty() ? new ItemStack(Items.FIREWORK_ROCKET) : itemStack;
+        ItemStack itemstack = (ItemStack) this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
+
+        return itemstack.isEmpty() ? new ItemStack(Items.FIREWORK_ROCKET) : itemstack;
     }
 
     @Override
