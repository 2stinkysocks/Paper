--- a/net/minecraft/world/entity/EntityType.java
+++ b/net/minecraft/world/entity/EntityType.java
@@ -27,7 +27,7 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.Mth;
-import net.minecraft.util.datafix.fixes.References;
+import net.minecraft.util.datafix.fixes.DataConverterTypes;
 import net.minecraft.world.entity.ambient.Bat;
 import net.minecraft.world.entity.animal.Bee;
 import net.minecraft.world.entity.animal.Cat;
@@ -154,422 +154,148 @@
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.pathfinder.WalkNodeEvaluator;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.slf4j.Logger;
 
 public class EntityType<T extends Entity> implements FeatureElement, EntityTypeTest<Entity, T> {
+
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final String ENTITY_TAG = "EntityTag";
-    private final Holder.Reference<EntityType<?>> builtInRegistryHolder = BuiltInRegistries.ENTITY_TYPE.createIntrusiveHolder(this);
+    private final Holder.Reference<EntityType<?>> builtInRegistryHolder;
     private static final float MAGIC_HORSE_WIDTH = 1.3964844F;
     private static final int DISPLAY_TRACKING_RANGE = 10;
-    public static final EntityType<Allay> ALLAY = register(
-        "allay", EntityType.Builder.of(Allay::new, MobCategory.CREATURE).sized(0.35F, 0.6F).clientTrackingRange(8).updateInterval(2)
-    );
-    public static final EntityType<AreaEffectCloud> AREA_EFFECT_CLOUD = register(
-        "area_effect_cloud",
-        EntityType.Builder.<AreaEffectCloud>of(AreaEffectCloud::new, MobCategory.MISC)
-            .fireImmune()
-            .sized(6.0F, 0.5F)
-            .clientTrackingRange(10)
-            .updateInterval(Integer.MAX_VALUE)
-    );
-    public static final EntityType<ArmorStand> ARMOR_STAND = register(
-        "armor_stand", EntityType.Builder.<ArmorStand>of(ArmorStand::new, MobCategory.MISC).sized(0.5F, 1.975F).clientTrackingRange(10)
-    );
-    public static final EntityType<Arrow> ARROW = register(
-        "arrow", EntityType.Builder.<Arrow>of(Arrow::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20)
-    );
-    public static final EntityType<Axolotl> AXOLOTL = register(
-        "axolotl", EntityType.Builder.of(Axolotl::new, MobCategory.AXOLOTLS).sized(0.75F, 0.42F).clientTrackingRange(10)
-    );
+    public static final EntityType<Allay> ALLAY = register("allay", EntityType.Builder.of(Allay::new, MobCategory.CREATURE).sized(0.35F, 0.6F).clientTrackingRange(8).updateInterval(2));
+    public static final EntityType<AreaEffectCloud> AREA_EFFECT_CLOUD = register("area_effect_cloud", EntityType.Builder.of(AreaEffectCloud::new, MobCategory.MISC).fireImmune().sized(6.0F, 0.5F).clientTrackingRange(10).updateInterval(10)); // CraftBukkit - SPIGOT-3729: track area effect clouds
+    public static final EntityType<ArmorStand> ARMOR_STAND = register("armor_stand", EntityType.Builder.of(ArmorStand::new, MobCategory.MISC).sized(0.5F, 1.975F).clientTrackingRange(10));
+    public static final EntityType<Arrow> ARROW = register("arrow", EntityType.Builder.of(Arrow::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<Axolotl> AXOLOTL = register("axolotl", EntityType.Builder.of(Axolotl::new, MobCategory.AXOLOTLS).sized(0.75F, 0.42F).clientTrackingRange(10));
     public static final EntityType<Bat> BAT = register("bat", EntityType.Builder.of(Bat::new, MobCategory.AMBIENT).sized(0.5F, 0.9F).clientTrackingRange(5));
     public static final EntityType<Bee> BEE = register("bee", EntityType.Builder.of(Bee::new, MobCategory.CREATURE).sized(0.7F, 0.6F).clientTrackingRange(8));
-    public static final EntityType<Blaze> BLAZE = register(
-        "blaze", EntityType.Builder.of(Blaze::new, MobCategory.MONSTER).fireImmune().sized(0.6F, 1.8F).clientTrackingRange(8)
-    );
-    public static final EntityType<Display.BlockDisplay> BLOCK_DISPLAY = register(
-        "block_display", EntityType.Builder.of(Display.BlockDisplay::new, MobCategory.MISC).sized(0.0F, 0.0F).clientTrackingRange(10).updateInterval(1)
-    );
-    public static final EntityType<Boat> BOAT = register(
-        "boat", EntityType.Builder.<Boat>of(Boat::new, MobCategory.MISC).sized(1.375F, 0.5625F).clientTrackingRange(10)
-    );
-    public static final EntityType<Breeze> BREEZE = register(
-        "breeze", EntityType.Builder.of(Breeze::new, MobCategory.MONSTER).sized(0.6F, 1.7F).clientTrackingRange(10).requiredFeatures(FeatureFlags.UPDATE_1_21)
-    );
-    public static final EntityType<Camel> CAMEL = register(
-        "camel", EntityType.Builder.of(Camel::new, MobCategory.CREATURE).sized(1.7F, 2.375F).clientTrackingRange(10)
-    );
+    public static final EntityType<Blaze> BLAZE = register("blaze", EntityType.Builder.of(Blaze::new, MobCategory.MONSTER).fireImmune().sized(0.6F, 1.8F).clientTrackingRange(8));
+    public static final EntityType<Display.BlockDisplay> BLOCK_DISPLAY = register("block_display", EntityType.Builder.of(Display.BlockDisplay::new, MobCategory.MISC).sized(0.0F, 0.0F).clientTrackingRange(10).updateInterval(1));
+    public static final EntityType<Boat> BOAT = register("boat", EntityType.Builder.of(Boat::new, MobCategory.MISC).sized(1.375F, 0.5625F).clientTrackingRange(10));
+    public static final EntityType<Breeze> BREEZE = register("breeze", EntityType.Builder.of(Breeze::new, MobCategory.MONSTER).sized(0.6F, 1.7F).clientTrackingRange(10).requiredFeatures(FeatureFlags.UPDATE_1_21));
+    public static final EntityType<Camel> CAMEL = register("camel", EntityType.Builder.of(Camel::new, MobCategory.CREATURE).sized(1.7F, 2.375F).clientTrackingRange(10));
     public static final EntityType<Cat> CAT = register("cat", EntityType.Builder.of(Cat::new, MobCategory.CREATURE).sized(0.6F, 0.7F).clientTrackingRange(8));
-    public static final EntityType<CaveSpider> CAVE_SPIDER = register(
-        "cave_spider", EntityType.Builder.of(CaveSpider::new, MobCategory.MONSTER).sized(0.7F, 0.5F).clientTrackingRange(8)
-    );
-    public static final EntityType<ChestBoat> CHEST_BOAT = register(
-        "chest_boat", EntityType.Builder.<ChestBoat>of(ChestBoat::new, MobCategory.MISC).sized(1.375F, 0.5625F).clientTrackingRange(10)
-    );
-    public static final EntityType<MinecartChest> CHEST_MINECART = register(
-        "chest_minecart", EntityType.Builder.<MinecartChest>of(MinecartChest::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8)
-    );
-    public static final EntityType<Chicken> CHICKEN = register(
-        "chicken", EntityType.Builder.of(Chicken::new, MobCategory.CREATURE).sized(0.4F, 0.7F).clientTrackingRange(10)
-    );
-    public static final EntityType<Cod> COD = register(
-        "cod", EntityType.Builder.of(Cod::new, MobCategory.WATER_AMBIENT).sized(0.5F, 0.3F).clientTrackingRange(4)
-    );
-    public static final EntityType<MinecartCommandBlock> COMMAND_BLOCK_MINECART = register(
-        "command_block_minecart",
-        EntityType.Builder.<MinecartCommandBlock>of(MinecartCommandBlock::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8)
-    );
+    public static final EntityType<CaveSpider> CAVE_SPIDER = register("cave_spider", EntityType.Builder.of(CaveSpider::new, MobCategory.MONSTER).sized(0.7F, 0.5F).clientTrackingRange(8));
+    public static final EntityType<ChestBoat> CHEST_BOAT = register("chest_boat", EntityType.Builder.of(ChestBoat::new, MobCategory.MISC).sized(1.375F, 0.5625F).clientTrackingRange(10));
+    public static final EntityType<MinecartChest> CHEST_MINECART = register("chest_minecart", EntityType.Builder.of(MinecartChest::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<Chicken> CHICKEN = register("chicken", EntityType.Builder.of(Chicken::new, MobCategory.CREATURE).sized(0.4F, 0.7F).clientTrackingRange(10));
+    public static final EntityType<Cod> COD = register("cod", EntityType.Builder.of(Cod::new, MobCategory.WATER_AMBIENT).sized(0.5F, 0.3F).clientTrackingRange(4));
+    public static final EntityType<MinecartCommandBlock> COMMAND_BLOCK_MINECART = register("command_block_minecart", EntityType.Builder.of(MinecartCommandBlock::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
     public static final EntityType<Cow> COW = register("cow", EntityType.Builder.of(Cow::new, MobCategory.CREATURE).sized(0.9F, 1.4F).clientTrackingRange(10));
-    public static final EntityType<Creeper> CREEPER = register(
-        "creeper", EntityType.Builder.of(Creeper::new, MobCategory.MONSTER).sized(0.6F, 1.7F).clientTrackingRange(8)
-    );
+    public static final EntityType<Creeper> CREEPER = register("creeper", EntityType.Builder.of(Creeper::new, MobCategory.MONSTER).sized(0.6F, 1.7F).clientTrackingRange(8));
     public static final EntityType<Dolphin> DOLPHIN = register("dolphin", EntityType.Builder.of(Dolphin::new, MobCategory.WATER_CREATURE).sized(0.9F, 0.6F));
-    public static final EntityType<Donkey> DONKEY = register(
-        "donkey", EntityType.Builder.of(Donkey::new, MobCategory.CREATURE).sized(1.3964844F, 1.5F).clientTrackingRange(10)
-    );
-    public static final EntityType<DragonFireball> DRAGON_FIREBALL = register(
-        "dragon_fireball",
-        EntityType.Builder.<DragonFireball>of(DragonFireball::new, MobCategory.MISC).sized(1.0F, 1.0F).clientTrackingRange(4).updateInterval(10)
-    );
-    public static final EntityType<Drowned> DROWNED = register(
-        "drowned", EntityType.Builder.of(Drowned::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8)
-    );
-    public static final EntityType<ThrownEgg> EGG = register(
-        "egg", EntityType.Builder.<ThrownEgg>of(ThrownEgg::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10)
-    );
-    public static final EntityType<ElderGuardian> ELDER_GUARDIAN = register(
-        "elder_guardian", EntityType.Builder.of(ElderGuardian::new, MobCategory.MONSTER).sized(1.9975F, 1.9975F).clientTrackingRange(10)
-    );
-    public static final EntityType<EndCrystal> END_CRYSTAL = register(
-        "end_crystal",
-        EntityType.Builder.<EndCrystal>of(EndCrystal::new, MobCategory.MISC).sized(2.0F, 2.0F).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE)
-    );
-    public static final EntityType<EnderDragon> ENDER_DRAGON = register(
-        "ender_dragon", EntityType.Builder.of(EnderDragon::new, MobCategory.MONSTER).fireImmune().sized(16.0F, 8.0F).clientTrackingRange(10)
-    );
-    public static final EntityType<ThrownEnderpearl> ENDER_PEARL = register(
-        "ender_pearl",
-        EntityType.Builder.<ThrownEnderpearl>of(ThrownEnderpearl::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10)
-    );
-    public static final EntityType<EnderMan> ENDERMAN = register(
-        "enderman", EntityType.Builder.of(EnderMan::new, MobCategory.MONSTER).sized(0.6F, 2.9F).clientTrackingRange(8)
-    );
-    public static final EntityType<Endermite> ENDERMITE = register(
-        "endermite", EntityType.Builder.of(Endermite::new, MobCategory.MONSTER).sized(0.4F, 0.3F).clientTrackingRange(8)
-    );
-    public static final EntityType<Evoker> EVOKER = register(
-        "evoker", EntityType.Builder.of(Evoker::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8)
-    );
-    public static final EntityType<EvokerFangs> EVOKER_FANGS = register(
-        "evoker_fangs", EntityType.Builder.<EvokerFangs>of(EvokerFangs::new, MobCategory.MISC).sized(0.5F, 0.8F).clientTrackingRange(6).updateInterval(2)
-    );
-    public static final EntityType<ThrownExperienceBottle> EXPERIENCE_BOTTLE = register(
-        "experience_bottle",
-        EntityType.Builder.<ThrownExperienceBottle>of(ThrownExperienceBottle::new, MobCategory.MISC)
-            .sized(0.25F, 0.25F)
-            .clientTrackingRange(4)
-            .updateInterval(10)
-    );
-    public static final EntityType<ExperienceOrb> EXPERIENCE_ORB = register(
-        "experience_orb",
-        EntityType.Builder.<ExperienceOrb>of(ExperienceOrb::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(6).updateInterval(20)
-    );
-    public static final EntityType<EyeOfEnder> EYE_OF_ENDER = register(
-        "eye_of_ender", EntityType.Builder.<EyeOfEnder>of(EyeOfEnder::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(4)
-    );
-    public static final EntityType<FallingBlockEntity> FALLING_BLOCK = register(
-        "falling_block",
-        EntityType.Builder.<FallingBlockEntity>of(FallingBlockEntity::new, MobCategory.MISC).sized(0.98F, 0.98F).clientTrackingRange(10).updateInterval(20)
-    );
-    public static final EntityType<FireworkRocketEntity> FIREWORK_ROCKET = register(
-        "firework_rocket",
-        EntityType.Builder.<FireworkRocketEntity>of(FireworkRocketEntity::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10)
-    );
-    public static final EntityType<Fox> FOX = register(
-        "fox", EntityType.Builder.of(Fox::new, MobCategory.CREATURE).sized(0.6F, 0.7F).clientTrackingRange(8).immuneTo(Blocks.SWEET_BERRY_BUSH)
-    );
-    public static final EntityType<Frog> FROG = register(
-        "frog", EntityType.Builder.of(Frog::new, MobCategory.CREATURE).sized(0.5F, 0.5F).clientTrackingRange(10)
-    );
-    public static final EntityType<MinecartFurnace> FURNACE_MINECART = register(
-        "furnace_minecart", EntityType.Builder.<MinecartFurnace>of(MinecartFurnace::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8)
-    );
-    public static final EntityType<Ghast> GHAST = register(
-        "ghast", EntityType.Builder.of(Ghast::new, MobCategory.MONSTER).fireImmune().sized(4.0F, 4.0F).clientTrackingRange(10)
-    );
-    public static final EntityType<Giant> GIANT = register(
-        "giant", EntityType.Builder.of(Giant::new, MobCategory.MONSTER).sized(3.6F, 12.0F).clientTrackingRange(10)
-    );
-    public static final EntityType<GlowItemFrame> GLOW_ITEM_FRAME = register(
-        "glow_item_frame",
-        EntityType.Builder.<GlowItemFrame>of(GlowItemFrame::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE)
-    );
-    public static final EntityType<GlowSquid> GLOW_SQUID = register(
-        "glow_squid", EntityType.Builder.of(GlowSquid::new, MobCategory.UNDERGROUND_WATER_CREATURE).sized(0.8F, 0.8F).clientTrackingRange(10)
-    );
-    public static final EntityType<Goat> GOAT = register(
-        "goat", EntityType.Builder.of(Goat::new, MobCategory.CREATURE).sized(0.9F, 1.3F).clientTrackingRange(10)
-    );
-    public static final EntityType<Guardian> GUARDIAN = register(
-        "guardian", EntityType.Builder.of(Guardian::new, MobCategory.MONSTER).sized(0.85F, 0.85F).clientTrackingRange(8)
-    );
-    public static final EntityType<Hoglin> HOGLIN = register(
-        "hoglin", EntityType.Builder.of(Hoglin::new, MobCategory.MONSTER).sized(1.3964844F, 1.4F).clientTrackingRange(8)
-    );
-    public static final EntityType<MinecartHopper> HOPPER_MINECART = register(
-        "hopper_minecart", EntityType.Builder.<MinecartHopper>of(MinecartHopper::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8)
-    );
-    public static final EntityType<Horse> HORSE = register(
-        "horse", EntityType.Builder.of(Horse::new, MobCategory.CREATURE).sized(1.3964844F, 1.6F).clientTrackingRange(10)
-    );
-    public static final EntityType<Husk> HUSK = register(
-        "husk", EntityType.Builder.of(Husk::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8)
-    );
-    public static final EntityType<Illusioner> ILLUSIONER = register(
-        "illusioner", EntityType.Builder.of(Illusioner::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8)
-    );
-    public static final EntityType<Interaction> INTERACTION = register(
-        "interaction", EntityType.Builder.of(Interaction::new, MobCategory.MISC).sized(0.0F, 0.0F).clientTrackingRange(10)
-    );
-    public static final EntityType<IronGolem> IRON_GOLEM = register(
-        "iron_golem", EntityType.Builder.of(IronGolem::new, MobCategory.MISC).sized(1.4F, 2.7F).clientTrackingRange(10)
-    );
-    public static final EntityType<ItemEntity> ITEM = register(
-        "item", EntityType.Builder.<ItemEntity>of(ItemEntity::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(6).updateInterval(20)
-    );
-    public static final EntityType<Display.ItemDisplay> ITEM_DISPLAY = register(
-        "item_display", EntityType.Builder.of(Display.ItemDisplay::new, MobCategory.MISC).sized(0.0F, 0.0F).clientTrackingRange(10).updateInterval(1)
-    );
-    public static final EntityType<ItemFrame> ITEM_FRAME = register(
-        "item_frame",
-        EntityType.Builder.<ItemFrame>of(ItemFrame::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE)
-    );
-    public static final EntityType<LargeFireball> FIREBALL = register(
-        "fireball", EntityType.Builder.<LargeFireball>of(LargeFireball::new, MobCategory.MISC).sized(1.0F, 1.0F).clientTrackingRange(4).updateInterval(10)
-    );
-    public static final EntityType<LeashFenceKnotEntity> LEASH_KNOT = register(
-        "leash_knot",
-        EntityType.Builder.<LeashFenceKnotEntity>of(LeashFenceKnotEntity::new, MobCategory.MISC)
-            .noSave()
-            .sized(0.375F, 0.5F)
-            .clientTrackingRange(10)
-            .updateInterval(Integer.MAX_VALUE)
-    );
-    public static final EntityType<LightningBolt> LIGHTNING_BOLT = register(
-        "lightning_bolt",
-        EntityType.Builder.of(LightningBolt::new, MobCategory.MISC).noSave().sized(0.0F, 0.0F).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE)
-    );
-    public static final EntityType<Llama> LLAMA = register(
-        "llama", EntityType.Builder.of(Llama::new, MobCategory.CREATURE).sized(0.9F, 1.87F).clientTrackingRange(10)
-    );
-    public static final EntityType<LlamaSpit> LLAMA_SPIT = register(
-        "llama_spit", EntityType.Builder.<LlamaSpit>of(LlamaSpit::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10)
-    );
-    public static final EntityType<MagmaCube> MAGMA_CUBE = register(
-        "magma_cube", EntityType.Builder.of(MagmaCube::new, MobCategory.MONSTER).fireImmune().sized(2.04F, 2.04F).clientTrackingRange(8)
-    );
-    public static final EntityType<Marker> MARKER = register(
-        "marker", EntityType.Builder.of(Marker::new, MobCategory.MISC).sized(0.0F, 0.0F).clientTrackingRange(0)
-    );
-    public static final EntityType<Minecart> MINECART = register(
-        "minecart", EntityType.Builder.<Minecart>of(Minecart::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8)
-    );
-    public static final EntityType<MushroomCow> MOOSHROOM = register(
-        "mooshroom", EntityType.Builder.of(MushroomCow::new, MobCategory.CREATURE).sized(0.9F, 1.4F).clientTrackingRange(10)
-    );
-    public static final EntityType<Mule> MULE = register(
-        "mule", EntityType.Builder.of(Mule::new, MobCategory.CREATURE).sized(1.3964844F, 1.6F).clientTrackingRange(8)
-    );
-    public static final EntityType<Ocelot> OCELOT = register(
-        "ocelot", EntityType.Builder.of(Ocelot::new, MobCategory.CREATURE).sized(0.6F, 0.7F).clientTrackingRange(10)
-    );
-    public static final EntityType<Painting> PAINTING = register(
-        "painting",
-        EntityType.Builder.<Painting>of(Painting::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE)
-    );
-    public static final EntityType<Panda> PANDA = register(
-        "panda", EntityType.Builder.of(Panda::new, MobCategory.CREATURE).sized(1.3F, 1.25F).clientTrackingRange(10)
-    );
-    public static final EntityType<Parrot> PARROT = register(
-        "parrot", EntityType.Builder.of(Parrot::new, MobCategory.CREATURE).sized(0.5F, 0.9F).clientTrackingRange(8)
-    );
-    public static final EntityType<Phantom> PHANTOM = register(
-        "phantom", EntityType.Builder.of(Phantom::new, MobCategory.MONSTER).sized(0.9F, 0.5F).clientTrackingRange(8)
-    );
+    public static final EntityType<Donkey> DONKEY = register("donkey", EntityType.Builder.of(Donkey::new, MobCategory.CREATURE).sized(1.3964844F, 1.5F).clientTrackingRange(10));
+    public static final EntityType<DragonFireball> DRAGON_FIREBALL = register("dragon_fireball", EntityType.Builder.of(DragonFireball::new, MobCategory.MISC).sized(1.0F, 1.0F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<Drowned> DROWNED = register("drowned", EntityType.Builder.of(Drowned::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<ThrownEgg> EGG = register("egg", EntityType.Builder.of(ThrownEgg::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<ElderGuardian> ELDER_GUARDIAN = register("elder_guardian", EntityType.Builder.of(ElderGuardian::new, MobCategory.MONSTER).sized(1.9975F, 1.9975F).clientTrackingRange(10));
+    public static final EntityType<EndCrystal> END_CRYSTAL = register("end_crystal", EntityType.Builder.of(EndCrystal::new, MobCategory.MISC).sized(2.0F, 2.0F).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<EnderDragon> ENDER_DRAGON = register("ender_dragon", EntityType.Builder.of(EnderDragon::new, MobCategory.MONSTER).fireImmune().sized(16.0F, 8.0F).clientTrackingRange(10));
+    public static final EntityType<ThrownEnderpearl> ENDER_PEARL = register("ender_pearl", EntityType.Builder.of(ThrownEnderpearl::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<EnderMan> ENDERMAN = register("enderman", EntityType.Builder.of(EnderMan::new, MobCategory.MONSTER).sized(0.6F, 2.9F).clientTrackingRange(8));
+    public static final EntityType<Endermite> ENDERMITE = register("endermite", EntityType.Builder.of(Endermite::new, MobCategory.MONSTER).sized(0.4F, 0.3F).clientTrackingRange(8));
+    public static final EntityType<Evoker> EVOKER = register("evoker", EntityType.Builder.of(Evoker::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<EvokerFangs> EVOKER_FANGS = register("evoker_fangs", EntityType.Builder.of(EvokerFangs::new, MobCategory.MISC).sized(0.5F, 0.8F).clientTrackingRange(6).updateInterval(2));
+    public static final EntityType<ThrownExperienceBottle> EXPERIENCE_BOTTLE = register("experience_bottle", EntityType.Builder.of(ThrownExperienceBottle::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<ExperienceOrb> EXPERIENCE_ORB = register("experience_orb", EntityType.Builder.of(ExperienceOrb::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(6).updateInterval(20));
+    public static final EntityType<EyeOfEnder> EYE_OF_ENDER = register("eye_of_ender", EntityType.Builder.of(EyeOfEnder::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(4));
+    public static final EntityType<FallingBlockEntity> FALLING_BLOCK = register("falling_block", EntityType.Builder.of(FallingBlockEntity::new, MobCategory.MISC).sized(0.98F, 0.98F).clientTrackingRange(10).updateInterval(20));
+    public static final EntityType<FireworkRocketEntity> FIREWORK_ROCKET = register("firework_rocket", EntityType.Builder.of(FireworkRocketEntity::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<Fox> FOX = register("fox", EntityType.Builder.of(Fox::new, MobCategory.CREATURE).sized(0.6F, 0.7F).clientTrackingRange(8).immuneTo(Blocks.SWEET_BERRY_BUSH));
+    public static final EntityType<Frog> FROG = register("frog", EntityType.Builder.of(Frog::new, MobCategory.CREATURE).sized(0.5F, 0.5F).clientTrackingRange(10));
+    public static final EntityType<MinecartFurnace> FURNACE_MINECART = register("furnace_minecart", EntityType.Builder.of(MinecartFurnace::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<Ghast> GHAST = register("ghast", EntityType.Builder.of(Ghast::new, MobCategory.MONSTER).fireImmune().sized(4.0F, 4.0F).clientTrackingRange(10));
+    public static final EntityType<Giant> GIANT = register("giant", EntityType.Builder.of(Giant::new, MobCategory.MONSTER).sized(3.6F, 12.0F).clientTrackingRange(10));
+    public static final EntityType<GlowItemFrame> GLOW_ITEM_FRAME = register("glow_item_frame", EntityType.Builder.of(GlowItemFrame::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<GlowSquid> GLOW_SQUID = register("glow_squid", EntityType.Builder.of(GlowSquid::new, MobCategory.UNDERGROUND_WATER_CREATURE).sized(0.8F, 0.8F).clientTrackingRange(10));
+    public static final EntityType<Goat> GOAT = register("goat", EntityType.Builder.of(Goat::new, MobCategory.CREATURE).sized(0.9F, 1.3F).clientTrackingRange(10));
+    public static final EntityType<Guardian> GUARDIAN = register("guardian", EntityType.Builder.of(Guardian::new, MobCategory.MONSTER).sized(0.85F, 0.85F).clientTrackingRange(8));
+    public static final EntityType<Hoglin> HOGLIN = register("hoglin", EntityType.Builder.of(Hoglin::new, MobCategory.MONSTER).sized(1.3964844F, 1.4F).clientTrackingRange(8));
+    public static final EntityType<MinecartHopper> HOPPER_MINECART = register("hopper_minecart", EntityType.Builder.of(MinecartHopper::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<Horse> HORSE = register("horse", EntityType.Builder.of(Horse::new, MobCategory.CREATURE).sized(1.3964844F, 1.6F).clientTrackingRange(10));
+    public static final EntityType<Husk> HUSK = register("husk", EntityType.Builder.of(Husk::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<Illusioner> ILLUSIONER = register("illusioner", EntityType.Builder.of(Illusioner::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<Interaction> INTERACTION = register("interaction", EntityType.Builder.of(Interaction::new, MobCategory.MISC).sized(0.0F, 0.0F).clientTrackingRange(10));
+    public static final EntityType<IronGolem> IRON_GOLEM = register("iron_golem", EntityType.Builder.of(IronGolem::new, MobCategory.MISC).sized(1.4F, 2.7F).clientTrackingRange(10));
+    public static final EntityType<ItemEntity> ITEM = register("item", EntityType.Builder.of(ItemEntity::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(6).updateInterval(20));
+    public static final EntityType<Display.ItemDisplay> ITEM_DISPLAY = register("item_display", EntityType.Builder.of(Display.ItemDisplay::new, MobCategory.MISC).sized(0.0F, 0.0F).clientTrackingRange(10).updateInterval(1));
+    public static final EntityType<ItemFrame> ITEM_FRAME = register("item_frame", EntityType.Builder.of(ItemFrame::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<LargeFireball> FIREBALL = register("fireball", EntityType.Builder.of(LargeFireball::new, MobCategory.MISC).sized(1.0F, 1.0F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<LeashFenceKnotEntity> LEASH_KNOT = register("leash_knot", EntityType.Builder.of(LeashFenceKnotEntity::new, MobCategory.MISC).noSave().sized(0.375F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<LightningBolt> LIGHTNING_BOLT = register("lightning_bolt", EntityType.Builder.of(LightningBolt::new, MobCategory.MISC).noSave().sized(0.0F, 0.0F).clientTrackingRange(16).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<Llama> LLAMA = register("llama", EntityType.Builder.of(Llama::new, MobCategory.CREATURE).sized(0.9F, 1.87F).clientTrackingRange(10));
+    public static final EntityType<LlamaSpit> LLAMA_SPIT = register("llama_spit", EntityType.Builder.of(LlamaSpit::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<MagmaCube> MAGMA_CUBE = register("magma_cube", EntityType.Builder.of(MagmaCube::new, MobCategory.MONSTER).fireImmune().sized(2.04F, 2.04F).clientTrackingRange(8));
+    public static final EntityType<Marker> MARKER = register("marker", EntityType.Builder.of(Marker::new, MobCategory.MISC).sized(0.0F, 0.0F).clientTrackingRange(0));
+    public static final EntityType<Minecart> MINECART = register("minecart", EntityType.Builder.of(Minecart::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<MushroomCow> MOOSHROOM = register("mooshroom", EntityType.Builder.of(MushroomCow::new, MobCategory.CREATURE).sized(0.9F, 1.4F).clientTrackingRange(10));
+    public static final EntityType<Mule> MULE = register("mule", EntityType.Builder.of(Mule::new, MobCategory.CREATURE).sized(1.3964844F, 1.6F).clientTrackingRange(8));
+    public static final EntityType<Ocelot> OCELOT = register("ocelot", EntityType.Builder.of(Ocelot::new, MobCategory.CREATURE).sized(0.6F, 0.7F).clientTrackingRange(10));
+    public static final EntityType<Painting> PAINTING = register("painting", EntityType.Builder.of(Painting::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+    public static final EntityType<Panda> PANDA = register("panda", EntityType.Builder.of(Panda::new, MobCategory.CREATURE).sized(1.3F, 1.25F).clientTrackingRange(10));
+    public static final EntityType<Parrot> PARROT = register("parrot", EntityType.Builder.of(Parrot::new, MobCategory.CREATURE).sized(0.5F, 0.9F).clientTrackingRange(8));
+    public static final EntityType<Phantom> PHANTOM = register("phantom", EntityType.Builder.of(Phantom::new, MobCategory.MONSTER).sized(0.9F, 0.5F).clientTrackingRange(8));
     public static final EntityType<Pig> PIG = register("pig", EntityType.Builder.of(Pig::new, MobCategory.CREATURE).sized(0.9F, 0.9F).clientTrackingRange(10));
-    public static final EntityType<Piglin> PIGLIN = register(
-        "piglin", EntityType.Builder.of(Piglin::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8)
-    );
-    public static final EntityType<PiglinBrute> PIGLIN_BRUTE = register(
-        "piglin_brute", EntityType.Builder.of(PiglinBrute::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8)
-    );
-    public static final EntityType<Pillager> PILLAGER = register(
-        "pillager", EntityType.Builder.of(Pillager::new, MobCategory.MONSTER).canSpawnFarFromPlayer().sized(0.6F, 1.95F).clientTrackingRange(8)
-    );
-    public static final EntityType<PolarBear> POLAR_BEAR = register(
-        "polar_bear", EntityType.Builder.of(PolarBear::new, MobCategory.CREATURE).immuneTo(Blocks.POWDER_SNOW).sized(1.4F, 1.4F).clientTrackingRange(10)
-    );
-    public static final EntityType<ThrownPotion> POTION = register(
-        "potion", EntityType.Builder.<ThrownPotion>of(ThrownPotion::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10)
-    );
-    public static final EntityType<Pufferfish> PUFFERFISH = register(
-        "pufferfish", EntityType.Builder.of(Pufferfish::new, MobCategory.WATER_AMBIENT).sized(0.7F, 0.7F).clientTrackingRange(4)
-    );
-    public static final EntityType<Rabbit> RABBIT = register(
-        "rabbit", EntityType.Builder.of(Rabbit::new, MobCategory.CREATURE).sized(0.4F, 0.5F).clientTrackingRange(8)
-    );
-    public static final EntityType<Ravager> RAVAGER = register(
-        "ravager", EntityType.Builder.of(Ravager::new, MobCategory.MONSTER).sized(1.95F, 2.2F).clientTrackingRange(10)
-    );
-    public static final EntityType<Salmon> SALMON = register(
-        "salmon", EntityType.Builder.of(Salmon::new, MobCategory.WATER_AMBIENT).sized(0.7F, 0.4F).clientTrackingRange(4)
-    );
-    public static final EntityType<Sheep> SHEEP = register(
-        "sheep", EntityType.Builder.of(Sheep::new, MobCategory.CREATURE).sized(0.9F, 1.3F).clientTrackingRange(10)
-    );
-    public static final EntityType<Shulker> SHULKER = register(
-        "shulker", EntityType.Builder.of(Shulker::new, MobCategory.MONSTER).fireImmune().canSpawnFarFromPlayer().sized(1.0F, 1.0F).clientTrackingRange(10)
-    );
-    public static final EntityType<ShulkerBullet> SHULKER_BULLET = register(
-        "shulker_bullet", EntityType.Builder.<ShulkerBullet>of(ShulkerBullet::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(8)
-    );
-    public static final EntityType<Silverfish> SILVERFISH = register(
-        "silverfish", EntityType.Builder.of(Silverfish::new, MobCategory.MONSTER).sized(0.4F, 0.3F).clientTrackingRange(8)
-    );
-    public static final EntityType<Skeleton> SKELETON = register(
-        "skeleton", EntityType.Builder.of(Skeleton::new, MobCategory.MONSTER).sized(0.6F, 1.99F).clientTrackingRange(8)
-    );
-    public static final EntityType<SkeletonHorse> SKELETON_HORSE = register(
-        "skeleton_horse", EntityType.Builder.of(SkeletonHorse::new, MobCategory.CREATURE).sized(1.3964844F, 1.6F).clientTrackingRange(10)
-    );
-    public static final EntityType<Slime> SLIME = register(
-        "slime", EntityType.Builder.of(Slime::new, MobCategory.MONSTER).sized(2.04F, 2.04F).clientTrackingRange(10)
-    );
-    public static final EntityType<SmallFireball> SMALL_FIREBALL = register(
-        "small_fireball",
-        EntityType.Builder.<SmallFireball>of(SmallFireball::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(4).updateInterval(10)
-    );
-    public static final EntityType<Sniffer> SNIFFER = register(
-        "sniffer", EntityType.Builder.of(Sniffer::new, MobCategory.CREATURE).sized(1.9F, 1.75F).clientTrackingRange(10)
-    );
-    public static final EntityType<SnowGolem> SNOW_GOLEM = register(
-        "snow_golem", EntityType.Builder.of(SnowGolem::new, MobCategory.MISC).immuneTo(Blocks.POWDER_SNOW).sized(0.7F, 1.9F).clientTrackingRange(8)
-    );
-    public static final EntityType<Snowball> SNOWBALL = register(
-        "snowball", EntityType.Builder.<Snowball>of(Snowball::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10)
-    );
-    public static final EntityType<MinecartSpawner> SPAWNER_MINECART = register(
-        "spawner_minecart", EntityType.Builder.<MinecartSpawner>of(MinecartSpawner::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8)
-    );
-    public static final EntityType<SpectralArrow> SPECTRAL_ARROW = register(
-        "spectral_arrow",
-        EntityType.Builder.<SpectralArrow>of(SpectralArrow::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20)
-    );
-    public static final EntityType<Spider> SPIDER = register(
-        "spider", EntityType.Builder.of(Spider::new, MobCategory.MONSTER).sized(1.4F, 0.9F).clientTrackingRange(8)
-    );
-    public static final EntityType<Squid> SQUID = register(
-        "squid", EntityType.Builder.of(Squid::new, MobCategory.WATER_CREATURE).sized(0.8F, 0.8F).clientTrackingRange(8)
-    );
-    public static final EntityType<Stray> STRAY = register(
-        "stray", EntityType.Builder.of(Stray::new, MobCategory.MONSTER).sized(0.6F, 1.99F).immuneTo(Blocks.POWDER_SNOW).clientTrackingRange(8)
-    );
-    public static final EntityType<Strider> STRIDER = register(
-        "strider", EntityType.Builder.of(Strider::new, MobCategory.CREATURE).fireImmune().sized(0.9F, 1.7F).clientTrackingRange(10)
-    );
-    public static final EntityType<Tadpole> TADPOLE = register(
-        "tadpole", EntityType.Builder.of(Tadpole::new, MobCategory.CREATURE).sized(Tadpole.HITBOX_WIDTH, Tadpole.HITBOX_HEIGHT).clientTrackingRange(10)
-    );
-    public static final EntityType<Display.TextDisplay> TEXT_DISPLAY = register(
-        "text_display", EntityType.Builder.of(Display.TextDisplay::new, MobCategory.MISC).sized(0.0F, 0.0F).clientTrackingRange(10).updateInterval(1)
-    );
-    public static final EntityType<PrimedTnt> TNT = register(
-        "tnt", EntityType.Builder.<PrimedTnt>of(PrimedTnt::new, MobCategory.MISC).fireImmune().sized(0.98F, 0.98F).clientTrackingRange(10).updateInterval(10)
-    );
-    public static final EntityType<MinecartTNT> TNT_MINECART = register(
-        "tnt_minecart", EntityType.Builder.<MinecartTNT>of(MinecartTNT::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8)
-    );
-    public static final EntityType<TraderLlama> TRADER_LLAMA = register(
-        "trader_llama", EntityType.Builder.of(TraderLlama::new, MobCategory.CREATURE).sized(0.9F, 1.87F).clientTrackingRange(10)
-    );
-    public static final EntityType<ThrownTrident> TRIDENT = register(
-        "trident", EntityType.Builder.<ThrownTrident>of(ThrownTrident::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20)
-    );
-    public static final EntityType<TropicalFish> TROPICAL_FISH = register(
-        "tropical_fish", EntityType.Builder.of(TropicalFish::new, MobCategory.WATER_AMBIENT).sized(0.5F, 0.4F).clientTrackingRange(4)
-    );
-    public static final EntityType<Turtle> TURTLE = register(
-        "turtle", EntityType.Builder.of(Turtle::new, MobCategory.CREATURE).sized(1.2F, 0.4F).clientTrackingRange(10)
-    );
-    public static final EntityType<Vex> VEX = register(
-        "vex", EntityType.Builder.of(Vex::new, MobCategory.MONSTER).fireImmune().sized(0.4F, 0.8F).clientTrackingRange(8)
-    );
-    public static final EntityType<Villager> VILLAGER = register(
-        "villager", EntityType.Builder.<Villager>of(Villager::new, MobCategory.MISC).sized(0.6F, 1.95F).clientTrackingRange(10)
-    );
-    public static final EntityType<Vindicator> VINDICATOR = register(
-        "vindicator", EntityType.Builder.of(Vindicator::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8)
-    );
-    public static final EntityType<WanderingTrader> WANDERING_TRADER = register(
-        "wandering_trader", EntityType.Builder.of(WanderingTrader::new, MobCategory.CREATURE).sized(0.6F, 1.95F).clientTrackingRange(10)
-    );
-    public static final EntityType<Warden> WARDEN = register(
-        "warden", EntityType.Builder.of(Warden::new, MobCategory.MONSTER).sized(0.9F, 2.9F).clientTrackingRange(16).fireImmune()
-    );
-    public static final EntityType<WindCharge> WIND_CHARGE = register(
-        "wind_charge",
-        EntityType.Builder.<WindCharge>of(WindCharge::new, MobCategory.MISC)
-            .sized(0.3125F, 0.3125F)
-            .clientTrackingRange(4)
-            .updateInterval(10)
-            .requiredFeatures(FeatureFlags.UPDATE_1_21)
-    );
-    public static final EntityType<Witch> WITCH = register(
-        "witch", EntityType.Builder.of(Witch::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8)
-    );
-    public static final EntityType<WitherBoss> WITHER = register(
-        "wither",
-        EntityType.Builder.of(WitherBoss::new, MobCategory.MONSTER).fireImmune().immuneTo(Blocks.WITHER_ROSE).sized(0.9F, 3.5F).clientTrackingRange(10)
-    );
-    public static final EntityType<WitherSkeleton> WITHER_SKELETON = register(
-        "wither_skeleton",
-        EntityType.Builder.of(WitherSkeleton::new, MobCategory.MONSTER).fireImmune().immuneTo(Blocks.WITHER_ROSE).sized(0.7F, 2.4F).clientTrackingRange(8)
-    );
-    public static final EntityType<WitherSkull> WITHER_SKULL = register(
-        "wither_skull",
-        EntityType.Builder.<WitherSkull>of(WitherSkull::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(4).updateInterval(10)
-    );
-    public static final EntityType<Wolf> WOLF = register(
-        "wolf", EntityType.Builder.of(Wolf::new, MobCategory.CREATURE).sized(0.6F, 0.85F).clientTrackingRange(10)
-    );
-    public static final EntityType<Zoglin> ZOGLIN = register(
-        "zoglin", EntityType.Builder.of(Zoglin::new, MobCategory.MONSTER).fireImmune().sized(1.3964844F, 1.4F).clientTrackingRange(8)
-    );
-    public static final EntityType<Zombie> ZOMBIE = register(
-        "zombie", EntityType.Builder.<Zombie>of(Zombie::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8)
-    );
-    public static final EntityType<ZombieHorse> ZOMBIE_HORSE = register(
-        "zombie_horse", EntityType.Builder.of(ZombieHorse::new, MobCategory.CREATURE).sized(1.3964844F, 1.6F).clientTrackingRange(10)
-    );
-    public static final EntityType<ZombieVillager> ZOMBIE_VILLAGER = register(
-        "zombie_villager", EntityType.Builder.of(ZombieVillager::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8)
-    );
-    public static final EntityType<ZombifiedPiglin> ZOMBIFIED_PIGLIN = register(
-        "zombified_piglin", EntityType.Builder.of(ZombifiedPiglin::new, MobCategory.MONSTER).fireImmune().sized(0.6F, 1.95F).clientTrackingRange(8)
-    );
-    public static final EntityType<Player> PLAYER = register(
-        "player", EntityType.Builder.<Player>createNothing(MobCategory.MISC).noSave().noSummon().sized(0.6F, 1.8F).clientTrackingRange(32).updateInterval(2)
-    );
-    public static final EntityType<FishingHook> FISHING_BOBBER = register(
-        "fishing_bobber",
-        EntityType.Builder.<FishingHook>of(FishingHook::new, MobCategory.MISC).noSave().noSummon().sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(5)
-    );
+    public static final EntityType<Piglin> PIGLIN = register("piglin", EntityType.Builder.of(Piglin::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<PiglinBrute> PIGLIN_BRUTE = register("piglin_brute", EntityType.Builder.of(PiglinBrute::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<Pillager> PILLAGER = register("pillager", EntityType.Builder.of(Pillager::new, MobCategory.MONSTER).canSpawnFarFromPlayer().sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<PolarBear> POLAR_BEAR = register("polar_bear", EntityType.Builder.of(PolarBear::new, MobCategory.CREATURE).immuneTo(Blocks.POWDER_SNOW).sized(1.4F, 1.4F).clientTrackingRange(10));
+    public static final EntityType<ThrownPotion> POTION = register("potion", EntityType.Builder.of(ThrownPotion::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<Pufferfish> PUFFERFISH = register("pufferfish", EntityType.Builder.of(Pufferfish::new, MobCategory.WATER_AMBIENT).sized(0.7F, 0.7F).clientTrackingRange(4));
+    public static final EntityType<Rabbit> RABBIT = register("rabbit", EntityType.Builder.of(Rabbit::new, MobCategory.CREATURE).sized(0.4F, 0.5F).clientTrackingRange(8));
+    public static final EntityType<Ravager> RAVAGER = register("ravager", EntityType.Builder.of(Ravager::new, MobCategory.MONSTER).sized(1.95F, 2.2F).clientTrackingRange(10));
+    public static final EntityType<Salmon> SALMON = register("salmon", EntityType.Builder.of(Salmon::new, MobCategory.WATER_AMBIENT).sized(0.7F, 0.4F).clientTrackingRange(4));
+    public static final EntityType<Sheep> SHEEP = register("sheep", EntityType.Builder.of(Sheep::new, MobCategory.CREATURE).sized(0.9F, 1.3F).clientTrackingRange(10));
+    public static final EntityType<Shulker> SHULKER = register("shulker", EntityType.Builder.of(Shulker::new, MobCategory.MONSTER).fireImmune().canSpawnFarFromPlayer().sized(1.0F, 1.0F).clientTrackingRange(10));
+    public static final EntityType<ShulkerBullet> SHULKER_BULLET = register("shulker_bullet", EntityType.Builder.of(ShulkerBullet::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(8));
+    public static final EntityType<Silverfish> SILVERFISH = register("silverfish", EntityType.Builder.of(Silverfish::new, MobCategory.MONSTER).sized(0.4F, 0.3F).clientTrackingRange(8));
+    public static final EntityType<Skeleton> SKELETON = register("skeleton", EntityType.Builder.of(Skeleton::new, MobCategory.MONSTER).sized(0.6F, 1.99F).clientTrackingRange(8));
+    public static final EntityType<SkeletonHorse> SKELETON_HORSE = register("skeleton_horse", EntityType.Builder.of(SkeletonHorse::new, MobCategory.CREATURE).sized(1.3964844F, 1.6F).clientTrackingRange(10));
+    public static final EntityType<Slime> SLIME = register("slime", EntityType.Builder.of(Slime::new, MobCategory.MONSTER).sized(2.04F, 2.04F).clientTrackingRange(10));
+    public static final EntityType<SmallFireball> SMALL_FIREBALL = register("small_fireball", EntityType.Builder.of(SmallFireball::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<Sniffer> SNIFFER = register("sniffer", EntityType.Builder.of(Sniffer::new, MobCategory.CREATURE).sized(1.9F, 1.75F).clientTrackingRange(10));
+    public static final EntityType<SnowGolem> SNOW_GOLEM = register("snow_golem", EntityType.Builder.of(SnowGolem::new, MobCategory.MISC).immuneTo(Blocks.POWDER_SNOW).sized(0.7F, 1.9F).clientTrackingRange(8));
+    public static final EntityType<Snowball> SNOWBALL = register("snowball", EntityType.Builder.of(Snowball::new, MobCategory.MISC).sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<MinecartSpawner> SPAWNER_MINECART = register("spawner_minecart", EntityType.Builder.of(MinecartSpawner::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<SpectralArrow> SPECTRAL_ARROW = register("spectral_arrow", EntityType.Builder.of(SpectralArrow::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<Spider> SPIDER = register("spider", EntityType.Builder.of(Spider::new, MobCategory.MONSTER).sized(1.4F, 0.9F).clientTrackingRange(8));
+    public static final EntityType<Squid> SQUID = register("squid", EntityType.Builder.of(Squid::new, MobCategory.WATER_CREATURE).sized(0.8F, 0.8F).clientTrackingRange(8));
+    public static final EntityType<Stray> STRAY = register("stray", EntityType.Builder.of(Stray::new, MobCategory.MONSTER).sized(0.6F, 1.99F).immuneTo(Blocks.POWDER_SNOW).clientTrackingRange(8));
+    public static final EntityType<Strider> STRIDER = register("strider", EntityType.Builder.of(Strider::new, MobCategory.CREATURE).fireImmune().sized(0.9F, 1.7F).clientTrackingRange(10));
+    public static final EntityType<Tadpole> TADPOLE = register("tadpole", EntityType.Builder.of(Tadpole::new, MobCategory.CREATURE).sized(Tadpole.HITBOX_WIDTH, Tadpole.HITBOX_HEIGHT).clientTrackingRange(10));
+    public static final EntityType<Display.TextDisplay> TEXT_DISPLAY = register("text_display", EntityType.Builder.of(Display.TextDisplay::new, MobCategory.MISC).sized(0.0F, 0.0F).clientTrackingRange(10).updateInterval(1));
+    public static final EntityType<PrimedTnt> TNT = register("tnt", EntityType.Builder.of(PrimedTnt::new, MobCategory.MISC).fireImmune().sized(0.98F, 0.98F).clientTrackingRange(10).updateInterval(10));
+    public static final EntityType<MinecartTNT> TNT_MINECART = register("tnt_minecart", EntityType.Builder.of(MinecartTNT::new, MobCategory.MISC).sized(0.98F, 0.7F).clientTrackingRange(8));
+    public static final EntityType<TraderLlama> TRADER_LLAMA = register("trader_llama", EntityType.Builder.of(TraderLlama::new, MobCategory.CREATURE).sized(0.9F, 1.87F).clientTrackingRange(10));
+    public static final EntityType<ThrownTrident> TRIDENT = register("trident", EntityType.Builder.of(ThrownTrident::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20));
+    public static final EntityType<TropicalFish> TROPICAL_FISH = register("tropical_fish", EntityType.Builder.of(TropicalFish::new, MobCategory.WATER_AMBIENT).sized(0.5F, 0.4F).clientTrackingRange(4));
+    public static final EntityType<Turtle> TURTLE = register("turtle", EntityType.Builder.of(Turtle::new, MobCategory.CREATURE).sized(1.2F, 0.4F).clientTrackingRange(10));
+    public static final EntityType<Vex> VEX = register("vex", EntityType.Builder.of(Vex::new, MobCategory.MONSTER).fireImmune().sized(0.4F, 0.8F).clientTrackingRange(8));
+    public static final EntityType<Villager> VILLAGER = register("villager", EntityType.Builder.of(Villager::new, MobCategory.MISC).sized(0.6F, 1.95F).clientTrackingRange(10));
+    public static final EntityType<Vindicator> VINDICATOR = register("vindicator", EntityType.Builder.of(Vindicator::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<WanderingTrader> WANDERING_TRADER = register("wandering_trader", EntityType.Builder.of(WanderingTrader::new, MobCategory.CREATURE).sized(0.6F, 1.95F).clientTrackingRange(10));
+    public static final EntityType<Warden> WARDEN = register("warden", EntityType.Builder.of(Warden::new, MobCategory.MONSTER).sized(0.9F, 2.9F).clientTrackingRange(16).fireImmune());
+    public static final EntityType<WindCharge> WIND_CHARGE = register("wind_charge", EntityType.Builder.of(WindCharge::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(4).updateInterval(10).requiredFeatures(FeatureFlags.UPDATE_1_21));
+    public static final EntityType<Witch> WITCH = register("witch", EntityType.Builder.of(Witch::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<WitherBoss> WITHER = register("wither", EntityType.Builder.of(WitherBoss::new, MobCategory.MONSTER).fireImmune().immuneTo(Blocks.WITHER_ROSE).sized(0.9F, 3.5F).clientTrackingRange(10));
+    public static final EntityType<WitherSkeleton> WITHER_SKELETON = register("wither_skeleton", EntityType.Builder.of(WitherSkeleton::new, MobCategory.MONSTER).fireImmune().immuneTo(Blocks.WITHER_ROSE).sized(0.7F, 2.4F).clientTrackingRange(8));
+    public static final EntityType<WitherSkull> WITHER_SKULL = register("wither_skull", EntityType.Builder.of(WitherSkull::new, MobCategory.MISC).sized(0.3125F, 0.3125F).clientTrackingRange(4).updateInterval(10));
+    public static final EntityType<Wolf> WOLF = register("wolf", EntityType.Builder.of(Wolf::new, MobCategory.CREATURE).sized(0.6F, 0.85F).clientTrackingRange(10));
+    public static final EntityType<Zoglin> ZOGLIN = register("zoglin", EntityType.Builder.of(Zoglin::new, MobCategory.MONSTER).fireImmune().sized(1.3964844F, 1.4F).clientTrackingRange(8));
+    public static final EntityType<Zombie> ZOMBIE = register("zombie", EntityType.Builder.of(Zombie::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<ZombieHorse> ZOMBIE_HORSE = register("zombie_horse", EntityType.Builder.of(ZombieHorse::new, MobCategory.CREATURE).sized(1.3964844F, 1.6F).clientTrackingRange(10));
+    public static final EntityType<ZombieVillager> ZOMBIE_VILLAGER = register("zombie_villager", EntityType.Builder.of(ZombieVillager::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<ZombifiedPiglin> ZOMBIFIED_PIGLIN = register("zombified_piglin", EntityType.Builder.of(ZombifiedPiglin::new, MobCategory.MONSTER).fireImmune().sized(0.6F, 1.95F).clientTrackingRange(8));
+    public static final EntityType<Player> PLAYER = register("player", EntityType.Builder.createNothing(MobCategory.MISC).noSave().noSummon().sized(0.6F, 1.8F).clientTrackingRange(32).updateInterval(2));
+    public static final EntityType<FishingHook> FISHING_BOBBER = register("fishing_bobber", EntityType.Builder.of(FishingHook::new, MobCategory.MISC).noSave().noSummon().sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(5));
     private final EntityType.EntityFactory<T> factory;
     private final MobCategory category;
     private final ImmutableSet<Block> immuneTo;
@@ -588,8 +314,8 @@
     private final EntityDimensions dimensions;
     private final FeatureFlagSet requiredFeatures;
 
-    private static <T extends Entity> EntityType<T> register(String key, EntityType.Builder<T> builder) {
-        return Registry.register(BuiltInRegistries.ENTITY_TYPE, key, builder.build(key));
+    private static <T extends Entity> EntityType<T> register(String key, EntityType.Builder builder) { // CraftBukkit - decompile error
+        return (EntityType) Registry.register(BuiltInRegistries.ENTITY_TYPE, key, (EntityType<T>) builder.build(key)); // CraftBukkit - decompile error
     }
 
     public static ResourceLocation getKey(EntityType<?> entityType) {
@@ -600,19 +326,8 @@
         return BuiltInRegistries.ENTITY_TYPE.getOptional(ResourceLocation.tryParse(key));
     }
 
-    public EntityType(
-        EntityType.EntityFactory<T> factory,
-        MobCategory category,
-        boolean serialize,
-        boolean summon,
-        boolean fireImmune,
-        boolean canSpawnFarFromPlayer,
-        ImmutableSet<Block> immuneTo,
-        EntityDimensions dimensions,
-        int clientTrackingRange,
-        int updateInterval,
-        FeatureFlagSet requiredFeatures
-    ) {
+    public EntityType(EntityType.EntityFactory<T> factory, MobCategory category, boolean serialize, boolean summon, boolean fireImmune, boolean canSpawnFarFromPlayer, ImmutableSet<Block> immuneTo, EntityDimensions dimensions, int clientTrackingRange, int updateInterval, FeatureFlagSet requiredFeatures) {
+        this.builtInRegistryHolder = BuiltInRegistries.ENTITY_TYPE.createIntrusiveHolder(this);
         this.factory = factory;
         this.category = category;
         this.canSpawnFarFromPlayer = canSpawnFarFromPlayer;
@@ -627,134 +342,142 @@
     }
 
     @Nullable
-    public T spawn(
-        ServerLevel serverLevel,
-        @Nullable ItemStack stack,
-        @Nullable Player player,
-        BlockPos pos,
-        MobSpawnType spawnType,
-        boolean shouldOffsetY,
-        boolean shouldOffsetYMore
-    ) {
-        Consumer<T> consumer;
-        CompoundTag tag;
-        if (stack != null) {
-            tag = stack.getTag();
-            consumer = createDefaultStackConfig(serverLevel, stack, player);
+    public T spawn(ServerLevel serverLevel, @Nullable ItemStack stack, @Nullable Player player, BlockPos pos, EnumMobSpawn spawnType, boolean shouldOffsetY, boolean shouldOffsetYMore) {
+        // CraftBukkit start
+        return this.spawn(serverLevel, stack, player, pos, spawnType, shouldOffsetY, shouldOffsetYMore, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER_EGG);
+    }
+
+    @Nullable
+    public T spawn(ServerLevel worldserver, @Nullable ItemStack itemstack, @Nullable Player entityhuman, BlockPos blockposition, EnumMobSpawn enummobspawn, boolean flag, boolean flag1, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+        // CraftBukkit end
+        CompoundTag nbttagcompound;
+        Consumer<T> consumer; // CraftBukkit - decompile error
+
+        if (itemstack != null) {
+            nbttagcompound = itemstack.getTag();
+            consumer = createDefaultStackConfig(worldserver, itemstack, entityhuman);
         } else {
-            consumer = entity -> {
+            consumer = (entity) -> {
             };
-            tag = null;
+            nbttagcompound = null;
         }
 
-        return this.spawn(serverLevel, tag, consumer, pos, spawnType, shouldOffsetY, shouldOffsetYMore);
+        return this.spawn(worldserver, nbttagcompound, consumer, blockposition, enummobspawn, flag, flag1, spawnReason); // CraftBukkit
     }
 
     public static <T extends Entity> Consumer<T> createDefaultStackConfig(ServerLevel serverLevel, ItemStack stack, @Nullable Player player) {
-        return appendDefaultStackConfig(entity -> {
+        return appendDefaultStackConfig((entity) -> {
         }, serverLevel, stack, player);
     }
 
-    public static <T extends Entity> Consumer<T> appendDefaultStackConfig(
-        Consumer<T> consumer, ServerLevel serverLevel, ItemStack stack, @Nullable Player player
-    ) {
+    public static <T extends Entity> Consumer<T> appendDefaultStackConfig(Consumer<T> consumer, ServerLevel serverLevel, ItemStack stack, @Nullable Player player) {
         return appendCustomEntityStackConfig(appendCustomNameConfig(consumer, stack), serverLevel, stack, player);
     }
 
     public static <T extends Entity> Consumer<T> appendCustomNameConfig(Consumer<T> consumer, ItemStack stack) {
-        return stack.hasCustomHoverName() ? consumer.andThen(entity -> entity.setCustomName(stack.getHoverName())) : consumer;
+        return stack.hasCustomHoverName() ? consumer.andThen((entity) -> {
+            entity.setCustomName(stack.getHoverName());
+        }) : consumer;
     }
 
-    public static <T extends Entity> Consumer<T> appendCustomEntityStackConfig(
-        Consumer<T> consumer, ServerLevel level, ItemStack stack, @Nullable Player player
-    ) {
-        CompoundTag tag = stack.getTag();
-        return tag != null ? consumer.andThen(spawnedEntity -> updateCustomEntityTag(level, player, spawnedEntity, tag)) : consumer;
+    public static <T extends Entity> Consumer<T> appendCustomEntityStackConfig(Consumer<T> consumer, ServerLevel level, ItemStack stack, @Nullable Player player) {
+        CompoundTag nbttagcompound = stack.getTag();
+
+        return nbttagcompound != null ? consumer.andThen((entity) -> {
+            try { updateCustomEntityTag(level, player, entity, nbttagcompound); } catch (Throwable t) { LOGGER.warn("Error loading spawn egg NBT", t); } // CraftBukkit - SPIGOT-5665
+        }) : consumer;
     }
 
     @Nullable
-    public T spawn(ServerLevel level, BlockPos pos, MobSpawnType spawnType) {
-        return this.spawn(level, (CompoundTag)null, null, pos, spawnType, false, false);
+    public T spawn(ServerLevel level, BlockPos pos, EnumMobSpawn spawnType) {
+        // CraftBukkit start
+        return this.spawn(level, pos, spawnType, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
     }
 
     @Nullable
-    public T spawn(
-        ServerLevel level,
-        @Nullable CompoundTag compound,
-        @Nullable Consumer<T> consumer,
-        BlockPos pos,
-        MobSpawnType spawnType,
-        boolean shouldOffsetY,
-        boolean shouldOffsetYMore
-    ) {
-        T entity = this.create(level, compound, consumer, pos, spawnType, shouldOffsetY, shouldOffsetYMore);
-        if (entity != null) {
-            level.addFreshEntityWithPassengers(entity);
+    public T spawn(ServerLevel worldserver, BlockPos blockposition, EnumMobSpawn enummobspawn, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+        return this.spawn(worldserver, (CompoundTag) null, null, blockposition, enummobspawn, false, false, spawnReason); // CraftBukkit - decompile error
+        // CraftBukkit end
+    }
+
+    @Nullable
+    public T spawn(ServerLevel level, @Nullable CompoundTag compound, @Nullable Consumer<T> consumer, BlockPos pos, EnumMobSpawn spawnType, boolean shouldOffsetY, boolean shouldOffsetYMore) {
+        // CraftBukkit start
+        return this.spawn(level, compound, consumer, pos, spawnType, shouldOffsetY, shouldOffsetYMore, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    @Nullable
+    public T spawn(ServerLevel worldserver, @Nullable CompoundTag nbttagcompound, @Nullable Consumer<T> consumer, BlockPos blockposition, EnumMobSpawn enummobspawn, boolean flag, boolean flag1, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+        // CraftBukkit end
+        T t0 = this.create(worldserver, nbttagcompound, consumer, blockposition, enummobspawn, flag, flag1);
+
+        if (t0 != null) {
+            worldserver.addFreshEntityWithPassengers(t0, spawnReason);
+            return !t0.isRemoved() ? t0 : null; // Don't return an entity when CreatureSpawnEvent is canceled
+            // CraftBukkit end
         }
 
-        return entity;
+        return t0;
     }
 
     @Nullable
-    public T create(
-        ServerLevel level,
-        @Nullable CompoundTag nbt,
-        @Nullable Consumer<T> consumer,
-        BlockPos pos,
-        MobSpawnType spawnType,
-        boolean shouldOffsetY,
-        boolean shouldOffsetYMore
-    ) {
-        T entity = this.create(level);
-        if (entity == null) {
+    public T create(ServerLevel level, @Nullable CompoundTag nbt, @Nullable Consumer<T> consumer, BlockPos pos, EnumMobSpawn spawnType, boolean shouldOffsetY, boolean shouldOffsetYMore) {
+        T t0 = this.create(level);
+
+        if (t0 == null) {
             return null;
         } else {
-            double yOffset;
+            double d0;
+
             if (shouldOffsetY) {
-                entity.setPos((double)pos.getX() + 0.5, (double)(pos.getY() + 1), (double)pos.getZ() + 0.5);
-                yOffset = getYOffset(level, pos, shouldOffsetYMore, entity.getBoundingBox());
+                t0.setPos((double) pos.getX() + 0.5D, (double) (pos.getY() + 1), (double) pos.getZ() + 0.5D);
+                d0 = getYOffset(level, pos, shouldOffsetYMore, t0.getBoundingBox());
             } else {
-                yOffset = 0.0;
+                d0 = 0.0D;
             }
 
-            entity.moveTo(
-                (double)pos.getX() + 0.5, (double)pos.getY() + yOffset, (double)pos.getZ() + 0.5, Mth.wrapDegrees(level.random.nextFloat() * 360.0F), 0.0F
-            );
-            if (entity instanceof Mob mob) {
-                mob.yHeadRot = mob.getYRot();
-                mob.yBodyRot = mob.getYRot();
-                mob.finalizeSpawn(level, level.getCurrentDifficultyAt(mob.blockPosition()), spawnType, null, nbt);
-                mob.playAmbientSound();
+            t0.moveTo((double) pos.getX() + 0.5D, (double) pos.getY() + d0, (double) pos.getZ() + 0.5D, Mth.wrapDegrees(level.random.nextFloat() * 360.0F), 0.0F);
+            if (t0 instanceof Mob) {
+                Mob entityinsentient = (Mob) t0;
+
+                entityinsentient.yHeadRot = entityinsentient.getYRot();
+                entityinsentient.yBodyRot = entityinsentient.getYRot();
+                entityinsentient.finalizeSpawn(level, level.getCurrentDifficultyAt(entityinsentient.blockPosition()), spawnType, (GroupDataEntity) null, nbt);
+                entityinsentient.playAmbientSound();
             }
 
             if (consumer != null) {
-                consumer.accept(entity);
+                consumer.accept(t0);
             }
 
-            return entity;
+            return t0;
         }
     }
 
     protected static double getYOffset(LevelReader level, BlockPos pos, boolean shouldOffsetYMore, AABB box) {
-        AABB aABB = new AABB(pos);
+        AABB axisalignedbb1 = new AABB(pos);
+
         if (shouldOffsetYMore) {
-            aABB = aABB.expandTowards(0.0, -1.0, 0.0);
+            axisalignedbb1 = axisalignedbb1.expandTowards(0.0D, -1.0D, 0.0D);
         }
 
-        Iterable<VoxelShape> collisions = level.getCollisions(null, aABB);
-        return 1.0 + Shapes.collide(Direction.Axis.Y, box, collisions, shouldOffsetYMore ? -2.0 : -1.0);
+        Iterable<VoxelShape> iterable = level.getCollisions((Entity) null, axisalignedbb1);
+
+        return 1.0D + Shapes.collide(Direction.Axis.Y, box, iterable, shouldOffsetYMore ? -2.0D : -1.0D);
     }
 
     public static void updateCustomEntityTag(Level level, @Nullable Player player, @Nullable Entity spawnedEntity, @Nullable CompoundTag itemNBT) {
         if (itemNBT != null && itemNBT.contains("EntityTag", 10)) {
-            MinecraftServer server = level.getServer();
-            if (server != null && spawnedEntity != null) {
-                if (level.isClientSide || !spawnedEntity.onlyOpCanSetNbt() || player != null && server.getPlayerList().isOp(player.getGameProfile())) {
-                    CompoundTag compoundTag = spawnedEntity.saveWithoutId(new CompoundTag());
-                    UUID uUID = spawnedEntity.getUUID();
-                    compoundTag.merge(itemNBT.getCompound("EntityTag"));
-                    spawnedEntity.setUUID(uUID);
-                    spawnedEntity.load(compoundTag);
+            MinecraftServer minecraftserver = level.getServer();
+
+            if (minecraftserver != null && spawnedEntity != null) {
+                if (level.isClientSide || !spawnedEntity.onlyOpCanSetNbt() || player != null && minecraftserver.getPlayerList().isOp(player.getGameProfile())) {
+                    CompoundTag nbttagcompound1 = spawnedEntity.saveWithoutId(new CompoundTag());
+                    UUID uuid = spawnedEntity.getUUID();
+
+                    nbttagcompound1.merge(itemNBT.getCompound("EntityTag"));
+                    spawnedEntity.setUUID(uuid);
+                    spawnedEntity.load(nbttagcompound1);
                 }
             }
         }
@@ -796,20 +519,21 @@
         return this.description;
     }
 
-    @Override
     public String toString() {
         return this.getDescriptionId();
     }
 
     public String toShortString() {
-        int index = this.getDescriptionId().lastIndexOf(46);
-        return index == -1 ? this.getDescriptionId() : this.getDescriptionId().substring(index + 1);
+        int i = this.getDescriptionId().lastIndexOf(46);
+
+        return i == -1 ? this.getDescriptionId() : this.getDescriptionId().substring(i + 1);
     }
 
     public ResourceLocation getDefaultLootTable() {
         if (this.lootTable == null) {
-            ResourceLocation key = BuiltInRegistries.ENTITY_TYPE.getKey(this);
-            this.lootTable = key.withPrefix("entities/");
+            ResourceLocation minecraftkey = BuiltInRegistries.ENTITY_TYPE.getKey(this);
+
+            this.lootTable = minecraftkey.withPrefix("entities/");
         }
 
         return this.lootTable;
@@ -834,27 +558,23 @@
     }
 
     public static Optional<Entity> create(CompoundTag tag, Level level) {
-        return Util.ifElse(
-            by(tag).map(entityType -> entityType.create(level)),
-            entity -> entity.load(tag),
-            () -> LOGGER.warn("Skipping Entity with id {}", tag.getString("id"))
-        );
+        return Util.ifElse(by(tag).map((entitytypes) -> {
+            return entitytypes.create(level);
+        }), (entity) -> {
+            entity.load(tag);
+        }, () -> {
+            EntityType.LOGGER.warn("Skipping Entity with id {}", tag.getString("id"));
+        });
     }
 
-    public AABB getAABB(double x, double y, double z) {
+    public AABB getAABB(double x, double d1, double y) {
         float f = this.getWidth() / 2.0F;
-        return new AABB(x - (double)f, y, z - (double)f, x + (double)f, y + (double)this.getHeight(), z + (double)f);
+
+        return new AABB(x - (double) f, d1, y - (double) f, x + (double) f, d1 + (double) this.getHeight(), y + (double) f);
     }
 
-    public boolean isBlockDangerous(BlockState state) {
-        return !this.immuneTo.contains(state.getBlock())
-            && (
-                !this.fireImmune && WalkNodeEvaluator.isBurningBlock(state)
-                    || state.is(Blocks.WITHER_ROSE)
-                    || state.is(Blocks.SWEET_BERRY_BUSH)
-                    || state.is(Blocks.CACTUS)
-                    || state.is(Blocks.POWDER_SNOW)
-            );
+    public boolean isBlockDangerous(IBlockData state) {
+        return this.immuneTo.contains(state.getBlock()) ? false : (!this.fireImmune && WalkNodeEvaluator.isBurningBlock(state) ? true : state.is(Blocks.WITHER_ROSE) || state.is(Blocks.SWEET_BERRY_BUSH) || state.is(Blocks.CACTUS) || state.is(Blocks.POWDER_SNOW));
     }
 
     public EntityDimensions getDimensions() {
@@ -867,44 +587,44 @@
 
     @Nullable
     public static Entity loadEntityRecursive(CompoundTag compound, Level level, Function<Entity, Entity> entityFunction) {
-        return loadStaticEntity(compound, level).map(entityFunction).map(entity -> {
+        return (Entity) loadStaticEntity(compound, level).map(entityFunction).map((entity) -> {
             if (compound.contains("Passengers", 9)) {
-                ListTag list = compound.getList("Passengers", 10);
+                ListTag nbttaglist = compound.getList("Passengers", 10);
 
-                for (int i = 0; i < list.size(); i++) {
-                    Entity entity1 = loadEntityRecursive(list.getCompound(i), level, entityFunction);
+                for (int i = 0; i < nbttaglist.size(); ++i) {
+                    Entity entity1 = loadEntityRecursive(nbttaglist.getCompound(i), level, entityFunction);
+
                     if (entity1 != null) {
                         entity1.startRiding(entity, true);
                     }
                 }
             }
 
-            return (Entity)entity;
-        }).orElse(null);
+            return entity;
+        }).orElse(null); // CraftBukkit - decompile error
     }
 
     public static Stream<Entity> loadEntitiesRecursive(final List<? extends Tag> tags, final Level level) {
         final Spliterator<? extends Tag> spliterator = tags.spliterator();
+
         return StreamSupport.stream(new Spliterator<Entity>() {
-            @Override
             public boolean tryAdvance(Consumer<? super Entity> consumer) {
-                return spliterator.tryAdvance(tag -> EntityType.loadEntityRecursive((CompoundTag)tag, level, entity -> {
+                return spliterator.tryAdvance((nbtbase) -> {
+                    EntityType.loadEntityRecursive((CompoundTag) nbtbase, level, (entity) -> {
                         consumer.accept(entity);
                         return entity;
-                    }));
+                    });
+                });
             }
 
-            @Override
             public Spliterator<Entity> trySplit() {
                 return null;
             }
 
-            @Override
             public long estimateSize() {
-                return (long)tags.size();
+                return (long) tags.size();
             }
 
-            @Override
             public int characteristics() {
                 return 1297;
             }
@@ -914,8 +634,8 @@
     private static Optional<Entity> loadStaticEntity(CompoundTag compound, Level level) {
         try {
             return create(compound, level);
-        } catch (RuntimeException var3) {
-            LOGGER.warn("Exception loading entity: ", (Throwable)var3);
+        } catch (RuntimeException runtimeexception) {
+            EntityType.LOGGER.warn("Exception loading entity: ", runtimeexception);
             return Optional.empty();
         }
     }
@@ -929,30 +649,20 @@
     }
 
     public boolean trackDeltas() {
-        return this != PLAYER
-            && this != LLAMA_SPIT
-            && this != WITHER
-            && this != BAT
-            && this != ITEM_FRAME
-            && this != GLOW_ITEM_FRAME
-            && this != LEASH_KNOT
-            && this != PAINTING
-            && this != END_CRYSTAL
-            && this != EVOKER_FANGS;
+        return this != EntityType.PLAYER && this != EntityType.LLAMA_SPIT && this != EntityType.WITHER && this != EntityType.BAT && this != EntityType.ITEM_FRAME && this != EntityType.GLOW_ITEM_FRAME && this != EntityType.LEASH_KNOT && this != EntityType.PAINTING && this != EntityType.END_CRYSTAL && this != EntityType.EVOKER_FANGS;
     }
 
     public boolean is(TagKey<EntityType<?>> tag) {
         return this.builtInRegistryHolder.is(tag);
     }
 
-    public boolean is(HolderSet<EntityType<?>> holderSet) {
-        return holderSet.contains(this.builtInRegistryHolder);
+    public boolean is(HolderSet<EntityType<?>> holderset) {
+        return holderset.contains(this.builtInRegistryHolder);
     }
 
     @Nullable
-    @Override
     public T tryCast(Entity entity) {
-        return (T)(entity.getType() == this ? entity : null);
+        return entity.getType() == this ? (T) entity : null; // CraftBukkit - decompile error
     }
 
     @Override
@@ -960,12 +670,14 @@
         return Entity.class;
     }
 
+    /** @deprecated */
     @Deprecated
     public Holder.Reference<EntityType<?>> builtInRegistryHolder() {
         return this.builtInRegistryHolder;
     }
 
     public static class Builder<T extends Entity> {
+
         private final EntityType.EntityFactory<T> factory;
         private final MobCategory category;
         private ImmutableSet<Block> immuneTo = ImmutableSet.of();
@@ -976,20 +688,23 @@
         private int clientTrackingRange = 5;
         private int updateInterval = 3;
         private EntityDimensions dimensions = EntityDimensions.scalable(0.6F, 1.8F);
-        private FeatureFlagSet requiredFeatures = FeatureFlags.VANILLA_SET;
+        private FeatureFlagSet requiredFeatures;
 
         private Builder(EntityType.EntityFactory<T> factory, MobCategory category) {
+            this.requiredFeatures = FeatureFlags.VANILLA_SET;
             this.factory = factory;
             this.category = category;
             this.canSpawnFarFromPlayer = category == MobCategory.CREATURE || category == MobCategory.MISC;
         }
 
-        public static <T extends Entity> EntityType.Builder<T> of(EntityType.EntityFactory<T> factory, MobCategory category) {
+        public static <T extends Entity> EntityType.Builder<T> of(EntityType.EntityFactory factory, MobCategory category) { // CraftBukkit - decompile error
             return new EntityType.Builder<>(factory, category);
         }
 
         public static <T extends Entity> EntityType.Builder<T> createNothing(MobCategory category) {
-            return new EntityType.Builder<>((entityType, level) -> null, category);
+            return new EntityType.Builder<>((entitytypes, world) -> {
+                return null;
+            }, category);
         }
 
         public EntityType.Builder<T> sized(float width, float height) {
@@ -1039,26 +754,15 @@
 
         public EntityType<T> build(String key) {
             if (this.serialize) {
-                Util.fetchChoiceType(References.ENTITY_TREE, key);
+                Util.fetchChoiceType(DataConverterTypes.ENTITY_TREE, key);
             }
 
-            return new EntityType<>(
-                this.factory,
-                this.category,
-                this.serialize,
-                this.summon,
-                this.fireImmune,
-                this.canSpawnFarFromPlayer,
-                this.immuneTo,
-                this.dimensions,
-                this.clientTrackingRange,
-                this.updateInterval,
-                this.requiredFeatures
-            );
+            return new EntityType<>(this.factory, this.category, this.serialize, this.summon, this.fireImmune, this.canSpawnFarFromPlayer, this.immuneTo, this.dimensions, this.clientTrackingRange, this.updateInterval, this.requiredFeatures);
         }
     }
 
     public interface EntityFactory<T extends Entity> {
+
         T create(EntityType<T> entityType, Level level);
     }
 }
