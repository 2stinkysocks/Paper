--- a/net/minecraft/world/effect/HealOrHarmMobEffect.java
+++ b/net/minecraft/world/effect/HealOrHarmMobEffect.java
@@ -5,10 +5,11 @@
 import net.minecraft.world.entity.LivingEntity;
 
 class HealOrHarmMobEffect extends InstantenousMobEffect {
+
     private final boolean isHarm;
 
-    public HealOrHarmMobEffect(MobEffectCategory category, int color, boolean flag) {
-        super(category, color);
+    public HealOrHarmMobEffect(MobEffectCategory mobeffectinfo, int i, boolean flag) {
+        super(mobeffectinfo, i);
         this.isHarm = flag;
     }
 
@@ -16,24 +17,28 @@
     public void applyEffectTick(LivingEntity livingEntity, int amplifier) {
         super.applyEffectTick(livingEntity, amplifier);
         if (this.isHarm == livingEntity.isInvertedHealAndHarm()) {
-            livingEntity.heal((float)Math.max(4 << amplifier, 0));
+            livingEntity.heal((float) Math.max(4 << amplifier, 0), org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.MAGIC); // CraftBukkit
         } else {
-            livingEntity.hurt(livingEntity.damageSources().magic(), (float)(6 << amplifier));
+            livingEntity.hurt(livingEntity.damageSources().magic(), (float) (6 << amplifier));
         }
+
     }
 
     @Override
     public void applyInstantenousEffect(@Nullable Entity source, @Nullable Entity indirectSource, LivingEntity livingEntity, int amplifier, double health) {
+        int j;
+
         if (this.isHarm == livingEntity.isInvertedHealAndHarm()) {
-            int i = (int)(health * (double)(4 << amplifier) + 0.5);
-            livingEntity.heal((float)i);
+            j = (int) (health * (double) (4 << amplifier) + 0.5D);
+            livingEntity.heal((float) j, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.MAGIC); // CraftBukkit
         } else {
-            int i = (int)(health * (double)(6 << amplifier) + 0.5);
+            j = (int) (health * (double) (6 << amplifier) + 0.5D);
             if (source == null) {
-                livingEntity.hurt(livingEntity.damageSources().magic(), (float)i);
+                livingEntity.hurt(livingEntity.damageSources().magic(), (float) j);
             } else {
-                livingEntity.hurt(livingEntity.damageSources().indirectMagic(source, indirectSource), (float)i);
+                livingEntity.hurt(livingEntity.damageSources().indirectMagic(source, indirectSource), (float) j);
             }
         }
+
     }
 }
