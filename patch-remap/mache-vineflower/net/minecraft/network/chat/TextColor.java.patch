--- a/net/minecraft/network/chat/TextColor.java
+++ b/net/minecraft/network/chat/TextColor.java
@@ -13,27 +13,34 @@
 import net.minecraft.ChatFormatting;
 
 public final class TextColor {
+
     private static final String CUSTOM_COLOR_PREFIX = "#";
     public static final Codec<TextColor> CODEC = Codec.STRING.comapFlatMap(TextColor::parseColor, TextColor::serialize);
-    private static final Map<ChatFormatting, TextColor> LEGACY_FORMAT_TO_COLOR = Stream.of(ChatFormatting.values())
-        .filter(ChatFormatting::isColor)
-        .collect(ImmutableMap.toImmutableMap(Function.identity(), chatFormatting -> new TextColor(chatFormatting.getColor(), chatFormatting.getName())));
-    private static final Map<String, TextColor> NAMED_COLORS = LEGACY_FORMAT_TO_COLOR.values()
-        .stream()
-        .collect(ImmutableMap.toImmutableMap(textColor -> textColor.name, Function.identity()));
+    private static final Map<ChatFormatting, TextColor> LEGACY_FORMAT_TO_COLOR = (Map) Stream.of(ChatFormatting.values()).filter(ChatFormatting::isColor).collect(ImmutableMap.toImmutableMap(Function.identity(), (enumchatformat) -> {
+        return new TextColor(enumchatformat.getColor(), enumchatformat.getName(), enumchatformat); // CraftBukkit
+    }));
+    private static final Map<String, TextColor> NAMED_COLORS = (Map) TextColor.LEGACY_FORMAT_TO_COLOR.values().stream().collect(ImmutableMap.toImmutableMap((chathexcolor) -> {
+        return chathexcolor.name;
+    }, Function.identity()));
     private final int value;
     @Nullable
-    private final String name;
+    public final String name;
+    // CraftBukkit start
+    @Nullable
+    public final ChatFormatting format;
 
-    private TextColor(int value, String name) {
-        this.value = value & 16777215;
-        this.name = name;
+    private TextColor(int i, String s, ChatFormatting format) {
+        this.value = i & 16777215;
+        this.name = s;
+        this.format = format;
     }
 
     private TextColor(int value) {
         this.value = value & 16777215;
         this.name = null;
+        this.format = null;
     }
+    // CraftBukkit end
 
     public int getValue() {
         return this.value;
@@ -47,50 +54,54 @@
         return String.format(Locale.ROOT, "#%06X", this.value);
     }
 
-    @Override
-    public boolean equals(Object other) {
-        if (this == other) {
+    public boolean equals(Object object) {
+        if (this == object) {
             return true;
-        } else if (other != null && this.getClass() == other.getClass()) {
-            TextColor textColor = (TextColor)other;
-            return this.value == textColor.value;
+        } else if (object != null && this.getClass() == object.getClass()) {
+            TextColor chathexcolor = (TextColor) object;
+
+            return this.value == chathexcolor.value;
         } else {
             return false;
         }
     }
 
-    @Override
     public int hashCode() {
-        return Objects.hash(this.value, this.name);
+        return Objects.hash(new Object[]{this.value, this.name});
     }
 
-    @Override
     public String toString() {
         return this.serialize();
     }
 
     @Nullable
     public static TextColor fromLegacyFormat(ChatFormatting formatting) {
-        return LEGACY_FORMAT_TO_COLOR.get(formatting);
+        return (TextColor) TextColor.LEGACY_FORMAT_TO_COLOR.get(formatting);
     }
 
     public static TextColor fromRgb(int color) {
         return new TextColor(color);
     }
 
-    public static DataResult<TextColor> parseColor(String string) {
-        if (string.startsWith("#")) {
+    public static DataResult<TextColor> parseColor(String s) {
+        if (s.startsWith("#")) {
             try {
-                int i = Integer.parseInt(string.substring(1), 16);
-                return i >= 0 && i <= 16777215
-                    ? DataResult.success(fromRgb(i), Lifecycle.stable())
-                    : DataResult.error(() -> "Color value out of range: " + string);
-            } catch (NumberFormatException var2) {
-                return DataResult.error(() -> "Invalid color value: " + string);
+                int i = Integer.parseInt(s.substring(1), 16);
+
+                return i >= 0 && i <= 16777215 ? DataResult.success(fromRgb(i), Lifecycle.stable()) : DataResult.error(() -> {
+                    return "Color value out of range: " + s;
+                });
+            } catch (NumberFormatException numberformatexception) {
+                return DataResult.error(() -> {
+                    return "Invalid color value: " + s;
+                });
             }
         } else {
-            TextColor textColor = NAMED_COLORS.get(string);
-            return textColor == null ? DataResult.error(() -> "Invalid color name: " + string) : DataResult.success(textColor, Lifecycle.stable());
+            TextColor chathexcolor = (TextColor) TextColor.NAMED_COLORS.get(s);
+
+            return chathexcolor == null ? DataResult.error(() -> {
+                return "Invalid color name: " + s;
+            }) : DataResult.success(chathexcolor, Lifecycle.stable());
         }
     }
 }
