--- a/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -1,28 +1,32 @@
 package net.minecraft.core.dispenser;
 
 import com.mojang.logging.LogUtils;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Optional;
 import java.util.function.Consumer;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.Position;
+import net.minecraft.core.IPosition;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.RandomSource;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EnumMobSpawn;
 import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Saddleable;
 import net.minecraft.world.entity.animal.horse.AbstractChestedHorse;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.world.entity.decoration.ArmorStand;
 import net.minecraft.world.entity.item.PrimedTnt;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.projectile.Arrow;
 import net.minecraft.world.entity.projectile.FireworkRocketEntity;
@@ -36,6 +40,7 @@
 import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.item.ArmorItem;
 import net.minecraft.world.item.BoneMealItem;
+import net.minecraft.world.item.BucketItem;
 import net.minecraft.world.item.DispensibleContainerItem;
 import net.minecraft.world.item.DyeColor;
 import net.minecraft.world.item.HoneycombItem;
@@ -46,9 +51,9 @@
 import net.minecraft.world.item.alchemy.PotionUtils;
 import net.minecraft.world.item.alchemy.Potions;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.BaseFireBlock;
 import net.minecraft.world.level.block.BeehiveBlock;
+import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.BucketPickup;
 import net.minecraft.world.level.block.CampfireBlock;
@@ -56,7 +61,9 @@
 import net.minecraft.world.level.block.CandleCakeBlock;
 import net.minecraft.world.level.block.CarvedPumpkinBlock;
 import net.minecraft.world.level.block.DispenserBlock;
+import net.minecraft.world.level.block.LiquidBlockContainer;
 import net.minecraft.world.level.block.RespawnAnchorBlock;
+import net.minecraft.world.level.block.SaplingBlock;
 import net.minecraft.world.level.block.ShulkerBoxBlock;
 import net.minecraft.world.level.block.SkullBlock;
 import net.minecraft.world.level.block.TntBlock;
@@ -64,63 +71,86 @@
 import net.minecraft.world.level.block.entity.BeehiveBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
-import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.RotationSegment;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.craftbukkit.util.DummyGeneratorAccess;
+import org.bukkit.event.block.BlockDispenseArmorEvent;
+import org.bukkit.event.block.BlockDispenseEvent;
+import org.bukkit.event.block.BlockFertilizeEvent;
+import org.bukkit.event.world.StructureGrowEvent;
+// CraftBukkit end
 
 public interface DispenseItemBehavior {
+
     Logger LOGGER = LogUtils.getLogger();
-    DispenseItemBehavior NOOP = (blockSource, itemStack) -> itemStack;
+    DispenseItemBehavior NOOP = (sourceblock, itemstack) -> {
+        return itemstack;
+    };
 
-    ItemStack dispense(BlockSource blockSource, ItemStack itemStack);
+    ItemStack dispense(SourceBlock sourceblock, ItemStack itemstack);
 
     static void bootStrap() {
         DispenserBlock.registerBehavior(Items.ARROW, new AbstractProjectileDispenseBehavior() {
             @Override
-            protected Projectile getProjectile(Level level, Position position, ItemStack stack) {
-                Arrow arrow = new Arrow(level, position.x(), position.y(), position.z(), stack.copyWithCount(1));
-                arrow.pickup = AbstractArrow.Pickup.ALLOWED;
-                return arrow;
+            protected Projectile getProjectile(Level level, IPosition position, ItemStack stack) {
+                Arrow entitytippedarrow = new Arrow(level, position.x(), position.y(), position.z(), stack.copyWithCount(1));
+
+                entitytippedarrow.pickup = AbstractArrow.Pickup.ALLOWED;
+                return entitytippedarrow;
             }
         });
         DispenserBlock.registerBehavior(Items.TIPPED_ARROW, new AbstractProjectileDispenseBehavior() {
             @Override
-            protected Projectile getProjectile(Level level, Position position, ItemStack stack) {
-                Arrow arrow = new Arrow(level, position.x(), position.y(), position.z(), stack.copyWithCount(1));
-                arrow.setEffectsFromItem(stack);
-                arrow.pickup = AbstractArrow.Pickup.ALLOWED;
-                return arrow;
+            protected Projectile getProjectile(Level level, IPosition position, ItemStack stack) {
+                Arrow entitytippedarrow = new Arrow(level, position.x(), position.y(), position.z(), stack.copyWithCount(1));
+
+                entitytippedarrow.setEffectsFromItem(stack);
+                entitytippedarrow.pickup = AbstractArrow.Pickup.ALLOWED;
+                return entitytippedarrow;
             }
         });
         DispenserBlock.registerBehavior(Items.SPECTRAL_ARROW, new AbstractProjectileDispenseBehavior() {
             @Override
-            protected Projectile getProjectile(Level level, Position position, ItemStack stack) {
-                AbstractArrow abstractArrow = new SpectralArrow(level, position.x(), position.y(), position.z(), stack.copyWithCount(1));
-                abstractArrow.pickup = AbstractArrow.Pickup.ALLOWED;
-                return abstractArrow;
+            protected Projectile getProjectile(Level level, IPosition position, ItemStack stack) {
+                SpectralArrow entityspectralarrow = new SpectralArrow(level, position.x(), position.y(), position.z(), stack.copyWithCount(1));
+
+                entityspectralarrow.pickup = AbstractArrow.Pickup.ALLOWED;
+                return entityspectralarrow;
             }
         });
         DispenserBlock.registerBehavior(Items.EGG, new AbstractProjectileDispenseBehavior() {
             @Override
-            protected Projectile getProjectile(Level level, Position position, ItemStack stack) {
-                return Util.make(new ThrownEgg(level, position.x(), position.y(), position.z()), entity -> entity.setItem(stack));
+            protected Projectile getProjectile(Level level, IPosition position, ItemStack stack) {
+                return (Projectile) Util.make(new ThrownEgg(level, position.x(), position.y(), position.z()), (entityegg) -> {
+                    entityegg.setItem(stack);
+                });
             }
         });
         DispenserBlock.registerBehavior(Items.SNOWBALL, new AbstractProjectileDispenseBehavior() {
             @Override
-            protected Projectile getProjectile(Level level, Position position, ItemStack stack) {
-                return Util.make(new Snowball(level, position.x(), position.y(), position.z()), entity -> entity.setItem(stack));
+            protected Projectile getProjectile(Level level, IPosition position, ItemStack stack) {
+                return (Projectile) Util.make(new Snowball(level, position.x(), position.y(), position.z()), (entitysnowball) -> {
+                    entitysnowball.setItem(stack);
+                });
             }
         });
         DispenserBlock.registerBehavior(Items.EXPERIENCE_BOTTLE, new AbstractProjectileDispenseBehavior() {
             @Override
-            protected Projectile getProjectile(Level level, Position position, ItemStack stack) {
-                return Util.make(new ThrownExperienceBottle(level, position.x(), position.y(), position.z()), entity -> entity.setItem(stack));
+            protected Projectile getProjectile(Level level, IPosition position, ItemStack stack) {
+                return (Projectile) Util.make(new ThrownExperienceBottle(level, position.x(), position.y(), position.z()), (entitythrownexpbottle) -> {
+                    entitythrownexpbottle.setItem(stack);
+                });
             }
 
             @Override
@@ -135,11 +165,13 @@
         });
         DispenserBlock.registerBehavior(Items.SPLASH_POTION, new DispenseItemBehavior() {
             @Override
-            public ItemStack dispense(BlockSource blockSource, ItemStack itemStack) {
+            public ItemStack dispense(SourceBlock sourceblock, ItemStack itemstack) {
                 return (new AbstractProjectileDispenseBehavior() {
                     @Override
-                    protected Projectile getProjectile(Level level, Position position, ItemStack stack) {
-                        return Util.make(new ThrownPotion(level, position.x(), position.y(), position.z()), entity -> entity.setItem(stack));
+                    protected Projectile getProjectile(Level level, IPosition position, ItemStack stack) {
+                        return (Projectile) Util.make(new ThrownPotion(level, position.x(), position.y(), position.z()), (entitypotion) -> {
+                            entitypotion.setItem(stack);
+                        });
                     }
 
                     @Override
@@ -151,16 +183,18 @@
                     protected float getPower() {
                         return super.getPower() * 1.25F;
                     }
-                }).dispense(blockSource, itemStack);
+                }).dispense(sourceblock, itemstack);
             }
         });
         DispenserBlock.registerBehavior(Items.LINGERING_POTION, new DispenseItemBehavior() {
             @Override
-            public ItemStack dispense(BlockSource blockSource, ItemStack itemStack) {
+            public ItemStack dispense(SourceBlock sourceblock, ItemStack itemstack) {
                 return (new AbstractProjectileDispenseBehavior() {
                     @Override
-                    protected Projectile getProjectile(Level level, Position position, ItemStack stack) {
-                        return Util.make(new ThrownPotion(level, position.x(), position.y(), position.z()), entity -> entity.setItem(stack));
+                    protected Projectile getProjectile(Level level, IPosition position, ItemStack stack) {
+                        return (Projectile) Util.make(new ThrownPotion(level, position.x(), position.y(), position.z()), (entitypotion) -> {
+                            entitypotion.setItem(stack);
+                        });
                     }
 
                     @Override
@@ -172,179 +206,383 @@
                     protected float getPower() {
                         return super.getPower() * 1.25F;
                     }
-                }).dispense(blockSource, itemStack);
+                }).dispense(sourceblock, itemstack);
             }
         });
-        DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior() {
+        DefaultDispenseItemBehavior dispensebehavioritem = new DefaultDispenseItemBehavior() {
             @Override
-            public ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                Direction direction = blockSource.state().getValue(DispenserBlock.FACING);
-                EntityType<?> type = ((SpawnEggItem)itemStack.getItem()).getType(itemStack.getTag());
+            public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                Direction enumdirection = (Direction) sourceblock.state().getValue(DispenserBlock.FACING);
+                EntityType entitytypes = ((SpawnEggItem) itemstack.getItem()).getType(itemstack.getTag());
 
+                // CraftBukkit start
+                ServerLevel worldserver = sourceblock.level();
+                ItemStack itemstack1 = itemstack.split(1);
+                org.bukkit.block.Block block = CraftBlock.at(worldserver, sourceblock.pos());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
+                if (!DispenserBlock.eventFired) {
+                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled()) {
+                    itemstack.grow(1);
+                    return itemstack;
+                }
+
+                if (!event.getItem().equals(craftItem)) {
+                    itemstack.grow(1);
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                        idispensebehavior.dispense(sourceblock, eventStack);
+                        return itemstack;
+                    }
+                }
+
                 try {
-                    type.spawn(
-                        blockSource.level(), itemStack, null, blockSource.pos().relative(direction), MobSpawnType.DISPENSER, direction != Direction.UP, false
-                    );
-                } catch (Exception var6) {
-                    LOGGER.error("Error while dispensing spawn egg from dispenser at {}", blockSource.pos(), var6);
+                    entitytypes.spawn(sourceblock.level(), itemstack, (Player) null, sourceblock.pos().relative(enumdirection), EnumMobSpawn.DISPENSER, enumdirection != Direction.UP, false);
+                } catch (Exception exception) {
+                    LOGGER.error("Error while dispensing spawn egg from dispenser at {}", sourceblock.pos(), exception); // CraftBukkit - decompile error
                     return ItemStack.EMPTY;
                 }
 
-                itemStack.shrink(1);
-                blockSource.level().gameEvent(null, GameEvent.ENTITY_PLACE, blockSource.pos());
-                return itemStack;
+                // itemstack.shrink(1); // Handled during event processing
+                // CraftBukkit end
+                sourceblock.level().gameEvent((Entity) null, GameEvent.ENTITY_PLACE, sourceblock.pos());
+                return itemstack;
             }
         };
+        Iterator iterator = SpawnEggItem.eggs().iterator();
 
-        for (SpawnEggItem spawnEggItem : SpawnEggItem.eggs()) {
-            DispenserBlock.registerBehavior(spawnEggItem, defaultDispenseItemBehavior);
+        while (iterator.hasNext()) {
+            SpawnEggItem itemmonsteregg = (SpawnEggItem) iterator.next();
+
+            DispenserBlock.registerBehavior(itemmonsteregg, dispensebehavioritem);
         }
 
-        DispenserBlock.registerBehavior(
-            Items.ARMOR_STAND,
-            new DefaultDispenseItemBehavior() {
-                @Override
-                public ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                    Direction direction = blockSource.state().getValue(DispenserBlock.FACING);
-                    BlockPos blockPos = blockSource.pos().relative(direction);
-                    ServerLevel serverLevel = blockSource.level();
-                    Consumer<ArmorStand> consumer = EntityType.appendDefaultStackConfig(
-                        armorStand1 -> armorStand1.setYRot(direction.toYRot()), serverLevel, itemStack, null
-                    );
-                    ArmorStand armorStand = EntityType.ARMOR_STAND
-                        .spawn(serverLevel, itemStack.getTag(), consumer, blockPos, MobSpawnType.DISPENSER, false, false);
-                    if (armorStand != null) {
-                        itemStack.shrink(1);
+        DispenserBlock.registerBehavior(Items.ARMOR_STAND, new DefaultDispenseItemBehavior() {
+            @Override
+            public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                Direction enumdirection = (Direction) sourceblock.state().getValue(DispenserBlock.FACING);
+                BlockPos blockposition = sourceblock.pos().relative(enumdirection);
+                ServerLevel worldserver = sourceblock.level();
+
+                // CraftBukkit start
+                ItemStack itemstack1 = itemstack.split(1);
+                org.bukkit.block.Block block = CraftBlock.at(worldserver, sourceblock.pos());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
+                if (!DispenserBlock.eventFired) {
+                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled()) {
+                    itemstack.grow(1);
+                    return itemstack;
+                }
+
+                if (!event.getItem().equals(craftItem)) {
+                    itemstack.grow(1);
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                        idispensebehavior.dispense(sourceblock, eventStack);
+                        return itemstack;
                     }
-    
-                    return itemStack;
                 }
+                // CraftBukkit end
+
+                Consumer<ArmorStand> consumer = EntityType.appendDefaultStackConfig((entityarmorstand) -> {
+                    entityarmorstand.setYRot(enumdirection.toYRot());
+                }, worldserver, itemstack, (Player) null);
+                ArmorStand entityarmorstand = (ArmorStand) EntityType.ARMOR_STAND.spawn(worldserver, itemstack.getTag(), consumer, blockposition, EnumMobSpawn.DISPENSER, false, false);
+
+                if (entityarmorstand != null) {
+                    // itemstack.shrink(1); // CraftBukkit - Handled during event processing
+                }
+
+                return itemstack;
             }
-        );
-        DispenserBlock.registerBehavior(
-            Items.SADDLE,
-            new OptionalDispenseItemBehavior() {
-                @Override
-                public ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                    BlockPos blockPos = blockSource.pos().relative(blockSource.state().getValue(DispenserBlock.FACING));
-                    List<LivingEntity> entitiesOfClass = blockSource.level()
-                        .getEntitiesOfClass(
-                            LivingEntity.class,
-                            new AABB(blockPos),
-                            entity -> entity instanceof Saddleable saddleable && !saddleable.isSaddled() && saddleable.isSaddleable()
-                        );
-                    if (!entitiesOfClass.isEmpty()) {
-                        ((Saddleable)entitiesOfClass.get(0)).equipSaddle(SoundSource.BLOCKS);
-                        itemStack.shrink(1);
-                        this.setSuccess(true);
-                        return itemStack;
+        });
+        DispenserBlock.registerBehavior(Items.SADDLE, new OptionalDispenseItemBehavior() {
+            @Override
+            public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                BlockPos blockposition = sourceblock.pos().relative((Direction) sourceblock.state().getValue(DispenserBlock.FACING));
+                List<LivingEntity> list = sourceblock.level().getEntitiesOfClass(LivingEntity.class, new AABB(blockposition), (entityliving) -> {
+                    if (!(entityliving instanceof Saddleable)) {
+                        return false;
                     } else {
-                        return super.execute(blockSource, itemStack);
+                        Saddleable isaddleable = (Saddleable) entityliving;
+
+                        return !isaddleable.isSaddled() && isaddleable.isSaddleable();
                     }
+                });
+
+                if (!list.isEmpty()) {
+                    // CraftBukkit start
+                    ItemStack itemstack1 = itemstack.split(1);
+                    Level world = sourceblock.level();
+                    org.bukkit.block.Block block = CraftBlock.at(world, sourceblock.pos());
+                    CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+                    BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) list.get(0).getBukkitEntity());
+                    if (!DispenserBlock.eventFired) {
+                        world.getCraftServer().getPluginManager().callEvent(event);
+                    }
+
+                    if (event.isCancelled()) {
+                        itemstack.grow(1);
+                        return itemstack;
+                    }
+
+                    if (!event.getItem().equals(craftItem)) {
+                        itemstack.grow(1);
+                        // Chain to handler for new item
+                        ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                        DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                        if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != ArmorItem.DISPENSE_ITEM_BEHAVIOR) {
+                            idispensebehavior.dispense(sourceblock, eventStack);
+                            return itemstack;
+                        }
+                    }
+                    // CraftBukkit end
+                    ((Saddleable) list.get(0)).equipSaddle(SoundSource.BLOCKS);
+                    // itemstack.shrink(1); // CraftBukkit - handled above
+                    this.setSuccess(true);
+                    return itemstack;
+                } else {
+                    return super.execute(sourceblock, itemstack);
                 }
             }
-        );
-        DefaultDispenseItemBehavior defaultDispenseItemBehavior1 = new OptionalDispenseItemBehavior() {
+        });
+        OptionalDispenseItemBehavior dispensebehaviormaybe = new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                BlockPos blockPos = blockSource.pos().relative(blockSource.state().getValue(DispenserBlock.FACING));
+            protected ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                BlockPos blockposition = sourceblock.pos().relative((Direction) sourceblock.state().getValue(DispenserBlock.FACING));
+                List<AbstractHorse> list = sourceblock.level().getEntitiesOfClass(AbstractHorse.class, new AABB(blockposition), (entityhorseabstract) -> {
+                    return entityhorseabstract.isAlive() && entityhorseabstract.canWearArmor();
+                });
+                Iterator iterator1 = list.iterator();
 
-                for (AbstractHorse abstractHorse : blockSource.level()
-                    .getEntitiesOfClass(AbstractHorse.class, new AABB(blockPos), entity -> entity.isAlive() && entity.canWearArmor())) {
-                    if (abstractHorse.isArmor(itemStack) && !abstractHorse.isWearingArmor() && abstractHorse.isTamed()) {
-                        abstractHorse.getSlot(401).set(itemStack.split(1));
-                        this.setSuccess(true);
-                        return itemStack;
+                AbstractHorse entityhorseabstract;
+
+                do {
+                    if (!iterator1.hasNext()) {
+                        return super.execute(sourceblock, itemstack);
                     }
+
+                    entityhorseabstract = (AbstractHorse) iterator1.next();
+                } while (!entityhorseabstract.isArmor(itemstack) || entityhorseabstract.isWearingArmor() || !entityhorseabstract.isTamed());
+
+                // CraftBukkit start
+                ItemStack itemstack1 = itemstack.split(1);
+                Level world = sourceblock.level();
+                org.bukkit.block.Block block = CraftBlock.at(world, sourceblock.pos());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+                BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) entityhorseabstract.getBukkitEntity());
+                if (!DispenserBlock.eventFired) {
+                    world.getCraftServer().getPluginManager().callEvent(event);
                 }
 
-                return super.execute(blockSource, itemStack);
+                if (event.isCancelled()) {
+                    itemstack.grow(1);
+                    return itemstack;
+                }
+
+                if (!event.getItem().equals(craftItem)) {
+                    itemstack.grow(1);
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != ArmorItem.DISPENSE_ITEM_BEHAVIOR) {
+                        idispensebehavior.dispense(sourceblock, eventStack);
+                        return itemstack;
+                    }
+                }
+
+                entityhorseabstract.getSlot(401).set(CraftItemStack.asNMSCopy(event.getItem()));
+                // CraftBukkit end
+                this.setSuccess(true);
+                return itemstack;
             }
         };
-        DispenserBlock.registerBehavior(Items.LEATHER_HORSE_ARMOR, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.IRON_HORSE_ARMOR, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.GOLDEN_HORSE_ARMOR, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.DIAMOND_HORSE_ARMOR, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.WHITE_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.ORANGE_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.CYAN_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.BLUE_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.BROWN_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.BLACK_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.GRAY_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.GREEN_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.LIGHT_BLUE_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.LIGHT_GRAY_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.LIME_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.MAGENTA_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.PINK_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.PURPLE_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.RED_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.YELLOW_CARPET, defaultDispenseItemBehavior1);
-        DispenserBlock.registerBehavior(
-            Items.CHEST,
-            new OptionalDispenseItemBehavior() {
-                @Override
-                public ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                    BlockPos blockPos = blockSource.pos().relative(blockSource.state().getValue(DispenserBlock.FACING));
-    
-                    for (AbstractChestedHorse abstractChestedHorse : blockSource.level()
-                        .getEntitiesOfClass(AbstractChestedHorse.class, new AABB(blockPos), entity -> entity.isAlive() && !entity.hasChest())) {
-                        if (abstractChestedHorse.isTamed() && abstractChestedHorse.getSlot(499).set(itemStack)) {
-                            itemStack.shrink(1);
-                            this.setSuccess(true);
-                            return itemStack;
-                        }
+
+        DispenserBlock.registerBehavior(Items.LEATHER_HORSE_ARMOR, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.IRON_HORSE_ARMOR, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.GOLDEN_HORSE_ARMOR, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.DIAMOND_HORSE_ARMOR, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.WHITE_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.ORANGE_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.CYAN_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.BLUE_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.BROWN_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.BLACK_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.GRAY_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.GREEN_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.LIGHT_BLUE_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.LIGHT_GRAY_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.LIME_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.MAGENTA_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.PINK_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.PURPLE_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.RED_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.YELLOW_CARPET, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.CHEST, new OptionalDispenseItemBehavior() {
+            @Override
+            public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                BlockPos blockposition = sourceblock.pos().relative((Direction) sourceblock.state().getValue(DispenserBlock.FACING));
+                List<AbstractChestedHorse> list = sourceblock.level().getEntitiesOfClass(AbstractChestedHorse.class, new AABB(blockposition), (entityhorsechestedabstract) -> {
+                    return entityhorsechestedabstract.isAlive() && !entityhorsechestedabstract.hasChest();
+                });
+                Iterator iterator1 = list.iterator();
+
+                AbstractChestedHorse entityhorsechestedabstract;
+
+                do {
+                    if (!iterator1.hasNext()) {
+                        return super.execute(sourceblock, itemstack);
                     }
-    
-                    return super.execute(blockSource, itemStack);
+
+                    entityhorsechestedabstract = (AbstractChestedHorse) iterator1.next();
+                    // CraftBukkit start
+                } while (!entityhorsechestedabstract.isTamed());
+                ItemStack itemstack1 = itemstack.split(1);
+                Level world = sourceblock.level();
+                org.bukkit.block.Block block = CraftBlock.at(world, sourceblock.pos());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+                BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) entityhorsechestedabstract.getBukkitEntity());
+                if (!DispenserBlock.eventFired) {
+                    world.getCraftServer().getPluginManager().callEvent(event);
                 }
+
+                if (event.isCancelled()) {
+                    return itemstack;
+                }
+
+                if (!event.getItem().equals(craftItem)) {
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != ArmorItem.DISPENSE_ITEM_BEHAVIOR) {
+                        idispensebehavior.dispense(sourceblock, eventStack);
+                        return itemstack;
+                    }
+                }
+                entityhorsechestedabstract.getSlot(499).set(CraftItemStack.asNMSCopy(event.getItem()));
+                // CraftBukkit end
+
+                // itemstack.shrink(1); // CraftBukkit - handled above
+                this.setSuccess(true);
+                return itemstack;
             }
-        );
-        DispenserBlock.registerBehavior(
-            Items.FIREWORK_ROCKET,
-            new DefaultDispenseItemBehavior() {
-                @Override
-                public ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                    Direction direction = blockSource.state().getValue(DispenserBlock.FACING);
-                    Vec3 entityPokingOutOfBlockPos = DispenseItemBehavior.getEntityPokingOutOfBlockPos(blockSource, EntityType.FIREWORK_ROCKET, direction);
-                    FireworkRocketEntity fireworkRocketEntity = new FireworkRocketEntity(
-                        blockSource.level(), itemStack, entityPokingOutOfBlockPos.x(), entityPokingOutOfBlockPos.y(), entityPokingOutOfBlockPos.z(), true
-                    );
-                    fireworkRocketEntity.shoot((double)direction.getStepX(), (double)direction.getStepY(), (double)direction.getStepZ(), 0.5F, 1.0F);
-                    blockSource.level().addFreshEntity(fireworkRocketEntity);
-                    itemStack.shrink(1);
-                    return itemStack;
+        });
+        DispenserBlock.registerBehavior(Items.FIREWORK_ROCKET, new DefaultDispenseItemBehavior() {
+            @Override
+            public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                Direction enumdirection = (Direction) sourceblock.state().getValue(DispenserBlock.FACING);
+                // CraftBukkit start
+                ServerLevel worldserver = sourceblock.level();
+                ItemStack itemstack1 = itemstack.split(1);
+                org.bukkit.block.Block block = CraftBlock.at(worldserver, sourceblock.pos());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(enumdirection.getStepX(), enumdirection.getStepY(), enumdirection.getStepZ()));
+                if (!DispenserBlock.eventFired) {
+                    worldserver.getCraftServer().getPluginManager().callEvent(event);
                 }
-    
-                @Override
-                protected void playSound(BlockSource blockSource) {
-                    blockSource.level().levelEvent(1004, blockSource.pos(), 0);
+
+                if (event.isCancelled()) {
+                    itemstack.grow(1);
+                    return itemstack;
                 }
+
+                if (!event.getItem().equals(craftItem)) {
+                    itemstack.grow(1);
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                        idispensebehavior.dispense(sourceblock, eventStack);
+                        return itemstack;
+                    }
+                }
+
+                itemstack1 = CraftItemStack.asNMSCopy(event.getItem());
+                Vec3 vec3d = DispenseItemBehavior.getEntityPokingOutOfBlockPos(sourceblock, EntityType.FIREWORK_ROCKET, enumdirection);
+                FireworkRocketEntity entityfireworks = new FireworkRocketEntity(sourceblock.level(), itemstack, vec3d.x(), vec3d.y(), vec3d.z(), true);
+
+                entityfireworks.shoot((double) enumdirection.getStepX(), (double) enumdirection.getStepY(), (double) enumdirection.getStepZ(), 0.5F, 1.0F);
+                sourceblock.level().addFreshEntity(entityfireworks);
+                // itemstack.shrink(1); // Handled during event processing
+                // CraftBukkit end
+                return itemstack;
             }
-        );
+
+            @Override
+            protected void playSound(SourceBlock sourceblock) {
+                sourceblock.level().levelEvent(1004, sourceblock.pos(), 0);
+            }
+        });
         DispenserBlock.registerBehavior(Items.FIRE_CHARGE, new DefaultDispenseItemBehavior() {
             @Override
-            public ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                Direction direction = blockSource.state().getValue(DispenserBlock.FACING);
-                Position dispensePosition = DispenserBlock.getDispensePosition(blockSource);
-                double d = dispensePosition.x() + (double)((float)direction.getStepX() * 0.3F);
-                double d1 = dispensePosition.y() + (double)((float)direction.getStepY() * 0.3F);
-                double d2 = dispensePosition.z() + (double)((float)direction.getStepZ() * 0.3F);
-                Level level = blockSource.level();
-                RandomSource randomSource = level.random;
-                double d3 = randomSource.triangle((double)direction.getStepX(), 0.11485000000000001);
-                double d4 = randomSource.triangle((double)direction.getStepY(), 0.11485000000000001);
-                double d5 = randomSource.triangle((double)direction.getStepZ(), 0.11485000000000001);
-                SmallFireball smallFireball = new SmallFireball(level, d, d1, d2, d3, d4, d5);
-                level.addFreshEntity(Util.make(smallFireball, entity -> entity.setItem(itemStack)));
-                itemStack.shrink(1);
-                return itemStack;
+            public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                Direction enumdirection = (Direction) sourceblock.state().getValue(DispenserBlock.FACING);
+                IPosition iposition = DispenserBlock.getDispensePosition(sourceblock);
+                double d0 = iposition.x() + (double) ((float) enumdirection.getStepX() * 0.3F);
+                double d1 = iposition.y() + (double) ((float) enumdirection.getStepY() * 0.3F);
+                double d2 = iposition.z() + (double) ((float) enumdirection.getStepZ() * 0.3F);
+                ServerLevel worldserver = sourceblock.level();
+                RandomSource randomsource = worldserver.random;
+                double d3 = randomsource.triangle((double) enumdirection.getStepX(), 0.11485000000000001D);
+                double d4 = randomsource.triangle((double) enumdirection.getStepY(), 0.11485000000000001D);
+                double d5 = randomsource.triangle((double) enumdirection.getStepZ(), 0.11485000000000001D);
+
+                // CraftBukkit start
+                ItemStack itemstack1 = itemstack.split(1);
+                org.bukkit.block.Block block = CraftBlock.at(worldserver, sourceblock.pos());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d3, d4, d5));
+                if (!DispenserBlock.eventFired) {
+                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled()) {
+                    itemstack.grow(1);
+                    return itemstack;
+                }
+
+                if (!event.getItem().equals(craftItem)) {
+                    itemstack.grow(1);
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                        idispensebehavior.dispense(sourceblock, eventStack);
+                        return itemstack;
+                    }
+                }
+
+                SmallFireball entitysmallfireball = new SmallFireball(worldserver, d0, d1, d2, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
+                entitysmallfireball.setItem(itemstack1);
+                entitysmallfireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource(sourceblock.blockEntity());
+
+                worldserver.addFreshEntity(entitysmallfireball);
+                // itemstack.shrink(1); // Handled during event processing
+                // CraftBukkit end
+                return itemstack;
             }
 
             @Override
-            protected void playSound(BlockSource blockSource) {
-                blockSource.level().levelEvent(1018, blockSource.pos(), 0);
+            protected void playSound(SourceBlock sourceblock) {
+                sourceblock.level().levelEvent(1018, sourceblock.pos(), 0);
             }
         });
         DispenserBlock.registerBehavior(Items.OAK_BOAT, new BoatDispenseItemBehavior(Boat.Type.OAK));
@@ -365,320 +603,562 @@
         DispenserBlock.registerBehavior(Items.CHERRY_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.CHERRY, true));
         DispenserBlock.registerBehavior(Items.MANGROVE_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.MANGROVE, true));
         DispenserBlock.registerBehavior(Items.BAMBOO_CHEST_RAFT, new BoatDispenseItemBehavior(Boat.Type.BAMBOO, true));
-        DispenseItemBehavior dispenseItemBehavior = new DefaultDispenseItemBehavior() {
+        DefaultDispenseItemBehavior dispensebehavioritem1 = new DefaultDispenseItemBehavior() {
             private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
 
             @Override
-            public ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                DispensibleContainerItem dispensibleContainerItem = (DispensibleContainerItem)itemStack.getItem();
-                BlockPos blockPos = blockSource.pos().relative(blockSource.state().getValue(DispenserBlock.FACING));
-                Level level = blockSource.level();
-                if (dispensibleContainerItem.emptyContents(null, level, blockPos, null)) {
-                    dispensibleContainerItem.checkExtraContent(null, level, itemStack, blockPos);
-                    return new ItemStack(Items.BUCKET);
+            public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                DispensibleContainerItem dispensiblecontaineritem = (DispensibleContainerItem) itemstack.getItem();
+                BlockPos blockposition = sourceblock.pos().relative((Direction) sourceblock.state().getValue(DispenserBlock.FACING));
+                ServerLevel worldserver = sourceblock.level();
+
+                // CraftBukkit start
+                int x = blockposition.getX();
+                int y = blockposition.getY();
+                int z = blockposition.getZ();
+                IBlockData iblockdata = worldserver.getBlockState(blockposition);
+                if (iblockdata.isAir() || iblockdata.canBeReplaced() || (dispensiblecontaineritem instanceof BucketItem && iblockdata.getBlock() instanceof LiquidBlockContainer && ((LiquidBlockContainer) iblockdata.getBlock()).canPlaceLiquid((Player) null, worldserver, blockposition, iblockdata, ((BucketItem) dispensiblecontaineritem).content))) {
+                    org.bukkit.block.Block block = CraftBlock.at(worldserver, sourceblock.pos());
+                    CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
+
+                    BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(x, y, z));
+                    if (!DispenserBlock.eventFired) {
+                        worldserver.getCraftServer().getPluginManager().callEvent(event);
+                    }
+
+                    if (event.isCancelled()) {
+                        return itemstack;
+                    }
+
+                    if (!event.getItem().equals(craftItem)) {
+                        // Chain to handler for new item
+                        ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                        DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                        if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                            idispensebehavior.dispense(sourceblock, eventStack);
+                            return itemstack;
+                        }
+                    }
+
+                    dispensiblecontaineritem = (DispensibleContainerItem) CraftItemStack.asNMSCopy(event.getItem()).getItem();
+                }
+                // CraftBukkit end
+
+                if (dispensiblecontaineritem.emptyContents((Player) null, worldserver, blockposition, (BlockHitResult) null)) {
+                    dispensiblecontaineritem.checkExtraContent((Player) null, worldserver, itemstack, blockposition);
+                    // CraftBukkit start - Handle stacked buckets
+                    Item item = Items.BUCKET;
+                    itemstack.shrink(1);
+                    if (itemstack.isEmpty()) {
+                        itemstack.setItem(Items.BUCKET);
+                        itemstack.setCount(1);
+                    } else if (sourceblock.blockEntity().addItem(new ItemStack(item)) < 0) {
+                        this.defaultDispenseItemBehavior.dispense(sourceblock, new ItemStack(item));
+                    }
+                    return itemstack;
+                    // CraftBukkit end
                 } else {
-                    return this.defaultDispenseItemBehavior.dispense(blockSource, itemStack);
+                    return this.defaultDispenseItemBehavior.dispense(sourceblock, itemstack);
                 }
             }
         };
-        DispenserBlock.registerBehavior(Items.LAVA_BUCKET, dispenseItemBehavior);
-        DispenserBlock.registerBehavior(Items.WATER_BUCKET, dispenseItemBehavior);
-        DispenserBlock.registerBehavior(Items.POWDER_SNOW_BUCKET, dispenseItemBehavior);
-        DispenserBlock.registerBehavior(Items.SALMON_BUCKET, dispenseItemBehavior);
-        DispenserBlock.registerBehavior(Items.COD_BUCKET, dispenseItemBehavior);
-        DispenserBlock.registerBehavior(Items.PUFFERFISH_BUCKET, dispenseItemBehavior);
-        DispenserBlock.registerBehavior(Items.TROPICAL_FISH_BUCKET, dispenseItemBehavior);
-        DispenserBlock.registerBehavior(Items.AXOLOTL_BUCKET, dispenseItemBehavior);
-        DispenserBlock.registerBehavior(Items.TADPOLE_BUCKET, dispenseItemBehavior);
+
+        DispenserBlock.registerBehavior(Items.LAVA_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.WATER_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.POWDER_SNOW_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.SALMON_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.COD_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.PUFFERFISH_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.TROPICAL_FISH_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.AXOLOTL_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.TADPOLE_BUCKET, dispensebehavioritem1);
         DispenserBlock.registerBehavior(Items.BUCKET, new DefaultDispenseItemBehavior() {
             private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
 
             @Override
-            public ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                LevelAccessor levelAccessor = blockSource.level();
-                BlockPos blockPos = blockSource.pos().relative(blockSource.state().getValue(DispenserBlock.FACING));
-                BlockState blockState = levelAccessor.getBlockState(blockPos);
-                if (blockState.getBlock() instanceof BucketPickup bucketPickup) {
-                    ItemStack itemStack1 = bucketPickup.pickupBlock(null, levelAccessor, blockPos, blockState);
-                    if (itemStack1.isEmpty()) {
-                        return super.execute(blockSource, itemStack);
+            public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                ServerLevel worldserver = sourceblock.level();
+                BlockPos blockposition = sourceblock.pos().relative((Direction) sourceblock.state().getValue(DispenserBlock.FACING));
+                IBlockData iblockdata = worldserver.getBlockState(blockposition);
+                Block block = iblockdata.getBlock();
+
+                if (block instanceof BucketPickup) {
+                    BucketPickup ifluidsource = (BucketPickup) block;
+                    ItemStack itemstack1 = ifluidsource.pickupBlock((Player) null, DummyGeneratorAccess.INSTANCE, blockposition, iblockdata); // CraftBukkit
+
+                    if (itemstack1.isEmpty()) {
+                        return super.execute(sourceblock, itemstack);
                     } else {
-                        levelAccessor.gameEvent(null, GameEvent.FLUID_PICKUP, blockPos);
-                        Item item = itemStack1.getItem();
-                        itemStack.shrink(1);
-                        if (itemStack.isEmpty()) {
+                        worldserver.gameEvent((Entity) null, GameEvent.FLUID_PICKUP, blockposition);
+                        Item item = itemstack1.getItem();
+
+                        // CraftBukkit start
+                        org.bukkit.block.Block bukkitBlock = CraftBlock.at(worldserver, sourceblock.pos());
+                        CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
+
+                        BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
+                        if (!DispenserBlock.eventFired) {
+                            worldserver.getCraftServer().getPluginManager().callEvent(event);
+                        }
+
+                        if (event.isCancelled()) {
+                            return itemstack;
+                        }
+
+                        if (!event.getItem().equals(craftItem)) {
+                            // Chain to handler for new item
+                            ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                            if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                                idispensebehavior.dispense(sourceblock, eventStack);
+                                return itemstack;
+                            }
+                        }
+
+                        itemstack1 = ifluidsource.pickupBlock((Player) null, worldserver, blockposition, iblockdata); // From above
+                        // CraftBukkit end
+
+                        itemstack.shrink(1);
+                        if (itemstack.isEmpty()) {
                             return new ItemStack(item);
                         } else {
-                            if (blockSource.blockEntity().addItem(new ItemStack(item)) < 0) {
-                                this.defaultDispenseItemBehavior.dispense(blockSource, new ItemStack(item));
+                            if (sourceblock.blockEntity().addItem(new ItemStack(item)) < 0) {
+                                this.defaultDispenseItemBehavior.dispense(sourceblock, new ItemStack(item));
                             }
 
-                            return itemStack;
+                            return itemstack;
                         }
                     }
                 } else {
-                    return super.execute(blockSource, itemStack);
+                    return super.execute(sourceblock, itemstack);
                 }
             }
         });
         DispenserBlock.registerBehavior(Items.FLINT_AND_STEEL, new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                Level level = blockSource.level();
+            protected ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                ServerLevel worldserver = sourceblock.level();
+
+                // CraftBukkit start
+                org.bukkit.block.Block bukkitBlock = CraftBlock.at(worldserver, sourceblock.pos());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
+
+                BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
+                if (!DispenserBlock.eventFired) {
+                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled()) {
+                    return itemstack;
+                }
+
+                if (!event.getItem().equals(craftItem)) {
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                        idispensebehavior.dispense(sourceblock, eventStack);
+                        return itemstack;
+                    }
+                }
+                // CraftBukkit end
+
                 this.setSuccess(true);
-                Direction direction = blockSource.state().getValue(DispenserBlock.FACING);
-                BlockPos blockPos = blockSource.pos().relative(direction);
-                BlockState blockState = level.getBlockState(blockPos);
-                if (BaseFireBlock.canBePlacedAt(level, blockPos, direction)) {
-                    level.setBlockAndUpdate(blockPos, BaseFireBlock.getState(level, blockPos));
-                    level.gameEvent(null, GameEvent.BLOCK_PLACE, blockPos);
-                } else if (CampfireBlock.canLight(blockState) || CandleBlock.canLight(blockState) || CandleCakeBlock.canLight(blockState)) {
-                    level.setBlockAndUpdate(blockPos, blockState.setValue(BlockStateProperties.LIT, Boolean.valueOf(true)));
-                    level.gameEvent(null, GameEvent.BLOCK_CHANGE, blockPos);
-                } else if (blockState.getBlock() instanceof TntBlock) {
-                    TntBlock.explode(level, blockPos);
-                    level.removeBlock(blockPos, false);
+                Direction enumdirection = (Direction) sourceblock.state().getValue(DispenserBlock.FACING);
+                BlockPos blockposition = sourceblock.pos().relative(enumdirection);
+                IBlockData iblockdata = worldserver.getBlockState(blockposition);
+
+                if (BaseFireBlock.canBePlacedAt(worldserver, blockposition, enumdirection)) {
+                    // CraftBukkit start - Ignition by dispensing flint and steel
+                    if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(worldserver, blockposition, sourceblock.pos()).isCancelled()) {
+                        worldserver.setBlockAndUpdate(blockposition, BaseFireBlock.getState(worldserver, blockposition));
+                        worldserver.gameEvent((Entity) null, GameEvent.BLOCK_PLACE, blockposition);
+                    }
+                    // CraftBukkit end
+                } else if (!CampfireBlock.canLight(iblockdata) && !CandleBlock.canLight(iblockdata) && !CandleCakeBlock.canLight(iblockdata)) {
+                    if (iblockdata.getBlock() instanceof TntBlock && org.bukkit.craftbukkit.event.CraftEventFactory.callTNTPrimeEvent(worldserver, blockposition, org.bukkit.event.block.TNTPrimeEvent.PrimeCause.DISPENSER, null, sourceblock.pos())) { // CraftBukkit - TNTPrimeEvent
+                        TntBlock.explode(worldserver, blockposition);
+                        worldserver.removeBlock(blockposition, false);
+                    } else {
+                        this.setSuccess(false);
+                    }
                 } else {
-                    this.setSuccess(false);
+                    worldserver.setBlockAndUpdate(blockposition, (IBlockData) iblockdata.setValue(BlockStateProperties.LIT, true));
+                    worldserver.gameEvent((Entity) null, GameEvent.BLOCK_CHANGE, blockposition);
                 }
 
-                if (this.isSuccess() && itemStack.hurt(1, level.random, null)) {
-                    itemStack.setCount(0);
+                if (this.isSuccess() && itemstack.hurt(1, worldserver.random, (ServerPlayer) null)) {
+                    itemstack.setCount(0);
                 }
 
-                return itemStack;
+                return itemstack;
             }
         });
         DispenserBlock.registerBehavior(Items.BONE_MEAL, new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
+            protected ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
                 this.setSuccess(true);
-                Level level = blockSource.level();
-                BlockPos blockPos = blockSource.pos().relative(blockSource.state().getValue(DispenserBlock.FACING));
-                if (!BoneMealItem.growCrop(itemStack, level, blockPos) && !BoneMealItem.growWaterPlant(itemStack, level, blockPos, null)) {
+                ServerLevel worldserver = sourceblock.level();
+                BlockPos blockposition = sourceblock.pos().relative((Direction) sourceblock.state().getValue(DispenserBlock.FACING));
+                // CraftBukkit start
+                org.bukkit.block.Block block = CraftBlock.at(worldserver, sourceblock.pos());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
+
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
+                if (!DispenserBlock.eventFired) {
+                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled()) {
+                    return itemstack;
+                }
+
+                if (!event.getItem().equals(craftItem)) {
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                        idispensebehavior.dispense(sourceblock, eventStack);
+                        return itemstack;
+                    }
+                }
+
+                worldserver.captureTreeGeneration = true;
+                // CraftBukkit end
+
+                if (!BoneMealItem.growCrop(itemstack, worldserver, blockposition) && !BoneMealItem.growWaterPlant(itemstack, worldserver, blockposition, (Direction) null)) {
                     this.setSuccess(false);
-                } else if (!level.isClientSide) {
-                    level.levelEvent(1505, blockPos, 0);
+                } else if (!worldserver.isClientSide) {
+                    worldserver.levelEvent(1505, blockposition, 0);
                 }
+                // CraftBukkit start
+                worldserver.captureTreeGeneration = false;
+                if (worldserver.capturedBlockStates.size() > 0) {
+                    TreeType treeType = SaplingBlock.treeType;
+                    SaplingBlock.treeType = null;
+                    Location location = CraftLocation.toBukkit(blockposition, worldserver.getWorld());
+                    List<org.bukkit.block.BlockState> blocks = new java.util.ArrayList<>(worldserver.capturedBlockStates.values());
+                    worldserver.capturedBlockStates.clear();
+                    StructureGrowEvent structureEvent = null;
+                    if (treeType != null) {
+                        structureEvent = new StructureGrowEvent(location, treeType, false, null, blocks);
+                        org.bukkit.Bukkit.getPluginManager().callEvent(structureEvent);
+                    }
 
-                return itemStack;
+                    BlockFertilizeEvent fertilizeEvent = new BlockFertilizeEvent(location.getBlock(), null, blocks);
+                    fertilizeEvent.setCancelled(structureEvent != null && structureEvent.isCancelled());
+                    org.bukkit.Bukkit.getPluginManager().callEvent(fertilizeEvent);
+
+                    if (!fertilizeEvent.isCancelled()) {
+                        for (org.bukkit.block.BlockState blockstate : blocks) {
+                            blockstate.update(true);
+                        }
+                    }
+                }
+                // CraftBukkit end
+
+                return itemstack;
             }
         });
         DispenserBlock.registerBehavior(Blocks.TNT, new DefaultDispenseItemBehavior() {
             @Override
-            protected ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                Level level = blockSource.level();
-                BlockPos blockPos = blockSource.pos().relative(blockSource.state().getValue(DispenserBlock.FACING));
-                PrimedTnt primedTnt = new PrimedTnt(level, (double)blockPos.getX() + 0.5, (double)blockPos.getY(), (double)blockPos.getZ() + 0.5, null);
-                level.addFreshEntity(primedTnt);
-                level.playSound(null, primedTnt.getX(), primedTnt.getY(), primedTnt.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
-                level.gameEvent(null, GameEvent.ENTITY_PLACE, blockPos);
-                itemStack.shrink(1);
-                return itemStack;
+            protected ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                ServerLevel worldserver = sourceblock.level();
+                BlockPos blockposition = sourceblock.pos().relative((Direction) sourceblock.state().getValue(DispenserBlock.FACING));
+                // CraftBukkit start
+                // EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(worldserver, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, (EntityLiving) null);
+
+                ItemStack itemstack1 = itemstack.split(1);
+                org.bukkit.block.Block block = CraftBlock.at(worldserver, sourceblock.pos());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D));
+                if (!DispenserBlock.eventFired) {
+                   worldserver.getCraftServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled()) {
+                    itemstack.grow(1);
+                    return itemstack;
+                }
+
+                if (!event.getItem().equals(craftItem)) {
+                    itemstack.grow(1);
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                        idispensebehavior.dispense(sourceblock, eventStack);
+                        return itemstack;
+                    }
+                }
+
+                PrimedTnt entitytntprimed = new PrimedTnt(worldserver, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), (LivingEntity) null);
+                // CraftBukkit end
+
+                worldserver.addFreshEntity(entitytntprimed);
+                worldserver.playSound((Player) null, entitytntprimed.getX(), entitytntprimed.getY(), entitytntprimed.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
+                worldserver.gameEvent((Entity) null, GameEvent.ENTITY_PLACE, blockposition);
+                // itemstack.shrink(1); // CraftBukkit - handled above
+                return itemstack;
             }
         });
-        DispenseItemBehavior dispenseItemBehavior1 = new OptionalDispenseItemBehavior() {
+        OptionalDispenseItemBehavior dispensebehaviormaybe1 = new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                this.setSuccess(ArmorItem.dispenseArmor(blockSource, itemStack));
-                return itemStack;
+            protected ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                this.setSuccess(ArmorItem.dispenseArmor(sourceblock, itemstack));
+                return itemstack;
             }
         };
-        DispenserBlock.registerBehavior(Items.CREEPER_HEAD, dispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.ZOMBIE_HEAD, dispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.DRAGON_HEAD, dispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.SKELETON_SKULL, dispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.PIGLIN_HEAD, dispenseItemBehavior1);
-        DispenserBlock.registerBehavior(Items.PLAYER_HEAD, dispenseItemBehavior1);
-        DispenserBlock.registerBehavior(
-            Items.WITHER_SKELETON_SKULL,
-            new OptionalDispenseItemBehavior() {
-                @Override
-                protected ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                    Level level = blockSource.level();
-                    Direction direction = blockSource.state().getValue(DispenserBlock.FACING);
-                    BlockPos blockPos = blockSource.pos().relative(direction);
-                    if (level.isEmptyBlock(blockPos) && WitherSkullBlock.canSpawnMob(level, blockPos, itemStack)) {
-                        level.setBlock(
-                            blockPos,
-                            Blocks.WITHER_SKELETON_SKULL
-                                .defaultBlockState()
-                                .setValue(SkullBlock.ROTATION, Integer.valueOf(RotationSegment.convertToSegment(direction))),
-                            3
-                        );
-                        level.gameEvent(null, GameEvent.BLOCK_PLACE, blockPos);
-                        BlockEntity blockEntity = level.getBlockEntity(blockPos);
-                        if (blockEntity instanceof SkullBlockEntity) {
-                            WitherSkullBlock.checkSpawn(level, blockPos, (SkullBlockEntity)blockEntity);
-                        }
-    
-                        itemStack.shrink(1);
-                        this.setSuccess(true);
-                    } else {
-                        this.setSuccess(ArmorItem.dispenseArmor(blockSource, itemStack));
+
+        DispenserBlock.registerBehavior(Items.CREEPER_HEAD, dispensebehaviormaybe1);
+        DispenserBlock.registerBehavior(Items.ZOMBIE_HEAD, dispensebehaviormaybe1);
+        DispenserBlock.registerBehavior(Items.DRAGON_HEAD, dispensebehaviormaybe1);
+        DispenserBlock.registerBehavior(Items.SKELETON_SKULL, dispensebehaviormaybe1);
+        DispenserBlock.registerBehavior(Items.PIGLIN_HEAD, dispensebehaviormaybe1);
+        DispenserBlock.registerBehavior(Items.PLAYER_HEAD, dispensebehaviormaybe1);
+        DispenserBlock.registerBehavior(Items.WITHER_SKELETON_SKULL, new OptionalDispenseItemBehavior() {
+            @Override
+            protected ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                ServerLevel worldserver = sourceblock.level();
+                Direction enumdirection = (Direction) sourceblock.state().getValue(DispenserBlock.FACING);
+                BlockPos blockposition = sourceblock.pos().relative(enumdirection);
+
+                // CraftBukkit start
+                org.bukkit.block.Block bukkitBlock = CraftBlock.at(worldserver, sourceblock.pos());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
+
+                BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
+                if (!DispenserBlock.eventFired) {
+                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled()) {
+                    return itemstack;
+                }
+
+                if (!event.getItem().equals(craftItem)) {
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                        idispensebehavior.dispense(sourceblock, eventStack);
+                        return itemstack;
                     }
-    
-                    return itemStack;
                 }
+                // CraftBukkit end
+
+                if (worldserver.isEmptyBlock(blockposition) && WitherSkullBlock.canSpawnMob(worldserver, blockposition, itemstack)) {
+                    worldserver.setBlock(blockposition, (IBlockData) Blocks.WITHER_SKELETON_SKULL.defaultBlockState().setValue(SkullBlock.ROTATION, RotationSegment.convertToSegment(enumdirection)), 3);
+                    worldserver.gameEvent((Entity) null, GameEvent.BLOCK_PLACE, blockposition);
+                    BlockEntity tileentity = worldserver.getBlockEntity(blockposition);
+
+                    if (tileentity instanceof SkullBlockEntity) {
+                        WitherSkullBlock.checkSpawn(worldserver, blockposition, (SkullBlockEntity) tileentity);
+                    }
+
+                    itemstack.shrink(1);
+                    this.setSuccess(true);
+                } else {
+                    this.setSuccess(ArmorItem.dispenseArmor(sourceblock, itemstack));
+                }
+
+                return itemstack;
             }
-        );
+        });
         DispenserBlock.registerBehavior(Blocks.CARVED_PUMPKIN, new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                Level level = blockSource.level();
-                BlockPos blockPos = blockSource.pos().relative(blockSource.state().getValue(DispenserBlock.FACING));
-                CarvedPumpkinBlock carvedPumpkinBlock = (CarvedPumpkinBlock)Blocks.CARVED_PUMPKIN;
-                if (level.isEmptyBlock(blockPos) && carvedPumpkinBlock.canSpawnGolem(level, blockPos)) {
-                    if (!level.isClientSide) {
-                        level.setBlock(blockPos, carvedPumpkinBlock.defaultBlockState(), 3);
-                        level.gameEvent(null, GameEvent.BLOCK_PLACE, blockPos);
+            protected ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                ServerLevel worldserver = sourceblock.level();
+                BlockPos blockposition = sourceblock.pos().relative((Direction) sourceblock.state().getValue(DispenserBlock.FACING));
+                CarvedPumpkinBlock blockpumpkincarved = (CarvedPumpkinBlock) Blocks.CARVED_PUMPKIN;
+
+                // CraftBukkit start
+                org.bukkit.block.Block bukkitBlock = CraftBlock.at(worldserver, sourceblock.pos());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
+
+                BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
+                if (!DispenserBlock.eventFired) {
+                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled()) {
+                    return itemstack;
+                }
+
+                if (!event.getItem().equals(craftItem)) {
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                        idispensebehavior.dispense(sourceblock, eventStack);
+                        return itemstack;
                     }
+                }
+                // CraftBukkit end
 
-                    itemStack.shrink(1);
+                if (worldserver.isEmptyBlock(blockposition) && blockpumpkincarved.canSpawnGolem(worldserver, blockposition)) {
+                    if (!worldserver.isClientSide) {
+                        worldserver.setBlock(blockposition, blockpumpkincarved.defaultBlockState(), 3);
+                        worldserver.gameEvent((Entity) null, GameEvent.BLOCK_PLACE, blockposition);
+                    }
+
+                    itemstack.shrink(1);
                     this.setSuccess(true);
                 } else {
-                    this.setSuccess(ArmorItem.dispenseArmor(blockSource, itemStack));
+                    this.setSuccess(ArmorItem.dispenseArmor(sourceblock, itemstack));
                 }
 
-                return itemStack;
+                return itemstack;
             }
         });
         DispenserBlock.registerBehavior(Blocks.SHULKER_BOX.asItem(), new ShulkerBoxDispenseBehavior());
+        DyeColor[] aenumcolor = DyeColor.values();
+        int i = aenumcolor.length;
 
-        for (DyeColor dyeColor : DyeColor.values()) {
-            DispenserBlock.registerBehavior(ShulkerBoxBlock.getBlockByColor(dyeColor).asItem(), new ShulkerBoxDispenseBehavior());
+        for (int j = 0; j < i; ++j) {
+            DyeColor enumcolor = aenumcolor[j];
+
+            DispenserBlock.registerBehavior(ShulkerBoxBlock.getBlockByColor(enumcolor).asItem(), new ShulkerBoxDispenseBehavior());
         }
 
-        DispenserBlock.registerBehavior(
-            Items.GLASS_BOTTLE.asItem(),
-            new OptionalDispenseItemBehavior() {
-                private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
-    
-                private ItemStack takeLiquid(BlockSource blockSource, ItemStack itemStack, ItemStack itemStack1) {
-                    itemStack.shrink(1);
-                    if (itemStack.isEmpty()) {
-                        blockSource.level().gameEvent(null, GameEvent.FLUID_PICKUP, blockSource.pos());
-                        return itemStack1.copy();
-                    } else {
-                        if (blockSource.blockEntity().addItem(itemStack1.copy()) < 0) {
-                            this.defaultDispenseItemBehavior.dispense(blockSource, itemStack1.copy());
-                        }
-    
-                        return itemStack;
+        DispenserBlock.registerBehavior(Items.GLASS_BOTTLE.asItem(), new OptionalDispenseItemBehavior() {
+            private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
+
+            private ItemStack takeLiquid(SourceBlock sourceblock, ItemStack itemstack, ItemStack itemstack1) {
+                itemstack.shrink(1);
+                if (itemstack.isEmpty()) {
+                    sourceblock.level().gameEvent((Entity) null, GameEvent.FLUID_PICKUP, sourceblock.pos());
+                    return itemstack1.copy();
+                } else {
+                    if (sourceblock.blockEntity().addItem(itemstack1.copy()) < 0) {
+                        this.defaultDispenseItemBehavior.dispense(sourceblock, itemstack1.copy());
                     }
+
+                    return itemstack;
                 }
-    
-                @Override
-                public ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                    this.setSuccess(false);
-                    ServerLevel serverLevel = blockSource.level();
-                    BlockPos blockPos = blockSource.pos().relative(blockSource.state().getValue(DispenserBlock.FACING));
-                    BlockState blockState = serverLevel.getBlockState(blockPos);
-                    if (blockState.is(BlockTags.BEEHIVES, hive -> hive.hasProperty(BeehiveBlock.HONEY_LEVEL) && hive.getBlock() instanceof BeehiveBlock)
-                        && blockState.getValue(BeehiveBlock.HONEY_LEVEL) >= 5) {
-                        ((BeehiveBlock)blockState.getBlock())
-                            .releaseBeesAndResetHoneyLevel(serverLevel, blockState, blockPos, null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
-                        this.setSuccess(true);
-                        return this.takeLiquid(blockSource, itemStack, new ItemStack(Items.HONEY_BOTTLE));
-                    } else if (serverLevel.getFluidState(blockPos).is(FluidTags.WATER)) {
-                        this.setSuccess(true);
-                        return this.takeLiquid(blockSource, itemStack, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.WATER));
-                    } else {
-                        return super.execute(blockSource, itemStack);
+            }
+
+            @Override
+            public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                this.setSuccess(false);
+                ServerLevel worldserver = sourceblock.level();
+                BlockPos blockposition = sourceblock.pos().relative((Direction) sourceblock.state().getValue(DispenserBlock.FACING));
+                IBlockData iblockdata = worldserver.getBlockState(blockposition);
+
+                // CraftBukkit start
+                org.bukkit.block.Block bukkitBlock = CraftBlock.at(worldserver, sourceblock.pos());
+                CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
+
+                BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
+                if (!DispenserBlock.eventFired) {
+                    worldserver.getCraftServer().getPluginManager().callEvent(event);
+                }
+
+                if (event.isCancelled()) {
+                    return itemstack;
+                }
+
+                if (!event.getItem().equals(craftItem)) {
+                    // Chain to handler for new item
+                    ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                        idispensebehavior.dispense(sourceblock, eventStack);
+                        return itemstack;
                     }
                 }
+                // CraftBukkit end
+
+                if (iblockdata.is(BlockTags.BEEHIVES, (blockbase_blockdata) -> {
+                    return blockbase_blockdata.hasProperty(BeehiveBlock.HONEY_LEVEL) && blockbase_blockdata.getBlock() instanceof BeehiveBlock;
+                }) && (Integer) iblockdata.getValue(BeehiveBlock.HONEY_LEVEL) >= 5) {
+                    ((BeehiveBlock) iblockdata.getBlock()).releaseBeesAndResetHoneyLevel(worldserver, iblockdata, blockposition, (Player) null, BeehiveBlockEntity.ReleaseStatus.BEE_RELEASED);
+                    this.setSuccess(true);
+                    return this.takeLiquid(sourceblock, itemstack, new ItemStack(Items.HONEY_BOTTLE));
+                } else if (worldserver.getFluidState(blockposition).is(FluidTags.WATER)) {
+                    this.setSuccess(true);
+                    return this.takeLiquid(sourceblock, itemstack, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.WATER));
+                } else {
+                    return super.execute(sourceblock, itemstack);
+                }
             }
-        );
+        });
         DispenserBlock.registerBehavior(Items.GLOWSTONE, new OptionalDispenseItemBehavior() {
             @Override
-            public ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                Direction direction = blockSource.state().getValue(DispenserBlock.FACING);
-                BlockPos blockPos = blockSource.pos().relative(direction);
-                Level level = blockSource.level();
-                BlockState blockState = level.getBlockState(blockPos);
+            public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                Direction enumdirection = (Direction) sourceblock.state().getValue(DispenserBlock.FACING);
+                BlockPos blockposition = sourceblock.pos().relative(enumdirection);
+                ServerLevel worldserver = sourceblock.level();
+                IBlockData iblockdata = worldserver.getBlockState(blockposition);
+
                 this.setSuccess(true);
-                if (blockState.is(Blocks.RESPAWN_ANCHOR)) {
-                    if (blockState.getValue(RespawnAnchorBlock.CHARGE) != 4) {
-                        RespawnAnchorBlock.charge(null, level, blockPos, blockState);
-                        itemStack.shrink(1);
+                if (iblockdata.is(Blocks.RESPAWN_ANCHOR)) {
+                    if ((Integer) iblockdata.getValue(RespawnAnchorBlock.CHARGE) != 4) {
+                        RespawnAnchorBlock.charge((Entity) null, worldserver, blockposition, iblockdata);
+                        itemstack.shrink(1);
                     } else {
                         this.setSuccess(false);
                     }
 
-                    return itemStack;
+                    return itemstack;
                 } else {
-                    return super.execute(blockSource, itemStack);
+                    return super.execute(sourceblock, itemstack);
                 }
             }
         });
         DispenserBlock.registerBehavior(Items.SHEARS.asItem(), new ShearsDispenseItemBehavior());
         DispenserBlock.registerBehavior(Items.HONEYCOMB, new OptionalDispenseItemBehavior() {
             @Override
-            public ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                BlockPos blockPos = blockSource.pos().relative(blockSource.state().getValue(DispenserBlock.FACING));
-                Level level = blockSource.level();
-                BlockState blockState = level.getBlockState(blockPos);
-                Optional<BlockState> waxed = HoneycombItem.getWaxed(blockState);
-                if (waxed.isPresent()) {
-                    level.setBlockAndUpdate(blockPos, waxed.get());
-                    level.levelEvent(3003, blockPos, 0);
-                    itemStack.shrink(1);
+            public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                BlockPos blockposition = sourceblock.pos().relative((Direction) sourceblock.state().getValue(DispenserBlock.FACING));
+                ServerLevel worldserver = sourceblock.level();
+                IBlockData iblockdata = worldserver.getBlockState(blockposition);
+                Optional<IBlockData> optional = HoneycombItem.getWaxed(iblockdata);
+
+                if (optional.isPresent()) {
+                    worldserver.setBlockAndUpdate(blockposition, (IBlockData) optional.get());
+                    worldserver.levelEvent(3003, blockposition, 0);
+                    itemstack.shrink(1);
                     this.setSuccess(true);
-                    return itemStack;
+                    return itemstack;
                 } else {
-                    return super.execute(blockSource, itemStack);
+                    return super.execute(sourceblock, itemstack);
                 }
             }
         });
-        DispenserBlock.registerBehavior(
-            Items.POTION,
-            new DefaultDispenseItemBehavior() {
-                private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
-    
-                @Override
-                public ItemStack execute(BlockSource blockSource, ItemStack itemStack) {
-                    if (PotionUtils.getPotion(itemStack) != Potions.WATER) {
-                        return this.defaultDispenseItemBehavior.dispense(blockSource, itemStack);
+        DispenserBlock.registerBehavior(Items.POTION, new DefaultDispenseItemBehavior() {
+            private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
+
+            @Override
+            public ItemStack execute(SourceBlock sourceblock, ItemStack itemstack) {
+                if (PotionUtils.getPotion(itemstack) != Potions.WATER) {
+                    return this.defaultDispenseItemBehavior.dispense(sourceblock, itemstack);
+                } else {
+                    ServerLevel worldserver = sourceblock.level();
+                    BlockPos blockposition = sourceblock.pos();
+                    BlockPos blockposition1 = sourceblock.pos().relative((Direction) sourceblock.state().getValue(DispenserBlock.FACING));
+
+                    if (!worldserver.getBlockState(blockposition1).is(BlockTags.CONVERTABLE_TO_MUD)) {
+                        return this.defaultDispenseItemBehavior.dispense(sourceblock, itemstack);
                     } else {
-                        ServerLevel serverLevel = blockSource.level();
-                        BlockPos blockPos = blockSource.pos();
-                        BlockPos blockPos1 = blockSource.pos().relative(blockSource.state().getValue(DispenserBlock.FACING));
-                        if (!serverLevel.getBlockState(blockPos1).is(BlockTags.CONVERTABLE_TO_MUD)) {
-                            return this.defaultDispenseItemBehavior.dispense(blockSource, itemStack);
-                        } else {
-                            if (!serverLevel.isClientSide) {
-                                for (int i = 0; i < 5; i++) {
-                                    serverLevel.sendParticles(
-                                        ParticleTypes.SPLASH,
-                                        (double)blockPos.getX() + serverLevel.random.nextDouble(),
-                                        (double)(blockPos.getY() + 1),
-                                        (double)blockPos.getZ() + serverLevel.random.nextDouble(),
-                                        1,
-                                        0.0,
-                                        0.0,
-                                        0.0,
-                                        1.0
-                                    );
-                                }
+                        if (!worldserver.isClientSide) {
+                            for (int k = 0; k < 5; ++k) {
+                                worldserver.sendParticles(ParticleTypes.SPLASH, (double) blockposition.getX() + worldserver.random.nextDouble(), (double) (blockposition.getY() + 1), (double) blockposition.getZ() + worldserver.random.nextDouble(), 1, 0.0D, 0.0D, 0.0D, 1.0D);
                             }
-    
-                            serverLevel.playSound(null, blockPos, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-                            serverLevel.gameEvent(null, GameEvent.FLUID_PLACE, blockPos);
-                            serverLevel.setBlockAndUpdate(blockPos1, Blocks.MUD.defaultBlockState());
-                            return new ItemStack(Items.GLASS_BOTTLE);
                         }
+
+                        worldserver.playSound((Player) null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+                        worldserver.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockposition);
+                        worldserver.setBlockAndUpdate(blockposition1, Blocks.MUD.defaultBlockState());
+                        return new ItemStack(Items.GLASS_BOTTLE);
                     }
                 }
             }
-        );
+        });
     }
 
-    static Vec3 getEntityPokingOutOfBlockPos(BlockSource blockSource, EntityType<?> entityType, Direction direction) {
-        return blockSource.center()
-            .add(
-                (double)direction.getStepX() * (0.5000099999997474 - (double)entityType.getWidth() / 2.0),
-                (double)direction.getStepY() * (0.5000099999997474 - (double)entityType.getHeight() / 2.0) - (double)entityType.getHeight() / 2.0,
-                (double)direction.getStepZ() * (0.5000099999997474 - (double)entityType.getWidth() / 2.0)
-            );
+    static Vec3 getEntityPokingOutOfBlockPos(SourceBlock sourceblock, EntityType<?> entitytypes, Direction enumdirection) {
+        return sourceblock.center().add((double) enumdirection.getStepX() * (0.5000099999997474D - (double) entitytypes.getWidth() / 2.0D), (double) enumdirection.getStepY() * (0.5000099999997474D - (double) entitytypes.getHeight() / 2.0D) - (double) entitytypes.getHeight() / 2.0D, (double) enumdirection.getStepZ() * (0.5000099999997474D - (double) entitytypes.getWidth() / 2.0D));
     }
 }
