--- a/net/minecraft/core/cauldron/CauldronInteraction.java
+++ b/net/minecraft/core/cauldron/CauldronInteraction.java
@@ -4,6 +4,8 @@
 import it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import java.util.Map;
+import java.util.Objects;
+import java.util.function.Function;
 import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
 import net.minecraft.sounds.SoundEvent;
@@ -11,8 +13,9 @@
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
 import net.minecraft.util.ExtraCodecs;
-import net.minecraft.world.InteractionHand;
+import net.minecraft.world.EnumHand;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.DyeableLeatherItem;
 import net.minecraft.world.item.Item;
@@ -27,286 +30,330 @@
 import net.minecraft.world.level.block.LayeredCauldronBlock;
 import net.minecraft.world.level.block.ShulkerBoxBlock;
 import net.minecraft.world.level.block.entity.BannerBlockEntity;
-import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.level.gameevent.GameEvent;
 
+// CraftBukkit start
+import org.bukkit.event.block.CauldronLevelChangeEvent;
+// CraftBukkit end
+
 public interface CauldronInteraction {
-    Map<String, CauldronInteraction.InteractionMap> INTERACTIONS = new Object2ObjectArrayMap<>();
-    Codec<CauldronInteraction.InteractionMap> CODEC = ExtraCodecs.stringResolverCodec(CauldronInteraction.InteractionMap::name, INTERACTIONS::get);
-    CauldronInteraction.InteractionMap EMPTY = newInteractionMap("empty");
-    CauldronInteraction.InteractionMap WATER = newInteractionMap("water");
-    CauldronInteraction.InteractionMap LAVA = newInteractionMap("lava");
-    CauldronInteraction.InteractionMap POWDER_SNOW = newInteractionMap("powder_snow");
-    CauldronInteraction FILL_WATER = (blockState, level, blockPos, player, hand, stack) -> emptyBucket(
-            level,
-            blockPos,
-            player,
-            hand,
-            stack,
-            Blocks.WATER_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(3)),
-            SoundEvents.BUCKET_EMPTY
-        );
-    CauldronInteraction FILL_LAVA = (blockState, level, blockPos, player, hand, stack) -> emptyBucket(
-            level, blockPos, player, hand, stack, Blocks.LAVA_CAULDRON.defaultBlockState(), SoundEvents.BUCKET_EMPTY_LAVA
-        );
-    CauldronInteraction FILL_POWDER_SNOW = (blockState, level, blockPos, player, hand, stack) -> emptyBucket(
-            level,
-            blockPos,
-            player,
-            hand,
-            stack,
-            Blocks.POWDER_SNOW_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(3)),
-            SoundEvents.BUCKET_EMPTY_POWDER_SNOW
-        );
-    CauldronInteraction SHULKER_BOX = (blockState, level, blockPos, player, hand, stack) -> {
-        Block block = Block.byItem(stack.getItem());
-        if (!(block instanceof ShulkerBoxBlock)) {
-            return InteractionResult.PASS;
-        } else {
-            if (!level.isClientSide) {
-                ItemStack itemStack = new ItemStack(Blocks.SHULKER_BOX);
-                if (stack.hasTag()) {
-                    itemStack.setTag(stack.getTag().copy());
-                }
 
-                player.setItemInHand(hand, itemStack);
-                player.awardStat(Stats.CLEAN_SHULKER_BOX);
-                LayeredCauldronBlock.lowerFillLevel(blockState, level, blockPos);
-            }
+    Map<String, CauldronInteraction.a> INTERACTIONS = new Object2ObjectArrayMap();
+    // CraftBukkit start - decompile error
+    /*
+    Codec<CauldronInteraction.a> CODEC;
+    CauldronInteraction.a EMPTY;
+    CauldronInteraction.a WATER;
+    CauldronInteraction.a LAVA;
+    CauldronInteraction.a POWDER_SNOW;
+    CauldronInteraction FILL_WATER;
+    CauldronInteraction FILL_LAVA;
+    CauldronInteraction FILL_POWDER_SNOW;
+    CauldronInteraction SHULKER_BOX;
+    CauldronInteraction BANNER;
+    CauldronInteraction DYED_ITEM;
+     */
+    // CraftBukkit end
 
-            return InteractionResult.sidedSuccess(level.isClientSide);
-        }
-    };
-    CauldronInteraction BANNER = (blockState, level, blockPos, player, hand, stack) -> {
-        if (BannerBlockEntity.getPatternCount(stack) <= 0) {
-            return InteractionResult.PASS;
-        } else {
-            if (!level.isClientSide) {
-                ItemStack itemStack = stack.copyWithCount(1);
-                BannerBlockEntity.removeLastPattern(itemStack);
-                if (!player.getAbilities().instabuild) {
-                    stack.shrink(1);
-                }
+    static CauldronInteraction.a newInteractionMap(String s) {
+        Object2ObjectOpenHashMap<Item, CauldronInteraction> object2objectopenhashmap = new Object2ObjectOpenHashMap();
 
-                if (stack.isEmpty()) {
-                    player.setItemInHand(hand, itemStack);
-                } else if (player.getInventory().add(itemStack)) {
-                    player.inventoryMenu.sendAllDataToRemote();
-                } else {
-                    player.drop(itemStack, false);
-                }
-
-                player.awardStat(Stats.CLEAN_BANNER);
-                LayeredCauldronBlock.lowerFillLevel(blockState, level, blockPos);
-            }
-
-            return InteractionResult.sidedSuccess(level.isClientSide);
-        }
-    };
-    CauldronInteraction DYED_ITEM = (blockState, level, blockPos, player, hand, stack) -> {
-        if (!(stack.getItem() instanceof DyeableLeatherItem dyeableLeatherItem)) {
+        object2objectopenhashmap.defaultReturnValue((iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
             return InteractionResult.PASS;
-        } else if (!dyeableLeatherItem.hasCustomColor(stack)) {
-            return InteractionResult.PASS;
-        } else {
-            if (!level.isClientSide) {
-                dyeableLeatherItem.clearColor(stack);
-                player.awardStat(Stats.CLEAN_ARMOR);
-                LayeredCauldronBlock.lowerFillLevel(blockState, level, blockPos);
-            }
+        });
+        CauldronInteraction.a cauldroninteraction_a = new CauldronInteraction.a(s, object2objectopenhashmap);
 
-            return InteractionResult.sidedSuccess(level.isClientSide);
-        }
-    };
-
-    static CauldronInteraction.InteractionMap newInteractionMap(String string) {
-        Object2ObjectOpenHashMap<Item, CauldronInteraction> map = new Object2ObjectOpenHashMap<>();
-        map.defaultReturnValue((blockState, level, blockPos, player, hand, stack) -> InteractionResult.PASS);
-        CauldronInteraction.InteractionMap interactionMap = new CauldronInteraction.InteractionMap(string, map);
-        INTERACTIONS.put(string, interactionMap);
-        return interactionMap;
+        CauldronInteraction.INTERACTIONS.put(s, cauldroninteraction_a);
+        return cauldroninteraction_a;
     }
 
-    InteractionResult interact(BlockState blockState, Level level, BlockPos blockPos, Player player, InteractionHand hand, ItemStack stack);
+    InteractionResult interact(IBlockData blockState, Level level, BlockPos blockPos, Player player, EnumHand hand, ItemStack stack);
 
     static void bootStrap() {
-        Map<Item, CauldronInteraction> map = EMPTY.map();
+        Map<Item, CauldronInteraction> map = CauldronInteraction.EMPTY.map();
+
         addDefaultInteractions(map);
-        map.put(Items.POTION, (blockState, level, blockPos, player, hand, stack) -> {
-            if (PotionUtils.getPotion(stack) != Potions.WATER) {
+        map.put(Items.POTION, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            if (PotionUtils.getPotion(itemstack) != Potions.WATER) {
                 return InteractionResult.PASS;
             } else {
-                if (!level.isClientSide) {
-                    Item item = stack.getItem();
-                    player.setItemInHand(hand, ItemUtils.createFilledResult(stack, player, new ItemStack(Items.GLASS_BOTTLE)));
-                    player.awardStat(Stats.USE_CAULDRON);
-                    player.awardStat(Stats.ITEM_USED.get(item));
-                    level.setBlockAndUpdate(blockPos, Blocks.WATER_CAULDRON.defaultBlockState());
-                    level.playSound(null, blockPos, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-                    level.gameEvent(null, GameEvent.FLUID_PLACE, blockPos);
+                if (!world.isClientSide) {
+                    // CraftBukkit start
+                    if (!LayeredCauldronBlock.changeLevel(iblockdata, world, blockposition, Blocks.WATER_CAULDRON.defaultBlockState(), entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_EMPTY)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                    // CraftBukkit end
+                    Item item = itemstack.getItem();
+
+                    entityhuman.setItemInHand(enumhand, ItemUtils.createFilledResult(itemstack, entityhuman, new ItemStack(Items.GLASS_BOTTLE)));
+                    entityhuman.awardStat(Stats.USE_CAULDRON);
+                    entityhuman.awardStat(Stats.ITEM_USED.get(item));
+                    // world.setBlockAndUpdate(blockposition, Blocks.WATER_CAULDRON.defaultBlockState()); // CraftBukkit
+                    world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+                    world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockposition);
                 }
 
-                return InteractionResult.sidedSuccess(level.isClientSide);
+                return InteractionResult.sidedSuccess(world.isClientSide);
             }
         });
-        Map<Item, CauldronInteraction> map1 = WATER.map();
+        Map<Item, CauldronInteraction> map1 = CauldronInteraction.WATER.map();
+
         addDefaultInteractions(map1);
-        map1.put(
-            Items.BUCKET,
-            (blockState, level, blockPos, player, hand, stack) -> fillBucket(
-                    blockState,
-                    level,
-                    blockPos,
-                    player,
-                    hand,
-                    stack,
-                    new ItemStack(Items.WATER_BUCKET),
-                    blockState1 -> blockState1.getValue(LayeredCauldronBlock.LEVEL) == 3,
-                    SoundEvents.BUCKET_FILL
-                )
-        );
-        map1.put(Items.GLASS_BOTTLE, (blockState, level, blockPos, player, hand, stack) -> {
-            if (!level.isClientSide) {
-                Item item = stack.getItem();
-                player.setItemInHand(hand, ItemUtils.createFilledResult(stack, player, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.WATER)));
-                player.awardStat(Stats.USE_CAULDRON);
-                player.awardStat(Stats.ITEM_USED.get(item));
-                LayeredCauldronBlock.lowerFillLevel(blockState, level, blockPos);
-                level.playSound(null, blockPos, SoundEvents.BOTTLE_FILL, SoundSource.BLOCKS, 1.0F, 1.0F);
-                level.gameEvent(null, GameEvent.FLUID_PICKUP, blockPos);
+        map1.put(Items.BUCKET, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return fillBucket(iblockdata, world, blockposition, entityhuman, enumhand, itemstack, new ItemStack(Items.WATER_BUCKET), (iblockdata1) -> {
+                return (Integer) iblockdata1.getValue(LayeredCauldronBlock.LEVEL) == 3;
+            }, SoundEvents.BUCKET_FILL);
+        });
+        map1.put(Items.GLASS_BOTTLE, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            if (!world.isClientSide) {
+                // CraftBukkit start
+                if (!LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition, entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_FILL)) {
+                    return InteractionResult.SUCCESS;
+                }
+                // CraftBukkit end
+                Item item = itemstack.getItem();
+
+                entityhuman.setItemInHand(enumhand, ItemUtils.createFilledResult(itemstack, entityhuman, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.WATER)));
+                entityhuman.awardStat(Stats.USE_CAULDRON);
+                entityhuman.awardStat(Stats.ITEM_USED.get(item));
+                // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
+                world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_FILL, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.gameEvent((Entity) null, GameEvent.FLUID_PICKUP, blockposition);
             }
 
-            return InteractionResult.sidedSuccess(level.isClientSide);
+            return InteractionResult.sidedSuccess(world.isClientSide);
         });
-        map1.put(Items.POTION, (blockState, level, blockPos, player, hand, stack) -> {
-            if (blockState.getValue(LayeredCauldronBlock.LEVEL) != 3 && PotionUtils.getPotion(stack) == Potions.WATER) {
-                if (!level.isClientSide) {
-                    player.setItemInHand(hand, ItemUtils.createFilledResult(stack, player, new ItemStack(Items.GLASS_BOTTLE)));
-                    player.awardStat(Stats.USE_CAULDRON);
-                    player.awardStat(Stats.ITEM_USED.get(stack.getItem()));
-                    level.setBlockAndUpdate(blockPos, blockState.cycle(LayeredCauldronBlock.LEVEL));
-                    level.playSound(null, blockPos, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-                    level.gameEvent(null, GameEvent.FLUID_PLACE, blockPos);
+        map1.put(Items.POTION, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            if ((Integer) iblockdata.getValue(LayeredCauldronBlock.LEVEL) != 3 && PotionUtils.getPotion(itemstack) == Potions.WATER) {
+                if (!world.isClientSide) {
+                    // CraftBukkit start
+                    if (!LayeredCauldronBlock.changeLevel(iblockdata, world, blockposition, iblockdata.cycle(LayeredCauldronBlock.LEVEL), entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_EMPTY)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                    // CraftBukkit end
+                    entityhuman.setItemInHand(enumhand, ItemUtils.createFilledResult(itemstack, entityhuman, new ItemStack(Items.GLASS_BOTTLE)));
+                    entityhuman.awardStat(Stats.USE_CAULDRON);
+                    entityhuman.awardStat(Stats.ITEM_USED.get(itemstack.getItem()));
+                    // world.setBlockAndUpdate(blockposition, (IBlockData) iblockdata.cycle(LayeredCauldronBlock.LEVEL)); // CraftBukkit
+                    world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+                    world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockposition);
                 }
 
-                return InteractionResult.sidedSuccess(level.isClientSide);
+                return InteractionResult.sidedSuccess(world.isClientSide);
             } else {
                 return InteractionResult.PASS;
             }
         });
-        map1.put(Items.LEATHER_BOOTS, DYED_ITEM);
-        map1.put(Items.LEATHER_LEGGINGS, DYED_ITEM);
-        map1.put(Items.LEATHER_CHESTPLATE, DYED_ITEM);
-        map1.put(Items.LEATHER_HELMET, DYED_ITEM);
-        map1.put(Items.LEATHER_HORSE_ARMOR, DYED_ITEM);
-        map1.put(Items.WHITE_BANNER, BANNER);
-        map1.put(Items.GRAY_BANNER, BANNER);
-        map1.put(Items.BLACK_BANNER, BANNER);
-        map1.put(Items.BLUE_BANNER, BANNER);
-        map1.put(Items.BROWN_BANNER, BANNER);
-        map1.put(Items.CYAN_BANNER, BANNER);
-        map1.put(Items.GREEN_BANNER, BANNER);
-        map1.put(Items.LIGHT_BLUE_BANNER, BANNER);
-        map1.put(Items.LIGHT_GRAY_BANNER, BANNER);
-        map1.put(Items.LIME_BANNER, BANNER);
-        map1.put(Items.MAGENTA_BANNER, BANNER);
-        map1.put(Items.ORANGE_BANNER, BANNER);
-        map1.put(Items.PINK_BANNER, BANNER);
-        map1.put(Items.PURPLE_BANNER, BANNER);
-        map1.put(Items.RED_BANNER, BANNER);
-        map1.put(Items.YELLOW_BANNER, BANNER);
-        map1.put(Items.WHITE_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.GRAY_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.BLACK_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.BLUE_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.BROWN_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.CYAN_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.GREEN_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.LIGHT_BLUE_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.LIGHT_GRAY_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.LIME_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.MAGENTA_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.ORANGE_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.PINK_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.PURPLE_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.RED_SHULKER_BOX, SHULKER_BOX);
-        map1.put(Items.YELLOW_SHULKER_BOX, SHULKER_BOX);
-        Map<Item, CauldronInteraction> map2 = LAVA.map();
-        map2.put(
-            Items.BUCKET,
-            (blockState, level, blockPos, player, hand, stack) -> fillBucket(
-                    blockState, level, blockPos, player, hand, stack, new ItemStack(Items.LAVA_BUCKET), blockState1 -> true, SoundEvents.BUCKET_FILL_LAVA
-                )
-        );
+        map1.put(Items.LEATHER_BOOTS, CauldronInteraction.DYED_ITEM);
+        map1.put(Items.LEATHER_LEGGINGS, CauldronInteraction.DYED_ITEM);
+        map1.put(Items.LEATHER_CHESTPLATE, CauldronInteraction.DYED_ITEM);
+        map1.put(Items.LEATHER_HELMET, CauldronInteraction.DYED_ITEM);
+        map1.put(Items.LEATHER_HORSE_ARMOR, CauldronInteraction.DYED_ITEM);
+        map1.put(Items.WHITE_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.GRAY_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.BLACK_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.BLUE_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.BROWN_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.CYAN_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.GREEN_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.LIGHT_BLUE_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.LIGHT_GRAY_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.LIME_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.MAGENTA_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.ORANGE_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.PINK_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.PURPLE_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.RED_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.YELLOW_BANNER, CauldronInteraction.BANNER);
+        map1.put(Items.WHITE_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.GRAY_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.BLACK_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.BLUE_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.BROWN_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.CYAN_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.GREEN_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.LIGHT_BLUE_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.LIGHT_GRAY_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.LIME_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.MAGENTA_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.ORANGE_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.PINK_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.PURPLE_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.RED_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        map1.put(Items.YELLOW_SHULKER_BOX, CauldronInteraction.SHULKER_BOX);
+        Map<Item, CauldronInteraction> map2 = CauldronInteraction.LAVA.map();
+
+        map2.put(Items.BUCKET, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return fillBucket(iblockdata, world, blockposition, entityhuman, enumhand, itemstack, new ItemStack(Items.LAVA_BUCKET), (iblockdata1) -> {
+                return true;
+            }, SoundEvents.BUCKET_FILL_LAVA);
+        });
         addDefaultInteractions(map2);
-        Map<Item, CauldronInteraction> map3 = POWDER_SNOW.map();
-        map3.put(
-            Items.BUCKET,
-            (blockState, level, blockPos, player, hand, stack) -> fillBucket(
-                    blockState,
-                    level,
-                    blockPos,
-                    player,
-                    hand,
-                    stack,
-                    new ItemStack(Items.POWDER_SNOW_BUCKET),
-                    blockState1 -> blockState1.getValue(LayeredCauldronBlock.LEVEL) == 3,
-                    SoundEvents.BUCKET_FILL_POWDER_SNOW
-                )
-        );
+        Map<Item, CauldronInteraction> map3 = CauldronInteraction.POWDER_SNOW.map();
+
+        map3.put(Items.BUCKET, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return fillBucket(iblockdata, world, blockposition, entityhuman, enumhand, itemstack, new ItemStack(Items.POWDER_SNOW_BUCKET), (iblockdata1) -> {
+                return (Integer) iblockdata1.getValue(LayeredCauldronBlock.LEVEL) == 3;
+            }, SoundEvents.BUCKET_FILL_POWDER_SNOW);
+        });
         addDefaultInteractions(map3);
     }
 
     static void addDefaultInteractions(Map<Item, CauldronInteraction> interactionsMap) {
-        interactionsMap.put(Items.LAVA_BUCKET, FILL_LAVA);
-        interactionsMap.put(Items.WATER_BUCKET, FILL_WATER);
-        interactionsMap.put(Items.POWDER_SNOW_BUCKET, FILL_POWDER_SNOW);
+        interactionsMap.put(Items.LAVA_BUCKET, CauldronInteraction.FILL_LAVA);
+        interactionsMap.put(Items.WATER_BUCKET, CauldronInteraction.FILL_WATER);
+        interactionsMap.put(Items.POWDER_SNOW_BUCKET, CauldronInteraction.FILL_POWDER_SNOW);
     }
 
-    static InteractionResult fillBucket(
-        BlockState blockState,
-        Level level,
-        BlockPos pos,
-        Player player,
-        InteractionHand hand,
-        ItemStack emptyStack,
-        ItemStack filledStack,
-        Predicate<BlockState> statePredicate,
-        SoundEvent fillSound
-    ) {
+    static InteractionResult fillBucket(IBlockData blockState, Level level, BlockPos pos, Player player, EnumHand hand, ItemStack emptyStack, ItemStack filledStack, Predicate<IBlockData> statePredicate, SoundEvent fillSound) {
         if (!statePredicate.test(blockState)) {
             return InteractionResult.PASS;
         } else {
             if (!level.isClientSide) {
+                // CraftBukkit start
+                if (!LayeredCauldronBlock.changeLevel(blockState, level, pos, Blocks.CAULDRON.defaultBlockState(), player, CauldronLevelChangeEvent.ChangeReason.BUCKET_FILL)) {
+                    return InteractionResult.SUCCESS;
+                }
+                // CraftBukkit end
                 Item item = emptyStack.getItem();
+
                 player.setItemInHand(hand, ItemUtils.createFilledResult(emptyStack, player, filledStack));
                 player.awardStat(Stats.USE_CAULDRON);
                 player.awardStat(Stats.ITEM_USED.get(item));
-                level.setBlockAndUpdate(pos, Blocks.CAULDRON.defaultBlockState());
-                level.playSound(null, pos, fillSound, SoundSource.BLOCKS, 1.0F, 1.0F);
-                level.gameEvent(null, GameEvent.FLUID_PICKUP, pos);
+                // world.setBlockAndUpdate(blockposition, Blocks.CAULDRON.defaultBlockState()); // CraftBukkit
+                level.playSound((Player) null, pos, fillSound, SoundSource.BLOCKS, 1.0F, 1.0F);
+                level.gameEvent((Entity) null, GameEvent.FLUID_PICKUP, pos);
             }
 
             return InteractionResult.sidedSuccess(level.isClientSide);
         }
     }
 
-    static InteractionResult emptyBucket(
-        Level level, BlockPos pos, Player player, InteractionHand hand, ItemStack filledStack, BlockState state, SoundEvent emptySound
-    ) {
+    static InteractionResult emptyBucket(Level level, BlockPos pos, Player player, EnumHand hand, ItemStack filledStack, IBlockData state, SoundEvent emptySound) {
         if (!level.isClientSide) {
+            // CraftBukkit start
+            if (!LayeredCauldronBlock.changeLevel(state, level, pos, state, player, CauldronLevelChangeEvent.ChangeReason.BUCKET_EMPTY)) {
+                return InteractionResult.SUCCESS;
+            }
+            // CraftBukkit end
             Item item = filledStack.getItem();
+
             player.setItemInHand(hand, ItemUtils.createFilledResult(filledStack, player, new ItemStack(Items.BUCKET)));
             player.awardStat(Stats.FILL_CAULDRON);
             player.awardStat(Stats.ITEM_USED.get(item));
-            level.setBlockAndUpdate(pos, state);
-            level.playSound(null, pos, emptySound, SoundSource.BLOCKS, 1.0F, 1.0F);
-            level.gameEvent(null, GameEvent.FLUID_PLACE, pos);
+            // world.setBlockAndUpdate(blockposition, iblockdata); // CraftBukkit
+            level.playSound((Player) null, pos, emptySound, SoundSource.BLOCKS, 1.0F, 1.0F);
+            level.gameEvent((Entity) null, GameEvent.FLUID_PLACE, pos);
         }
 
         return InteractionResult.sidedSuccess(level.isClientSide);
     }
 
-    public static record InteractionMap(String name, Map<Item, CauldronInteraction> map) {
+    // CraftBukkit start - decompile errors
+    // static {
+        Codec<CauldronInteraction.a> CODEC = ExtraCodecs.stringResolverCodec(CauldronInteraction.a::name, CauldronInteraction.INTERACTIONS::get);
+        CauldronInteraction.a EMPTY = newInteractionMap("empty");
+        CauldronInteraction.a WATER = newInteractionMap("water");
+        CauldronInteraction.a LAVA = newInteractionMap("lava");
+        CauldronInteraction.a POWDER_SNOW = newInteractionMap("powder_snow");
+        CauldronInteraction FILL_WATER = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, (IBlockData) Blocks.WATER_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY);
+        };
+        CauldronInteraction FILL_LAVA = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, Blocks.LAVA_CAULDRON.defaultBlockState(), SoundEvents.BUCKET_EMPTY_LAVA);
+        };
+        CauldronInteraction FILL_POWDER_SNOW = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            return emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, (IBlockData) Blocks.POWDER_SNOW_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY_POWDER_SNOW);
+        };
+        CauldronInteraction SHULKER_BOX = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
+            // CraftBukkit end
+            Block block = Block.byItem(itemstack.getItem());
+
+            if (!(block instanceof ShulkerBoxBlock)) {
+                return InteractionResult.PASS;
+            } else {
+                if (!world.isClientSide) {
+                    // CraftBukkit start
+                    if (!LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition, entityhuman, CauldronLevelChangeEvent.ChangeReason.SHULKER_WASH)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                    // CraftBukkit end
+                    ItemStack itemstack1 = new ItemStack(Blocks.SHULKER_BOX);
+
+                    if (itemstack.hasTag()) {
+                        itemstack1.setTag(itemstack.getTag().copy());
+                    }
+
+                    entityhuman.setItemInHand(enumhand, itemstack1);
+                    entityhuman.awardStat(Stats.CLEAN_SHULKER_BOX);
+                    // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
+                }
+
+                return InteractionResult.sidedSuccess(world.isClientSide);
+            }
+        };
+        CauldronInteraction BANNER = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> { // CraftBukkit - decompile error
+            if (BannerBlockEntity.getPatternCount(itemstack) <= 0) {
+                return InteractionResult.PASS;
+            } else {
+                if (!world.isClientSide) {
+                    // CraftBukkit start
+                    if (!LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition, entityhuman, CauldronLevelChangeEvent.ChangeReason.BANNER_WASH)) {
+                        return InteractionResult.SUCCESS;
+                    }
+                    // CraftBukkit end
+                    ItemStack itemstack1 = itemstack.copyWithCount(1);
+
+                    BannerBlockEntity.removeLastPattern(itemstack1);
+                    if (!entityhuman.getAbilities().instabuild) {
+                        itemstack.shrink(1);
+                    }
+
+                    if (itemstack.isEmpty()) {
+                        entityhuman.setItemInHand(enumhand, itemstack1);
+                    } else if (entityhuman.getInventory().add(itemstack1)) {
+                        entityhuman.inventoryMenu.sendAllDataToRemote();
+                    } else {
+                        entityhuman.drop(itemstack1, false);
+                    }
+
+                    entityhuman.awardStat(Stats.CLEAN_BANNER);
+                    // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
+                }
+
+                return InteractionResult.sidedSuccess(world.isClientSide);
+            }
+        };
+        CauldronInteraction DYED_ITEM = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> { // CraftBukkit - decompile error
+            Item item = itemstack.getItem();
+
+            if (!(item instanceof DyeableLeatherItem)) {
+                return InteractionResult.PASS;
+            } else {
+                DyeableLeatherItem idyeable = (DyeableLeatherItem) item;
+
+                if (!idyeable.hasCustomColor(itemstack)) {
+                    return InteractionResult.PASS;
+                } else {
+                    if (!world.isClientSide) {
+                        // CraftBukkit start
+                        if (!LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition, entityhuman, CauldronLevelChangeEvent.ChangeReason.ARMOR_WASH)) {
+                            return InteractionResult.SUCCESS;
+                        }
+                        // CraftBukkit end
+                        idyeable.clearColor(itemstack);
+                        entityhuman.awardStat(Stats.CLEAN_ARMOR);
+                        // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
+                    }
+
+                    return InteractionResult.sidedSuccess(world.isClientSide);
+                }
+            }
+        };
+    // } // CraftBukkit - decompile error
+
+    public static record a(String name, Map<Item, CauldronInteraction> map) {
+
     }
 }
