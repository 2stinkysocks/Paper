--- a/net/minecraft/nbt/ByteArrayTag.java
+++ b/net/minecraft/nbt/ByteArrayTag.java
@@ -1,3 +1,4 @@
+// mc-dev import
 package net.minecraft.nbt;
 
 import java.io.DataInput;
@@ -8,30 +9,33 @@
 import org.apache.commons.lang3.ArrayUtils;
 
 public class ByteArrayTag extends CollectionTag<ByteTag> {
+
     private static final int SELF_SIZE_IN_BYTES = 24;
-    public static final TagType<ByteArrayTag> TYPE = new TagType.VariableSize<ByteArrayTag>() {
+    public static final TagType<ByteArrayTag> TYPE = new TagType.b<ByteArrayTag>() {
         @Override
-        public ByteArrayTag load(DataInput dataInput, NbtAccounter nbtAccounter) throws IOException {
-            return new ByteArrayTag(readAccounted(dataInput, nbtAccounter));
+        public ByteArrayTag load(DataInput datainput, NbtAccounter nbtreadlimiter) throws IOException {
+            return new ByteArrayTag(readAccounted(datainput, nbtreadlimiter));
         }
 
         @Override
-        public StreamTagVisitor.ValueResult parse(DataInput dataInput, StreamTagVisitor streamTagVisitor, NbtAccounter nbtAccounter) throws IOException {
-            return streamTagVisitor.visit(readAccounted(dataInput, nbtAccounter));
+        public StreamTagVisitor.b parse(DataInput datainput, StreamTagVisitor streamtagvisitor, NbtAccounter nbtreadlimiter) throws IOException {
+            return streamtagvisitor.visit(readAccounted(datainput, nbtreadlimiter));
         }
 
-        private static byte[] readAccounted(DataInput dataInput, NbtAccounter nbtAccounter) throws IOException {
-            nbtAccounter.accountBytes(24L);
-            int _int = dataInput.readInt();
-            nbtAccounter.accountBytes(1L, (long)_int);
-            byte[] bytes = new byte[_int];
-            dataInput.readFully(bytes);
-            return bytes;
+        private static byte[] readAccounted(DataInput datainput, NbtAccounter nbtreadlimiter) throws IOException {
+            nbtreadlimiter.accountBytes(24L);
+            int i = datainput.readInt();
+
+            nbtreadlimiter.accountBytes(1L, (long) i);
+            byte[] abyte = new byte[i];
+
+            datainput.readFully(abyte);
+            return abyte;
         }
 
         @Override
-        public void skip(DataInput dataInput, NbtAccounter nbtAccounter) throws IOException {
-            dataInput.skipBytes(dataInput.readInt() * 1);
+        public void skip(DataInput datainput, NbtAccounter nbtreadlimiter) throws IOException {
+            datainput.skipBytes(datainput.readInt() * 1);
         }
 
         @Override
@@ -50,19 +54,20 @@
         this.data = data;
     }
 
-    public ByteArrayTag(List<Byte> data) {
-        this(toArray(data));
+    public ByteArrayTag(List<Byte> dataList) {
+        this(toArray(dataList));
     }
 
     private static byte[] toArray(List<Byte> dataList) {
-        byte[] bytes = new byte[dataList.size()];
+        byte[] abyte = new byte[dataList.size()];
 
-        for (int i = 0; i < dataList.size(); i++) {
-            Byte _byte = dataList.get(i);
-            bytes[i] = _byte == null ? 0 : _byte;
+        for (int i = 0; i < dataList.size(); ++i) {
+            Byte obyte = (Byte) dataList.get(i);
+
+            abyte[i] = obyte == null ? 0 : obyte;
         }
 
-        return bytes;
+        return abyte;
     }
 
     @Override
@@ -83,7 +88,7 @@
 
     @Override
     public TagType<ByteArrayTag> getType() {
-        return TYPE;
+        return ByteArrayTag.TYPE;
     }
 
     @Override
@@ -93,17 +98,16 @@
 
     @Override
     public Tag copy() {
-        byte[] bytes = new byte[this.data.length];
-        System.arraycopy(this.data, 0, bytes, 0, this.data.length);
-        return new ByteArrayTag(bytes);
+        byte[] abyte = new byte[this.data.length];
+
+        System.arraycopy(this.data, 0, abyte, 0, this.data.length);
+        return new ByteArrayTag(abyte);
     }
 
-    @Override
-    public boolean equals(Object other) {
-        return this == other || other instanceof ByteArrayTag && Arrays.equals(this.data, ((ByteArrayTag)other).data);
+    public boolean equals(Object object) {
+        return this == object ? true : object instanceof ByteArrayTag && Arrays.equals(this.data, ((ByteArrayTag) object).data);
     }
 
-    @Override
     public int hashCode() {
         return Arrays.hashCode(this.data);
     }
@@ -117,32 +121,29 @@
         return this.data;
     }
 
-    @Override
     public int size() {
         return this.data.length;
     }
 
-    @Override
     public ByteTag get(int i) {
         return ByteTag.valueOf(this.data[i]);
     }
 
-    @Override
-    public ByteTag set(int i, ByteTag byteTag) {
-        byte b = this.data[i];
-        this.data[i] = byteTag.getAsByte();
-        return ByteTag.valueOf(b);
+    public ByteTag set(int i, ByteTag nbttagbyte) {
+        byte b0 = this.data[i];
+
+        this.data[i] = nbttagbyte.getAsByte();
+        return ByteTag.valueOf(b0);
     }
 
-    @Override
-    public void add(int i, ByteTag byteTag) {
-        this.data = ArrayUtils.add(this.data, i, byteTag.getAsByte());
+    public void add(int i, ByteTag nbttagbyte) {
+        this.data = ArrayUtils.add(this.data, i, nbttagbyte.getAsByte());
     }
 
     @Override
     public boolean setTag(int index, Tag nbt) {
-        if (nbt instanceof NumericTag) {
-            this.data[index] = ((NumericTag)nbt).getAsByte();
+        if (nbt instanceof NBTNumber) {
+            this.data[index] = ((NBTNumber) nbt).getAsByte();
             return true;
         } else {
             return false;
@@ -151,8 +152,8 @@
 
     @Override
     public boolean addTag(int index, Tag nbt) {
-        if (nbt instanceof NumericTag) {
-            this.data = ArrayUtils.add(this.data, index, ((NumericTag)nbt).getAsByte());
+        if (nbt instanceof NBTNumber) {
+            this.data = ArrayUtils.add(this.data, index, ((NBTNumber) nbt).getAsByte());
             return true;
         } else {
             return false;
@@ -161,9 +162,10 @@
 
     @Override
     public ByteTag remove(int i) {
-        byte b = this.data[i];
+        byte b0 = this.data[i];
+
         this.data = ArrayUtils.remove(this.data, i);
-        return ByteTag.valueOf(b);
+        return ByteTag.valueOf(b0);
     }
 
     @Override
@@ -171,13 +173,12 @@
         return 1;
     }
 
-    @Override
     public void clear() {
         this.data = new byte[0];
     }
 
     @Override
-    public StreamTagVisitor.ValueResult accept(StreamTagVisitor visitor) {
+    public StreamTagVisitor.b accept(StreamTagVisitor visitor) {
         return visitor.visit(this.data);
     }
 }
