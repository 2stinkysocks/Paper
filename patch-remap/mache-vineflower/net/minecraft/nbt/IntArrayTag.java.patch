--- a/net/minecraft/nbt/IntArrayTag.java
+++ b/net/minecraft/nbt/IntArrayTag.java
@@ -1,3 +1,4 @@
+// mc-dev import
 package net.minecraft.nbt;
 
 import java.io.DataInput;
@@ -8,34 +9,36 @@
 import org.apache.commons.lang3.ArrayUtils;
 
 public class IntArrayTag extends CollectionTag<IntTag> {
+
     private static final int SELF_SIZE_IN_BYTES = 24;
-    public static final TagType<IntArrayTag> TYPE = new TagType.VariableSize<IntArrayTag>() {
+    public static final TagType<IntArrayTag> TYPE = new TagType.b<IntArrayTag>() {
         @Override
-        public IntArrayTag load(DataInput dataInput, NbtAccounter nbtAccounter) throws IOException {
-            return new IntArrayTag(readAccounted(dataInput, nbtAccounter));
+        public IntArrayTag load(DataInput datainput, NbtAccounter nbtreadlimiter) throws IOException {
+            return new IntArrayTag(readAccounted(datainput, nbtreadlimiter));
         }
 
         @Override
-        public StreamTagVisitor.ValueResult parse(DataInput dataInput, StreamTagVisitor streamTagVisitor, NbtAccounter nbtAccounter) throws IOException {
-            return streamTagVisitor.visit(readAccounted(dataInput, nbtAccounter));
+        public StreamTagVisitor.b parse(DataInput datainput, StreamTagVisitor streamtagvisitor, NbtAccounter nbtreadlimiter) throws IOException {
+            return streamtagvisitor.visit(readAccounted(datainput, nbtreadlimiter));
         }
 
-        private static int[] readAccounted(DataInput dataInput, NbtAccounter nbtAccounter) throws IOException {
-            nbtAccounter.accountBytes(24L);
-            int _int = dataInput.readInt();
-            nbtAccounter.accountBytes(4L, (long)_int);
-            int[] ints = new int[_int];
+        private static int[] readAccounted(DataInput datainput, NbtAccounter nbtreadlimiter) throws IOException {
+            nbtreadlimiter.accountBytes(24L);
+            int i = datainput.readInt();
 
-            for (int i = 0; i < _int; i++) {
-                ints[i] = dataInput.readInt();
+            nbtreadlimiter.accountBytes(4L, (long) i);
+            int[] aint = new int[i];
+
+            for (int j = 0; j < i; ++j) {
+                aint[j] = datainput.readInt();
             }
 
-            return ints;
+            return aint;
         }
 
         @Override
-        public void skip(DataInput dataInput, NbtAccounter nbtAccounter) throws IOException {
-            dataInput.skipBytes(dataInput.readInt() * 4);
+        public void skip(DataInput datainput, NbtAccounter nbtreadlimiter) throws IOException {
+            datainput.skipBytes(datainput.readInt() * 4);
         }
 
         @Override
@@ -54,28 +57,34 @@
         this.data = data;
     }
 
-    public IntArrayTag(List<Integer> data) {
-        this(toArray(data));
+    public IntArrayTag(List<Integer> dataList) {
+        this(toArray(dataList));
     }
 
     private static int[] toArray(List<Integer> dataList) {
-        int[] ints = new int[dataList.size()];
+        int[] aint = new int[dataList.size()];
 
-        for (int i = 0; i < dataList.size(); i++) {
-            Integer integer = dataList.get(i);
-            ints[i] = integer == null ? 0 : integer;
+        for (int i = 0; i < dataList.size(); ++i) {
+            Integer integer = (Integer) dataList.get(i);
+
+            aint[i] = integer == null ? 0 : integer;
         }
 
-        return ints;
+        return aint;
     }
 
     @Override
     public void write(DataOutput output) throws IOException {
         output.writeInt(this.data.length);
+        int[] aint = this.data;
+        int i = aint.length;
 
-        for (int i : this.data) {
-            output.writeInt(i);
+        for (int j = 0; j < i; ++j) {
+            int k = aint[j];
+
+            output.writeInt(k);
         }
+
     }
 
     @Override
@@ -90,7 +99,7 @@
 
     @Override
     public TagType<IntArrayTag> getType() {
-        return TYPE;
+        return IntArrayTag.TYPE;
     }
 
     @Override
@@ -100,17 +109,16 @@
 
     @Override
     public IntArrayTag copy() {
-        int[] ints = new int[this.data.length];
-        System.arraycopy(this.data, 0, ints, 0, this.data.length);
-        return new IntArrayTag(ints);
+        int[] aint = new int[this.data.length];
+
+        System.arraycopy(this.data, 0, aint, 0, this.data.length);
+        return new IntArrayTag(aint);
     }
 
-    @Override
-    public boolean equals(Object other) {
-        return this == other || other instanceof IntArrayTag && Arrays.equals(this.data, ((IntArrayTag)other).data);
+    public boolean equals(Object object) {
+        return this == object ? true : object instanceof IntArrayTag && Arrays.equals(this.data, ((IntArrayTag) object).data);
     }
 
-    @Override
     public int hashCode() {
         return Arrays.hashCode(this.data);
     }
@@ -124,32 +132,29 @@
         visitor.visitIntArray(this);
     }
 
-    @Override
     public int size() {
         return this.data.length;
     }
 
-    @Override
     public IntTag get(int i) {
         return IntTag.valueOf(this.data[i]);
     }
 
-    @Override
-    public IntTag set(int i, IntTag intTag) {
-        int i1 = this.data[i];
-        this.data[i] = intTag.getAsInt();
-        return IntTag.valueOf(i1);
+    public IntTag set(int i, IntTag nbttagint) {
+        int j = this.data[i];
+
+        this.data[i] = nbttagint.getAsInt();
+        return IntTag.valueOf(j);
     }
 
-    @Override
-    public void add(int i, IntTag intTag) {
-        this.data = ArrayUtils.add(this.data, i, intTag.getAsInt());
+    public void add(int i, IntTag nbttagint) {
+        this.data = ArrayUtils.add(this.data, i, nbttagint.getAsInt());
     }
 
     @Override
     public boolean setTag(int index, Tag nbt) {
-        if (nbt instanceof NumericTag) {
-            this.data[index] = ((NumericTag)nbt).getAsInt();
+        if (nbt instanceof NBTNumber) {
+            this.data[index] = ((NBTNumber) nbt).getAsInt();
             return true;
         } else {
             return false;
@@ -158,8 +163,8 @@
 
     @Override
     public boolean addTag(int index, Tag nbt) {
-        if (nbt instanceof NumericTag) {
-            this.data = ArrayUtils.add(this.data, index, ((NumericTag)nbt).getAsInt());
+        if (nbt instanceof NBTNumber) {
+            this.data = ArrayUtils.add(this.data, index, ((NBTNumber) nbt).getAsInt());
             return true;
         } else {
             return false;
@@ -168,9 +173,10 @@
 
     @Override
     public IntTag remove(int i) {
-        int i1 = this.data[i];
+        int j = this.data[i];
+
         this.data = ArrayUtils.remove(this.data, i);
-        return IntTag.valueOf(i1);
+        return IntTag.valueOf(j);
     }
 
     @Override
@@ -178,13 +184,12 @@
         return 3;
     }
 
-    @Override
     public void clear() {
         this.data = new int[0];
     }
 
     @Override
-    public StreamTagVisitor.ValueResult accept(StreamTagVisitor visitor) {
+    public StreamTagVisitor.b accept(StreamTagVisitor visitor) {
         return visitor.visit(this.data);
     }
 }
